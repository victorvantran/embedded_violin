
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a220  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4ec  0800a4ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4f4  0800a4f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b64  20000074  0800a570  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bd8  0800a570  00021bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e9d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eae  00000000  00000000  00042f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  00046df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b8  00000000  00000000  00048910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005797  00000000  00000000  0004a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9b5  00000000  00000000  0004fa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001130b3  00000000  00000000  0006b414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e4c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cdc  00000000  00000000  0017e51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a398 	.word	0x0800a398

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a398 	.word	0x0800a398

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000dac:	1d39      	adds	r1, r7, #4
 8000dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db2:	2201      	movs	r2, #1
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <__io_putchar+0x20>)
 8000db6:	f005 f93d 	bl	8006034 <HAL_UART_Transmit>
	return ch;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20001ab4 	.word	0x20001ab4

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 ff96 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f834 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 faa4 	bl	8001320 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd8:	f000 fa72 	bl	80012c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ddc:	f000 f8b6 	bl	8000f4c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000de0:	f000 f92a 	bl	8001038 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000de4:	f000 fa12 	bl	800120c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000de8:	f000 f9b6 	bl	8001158 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim1);
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <main+0x5c>)
 8000dee:	f003 fff3 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <main+0x5c>)
 8000df6:	f004 f8b7 	bl	8004f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <main+0x60>)
 8000dfe:	f004 f8b3 	bl	8004f68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e02:	2100      	movs	r1, #0
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <main+0x64>)
 8000e06:	f004 f8af 	bl	8004f68 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e0a:	f005 fddd 	bl	80069c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of transDataTask */
  transDataTaskHandle = osThreadNew(StartTransferDataTask, NULL, &transDataTask_attributes);
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <main+0x68>)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <main+0x6c>)
 8000e14:	f005 fe22 	bl	8006a5c <osThreadNew>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <main+0x70>)
 8000e1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e1e:	f005 fdf7 	bl	8006a10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <main+0x5a>
 8000e24:	20001a1c 	.word	0x20001a1c
 8000e28:	20001a68 	.word	0x20001a68
 8000e2c:	20001968 	.word	0x20001968
 8000e30:	0800a3e8 	.word	0x0800a3e8
 8000e34:	08001499 	.word	0x08001499
 8000e38:	20001a18 	.word	0x20001a18

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0b8      	sub	sp, #224	; 0xe0
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e46:	2244      	movs	r2, #68	; 0x44
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f008 fb46 	bl	80094dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	463b      	mov	r3, r7
 8000e62:	2288      	movs	r2, #136	; 0x88
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f008 fb38 	bl	80094dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e92:	230a      	movs	r3, #10
 8000e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fc56 	bl	8003760 <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eba:	f000 fc25 	bl	8001708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000edc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 f822 	bl	8003f2c <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eee:	f000 fc0b 	bl	8001708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000ef2:	f244 0302 	movw	r3, #16386	; 0x4002
 8000ef6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f02:	2302      	movs	r3, #2
 8000f04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f1e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fa3a 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f2e:	f000 fbeb 	bl	8001708 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f36:	f002 fbbd 	bl	80036b4 <HAL_PWREx_ControlVoltageScaling>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000f40:	f000 fbe2 	bl	8001708 <Error_Handler>
  }
}
 8000f44:	bf00      	nop
 8000f46:	37e0      	adds	r7, #224	; 0xe0
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f70:	4a2f      	ldr	r2, [pc, #188]	; (8001030 <MX_ADC1_Init+0xe4>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f8e:	2204      	movs	r2, #4
 8000f90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <MX_ADC1_Init+0xe0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fce:	4817      	ldr	r0, [pc, #92]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fd0:	f001 f8b8 	bl	8002144 <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fda:	f000 fb95 	bl	8001708 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <MX_ADC1_Init+0xe0>)
 8000fea:	f002 f819 	bl	8003020 <HAL_ADCEx_MultiModeConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ff4:	f000 fb88 	bl	8001708 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_ADC1_Init+0xe8>)
 8000ffa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001004:	237f      	movs	r3, #127	; 0x7f
 8001006:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001008:	2304      	movs	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_ADC1_Init+0xe0>)
 8001016:	f001 fb8b 	bl	8002730 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001020:	f000 fb72 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200019b4 	.word	0x200019b4
 8001030:	50040000 	.word	0x50040000
 8001034:	14f00020 	.word	0x14f00020

08001038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b096      	sub	sp, #88	; 0x58
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	222c      	movs	r2, #44	; 0x2c
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f008 fa39 	bl	80094dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800106a:	4b39      	ldr	r3, [pc, #228]	; (8001150 <MX_TIM1_Init+0x118>)
 800106c:	4a39      	ldr	r2, [pc, #228]	; (8001154 <MX_TIM1_Init+0x11c>)
 800106e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80 - 1;
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <MX_TIM1_Init+0x118>)
 8001072:	224f      	movs	r2, #79	; 0x4f
 8001074:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b36      	ldr	r3, [pc, #216]	; (8001150 <MX_TIM1_Init+0x118>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800107c:	4b34      	ldr	r3, [pc, #208]	; (8001150 <MX_TIM1_Init+0x118>)
 800107e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001082:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <MX_TIM1_Init+0x118>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <MX_TIM1_Init+0x118>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <MX_TIM1_Init+0x118>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001096:	482e      	ldr	r0, [pc, #184]	; (8001150 <MX_TIM1_Init+0x118>)
 8001098:	f003 ff0e 	bl	8004eb8 <HAL_TIM_PWM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 fb31 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b6:	4619      	mov	r1, r3
 80010b8:	4825      	ldr	r0, [pc, #148]	; (8001150 <MX_TIM1_Init+0x118>)
 80010ba:	f004 fe49 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010c4:	f000 fb20 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c8:	2360      	movs	r3, #96	; 0x60
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4818      	ldr	r0, [pc, #96]	; (8001150 <MX_TIM1_Init+0x118>)
 80010ee:	f004 f961 	bl	80053b4 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010f8:	f000 fb06 	bl	8001708 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800111e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM1_Init+0x118>)
 8001132:	f004 fe95 	bl	8005e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800113c:	f000 fae4 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM1_Init+0x118>)
 8001142:	f000 fb99 	bl	8001878 <HAL_TIM_MspPostInit>

}
 8001146:	bf00      	nop
 8001148:	3758      	adds	r7, #88	; 0x58
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20001a1c 	.word	0x20001a1c
 8001154:	40012c00 	.word	0x40012c00

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
 8001178:	615a      	str	r2, [r3, #20]
 800117a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_TIM2_Init+0xb0>)
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <MX_TIM2_Init+0xb0>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_TIM2_Init+0xb0>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_TIM2_Init+0xb0>)
 8001192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_TIM2_Init+0xb0>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011a6:	f003 fe87 	bl	8004eb8 <HAL_TIM_PWM_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011b0:	f000 faaa 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011c4:	f004 fdc4 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011ce:	f000 fa9b 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d2:	2360      	movs	r3, #96	; 0x60
 80011d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011ea:	f004 f8e3 	bl	80053b4 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011f4:	f000 fa88 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM2_Init+0xb0>)
 80011fa:	f000 fb3d 	bl	8001878 <HAL_TIM_MspPostInit>

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20001a68 	.word	0x20001a68

0800120c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	615a      	str	r2, [r3, #20]
 800122e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <MX_TIM3_Init+0xac>)
 8001232:	4a22      	ldr	r2, [pc, #136]	; (80012bc <MX_TIM3_Init+0xb0>)
 8001234:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80 - 1;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_TIM3_Init+0xac>)
 8001238:	224f      	movs	r2, #79	; 0x4f
 800123a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_TIM3_Init+0xac>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM3_Init+0xac>)
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM3_Init+0xac>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM3_Init+0xac>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <MX_TIM3_Init+0xac>)
 8001258:	f003 fe2e 	bl	8004eb8 <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001262:	f000 fa51 	bl	8001708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	4810      	ldr	r0, [pc, #64]	; (80012b8 <MX_TIM3_Init+0xac>)
 8001276:	f004 fd6b 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001280:	f000 fa42 	bl	8001708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001284:	2360      	movs	r3, #96	; 0x60
 8001286:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <MX_TIM3_Init+0xac>)
 800129c:	f004 f88a 	bl	80053b4 <HAL_TIM_PWM_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012a6:	f000 fa2f 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <MX_TIM3_Init+0xac>)
 80012ac:	f000 fae4 	bl	8001878 <HAL_TIM_MspPostInit>

}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20001968 	.word	0x20001968
 80012bc:	40000400 	.word	0x40000400

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <MX_USART2_UART_Init+0x5c>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART2_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART2_UART_Init+0x58>)
 8001304:	f004 fe48 	bl	8005f98 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800130e:	f000 f9fb 	bl	8001708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20001ab4 	.word	0x20001ab4
 800131c:	40004400 	.word	0x40004400

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_GPIO_Init+0x74>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <MX_GPIO_Init+0x74>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_GPIO_Init+0x74>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_GPIO_Init+0x74>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <MX_GPIO_Init+0x74>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_GPIO_Init+0x74>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_GPIO_Init+0x74>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <MX_GPIO_Init+0x74>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_GPIO_Init+0x74>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_GPIO_Init+0x74>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <MX_GPIO_Init+0x74>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_GPIO_Init+0x74>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000

08001398 <movingAverage>:




float movingAverage(float avg, float new)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	ed87 0a01 	vstr	s0, [r7, #4]
 80013a2:	edc7 0a00 	vstr	s1, [r7]
	return (avg - avg/50.0 + new/50.0);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff f8c6 	bl	8000538 <__aeabi_f2d>
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f8c1 	bl	8000538 <__aeabi_f2d>
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <movingAverage+0x74>)
 80013bc:	f7ff fa3e 	bl	800083c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4620      	mov	r0, r4
 80013c6:	4629      	mov	r1, r5
 80013c8:	f7fe ff56 	bl	8000278 <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4614      	mov	r4, r2
 80013d2:	461d      	mov	r5, r3
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f7ff f8af 	bl	8000538 <__aeabi_f2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <movingAverage+0x74>)
 80013e0:	f7ff fa2c 	bl	800083c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7fe ff46 	bl	800027c <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fb08 	bl	8000a0c <__aeabi_d2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	ee07 3a90 	vmov	s15, r3
}
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bdb0      	pop	{r4, r5, r7, pc}
 800140c:	40490000 	.word	0x40490000

08001410 <getPeriod>:


int16_t getPeriod(float v, float sLength, int16_t raw_adc)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0a03 	vstr	s0, [r7, #12]
 800141a:	edc7 0a02 	vstr	s1, [r7, #8]
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
	// scale = 5.772727
	// Need to recalibrate the starting and end adc
	if (raw_adc < 300 || raw_adc > 2205) return 0;
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800142a:	db05      	blt.n	8001438 <getPeriod+0x28>
 800142c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001430:	f640 029d 	movw	r2, #2205	; 0x89d
 8001434:	4293      	cmp	r3, r2
 8001436:	dd01      	ble.n	800143c <getPeriod+0x2c>
 8001438:	2300      	movs	r3, #0
 800143a:	e020      	b.n	800147e <getPeriod+0x6e>
	return (int16_t)( ((2*(sLength - (raw_adc/(7.816666666f)) + 51.9685f))/v) * 1000000 );
 800143c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001448:	eddf 6a10 	vldr	s13, [pc, #64]	; 800148c <getPeriod+0x7c>
 800144c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001450:	ed97 7a02 	vldr	s14, [r7, #8]
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001490 <getPeriod+0x80>
 800145c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001460:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001464:	ed97 7a03 	vldr	s14, [r7, #12]
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001494 <getPeriod+0x84>
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001478:	ee17 3a90 	vmov	r3, s15
 800147c:	b21b      	sxth	r3, r3
	//return (int16_t)( ((2*(sLength - raw_adc/(5.772727f)))/v) * 1000000 );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40fa2222 	.word	0x40fa2222
 8001490:	424fdfbe 	.word	0x424fdfbe
 8001494:	49742400 	.word	0x49742400

08001498 <StartTransferDataTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTransferDataTask */
void StartTransferDataTask(void *argument)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint16_t prevData = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	83fb      	strh	r3, [r7, #30]
	uint16_t data = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	823b      	strh	r3, [r7, #16]



	int32_t j = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]

	uint16_t prevMovAvg = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	83bb      	strh	r3, [r7, #28]
	uint16_t movAvg = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	837b      	strh	r3, [r7, #26]

	float avg = 0;
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
	float new = 0;
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
	uint8_t count = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	74fb      	strb	r3, [r7, #19]
	/* Infinite loop */
  for(;;)
  {


  	HAL_ADC_Start(&hadc1);
 80014c4:	486c      	ldr	r0, [pc, #432]	; (8001678 <StartTransferDataTask+0x1e0>)
 80014c6:	f000 ff93 	bl	80023f0 <HAL_ADC_Start>
  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ce:	486a      	ldr	r0, [pc, #424]	; (8001678 <StartTransferDataTask+0x1e0>)
 80014d0:	f001 f848 	bl	8002564 <HAL_ADC_PollForConversion>
  	data = HAL_ADC_GetValue(&hadc1);
 80014d4:	4868      	ldr	r0, [pc, #416]	; (8001678 <StartTransferDataTask+0x1e0>)
 80014d6:	f001 f91d 	bl	8002714 <HAL_ADC_GetValue>
 80014da:	4603      	mov	r3, r0
 80014dc:	823b      	strh	r3, [r7, #16]
  	//HAL_UART_Transmit(&huart2, (uint8_t *)&adc_raw, 2, HAL_MAX_DELAY);
    //		osDelay(10);
    new = (float)data;
 80014de:	8a3b      	ldrh	r3, [r7, #16]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e8:	edc7 7a02 	vstr	s15, [r7, #8]
    //avg = movingAverage(avg, new);

    if (count < 20)
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	2b13      	cmp	r3, #19
 80014f0:	d86d      	bhi.n	80015ce <StartTransferDataTask+0x136>
    {
    	if (count > 9)
 80014f2:	7cfb      	ldrb	r3, [r7, #19]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d901      	bls.n	80014fc <StartTransferDataTask+0x64>
    	{
    		avg = new;
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	617b      	str	r3, [r7, #20]
    	}
    	if (count > 10)
 80014fc:	7cfb      	ldrb	r3, [r7, #19]
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d907      	bls.n	8001512 <StartTransferDataTask+0x7a>
    	{
    		avg = movingAverage(avg, new);
 8001502:	edd7 0a02 	vldr	s1, [r7, #8]
 8001506:	ed97 0a05 	vldr	s0, [r7, #20]
 800150a:	f7ff ff45 	bl	8001398 <movingAverage>
 800150e:	ed87 0a05 	vstr	s0, [r7, #20]
    	}
    	count++;
 8001512:	7cfb      	ldrb	r3, [r7, #19]
 8001514:	3301      	adds	r3, #1
 8001516:	74fb      	strb	r3, [r7, #19]
    	if (TIM1->ARR == 0 && count == 20)
 8001518:	4b58      	ldr	r3, [pc, #352]	; (800167c <StartTransferDataTask+0x1e4>)
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d165      	bne.n	80015ec <StartTransferDataTask+0x154>
 8001520:	7cfb      	ldrb	r3, [r7, #19]
 8001522:	2b14      	cmp	r3, #20
 8001524:	d162      	bne.n	80015ec <StartTransferDataTask+0x154>
    	{
  			period = getPeriod(128772.0f, 328.5f, movAvg);
 8001526:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800152a:	4618      	mov	r0, r3
 800152c:	eddf 0a54 	vldr	s1, [pc, #336]	; 8001680 <StartTransferDataTask+0x1e8>
 8001530:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001684 <StartTransferDataTask+0x1ec>
 8001534:	f7ff ff6c 	bl	8001410 <getPeriod>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b52      	ldr	r3, [pc, #328]	; (8001688 <StartTransferDataTask+0x1f0>)
 800153e:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim1, MIN(__HAL_TIM_GET_COUNTER(&htim1), period/2 - 1));
 8001540:	4b52      	ldr	r3, [pc, #328]	; (800168c <StartTransferDataTask+0x1f4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	4a50      	ldr	r2, [pc, #320]	; (8001688 <StartTransferDataTask+0x1f0>)
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	b292      	uxth	r2, r2
 800154c:	0852      	lsrs	r2, r2, #1
 800154e:	b292      	uxth	r2, r2
 8001550:	3a01      	subs	r2, #1
 8001552:	4293      	cmp	r3, r2
 8001554:	d203      	bcs.n	800155e <StartTransferDataTask+0xc6>
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <StartTransferDataTask+0x1f4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	e005      	b.n	800156a <StartTransferDataTask+0xd2>
 800155e:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <StartTransferDataTask+0x1f0>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	4a48      	ldr	r2, [pc, #288]	; (800168c <StartTransferDataTask+0x1f4>)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	6253      	str	r3, [r2, #36]	; 0x24
				TIM1->ARR = (period);
 8001570:	4b45      	ldr	r3, [pc, #276]	; (8001688 <StartTransferDataTask+0x1f0>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <StartTransferDataTask+0x1e4>)
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
				htim1.Instance->CCR1 = TIM1->ARR/2;
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <StartTransferDataTask+0x1e4>)
 800157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <StartTransferDataTask+0x1f4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0852      	lsrs	r2, r2, #1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34


				__HAL_TIM_SET_COUNTER(&htim3, MIN(__HAL_TIM_GET_COUNTER(&htim3), period/2 - 1));
 8001586:	4b42      	ldr	r3, [pc, #264]	; (8001690 <StartTransferDataTask+0x1f8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	4a3e      	ldr	r2, [pc, #248]	; (8001688 <StartTransferDataTask+0x1f0>)
 800158e:	8812      	ldrh	r2, [r2, #0]
 8001590:	b292      	uxth	r2, r2
 8001592:	0852      	lsrs	r2, r2, #1
 8001594:	b292      	uxth	r2, r2
 8001596:	3a01      	subs	r2, #1
 8001598:	4293      	cmp	r3, r2
 800159a:	d203      	bcs.n	80015a4 <StartTransferDataTask+0x10c>
 800159c:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <StartTransferDataTask+0x1f8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	e005      	b.n	80015b0 <StartTransferDataTask+0x118>
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <StartTransferDataTask+0x1f0>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3b01      	subs	r3, #1
 80015b0:	4a37      	ldr	r2, [pc, #220]	; (8001690 <StartTransferDataTask+0x1f8>)
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	6253      	str	r3, [r2, #36]	; 0x24
				TIM3->ARR = (period);
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <StartTransferDataTask+0x1f0>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <StartTransferDataTask+0x1fc>)
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
				htim3.Instance->CCR1 = TIM3->ARR/2;
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <StartTransferDataTask+0x1fc>)
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <StartTransferDataTask+0x1f8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0852      	lsrs	r2, r2, #1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
 80015cc:	e00e      	b.n	80015ec <StartTransferDataTask+0x154>
    	}
    }
    else
    {
  		avg = movingAverage(avg, new);
 80015ce:	edd7 0a02 	vldr	s1, [r7, #8]
 80015d2:	ed97 0a05 	vldr	s0, [r7, #20]
 80015d6:	f7ff fedf 	bl	8001398 <movingAverage>
 80015da:	ed87 0a05 	vstr	s0, [r7, #20]
      movAvg = (uint16_t)(avg);
 80015de:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e6:	ee17 3a90 	vmov	r3, s15
 80015ea:	837b      	strh	r3, [r7, #26]



    //printf("mm: %u\r\n", (uint16_t)(movAvg/7.816666666f));

		printf("Period: %u\r\n", period);
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <StartTransferDataTask+0x1f0>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4619      	mov	r1, r3
 80015f4:	4828      	ldr	r0, [pc, #160]	; (8001698 <StartTransferDataTask+0x200>)
 80015f6:	f007 ff79 	bl	80094ec <iprintf>
		//period = getPeriod(128772.0f, 328.5f, movAvg);
		//printf("HZ: %u\r\n", (uint16_t)(1000000.0/(float)period));
		//printf("Period: %u\r\n", period);


		if ((prevMovAvg - movAvg) > 1 || (prevMovAvg - movAvg) < -1)
 80015fa:	8bba      	ldrh	r2, [r7, #28]
 80015fc:	8b7b      	ldrh	r3, [r7, #26]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	dc05      	bgt.n	8001610 <StartTransferDataTask+0x178>
 8001604:	8bba      	ldrh	r2, [r7, #28]
 8001606:	8b7b      	ldrh	r3, [r7, #26]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800160e:	da15      	bge.n	800163c <StartTransferDataTask+0x1a4>
		{
			if (count >= 20)
 8001610:	7cfb      	ldrb	r3, [r7, #19]
 8001612:	2b13      	cmp	r3, #19
 8001614:	d90d      	bls.n	8001632 <StartTransferDataTask+0x19a>
			{
				period = getPeriod(128772.0f, 328.5f, movAvg);
 8001616:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800161a:	4618      	mov	r0, r3
 800161c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001680 <StartTransferDataTask+0x1e8>
 8001620:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001684 <StartTransferDataTask+0x1ec>
 8001624:	f7ff fef4 	bl	8001410 <getPeriod>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <StartTransferDataTask+0x1f0>)
 800162e:	801a      	strh	r2, [r3, #0]
 8001630:	e002      	b.n	8001638 <StartTransferDataTask+0x1a0>
			}
			else
			{
				period = 0;
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <StartTransferDataTask+0x1f0>)
 8001634:	2200      	movs	r2, #0
 8001636:	801a      	strh	r2, [r3, #0]
			*/


			//prevPeriod = period;
			//prevData = data;
			prevMovAvg = movAvg;
 8001638:	8b7b      	ldrh	r3, [r7, #26]
 800163a:	83bb      	strh	r3, [r7, #28]
		}
		osDelay(1);
 800163c:	2001      	movs	r0, #1
 800163e:	f005 fa9f 	bl	8006b80 <osDelay>

		if (data == 0)
 8001642:	8a3b      	ldrh	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d104      	bne.n	8001652 <StartTransferDataTask+0x1ba>
		{
			movAvg = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	837b      	strh	r3, [r7, #26]
			count = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	74fb      	strb	r3, [r7, #19]
 8001650:	e00e      	b.n	8001670 <StartTransferDataTask+0x1d8>
		}
		else if ((data - prevData) > 100 || (data - prevData) < -100)
 8001652:	8a3a      	ldrh	r2, [r7, #16]
 8001654:	8bfb      	ldrh	r3, [r7, #30]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	dc05      	bgt.n	8001668 <StartTransferDataTask+0x1d0>
 800165c:	8a3a      	ldrh	r2, [r7, #16]
 800165e:	8bfb      	ldrh	r3, [r7, #30]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001666:	da03      	bge.n	8001670 <StartTransferDataTask+0x1d8>
    {
    	movAvg = data;
 8001668:	8a3b      	ldrh	r3, [r7, #16]
 800166a:	837b      	strh	r3, [r7, #26]
    	count = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	74fb      	strb	r3, [r7, #19]
    }
    prevData = data;
 8001670:	8a3b      	ldrh	r3, [r7, #16]
 8001672:	83fb      	strh	r3, [r7, #30]
  	HAL_ADC_Start(&hadc1);
 8001674:	e726      	b.n	80014c4 <StartTransferDataTask+0x2c>
 8001676:	bf00      	nop
 8001678:	200019b4 	.word	0x200019b4
 800167c:	40012c00 	.word	0x40012c00
 8001680:	43a44000 	.word	0x43a44000
 8001684:	47fb8200 	.word	0x47fb8200
 8001688:	20000090 	.word	0x20000090
 800168c:	20001a1c 	.word	0x20001a1c
 8001690:	20001968 	.word	0x20001968
 8001694:	40000400 	.word	0x40000400
 8001698:	0800a3c0 	.word	0x0800a3c0

0800169c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d115      	bne.n	80016da <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		TIM1->ARR = (period);
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1.Instance->CCR1 = TIM1->ARR/2;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0852      	lsrs	r2, r2, #1
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34

		TIM3->ARR = (period);
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
		htim3.Instance->CCR1 = TIM3->ARR/2;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80016d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0852      	lsrs	r2, r2, #1
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d101      	bne.n	80016e8 <HAL_TIM_PeriodElapsedCallback+0x4c>
    HAL_IncTick();
 80016e4:	f000 fb2a 	bl	8001d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40012c00 	.word	0x40012c00
 80016f4:	20000090 	.word	0x20000090
 80016f8:	20001a1c 	.word	0x20001a1c
 80016fc:	40000400 	.word	0x40000400
 8001700:	20001968 	.word	0x20001968
 8001704:	40001000 	.word	0x40001000

08001708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001710:	e7fe      	b.n	8001710 <Error_Handler+0x8>
	...

08001714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_MspInit+0x4c>)
 800171c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <HAL_MspInit+0x4c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6613      	str	r3, [r2, #96]	; 0x60
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_MspInit+0x4c>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_MspInit+0x4c>)
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_MspInit+0x4c>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6593      	str	r3, [r2, #88]	; 0x58
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_MspInit+0x4c>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	210f      	movs	r1, #15
 800174e:	f06f 0001 	mvn.w	r0, #1
 8001752:	f001 fdcd 	bl	80032f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_ADC_MspInit+0x74>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d124      	bne.n	80017d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_ADC_MspInit+0x78>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_ADC_MspInit+0x78>)
 800178c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_ADC_MspInit+0x78>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_ADC_MspInit+0x78>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_ADC_MspInit+0x78>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_ADC_MspInit+0x78>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017ba:	230b      	movs	r3, #11
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017cc:	f001 fdba 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	50040000 	.word	0x50040000
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1f      	ldr	r2, [pc, #124]	; (800186c <HAL_TIM_PWM_MspInit+0x8c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d114      	bne.n	800181c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 80017f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017fc:	6613      	str	r3, [r2, #96]	; 0x60
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	2019      	movs	r0, #25
 8001810:	f001 fd6e 	bl	80032f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001814:	2019      	movs	r0, #25
 8001816:	f001 fd87 	bl	8003328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800181a:	e022      	b.n	8001862 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d10c      	bne.n	8001840 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
}
 800183e:	e010      	b.n	8001862 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_TIM_PWM_MspInit+0x94>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10b      	bne.n	8001862 <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6593      	str	r3, [r2, #88]	; 0x58
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_TIM_PWM_MspInit+0x90>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40012c00 	.word	0x40012c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40000400 	.word	0x40000400

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a35      	ldr	r2, [pc, #212]	; (800196c <HAL_TIM_MspPostInit+0xf4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d11e      	bne.n	80018d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f001 fd37 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018d6:	e044      	b.n	8001962 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e0:	d11d      	bne.n	800191e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a22      	ldr	r2, [pc, #136]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018fa:	2320      	movs	r3, #32
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800190a:	2301      	movs	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001918:	f001 fd14 	bl	8003344 <HAL_GPIO_Init>
}
 800191c:	e021      	b.n	8001962 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM3)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <HAL_TIM_MspPostInit+0xfc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d11c      	bne.n	8001962 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_TIM_MspPostInit+0xf8>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001940:	2340      	movs	r3, #64	; 0x40
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001950:	2302      	movs	r3, #2
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f001 fcf1 	bl	8003344 <HAL_GPIO_Init>
}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40000400 	.word	0x40000400

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_UART_MspInit+0x7c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d128      	bne.n	80019ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_UART_MspInit+0x80>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <HAL_UART_MspInit+0x80>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_UART_MspInit+0x80>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_UART_MspInit+0x80>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_UART_MspInit+0x80>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <HAL_UART_MspInit+0x80>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019ca:	230c      	movs	r3, #12
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019da:	2307      	movs	r3, #7
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f001 fcac 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40004400 	.word	0x40004400
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	2036      	movs	r0, #54	; 0x36
 8001a12:	f001 fc6d 	bl	80032f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a16:	2036      	movs	r0, #54	; 0x36
 8001a18:	f001 fc86 	bl	8003328 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_InitTick+0x9c>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <HAL_InitTick+0x9c>)
 8001a22:	f043 0310 	orr.w	r3, r3, #16
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_InitTick+0x9c>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a34:	f107 0210 	add.w	r2, r7, #16
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fc1a 	bl	8004278 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a44:	f002 fbec 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8001a48:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_InitTick+0xa0>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0c9b      	lsrs	r3, r3, #18
 8001a54:	3b01      	subs	r3, #1
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a7a:	f003 f94b 	bl	8004d14 <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a86:	f003 f9a7 	bl	8004dd8 <HAL_TIM_Base_Start_IT>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	431bde83 	.word	0x431bde83
 8001aa0:	20001b38 	.word	0x20001b38
 8001aa4:	40001000 	.word	0x40001000

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <NMI_Handler+0x4>

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ada:	f003 fb4b 	bl	8005174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20001a1c 	.word	0x20001a1c

08001ae8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TIM6_DAC_IRQHandler+0x10>)
 8001aee:	f003 fb41 	bl	8005174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20001b38 	.word	0x20001b38

08001afc <_read>:
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e00a      	b.n	8001b24 <_read+0x28>
 8001b0e:	f3af 8000 	nop.w
 8001b12:	4601      	mov	r1, r0
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	60ba      	str	r2, [r7, #8]
 8001b1a:	b2ca      	uxtb	r2, r1
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf0      	blt.n	8001b0e <_read+0x12>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_write>:
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e009      	b.n	8001b5c <_write+0x26>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f927 	bl	8000da4 <__io_putchar>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dbf1      	blt.n	8001b48 <_write+0x12>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <_close>:
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_fstat>:
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	2300      	movs	r3, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <_isatty>:
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_lseek>:
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <_sbrk>:
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
 8001c08:	f007 fc30 	bl	800946c <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20018000 	.word	0x20018000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	20000094 	.word	0x20000094
 8001c40:	20001bd8 	.word	0x20001bd8

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <SystemInit+0x5c>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <SystemInit+0x5c>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <SystemInit+0x60>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <SystemInit+0x60>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <SystemInit+0x60>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <SystemInit+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <SystemInit+0x60>)
 8001c70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <SystemInit+0x60>)
 8001c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <SystemInit+0x60>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <SystemInit+0x60>)
 8001c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SystemInit+0x60>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <Reset_Handler>:
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce0 <LoopForever+0x2>
 8001cac:	f7ff ffca 	bl	8001c44 <SystemInit>
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	e003      	b.n	8001cbc <LoopCopyDataInit>

08001cb4 <CopyDataInit>:
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <LoopForever+0x6>)
 8001cb6:	585b      	ldr	r3, [r3, r1]
 8001cb8:	5043      	str	r3, [r0, r1]
 8001cba:	3104      	adds	r1, #4

08001cbc <LoopCopyDataInit>:
 8001cbc:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <LoopForever+0xa>)
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <LoopForever+0xe>)
 8001cc0:	1842      	adds	r2, r0, r1
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3f6      	bcc.n	8001cb4 <CopyDataInit>
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <LoopForever+0x12>)
 8001cc8:	e002      	b.n	8001cd0 <LoopFillZerobss>

08001cca <FillZerobss>:
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f842 3b04 	str.w	r3, [r2], #4

08001cd0 <LoopFillZerobss>:
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <LoopForever+0x16>)
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3f9      	bcc.n	8001cca <FillZerobss>
 8001cd6:	f007 fbcf 	bl	8009478 <__libc_init_array>
 8001cda:	f7ff f875 	bl	8000dc8 <main>

08001cde <LoopForever>:
 8001cde:	e7fe      	b.n	8001cde <LoopForever>
 8001ce0:	20018000 	.word	0x20018000
 8001ce4:	0800a4fc 	.word	0x0800a4fc
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000074 	.word	0x20000074
 8001cf0:	20000074 	.word	0x20000074
 8001cf4:	20001bd8 	.word	0x20001bd8

08001cf8 <ADC1_2_IRQHandler>:
 8001cf8:	e7fe      	b.n	8001cf8 <ADC1_2_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_Init+0x3c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <HAL_Init+0x3c>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d12:	2003      	movs	r0, #3
 8001d14:	f001 fae1 	bl	80032da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff fe6f 	bl	80019fc <HAL_InitTick>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	e001      	b.n	8001d2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d2a:	f7ff fcf3 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	20001b84 	.word	0x20001b84

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20001b84 	.word	0x20001b84

08001d7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	609a      	str	r2, [r3, #8]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3360      	adds	r3, #96	; 0x60
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <LL_ADC_SetOffset+0x44>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	03fff000 	.word	0x03fff000

08001e2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3360      	adds	r3, #96	; 0x60
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3360      	adds	r3, #96	; 0x60
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3330      	adds	r3, #48	; 0x30
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	4413      	add	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	211f      	movs	r1, #31
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	f003 011f 	and.w	r1, r3, #31
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	431a      	orrs	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f00:	bf00      	nop
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0e5b      	lsrs	r3, r3, #25
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	0d1b      	lsrs	r3, r3, #20
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2107      	movs	r1, #7
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	401a      	ands	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0d1b      	lsrs	r3, r3, #20
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0318 	and.w	r3, r3, #24
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f88:	40d9      	lsrs	r1, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f92:	431a      	orrs	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	0007ffff 	.word	0x0007ffff

08001fac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6093      	str	r3, [r2, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800201c:	d101      	bne.n	8002022 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002044:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800206c:	d101      	bne.n	8002072 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_IsEnabled+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_IsEnabled+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e2:	f043 0204 	orr.w	r2, r3, #4
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d101      	bne.n	800210e <LL_ADC_REG_IsConversionOngoing+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b08      	cmp	r3, #8
 800212e:	d101      	bne.n	8002134 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e136      	b.n	80023cc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff faf9 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff3f 	bl	8002008 <LL_ADC_IsDeepPowerDownEnabled>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff25 	bl	8001fe4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff5a 	bl	8002058 <LL_ADC_IsInternalRegulatorEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff3e 	bl	8002030 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b4:	4b87      	ldr	r3, [pc, #540]	; (80023d4 <HAL_ADC_Init+0x290>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	4a87      	ldr	r2, [pc, #540]	; (80023d8 <HAL_ADC_Init+0x294>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021c8:	e002      	b.n	80021d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff3c 	bl	8002058 <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff75 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 800220c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 80cf 	bne.w	80023ba <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80cb 	bne.w	80023ba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800222c:	f043 0202 	orr.w	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff35 	bl	80020a8 <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d115      	bne.n	8002270 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002244:	4865      	ldr	r0, [pc, #404]	; (80023dc <HAL_ADC_Init+0x298>)
 8002246:	f7ff ff2f 	bl	80020a8 <LL_ADC_IsEnabled>
 800224a:	4604      	mov	r4, r0
 800224c:	4864      	ldr	r0, [pc, #400]	; (80023e0 <HAL_ADC_Init+0x29c>)
 800224e:	f7ff ff2b 	bl	80020a8 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	431c      	orrs	r4, r3
 8002256:	4863      	ldr	r0, [pc, #396]	; (80023e4 <HAL_ADC_Init+0x2a0>)
 8002258:	f7ff ff26 	bl	80020a8 <LL_ADC_IsEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	4323      	orrs	r3, r4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4619      	mov	r1, r3
 800226a:	485f      	ldr	r0, [pc, #380]	; (80023e8 <HAL_ADC_Init+0x2a4>)
 800226c:	f7ff fd86 	bl	8001d7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7e5b      	ldrb	r3, [r3, #25]
 8002274:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800227a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002280:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002286:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800228e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d106      	bne.n	80022ac <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	3b01      	subs	r3, #1
 80022a4:	045b      	lsls	r3, r3, #17
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_ADC_Init+0x2a8>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff08 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 80022e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff15 	bl	800211c <LL_ADC_INJ_IsConversionOngoing>
 80022f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d13d      	bne.n	8002376 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d13a      	bne.n	8002376 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002304:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231c:	f023 0302 	bic.w	r3, r3, #2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	69b9      	ldr	r1, [r7, #24]
 8002326:	430b      	orrs	r3, r1
 8002328:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002330:	2b01      	cmp	r3, #1
 8002332:	d118      	bne.n	8002366 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800233e:	f023 0304 	bic.w	r3, r3, #4
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002356:	430a      	orrs	r2, r1
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	e007      	b.n	8002376 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10c      	bne.n	8002398 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	f023 010f 	bic.w	r1, r3, #15
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
 8002396:	e007      	b.n	80023a8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 020f 	bic.w	r2, r2, #15
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f023 0303 	bic.w	r3, r3, #3
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
 80023b8:	e007      	b.n	80023ca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3724      	adds	r7, #36	; 0x24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd90      	pop	{r4, r7, pc}
 80023d4:	20000000 	.word	0x20000000
 80023d8:	053e2d63 	.word	0x053e2d63
 80023dc:	50040000 	.word	0x50040000
 80023e0:	50040100 	.word	0x50040100
 80023e4:	50040200 	.word	0x50040200
 80023e8:	50040300 	.word	0x50040300
 80023ec:	fff0c007 	.word	0xfff0c007

080023f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f8:	4857      	ldr	r0, [pc, #348]	; (8002558 <HAL_ADC_Start+0x168>)
 80023fa:	f7ff fdd7 	bl	8001fac <LL_ADC_GetMultimode>
 80023fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fe76 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	f040 809c 	bne.w	800254a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_ADC_Start+0x30>
 800241c:	2302      	movs	r3, #2
 800241e:	e097      	b.n	8002550 <HAL_ADC_Start+0x160>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fd71 	bl	8002f10 <ADC_Enable>
 800242e:	4603      	mov	r3, r0
 8002430:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002432:	7dfb      	ldrb	r3, [r7, #23]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f040 8083 	bne.w	8002540 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a42      	ldr	r2, [pc, #264]	; (800255c <HAL_ADC_Start+0x16c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d002      	beq.n	800245e <HAL_ADC_Start+0x6e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e000      	b.n	8002460 <HAL_ADC_Start+0x70>
 800245e:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HAL_ADC_Start+0x170>)
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4293      	cmp	r3, r2
 8002466:	d002      	beq.n	800246e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002486:	d106      	bne.n	8002496 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f023 0206 	bic.w	r2, r3, #6
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58
 8002494:	e002      	b.n	800249c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	221c      	movs	r2, #28
 80024a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a2a      	ldr	r2, [pc, #168]	; (800255c <HAL_ADC_Start+0x16c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d002      	beq.n	80024bc <HAL_ADC_Start+0xcc>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	e000      	b.n	80024be <HAL_ADC_Start+0xce>
 80024bc:	4b28      	ldr	r3, [pc, #160]	; (8002560 <HAL_ADC_Start+0x170>)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d008      	beq.n	80024d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d002      	beq.n	80024d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d114      	bne.n	8002502 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fde7 	bl	80020ce <LL_ADC_REG_StartConversion>
 8002500:	e025      	b.n	800254e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <HAL_ADC_Start+0x16c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d002      	beq.n	800251e <HAL_ADC_Start+0x12e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	e000      	b.n	8002520 <HAL_ADC_Start+0x130>
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_ADC_Start+0x170>)
 8002520:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00f      	beq.n	800254e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002536:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
 800253e:	e006      	b.n	800254e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002548:	e001      	b.n	800254e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	50040300 	.word	0x50040300
 800255c:	50040100 	.word	0x50040100
 8002560:	50040000 	.word	0x50040000

08002564 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800256e:	4866      	ldr	r0, [pc, #408]	; (8002708 <HAL_ADC_PollForConversion+0x1a4>)
 8002570:	f7ff fd1c 	bl	8001fac <LL_ADC_GetMultimode>
 8002574:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b08      	cmp	r3, #8
 800257c:	d102      	bne.n	8002584 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800257e:	2308      	movs	r3, #8
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e02a      	b.n	80025da <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d002      	beq.n	8002596 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b09      	cmp	r3, #9
 8002594:	d111      	bne.n	80025ba <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0a4      	b.n	80026fe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025b4:	2304      	movs	r3, #4
 80025b6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025b8:	e00f      	b.n	80025da <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025ba:	4853      	ldr	r0, [pc, #332]	; (8002708 <HAL_ADC_PollForConversion+0x1a4>)
 80025bc:	f7ff fd04 	bl	8001fc8 <LL_ADC_GetMultiDMATransfer>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e093      	b.n	80026fe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025d6:	2304      	movs	r3, #4
 80025d8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025da:	f7ff fbc3 	bl	8001d64 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025e0:	e021      	b.n	8002626 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e8:	d01d      	beq.n	8002626 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025ea:	f7ff fbbb 	bl	8001d64 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <HAL_ADC_PollForConversion+0x9c>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d112      	bne.n	8002626 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e06b      	b.n	80026fe <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0d6      	beq.n	80025e2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fc22 	bl	8001e8e <LL_ADC_REG_IsTriggerSourceSWStart>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01c      	beq.n	800268a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7e5b      	ldrb	r3, [r3, #25]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d118      	bne.n	800268a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d111      	bne.n	800268a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <HAL_ADC_PollForConversion+0x1a8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d002      	beq.n	800269a <HAL_ADC_PollForConversion+0x136>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e000      	b.n	800269c <HAL_ADC_PollForConversion+0x138>
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_ADC_PollForConversion+0x1ac>)
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d008      	beq.n	80026b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d002      	beq.n	80026b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b09      	cmp	r3, #9
 80026b4:	d104      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e00c      	b.n	80026da <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a11      	ldr	r2, [pc, #68]	; (800270c <HAL_ADC_PollForConversion+0x1a8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d002      	beq.n	80026d0 <HAL_ADC_PollForConversion+0x16c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e000      	b.n	80026d2 <HAL_ADC_PollForConversion+0x16e>
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_ADC_PollForConversion+0x1ac>)
 80026d2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d104      	bne.n	80026ea <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2208      	movs	r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e008      	b.n	80026fc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	220c      	movs	r2, #12
 80026fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	50040300 	.word	0x50040300
 800270c:	50040100 	.word	0x50040100
 8002710:	50040000 	.word	0x50040000

08002714 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b0b6      	sub	sp, #216	; 0xd8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x22>
 800274e:	2302      	movs	r3, #2
 8002750:	e3c7      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x7b2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fcc9 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 83a8 	bne.w	8002ebc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d824      	bhi.n	80027be <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	3b02      	subs	r3, #2
 800277a:	2b03      	cmp	r3, #3
 800277c:	d81b      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x86>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <HAL_ADC_ConfigChannel+0x54>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	08002795 	.word	0x08002795
 8002788:	0800279d 	.word	0x0800279d
 800278c:	080027a5 	.word	0x080027a5
 8002790:	080027ad 	.word	0x080027ad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	220c      	movs	r2, #12
 8002798:	605a      	str	r2, [r3, #4]
          break;
 800279a:	e011      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2212      	movs	r2, #18
 80027a0:	605a      	str	r2, [r3, #4]
          break;
 80027a2:	e00d      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2218      	movs	r2, #24
 80027a8:	605a      	str	r2, [r3, #4]
          break;
 80027aa:	e009      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b2:	605a      	str	r2, [r3, #4]
          break;
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2206      	movs	r2, #6
 80027ba:	605a      	str	r2, [r3, #4]
          break;
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80027be:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f7ff fb71 	bl	8001eb4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fc8d 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 80027dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fc99 	bl	800211c <LL_ADC_INJ_IsConversionOngoing>
 80027ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 81a6 	bne.w	8002b44 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 81a1 	bne.w	8002b44 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	461a      	mov	r2, r3
 8002810:	f7ff fb7c 	bl	8001f0c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d00a      	beq.n	800284c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002846:	f7ff facd 	bl	8001de4 <LL_ADC_SetOffset>
 800284a:	e17b      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff faea 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x148>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fadf 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 021f 	and.w	r2, r3, #31
 8002876:	e01e      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x186>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fad4 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800289a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800289e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80028a6:	2320      	movs	r3, #32
 80028a8:	e004      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80028aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x19e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	e018      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1d0>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e004      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80028f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff faa3 	bl	8001e58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2101      	movs	r1, #1
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fa87 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <HAL_ADC_ConfigChannel+0x20e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fa7c 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	e01e      	b.n	800297c <HAL_ADC_ConfigChannel+0x24c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fa71 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800295c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e004      	b.n	800297a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x264>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	e018      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x296>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e004      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80029bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d106      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fa40 	bl	8001e58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fa24 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x2d4>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2102      	movs	r1, #2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fa19 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 80029fa:	4603      	mov	r3, r0
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	f003 021f 	and.w	r2, r3, #31
 8002a02:	e01e      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x312>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2102      	movs	r1, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fa0e 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002a32:	2320      	movs	r3, #32
 8002a34:	e004      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x32a>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	e016      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x358>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	e004      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2200      	movs	r2, #0
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff f9df 	bl	8001e58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f9c3 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x396>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2103      	movs	r1, #3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f9b8 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	0e9b      	lsrs	r3, r3, #26
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	e017      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x3c6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2103      	movs	r1, #3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff f9ad 	bl	8001e2c <LL_ADC_GetOffsetChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ae0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x3de>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	e011      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x402>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e003      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d106      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f98a 	bl	8001e58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff faad 	bl	80020a8 <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f040 813f 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f7ff f9fe 	bl	8001f64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a8e      	ldr	r2, [pc, #568]	; (8002da8 <HAL_ADC_ConfigChannel+0x678>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	f040 8130 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10b      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x46c>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0e9b      	lsrs	r3, r3, #26
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2b09      	cmp	r3, #9
 8002b92:	bf94      	ite	ls
 8002b94:	2301      	movls	r3, #1
 8002b96:	2300      	movhi	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e019      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x4a0>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e003      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	2b09      	cmp	r3, #9
 8002bc8:	bf94      	ite	ls
 8002bca:	2301      	movls	r3, #1
 8002bcc:	2300      	movhi	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d079      	beq.n	8002cc8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x4c0>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	3301      	adds	r3, #1
 8002be8:	069b      	lsls	r3, r3, #26
 8002bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bee:	e015      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x4ec>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c00:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x50c>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0e9b      	lsrs	r3, r3, #26
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	e017      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x53c>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e003      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x562>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0e9b      	lsrs	r3, r3, #26
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 021f 	and.w	r2, r3, #31
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	051b      	lsls	r3, r3, #20
 8002c90:	e018      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x594>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002caa:	2320      	movs	r3, #32
 8002cac:	e003      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	e080      	b.n	8002dca <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x5b4>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	069b      	lsls	r3, r3, #26
 8002cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce2:	e015      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x5e0>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	069b      	lsls	r3, r3, #26
 8002d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x600>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0e9b      	lsrs	r3, r3, #26
 8002d22:	3301      	adds	r3, #1
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2101      	movs	r1, #1
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	e017      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x630>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	61fb      	str	r3, [r7, #28]
  return result;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	ea42 0103 	orr.w	r1, r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x65c>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	3b1e      	subs	r3, #30
 8002d84:	051b      	lsls	r3, r3, #20
 8002d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	e01d      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x698>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	613b      	str	r3, [r7, #16]
  return result;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e005      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x684>
 8002da8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 021f 	and.w	r2, r3, #31
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b1e      	subs	r3, #30
 8002dc2:	051b      	lsls	r3, r3, #20
 8002dc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6892      	ldr	r2, [r2, #8]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f7ff f89c 	bl	8001f0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_ADC_ConfigChannel+0x7bc>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d07a      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de0:	4843      	ldr	r0, [pc, #268]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002de2:	f7fe fff1 	bl	8001dc8 <LL_ADC_GetCommonPathInternalCh>
 8002de6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a41      	ldr	r2, [pc, #260]	; (8002ef4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d12c      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d126      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x6e4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <HAL_ADC_ConfigChannel+0x7cc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d15d      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4834      	ldr	r0, [pc, #208]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e20:	f7fe ffbf 	bl	8001da2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e24:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	4a36      	ldr	r2, [pc, #216]	; (8002f04 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e3e:	e002      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f9      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e4c:	e040      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2d      	ldr	r2, [pc, #180]	; (8002f08 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d118      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x75a>
 8002e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d112      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a23      	ldr	r2, [pc, #140]	; (8002ef8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x748>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a22      	ldr	r2, [pc, #136]	; (8002efc <HAL_ADC_ConfigChannel+0x7cc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d12d      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e80:	4619      	mov	r1, r3
 8002e82:	481b      	ldr	r0, [pc, #108]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e84:	f7fe ff8d 	bl	8001da2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e88:	e024      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_ADC_ConfigChannel+0x7dc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d120      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d115      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480e      	ldr	r0, [pc, #56]	; (8002ef0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002eb6:	f7fe ff74 	bl	8001da2 <LL_ADC_SetCommonPathInternalCh>
 8002eba:	e00c      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ece:	e002      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ed0:	bf00      	nop
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ede:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	37d8      	adds	r7, #216	; 0xd8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	80080000 	.word	0x80080000
 8002ef0:	50040300 	.word	0x50040300
 8002ef4:	c7520000 	.word	0xc7520000
 8002ef8:	50040000 	.word	0x50040000
 8002efc:	50040200 	.word	0x50040200
 8002f00:	20000000 	.word	0x20000000
 8002f04:	053e2d63 	.word	0x053e2d63
 8002f08:	cb840000 	.word	0xcb840000
 8002f0c:	80000001 	.word	0x80000001

08002f10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff f8c3 	bl	80020a8 <LL_ADC_IsEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d14d      	bne.n	8002fc4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <ADC_Enable+0xc0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e039      	b.n	8002fc6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f892 	bl	8002080 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f5c:	f7fe ff02 	bl	8001d64 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f62:	e028      	b.n	8002fb6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff f89d 	bl	80020a8 <LL_ADC_IsEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff f881 	bl	8002080 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f7e:	f7fe fef1 	bl	8001d64 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d914      	bls.n	8002fb6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d00d      	beq.n	8002fb6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f043 0210 	orr.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e007      	b.n	8002fc6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d1cf      	bne.n	8002f64 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	8000003f 	.word	0x8000003f

08002fd4 <LL_ADC_IsEnabled>:
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <LL_ADC_IsEnabled+0x18>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <LL_ADC_IsEnabled+0x1a>
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_ADC_REG_IsConversionOngoing>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d101      	bne.n	8003012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b09f      	sub	sp, #124	; 0x7c
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800303a:	2302      	movs	r3, #2
 800303c:	e093      	b.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003046:	2300      	movs	r3, #0
 8003048:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800304a:	2300      	movs	r3, #0
 800304c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a47      	ldr	r2, [pc, #284]	; (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d102      	bne.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	e001      	b.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e072      	b.n	8003166 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff ffb9 	bl	8002ffa <LL_ADC_REG_IsConversionOngoing>
 8003088:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ffb3 	bl	8002ffa <LL_ADC_REG_IsConversionOngoing>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d154      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800309a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800309c:	2b00      	cmp	r3, #0
 800309e:	d151      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d02c      	beq.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030be:	035b      	lsls	r3, r3, #13
 80030c0:	430b      	orrs	r3, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030c8:	4829      	ldr	r0, [pc, #164]	; (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030ca:	f7ff ff83 	bl	8002fd4 <LL_ADC_IsEnabled>
 80030ce:	4604      	mov	r4, r0
 80030d0:	4828      	ldr	r0, [pc, #160]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030d2:	f7ff ff7f 	bl	8002fd4 <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	431c      	orrs	r4, r3
 80030da:	4828      	ldr	r0, [pc, #160]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030dc:	f7ff ff7a 	bl	8002fd4 <LL_ADC_IsEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4323      	orrs	r3, r4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d137      	bne.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6811      	ldr	r1, [r2, #0]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	431a      	orrs	r2, r3
 8003100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003102:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003104:	e028      	b.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003110:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003112:	4817      	ldr	r0, [pc, #92]	; (8003170 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003114:	f7ff ff5e 	bl	8002fd4 <LL_ADC_IsEnabled>
 8003118:	4604      	mov	r4, r0
 800311a:	4816      	ldr	r0, [pc, #88]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800311c:	f7ff ff5a 	bl	8002fd4 <LL_ADC_IsEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	431c      	orrs	r4, r3
 8003124:	4815      	ldr	r0, [pc, #84]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003126:	f7ff ff55 	bl	8002fd4 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	4323      	orrs	r3, r4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d112      	bne.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800313a:	f023 030f 	bic.w	r3, r3, #15
 800313e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003140:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003142:	e009      	b.n	8003158 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003156:	e000      	b.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003158:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003162:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003166:	4618      	mov	r0, r3
 8003168:	377c      	adds	r7, #124	; 0x7c
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	bf00      	nop
 8003170:	50040000 	.word	0x50040000
 8003174:	50040100 	.word	0x50040100
 8003178:	50040300 	.word	0x50040300
 800317c:	50040200 	.word	0x50040200

08003180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	60d3      	str	r3, [r2, #12]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <__NVIC_GetPriorityGrouping+0x18>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	f003 0307 	and.w	r3, r3, #7
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db0b      	blt.n	800320e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	4907      	ldr	r1, [pc, #28]	; (800321c <__NVIC_EnableIRQ+0x38>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff4c 	bl	8003180 <__NVIC_SetPriorityGrouping>
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003302:	f7ff ff61 	bl	80031c8 <__NVIC_GetPriorityGrouping>
 8003306:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f7ff ffb1 	bl	8003274 <NVIC_EncodePriority>
 8003312:	4602      	mov	r2, r0
 8003314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff80 	bl	8003220 <__NVIC_SetPriority>
}
 8003320:	bf00      	nop
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ff54 	bl	80031e4 <__NVIC_EnableIRQ>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003352:	e17f      	b.n	8003654 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	4013      	ands	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8171 	beq.w	800364e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d00b      	beq.n	800338c <HAL_GPIO_Init+0x48>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d007      	beq.n	800338c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003380:	2b11      	cmp	r3, #17
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b12      	cmp	r3, #18
 800338a:	d130      	bne.n	80033ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c2:	2201      	movs	r2, #1
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	f003 0201 	and.w	r2, r3, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d118      	bne.n	800342c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003400:	2201      	movs	r2, #1
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	08db      	lsrs	r3, r3, #3
 8003416:	f003 0201 	and.w	r2, r3, #1
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x128>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b12      	cmp	r3, #18
 800346a:	d123      	bne.n	80034b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3208      	adds	r2, #8
 8003474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	220f      	movs	r2, #15
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	08da      	lsrs	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3208      	adds	r2, #8
 80034ae:	6939      	ldr	r1, [r7, #16]
 80034b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	2203      	movs	r2, #3
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0203 	and.w	r2, r3, #3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80ac 	beq.w	800364e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f6:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_GPIO_Init+0x330>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	4a5e      	ldr	r2, [pc, #376]	; (8003674 <HAL_GPIO_Init+0x330>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6613      	str	r3, [r2, #96]	; 0x60
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_GPIO_Init+0x330>)
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800350e:	4a5a      	ldr	r2, [pc, #360]	; (8003678 <HAL_GPIO_Init+0x334>)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003538:	d025      	beq.n	8003586 <HAL_GPIO_Init+0x242>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4f      	ldr	r2, [pc, #316]	; (800367c <HAL_GPIO_Init+0x338>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01f      	beq.n	8003582 <HAL_GPIO_Init+0x23e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4e      	ldr	r2, [pc, #312]	; (8003680 <HAL_GPIO_Init+0x33c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d019      	beq.n	800357e <HAL_GPIO_Init+0x23a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <HAL_GPIO_Init+0x340>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <HAL_GPIO_Init+0x236>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4c      	ldr	r2, [pc, #304]	; (8003688 <HAL_GPIO_Init+0x344>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00d      	beq.n	8003576 <HAL_GPIO_Init+0x232>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <HAL_GPIO_Init+0x348>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <HAL_GPIO_Init+0x22e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4a      	ldr	r2, [pc, #296]	; (8003690 <HAL_GPIO_Init+0x34c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <HAL_GPIO_Init+0x22a>
 800356a:	2306      	movs	r3, #6
 800356c:	e00c      	b.n	8003588 <HAL_GPIO_Init+0x244>
 800356e:	2307      	movs	r3, #7
 8003570:	e00a      	b.n	8003588 <HAL_GPIO_Init+0x244>
 8003572:	2305      	movs	r3, #5
 8003574:	e008      	b.n	8003588 <HAL_GPIO_Init+0x244>
 8003576:	2304      	movs	r3, #4
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x244>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <HAL_GPIO_Init+0x244>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_Init+0x244>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x244>
 8003586:	2300      	movs	r3, #0
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	4093      	lsls	r3, r2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003598:	4937      	ldr	r1, [pc, #220]	; (8003678 <HAL_GPIO_Init+0x334>)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035a6:	4b3b      	ldr	r3, [pc, #236]	; (8003694 <HAL_GPIO_Init+0x350>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ca:	4a32      	ldr	r2, [pc, #200]	; (8003694 <HAL_GPIO_Init+0x350>)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035d0:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_GPIO_Init+0x350>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f4:	4a27      	ldr	r2, [pc, #156]	; (8003694 <HAL_GPIO_Init+0x350>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <HAL_GPIO_Init+0x350>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800361e:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_GPIO_Init+0x350>)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_GPIO_Init+0x350>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43db      	mvns	r3, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003648:	4a12      	ldr	r2, [pc, #72]	; (8003694 <HAL_GPIO_Init+0x350>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	3301      	adds	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa22 f303 	lsr.w	r3, r2, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	f47f ae78 	bne.w	8003354 <HAL_GPIO_Init+0x10>
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	40010000 	.word	0x40010000
 800367c:	48000400 	.word	0x48000400
 8003680:	48000800 	.word	0x48000800
 8003684:	48000c00 	.word	0x48000c00
 8003688:	48001000 	.word	0x48001000
 800368c:	48001400 	.word	0x48001400
 8003690:	48001800 	.word	0x48001800
 8003694:	40010400 	.word	0x40010400

08003698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40007000 	.word	0x40007000

080036b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c2:	d130      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c4:	4b23      	ldr	r3, [pc, #140]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d0:	d038      	beq.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2232      	movs	r2, #50	; 0x32
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	0c9b      	lsrs	r3, r3, #18
 80036f4:	3301      	adds	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f8:	e002      	b.n	8003700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370c:	d102      	bne.n	8003714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f2      	bne.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d110      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d007      	beq.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800373c:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40007000 	.word	0x40007000
 8003758:	20000000 	.word	0x20000000
 800375c:	431bde83 	.word	0x431bde83

08003760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e3d4      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003772:	4ba1      	ldr	r3, [pc, #644]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377c:	4b9e      	ldr	r3, [pc, #632]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80e4 	beq.w	800395c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_RCC_OscConfig+0x4a>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	f040 808b 	bne.w	80038b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	f040 8087 	bne.w	80038b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037aa:	4b93      	ldr	r3, [pc, #588]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x62>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e3ac      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	4b8c      	ldr	r3, [pc, #560]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_RCC_OscConfig+0x7c>
 80037d2:	4b89      	ldr	r3, [pc, #548]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037da:	e005      	b.n	80037e8 <HAL_RCC_OscConfig+0x88>
 80037dc:	4b86      	ldr	r3, [pc, #536]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d223      	bcs.n	8003834 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fd73 	bl	80042dc <RCC_SetFlashLatencyFromMSIRange>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e38d      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003800:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003806:	f043 0308 	orr.w	r3, r3, #8
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4977      	ldr	r1, [pc, #476]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381e:	4b76      	ldr	r3, [pc, #472]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	4972      	ldr	r1, [pc, #456]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
 8003832:	e025      	b.n	8003880 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003834:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a6f      	ldr	r2, [pc, #444]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800383a:	f043 0308 	orr.w	r3, r3, #8
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	496a      	ldr	r1, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003852:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4965      	ldr	r1, [pc, #404]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fd33 	bl	80042dc <RCC_SetFlashLatencyFromMSIRange>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e34d      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003880:	f000 fc36 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	495a      	ldr	r1, [pc, #360]	; (80039fc <HAL_RCC_OscConfig+0x29c>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
 800389c:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_RCC_OscConfig+0x2a0>)
 800389e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038a0:	4b58      	ldr	r3, [pc, #352]	; (8003a04 <HAL_RCC_OscConfig+0x2a4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe f8a9 	bl	80019fc <HAL_InitTick>
 80038aa:	4603      	mov	r3, r0
 80038ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d052      	beq.n	800395a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	e331      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d032      	beq.n	8003926 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a4c      	ldr	r2, [pc, #304]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038cc:	f7fe fa4a 	bl	8001d64 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038d4:	f7fe fa46 	bl	8001d64 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e31a      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e6:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a40      	ldr	r2, [pc, #256]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	493b      	ldr	r1, [pc, #236]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e01a      	b.n	800395c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003932:	f7fe fa17 	bl	8001d64 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800393a:	f7fe fa13 	bl	8001d64 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e2e7      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800394c:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x1da>
 8003958:	e000      	b.n	800395c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800395a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d074      	beq.n	8003a52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b08      	cmp	r3, #8
 800396c:	d005      	beq.n	800397a <HAL_RCC_OscConfig+0x21a>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d10e      	bne.n	8003992 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d10b      	bne.n	8003992 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d064      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2f0>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d160      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e2c4      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d106      	bne.n	80039aa <HAL_RCC_OscConfig+0x24a>
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e01d      	b.n	80039e6 <HAL_RCC_OscConfig+0x286>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_OscConfig+0x26e>
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e00b      	b.n	80039e6 <HAL_RCC_OscConfig+0x286>
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x298>)
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fe f9b9 	bl	8001d64 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039f4:	e011      	b.n	8003a1a <HAL_RCC_OscConfig+0x2ba>
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	0800a40c 	.word	0x0800a40c
 8003a00:	20000000 	.word	0x20000000
 8003a04:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fe f9ac 	bl	8001d64 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e280      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a1a:	4baf      	ldr	r3, [pc, #700]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2a8>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fe f99c 	bl	8001d64 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe f998 	bl	8001d64 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e26c      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a42:	4ba5      	ldr	r3, [pc, #660]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2d0>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d060      	beq.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_OscConfig+0x310>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d119      	bne.n	8003a9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d116      	bne.n	8003a9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a70:	4b99      	ldr	r3, [pc, #612]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_OscConfig+0x328>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e249      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b93      	ldr	r3, [pc, #588]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	4990      	ldr	r1, [pc, #576]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9c:	e040      	b.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d023      	beq.n	8003aee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa6:	4b8c      	ldr	r3, [pc, #560]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a8b      	ldr	r2, [pc, #556]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe f957 	bl	8001d64 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe f953 	bl	8001d64 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e227      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003acc:	4b82      	ldr	r3, [pc, #520]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	497c      	ldr	r1, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
 8003aec:	e018      	b.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a79      	ldr	r2, [pc, #484]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fe f933 	bl	8001d64 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b02:	f7fe f92f 	bl	8001d64 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e203      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b14:	4b70      	ldr	r3, [pc, #448]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d03c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01c      	beq.n	8003b6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b34:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3a:	4a67      	ldr	r2, [pc, #412]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fe f90e 	bl	8001d64 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b4c:	f7fe f90a 	bl	8001d64 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1de      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b5e:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ef      	beq.n	8003b4c <HAL_RCC_OscConfig+0x3ec>
 8003b6c:	e01b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b6e:	4b5a      	ldr	r3, [pc, #360]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7e:	f7fe f8f1 	bl	8001d64 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b86:	f7fe f8ed 	bl	8001d64 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e1c1      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b98:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ef      	bne.n	8003b86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80a6 	beq.w	8003d00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bb8:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10d      	bne.n	8003be0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	4a43      	ldr	r2, [pc, #268]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd0:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be0:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d118      	bne.n	8003c1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bec:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf8:	f7fe f8b4 	bl	8001d64 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c00:	f7fe f8b0 	bl	8001d64 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e184      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c12:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <HAL_RCC_OscConfig+0x57c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <HAL_RCC_OscConfig+0x4d8>
 8003c26:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c36:	e024      	b.n	8003c82 <HAL_RCC_OscConfig+0x522>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d110      	bne.n	8003c62 <HAL_RCC_OscConfig+0x502>
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a20      	ldr	r2, [pc, #128]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c60:	e00f      	b.n	8003c82 <HAL_RCC_OscConfig+0x522>
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003c7a:	f023 0304 	bic.w	r3, r3, #4
 8003c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8a:	f7fe f86b 	bl	8001d64 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe f867 	bl	8001d64 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e139      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_OscConfig+0x578>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ed      	beq.n	8003c92 <HAL_RCC_OscConfig+0x532>
 8003cb6:	e01a      	b.n	8003cee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fe f854 	bl	8001d64 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cbe:	e00f      	b.n	8003ce0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fe f850 	bl	8001d64 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d906      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e122      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce0:	4b90      	ldr	r3, [pc, #576]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e8      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d105      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf4:	4b8b      	ldr	r3, [pc, #556]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	4a8a      	ldr	r2, [pc, #552]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8108 	beq.w	8003f1a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	f040 80d0 	bne.w	8003eb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d14:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0203 	and.w	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d130      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	3b01      	subs	r3, #1
 8003d34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d127      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d11f      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d54:	2a07      	cmp	r2, #7
 8003d56:	bf14      	ite	ne
 8003d58:	2201      	movne	r2, #1
 8003d5a:	2200      	moveq	r2, #0
 8003d5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d113      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d109      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	3b01      	subs	r3, #1
 8003d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d06e      	beq.n	8003e68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d069      	beq.n	8003e64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0b7      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dac:	4b5d      	ldr	r3, [pc, #372]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a5c      	ldr	r2, [pc, #368]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db8:	f7fd ffd4 	bl	8001d64 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc0:	f7fd ffd0 	bl	8001d64 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0a4      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd2:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dde:	4b51      	ldr	r3, [pc, #324]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <HAL_RCC_OscConfig+0x7c8>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dee:	3a01      	subs	r2, #1
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df8:	0212      	lsls	r2, r2, #8
 8003dfa:	4311      	orrs	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e00:	0852      	lsrs	r2, r2, #1
 8003e02:	3a01      	subs	r2, #1
 8003e04:	0552      	lsls	r2, r2, #21
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e0c:	0852      	lsrs	r2, r2, #1
 8003e0e:	3a01      	subs	r2, #1
 8003e10:	0652      	lsls	r2, r2, #25
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e18:	0912      	lsrs	r2, r2, #4
 8003e1a:	0452      	lsls	r2, r2, #17
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	4941      	ldr	r1, [pc, #260]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e24:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a3e      	ldr	r2, [pc, #248]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e30:	4b3c      	ldr	r3, [pc, #240]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a3b      	ldr	r2, [pc, #236]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e3c:	f7fd ff92 	bl	8001d64 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd ff8e 	bl	8001d64 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e062      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	4b33      	ldr	r3, [pc, #204]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e62:	e05a      	b.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e059      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e68:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d152      	bne.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e74:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e8c:	f7fd ff6a 	bl	8001d64 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd ff66 	bl	8001d64 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e03a      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x734>
 8003eb2:	e032      	b.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d02d      	beq.n	8003f16 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ec6:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ed2:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ed8:	f023 0303 	bic.w	r3, r3, #3
 8003edc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003ee4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eee:	f7fd ff39 	bl	8001d64 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd ff35 	bl	8001d64 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e009      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCC_OscConfig+0x7c4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x796>
 8003f14:	e001      	b.n	8003f1a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	f99d808c 	.word	0xf99d808c

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0c8      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f40:	4b66      	ldr	r3, [pc, #408]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d910      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b63      	ldr	r3, [pc, #396]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f023 0207 	bic.w	r2, r3, #7
 8003f56:	4961      	ldr	r1, [pc, #388]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0b0      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d04c      	beq.n	8004016 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f84:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d121      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e09e      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e092      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d107      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e086      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc4:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e07e      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 0203 	bic.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	493f      	ldr	r1, [pc, #252]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe6:	f7fd febd 	bl	8001d64 <HAL_GetTick>
 8003fea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fee:	f7fd feb9 	bl	8001d64 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e066      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 020c 	and.w	r2, r3, #12
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	429a      	cmp	r2, r3
 8004014:	d1eb      	bne.n	8003fee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	492c      	ldr	r1, [pc, #176]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d210      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b26      	ldr	r3, [pc, #152]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 0207 	bic.w	r2, r3, #7
 800404a:	4924      	ldr	r1, [pc, #144]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_ClockConfig+0x1b0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e036      	b.n	80040d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4918      	ldr	r1, [pc, #96]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4910      	ldr	r1, [pc, #64]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040a2:	f000 f825 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_RCC_ClockConfig+0x1b4>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490c      	ldr	r1, [pc, #48]	; (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fc98 	bl	80019fc <HAL_InitTick>
 80040cc:	4603      	mov	r3, r0
 80040ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80040d0:	7afb      	ldrb	r3, [r7, #11]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40022000 	.word	0x40022000
 80040e0:	40021000 	.word	0x40021000
 80040e4:	0800a40c 	.word	0x0800a40c
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004

080040f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fe:	4b3e      	ldr	r3, [pc, #248]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004108:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x34>
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d121      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d11e      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004124:	4b34      	ldr	r3, [pc, #208]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004130:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	e005      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800414c:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10d      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d102      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	e004      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d101      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004174:	4b23      	ldr	r3, [pc, #140]	; (8004204 <HAL_RCC_GetSysClockFreq+0x114>)
 8004176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d134      	bne.n	80041e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d003      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0xa6>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d003      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0xac>
 8004194:	e005      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_RCC_GetSysClockFreq+0x110>)
 8004198:	617b      	str	r3, [r7, #20]
      break;
 800419a:	e005      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_RCC_GetSysClockFreq+0x114>)
 800419e:	617b      	str	r3, [r7, #20]
      break;
 80041a0:	e002      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	617b      	str	r3, [r7, #20]
      break;
 80041a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	3301      	adds	r3, #1
 80041b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	fb02 f203 	mul.w	r2, r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	0e5b      	lsrs	r3, r3, #25
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	3301      	adds	r3, #1
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041e8:	69bb      	ldr	r3, [r7, #24]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	0800a424 	.word	0x0800a424
 8004200:	00f42400 	.word	0x00f42400
 8004204:	007a1200 	.word	0x007a1200

08004208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <HAL_RCC_GetHCLKFreq+0x14>)
 800420e:	681b      	ldr	r3, [r3, #0]
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000000 	.word	0x20000000

08004220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004224:	f7ff fff0 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	0800a41c 	.word	0x0800a41c

0800424c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004250:	f7ff ffda 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	0adb      	lsrs	r3, r3, #11
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	0800a41c 	.word	0x0800a41c

08004278 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	220f      	movs	r2, #15
 8004286:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0203 	and.w	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_RCC_GetClockConfig+0x60>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0207 	and.w	r2, r3, #7
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40022000 	.word	0x40022000

080042dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042f4:	f7ff f9d0 	bl	8003698 <HAL_PWREx_GetVoltageRange>
 80042f8:	6178      	str	r0, [r7, #20]
 80042fa:	e014      	b.n	8004326 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a24      	ldr	r2, [pc, #144]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004314:	f7ff f9c0 	bl	8003698 <HAL_PWREx_GetVoltageRange>
 8004318:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d10b      	bne.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d919      	bls.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2ba0      	cmp	r3, #160	; 0xa0
 8004338:	d902      	bls.n	8004340 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800433a:	2302      	movs	r3, #2
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e013      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004340:	2301      	movs	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e010      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d902      	bls.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800434c:	2303      	movs	r3, #3
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e00a      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d102      	bne.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004358:	2302      	movs	r3, #2
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e004      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d101      	bne.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004364:	2301      	movs	r3, #1
 8004366:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 0207 	bic.w	r2, r3, #7
 8004370:	4909      	ldr	r1, [pc, #36]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	429a      	cmp	r2, r3
 8004384:	d001      	beq.n	800438a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	40022000 	.word	0x40022000

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a4:	2300      	movs	r3, #0
 80043a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a8:	2300      	movs	r3, #0
 80043aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d041      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043c0:	d02a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043c6:	d824      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043d2:	d81e      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d010      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043de:	e018      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043e0:	4b86      	ldr	r3, [pc, #536]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a85      	ldr	r2, [pc, #532]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ec:	e015      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fabb 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043fe:	e00c      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3320      	adds	r3, #32
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fba6 	bl	8004b58 <RCCEx_PLLSAI2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	74fb      	strb	r3, [r7, #19]
      break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004420:	4b76      	ldr	r3, [pc, #472]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442e:	4973      	ldr	r1, [pc, #460]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d041      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004450:	d02a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004452:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004456:	d824      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800445c:	d008      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004462:	d81e      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446c:	d010      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800446e:	e018      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004470:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a61      	ldr	r2, [pc, #388]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800447c:	e015      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fa73 	bl	8004970 <RCCEx_PLLSAI1_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800448e:	e00c      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3320      	adds	r3, #32
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fb5e 	bl	8004b58 <RCCEx_PLLSAI2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	74fb      	strb	r3, [r7, #19]
      break;
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044b0:	4b52      	ldr	r3, [pc, #328]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044be:	494f      	ldr	r1, [pc, #316]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044c6:	e001      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a0 	beq.w	800461a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044de:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b41      	ldr	r3, [pc, #260]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a40      	ldr	r2, [pc, #256]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004500:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450c:	2301      	movs	r3, #1
 800450e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451c:	f7fd fc22 	bl	8001d64 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004522:	e009      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fd fc1e 	bl	8001d64 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	74fb      	strb	r3, [r7, #19]
        break;
 8004536:	e005      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ef      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d15c      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01f      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	429a      	cmp	r2, r3
 8004566:	d019      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a20      	ldr	r2, [pc, #128]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd fbdd 	bl	8001d64 <HAL_GetTick>
 80045aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ac:	e00b      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd fbd9 	bl	8001d64 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d902      	bls.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	74fb      	strb	r3, [r7, #19]
            break;
 80045c4:	e006      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ec      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	4904      	ldr	r1, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004608:	7c7b      	ldrb	r3, [r7, #17]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b9e      	ldr	r3, [pc, #632]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	4a9d      	ldr	r2, [pc, #628]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004626:	4b98      	ldr	r3, [pc, #608]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f023 0203 	bic.w	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	4994      	ldr	r1, [pc, #592]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004648:	4b8f      	ldr	r3, [pc, #572]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 020c 	bic.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	498c      	ldr	r1, [pc, #560]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800466a:	4b87      	ldr	r3, [pc, #540]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	4983      	ldr	r1, [pc, #524]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800468c:	4b7e      	ldr	r3, [pc, #504]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	497b      	ldr	r1, [pc, #492]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ae:	4b76      	ldr	r3, [pc, #472]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046bc:	4972      	ldr	r1, [pc, #456]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d0:	4b6d      	ldr	r3, [pc, #436]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	496a      	ldr	r1, [pc, #424]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f2:	4b65      	ldr	r3, [pc, #404]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	4961      	ldr	r1, [pc, #388]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004714:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	4959      	ldr	r1, [pc, #356]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004736:	4b54      	ldr	r3, [pc, #336]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	4950      	ldr	r1, [pc, #320]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	4948      	ldr	r1, [pc, #288]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800477a:	4b43      	ldr	r3, [pc, #268]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	493f      	ldr	r1, [pc, #252]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d028      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800479c:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047aa:	4937      	ldr	r1, [pc, #220]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ba:	d106      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b32      	ldr	r3, [pc, #200]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a31      	ldr	r2, [pc, #196]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
 80047c8:	e011      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047d2:	d10c      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f8c8 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d028      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004800:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	491f      	ldr	r1, [pc, #124]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004818:	d106      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004824:	60d3      	str	r3, [r2, #12]
 8004826:	e011      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f899 	bl	8004970 <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02b      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004866:	4908      	ldr	r1, [pc, #32]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a02      	ldr	r2, [pc, #8]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004882:	60d3      	str	r3, [r2, #12]
 8004884:	e014      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004894:	d10c      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3304      	adds	r3, #4
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f867 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048bc:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ca:	4928      	ldr	r1, [pc, #160]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048da:	d10d      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f844 	bl	8004970 <RCCEx_PLLSAI1_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d014      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	74bb      	strb	r3, [r7, #18]
 80048f6:	e011      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d10c      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3320      	adds	r3, #32
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f925 	bl	8004b58 <RCCEx_PLLSAI2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004936:	490d      	ldr	r1, [pc, #52]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495a:	4904      	ldr	r1, [pc, #16]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004962:	7cbb      	ldrb	r3, [r7, #18]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800497e:	4b75      	ldr	r3, [pc, #468]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800498a:	4b72      	ldr	r3, [pc, #456]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0203 	and.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d10d      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
       ||
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049a2:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
       ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d047      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	e044      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d018      	beq.n	80049f6 <RCCEx_PLLSAI1_Config+0x86>
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d825      	bhi.n	8004a14 <RCCEx_PLLSAI1_Config+0xa4>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d002      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0x62>
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d009      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0x74>
 80049d0:	e020      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049d2:	4b60      	ldr	r3, [pc, #384]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11d      	bne.n	8004a1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e2:	e01a      	b.n	8004a1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049e4:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d116      	bne.n	8004a1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f4:	e013      	b.n	8004a1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049f6:	4b57      	ldr	r3, [pc, #348]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a02:	4b54      	ldr	r3, [pc, #336]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a12:	e006      	b.n	8004a22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      break;
 8004a18:	e004      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e002      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e000      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a22:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6819      	ldr	r1, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	4944      	ldr	r1, [pc, #272]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d17d      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a4c:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a40      	ldr	r2, [pc, #256]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fd f984 	bl	8001d64 <HAL_GetTick>
 8004a5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a5e:	e009      	b.n	8004a74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a60:	f7fd f980 	bl	8001d64 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d902      	bls.n	8004a74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	73fb      	strb	r3, [r7, #15]
        break;
 8004a72:	e005      	b.n	8004a80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1ef      	bne.n	8004a60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d160      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d111      	bne.n	8004ab0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a8c:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6892      	ldr	r2, [r2, #8]
 8004a9c:	0211      	lsls	r1, r2, #8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68d2      	ldr	r2, [r2, #12]
 8004aa2:	0912      	lsrs	r2, r2, #4
 8004aa4:	0452      	lsls	r2, r2, #17
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	492a      	ldr	r1, [pc, #168]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]
 8004aae:	e027      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d112      	bne.n	8004adc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab6:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004abe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6892      	ldr	r2, [r2, #8]
 8004ac6:	0211      	lsls	r1, r2, #8
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6912      	ldr	r2, [r2, #16]
 8004acc:	0852      	lsrs	r2, r2, #1
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	0552      	lsls	r2, r2, #21
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	491f      	ldr	r1, [pc, #124]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	610b      	str	r3, [r1, #16]
 8004ada:	e011      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004adc:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6952      	ldr	r2, [r2, #20]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0652      	lsls	r2, r2, #25
 8004af8:	430a      	orrs	r2, r1
 8004afa:	4916      	ldr	r1, [pc, #88]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fd f92a 	bl	8001d64 <HAL_GetTick>
 8004b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b12:	e009      	b.n	8004b28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b14:	f7fd f926 	bl	8001d64 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d902      	bls.n	8004b28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	73fb      	strb	r3, [r7, #15]
          break;
 8004b26:	e005      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0ef      	beq.n	8004b14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	4904      	ldr	r1, [pc, #16]	; (8004b54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000

08004b58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b66:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d018      	beq.n	8004ba4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0203 	and.w	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d10d      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
       ||
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b8a:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
       ||
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d047      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
 8004ba2:	e044      	b.n	8004c2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d018      	beq.n	8004bde <RCCEx_PLLSAI2_Config+0x86>
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d825      	bhi.n	8004bfc <RCCEx_PLLSAI2_Config+0xa4>
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d002      	beq.n	8004bba <RCCEx_PLLSAI2_Config+0x62>
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d009      	beq.n	8004bcc <RCCEx_PLLSAI2_Config+0x74>
 8004bb8:	e020      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bba:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d11d      	bne.n	8004c02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bca:	e01a      	b.n	8004c02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bdc:	e013      	b.n	8004c06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bde:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10f      	bne.n	8004c0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bea:	4b49      	ldr	r3, [pc, #292]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bfa:	e006      	b.n	8004c0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004c00:	e004      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10d      	bne.n	8004c2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c12:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	430b      	orrs	r3, r1
 8004c28:	4939      	ldr	r1, [pc, #228]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d167      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a35      	ldr	r2, [pc, #212]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c40:	f7fd f890 	bl	8001d64 <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c46:	e009      	b.n	8004c5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c48:	f7fd f88c 	bl	8001d64 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d902      	bls.n	8004c5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	73fb      	strb	r3, [r7, #15]
        break;
 8004c5a:	e005      	b.n	8004c68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ef      	bne.n	8004c48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d14a      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d111      	bne.n	8004c98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c74:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6892      	ldr	r2, [r2, #8]
 8004c84:	0211      	lsls	r1, r2, #8
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68d2      	ldr	r2, [r2, #12]
 8004c8a:	0912      	lsrs	r2, r2, #4
 8004c8c:	0452      	lsls	r2, r2, #17
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	491f      	ldr	r1, [pc, #124]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	614b      	str	r3, [r1, #20]
 8004c96:	e011      	b.n	8004cbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c98:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ca0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	0211      	lsls	r1, r2, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6912      	ldr	r2, [r2, #16]
 8004cae:	0852      	lsrs	r2, r2, #1
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0652      	lsls	r2, r2, #25
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	4916      	ldr	r1, [pc, #88]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd f84c 	bl	8001d64 <HAL_GetTick>
 8004ccc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cce:	e009      	b.n	8004ce4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cd0:	f7fd f848 	bl	8001d64 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d902      	bls.n	8004ce4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ce2:	e005      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ef      	beq.n	8004cd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	4904      	ldr	r1, [pc, #16]	; (8004d10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000

08004d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e049      	b.n	8004dba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f841 	bl	8004dc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 fc66 	bl	8005624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d001      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e04f      	b.n	8004e90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0x76>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d018      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0x76>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0x76>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0x76>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0x76>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_TIM_Base_Start_IT+0xd4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_TIM_Base_Start_IT+0x76>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d115      	bne.n	8004e7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b06      	cmp	r3, #6
 8004e5e:	d015      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0xb4>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e66:	d011      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	e008      	b.n	8004e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e000      	b.n	8004e8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	00010007 	.word	0x00010007

08004eb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e049      	b.n	8004f5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fc fc7e 	bl	80017e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	f000 fb94 	bl	8005624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d109      	bne.n	8004f8c <HAL_TIM_PWM_Start+0x24>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	e03c      	b.n	8005006 <HAL_TIM_PWM_Start+0x9e>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d109      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0x3e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e02f      	b.n	8005006 <HAL_TIM_PWM_Start+0x9e>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start+0x58>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e022      	b.n	8005006 <HAL_TIM_PWM_Start+0x9e>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d109      	bne.n	8004fda <HAL_TIM_PWM_Start+0x72>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	bf14      	ite	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	2300      	moveq	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e015      	b.n	8005006 <HAL_TIM_PWM_Start+0x9e>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIM_PWM_Start+0x8c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e008      	b.n	8005006 <HAL_TIM_PWM_Start+0x9e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e09c      	b.n	8005148 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <HAL_TIM_PWM_Start+0xb6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800501c:	e023      	b.n	8005066 <HAL_TIM_PWM_Start+0xfe>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d104      	bne.n	800502e <HAL_TIM_PWM_Start+0xc6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800502c:	e01b      	b.n	8005066 <HAL_TIM_PWM_Start+0xfe>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d104      	bne.n	800503e <HAL_TIM_PWM_Start+0xd6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800503c:	e013      	b.n	8005066 <HAL_TIM_PWM_Start+0xfe>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b0c      	cmp	r3, #12
 8005042:	d104      	bne.n	800504e <HAL_TIM_PWM_Start+0xe6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800504c:	e00b      	b.n	8005066 <HAL_TIM_PWM_Start+0xfe>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b10      	cmp	r3, #16
 8005052:	d104      	bne.n	800505e <HAL_TIM_PWM_Start+0xf6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800505c:	e003      	b.n	8005066 <HAL_TIM_PWM_Start+0xfe>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fe48 	bl	8005d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <HAL_TIM_PWM_Start+0x1e8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x13e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a34      	ldr	r2, [pc, #208]	; (8005154 <HAL_TIM_PWM_Start+0x1ec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x13e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a32      	ldr	r2, [pc, #200]	; (8005158 <HAL_TIM_PWM_Start+0x1f0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x13e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a31      	ldr	r2, [pc, #196]	; (800515c <HAL_TIM_PWM_Start+0x1f4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_TIM_PWM_Start+0x13e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2f      	ldr	r2, [pc, #188]	; (8005160 <HAL_TIM_PWM_Start+0x1f8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <HAL_TIM_PWM_Start+0x142>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <HAL_TIM_PWM_Start+0x144>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a22      	ldr	r2, [pc, #136]	; (8005150 <HAL_TIM_PWM_Start+0x1e8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01d      	beq.n	8005106 <HAL_TIM_PWM_Start+0x19e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d018      	beq.n	8005106 <HAL_TIM_PWM_Start+0x19e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_TIM_PWM_Start+0x1fc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_TIM_PWM_Start+0x19e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <HAL_TIM_PWM_Start+0x200>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIM_PWM_Start+0x19e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_TIM_PWM_Start+0x204>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_TIM_PWM_Start+0x19e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_TIM_PWM_Start+0x1ec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIM_PWM_Start+0x19e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a15      	ldr	r2, [pc, #84]	; (8005158 <HAL_TIM_PWM_Start+0x1f0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d115      	bne.n	8005132 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	4b18      	ldr	r3, [pc, #96]	; (8005170 <HAL_TIM_PWM_Start+0x208>)
 800510e:	4013      	ands	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b06      	cmp	r3, #6
 8005116:	d015      	beq.n	8005144 <HAL_TIM_PWM_Start+0x1dc>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511e:	d011      	beq.n	8005144 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	e008      	b.n	8005144 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e000      	b.n	8005146 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00
 8005170:	00010007 	.word	0x00010007

08005174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d122      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b02      	cmp	r3, #2
 8005196:	d11b      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f06f 0202 	mvn.w	r2, #2
 80051a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fa16 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 80051bc:	e005      	b.n	80051ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fa08 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fa19 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d122      	bne.n	8005224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d11b      	bne.n	8005224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0204 	mvn.w	r2, #4
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f9ec 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 8005210:	e005      	b.n	800521e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9de 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f9ef 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b08      	cmp	r3, #8
 8005230:	d122      	bne.n	8005278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d11b      	bne.n	8005278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0208 	mvn.w	r2, #8
 8005248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2204      	movs	r2, #4
 800524e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f9c2 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 8005264:	e005      	b.n	8005272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9b4 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f9c5 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b10      	cmp	r3, #16
 8005284:	d122      	bne.n	80052cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d11b      	bne.n	80052cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0210 	mvn.w	r2, #16
 800529c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2208      	movs	r2, #8
 80052a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f998 	bl	80055e8 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f98a 	bl	80055d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f99b 	bl	80055fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d10e      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d107      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0201 	mvn.w	r2, #1
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fc f9d2 	bl	800169c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d10e      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005310:	2b80      	cmp	r3, #128	; 0x80
 8005312:	d107      	bne.n	8005324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800531c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fe26 	bl	8005f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005332:	d10e      	bne.n	8005352 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	2b80      	cmp	r3, #128	; 0x80
 8005340:	d107      	bne.n	8005352 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800534a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fe19 	bl	8005f84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d10e      	bne.n	800537e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d107      	bne.n	800537e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f949 	bl	8005610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b20      	cmp	r3, #32
 800538a:	d10e      	bne.n	80053aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b20      	cmp	r3, #32
 8005398:	d107      	bne.n	80053aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0220 	mvn.w	r2, #32
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fdd9 	bl	8005f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0fd      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x216>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b14      	cmp	r3, #20
 80053da:	f200 80f0 	bhi.w	80055be <HAL_TIM_PWM_ConfigChannel+0x20a>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005439 	.word	0x08005439
 80053e8:	080055bf 	.word	0x080055bf
 80053ec:	080055bf 	.word	0x080055bf
 80053f0:	080055bf 	.word	0x080055bf
 80053f4:	08005479 	.word	0x08005479
 80053f8:	080055bf 	.word	0x080055bf
 80053fc:	080055bf 	.word	0x080055bf
 8005400:	080055bf 	.word	0x080055bf
 8005404:	080054bb 	.word	0x080054bb
 8005408:	080055bf 	.word	0x080055bf
 800540c:	080055bf 	.word	0x080055bf
 8005410:	080055bf 	.word	0x080055bf
 8005414:	080054fb 	.word	0x080054fb
 8005418:	080055bf 	.word	0x080055bf
 800541c:	080055bf 	.word	0x080055bf
 8005420:	080055bf 	.word	0x080055bf
 8005424:	0800553d 	.word	0x0800553d
 8005428:	080055bf 	.word	0x080055bf
 800542c:	080055bf 	.word	0x080055bf
 8005430:	080055bf 	.word	0x080055bf
 8005434:	0800557d 	.word	0x0800557d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f98a 	bl	8005758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0204 	bic.w	r2, r2, #4
 8005462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	619a      	str	r2, [r3, #24]
      break;
 8005476:	e0a3      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f9fa 	bl	8005878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      break;
 80054b8:	e082      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fa63 	bl	800598c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0208 	orr.w	r2, r2, #8
 80054d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	61da      	str	r2, [r3, #28]
      break;
 80054f8:	e062      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 facb 	bl	8005a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	61da      	str	r2, [r3, #28]
      break;
 800553a:	e041      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb14 	bl	8005b70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800557a:	e021      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fb58 	bl	8005c38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055bc:	e000      	b.n	80055c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80055be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop

080055d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a40      	ldr	r2, [pc, #256]	; (8005738 <TIM_Base_SetConfig+0x114>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005642:	d00f      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3d      	ldr	r2, [pc, #244]	; (800573c <TIM_Base_SetConfig+0x118>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3c      	ldr	r2, [pc, #240]	; (8005740 <TIM_Base_SetConfig+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3b      	ldr	r2, [pc, #236]	; (8005744 <TIM_Base_SetConfig+0x120>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3a      	ldr	r2, [pc, #232]	; (8005748 <TIM_Base_SetConfig+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d108      	bne.n	8005676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <TIM_Base_SetConfig+0x114>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01f      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005684:	d01b      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2c      	ldr	r2, [pc, #176]	; (800573c <TIM_Base_SetConfig+0x118>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d017      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2b      	ldr	r2, [pc, #172]	; (8005740 <TIM_Base_SetConfig+0x11c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <TIM_Base_SetConfig+0x120>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00f      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a29      	ldr	r2, [pc, #164]	; (8005748 <TIM_Base_SetConfig+0x124>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a28      	ldr	r2, [pc, #160]	; (800574c <TIM_Base_SetConfig+0x128>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a27      	ldr	r2, [pc, #156]	; (8005750 <TIM_Base_SetConfig+0x12c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a26      	ldr	r2, [pc, #152]	; (8005754 <TIM_Base_SetConfig+0x130>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d108      	bne.n	80056d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a10      	ldr	r2, [pc, #64]	; (8005738 <TIM_Base_SetConfig+0x114>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0xf8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <TIM_Base_SetConfig+0x124>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0xf8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <TIM_Base_SetConfig+0x128>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0xf8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a10      	ldr	r2, [pc, #64]	; (8005750 <TIM_Base_SetConfig+0x12c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0xf8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <TIM_Base_SetConfig+0x130>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d103      	bne.n	8005724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	615a      	str	r2, [r3, #20]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800

08005758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 0302 	bic.w	r3, r3, #2
 80057a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <TIM_OC1_SetConfig+0x10c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00f      	beq.n	80057d8 <TIM_OC1_SetConfig+0x80>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2b      	ldr	r2, [pc, #172]	; (8005868 <TIM_OC1_SetConfig+0x110>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00b      	beq.n	80057d8 <TIM_OC1_SetConfig+0x80>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a2a      	ldr	r2, [pc, #168]	; (800586c <TIM_OC1_SetConfig+0x114>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d007      	beq.n	80057d8 <TIM_OC1_SetConfig+0x80>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a29      	ldr	r2, [pc, #164]	; (8005870 <TIM_OC1_SetConfig+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <TIM_OC1_SetConfig+0x80>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a28      	ldr	r2, [pc, #160]	; (8005874 <TIM_OC1_SetConfig+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10c      	bne.n	80057f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f023 0308 	bic.w	r3, r3, #8
 80057de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <TIM_OC1_SetConfig+0x10c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_OC1_SetConfig+0xc2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <TIM_OC1_SetConfig+0x110>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_OC1_SetConfig+0xc2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <TIM_OC1_SetConfig+0x114>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_OC1_SetConfig+0xc2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a18      	ldr	r2, [pc, #96]	; (8005870 <TIM_OC1_SetConfig+0x118>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_OC1_SetConfig+0xc2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a17      	ldr	r2, [pc, #92]	; (8005874 <TIM_OC1_SetConfig+0x11c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d111      	bne.n	800583e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40013400 	.word	0x40013400
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800

08005878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f023 0210 	bic.w	r2, r3, #16
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0320 	bic.w	r3, r3, #32
 80058c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a28      	ldr	r2, [pc, #160]	; (8005978 <TIM_OC2_SetConfig+0x100>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_OC2_SetConfig+0x6c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a27      	ldr	r2, [pc, #156]	; (800597c <TIM_OC2_SetConfig+0x104>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10d      	bne.n	8005900 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <TIM_OC2_SetConfig+0x100>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00f      	beq.n	8005928 <TIM_OC2_SetConfig+0xb0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a1c      	ldr	r2, [pc, #112]	; (800597c <TIM_OC2_SetConfig+0x104>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00b      	beq.n	8005928 <TIM_OC2_SetConfig+0xb0>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <TIM_OC2_SetConfig+0x108>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d007      	beq.n	8005928 <TIM_OC2_SetConfig+0xb0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <TIM_OC2_SetConfig+0x10c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_OC2_SetConfig+0xb0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a19      	ldr	r2, [pc, #100]	; (8005988 <TIM_OC2_SetConfig+0x110>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d113      	bne.n	8005950 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <TIM_OC3_SetConfig+0xfc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC3_SetConfig+0x6a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a26      	ldr	r2, [pc, #152]	; (8005a8c <TIM_OC3_SetConfig+0x100>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d10d      	bne.n	8005a12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <TIM_OC3_SetConfig+0xfc>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00f      	beq.n	8005a3a <TIM_OC3_SetConfig+0xae>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <TIM_OC3_SetConfig+0x100>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00b      	beq.n	8005a3a <TIM_OC3_SetConfig+0xae>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1a      	ldr	r2, [pc, #104]	; (8005a90 <TIM_OC3_SetConfig+0x104>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d007      	beq.n	8005a3a <TIM_OC3_SetConfig+0xae>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <TIM_OC3_SetConfig+0x108>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d003      	beq.n	8005a3a <TIM_OC3_SetConfig+0xae>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <TIM_OC3_SetConfig+0x10c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d113      	bne.n	8005a62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40013400 	.word	0x40013400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800

08005a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <TIM_OC4_SetConfig+0xc0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00f      	beq.n	8005b20 <TIM_OC4_SetConfig+0x84>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <TIM_OC4_SetConfig+0xc4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_OC4_SetConfig+0x84>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a16      	ldr	r2, [pc, #88]	; (8005b64 <TIM_OC4_SetConfig+0xc8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_OC4_SetConfig+0x84>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <TIM_OC4_SetConfig+0xcc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC4_SetConfig+0x84>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <TIM_OC4_SetConfig+0xd0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d109      	bne.n	8005b34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	019b      	lsls	r3, r3, #6
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800

08005b70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a17      	ldr	r2, [pc, #92]	; (8005c24 <TIM_OC5_SetConfig+0xb4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00f      	beq.n	8005bea <TIM_OC5_SetConfig+0x7a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <TIM_OC5_SetConfig+0xb8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_OC5_SetConfig+0x7a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <TIM_OC5_SetConfig+0xbc>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_OC5_SetConfig+0x7a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <TIM_OC5_SetConfig+0xc0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_OC5_SetConfig+0x7a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a13      	ldr	r2, [pc, #76]	; (8005c34 <TIM_OC5_SetConfig+0xc4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d109      	bne.n	8005bfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800

08005c38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	051b      	lsls	r3, r3, #20
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <TIM_OC6_SetConfig+0xb8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00f      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x7c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <TIM_OC6_SetConfig+0xbc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x7c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <TIM_OC6_SetConfig+0xc0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x7c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <TIM_OC6_SetConfig+0xc4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC6_SetConfig+0x7c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <TIM_OC6_SetConfig+0xc8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d109      	bne.n	8005cc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	029b      	lsls	r3, r3, #10
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800

08005d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	2201      	movs	r2, #1
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	401a      	ands	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1a      	ldr	r2, [r3, #32]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e068      	b.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2e      	ldr	r2, [pc, #184]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d004      	beq.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2d      	ldr	r2, [pc, #180]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d108      	bne.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005da2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01d      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dda:	d018      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00e      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d10c      	bne.n	8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40013400 	.word	0x40013400
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40014000 	.word	0x40014000

08005e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e065      	b.n	8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a16      	ldr	r2, [pc, #88]	; (8005f54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a14      	ldr	r2, [pc, #80]	; (8005f58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d115      	bne.n	8005f36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	051b      	lsls	r3, r3, #20
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40012c00 	.word	0x40012c00
 8005f58:	40013400 	.word	0x40013400

08005f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e040      	b.n	800602c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fb fcdc 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2224      	movs	r2, #36	; 0x24
 8005fc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f8c0 	bl	800615c <UART_SetConfig>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e022      	b.n	800602c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fb3e 	bl	8006670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fbc5 	bl	80067b4 <UART_CheckIdleState>
 800602a:	4603      	mov	r3, r0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006048:	2b20      	cmp	r3, #32
 800604a:	f040 8082 	bne.w	8006152 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_UART_Transmit+0x26>
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e07a      	b.n	8006154 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UART_Transmit+0x38>
 8006068:	2302      	movs	r3, #2
 800606a:	e073      	b.n	8006154 <HAL_UART_Transmit+0x120>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2221      	movs	r2, #33	; 0x21
 8006080:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006082:	f7fb fe6f 	bl	8001d64 <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a0:	d108      	bne.n	80060b4 <HAL_UART_Transmit+0x80>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	e003      	b.n	80060bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060c4:	e02d      	b.n	8006122 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2200      	movs	r2, #0
 80060ce:	2180      	movs	r1, #128	; 0x80
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 fbb8 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e039      	b.n	8006154 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	881a      	ldrh	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f2:	b292      	uxth	r2, r2
 80060f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	3302      	adds	r3, #2
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e008      	b.n	8006110 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	781a      	ldrb	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	b292      	uxth	r2, r2
 8006108:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	3301      	adds	r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1cb      	bne.n	80060c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2200      	movs	r2, #0
 8006136:	2140      	movs	r1, #64	; 0x40
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fb84 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e005      	b.n	8006154 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006152:	2302      	movs	r3, #2
  }
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800615c:	b5b0      	push	{r4, r5, r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	4313      	orrs	r3, r2
 800617e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4bad      	ldr	r3, [pc, #692]	; (800643c <UART_SetConfig+0x2e0>)
 8006188:	4013      	ands	r3, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	69f9      	ldr	r1, [r7, #28]
 8006190:	430b      	orrs	r3, r1
 8006192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4aa2      	ldr	r2, [pc, #648]	; (8006440 <UART_SetConfig+0x2e4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a99      	ldr	r2, [pc, #612]	; (8006444 <UART_SetConfig+0x2e8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d121      	bne.n	8006226 <UART_SetConfig+0xca>
 80061e2:	4b99      	ldr	r3, [pc, #612]	; (8006448 <UART_SetConfig+0x2ec>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d817      	bhi.n	8006220 <UART_SetConfig+0xc4>
 80061f0:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x9c>)
 80061f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f6:	bf00      	nop
 80061f8:	08006209 	.word	0x08006209
 80061fc:	08006215 	.word	0x08006215
 8006200:	0800620f 	.word	0x0800620f
 8006204:	0800621b 	.word	0x0800621b
 8006208:	2301      	movs	r3, #1
 800620a:	76fb      	strb	r3, [r7, #27]
 800620c:	e0e7      	b.n	80063de <UART_SetConfig+0x282>
 800620e:	2302      	movs	r3, #2
 8006210:	76fb      	strb	r3, [r7, #27]
 8006212:	e0e4      	b.n	80063de <UART_SetConfig+0x282>
 8006214:	2304      	movs	r3, #4
 8006216:	76fb      	strb	r3, [r7, #27]
 8006218:	e0e1      	b.n	80063de <UART_SetConfig+0x282>
 800621a:	2308      	movs	r3, #8
 800621c:	76fb      	strb	r3, [r7, #27]
 800621e:	e0de      	b.n	80063de <UART_SetConfig+0x282>
 8006220:	2310      	movs	r3, #16
 8006222:	76fb      	strb	r3, [r7, #27]
 8006224:	e0db      	b.n	80063de <UART_SetConfig+0x282>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a88      	ldr	r2, [pc, #544]	; (800644c <UART_SetConfig+0x2f0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d132      	bne.n	8006296 <UART_SetConfig+0x13a>
 8006230:	4b85      	ldr	r3, [pc, #532]	; (8006448 <UART_SetConfig+0x2ec>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b0c      	cmp	r3, #12
 800623c:	d828      	bhi.n	8006290 <UART_SetConfig+0x134>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0xe8>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006279 	.word	0x08006279
 8006248:	08006291 	.word	0x08006291
 800624c:	08006291 	.word	0x08006291
 8006250:	08006291 	.word	0x08006291
 8006254:	08006285 	.word	0x08006285
 8006258:	08006291 	.word	0x08006291
 800625c:	08006291 	.word	0x08006291
 8006260:	08006291 	.word	0x08006291
 8006264:	0800627f 	.word	0x0800627f
 8006268:	08006291 	.word	0x08006291
 800626c:	08006291 	.word	0x08006291
 8006270:	08006291 	.word	0x08006291
 8006274:	0800628b 	.word	0x0800628b
 8006278:	2300      	movs	r3, #0
 800627a:	76fb      	strb	r3, [r7, #27]
 800627c:	e0af      	b.n	80063de <UART_SetConfig+0x282>
 800627e:	2302      	movs	r3, #2
 8006280:	76fb      	strb	r3, [r7, #27]
 8006282:	e0ac      	b.n	80063de <UART_SetConfig+0x282>
 8006284:	2304      	movs	r3, #4
 8006286:	76fb      	strb	r3, [r7, #27]
 8006288:	e0a9      	b.n	80063de <UART_SetConfig+0x282>
 800628a:	2308      	movs	r3, #8
 800628c:	76fb      	strb	r3, [r7, #27]
 800628e:	e0a6      	b.n	80063de <UART_SetConfig+0x282>
 8006290:	2310      	movs	r3, #16
 8006292:	76fb      	strb	r3, [r7, #27]
 8006294:	e0a3      	b.n	80063de <UART_SetConfig+0x282>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a6d      	ldr	r2, [pc, #436]	; (8006450 <UART_SetConfig+0x2f4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d120      	bne.n	80062e2 <UART_SetConfig+0x186>
 80062a0:	4b69      	ldr	r3, [pc, #420]	; (8006448 <UART_SetConfig+0x2ec>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062aa:	2b30      	cmp	r3, #48	; 0x30
 80062ac:	d013      	beq.n	80062d6 <UART_SetConfig+0x17a>
 80062ae:	2b30      	cmp	r3, #48	; 0x30
 80062b0:	d814      	bhi.n	80062dc <UART_SetConfig+0x180>
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d009      	beq.n	80062ca <UART_SetConfig+0x16e>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d810      	bhi.n	80062dc <UART_SetConfig+0x180>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <UART_SetConfig+0x168>
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d006      	beq.n	80062d0 <UART_SetConfig+0x174>
 80062c2:	e00b      	b.n	80062dc <UART_SetConfig+0x180>
 80062c4:	2300      	movs	r3, #0
 80062c6:	76fb      	strb	r3, [r7, #27]
 80062c8:	e089      	b.n	80063de <UART_SetConfig+0x282>
 80062ca:	2302      	movs	r3, #2
 80062cc:	76fb      	strb	r3, [r7, #27]
 80062ce:	e086      	b.n	80063de <UART_SetConfig+0x282>
 80062d0:	2304      	movs	r3, #4
 80062d2:	76fb      	strb	r3, [r7, #27]
 80062d4:	e083      	b.n	80063de <UART_SetConfig+0x282>
 80062d6:	2308      	movs	r3, #8
 80062d8:	76fb      	strb	r3, [r7, #27]
 80062da:	e080      	b.n	80063de <UART_SetConfig+0x282>
 80062dc:	2310      	movs	r3, #16
 80062de:	76fb      	strb	r3, [r7, #27]
 80062e0:	e07d      	b.n	80063de <UART_SetConfig+0x282>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a5b      	ldr	r2, [pc, #364]	; (8006454 <UART_SetConfig+0x2f8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d120      	bne.n	800632e <UART_SetConfig+0x1d2>
 80062ec:	4b56      	ldr	r3, [pc, #344]	; (8006448 <UART_SetConfig+0x2ec>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f6:	2bc0      	cmp	r3, #192	; 0xc0
 80062f8:	d013      	beq.n	8006322 <UART_SetConfig+0x1c6>
 80062fa:	2bc0      	cmp	r3, #192	; 0xc0
 80062fc:	d814      	bhi.n	8006328 <UART_SetConfig+0x1cc>
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0x1ba>
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d810      	bhi.n	8006328 <UART_SetConfig+0x1cc>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <UART_SetConfig+0x1b4>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d006      	beq.n	800631c <UART_SetConfig+0x1c0>
 800630e:	e00b      	b.n	8006328 <UART_SetConfig+0x1cc>
 8006310:	2300      	movs	r3, #0
 8006312:	76fb      	strb	r3, [r7, #27]
 8006314:	e063      	b.n	80063de <UART_SetConfig+0x282>
 8006316:	2302      	movs	r3, #2
 8006318:	76fb      	strb	r3, [r7, #27]
 800631a:	e060      	b.n	80063de <UART_SetConfig+0x282>
 800631c:	2304      	movs	r3, #4
 800631e:	76fb      	strb	r3, [r7, #27]
 8006320:	e05d      	b.n	80063de <UART_SetConfig+0x282>
 8006322:	2308      	movs	r3, #8
 8006324:	76fb      	strb	r3, [r7, #27]
 8006326:	e05a      	b.n	80063de <UART_SetConfig+0x282>
 8006328:	2310      	movs	r3, #16
 800632a:	76fb      	strb	r3, [r7, #27]
 800632c:	e057      	b.n	80063de <UART_SetConfig+0x282>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a49      	ldr	r2, [pc, #292]	; (8006458 <UART_SetConfig+0x2fc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d125      	bne.n	8006384 <UART_SetConfig+0x228>
 8006338:	4b43      	ldr	r3, [pc, #268]	; (8006448 <UART_SetConfig+0x2ec>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006346:	d017      	beq.n	8006378 <UART_SetConfig+0x21c>
 8006348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634c:	d817      	bhi.n	800637e <UART_SetConfig+0x222>
 800634e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006352:	d00b      	beq.n	800636c <UART_SetConfig+0x210>
 8006354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006358:	d811      	bhi.n	800637e <UART_SetConfig+0x222>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <UART_SetConfig+0x20a>
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	d006      	beq.n	8006372 <UART_SetConfig+0x216>
 8006364:	e00b      	b.n	800637e <UART_SetConfig+0x222>
 8006366:	2300      	movs	r3, #0
 8006368:	76fb      	strb	r3, [r7, #27]
 800636a:	e038      	b.n	80063de <UART_SetConfig+0x282>
 800636c:	2302      	movs	r3, #2
 800636e:	76fb      	strb	r3, [r7, #27]
 8006370:	e035      	b.n	80063de <UART_SetConfig+0x282>
 8006372:	2304      	movs	r3, #4
 8006374:	76fb      	strb	r3, [r7, #27]
 8006376:	e032      	b.n	80063de <UART_SetConfig+0x282>
 8006378:	2308      	movs	r3, #8
 800637a:	76fb      	strb	r3, [r7, #27]
 800637c:	e02f      	b.n	80063de <UART_SetConfig+0x282>
 800637e:	2310      	movs	r3, #16
 8006380:	76fb      	strb	r3, [r7, #27]
 8006382:	e02c      	b.n	80063de <UART_SetConfig+0x282>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2d      	ldr	r2, [pc, #180]	; (8006440 <UART_SetConfig+0x2e4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d125      	bne.n	80063da <UART_SetConfig+0x27e>
 800638e:	4b2e      	ldr	r3, [pc, #184]	; (8006448 <UART_SetConfig+0x2ec>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800639c:	d017      	beq.n	80063ce <UART_SetConfig+0x272>
 800639e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a2:	d817      	bhi.n	80063d4 <UART_SetConfig+0x278>
 80063a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a8:	d00b      	beq.n	80063c2 <UART_SetConfig+0x266>
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d811      	bhi.n	80063d4 <UART_SetConfig+0x278>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <UART_SetConfig+0x260>
 80063b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b8:	d006      	beq.n	80063c8 <UART_SetConfig+0x26c>
 80063ba:	e00b      	b.n	80063d4 <UART_SetConfig+0x278>
 80063bc:	2300      	movs	r3, #0
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	e00d      	b.n	80063de <UART_SetConfig+0x282>
 80063c2:	2302      	movs	r3, #2
 80063c4:	76fb      	strb	r3, [r7, #27]
 80063c6:	e00a      	b.n	80063de <UART_SetConfig+0x282>
 80063c8:	2304      	movs	r3, #4
 80063ca:	76fb      	strb	r3, [r7, #27]
 80063cc:	e007      	b.n	80063de <UART_SetConfig+0x282>
 80063ce:	2308      	movs	r3, #8
 80063d0:	76fb      	strb	r3, [r7, #27]
 80063d2:	e004      	b.n	80063de <UART_SetConfig+0x282>
 80063d4:	2310      	movs	r3, #16
 80063d6:	76fb      	strb	r3, [r7, #27]
 80063d8:	e001      	b.n	80063de <UART_SetConfig+0x282>
 80063da:	2310      	movs	r3, #16
 80063dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <UART_SetConfig+0x2e4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	f040 8087 	bne.w	80064f8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063ea:	7efb      	ldrb	r3, [r7, #27]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d837      	bhi.n	8006460 <UART_SetConfig+0x304>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x29c>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006461 	.word	0x08006461
 8006400:	08006425 	.word	0x08006425
 8006404:	08006461 	.word	0x08006461
 8006408:	0800642b 	.word	0x0800642b
 800640c:	08006461 	.word	0x08006461
 8006410:	08006461 	.word	0x08006461
 8006414:	08006461 	.word	0x08006461
 8006418:	08006433 	.word	0x08006433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fd ff00 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e022      	b.n	800646a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006424:	4b0d      	ldr	r3, [pc, #52]	; (800645c <UART_SetConfig+0x300>)
 8006426:	617b      	str	r3, [r7, #20]
        break;
 8006428:	e01f      	b.n	800646a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642a:	f7fd fe61 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 800642e:	6178      	str	r0, [r7, #20]
        break;
 8006430:	e01b      	b.n	800646a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006436:	617b      	str	r3, [r7, #20]
        break;
 8006438:	e017      	b.n	800646a <UART_SetConfig+0x30e>
 800643a:	bf00      	nop
 800643c:	efff69f3 	.word	0xefff69f3
 8006440:	40008000 	.word	0x40008000
 8006444:	40013800 	.word	0x40013800
 8006448:	40021000 	.word	0x40021000
 800644c:	40004400 	.word	0x40004400
 8006450:	40004800 	.word	0x40004800
 8006454:	40004c00 	.word	0x40004c00
 8006458:	40005000 	.word	0x40005000
 800645c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	76bb      	strb	r3, [r7, #26]
        break;
 8006468:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80f1 	beq.w	8006654 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	4413      	add	r3, r2
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	429a      	cmp	r2, r3
 8006480:	d305      	bcc.n	800648e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	429a      	cmp	r2, r3
 800648c:	d902      	bls.n	8006494 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	76bb      	strb	r3, [r7, #26]
 8006492:	e0df      	b.n	8006654 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4618      	mov	r0, r3
 8006498:	f04f 0100 	mov.w	r1, #0
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	020b      	lsls	r3, r1, #8
 80064a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064aa:	0202      	lsls	r2, r0, #8
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	6849      	ldr	r1, [r1, #4]
 80064b0:	0849      	lsrs	r1, r1, #1
 80064b2:	4608      	mov	r0, r1
 80064b4:	f04f 0100 	mov.w	r1, #0
 80064b8:	1814      	adds	r4, r2, r0
 80064ba:	eb43 0501 	adc.w	r5, r3, r1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	461a      	mov	r2, r3
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7fa faee 	bl	8000aac <__aeabi_uldivmod>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4613      	mov	r3, r2
 80064d6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064de:	d308      	bcc.n	80064f2 <UART_SetConfig+0x396>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e6:	d204      	bcs.n	80064f2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	e0b0      	b.n	8006654 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	76bb      	strb	r3, [r7, #26]
 80064f6:	e0ad      	b.n	8006654 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006500:	d15c      	bne.n	80065bc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006502:	7efb      	ldrb	r3, [r7, #27]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d828      	bhi.n	800655a <UART_SetConfig+0x3fe>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <UART_SetConfig+0x3b4>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006535 	.word	0x08006535
 8006514:	0800653d 	.word	0x0800653d
 8006518:	08006545 	.word	0x08006545
 800651c:	0800655b 	.word	0x0800655b
 8006520:	0800654b 	.word	0x0800654b
 8006524:	0800655b 	.word	0x0800655b
 8006528:	0800655b 	.word	0x0800655b
 800652c:	0800655b 	.word	0x0800655b
 8006530:	08006553 	.word	0x08006553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006534:	f7fd fe74 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8006538:	6178      	str	r0, [r7, #20]
        break;
 800653a:	e013      	b.n	8006564 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800653c:	f7fd fe86 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 8006540:	6178      	str	r0, [r7, #20]
        break;
 8006542:	e00f      	b.n	8006564 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006544:	4b49      	ldr	r3, [pc, #292]	; (800666c <UART_SetConfig+0x510>)
 8006546:	617b      	str	r3, [r7, #20]
        break;
 8006548:	e00c      	b.n	8006564 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800654a:	f7fd fdd1 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 800654e:	6178      	str	r0, [r7, #20]
        break;
 8006550:	e008      	b.n	8006564 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006556:	617b      	str	r3, [r7, #20]
        break;
 8006558:	e004      	b.n	8006564 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	76bb      	strb	r3, [r7, #26]
        break;
 8006562:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d074      	beq.n	8006654 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	005a      	lsls	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	085b      	lsrs	r3, r3, #1
 8006574:	441a      	add	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	fbb2 f3f3 	udiv	r3, r2, r3
 800657e:	b29b      	uxth	r3, r3
 8006580:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b0f      	cmp	r3, #15
 8006586:	d916      	bls.n	80065b6 <UART_SetConfig+0x45a>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658e:	d212      	bcs.n	80065b6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f023 030f 	bic.w	r3, r3, #15
 8006598:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	89fb      	ldrh	r3, [r7, #14]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	89fa      	ldrh	r2, [r7, #14]
 80065b2:	60da      	str	r2, [r3, #12]
 80065b4:	e04e      	b.n	8006654 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	76bb      	strb	r3, [r7, #26]
 80065ba:	e04b      	b.n	8006654 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065bc:	7efb      	ldrb	r3, [r7, #27]
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d827      	bhi.n	8006612 <UART_SetConfig+0x4b6>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <UART_SetConfig+0x46c>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065ed 	.word	0x080065ed
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	08006613 	.word	0x08006613
 80065d8:	08006603 	.word	0x08006603
 80065dc:	08006613 	.word	0x08006613
 80065e0:	08006613 	.word	0x08006613
 80065e4:	08006613 	.word	0x08006613
 80065e8:	0800660b 	.word	0x0800660b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ec:	f7fd fe18 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 80065f0:	6178      	str	r0, [r7, #20]
        break;
 80065f2:	e013      	b.n	800661c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f4:	f7fd fe2a 	bl	800424c <HAL_RCC_GetPCLK2Freq>
 80065f8:	6178      	str	r0, [r7, #20]
        break;
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <UART_SetConfig+0x510>)
 80065fe:	617b      	str	r3, [r7, #20]
        break;
 8006600:	e00c      	b.n	800661c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006602:	f7fd fd75 	bl	80040f0 <HAL_RCC_GetSysClockFreq>
 8006606:	6178      	str	r0, [r7, #20]
        break;
 8006608:	e008      	b.n	800661c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800660a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660e:	617b      	str	r3, [r7, #20]
        break;
 8006610:	e004      	b.n	800661c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	76bb      	strb	r3, [r7, #26]
        break;
 800661a:	bf00      	nop
    }

    if (pclk != 0U)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d018      	beq.n	8006654 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	085a      	lsrs	r2, r3, #1
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	441a      	add	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	b29b      	uxth	r3, r3
 8006636:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b0f      	cmp	r3, #15
 800663c:	d908      	bls.n	8006650 <UART_SetConfig+0x4f4>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006644:	d204      	bcs.n	8006650 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	60da      	str	r2, [r3, #12]
 800664e:	e001      	b.n	8006654 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006660:	7ebb      	ldrb	r3, [r7, #26]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bdb0      	pop	{r4, r5, r7, pc}
 800666a:	bf00      	nop
 800666c:	00f42400 	.word	0x00f42400

08006670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01a      	beq.n	8006786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676e:	d10a      	bne.n	8006786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c4:	f7fb face 	bl	8001d64 <HAL_GetTick>
 80067c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d10e      	bne.n	80067f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f82d 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e023      	b.n	800683e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b04      	cmp	r3, #4
 8006802:	d10e      	bne.n	8006822 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f817 	bl	8006846 <UART_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e00d      	b.n	800683e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	60f8      	str	r0, [r7, #12]
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	603b      	str	r3, [r7, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006856:	e05e      	b.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800685e:	d05a      	beq.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fb fa80 	bl	8001d64 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <UART_WaitOnFlagUntilTimeout+0x30>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11b      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006884:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0201 	bic.w	r2, r2, #1
 8006894:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2220      	movs	r2, #32
 800689a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e043      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d02c      	beq.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ca:	d124      	bne.n	8006916 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0201 	bic.w	r2, r2, #1
 80068f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e00f      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4013      	ands	r3, r2
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	429a      	cmp	r2, r3
 8006924:	bf0c      	ite	eq
 8006926:	2301      	moveq	r3, #1
 8006928:	2300      	movne	r3, #0
 800692a:	b2db      	uxtb	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	429a      	cmp	r2, r3
 8006932:	d091      	beq.n	8006858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <__NVIC_SetPriority>:
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800694c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006950:	2b00      	cmp	r3, #0
 8006952:	db0a      	blt.n	800696a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	490c      	ldr	r1, [pc, #48]	; (800698c <__NVIC_SetPriority+0x4c>)
 800695a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695e:	0112      	lsls	r2, r2, #4
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	440b      	add	r3, r1
 8006964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006968:	e00a      	b.n	8006980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	4908      	ldr	r1, [pc, #32]	; (8006990 <__NVIC_SetPriority+0x50>)
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	3b04      	subs	r3, #4
 8006978:	0112      	lsls	r2, r2, #4
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	440b      	add	r3, r1
 800697e:	761a      	strb	r2, [r3, #24]
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	e000e100 	.word	0xe000e100
 8006990:	e000ed00 	.word	0xe000ed00

08006994 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006998:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <SysTick_Handler+0x1c>)
 800699a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800699c:	f001 fcfe 	bl	800839c <xTaskGetSchedulerState>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d001      	beq.n	80069aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069a6:	f002 fae7 	bl	8008f78 <xPortSysTickHandler>
  }
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000e010 	.word	0xe000e010

080069b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80069b8:	2100      	movs	r1, #0
 80069ba:	f06f 0004 	mvn.w	r0, #4
 80069be:	f7ff ffbf 	bl	8006940 <__NVIC_SetPriority>
#endif
}
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ce:	f3ef 8305 	mrs	r3, IPSR
 80069d2:	603b      	str	r3, [r7, #0]
  return(result);
 80069d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80069da:	f06f 0305 	mvn.w	r3, #5
 80069de:	607b      	str	r3, [r7, #4]
 80069e0:	e00c      	b.n	80069fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <osKernelInitialize+0x44>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069ea:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <osKernelInitialize+0x44>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	607b      	str	r3, [r7, #4]
 80069f4:	e002      	b.n	80069fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80069f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069fc:	687b      	ldr	r3, [r7, #4]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	20000098 	.word	0x20000098

08006a10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a16:	f3ef 8305 	mrs	r3, IPSR
 8006a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a22:	f06f 0305 	mvn.w	r3, #5
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	e010      	b.n	8006a4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <osKernelStart+0x48>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d109      	bne.n	8006a46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a32:	f7ff ffbf 	bl	80069b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <osKernelStart+0x48>)
 8006a38:	2202      	movs	r2, #2
 8006a3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a3c:	f001 f866 	bl	8007b0c <vTaskStartScheduler>
      stat = osOK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	e002      	b.n	8006a4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a4c:	687b      	ldr	r3, [r7, #4]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000098 	.word	0x20000098

08006a5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08e      	sub	sp, #56	; 0x38
 8006a60:	af04      	add	r7, sp, #16
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6c:	f3ef 8305 	mrs	r3, IPSR
 8006a70:	617b      	str	r3, [r7, #20]
  return(result);
 8006a72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d17e      	bne.n	8006b76 <osThreadNew+0x11a>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d07b      	beq.n	8006b76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a7e:	2380      	movs	r3, #128	; 0x80
 8006a80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a82:	2318      	movs	r3, #24
 8006a84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d045      	beq.n	8006b22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <osThreadNew+0x48>
        name = attr->name;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <osThreadNew+0x6e>
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b38      	cmp	r3, #56	; 0x38
 8006abc:	d805      	bhi.n	8006aca <osThreadNew+0x6e>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <osThreadNew+0x72>
        return (NULL);
 8006aca:	2300      	movs	r3, #0
 8006acc:	e054      	b.n	8006b78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <osThreadNew+0xa8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b5b      	cmp	r3, #91	; 0x5b
 8006aec:	d90a      	bls.n	8006b04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d006      	beq.n	8006b04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <osThreadNew+0xa8>
        mem = 1;
 8006afe:	2301      	movs	r3, #1
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e010      	b.n	8006b26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10c      	bne.n	8006b26 <osThreadNew+0xca>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d108      	bne.n	8006b26 <osThreadNew+0xca>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <osThreadNew+0xca>
          mem = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	e001      	b.n	8006b26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d110      	bne.n	8006b4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b34:	9202      	str	r2, [sp, #8]
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6a3a      	ldr	r2, [r7, #32]
 8006b40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fe0c 	bl	8007760 <xTaskCreateStatic>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	e013      	b.n	8006b76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d110      	bne.n	8006b76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	f107 0310 	add.w	r3, r7, #16
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fe57 	bl	800781a <xTaskCreate>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d001      	beq.n	8006b76 <osThreadNew+0x11a>
            hTask = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b76:	693b      	ldr	r3, [r7, #16]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	; 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b88:	f3ef 8305 	mrs	r3, IPSR
 8006b8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <osDelay+0x1c>
    stat = osErrorISR;
 8006b94:	f06f 0305 	mvn.w	r3, #5
 8006b98:	60fb      	str	r3, [r7, #12]
 8006b9a:	e007      	b.n	8006bac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 ff7c 	bl	8007aa4 <vTaskDelay>
    }
  }

  return (stat);
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4a07      	ldr	r2, [pc, #28]	; (8006be4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006bc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4a06      	ldr	r2, [pc, #24]	; (8006be8 <vApplicationGetIdleTaskMemory+0x30>)
 8006bce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2280      	movs	r2, #128	; 0x80
 8006bd4:	601a      	str	r2, [r3, #0]
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	2000009c 	.word	0x2000009c
 8006be8:	200000f8 	.word	0x200000f8

08006bec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4a07      	ldr	r2, [pc, #28]	; (8006c18 <vApplicationGetTimerTaskMemory+0x2c>)
 8006bfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4a06      	ldr	r2, [pc, #24]	; (8006c1c <vApplicationGetTimerTaskMemory+0x30>)
 8006c02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c0a:	601a      	str	r2, [r3, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	200002f8 	.word	0x200002f8
 8006c1c:	20000354 	.word	0x20000354

08006c20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f103 0208 	add.w	r2, r3, #8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f103 0208 	add.w	r2, r3, #8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f103 0208 	add.w	r2, r3, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	601a      	str	r2, [r3, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd8:	d103      	bne.n	8006ce2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	e00c      	b.n	8006cfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e002      	b.n	8006cf0 <vListInsert+0x2e>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d2f6      	bcs.n	8006cea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6892      	ldr	r2, [r2, #8]
 8006d4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6852      	ldr	r2, [r2, #4]
 8006d54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d103      	bne.n	8006d68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	1e5a      	subs	r2, r3, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006db2:	f002 f84f 	bl	8008e54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	441a      	add	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de2:	3b01      	subs	r3, #1
 8006de4:	68f9      	ldr	r1, [r7, #12]
 8006de6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	441a      	add	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	22ff      	movs	r2, #255	; 0xff
 8006df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	22ff      	movs	r2, #255	; 0xff
 8006dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d114      	bne.n	8006e32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01a      	beq.n	8006e46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3310      	adds	r3, #16
 8006e14:	4618      	mov	r0, r3
 8006e16:	f001 f903 	bl	8008020 <xTaskRemoveFromEventList>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d012      	beq.n	8006e46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <xQueueGenericReset+0xcc>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	e009      	b.n	8006e46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3310      	adds	r3, #16
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fef2 	bl	8006c20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3324      	adds	r3, #36	; 0x24
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff feed 	bl	8006c20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e46:	f002 f835 	bl	8008eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e4a:	2301      	movs	r3, #1
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08e      	sub	sp, #56	; 0x38
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <xQueueGenericCreateStatic+0x52>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <xQueueGenericCreateStatic+0x56>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueGenericCreateStatic+0x58>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	623b      	str	r3, [r7, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d102      	bne.n	8006ed6 <xQueueGenericCreateStatic+0x7e>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <xQueueGenericCreateStatic+0x82>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <xQueueGenericCreateStatic+0x84>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	61fb      	str	r3, [r7, #28]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ef6:	2350      	movs	r3, #80	; 0x50
 8006ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b50      	cmp	r3, #80	; 0x50
 8006efe:	d00a      	beq.n	8006f16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61bb      	str	r3, [r7, #24]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00d      	beq.n	8006f3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	4613      	mov	r3, r2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 f805 	bl	8006f48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3730      	adds	r7, #48	; 0x30
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	e002      	b.n	8006f6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f76:	2101      	movs	r1, #1
 8006f78:	69b8      	ldr	r0, [r7, #24]
 8006f7a:	f7ff ff05 	bl	8006d88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	78fa      	ldrb	r2, [r7, #3]
 8006f82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08e      	sub	sp, #56	; 0x38
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <xQueueGenericSend+0x32>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <xQueueGenericSend+0x40>
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <xQueueGenericSend+0x44>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e000      	b.n	8006fd6 <xQueueGenericSend+0x46>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <xQueueGenericSend+0x60>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d103      	bne.n	8006ffe <xQueueGenericSend+0x6e>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <xQueueGenericSend+0x72>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <xQueueGenericSend+0x74>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <xQueueGenericSend+0x8e>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	623b      	str	r3, [r7, #32]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800701e:	f001 f9bd 	bl	800839c <xTaskGetSchedulerState>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d102      	bne.n	800702e <xQueueGenericSend+0x9e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <xQueueGenericSend+0xa2>
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <xQueueGenericSend+0xa4>
 8007032:	2300      	movs	r3, #0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <xQueueGenericSend+0xbe>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	61fb      	str	r3, [r7, #28]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800704e:	f001 ff01 	bl	8008e54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <xQueueGenericSend+0xd4>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d129      	bne.n	80070b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800706a:	f000 fa0b 	bl	8007484 <prvCopyDataToQueue>
 800706e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d010      	beq.n	800709a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	3324      	adds	r3, #36	; 0x24
 800707c:	4618      	mov	r0, r3
 800707e:	f000 ffcf 	bl	8008020 <xTaskRemoveFromEventList>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d013      	beq.n	80070b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007088:	4b3f      	ldr	r3, [pc, #252]	; (8007188 <xQueueGenericSend+0x1f8>)
 800708a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	e00a      	b.n	80070b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070a0:	4b39      	ldr	r3, [pc, #228]	; (8007188 <xQueueGenericSend+0x1f8>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070b0:	f001 ff00 	bl	8008eb4 <vPortExitCritical>
				return pdPASS;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e063      	b.n	8007180 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d103      	bne.n	80070c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070be:	f001 fef9 	bl	8008eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e05c      	b.n	8007180 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d106      	bne.n	80070da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070cc:	f107 0314 	add.w	r3, r7, #20
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 f809 	bl	80080e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070d6:	2301      	movs	r3, #1
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070da:	f001 feeb 	bl	8008eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070de:	f000 fd7b 	bl	8007bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070e2:	f001 feb7 	bl	8008e54 <vPortEnterCritical>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ec:	b25b      	sxtb	r3, r3
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f2:	d103      	bne.n	80070fc <xQueueGenericSend+0x16c>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007102:	b25b      	sxtb	r3, r3
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007108:	d103      	bne.n	8007112 <xQueueGenericSend+0x182>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007112:	f001 fecf 	bl	8008eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007116:	1d3a      	adds	r2, r7, #4
 8007118:	f107 0314 	add.w	r3, r7, #20
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fff8 	bl	8008114 <xTaskCheckForTimeOut>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d124      	bne.n	8007174 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800712a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800712c:	f000 faa2 	bl	8007674 <prvIsQueueFull>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d018      	beq.n	8007168 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	3310      	adds	r3, #16
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f000 ff1e 	bl	8007f80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007146:	f000 fa2d 	bl	80075a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800714a:	f000 fd53 	bl	8007bf4 <xTaskResumeAll>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	f47f af7c 	bne.w	800704e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007156:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <xQueueGenericSend+0x1f8>)
 8007158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	e772      	b.n	800704e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800716a:	f000 fa1b 	bl	80075a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800716e:	f000 fd41 	bl	8007bf4 <xTaskResumeAll>
 8007172:	e76c      	b.n	800704e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007176:	f000 fa15 	bl	80075a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800717a:	f000 fd3b 	bl	8007bf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800717e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007180:	4618      	mov	r0, r3
 8007182:	3738      	adds	r7, #56	; 0x38
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b090      	sub	sp, #64	; 0x40
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <xQueueGenericSendFromISR+0x3c>
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <xQueueGenericSendFromISR+0x40>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <xQueueGenericSendFromISR+0x42>
 80071cc:	2300      	movs	r3, #0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d103      	bne.n	80071f6 <xQueueGenericSendFromISR+0x6a>
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <xQueueGenericSendFromISR+0x6e>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <xQueueGenericSendFromISR+0x70>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	623b      	str	r3, [r7, #32]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007216:	f001 feff 	bl	8009018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800721a:	f3ef 8211 	mrs	r2, BASEPRI
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	61fa      	str	r2, [r7, #28]
 8007230:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007232:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007234:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <xQueueGenericSendFromISR+0xbc>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b02      	cmp	r3, #2
 8007246:	d12f      	bne.n	80072a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800724e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800725e:	f000 f911 	bl	8007484 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007262:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726a:	d112      	bne.n	8007292 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d016      	beq.n	80072a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fed1 	bl	8008020 <xTaskRemoveFromEventList>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00e      	beq.n	80072a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e007      	b.n	80072a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007292:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007296:	3301      	adds	r3, #1
 8007298:	b2db      	uxtb	r3, r3
 800729a:	b25a      	sxtb	r2, r3
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072a2:	2301      	movs	r3, #1
 80072a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80072a6:	e001      	b.n	80072ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3740      	adds	r7, #64	; 0x40
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08c      	sub	sp, #48	; 0x30
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072d0:	2300      	movs	r3, #0
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <xQueueReceive+0x30>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	623b      	str	r3, [r7, #32]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <xQueueReceive+0x3e>
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <xQueueReceive+0x42>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <xQueueReceive+0x44>
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <xQueueReceive+0x5e>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	61fb      	str	r3, [r7, #28]
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007322:	f001 f83b 	bl	800839c <xTaskGetSchedulerState>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d102      	bne.n	8007332 <xQueueReceive+0x6e>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <xQueueReceive+0x72>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueReceive+0x74>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueReceive+0x8e>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	61bb      	str	r3, [r7, #24]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007352:	f001 fd7f 	bl	8008e54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01f      	beq.n	80073a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007366:	f000 f8f7 	bl	8007558 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	1e5a      	subs	r2, r3, #1
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00f      	beq.n	800739a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	3310      	adds	r3, #16
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fe4e 	bl	8008020 <xTaskRemoveFromEventList>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800738a:	4b3d      	ldr	r3, [pc, #244]	; (8007480 <xQueueReceive+0x1bc>)
 800738c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800739a:	f001 fd8b 	bl	8008eb4 <vPortExitCritical>
				return pdPASS;
 800739e:	2301      	movs	r3, #1
 80073a0:	e069      	b.n	8007476 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073a8:	f001 fd84 	bl	8008eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e062      	b.n	8007476 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073b6:	f107 0310 	add.w	r3, r7, #16
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fe94 	bl	80080e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073c4:	f001 fd76 	bl	8008eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073c8:	f000 fc06 	bl	8007bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073cc:	f001 fd42 	bl	8008e54 <vPortEnterCritical>
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073dc:	d103      	bne.n	80073e6 <xQueueReceive+0x122>
 80073de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ec:	b25b      	sxtb	r3, r3
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f2:	d103      	bne.n	80073fc <xQueueReceive+0x138>
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073fc:	f001 fd5a 	bl	8008eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007400:	1d3a      	adds	r2, r7, #4
 8007402:	f107 0310 	add.w	r3, r7, #16
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fe83 	bl	8008114 <xTaskCheckForTimeOut>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d123      	bne.n	800745c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007416:	f000 f917 	bl	8007648 <prvIsQueueEmpty>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d017      	beq.n	8007450 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	3324      	adds	r3, #36	; 0x24
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4611      	mov	r1, r2
 8007428:	4618      	mov	r0, r3
 800742a:	f000 fda9 	bl	8007f80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800742e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007430:	f000 f8b8 	bl	80075a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007434:	f000 fbde 	bl	8007bf4 <xTaskResumeAll>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d189      	bne.n	8007352 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800743e:	4b10      	ldr	r3, [pc, #64]	; (8007480 <xQueueReceive+0x1bc>)
 8007440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	e780      	b.n	8007352 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007452:	f000 f8a7 	bl	80075a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007456:	f000 fbcd 	bl	8007bf4 <xTaskResumeAll>
 800745a:	e77a      	b.n	8007352 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800745c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745e:	f000 f8a1 	bl	80075a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007462:	f000 fbc7 	bl	8007bf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007468:	f000 f8ee 	bl	8007648 <prvIsQueueEmpty>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	f43f af6f 	beq.w	8007352 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007474:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	; 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	e000ed04 	.word	0xe000ed04

08007484 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10d      	bne.n	80074be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d14d      	bne.n	8007546 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 ff92 	bl	80083d8 <xTaskPriorityDisinherit>
 80074b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	e043      	b.n	8007546 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d119      	bne.n	80074f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6858      	ldr	r0, [r3, #4]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074cc:	461a      	mov	r2, r3
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	f001 fff6 	bl	80094c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	441a      	add	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d32b      	bcc.n	8007546 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	605a      	str	r2, [r3, #4]
 80074f6:	e026      	b.n	8007546 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68d8      	ldr	r0, [r3, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	461a      	mov	r2, r3
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	f001 ffdc 	bl	80094c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	425b      	negs	r3, r3
 8007512:	441a      	add	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d207      	bcs.n	8007534 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	425b      	negs	r3, r3
 800752e:	441a      	add	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d105      	bne.n	8007546 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	3b01      	subs	r3, #1
 8007544:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800754e:	697b      	ldr	r3, [r7, #20]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d018      	beq.n	800759c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	441a      	add	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	429a      	cmp	r2, r3
 8007582:	d303      	bcc.n	800758c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68d9      	ldr	r1, [r3, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	461a      	mov	r2, r3
 8007596:	6838      	ldr	r0, [r7, #0]
 8007598:	f001 ff92 	bl	80094c0 <memcpy>
	}
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075ac:	f001 fc52 	bl	8008e54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075b8:	e011      	b.n	80075de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d012      	beq.n	80075e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3324      	adds	r3, #36	; 0x24
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fd2a 	bl	8008020 <xTaskRemoveFromEventList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075d2:	f000 fe01 	bl	80081d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	3b01      	subs	r3, #1
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dce9      	bgt.n	80075ba <prvUnlockQueue+0x16>
 80075e6:	e000      	b.n	80075ea <prvUnlockQueue+0x46>
					break;
 80075e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	22ff      	movs	r2, #255	; 0xff
 80075ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80075f2:	f001 fc5f 	bl	8008eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075f6:	f001 fc2d 	bl	8008e54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007602:	e011      	b.n	8007628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d012      	beq.n	8007632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3310      	adds	r3, #16
 8007610:	4618      	mov	r0, r3
 8007612:	f000 fd05 	bl	8008020 <xTaskRemoveFromEventList>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800761c:	f000 fddc 	bl	80081d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	3b01      	subs	r3, #1
 8007624:	b2db      	uxtb	r3, r3
 8007626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dce9      	bgt.n	8007604 <prvUnlockQueue+0x60>
 8007630:	e000      	b.n	8007634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	22ff      	movs	r2, #255	; 0xff
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800763c:	f001 fc3a 	bl	8008eb4 <vPortExitCritical>
}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007650:	f001 fc00 	bl	8008e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800765c:	2301      	movs	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e001      	b.n	8007666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007666:	f001 fc25 	bl	8008eb4 <vPortExitCritical>

	return xReturn;
 800766a:	68fb      	ldr	r3, [r7, #12]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800767c:	f001 fbea 	bl	8008e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007688:	429a      	cmp	r2, r3
 800768a:	d102      	bne.n	8007692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e001      	b.n	8007696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007696:	f001 fc0d 	bl	8008eb4 <vPortExitCritical>

	return xReturn;
 800769a:	68fb      	ldr	r3, [r7, #12]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	e014      	b.n	80076de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076b4:	4a0f      	ldr	r2, [pc, #60]	; (80076f4 <vQueueAddToRegistry+0x50>)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10b      	bne.n	80076d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076c0:	490c      	ldr	r1, [pc, #48]	; (80076f4 <vQueueAddToRegistry+0x50>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076ca:	4a0a      	ldr	r2, [pc, #40]	; (80076f4 <vQueueAddToRegistry+0x50>)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4413      	add	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076d6:	e006      	b.n	80076e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b07      	cmp	r3, #7
 80076e2:	d9e7      	bls.n	80076b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	20001b88 	.word	0x20001b88

080076f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007708:	f001 fba4 	bl	8008e54 <vPortEnterCritical>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007712:	b25b      	sxtb	r3, r3
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007718:	d103      	bne.n	8007722 <vQueueWaitForMessageRestricted+0x2a>
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007728:	b25b      	sxtb	r3, r3
 800772a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772e:	d103      	bne.n	8007738 <vQueueWaitForMessageRestricted+0x40>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007738:	f001 fbbc 	bl	8008eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	2b00      	cmp	r3, #0
 8007742:	d106      	bne.n	8007752 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	3324      	adds	r3, #36	; 0x24
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fc3b 	bl	8007fc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007752:	6978      	ldr	r0, [r7, #20]
 8007754:	f7ff ff26 	bl	80075a4 <prvUnlockQueue>
	}
 8007758:	bf00      	nop
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08e      	sub	sp, #56	; 0x38
 8007764:	af04      	add	r7, sp, #16
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800776e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10a      	bne.n	800778a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	623b      	str	r3, [r7, #32]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800778a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	61fb      	str	r3, [r7, #28]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077a6:	235c      	movs	r3, #92	; 0x5c
 80077a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b5c      	cmp	r3, #92	; 0x5c
 80077ae:	d00a      	beq.n	80077c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	61bb      	str	r3, [r7, #24]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01e      	beq.n	800780c <xTaskCreateStatic+0xac>
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01b      	beq.n	800780c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077e6:	2300      	movs	r3, #0
 80077e8:	9303      	str	r3, [sp, #12]
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	9302      	str	r3, [sp, #8]
 80077ee:	f107 0314 	add.w	r3, r7, #20
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 f850 	bl	80078a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007806:	f000 f8dd 	bl	80079c4 <prvAddNewTaskToReadyList>
 800780a:	e001      	b.n	8007810 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800780c:	2300      	movs	r3, #0
 800780e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007810:	697b      	ldr	r3, [r7, #20]
	}
 8007812:	4618      	mov	r0, r3
 8007814:	3728      	adds	r7, #40	; 0x28
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800781a:	b580      	push	{r7, lr}
 800781c:	b08c      	sub	sp, #48	; 0x30
 800781e:	af04      	add	r7, sp, #16
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	4613      	mov	r3, r2
 8007828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4618      	mov	r0, r3
 8007830:	f001 fc32 	bl	8009098 <pvPortMalloc>
 8007834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00e      	beq.n	800785a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800783c:	205c      	movs	r0, #92	; 0x5c
 800783e:	f001 fc2b 	bl	8009098 <pvPortMalloc>
 8007842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
 8007850:	e005      	b.n	800785e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007852:	6978      	ldr	r0, [r7, #20]
 8007854:	f001 fcec 	bl	8009230 <vPortFree>
 8007858:	e001      	b.n	800785e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d017      	beq.n	8007894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800786c:	88fa      	ldrh	r2, [r7, #6]
 800786e:	2300      	movs	r3, #0
 8007870:	9303      	str	r3, [sp, #12]
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	9302      	str	r3, [sp, #8]
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68b9      	ldr	r1, [r7, #8]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f80e 	bl	80078a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007888:	69f8      	ldr	r0, [r7, #28]
 800788a:	f000 f89b 	bl	80079c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800788e:	2301      	movs	r3, #1
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	e002      	b.n	800789a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800789a:	69bb      	ldr	r3, [r7, #24]
	}
 800789c:	4618      	mov	r0, r3
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	461a      	mov	r2, r3
 80078bc:	21a5      	movs	r1, #165	; 0xa5
 80078be:	f001 fe0d 	bl	80094dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078cc:	3b01      	subs	r3, #1
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	617b      	str	r3, [r7, #20]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01f      	beq.n	8007942 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]
 8007906:	e012      	b.n	800792e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	7819      	ldrb	r1, [r3, #0]
 8007910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	3334      	adds	r3, #52	; 0x34
 8007918:	460a      	mov	r2, r1
 800791a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	3301      	adds	r3, #1
 800792c:	61fb      	str	r3, [r7, #28]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	2b0f      	cmp	r3, #15
 8007932:	d9e9      	bls.n	8007908 <prvInitialiseNewTask+0x64>
 8007934:	e000      	b.n	8007938 <prvInitialiseNewTask+0x94>
			{
				break;
 8007936:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007940:	e003      	b.n	800794a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	2b37      	cmp	r3, #55	; 0x37
 800794e:	d901      	bls.n	8007954 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007950:	2337      	movs	r3, #55	; 0x37
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007958:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800795e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	2200      	movs	r2, #0
 8007964:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	3304      	adds	r3, #4
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff f978 	bl	8006c60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	3318      	adds	r3, #24
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff f973 	bl	8006c60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800797e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	2200      	movs	r2, #0
 8007994:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	68f9      	ldr	r1, [r7, #12]
 80079a2:	69b8      	ldr	r0, [r7, #24]
 80079a4:	f001 f928 	bl	8008bf8 <pxPortInitialiseStack>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ba:	bf00      	nop
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079cc:	f001 fa42 	bl	8008e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079d0:	4b2d      	ldr	r3, [pc, #180]	; (8007a88 <prvAddNewTaskToReadyList+0xc4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	4a2c      	ldr	r2, [pc, #176]	; (8007a88 <prvAddNewTaskToReadyList+0xc4>)
 80079d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079da:	4b2c      	ldr	r3, [pc, #176]	; (8007a8c <prvAddNewTaskToReadyList+0xc8>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079e2:	4a2a      	ldr	r2, [pc, #168]	; (8007a8c <prvAddNewTaskToReadyList+0xc8>)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079e8:	4b27      	ldr	r3, [pc, #156]	; (8007a88 <prvAddNewTaskToReadyList+0xc4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d110      	bne.n	8007a12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079f0:	f000 fc16 	bl	8008220 <prvInitialiseTaskLists>
 80079f4:	e00d      	b.n	8007a12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079f6:	4b26      	ldr	r3, [pc, #152]	; (8007a90 <prvAddNewTaskToReadyList+0xcc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079fe:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <prvAddNewTaskToReadyList+0xc8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d802      	bhi.n	8007a12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a0c:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <prvAddNewTaskToReadyList+0xc8>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a12:	4b20      	ldr	r3, [pc, #128]	; (8007a94 <prvAddNewTaskToReadyList+0xd0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3301      	adds	r3, #1
 8007a18:	4a1e      	ldr	r2, [pc, #120]	; (8007a94 <prvAddNewTaskToReadyList+0xd0>)
 8007a1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	; (8007a94 <prvAddNewTaskToReadyList+0xd0>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a28:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <prvAddNewTaskToReadyList+0xd4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d903      	bls.n	8007a38 <prvAddNewTaskToReadyList+0x74>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <prvAddNewTaskToReadyList+0xd4>)
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4a15      	ldr	r2, [pc, #84]	; (8007a9c <prvAddNewTaskToReadyList+0xd8>)
 8007a46:	441a      	add	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f7ff f913 	bl	8006c7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a54:	f001 fa2e 	bl	8008eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a58:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <prvAddNewTaskToReadyList+0xcc>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00e      	beq.n	8007a7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <prvAddNewTaskToReadyList+0xc8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d207      	bcs.n	8007a7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <prvAddNewTaskToReadyList+0xdc>)
 8007a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a7e:	bf00      	nop
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000c28 	.word	0x20000c28
 8007a8c:	20000754 	.word	0x20000754
 8007a90:	20000c34 	.word	0x20000c34
 8007a94:	20000c44 	.word	0x20000c44
 8007a98:	20000c30 	.word	0x20000c30
 8007a9c:	20000758 	.word	0x20000758
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d017      	beq.n	8007ae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ab6:	4b13      	ldr	r3, [pc, #76]	; (8007b04 <vTaskDelay+0x60>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00a      	beq.n	8007ad4 <vTaskDelay+0x30>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60bb      	str	r3, [r7, #8]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ad4:	f000 f880 	bl	8007bd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ad8:	2100      	movs	r1, #0
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fcea 	bl	80084b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ae0:	f000 f888 	bl	8007bf4 <xTaskResumeAll>
 8007ae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <vTaskDelay+0x64>)
 8007aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000c50 	.word	0x20000c50
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08a      	sub	sp, #40	; 0x28
 8007b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	1d39      	adds	r1, r7, #4
 8007b1e:	f107 0308 	add.w	r3, r7, #8
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff f848 	bl	8006bb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	9202      	str	r2, [sp, #8]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	2300      	movs	r3, #0
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	2300      	movs	r3, #0
 8007b38:	460a      	mov	r2, r1
 8007b3a:	4921      	ldr	r1, [pc, #132]	; (8007bc0 <vTaskStartScheduler+0xb4>)
 8007b3c:	4821      	ldr	r0, [pc, #132]	; (8007bc4 <vTaskStartScheduler+0xb8>)
 8007b3e:	f7ff fe0f 	bl	8007760 <xTaskCreateStatic>
 8007b42:	4603      	mov	r3, r0
 8007b44:	4a20      	ldr	r2, [pc, #128]	; (8007bc8 <vTaskStartScheduler+0xbc>)
 8007b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b48:	4b1f      	ldr	r3, [pc, #124]	; (8007bc8 <vTaskStartScheduler+0xbc>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b50:	2301      	movs	r3, #1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e001      	b.n	8007b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d102      	bne.n	8007b66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b60:	f000 fcfc 	bl	800855c <xTimerCreateTimerTask>
 8007b64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d116      	bne.n	8007b9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	613b      	str	r3, [r7, #16]
}
 8007b7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b80:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <vTaskStartScheduler+0xc0>)
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <vTaskStartScheduler+0xc4>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <vTaskStartScheduler+0xc8>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b94:	f001 f8bc 	bl	8008d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b98:	e00e      	b.n	8007bb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba0:	d10a      	bne.n	8007bb8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60fb      	str	r3, [r7, #12]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vTaskStartScheduler+0xaa>
}
 8007bb8:	bf00      	nop
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	0800a3d0 	.word	0x0800a3d0
 8007bc4:	080081f1 	.word	0x080081f1
 8007bc8:	20000c4c 	.word	0x20000c4c
 8007bcc:	20000c48 	.word	0x20000c48
 8007bd0:	20000c34 	.word	0x20000c34
 8007bd4:	20000c2c 	.word	0x20000c2c

08007bd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <vTaskSuspendAll+0x18>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3301      	adds	r3, #1
 8007be2:	4a03      	ldr	r2, [pc, #12]	; (8007bf0 <vTaskSuspendAll+0x18>)
 8007be4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007be6:	bf00      	nop
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	20000c50 	.word	0x20000c50

08007bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c02:	4b42      	ldr	r3, [pc, #264]	; (8007d0c <xTaskResumeAll+0x118>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <xTaskResumeAll+0x2c>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	603b      	str	r3, [r7, #0]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c20:	f001 f918 	bl	8008e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c24:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <xTaskResumeAll+0x118>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	4a38      	ldr	r2, [pc, #224]	; (8007d0c <xTaskResumeAll+0x118>)
 8007c2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2e:	4b37      	ldr	r3, [pc, #220]	; (8007d0c <xTaskResumeAll+0x118>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d162      	bne.n	8007cfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c36:	4b36      	ldr	r3, [pc, #216]	; (8007d10 <xTaskResumeAll+0x11c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d05e      	beq.n	8007cfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c3e:	e02f      	b.n	8007ca0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c40:	4b34      	ldr	r3, [pc, #208]	; (8007d14 <xTaskResumeAll+0x120>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3318      	adds	r3, #24
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff f871 	bl	8006d34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff f86c 	bl	8006d34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c60:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <xTaskResumeAll+0x124>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d903      	bls.n	8007c70 <xTaskResumeAll+0x7c>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	4a2a      	ldr	r2, [pc, #168]	; (8007d18 <xTaskResumeAll+0x124>)
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4a27      	ldr	r2, [pc, #156]	; (8007d1c <xTaskResumeAll+0x128>)
 8007c7e:	441a      	add	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4619      	mov	r1, r3
 8007c86:	4610      	mov	r0, r2
 8007c88:	f7fe fff7 	bl	8006c7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c90:	4b23      	ldr	r3, [pc, #140]	; (8007d20 <xTaskResumeAll+0x12c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d302      	bcc.n	8007ca0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c9a:	4b22      	ldr	r3, [pc, #136]	; (8007d24 <xTaskResumeAll+0x130>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ca0:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <xTaskResumeAll+0x120>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1cb      	bne.n	8007c40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cae:	f000 fb55 	bl	800835c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	; (8007d28 <xTaskResumeAll+0x134>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d010      	beq.n	8007ce0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cbe:	f000 f847 	bl	8007d50 <xTaskIncrementTick>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d002      	beq.n	8007cce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007cc8:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <xTaskResumeAll+0x130>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f1      	bne.n	8007cbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007cda:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <xTaskResumeAll+0x134>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ce0:	4b10      	ldr	r3, [pc, #64]	; (8007d24 <xTaskResumeAll+0x130>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d009      	beq.n	8007cfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cec:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <xTaskResumeAll+0x138>)
 8007cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cfc:	f001 f8da 	bl	8008eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8007d00:	68bb      	ldr	r3, [r7, #8]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000c50 	.word	0x20000c50
 8007d10:	20000c28 	.word	0x20000c28
 8007d14:	20000be8 	.word	0x20000be8
 8007d18:	20000c30 	.word	0x20000c30
 8007d1c:	20000758 	.word	0x20000758
 8007d20:	20000754 	.word	0x20000754
 8007d24:	20000c3c 	.word	0x20000c3c
 8007d28:	20000c38 	.word	0x20000c38
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <xTaskGetTickCount+0x1c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d3c:	687b      	ldr	r3, [r7, #4]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20000c2c 	.word	0x20000c2c

08007d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d5a:	4b4f      	ldr	r3, [pc, #316]	; (8007e98 <xTaskIncrementTick+0x148>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 808f 	bne.w	8007e82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d64:	4b4d      	ldr	r3, [pc, #308]	; (8007e9c <xTaskIncrementTick+0x14c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d6c:	4a4b      	ldr	r2, [pc, #300]	; (8007e9c <xTaskIncrementTick+0x14c>)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d120      	bne.n	8007dba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d78:	4b49      	ldr	r3, [pc, #292]	; (8007ea0 <xTaskIncrementTick+0x150>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	603b      	str	r3, [r7, #0]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xTaskIncrementTick+0x46>
 8007d98:	4b41      	ldr	r3, [pc, #260]	; (8007ea0 <xTaskIncrementTick+0x150>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	4b41      	ldr	r3, [pc, #260]	; (8007ea4 <xTaskIncrementTick+0x154>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a3f      	ldr	r2, [pc, #252]	; (8007ea0 <xTaskIncrementTick+0x150>)
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	4a3f      	ldr	r2, [pc, #252]	; (8007ea4 <xTaskIncrementTick+0x154>)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	4b3e      	ldr	r3, [pc, #248]	; (8007ea8 <xTaskIncrementTick+0x158>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a3d      	ldr	r2, [pc, #244]	; (8007ea8 <xTaskIncrementTick+0x158>)
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	f000 fad1 	bl	800835c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dba:	4b3c      	ldr	r3, [pc, #240]	; (8007eac <xTaskIncrementTick+0x15c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d349      	bcc.n	8007e58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dc4:	4b36      	ldr	r3, [pc, #216]	; (8007ea0 <xTaskIncrementTick+0x150>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d104      	bne.n	8007dd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dce:	4b37      	ldr	r3, [pc, #220]	; (8007eac <xTaskIncrementTick+0x15c>)
 8007dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dd4:	601a      	str	r2, [r3, #0]
					break;
 8007dd6:	e03f      	b.n	8007e58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd8:	4b31      	ldr	r3, [pc, #196]	; (8007ea0 <xTaskIncrementTick+0x150>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d203      	bcs.n	8007df8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007df0:	4a2e      	ldr	r2, [pc, #184]	; (8007eac <xTaskIncrementTick+0x15c>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007df6:	e02f      	b.n	8007e58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fe ff99 	bl	8006d34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	3318      	adds	r3, #24
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe ff90 	bl	8006d34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	4b25      	ldr	r3, [pc, #148]	; (8007eb0 <xTaskIncrementTick+0x160>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d903      	bls.n	8007e28 <xTaskIncrementTick+0xd8>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	4a22      	ldr	r2, [pc, #136]	; (8007eb0 <xTaskIncrementTick+0x160>)
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4a1f      	ldr	r2, [pc, #124]	; (8007eb4 <xTaskIncrementTick+0x164>)
 8007e36:	441a      	add	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4610      	mov	r0, r2
 8007e40:	f7fe ff1b 	bl	8006c7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e48:	4b1b      	ldr	r3, [pc, #108]	; (8007eb8 <xTaskIncrementTick+0x168>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d3b8      	bcc.n	8007dc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e52:	2301      	movs	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e56:	e7b5      	b.n	8007dc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e58:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <xTaskIncrementTick+0x168>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5e:	4915      	ldr	r1, [pc, #84]	; (8007eb4 <xTaskIncrementTick+0x164>)
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d901      	bls.n	8007e74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e74:	4b11      	ldr	r3, [pc, #68]	; (8007ebc <xTaskIncrementTick+0x16c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e004      	b.n	8007e8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e82:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <xTaskIncrementTick+0x170>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3301      	adds	r3, #1
 8007e88:	4a0d      	ldr	r2, [pc, #52]	; (8007ec0 <xTaskIncrementTick+0x170>)
 8007e8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e8c:	697b      	ldr	r3, [r7, #20]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000c50 	.word	0x20000c50
 8007e9c:	20000c2c 	.word	0x20000c2c
 8007ea0:	20000be0 	.word	0x20000be0
 8007ea4:	20000be4 	.word	0x20000be4
 8007ea8:	20000c40 	.word	0x20000c40
 8007eac:	20000c48 	.word	0x20000c48
 8007eb0:	20000c30 	.word	0x20000c30
 8007eb4:	20000758 	.word	0x20000758
 8007eb8:	20000754 	.word	0x20000754
 8007ebc:	20000c3c 	.word	0x20000c3c
 8007ec0:	20000c38 	.word	0x20000c38

08007ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eca:	4b28      	ldr	r3, [pc, #160]	; (8007f6c <vTaskSwitchContext+0xa8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ed2:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <vTaskSwitchContext+0xac>)
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ed8:	e041      	b.n	8007f5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007eda:	4b25      	ldr	r3, [pc, #148]	; (8007f70 <vTaskSwitchContext+0xac>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee0:	4b24      	ldr	r3, [pc, #144]	; (8007f74 <vTaskSwitchContext+0xb0>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	e010      	b.n	8007f0a <vTaskSwitchContext+0x46>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <vTaskSwitchContext+0x40>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vTaskSwitchContext+0x3e>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	491b      	ldr	r1, [pc, #108]	; (8007f78 <vTaskSwitchContext+0xb4>)
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	440b      	add	r3, r1
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0e4      	beq.n	8007ee8 <vTaskSwitchContext+0x24>
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <vTaskSwitchContext+0xb4>)
 8007f2a:	4413      	add	r3, r2
 8007f2c:	60bb      	str	r3, [r7, #8]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	3308      	adds	r3, #8
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d104      	bne.n	8007f4e <vTaskSwitchContext+0x8a>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	605a      	str	r2, [r3, #4]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4a09      	ldr	r2, [pc, #36]	; (8007f7c <vTaskSwitchContext+0xb8>)
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	4a06      	ldr	r2, [pc, #24]	; (8007f74 <vTaskSwitchContext+0xb0>)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6013      	str	r3, [r2, #0]
}
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000c50 	.word	0x20000c50
 8007f70:	20000c3c 	.word	0x20000c3c
 8007f74:	20000c30 	.word	0x20000c30
 8007f78:	20000758 	.word	0x20000758
 8007f7c:	20000754 	.word	0x20000754

08007f80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60fb      	str	r3, [r7, #12]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fa6:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <vTaskPlaceOnEventList+0x44>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3318      	adds	r3, #24
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fe fe87 	bl	8006cc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	6838      	ldr	r0, [r7, #0]
 8007fb8:	f000 fa7c 	bl	80084b4 <prvAddCurrentTaskToDelayedList>
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000754 	.word	0x20000754

08007fc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	617b      	str	r3, [r7, #20]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <vTaskPlaceOnEventListRestricted+0x54>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3318      	adds	r3, #24
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7fe fe3e 	bl	8006c7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008008:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	68b8      	ldr	r0, [r7, #8]
 800800e:	f000 fa51 	bl	80084b4 <prvAddCurrentTaskToDelayedList>
	}
 8008012:	bf00      	nop
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000754 	.word	0x20000754

08008020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10a      	bne.n	800804c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60fb      	str	r3, [r7, #12]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	3318      	adds	r3, #24
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe fe6f 	bl	8006d34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008056:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <xTaskRemoveFromEventList+0xb0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d11d      	bne.n	800809a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	3304      	adds	r3, #4
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe fe66 	bl	8006d34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806c:	4b19      	ldr	r3, [pc, #100]	; (80080d4 <xTaskRemoveFromEventList+0xb4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d903      	bls.n	800807c <xTaskRemoveFromEventList+0x5c>
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <xTaskRemoveFromEventList+0xb4>)
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <xTaskRemoveFromEventList+0xb8>)
 800808a:	441a      	add	r2, r3
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3304      	adds	r3, #4
 8008090:	4619      	mov	r1, r3
 8008092:	4610      	mov	r0, r2
 8008094:	f7fe fdf1 	bl	8006c7a <vListInsertEnd>
 8008098:	e005      	b.n	80080a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	3318      	adds	r3, #24
 800809e:	4619      	mov	r1, r3
 80080a0:	480e      	ldr	r0, [pc, #56]	; (80080dc <xTaskRemoveFromEventList+0xbc>)
 80080a2:	f7fe fdea 	bl	8006c7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <xTaskRemoveFromEventList+0xc0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d905      	bls.n	80080c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080b4:	2301      	movs	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <xTaskRemoveFromEventList+0xc4>)
 80080ba:	2201      	movs	r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e001      	b.n	80080c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080c4:	697b      	ldr	r3, [r7, #20]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000c50 	.word	0x20000c50
 80080d4:	20000c30 	.word	0x20000c30
 80080d8:	20000758 	.word	0x20000758
 80080dc:	20000be8 	.word	0x20000be8
 80080e0:	20000754 	.word	0x20000754
 80080e4:	20000c3c 	.word	0x20000c3c

080080e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <vTaskInternalSetTimeOutState+0x24>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <vTaskInternalSetTimeOutState+0x28>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	605a      	str	r2, [r3, #4]
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	20000c40 	.word	0x20000c40
 8008110:	20000c2c 	.word	0x20000c2c

08008114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	613b      	str	r3, [r7, #16]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60fb      	str	r3, [r7, #12]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008156:	f000 fe7d 	bl	8008e54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800815a:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <xTaskCheckForTimeOut+0xbc>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008172:	d102      	bne.n	800817a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e023      	b.n	80081c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <xTaskCheckForTimeOut+0xc0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	429a      	cmp	r2, r3
 8008184:	d007      	beq.n	8008196 <xTaskCheckForTimeOut+0x82>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	429a      	cmp	r2, r3
 800818e:	d302      	bcc.n	8008196 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008190:	2301      	movs	r3, #1
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	e015      	b.n	80081c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	429a      	cmp	r2, r3
 800819e:	d20b      	bcs.n	80081b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	1ad2      	subs	r2, r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff ff9b 	bl	80080e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	e004      	b.n	80081c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081be:	2301      	movs	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081c2:	f000 fe77 	bl	8008eb4 <vPortExitCritical>

	return xReturn;
 80081c6:	69fb      	ldr	r3, [r7, #28]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20000c2c 	.word	0x20000c2c
 80081d4:	20000c40 	.word	0x20000c40

080081d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081dc:	4b03      	ldr	r3, [pc, #12]	; (80081ec <vTaskMissedYield+0x14>)
 80081de:	2201      	movs	r2, #1
 80081e0:	601a      	str	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000c3c 	.word	0x20000c3c

080081f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081f8:	f000 f852 	bl	80082a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081fc:	4b06      	ldr	r3, [pc, #24]	; (8008218 <prvIdleTask+0x28>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d9f9      	bls.n	80081f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <prvIdleTask+0x2c>)
 8008206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008214:	e7f0      	b.n	80081f8 <prvIdleTask+0x8>
 8008216:	bf00      	nop
 8008218:	20000758 	.word	0x20000758
 800821c:	e000ed04 	.word	0xe000ed04

08008220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	e00c      	b.n	8008246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4a12      	ldr	r2, [pc, #72]	; (8008280 <prvInitialiseTaskLists+0x60>)
 8008238:	4413      	add	r3, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fcf0 	bl	8006c20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3301      	adds	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b37      	cmp	r3, #55	; 0x37
 800824a:	d9ef      	bls.n	800822c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800824c:	480d      	ldr	r0, [pc, #52]	; (8008284 <prvInitialiseTaskLists+0x64>)
 800824e:	f7fe fce7 	bl	8006c20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008252:	480d      	ldr	r0, [pc, #52]	; (8008288 <prvInitialiseTaskLists+0x68>)
 8008254:	f7fe fce4 	bl	8006c20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008258:	480c      	ldr	r0, [pc, #48]	; (800828c <prvInitialiseTaskLists+0x6c>)
 800825a:	f7fe fce1 	bl	8006c20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800825e:	480c      	ldr	r0, [pc, #48]	; (8008290 <prvInitialiseTaskLists+0x70>)
 8008260:	f7fe fcde 	bl	8006c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008264:	480b      	ldr	r0, [pc, #44]	; (8008294 <prvInitialiseTaskLists+0x74>)
 8008266:	f7fe fcdb 	bl	8006c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800826a:	4b0b      	ldr	r3, [pc, #44]	; (8008298 <prvInitialiseTaskLists+0x78>)
 800826c:	4a05      	ldr	r2, [pc, #20]	; (8008284 <prvInitialiseTaskLists+0x64>)
 800826e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008270:	4b0a      	ldr	r3, [pc, #40]	; (800829c <prvInitialiseTaskLists+0x7c>)
 8008272:	4a05      	ldr	r2, [pc, #20]	; (8008288 <prvInitialiseTaskLists+0x68>)
 8008274:	601a      	str	r2, [r3, #0]
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000758 	.word	0x20000758
 8008284:	20000bb8 	.word	0x20000bb8
 8008288:	20000bcc 	.word	0x20000bcc
 800828c:	20000be8 	.word	0x20000be8
 8008290:	20000bfc 	.word	0x20000bfc
 8008294:	20000c14 	.word	0x20000c14
 8008298:	20000be0 	.word	0x20000be0
 800829c:	20000be4 	.word	0x20000be4

080082a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082a6:	e019      	b.n	80082dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082a8:	f000 fdd4 	bl	8008e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <prvCheckTasksWaitingTermination+0x50>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fd3b 	bl	8006d34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082be:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <prvCheckTasksWaitingTermination+0x54>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3b01      	subs	r3, #1
 80082c4:	4a0b      	ldr	r2, [pc, #44]	; (80082f4 <prvCheckTasksWaitingTermination+0x54>)
 80082c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082d2:	f000 fdef 	bl	8008eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f810 	bl	80082fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <prvCheckTasksWaitingTermination+0x58>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e1      	bne.n	80082a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000bfc 	.word	0x20000bfc
 80082f4:	20000c28 	.word	0x20000c28
 80082f8:	20000c10 	.word	0x20000c10

080082fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800830a:	2b00      	cmp	r3, #0
 800830c:	d108      	bne.n	8008320 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	4618      	mov	r0, r3
 8008314:	f000 ff8c 	bl	8009230 <vPortFree>
				vPortFree( pxTCB );
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 ff89 	bl	8009230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800831e:	e018      	b.n	8008352 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008326:	2b01      	cmp	r3, #1
 8008328:	d103      	bne.n	8008332 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 ff80 	bl	8009230 <vPortFree>
	}
 8008330:	e00f      	b.n	8008352 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008338:	2b02      	cmp	r3, #2
 800833a:	d00a      	beq.n	8008352 <prvDeleteTCB+0x56>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	60fb      	str	r3, [r7, #12]
}
 800834e:	bf00      	nop
 8008350:	e7fe      	b.n	8008350 <prvDeleteTCB+0x54>
	}
 8008352:	bf00      	nop
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <prvResetNextTaskUnblockTime+0x38>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800836c:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <prvResetNextTaskUnblockTime+0x3c>)
 800836e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008374:	e008      	b.n	8008388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008376:	4b07      	ldr	r3, [pc, #28]	; (8008394 <prvResetNextTaskUnblockTime+0x38>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	4a04      	ldr	r2, [pc, #16]	; (8008398 <prvResetNextTaskUnblockTime+0x3c>)
 8008386:	6013      	str	r3, [r2, #0]
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	20000be0 	.word	0x20000be0
 8008398:	20000c48 	.word	0x20000c48

0800839c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083a2:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <xTaskGetSchedulerState+0x34>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083aa:	2301      	movs	r3, #1
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	e008      	b.n	80083c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083b0:	4b08      	ldr	r3, [pc, #32]	; (80083d4 <xTaskGetSchedulerState+0x38>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083b8:	2302      	movs	r3, #2
 80083ba:	607b      	str	r3, [r7, #4]
 80083bc:	e001      	b.n	80083c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083be:	2300      	movs	r3, #0
 80083c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083c2:	687b      	ldr	r3, [r7, #4]
	}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	20000c34 	.word	0x20000c34
 80083d4:	20000c50 	.word	0x20000c50

080083d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d056      	beq.n	800849c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083ee:	4b2e      	ldr	r3, [pc, #184]	; (80084a8 <xTaskPriorityDisinherit+0xd0>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d00a      	beq.n	800840e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	60fb      	str	r3, [r7, #12]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10a      	bne.n	800842c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	60bb      	str	r3, [r7, #8]
}
 8008428:	bf00      	nop
 800842a:	e7fe      	b.n	800842a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800843e:	429a      	cmp	r2, r3
 8008440:	d02c      	beq.n	800849c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008446:	2b00      	cmp	r3, #0
 8008448:	d128      	bne.n	800849c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3304      	adds	r3, #4
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fc70 	bl	8006d34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846c:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <xTaskPriorityDisinherit+0xd4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d903      	bls.n	800847c <xTaskPriorityDisinherit+0xa4>
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008478:	4a0c      	ldr	r2, [pc, #48]	; (80084ac <xTaskPriorityDisinherit+0xd4>)
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008480:	4613      	mov	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <xTaskPriorityDisinherit+0xd8>)
 800848a:	441a      	add	r2, r3
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	3304      	adds	r3, #4
 8008490:	4619      	mov	r1, r3
 8008492:	4610      	mov	r0, r2
 8008494:	f7fe fbf1 	bl	8006c7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800849c:	697b      	ldr	r3, [r7, #20]
	}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000754 	.word	0x20000754
 80084ac:	20000c30 	.word	0x20000c30
 80084b0:	20000758 	.word	0x20000758

080084b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084be:	4b21      	ldr	r3, [pc, #132]	; (8008544 <prvAddCurrentTaskToDelayedList+0x90>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084c4:	4b20      	ldr	r3, [pc, #128]	; (8008548 <prvAddCurrentTaskToDelayedList+0x94>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fc32 	bl	8006d34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084d6:	d10a      	bne.n	80084ee <prvAddCurrentTaskToDelayedList+0x3a>
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084de:	4b1a      	ldr	r3, [pc, #104]	; (8008548 <prvAddCurrentTaskToDelayedList+0x94>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4619      	mov	r1, r3
 80084e6:	4819      	ldr	r0, [pc, #100]	; (800854c <prvAddCurrentTaskToDelayedList+0x98>)
 80084e8:	f7fe fbc7 	bl	8006c7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084ec:	e026      	b.n	800853c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084f6:	4b14      	ldr	r3, [pc, #80]	; (8008548 <prvAddCurrentTaskToDelayedList+0x94>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	429a      	cmp	r2, r3
 8008504:	d209      	bcs.n	800851a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4b0f      	ldr	r3, [pc, #60]	; (8008548 <prvAddCurrentTaskToDelayedList+0x94>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7fe fbd5 	bl	8006cc2 <vListInsert>
}
 8008518:	e010      	b.n	800853c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800851a:	4b0e      	ldr	r3, [pc, #56]	; (8008554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <prvAddCurrentTaskToDelayedList+0x94>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3304      	adds	r3, #4
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f7fe fbcb 	bl	8006cc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	d202      	bcs.n	800853c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008536:	4a08      	ldr	r2, [pc, #32]	; (8008558 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	6013      	str	r3, [r2, #0]
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000c2c 	.word	0x20000c2c
 8008548:	20000754 	.word	0x20000754
 800854c:	20000c14 	.word	0x20000c14
 8008550:	20000be4 	.word	0x20000be4
 8008554:	20000be0 	.word	0x20000be0
 8008558:	20000c48 	.word	0x20000c48

0800855c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	; 0x28
 8008560:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008566:	f000 fb07 	bl	8008b78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800856a:	4b1c      	ldr	r3, [pc, #112]	; (80085dc <xTimerCreateTimerTask+0x80>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d021      	beq.n	80085b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008576:	2300      	movs	r3, #0
 8008578:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800857a:	1d3a      	adds	r2, r7, #4
 800857c:	f107 0108 	add.w	r1, r7, #8
 8008580:	f107 030c 	add.w	r3, r7, #12
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fb31 	bl	8006bec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	9202      	str	r2, [sp, #8]
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	2302      	movs	r3, #2
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	2300      	movs	r3, #0
 800859a:	460a      	mov	r2, r1
 800859c:	4910      	ldr	r1, [pc, #64]	; (80085e0 <xTimerCreateTimerTask+0x84>)
 800859e:	4811      	ldr	r0, [pc, #68]	; (80085e4 <xTimerCreateTimerTask+0x88>)
 80085a0:	f7ff f8de 	bl	8007760 <xTaskCreateStatic>
 80085a4:	4603      	mov	r3, r0
 80085a6:	4a10      	ldr	r2, [pc, #64]	; (80085e8 <xTimerCreateTimerTask+0x8c>)
 80085a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085aa:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <xTimerCreateTimerTask+0x8c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085b2:	2301      	movs	r3, #1
 80085b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10a      	bne.n	80085d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	613b      	str	r3, [r7, #16]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085d2:	697b      	ldr	r3, [r7, #20]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000c84 	.word	0x20000c84
 80085e0:	0800a3d8 	.word	0x0800a3d8
 80085e4:	08008721 	.word	0x08008721
 80085e8:	20000c88 	.word	0x20000c88

080085ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	; 0x28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	623b      	str	r3, [r7, #32]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800861a:	4b1a      	ldr	r3, [pc, #104]	; (8008684 <xTimerGenericCommand+0x98>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d02a      	beq.n	8008678 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b05      	cmp	r3, #5
 8008632:	dc18      	bgt.n	8008666 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008634:	f7ff feb2 	bl	800839c <xTaskGetSchedulerState>
 8008638:	4603      	mov	r3, r0
 800863a:	2b02      	cmp	r3, #2
 800863c:	d109      	bne.n	8008652 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800863e:	4b11      	ldr	r3, [pc, #68]	; (8008684 <xTimerGenericCommand+0x98>)
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	f107 0110 	add.w	r1, r7, #16
 8008646:	2300      	movs	r3, #0
 8008648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864a:	f7fe fca1 	bl	8006f90 <xQueueGenericSend>
 800864e:	6278      	str	r0, [r7, #36]	; 0x24
 8008650:	e012      	b.n	8008678 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008652:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <xTimerGenericCommand+0x98>)
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	f107 0110 	add.w	r1, r7, #16
 800865a:	2300      	movs	r3, #0
 800865c:	2200      	movs	r2, #0
 800865e:	f7fe fc97 	bl	8006f90 <xQueueGenericSend>
 8008662:	6278      	str	r0, [r7, #36]	; 0x24
 8008664:	e008      	b.n	8008678 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008666:	4b07      	ldr	r3, [pc, #28]	; (8008684 <xTimerGenericCommand+0x98>)
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f107 0110 	add.w	r1, r7, #16
 800866e:	2300      	movs	r3, #0
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	f7fe fd8b 	bl	800718c <xQueueGenericSendFromISR>
 8008676:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800867a:	4618      	mov	r0, r3
 800867c:	3728      	adds	r7, #40	; 0x28
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000c84 	.word	0x20000c84

08008688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af02      	add	r7, sp, #8
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008692:	4b22      	ldr	r3, [pc, #136]	; (800871c <prvProcessExpiredTimer+0x94>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	3304      	adds	r3, #4
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fe fb47 	bl	8006d34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d022      	beq.n	80086fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	699a      	ldr	r2, [r3, #24]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	18d1      	adds	r1, r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	6978      	ldr	r0, [r7, #20]
 80086c2:	f000 f8d1 	bl	8008868 <prvInsertTimerInActiveList>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01f      	beq.n	800870c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086cc:	2300      	movs	r3, #0
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	2300      	movs	r3, #0
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	2100      	movs	r1, #0
 80086d6:	6978      	ldr	r0, [r7, #20]
 80086d8:	f7ff ff88 	bl	80085ec <xTimerGenericCommand>
 80086dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d113      	bne.n	800870c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	60fb      	str	r3, [r7, #12]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008700:	f023 0301 	bic.w	r3, r3, #1
 8008704:	b2da      	uxtb	r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	6978      	ldr	r0, [r7, #20]
 8008712:	4798      	blx	r3
}
 8008714:	bf00      	nop
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000c7c 	.word	0x20000c7c

08008720 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008728:	f107 0308 	add.w	r3, r7, #8
 800872c:	4618      	mov	r0, r3
 800872e:	f000 f857 	bl	80087e0 <prvGetNextExpireTime>
 8008732:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4619      	mov	r1, r3
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f803 	bl	8008744 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800873e:	f000 f8d5 	bl	80088ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008742:	e7f1      	b.n	8008728 <prvTimerTask+0x8>

08008744 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800874e:	f7ff fa43 	bl	8007bd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	4618      	mov	r0, r3
 8008758:	f000 f866 	bl	8008828 <prvSampleTimeNow>
 800875c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d130      	bne.n	80087c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10a      	bne.n	8008780 <prvProcessTimerOrBlockTask+0x3c>
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	429a      	cmp	r2, r3
 8008770:	d806      	bhi.n	8008780 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008772:	f7ff fa3f 	bl	8007bf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008776:	68f9      	ldr	r1, [r7, #12]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff85 	bl	8008688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800877e:	e024      	b.n	80087ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d008      	beq.n	8008798 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008786:	4b13      	ldr	r3, [pc, #76]	; (80087d4 <prvProcessTimerOrBlockTask+0x90>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <prvProcessTimerOrBlockTask+0x50>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <prvProcessTimerOrBlockTask+0x52>
 8008794:	2300      	movs	r3, #0
 8008796:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008798:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <prvProcessTimerOrBlockTask+0x94>)
 800879a:	6818      	ldr	r0, [r3, #0]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	4619      	mov	r1, r3
 80087a6:	f7fe ffa7 	bl	80076f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087aa:	f7ff fa23 	bl	8007bf4 <xTaskResumeAll>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087b4:	4b09      	ldr	r3, [pc, #36]	; (80087dc <prvProcessTimerOrBlockTask+0x98>)
 80087b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	f3bf 8f6f 	isb	sy
}
 80087c4:	e001      	b.n	80087ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087c6:	f7ff fa15 	bl	8007bf4 <xTaskResumeAll>
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000c80 	.word	0x20000c80
 80087d8:	20000c84 	.word	0x20000c84
 80087dc:	e000ed04 	.word	0xe000ed04

080087e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087e8:	4b0e      	ldr	r3, [pc, #56]	; (8008824 <prvGetNextExpireTime+0x44>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <prvGetNextExpireTime+0x16>
 80087f2:	2201      	movs	r2, #1
 80087f4:	e000      	b.n	80087f8 <prvGetNextExpireTime+0x18>
 80087f6:	2200      	movs	r2, #0
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008804:	4b07      	ldr	r3, [pc, #28]	; (8008824 <prvGetNextExpireTime+0x44>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	e001      	b.n	8008814 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008814:	68fb      	ldr	r3, [r7, #12]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000c7c 	.word	0x20000c7c

08008828 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008830:	f7ff fa7e 	bl	8007d30 <xTaskGetTickCount>
 8008834:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008836:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <prvSampleTimeNow+0x3c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	429a      	cmp	r2, r3
 800883e:	d205      	bcs.n	800884c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008840:	f000 f936 	bl	8008ab0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	e002      	b.n	8008852 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008852:	4a04      	ldr	r2, [pc, #16]	; (8008864 <prvSampleTimeNow+0x3c>)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008858:	68fb      	ldr	r3, [r7, #12]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20000c8c 	.word	0x20000c8c

08008868 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008876:	2300      	movs	r3, #0
 8008878:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	429a      	cmp	r2, r3
 800888c:	d812      	bhi.n	80088b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	1ad2      	subs	r2, r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	429a      	cmp	r2, r3
 800889a:	d302      	bcc.n	80088a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e01b      	b.n	80088da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088a2:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <prvInsertTimerInActiveList+0x7c>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f7fe fa08 	bl	8006cc2 <vListInsert>
 80088b2:	e012      	b.n	80088da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d206      	bcs.n	80088ca <prvInsertTimerInActiveList+0x62>
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d302      	bcc.n	80088ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088c4:	2301      	movs	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	e007      	b.n	80088da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088ca:	4b07      	ldr	r3, [pc, #28]	; (80088e8 <prvInsertTimerInActiveList+0x80>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3304      	adds	r3, #4
 80088d2:	4619      	mov	r1, r3
 80088d4:	4610      	mov	r0, r2
 80088d6:	f7fe f9f4 	bl	8006cc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088da:	697b      	ldr	r3, [r7, #20]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20000c80 	.word	0x20000c80
 80088e8:	20000c7c 	.word	0x20000c7c

080088ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08e      	sub	sp, #56	; 0x38
 80088f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088f2:	e0ca      	b.n	8008a8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da18      	bge.n	800892c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088fa:	1d3b      	adds	r3, r7, #4
 80088fc:	3304      	adds	r3, #4
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	61fb      	str	r3, [r7, #28]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008922:	6850      	ldr	r0, [r2, #4]
 8008924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008926:	6892      	ldr	r2, [r2, #8]
 8008928:	4611      	mov	r1, r2
 800892a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f2c0 80aa 	blt.w	8008a88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	3304      	adds	r3, #4
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe f9f5 	bl	8006d34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800894a:	463b      	mov	r3, r7
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff ff6b 	bl	8008828 <prvSampleTimeNow>
 8008952:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b09      	cmp	r3, #9
 8008958:	f200 8097 	bhi.w	8008a8a <prvProcessReceivedCommands+0x19e>
 800895c:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <prvProcessReceivedCommands+0x78>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	0800898d 	.word	0x0800898d
 8008968:	0800898d 	.word	0x0800898d
 800896c:	0800898d 	.word	0x0800898d
 8008970:	08008a01 	.word	0x08008a01
 8008974:	08008a15 	.word	0x08008a15
 8008978:	08008a5f 	.word	0x08008a5f
 800897c:	0800898d 	.word	0x0800898d
 8008980:	0800898d 	.word	0x0800898d
 8008984:	08008a01 	.word	0x08008a01
 8008988:	08008a15 	.word	0x08008a15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008992:	f043 0301 	orr.w	r3, r3, #1
 8008996:	b2da      	uxtb	r2, r3
 8008998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	18d1      	adds	r1, r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ac:	f7ff ff5c 	bl	8008868 <prvInsertTimerInActiveList>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d069      	beq.n	8008a8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d05e      	beq.n	8008a8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	441a      	add	r2, r3
 80089d4:	2300      	movs	r3, #0
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	2300      	movs	r3, #0
 80089da:	2100      	movs	r1, #0
 80089dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089de:	f7ff fe05 	bl	80085ec <xTimerGenericCommand>
 80089e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089e4:	6a3b      	ldr	r3, [r7, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d14f      	bne.n	8008a8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	61bb      	str	r3, [r7, #24]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a06:	f023 0301 	bic.w	r3, r3, #1
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008a12:	e03a      	b.n	8008a8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	617b      	str	r3, [r7, #20]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	699a      	ldr	r2, [r3, #24]
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	18d1      	adds	r1, r2, r3
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a58:	f7ff ff06 	bl	8008868 <prvInsertTimerInActiveList>
					break;
 8008a5c:	e015      	b.n	8008a8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a6e:	f000 fbdf 	bl	8009230 <vPortFree>
 8008a72:	e00a      	b.n	8008a8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a7a:	f023 0301 	bic.w	r3, r3, #1
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a86:	e000      	b.n	8008a8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a8a:	4b08      	ldr	r3, [pc, #32]	; (8008aac <prvProcessReceivedCommands+0x1c0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	1d39      	adds	r1, r7, #4
 8008a90:	2200      	movs	r2, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fc16 	bl	80072c4 <xQueueReceive>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f47f af2a 	bne.w	80088f4 <prvProcessReceivedCommands+0x8>
	}
}
 8008aa0:	bf00      	nop
 8008aa2:	bf00      	nop
 8008aa4:	3730      	adds	r7, #48	; 0x30
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000c84 	.word	0x20000c84

08008ab0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ab6:	e048      	b.n	8008b4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ab8:	4b2d      	ldr	r3, [pc, #180]	; (8008b70 <prvSwitchTimerLists+0xc0>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac2:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <prvSwitchTimerLists+0xc0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3304      	adds	r3, #4
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fe f92f 	bl	8006d34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d02e      	beq.n	8008b4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4413      	add	r3, r2
 8008af4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d90e      	bls.n	8008b1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b0a:	4b19      	ldr	r3, [pc, #100]	; (8008b70 <prvSwitchTimerLists+0xc0>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f7fe f8d4 	bl	8006cc2 <vListInsert>
 8008b1a:	e016      	b.n	8008b4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	2300      	movs	r3, #0
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	2100      	movs	r1, #0
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff fd60 	bl	80085ec <xTimerGenericCommand>
 8008b2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	603b      	str	r3, [r7, #0]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b4a:	4b09      	ldr	r3, [pc, #36]	; (8008b70 <prvSwitchTimerLists+0xc0>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1b1      	bne.n	8008ab8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b54:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <prvSwitchTimerLists+0xc0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b5a:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <prvSwitchTimerLists+0xc4>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a04      	ldr	r2, [pc, #16]	; (8008b70 <prvSwitchTimerLists+0xc0>)
 8008b60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b62:	4a04      	ldr	r2, [pc, #16]	; (8008b74 <prvSwitchTimerLists+0xc4>)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	6013      	str	r3, [r2, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20000c7c 	.word	0x20000c7c
 8008b74:	20000c80 	.word	0x20000c80

08008b78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b7e:	f000 f969 	bl	8008e54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <prvCheckForValidListAndQueue+0x60>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d120      	bne.n	8008bcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b8a:	4814      	ldr	r0, [pc, #80]	; (8008bdc <prvCheckForValidListAndQueue+0x64>)
 8008b8c:	f7fe f848 	bl	8006c20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b90:	4813      	ldr	r0, [pc, #76]	; (8008be0 <prvCheckForValidListAndQueue+0x68>)
 8008b92:	f7fe f845 	bl	8006c20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b96:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <prvCheckForValidListAndQueue+0x6c>)
 8008b98:	4a10      	ldr	r2, [pc, #64]	; (8008bdc <prvCheckForValidListAndQueue+0x64>)
 8008b9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b9c:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <prvCheckForValidListAndQueue+0x70>)
 8008b9e:	4a10      	ldr	r2, [pc, #64]	; (8008be0 <prvCheckForValidListAndQueue+0x68>)
 8008ba0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <prvCheckForValidListAndQueue+0x74>)
 8008ba8:	4a11      	ldr	r2, [pc, #68]	; (8008bf0 <prvCheckForValidListAndQueue+0x78>)
 8008baa:	2110      	movs	r1, #16
 8008bac:	200a      	movs	r0, #10
 8008bae:	f7fe f953 	bl	8006e58 <xQueueGenericCreateStatic>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <prvCheckForValidListAndQueue+0x60>)
 8008bb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <prvCheckForValidListAndQueue+0x60>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d005      	beq.n	8008bcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <prvCheckForValidListAndQueue+0x60>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	490b      	ldr	r1, [pc, #44]	; (8008bf4 <prvCheckForValidListAndQueue+0x7c>)
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fd6c 	bl	80076a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bcc:	f000 f972 	bl	8008eb4 <vPortExitCritical>
}
 8008bd0:	bf00      	nop
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20000c84 	.word	0x20000c84
 8008bdc:	20000c54 	.word	0x20000c54
 8008be0:	20000c68 	.word	0x20000c68
 8008be4:	20000c7c 	.word	0x20000c7c
 8008be8:	20000c80 	.word	0x20000c80
 8008bec:	20000d30 	.word	0x20000d30
 8008bf0:	20000c90 	.word	0x20000c90
 8008bf4:	0800a3e0 	.word	0x0800a3e0

08008bf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3b04      	subs	r3, #4
 8008c08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3b04      	subs	r3, #4
 8008c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f023 0201 	bic.w	r2, r3, #1
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3b04      	subs	r3, #4
 8008c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c28:	4a0c      	ldr	r2, [pc, #48]	; (8008c5c <pxPortInitialiseStack+0x64>)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3b14      	subs	r3, #20
 8008c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3b04      	subs	r3, #4
 8008c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f06f 0202 	mvn.w	r2, #2
 8008c46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3b20      	subs	r3, #32
 8008c4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	08008c61 	.word	0x08008c61

08008c60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c6a:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <prvTaskExitError+0x54>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c72:	d00a      	beq.n	8008c8a <prvTaskExitError+0x2a>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	60fb      	str	r3, [r7, #12]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <prvTaskExitError+0x28>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	60bb      	str	r3, [r7, #8]
}
 8008c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c9e:	bf00      	nop
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0fc      	beq.n	8008ca0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	2000000c 	.word	0x2000000c
	...

08008cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <pxCurrentTCBConst2>)
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	6808      	ldr	r0, [r1, #0]
 8008cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	f380 8809 	msr	PSP, r0
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f380 8811 	msr	BASEPRI, r0
 8008cda:	4770      	bx	lr
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst2>:
 8008ce0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ce8:	4808      	ldr	r0, [pc, #32]	; (8008d0c <prvPortStartFirstTask+0x24>)
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	6800      	ldr	r0, [r0, #0]
 8008cee:	f380 8808 	msr	MSP, r0
 8008cf2:	f04f 0000 	mov.w	r0, #0
 8008cf6:	f380 8814 	msr	CONTROL, r0
 8008cfa:	b662      	cpsie	i
 8008cfc:	b661      	cpsie	f
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	df00      	svc	0
 8008d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d0a:	bf00      	nop
 8008d0c:	e000ed08 	.word	0xe000ed08

08008d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d16:	4b46      	ldr	r3, [pc, #280]	; (8008e30 <xPortStartScheduler+0x120>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a46      	ldr	r2, [pc, #280]	; (8008e34 <xPortStartScheduler+0x124>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d10a      	bne.n	8008d36 <xPortStartScheduler+0x26>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	613b      	str	r3, [r7, #16]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d36:	4b3e      	ldr	r3, [pc, #248]	; (8008e30 <xPortStartScheduler+0x120>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a3f      	ldr	r2, [pc, #252]	; (8008e38 <xPortStartScheduler+0x128>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d10a      	bne.n	8008d56 <xPortStartScheduler+0x46>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d56:	4b39      	ldr	r3, [pc, #228]	; (8008e3c <xPortStartScheduler+0x12c>)
 8008d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	22ff      	movs	r2, #255	; 0xff
 8008d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	4b31      	ldr	r3, [pc, #196]	; (8008e40 <xPortStartScheduler+0x130>)
 8008d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d7e:	4b31      	ldr	r3, [pc, #196]	; (8008e44 <xPortStartScheduler+0x134>)
 8008d80:	2207      	movs	r2, #7
 8008d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d84:	e009      	b.n	8008d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d86:	4b2f      	ldr	r3, [pc, #188]	; (8008e44 <xPortStartScheduler+0x134>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	4a2d      	ldr	r2, [pc, #180]	; (8008e44 <xPortStartScheduler+0x134>)
 8008d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d9a:	78fb      	ldrb	r3, [r7, #3]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da2:	2b80      	cmp	r3, #128	; 0x80
 8008da4:	d0ef      	beq.n	8008d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008da6:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <xPortStartScheduler+0x134>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f1c3 0307 	rsb	r3, r3, #7
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d00a      	beq.n	8008dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	60bb      	str	r3, [r7, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <xPortStartScheduler+0x134>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	4a1d      	ldr	r2, [pc, #116]	; (8008e44 <xPortStartScheduler+0x134>)
 8008dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dd2:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <xPortStartScheduler+0x134>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dda:	4a1a      	ldr	r2, [pc, #104]	; (8008e44 <xPortStartScheduler+0x134>)
 8008ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008de6:	4b18      	ldr	r3, [pc, #96]	; (8008e48 <xPortStartScheduler+0x138>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <xPortStartScheduler+0x138>)
 8008dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008df2:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <xPortStartScheduler+0x138>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a14      	ldr	r2, [pc, #80]	; (8008e48 <xPortStartScheduler+0x138>)
 8008df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dfe:	f000 f8dd 	bl	8008fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <xPortStartScheduler+0x13c>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e08:	f000 f8fc 	bl	8009004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e0c:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <xPortStartScheduler+0x140>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a0f      	ldr	r2, [pc, #60]	; (8008e50 <xPortStartScheduler+0x140>)
 8008e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e18:	f7ff ff66 	bl	8008ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e1c:	f7ff f852 	bl	8007ec4 <vTaskSwitchContext>
	prvTaskExitError();
 8008e20:	f7ff ff1e 	bl	8008c60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	e000ed00 	.word	0xe000ed00
 8008e34:	410fc271 	.word	0x410fc271
 8008e38:	410fc270 	.word	0x410fc270
 8008e3c:	e000e400 	.word	0xe000e400
 8008e40:	20000d80 	.word	0x20000d80
 8008e44:	20000d84 	.word	0x20000d84
 8008e48:	e000ed20 	.word	0xe000ed20
 8008e4c:	2000000c 	.word	0x2000000c
 8008e50:	e000ef34 	.word	0xe000ef34

08008e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	607b      	str	r3, [r7, #4]
}
 8008e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <vPortEnterCritical+0x58>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	4a0d      	ldr	r2, [pc, #52]	; (8008eac <vPortEnterCritical+0x58>)
 8008e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e78:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <vPortEnterCritical+0x58>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10f      	bne.n	8008ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e80:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <vPortEnterCritical+0x5c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	603b      	str	r3, [r7, #0]
}
 8008e9c:	bf00      	nop
 8008e9e:	e7fe      	b.n	8008e9e <vPortEnterCritical+0x4a>
	}
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	2000000c 	.word	0x2000000c
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eba:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <vPortExitCritical+0x50>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <vPortExitCritical+0x24>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	607b      	str	r3, [r7, #4]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <vPortExitCritical+0x50>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <vPortExitCritical+0x50>)
 8008ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ee2:	4b08      	ldr	r3, [pc, #32]	; (8008f04 <vPortExitCritical+0x50>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <vPortExitCritical+0x42>
 8008eea:	2300      	movs	r3, #0
 8008eec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	f383 8811 	msr	BASEPRI, r3
}
 8008ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	2000000c 	.word	0x2000000c
	...

08008f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f10:	f3ef 8009 	mrs	r0, PSP
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <pxCurrentTCBConst>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	f01e 0f10 	tst.w	lr, #16
 8008f20:	bf08      	it	eq
 8008f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	6010      	str	r0, [r2, #0]
 8008f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f34:	f380 8811 	msr	BASEPRI, r0
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f7fe ffc0 	bl	8007ec4 <vTaskSwitchContext>
 8008f44:	f04f 0000 	mov.w	r0, #0
 8008f48:	f380 8811 	msr	BASEPRI, r0
 8008f4c:	bc09      	pop	{r0, r3}
 8008f4e:	6819      	ldr	r1, [r3, #0]
 8008f50:	6808      	ldr	r0, [r1, #0]
 8008f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f56:	f01e 0f10 	tst.w	lr, #16
 8008f5a:	bf08      	it	eq
 8008f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f60:	f380 8809 	msr	PSP, r0
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	f3af 8000 	nop.w

08008f70 <pxCurrentTCBConst>:
 8008f70:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	607b      	str	r3, [r7, #4]
}
 8008f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f92:	f7fe fedd 	bl	8007d50 <xTaskIncrementTick>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <xPortSysTickHandler+0x40>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f383 8811 	msr	BASEPRI, r3
}
 8008fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <vPortSetupTimerInterrupt+0x34>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <vPortSetupTimerInterrupt+0x38>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <vPortSetupTimerInterrupt+0x3c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <vPortSetupTimerInterrupt+0x40>)
 8008fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd6:	099b      	lsrs	r3, r3, #6
 8008fd8:	4a09      	ldr	r2, [pc, #36]	; (8009000 <vPortSetupTimerInterrupt+0x44>)
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fde:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <vPortSetupTimerInterrupt+0x34>)
 8008fe0:	2207      	movs	r2, #7
 8008fe2:	601a      	str	r2, [r3, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	e000e010 	.word	0xe000e010
 8008ff4:	e000e018 	.word	0xe000e018
 8008ff8:	20000000 	.word	0x20000000
 8008ffc:	10624dd3 	.word	0x10624dd3
 8009000:	e000e014 	.word	0xe000e014

08009004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009014 <vPortEnableVFP+0x10>
 8009008:	6801      	ldr	r1, [r0, #0]
 800900a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800900e:	6001      	str	r1, [r0, #0]
 8009010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009012:	bf00      	nop
 8009014:	e000ed88 	.word	0xe000ed88

08009018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800901e:	f3ef 8305 	mrs	r3, IPSR
 8009022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b0f      	cmp	r3, #15
 8009028:	d914      	bls.n	8009054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800902a:	4a17      	ldr	r2, [pc, #92]	; (8009088 <vPortValidateInterruptPriority+0x70>)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4413      	add	r3, r2
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009034:	4b15      	ldr	r3, [pc, #84]	; (800908c <vPortValidateInterruptPriority+0x74>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	7afa      	ldrb	r2, [r7, #11]
 800903a:	429a      	cmp	r2, r3
 800903c:	d20a      	bcs.n	8009054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	607b      	str	r3, [r7, #4]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009054:	4b0e      	ldr	r3, [pc, #56]	; (8009090 <vPortValidateInterruptPriority+0x78>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <vPortValidateInterruptPriority+0x7c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d90a      	bls.n	800907a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	603b      	str	r3, [r7, #0]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <vPortValidateInterruptPriority+0x60>
	}
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	e000e3f0 	.word	0xe000e3f0
 800908c:	20000d80 	.word	0x20000d80
 8009090:	e000ed0c 	.word	0xe000ed0c
 8009094:	20000d84 	.word	0x20000d84

08009098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b08a      	sub	sp, #40	; 0x28
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090a0:	2300      	movs	r3, #0
 80090a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090a4:	f7fe fd98 	bl	8007bd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090a8:	4b5b      	ldr	r3, [pc, #364]	; (8009218 <pvPortMalloc+0x180>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090b0:	f000 f920 	bl	80092f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090b4:	4b59      	ldr	r3, [pc, #356]	; (800921c <pvPortMalloc+0x184>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f040 8093 	bne.w	80091e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01d      	beq.n	8009104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80090c8:	2208      	movs	r2, #8
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4413      	add	r3, r2
 80090ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d014      	beq.n	8009104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f023 0307 	bic.w	r3, r3, #7
 80090e0:	3308      	adds	r3, #8
 80090e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00a      	beq.n	8009104 <pvPortMalloc+0x6c>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	617b      	str	r3, [r7, #20]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d06e      	beq.n	80091e8 <pvPortMalloc+0x150>
 800910a:	4b45      	ldr	r3, [pc, #276]	; (8009220 <pvPortMalloc+0x188>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	429a      	cmp	r2, r3
 8009112:	d869      	bhi.n	80091e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009114:	4b43      	ldr	r3, [pc, #268]	; (8009224 <pvPortMalloc+0x18c>)
 8009116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009118:	4b42      	ldr	r3, [pc, #264]	; (8009224 <pvPortMalloc+0x18c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800911e:	e004      	b.n	800912a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	429a      	cmp	r2, r3
 8009132:	d903      	bls.n	800913c <pvPortMalloc+0xa4>
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f1      	bne.n	8009120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800913c:	4b36      	ldr	r3, [pc, #216]	; (8009218 <pvPortMalloc+0x180>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009142:	429a      	cmp	r2, r3
 8009144:	d050      	beq.n	80091e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2208      	movs	r2, #8
 800914c:	4413      	add	r3, r2
 800914e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	1ad2      	subs	r2, r2, r3
 8009160:	2308      	movs	r3, #8
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	429a      	cmp	r2, r3
 8009166:	d91f      	bls.n	80091a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <pvPortMalloc+0xf8>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	613b      	str	r3, [r7, #16]
}
 800918c:	bf00      	nop
 800918e:	e7fe      	b.n	800918e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091a2:	69b8      	ldr	r0, [r7, #24]
 80091a4:	f000 f908 	bl	80093b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091a8:	4b1d      	ldr	r3, [pc, #116]	; (8009220 <pvPortMalloc+0x188>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	4a1b      	ldr	r2, [pc, #108]	; (8009220 <pvPortMalloc+0x188>)
 80091b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091b6:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <pvPortMalloc+0x188>)
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	4b1b      	ldr	r3, [pc, #108]	; (8009228 <pvPortMalloc+0x190>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d203      	bcs.n	80091ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091c2:	4b17      	ldr	r3, [pc, #92]	; (8009220 <pvPortMalloc+0x188>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a18      	ldr	r2, [pc, #96]	; (8009228 <pvPortMalloc+0x190>)
 80091c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	4b13      	ldr	r3, [pc, #76]	; (800921c <pvPortMalloc+0x184>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	431a      	orrs	r2, r3
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80091de:	4b13      	ldr	r3, [pc, #76]	; (800922c <pvPortMalloc+0x194>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	3301      	adds	r3, #1
 80091e4:	4a11      	ldr	r2, [pc, #68]	; (800922c <pvPortMalloc+0x194>)
 80091e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091e8:	f7fe fd04 	bl	8007bf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <pvPortMalloc+0x174>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	60fb      	str	r3, [r7, #12]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <pvPortMalloc+0x172>
	return pvReturn;
 800920c:	69fb      	ldr	r3, [r7, #28]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3728      	adds	r7, #40	; 0x28
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20001948 	.word	0x20001948
 800921c:	2000195c 	.word	0x2000195c
 8009220:	2000194c 	.word	0x2000194c
 8009224:	20001940 	.word	0x20001940
 8009228:	20001950 	.word	0x20001950
 800922c:	20001954 	.word	0x20001954

08009230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d04d      	beq.n	80092de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009242:	2308      	movs	r3, #8
 8009244:	425b      	negs	r3, r3
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	4413      	add	r3, r2
 800924a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <vPortFree+0xb8>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4013      	ands	r3, r2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <vPortFree+0x44>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	60fb      	str	r3, [r7, #12]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <vPortFree+0x62>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	60bb      	str	r3, [r7, #8]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <vPortFree+0xb8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4013      	ands	r3, r2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01e      	beq.n	80092de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d11a      	bne.n	80092de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <vPortFree+0xb8>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	43db      	mvns	r3, r3
 80092b2:	401a      	ands	r2, r3
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092b8:	f7fe fc8e 	bl	8007bd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	685a      	ldr	r2, [r3, #4]
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <vPortFree+0xbc>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4413      	add	r3, r2
 80092c6:	4a09      	ldr	r2, [pc, #36]	; (80092ec <vPortFree+0xbc>)
 80092c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092ca:	6938      	ldr	r0, [r7, #16]
 80092cc:	f000 f874 	bl	80093b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80092d0:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <vPortFree+0xc0>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	4a06      	ldr	r2, [pc, #24]	; (80092f0 <vPortFree+0xc0>)
 80092d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80092da:	f7fe fc8b 	bl	8007bf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092de:	bf00      	nop
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	2000195c 	.word	0x2000195c
 80092ec:	2000194c 	.word	0x2000194c
 80092f0:	20001958 	.word	0x20001958

080092f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80092fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009300:	4b27      	ldr	r3, [pc, #156]	; (80093a0 <prvHeapInit+0xac>)
 8009302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00c      	beq.n	8009328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3307      	adds	r3, #7
 8009312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 0307 	bic.w	r3, r3, #7
 800931a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	4a1f      	ldr	r2, [pc, #124]	; (80093a0 <prvHeapInit+0xac>)
 8009324:	4413      	add	r3, r2
 8009326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800932c:	4a1d      	ldr	r2, [pc, #116]	; (80093a4 <prvHeapInit+0xb0>)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009332:	4b1c      	ldr	r3, [pc, #112]	; (80093a4 <prvHeapInit+0xb0>)
 8009334:	2200      	movs	r2, #0
 8009336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	4413      	add	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009340:	2208      	movs	r2, #8
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	1a9b      	subs	r3, r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 0307 	bic.w	r3, r3, #7
 800934e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4a15      	ldr	r2, [pc, #84]	; (80093a8 <prvHeapInit+0xb4>)
 8009354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009356:	4b14      	ldr	r3, [pc, #80]	; (80093a8 <prvHeapInit+0xb4>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2200      	movs	r2, #0
 800935c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800935e:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <prvHeapInit+0xb4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009374:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <prvHeapInit+0xb4>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	4a0a      	ldr	r2, [pc, #40]	; (80093ac <prvHeapInit+0xb8>)
 8009382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <prvHeapInit+0xbc>)
 800938a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800938c:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <prvHeapInit+0xc0>)
 800938e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009392:	601a      	str	r2, [r3, #0]
}
 8009394:	bf00      	nop
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	20000d88 	.word	0x20000d88
 80093a4:	20001940 	.word	0x20001940
 80093a8:	20001948 	.word	0x20001948
 80093ac:	20001950 	.word	0x20001950
 80093b0:	2000194c 	.word	0x2000194c
 80093b4:	2000195c 	.word	0x2000195c

080093b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093c0:	4b28      	ldr	r3, [pc, #160]	; (8009464 <prvInsertBlockIntoFreeList+0xac>)
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	e002      	b.n	80093cc <prvInsertBlockIntoFreeList+0x14>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d8f7      	bhi.n	80093c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d108      	bne.n	80093fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	441a      	add	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	441a      	add	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d118      	bne.n	8009440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	4b15      	ldr	r3, [pc, #84]	; (8009468 <prvInsertBlockIntoFreeList+0xb0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d00d      	beq.n	8009436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	441a      	add	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	e008      	b.n	8009448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009436:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <prvInsertBlockIntoFreeList+0xb0>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	e003      	b.n	8009448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	d002      	beq.n	8009456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009456:	bf00      	nop
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	20001940 	.word	0x20001940
 8009468:	20001948 	.word	0x20001948

0800946c <__errno>:
 800946c:	4b01      	ldr	r3, [pc, #4]	; (8009474 <__errno+0x8>)
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	20000010 	.word	0x20000010

08009478 <__libc_init_array>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	4d0d      	ldr	r5, [pc, #52]	; (80094b0 <__libc_init_array+0x38>)
 800947c:	4c0d      	ldr	r4, [pc, #52]	; (80094b4 <__libc_init_array+0x3c>)
 800947e:	1b64      	subs	r4, r4, r5
 8009480:	10a4      	asrs	r4, r4, #2
 8009482:	2600      	movs	r6, #0
 8009484:	42a6      	cmp	r6, r4
 8009486:	d109      	bne.n	800949c <__libc_init_array+0x24>
 8009488:	4d0b      	ldr	r5, [pc, #44]	; (80094b8 <__libc_init_array+0x40>)
 800948a:	4c0c      	ldr	r4, [pc, #48]	; (80094bc <__libc_init_array+0x44>)
 800948c:	f000 ff84 	bl	800a398 <_init>
 8009490:	1b64      	subs	r4, r4, r5
 8009492:	10a4      	asrs	r4, r4, #2
 8009494:	2600      	movs	r6, #0
 8009496:	42a6      	cmp	r6, r4
 8009498:	d105      	bne.n	80094a6 <__libc_init_array+0x2e>
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a0:	4798      	blx	r3
 80094a2:	3601      	adds	r6, #1
 80094a4:	e7ee      	b.n	8009484 <__libc_init_array+0xc>
 80094a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094aa:	4798      	blx	r3
 80094ac:	3601      	adds	r6, #1
 80094ae:	e7f2      	b.n	8009496 <__libc_init_array+0x1e>
 80094b0:	0800a4f4 	.word	0x0800a4f4
 80094b4:	0800a4f4 	.word	0x0800a4f4
 80094b8:	0800a4f4 	.word	0x0800a4f4
 80094bc:	0800a4f8 	.word	0x0800a4f8

080094c0 <memcpy>:
 80094c0:	440a      	add	r2, r1
 80094c2:	4291      	cmp	r1, r2
 80094c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094c8:	d100      	bne.n	80094cc <memcpy+0xc>
 80094ca:	4770      	bx	lr
 80094cc:	b510      	push	{r4, lr}
 80094ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094d6:	4291      	cmp	r1, r2
 80094d8:	d1f9      	bne.n	80094ce <memcpy+0xe>
 80094da:	bd10      	pop	{r4, pc}

080094dc <memset>:
 80094dc:	4402      	add	r2, r0
 80094de:	4603      	mov	r3, r0
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d100      	bne.n	80094e6 <memset+0xa>
 80094e4:	4770      	bx	lr
 80094e6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ea:	e7f9      	b.n	80094e0 <memset+0x4>

080094ec <iprintf>:
 80094ec:	b40f      	push	{r0, r1, r2, r3}
 80094ee:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <iprintf+0x2c>)
 80094f0:	b513      	push	{r0, r1, r4, lr}
 80094f2:	681c      	ldr	r4, [r3, #0]
 80094f4:	b124      	cbz	r4, 8009500 <iprintf+0x14>
 80094f6:	69a3      	ldr	r3, [r4, #24]
 80094f8:	b913      	cbnz	r3, 8009500 <iprintf+0x14>
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f866 	bl	80095cc <__sinit>
 8009500:	ab05      	add	r3, sp, #20
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	68a1      	ldr	r1, [r4, #8]
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	4620      	mov	r0, r4
 800950a:	f000 f983 	bl	8009814 <_vfiprintf_r>
 800950e:	b002      	add	sp, #8
 8009510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009514:	b004      	add	sp, #16
 8009516:	4770      	bx	lr
 8009518:	20000010 	.word	0x20000010

0800951c <std>:
 800951c:	2300      	movs	r3, #0
 800951e:	b510      	push	{r4, lr}
 8009520:	4604      	mov	r4, r0
 8009522:	e9c0 3300 	strd	r3, r3, [r0]
 8009526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800952a:	6083      	str	r3, [r0, #8]
 800952c:	8181      	strh	r1, [r0, #12]
 800952e:	6643      	str	r3, [r0, #100]	; 0x64
 8009530:	81c2      	strh	r2, [r0, #14]
 8009532:	6183      	str	r3, [r0, #24]
 8009534:	4619      	mov	r1, r3
 8009536:	2208      	movs	r2, #8
 8009538:	305c      	adds	r0, #92	; 0x5c
 800953a:	f7ff ffcf 	bl	80094dc <memset>
 800953e:	4b05      	ldr	r3, [pc, #20]	; (8009554 <std+0x38>)
 8009540:	6263      	str	r3, [r4, #36]	; 0x24
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <std+0x3c>)
 8009544:	62a3      	str	r3, [r4, #40]	; 0x28
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <std+0x40>)
 8009548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800954a:	4b05      	ldr	r3, [pc, #20]	; (8009560 <std+0x44>)
 800954c:	6224      	str	r4, [r4, #32]
 800954e:	6323      	str	r3, [r4, #48]	; 0x30
 8009550:	bd10      	pop	{r4, pc}
 8009552:	bf00      	nop
 8009554:	08009dbd 	.word	0x08009dbd
 8009558:	08009ddf 	.word	0x08009ddf
 800955c:	08009e17 	.word	0x08009e17
 8009560:	08009e3b 	.word	0x08009e3b

08009564 <_cleanup_r>:
 8009564:	4901      	ldr	r1, [pc, #4]	; (800956c <_cleanup_r+0x8>)
 8009566:	f000 b8af 	b.w	80096c8 <_fwalk_reent>
 800956a:	bf00      	nop
 800956c:	0800a115 	.word	0x0800a115

08009570 <__sfmoreglue>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	1e4a      	subs	r2, r1, #1
 8009574:	2568      	movs	r5, #104	; 0x68
 8009576:	4355      	muls	r5, r2
 8009578:	460e      	mov	r6, r1
 800957a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800957e:	f000 f8c5 	bl	800970c <_malloc_r>
 8009582:	4604      	mov	r4, r0
 8009584:	b140      	cbz	r0, 8009598 <__sfmoreglue+0x28>
 8009586:	2100      	movs	r1, #0
 8009588:	e9c0 1600 	strd	r1, r6, [r0]
 800958c:	300c      	adds	r0, #12
 800958e:	60a0      	str	r0, [r4, #8]
 8009590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009594:	f7ff ffa2 	bl	80094dc <memset>
 8009598:	4620      	mov	r0, r4
 800959a:	bd70      	pop	{r4, r5, r6, pc}

0800959c <__sfp_lock_acquire>:
 800959c:	4801      	ldr	r0, [pc, #4]	; (80095a4 <__sfp_lock_acquire+0x8>)
 800959e:	f000 b8b3 	b.w	8009708 <__retarget_lock_acquire_recursive>
 80095a2:	bf00      	nop
 80095a4:	20001bd0 	.word	0x20001bd0

080095a8 <__sfp_lock_release>:
 80095a8:	4801      	ldr	r0, [pc, #4]	; (80095b0 <__sfp_lock_release+0x8>)
 80095aa:	f000 b8ae 	b.w	800970a <__retarget_lock_release_recursive>
 80095ae:	bf00      	nop
 80095b0:	20001bd0 	.word	0x20001bd0

080095b4 <__sinit_lock_acquire>:
 80095b4:	4801      	ldr	r0, [pc, #4]	; (80095bc <__sinit_lock_acquire+0x8>)
 80095b6:	f000 b8a7 	b.w	8009708 <__retarget_lock_acquire_recursive>
 80095ba:	bf00      	nop
 80095bc:	20001bcb 	.word	0x20001bcb

080095c0 <__sinit_lock_release>:
 80095c0:	4801      	ldr	r0, [pc, #4]	; (80095c8 <__sinit_lock_release+0x8>)
 80095c2:	f000 b8a2 	b.w	800970a <__retarget_lock_release_recursive>
 80095c6:	bf00      	nop
 80095c8:	20001bcb 	.word	0x20001bcb

080095cc <__sinit>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	4604      	mov	r4, r0
 80095d0:	f7ff fff0 	bl	80095b4 <__sinit_lock_acquire>
 80095d4:	69a3      	ldr	r3, [r4, #24]
 80095d6:	b11b      	cbz	r3, 80095e0 <__sinit+0x14>
 80095d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095dc:	f7ff bff0 	b.w	80095c0 <__sinit_lock_release>
 80095e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095e4:	6523      	str	r3, [r4, #80]	; 0x50
 80095e6:	4b13      	ldr	r3, [pc, #76]	; (8009634 <__sinit+0x68>)
 80095e8:	4a13      	ldr	r2, [pc, #76]	; (8009638 <__sinit+0x6c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	bf04      	itt	eq
 80095f2:	2301      	moveq	r3, #1
 80095f4:	61a3      	streq	r3, [r4, #24]
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 f820 	bl	800963c <__sfp>
 80095fc:	6060      	str	r0, [r4, #4]
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f81c 	bl	800963c <__sfp>
 8009604:	60a0      	str	r0, [r4, #8]
 8009606:	4620      	mov	r0, r4
 8009608:	f000 f818 	bl	800963c <__sfp>
 800960c:	2200      	movs	r2, #0
 800960e:	60e0      	str	r0, [r4, #12]
 8009610:	2104      	movs	r1, #4
 8009612:	6860      	ldr	r0, [r4, #4]
 8009614:	f7ff ff82 	bl	800951c <std>
 8009618:	68a0      	ldr	r0, [r4, #8]
 800961a:	2201      	movs	r2, #1
 800961c:	2109      	movs	r1, #9
 800961e:	f7ff ff7d 	bl	800951c <std>
 8009622:	68e0      	ldr	r0, [r4, #12]
 8009624:	2202      	movs	r2, #2
 8009626:	2112      	movs	r1, #18
 8009628:	f7ff ff78 	bl	800951c <std>
 800962c:	2301      	movs	r3, #1
 800962e:	61a3      	str	r3, [r4, #24]
 8009630:	e7d2      	b.n	80095d8 <__sinit+0xc>
 8009632:	bf00      	nop
 8009634:	0800a454 	.word	0x0800a454
 8009638:	08009565 	.word	0x08009565

0800963c <__sfp>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	4607      	mov	r7, r0
 8009640:	f7ff ffac 	bl	800959c <__sfp_lock_acquire>
 8009644:	4b1e      	ldr	r3, [pc, #120]	; (80096c0 <__sfp+0x84>)
 8009646:	681e      	ldr	r6, [r3, #0]
 8009648:	69b3      	ldr	r3, [r6, #24]
 800964a:	b913      	cbnz	r3, 8009652 <__sfp+0x16>
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff ffbd 	bl	80095cc <__sinit>
 8009652:	3648      	adds	r6, #72	; 0x48
 8009654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009658:	3b01      	subs	r3, #1
 800965a:	d503      	bpl.n	8009664 <__sfp+0x28>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	b30b      	cbz	r3, 80096a4 <__sfp+0x68>
 8009660:	6836      	ldr	r6, [r6, #0]
 8009662:	e7f7      	b.n	8009654 <__sfp+0x18>
 8009664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009668:	b9d5      	cbnz	r5, 80096a0 <__sfp+0x64>
 800966a:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <__sfp+0x88>)
 800966c:	60e3      	str	r3, [r4, #12]
 800966e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009672:	6665      	str	r5, [r4, #100]	; 0x64
 8009674:	f000 f847 	bl	8009706 <__retarget_lock_init_recursive>
 8009678:	f7ff ff96 	bl	80095a8 <__sfp_lock_release>
 800967c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009684:	6025      	str	r5, [r4, #0]
 8009686:	61a5      	str	r5, [r4, #24]
 8009688:	2208      	movs	r2, #8
 800968a:	4629      	mov	r1, r5
 800968c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009690:	f7ff ff24 	bl	80094dc <memset>
 8009694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800969c:	4620      	mov	r0, r4
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a0:	3468      	adds	r4, #104	; 0x68
 80096a2:	e7d9      	b.n	8009658 <__sfp+0x1c>
 80096a4:	2104      	movs	r1, #4
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7ff ff62 	bl	8009570 <__sfmoreglue>
 80096ac:	4604      	mov	r4, r0
 80096ae:	6030      	str	r0, [r6, #0]
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d1d5      	bne.n	8009660 <__sfp+0x24>
 80096b4:	f7ff ff78 	bl	80095a8 <__sfp_lock_release>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	e7ee      	b.n	800969c <__sfp+0x60>
 80096be:	bf00      	nop
 80096c0:	0800a454 	.word	0x0800a454
 80096c4:	ffff0001 	.word	0xffff0001

080096c8 <_fwalk_reent>:
 80096c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	4606      	mov	r6, r0
 80096ce:	4688      	mov	r8, r1
 80096d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096d4:	2700      	movs	r7, #0
 80096d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096da:	f1b9 0901 	subs.w	r9, r9, #1
 80096de:	d505      	bpl.n	80096ec <_fwalk_reent+0x24>
 80096e0:	6824      	ldr	r4, [r4, #0]
 80096e2:	2c00      	cmp	r4, #0
 80096e4:	d1f7      	bne.n	80096d6 <_fwalk_reent+0xe>
 80096e6:	4638      	mov	r0, r7
 80096e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ec:	89ab      	ldrh	r3, [r5, #12]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d907      	bls.n	8009702 <_fwalk_reent+0x3a>
 80096f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096f6:	3301      	adds	r3, #1
 80096f8:	d003      	beq.n	8009702 <_fwalk_reent+0x3a>
 80096fa:	4629      	mov	r1, r5
 80096fc:	4630      	mov	r0, r6
 80096fe:	47c0      	blx	r8
 8009700:	4307      	orrs	r7, r0
 8009702:	3568      	adds	r5, #104	; 0x68
 8009704:	e7e9      	b.n	80096da <_fwalk_reent+0x12>

08009706 <__retarget_lock_init_recursive>:
 8009706:	4770      	bx	lr

08009708 <__retarget_lock_acquire_recursive>:
 8009708:	4770      	bx	lr

0800970a <__retarget_lock_release_recursive>:
 800970a:	4770      	bx	lr

0800970c <_malloc_r>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	1ccd      	adds	r5, r1, #3
 8009710:	f025 0503 	bic.w	r5, r5, #3
 8009714:	3508      	adds	r5, #8
 8009716:	2d0c      	cmp	r5, #12
 8009718:	bf38      	it	cc
 800971a:	250c      	movcc	r5, #12
 800971c:	2d00      	cmp	r5, #0
 800971e:	4606      	mov	r6, r0
 8009720:	db01      	blt.n	8009726 <_malloc_r+0x1a>
 8009722:	42a9      	cmp	r1, r5
 8009724:	d903      	bls.n	800972e <_malloc_r+0x22>
 8009726:	230c      	movs	r3, #12
 8009728:	6033      	str	r3, [r6, #0]
 800972a:	2000      	movs	r0, #0
 800972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972e:	f000 fda3 	bl	800a278 <__malloc_lock>
 8009732:	4921      	ldr	r1, [pc, #132]	; (80097b8 <_malloc_r+0xac>)
 8009734:	680a      	ldr	r2, [r1, #0]
 8009736:	4614      	mov	r4, r2
 8009738:	b99c      	cbnz	r4, 8009762 <_malloc_r+0x56>
 800973a:	4f20      	ldr	r7, [pc, #128]	; (80097bc <_malloc_r+0xb0>)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	b923      	cbnz	r3, 800974a <_malloc_r+0x3e>
 8009740:	4621      	mov	r1, r4
 8009742:	4630      	mov	r0, r6
 8009744:	f000 fb2a 	bl	8009d9c <_sbrk_r>
 8009748:	6038      	str	r0, [r7, #0]
 800974a:	4629      	mov	r1, r5
 800974c:	4630      	mov	r0, r6
 800974e:	f000 fb25 	bl	8009d9c <_sbrk_r>
 8009752:	1c43      	adds	r3, r0, #1
 8009754:	d123      	bne.n	800979e <_malloc_r+0x92>
 8009756:	230c      	movs	r3, #12
 8009758:	6033      	str	r3, [r6, #0]
 800975a:	4630      	mov	r0, r6
 800975c:	f000 fd92 	bl	800a284 <__malloc_unlock>
 8009760:	e7e3      	b.n	800972a <_malloc_r+0x1e>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	1b5b      	subs	r3, r3, r5
 8009766:	d417      	bmi.n	8009798 <_malloc_r+0x8c>
 8009768:	2b0b      	cmp	r3, #11
 800976a:	d903      	bls.n	8009774 <_malloc_r+0x68>
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	441c      	add	r4, r3
 8009770:	6025      	str	r5, [r4, #0]
 8009772:	e004      	b.n	800977e <_malloc_r+0x72>
 8009774:	6863      	ldr	r3, [r4, #4]
 8009776:	42a2      	cmp	r2, r4
 8009778:	bf0c      	ite	eq
 800977a:	600b      	streq	r3, [r1, #0]
 800977c:	6053      	strne	r3, [r2, #4]
 800977e:	4630      	mov	r0, r6
 8009780:	f000 fd80 	bl	800a284 <__malloc_unlock>
 8009784:	f104 000b 	add.w	r0, r4, #11
 8009788:	1d23      	adds	r3, r4, #4
 800978a:	f020 0007 	bic.w	r0, r0, #7
 800978e:	1ac2      	subs	r2, r0, r3
 8009790:	d0cc      	beq.n	800972c <_malloc_r+0x20>
 8009792:	1a1b      	subs	r3, r3, r0
 8009794:	50a3      	str	r3, [r4, r2]
 8009796:	e7c9      	b.n	800972c <_malloc_r+0x20>
 8009798:	4622      	mov	r2, r4
 800979a:	6864      	ldr	r4, [r4, #4]
 800979c:	e7cc      	b.n	8009738 <_malloc_r+0x2c>
 800979e:	1cc4      	adds	r4, r0, #3
 80097a0:	f024 0403 	bic.w	r4, r4, #3
 80097a4:	42a0      	cmp	r0, r4
 80097a6:	d0e3      	beq.n	8009770 <_malloc_r+0x64>
 80097a8:	1a21      	subs	r1, r4, r0
 80097aa:	4630      	mov	r0, r6
 80097ac:	f000 faf6 	bl	8009d9c <_sbrk_r>
 80097b0:	3001      	adds	r0, #1
 80097b2:	d1dd      	bne.n	8009770 <_malloc_r+0x64>
 80097b4:	e7cf      	b.n	8009756 <_malloc_r+0x4a>
 80097b6:	bf00      	nop
 80097b8:	20001960 	.word	0x20001960
 80097bc:	20001964 	.word	0x20001964

080097c0 <__sfputc_r>:
 80097c0:	6893      	ldr	r3, [r2, #8]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	b410      	push	{r4}
 80097c8:	6093      	str	r3, [r2, #8]
 80097ca:	da08      	bge.n	80097de <__sfputc_r+0x1e>
 80097cc:	6994      	ldr	r4, [r2, #24]
 80097ce:	42a3      	cmp	r3, r4
 80097d0:	db01      	blt.n	80097d6 <__sfputc_r+0x16>
 80097d2:	290a      	cmp	r1, #10
 80097d4:	d103      	bne.n	80097de <__sfputc_r+0x1e>
 80097d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097da:	f000 bb33 	b.w	8009e44 <__swbuf_r>
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	1c58      	adds	r0, r3, #1
 80097e2:	6010      	str	r0, [r2, #0]
 80097e4:	7019      	strb	r1, [r3, #0]
 80097e6:	4608      	mov	r0, r1
 80097e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <__sfputs_r>:
 80097ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f0:	4606      	mov	r6, r0
 80097f2:	460f      	mov	r7, r1
 80097f4:	4614      	mov	r4, r2
 80097f6:	18d5      	adds	r5, r2, r3
 80097f8:	42ac      	cmp	r4, r5
 80097fa:	d101      	bne.n	8009800 <__sfputs_r+0x12>
 80097fc:	2000      	movs	r0, #0
 80097fe:	e007      	b.n	8009810 <__sfputs_r+0x22>
 8009800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009804:	463a      	mov	r2, r7
 8009806:	4630      	mov	r0, r6
 8009808:	f7ff ffda 	bl	80097c0 <__sfputc_r>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d1f3      	bne.n	80097f8 <__sfputs_r+0xa>
 8009810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009814 <_vfiprintf_r>:
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	460d      	mov	r5, r1
 800981a:	b09d      	sub	sp, #116	; 0x74
 800981c:	4614      	mov	r4, r2
 800981e:	4698      	mov	r8, r3
 8009820:	4606      	mov	r6, r0
 8009822:	b118      	cbz	r0, 800982c <_vfiprintf_r+0x18>
 8009824:	6983      	ldr	r3, [r0, #24]
 8009826:	b90b      	cbnz	r3, 800982c <_vfiprintf_r+0x18>
 8009828:	f7ff fed0 	bl	80095cc <__sinit>
 800982c:	4b89      	ldr	r3, [pc, #548]	; (8009a54 <_vfiprintf_r+0x240>)
 800982e:	429d      	cmp	r5, r3
 8009830:	d11b      	bne.n	800986a <_vfiprintf_r+0x56>
 8009832:	6875      	ldr	r5, [r6, #4]
 8009834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009836:	07d9      	lsls	r1, r3, #31
 8009838:	d405      	bmi.n	8009846 <_vfiprintf_r+0x32>
 800983a:	89ab      	ldrh	r3, [r5, #12]
 800983c:	059a      	lsls	r2, r3, #22
 800983e:	d402      	bmi.n	8009846 <_vfiprintf_r+0x32>
 8009840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009842:	f7ff ff61 	bl	8009708 <__retarget_lock_acquire_recursive>
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	071b      	lsls	r3, r3, #28
 800984a:	d501      	bpl.n	8009850 <_vfiprintf_r+0x3c>
 800984c:	692b      	ldr	r3, [r5, #16]
 800984e:	b9eb      	cbnz	r3, 800988c <_vfiprintf_r+0x78>
 8009850:	4629      	mov	r1, r5
 8009852:	4630      	mov	r0, r6
 8009854:	f000 fb5a 	bl	8009f0c <__swsetup_r>
 8009858:	b1c0      	cbz	r0, 800988c <_vfiprintf_r+0x78>
 800985a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800985c:	07dc      	lsls	r4, r3, #31
 800985e:	d50e      	bpl.n	800987e <_vfiprintf_r+0x6a>
 8009860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009864:	b01d      	add	sp, #116	; 0x74
 8009866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986a:	4b7b      	ldr	r3, [pc, #492]	; (8009a58 <_vfiprintf_r+0x244>)
 800986c:	429d      	cmp	r5, r3
 800986e:	d101      	bne.n	8009874 <_vfiprintf_r+0x60>
 8009870:	68b5      	ldr	r5, [r6, #8]
 8009872:	e7df      	b.n	8009834 <_vfiprintf_r+0x20>
 8009874:	4b79      	ldr	r3, [pc, #484]	; (8009a5c <_vfiprintf_r+0x248>)
 8009876:	429d      	cmp	r5, r3
 8009878:	bf08      	it	eq
 800987a:	68f5      	ldreq	r5, [r6, #12]
 800987c:	e7da      	b.n	8009834 <_vfiprintf_r+0x20>
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	0598      	lsls	r0, r3, #22
 8009882:	d4ed      	bmi.n	8009860 <_vfiprintf_r+0x4c>
 8009884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009886:	f7ff ff40 	bl	800970a <__retarget_lock_release_recursive>
 800988a:	e7e9      	b.n	8009860 <_vfiprintf_r+0x4c>
 800988c:	2300      	movs	r3, #0
 800988e:	9309      	str	r3, [sp, #36]	; 0x24
 8009890:	2320      	movs	r3, #32
 8009892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009896:	f8cd 800c 	str.w	r8, [sp, #12]
 800989a:	2330      	movs	r3, #48	; 0x30
 800989c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a60 <_vfiprintf_r+0x24c>
 80098a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098a4:	f04f 0901 	mov.w	r9, #1
 80098a8:	4623      	mov	r3, r4
 80098aa:	469a      	mov	sl, r3
 80098ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098b0:	b10a      	cbz	r2, 80098b6 <_vfiprintf_r+0xa2>
 80098b2:	2a25      	cmp	r2, #37	; 0x25
 80098b4:	d1f9      	bne.n	80098aa <_vfiprintf_r+0x96>
 80098b6:	ebba 0b04 	subs.w	fp, sl, r4
 80098ba:	d00b      	beq.n	80098d4 <_vfiprintf_r+0xc0>
 80098bc:	465b      	mov	r3, fp
 80098be:	4622      	mov	r2, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ff93 	bl	80097ee <__sfputs_r>
 80098c8:	3001      	adds	r0, #1
 80098ca:	f000 80aa 	beq.w	8009a22 <_vfiprintf_r+0x20e>
 80098ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d0:	445a      	add	r2, fp
 80098d2:	9209      	str	r2, [sp, #36]	; 0x24
 80098d4:	f89a 3000 	ldrb.w	r3, [sl]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f000 80a2 	beq.w	8009a22 <_vfiprintf_r+0x20e>
 80098de:	2300      	movs	r3, #0
 80098e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e8:	f10a 0a01 	add.w	sl, sl, #1
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	9307      	str	r3, [sp, #28]
 80098f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098f4:	931a      	str	r3, [sp, #104]	; 0x68
 80098f6:	4654      	mov	r4, sl
 80098f8:	2205      	movs	r2, #5
 80098fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fe:	4858      	ldr	r0, [pc, #352]	; (8009a60 <_vfiprintf_r+0x24c>)
 8009900:	f7f6 fc66 	bl	80001d0 <memchr>
 8009904:	9a04      	ldr	r2, [sp, #16]
 8009906:	b9d8      	cbnz	r0, 8009940 <_vfiprintf_r+0x12c>
 8009908:	06d1      	lsls	r1, r2, #27
 800990a:	bf44      	itt	mi
 800990c:	2320      	movmi	r3, #32
 800990e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009912:	0713      	lsls	r3, r2, #28
 8009914:	bf44      	itt	mi
 8009916:	232b      	movmi	r3, #43	; 0x2b
 8009918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800991c:	f89a 3000 	ldrb.w	r3, [sl]
 8009920:	2b2a      	cmp	r3, #42	; 0x2a
 8009922:	d015      	beq.n	8009950 <_vfiprintf_r+0x13c>
 8009924:	9a07      	ldr	r2, [sp, #28]
 8009926:	4654      	mov	r4, sl
 8009928:	2000      	movs	r0, #0
 800992a:	f04f 0c0a 	mov.w	ip, #10
 800992e:	4621      	mov	r1, r4
 8009930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009934:	3b30      	subs	r3, #48	; 0x30
 8009936:	2b09      	cmp	r3, #9
 8009938:	d94e      	bls.n	80099d8 <_vfiprintf_r+0x1c4>
 800993a:	b1b0      	cbz	r0, 800996a <_vfiprintf_r+0x156>
 800993c:	9207      	str	r2, [sp, #28]
 800993e:	e014      	b.n	800996a <_vfiprintf_r+0x156>
 8009940:	eba0 0308 	sub.w	r3, r0, r8
 8009944:	fa09 f303 	lsl.w	r3, r9, r3
 8009948:	4313      	orrs	r3, r2
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	46a2      	mov	sl, r4
 800994e:	e7d2      	b.n	80098f6 <_vfiprintf_r+0xe2>
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	1d19      	adds	r1, r3, #4
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9103      	str	r1, [sp, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfbb      	ittet	lt
 800995c:	425b      	neglt	r3, r3
 800995e:	f042 0202 	orrlt.w	r2, r2, #2
 8009962:	9307      	strge	r3, [sp, #28]
 8009964:	9307      	strlt	r3, [sp, #28]
 8009966:	bfb8      	it	lt
 8009968:	9204      	strlt	r2, [sp, #16]
 800996a:	7823      	ldrb	r3, [r4, #0]
 800996c:	2b2e      	cmp	r3, #46	; 0x2e
 800996e:	d10c      	bne.n	800998a <_vfiprintf_r+0x176>
 8009970:	7863      	ldrb	r3, [r4, #1]
 8009972:	2b2a      	cmp	r3, #42	; 0x2a
 8009974:	d135      	bne.n	80099e2 <_vfiprintf_r+0x1ce>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	1d1a      	adds	r2, r3, #4
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	9203      	str	r2, [sp, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	bfb8      	it	lt
 8009982:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009986:	3402      	adds	r4, #2
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a70 <_vfiprintf_r+0x25c>
 800998e:	7821      	ldrb	r1, [r4, #0]
 8009990:	2203      	movs	r2, #3
 8009992:	4650      	mov	r0, sl
 8009994:	f7f6 fc1c 	bl	80001d0 <memchr>
 8009998:	b140      	cbz	r0, 80099ac <_vfiprintf_r+0x198>
 800999a:	2340      	movs	r3, #64	; 0x40
 800999c:	eba0 000a 	sub.w	r0, r0, sl
 80099a0:	fa03 f000 	lsl.w	r0, r3, r0
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	4303      	orrs	r3, r0
 80099a8:	3401      	adds	r4, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b0:	482c      	ldr	r0, [pc, #176]	; (8009a64 <_vfiprintf_r+0x250>)
 80099b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099b6:	2206      	movs	r2, #6
 80099b8:	f7f6 fc0a 	bl	80001d0 <memchr>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d03f      	beq.n	8009a40 <_vfiprintf_r+0x22c>
 80099c0:	4b29      	ldr	r3, [pc, #164]	; (8009a68 <_vfiprintf_r+0x254>)
 80099c2:	bb1b      	cbnz	r3, 8009a0c <_vfiprintf_r+0x1f8>
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	3307      	adds	r3, #7
 80099c8:	f023 0307 	bic.w	r3, r3, #7
 80099cc:	3308      	adds	r3, #8
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d2:	443b      	add	r3, r7
 80099d4:	9309      	str	r3, [sp, #36]	; 0x24
 80099d6:	e767      	b.n	80098a8 <_vfiprintf_r+0x94>
 80099d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099dc:	460c      	mov	r4, r1
 80099de:	2001      	movs	r0, #1
 80099e0:	e7a5      	b.n	800992e <_vfiprintf_r+0x11a>
 80099e2:	2300      	movs	r3, #0
 80099e4:	3401      	adds	r4, #1
 80099e6:	9305      	str	r3, [sp, #20]
 80099e8:	4619      	mov	r1, r3
 80099ea:	f04f 0c0a 	mov.w	ip, #10
 80099ee:	4620      	mov	r0, r4
 80099f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099f4:	3a30      	subs	r2, #48	; 0x30
 80099f6:	2a09      	cmp	r2, #9
 80099f8:	d903      	bls.n	8009a02 <_vfiprintf_r+0x1ee>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0c5      	beq.n	800998a <_vfiprintf_r+0x176>
 80099fe:	9105      	str	r1, [sp, #20]
 8009a00:	e7c3      	b.n	800998a <_vfiprintf_r+0x176>
 8009a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a06:	4604      	mov	r4, r0
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e7f0      	b.n	80099ee <_vfiprintf_r+0x1da>
 8009a0c:	ab03      	add	r3, sp, #12
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <_vfiprintf_r+0x258>)
 8009a14:	a904      	add	r1, sp, #16
 8009a16:	4630      	mov	r0, r6
 8009a18:	f3af 8000 	nop.w
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	1c78      	adds	r0, r7, #1
 8009a20:	d1d6      	bne.n	80099d0 <_vfiprintf_r+0x1bc>
 8009a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a24:	07d9      	lsls	r1, r3, #31
 8009a26:	d405      	bmi.n	8009a34 <_vfiprintf_r+0x220>
 8009a28:	89ab      	ldrh	r3, [r5, #12]
 8009a2a:	059a      	lsls	r2, r3, #22
 8009a2c:	d402      	bmi.n	8009a34 <_vfiprintf_r+0x220>
 8009a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a30:	f7ff fe6b 	bl	800970a <__retarget_lock_release_recursive>
 8009a34:	89ab      	ldrh	r3, [r5, #12]
 8009a36:	065b      	lsls	r3, r3, #25
 8009a38:	f53f af12 	bmi.w	8009860 <_vfiprintf_r+0x4c>
 8009a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a3e:	e711      	b.n	8009864 <_vfiprintf_r+0x50>
 8009a40:	ab03      	add	r3, sp, #12
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	462a      	mov	r2, r5
 8009a46:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <_vfiprintf_r+0x258>)
 8009a48:	a904      	add	r1, sp, #16
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f000 f880 	bl	8009b50 <_printf_i>
 8009a50:	e7e4      	b.n	8009a1c <_vfiprintf_r+0x208>
 8009a52:	bf00      	nop
 8009a54:	0800a478 	.word	0x0800a478
 8009a58:	0800a498 	.word	0x0800a498
 8009a5c:	0800a458 	.word	0x0800a458
 8009a60:	0800a4b8 	.word	0x0800a4b8
 8009a64:	0800a4c2 	.word	0x0800a4c2
 8009a68:	00000000 	.word	0x00000000
 8009a6c:	080097ef 	.word	0x080097ef
 8009a70:	0800a4be 	.word	0x0800a4be

08009a74 <_printf_common>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	4616      	mov	r6, r2
 8009a7a:	4699      	mov	r9, r3
 8009a7c:	688a      	ldr	r2, [r1, #8]
 8009a7e:	690b      	ldr	r3, [r1, #16]
 8009a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	bfb8      	it	lt
 8009a88:	4613      	movlt	r3, r2
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a90:	4607      	mov	r7, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b10a      	cbz	r2, 8009a9a <_printf_common+0x26>
 8009a96:	3301      	adds	r3, #1
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	0699      	lsls	r1, r3, #26
 8009a9e:	bf42      	ittt	mi
 8009aa0:	6833      	ldrmi	r3, [r6, #0]
 8009aa2:	3302      	addmi	r3, #2
 8009aa4:	6033      	strmi	r3, [r6, #0]
 8009aa6:	6825      	ldr	r5, [r4, #0]
 8009aa8:	f015 0506 	ands.w	r5, r5, #6
 8009aac:	d106      	bne.n	8009abc <_printf_common+0x48>
 8009aae:	f104 0a19 	add.w	sl, r4, #25
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	6832      	ldr	r2, [r6, #0]
 8009ab6:	1a9b      	subs	r3, r3, r2
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	dc26      	bgt.n	8009b0a <_printf_common+0x96>
 8009abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ac0:	1e13      	subs	r3, r2, #0
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	bf18      	it	ne
 8009ac6:	2301      	movne	r3, #1
 8009ac8:	0692      	lsls	r2, r2, #26
 8009aca:	d42b      	bmi.n	8009b24 <_printf_common+0xb0>
 8009acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	47c0      	blx	r8
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d01e      	beq.n	8009b18 <_printf_common+0xa4>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	68e5      	ldr	r5, [r4, #12]
 8009ade:	6832      	ldr	r2, [r6, #0]
 8009ae0:	f003 0306 	and.w	r3, r3, #6
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	bf08      	it	eq
 8009ae8:	1aad      	subeq	r5, r5, r2
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	bf0c      	ite	eq
 8009af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af4:	2500      	movne	r5, #0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bfc4      	itt	gt
 8009afa:	1a9b      	subgt	r3, r3, r2
 8009afc:	18ed      	addgt	r5, r5, r3
 8009afe:	2600      	movs	r6, #0
 8009b00:	341a      	adds	r4, #26
 8009b02:	42b5      	cmp	r5, r6
 8009b04:	d11a      	bne.n	8009b3c <_printf_common+0xc8>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e008      	b.n	8009b1c <_printf_common+0xa8>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4638      	mov	r0, r7
 8009b12:	47c0      	blx	r8
 8009b14:	3001      	adds	r0, #1
 8009b16:	d103      	bne.n	8009b20 <_printf_common+0xac>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	3501      	adds	r5, #1
 8009b22:	e7c6      	b.n	8009ab2 <_printf_common+0x3e>
 8009b24:	18e1      	adds	r1, r4, r3
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	2030      	movs	r0, #48	; 0x30
 8009b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2e:	4422      	add	r2, r4
 8009b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b38:	3302      	adds	r3, #2
 8009b3a:	e7c7      	b.n	8009acc <_printf_common+0x58>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4649      	mov	r1, r9
 8009b42:	4638      	mov	r0, r7
 8009b44:	47c0      	blx	r8
 8009b46:	3001      	adds	r0, #1
 8009b48:	d0e6      	beq.n	8009b18 <_printf_common+0xa4>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7d9      	b.n	8009b02 <_printf_common+0x8e>
	...

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	4691      	mov	r9, r2
 8009b58:	7e27      	ldrb	r7, [r4, #24]
 8009b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b5c:	2f78      	cmp	r7, #120	; 0x78
 8009b5e:	4680      	mov	r8, r0
 8009b60:	469a      	mov	sl, r3
 8009b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	; 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d8 	beq.w	8009d22 <_printf_i+0x1d2>
 8009b72:	2f58      	cmp	r7, #88	; 0x58
 8009b74:	f000 80a3 	beq.w	8009cbe <_printf_i+0x16e>
 8009b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a001      	add	r0, pc, #4	; (adr r0, 8009b90 <_printf_i+0x40>)
 8009b8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009d09 	.word	0x08009d09
 8009bc0:	08009c2d 	.word	0x08009c2d
 8009bc4:	08009ceb 	.word	0x08009ceb
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d2b 	.word	0x08009d2b
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cf3 	.word	0x08009cf3
 8009be8:	680b      	ldr	r3, [r1, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	600a      	str	r2, [r1, #0]
 8009bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0a3      	b.n	8009d44 <_printf_i+0x1f4>
 8009bfc:	6825      	ldr	r5, [r4, #0]
 8009bfe:	6808      	ldr	r0, [r1, #0]
 8009c00:	062e      	lsls	r6, r5, #24
 8009c02:	f100 0304 	add.w	r3, r0, #4
 8009c06:	d50a      	bpl.n	8009c1e <_printf_i+0xce>
 8009c08:	6805      	ldr	r5, [r0, #0]
 8009c0a:	600b      	str	r3, [r1, #0]
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	da03      	bge.n	8009c18 <_printf_i+0xc8>
 8009c10:	232d      	movs	r3, #45	; 0x2d
 8009c12:	426d      	negs	r5, r5
 8009c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c18:	485e      	ldr	r0, [pc, #376]	; (8009d94 <_printf_i+0x244>)
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	e019      	b.n	8009c52 <_printf_i+0x102>
 8009c1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c22:	6805      	ldr	r5, [r0, #0]
 8009c24:	600b      	str	r3, [r1, #0]
 8009c26:	bf18      	it	ne
 8009c28:	b22d      	sxthne	r5, r5
 8009c2a:	e7ef      	b.n	8009c0c <_printf_i+0xbc>
 8009c2c:	680b      	ldr	r3, [r1, #0]
 8009c2e:	6825      	ldr	r5, [r4, #0]
 8009c30:	1d18      	adds	r0, r3, #4
 8009c32:	6008      	str	r0, [r1, #0]
 8009c34:	0628      	lsls	r0, r5, #24
 8009c36:	d501      	bpl.n	8009c3c <_printf_i+0xec>
 8009c38:	681d      	ldr	r5, [r3, #0]
 8009c3a:	e002      	b.n	8009c42 <_printf_i+0xf2>
 8009c3c:	0669      	lsls	r1, r5, #25
 8009c3e:	d5fb      	bpl.n	8009c38 <_printf_i+0xe8>
 8009c40:	881d      	ldrh	r5, [r3, #0]
 8009c42:	4854      	ldr	r0, [pc, #336]	; (8009d94 <_printf_i+0x244>)
 8009c44:	2f6f      	cmp	r7, #111	; 0x6f
 8009c46:	bf0c      	ite	eq
 8009c48:	2308      	moveq	r3, #8
 8009c4a:	230a      	movne	r3, #10
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c52:	6866      	ldr	r6, [r4, #4]
 8009c54:	60a6      	str	r6, [r4, #8]
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	bfa2      	ittt	ge
 8009c5a:	6821      	ldrge	r1, [r4, #0]
 8009c5c:	f021 0104 	bicge.w	r1, r1, #4
 8009c60:	6021      	strge	r1, [r4, #0]
 8009c62:	b90d      	cbnz	r5, 8009c68 <_printf_i+0x118>
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	d04d      	beq.n	8009d04 <_printf_i+0x1b4>
 8009c68:	4616      	mov	r6, r2
 8009c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c72:	5dc7      	ldrb	r7, [r0, r7]
 8009c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c78:	462f      	mov	r7, r5
 8009c7a:	42bb      	cmp	r3, r7
 8009c7c:	460d      	mov	r5, r1
 8009c7e:	d9f4      	bls.n	8009c6a <_printf_i+0x11a>
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d10b      	bne.n	8009c9c <_printf_i+0x14c>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	07df      	lsls	r7, r3, #31
 8009c88:	d508      	bpl.n	8009c9c <_printf_i+0x14c>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	6861      	ldr	r1, [r4, #4]
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	bfde      	ittt	le
 8009c92:	2330      	movle	r3, #48	; 0x30
 8009c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c98:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009c9c:	1b92      	subs	r2, r2, r6
 8009c9e:	6122      	str	r2, [r4, #16]
 8009ca0:	f8cd a000 	str.w	sl, [sp]
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	aa03      	add	r2, sp, #12
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4640      	mov	r0, r8
 8009cac:	f7ff fee2 	bl	8009a74 <_printf_common>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d14c      	bne.n	8009d4e <_printf_i+0x1fe>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cb8:	b004      	add	sp, #16
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	4835      	ldr	r0, [pc, #212]	; (8009d94 <_printf_i+0x244>)
 8009cc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	680e      	ldr	r6, [r1, #0]
 8009cc8:	061f      	lsls	r7, r3, #24
 8009cca:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cce:	600e      	str	r6, [r1, #0]
 8009cd0:	d514      	bpl.n	8009cfc <_printf_i+0x1ac>
 8009cd2:	07d9      	lsls	r1, r3, #31
 8009cd4:	bf44      	itt	mi
 8009cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cda:	6023      	strmi	r3, [r4, #0]
 8009cdc:	b91d      	cbnz	r5, 8009ce6 <_printf_i+0x196>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	f023 0320 	bic.w	r3, r3, #32
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	e7b0      	b.n	8009c4c <_printf_i+0xfc>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	f043 0320 	orr.w	r3, r3, #32
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	2378      	movs	r3, #120	; 0x78
 8009cf4:	4828      	ldr	r0, [pc, #160]	; (8009d98 <_printf_i+0x248>)
 8009cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cfa:	e7e3      	b.n	8009cc4 <_printf_i+0x174>
 8009cfc:	065e      	lsls	r6, r3, #25
 8009cfe:	bf48      	it	mi
 8009d00:	b2ad      	uxthmi	r5, r5
 8009d02:	e7e6      	b.n	8009cd2 <_printf_i+0x182>
 8009d04:	4616      	mov	r6, r2
 8009d06:	e7bb      	b.n	8009c80 <_printf_i+0x130>
 8009d08:	680b      	ldr	r3, [r1, #0]
 8009d0a:	6826      	ldr	r6, [r4, #0]
 8009d0c:	6960      	ldr	r0, [r4, #20]
 8009d0e:	1d1d      	adds	r5, r3, #4
 8009d10:	600d      	str	r5, [r1, #0]
 8009d12:	0635      	lsls	r5, r6, #24
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0x1cc>
 8009d18:	6018      	str	r0, [r3, #0]
 8009d1a:	e002      	b.n	8009d22 <_printf_i+0x1d2>
 8009d1c:	0671      	lsls	r1, r6, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0x1c8>
 8009d20:	8018      	strh	r0, [r3, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	4616      	mov	r6, r2
 8009d28:	e7ba      	b.n	8009ca0 <_printf_i+0x150>
 8009d2a:	680b      	ldr	r3, [r1, #0]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	600a      	str	r2, [r1, #0]
 8009d30:	681e      	ldr	r6, [r3, #0]
 8009d32:	6862      	ldr	r2, [r4, #4]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4630      	mov	r0, r6
 8009d38:	f7f6 fa4a 	bl	80001d0 <memchr>
 8009d3c:	b108      	cbz	r0, 8009d42 <_printf_i+0x1f2>
 8009d3e:	1b80      	subs	r0, r0, r6
 8009d40:	6060      	str	r0, [r4, #4]
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	2300      	movs	r3, #0
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	e7a8      	b.n	8009ca0 <_printf_i+0x150>
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	4632      	mov	r2, r6
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	47d0      	blx	sl
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d0ab      	beq.n	8009cb4 <_printf_i+0x164>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	079b      	lsls	r3, r3, #30
 8009d60:	d413      	bmi.n	8009d8a <_printf_i+0x23a>
 8009d62:	68e0      	ldr	r0, [r4, #12]
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	4298      	cmp	r0, r3
 8009d68:	bfb8      	it	lt
 8009d6a:	4618      	movlt	r0, r3
 8009d6c:	e7a4      	b.n	8009cb8 <_printf_i+0x168>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4632      	mov	r2, r6
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d09b      	beq.n	8009cb4 <_printf_i+0x164>
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	9903      	ldr	r1, [sp, #12]
 8009d82:	1a5b      	subs	r3, r3, r1
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dcf2      	bgt.n	8009d6e <_printf_i+0x21e>
 8009d88:	e7eb      	b.n	8009d62 <_printf_i+0x212>
 8009d8a:	2500      	movs	r5, #0
 8009d8c:	f104 0619 	add.w	r6, r4, #25
 8009d90:	e7f5      	b.n	8009d7e <_printf_i+0x22e>
 8009d92:	bf00      	nop
 8009d94:	0800a4c9 	.word	0x0800a4c9
 8009d98:	0800a4da 	.word	0x0800a4da

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	; (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7f7 ff16 	bl	8001bd8 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	20001bd4 	.word	0x20001bd4

08009dbc <__sread>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc4:	f000 fab4 	bl	800a330 <_read_r>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	bfab      	itete	ge
 8009dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dce:	89a3      	ldrhlt	r3, [r4, #12]
 8009dd0:	181b      	addge	r3, r3, r0
 8009dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dd6:	bfac      	ite	ge
 8009dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dda:	81a3      	strhlt	r3, [r4, #12]
 8009ddc:	bd10      	pop	{r4, pc}

08009dde <__swrite>:
 8009dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de2:	461f      	mov	r7, r3
 8009de4:	898b      	ldrh	r3, [r1, #12]
 8009de6:	05db      	lsls	r3, r3, #23
 8009de8:	4605      	mov	r5, r0
 8009dea:	460c      	mov	r4, r1
 8009dec:	4616      	mov	r6, r2
 8009dee:	d505      	bpl.n	8009dfc <__swrite+0x1e>
 8009df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df4:	2302      	movs	r3, #2
 8009df6:	2200      	movs	r2, #0
 8009df8:	f000 f9c8 	bl	800a18c <_lseek_r>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	4632      	mov	r2, r6
 8009e0a:	463b      	mov	r3, r7
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e12:	f000 b869 	b.w	8009ee8 <_write_r>

08009e16 <__sseek>:
 8009e16:	b510      	push	{r4, lr}
 8009e18:	460c      	mov	r4, r1
 8009e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e1e:	f000 f9b5 	bl	800a18c <_lseek_r>
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	bf15      	itete	ne
 8009e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e32:	81a3      	strheq	r3, [r4, #12]
 8009e34:	bf18      	it	ne
 8009e36:	81a3      	strhne	r3, [r4, #12]
 8009e38:	bd10      	pop	{r4, pc}

08009e3a <__sclose>:
 8009e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3e:	f000 b8d3 	b.w	8009fe8 <_close_r>
	...

08009e44 <__swbuf_r>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	460e      	mov	r6, r1
 8009e48:	4614      	mov	r4, r2
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	b118      	cbz	r0, 8009e56 <__swbuf_r+0x12>
 8009e4e:	6983      	ldr	r3, [r0, #24]
 8009e50:	b90b      	cbnz	r3, 8009e56 <__swbuf_r+0x12>
 8009e52:	f7ff fbbb 	bl	80095cc <__sinit>
 8009e56:	4b21      	ldr	r3, [pc, #132]	; (8009edc <__swbuf_r+0x98>)
 8009e58:	429c      	cmp	r4, r3
 8009e5a:	d12b      	bne.n	8009eb4 <__swbuf_r+0x70>
 8009e5c:	686c      	ldr	r4, [r5, #4]
 8009e5e:	69a3      	ldr	r3, [r4, #24]
 8009e60:	60a3      	str	r3, [r4, #8]
 8009e62:	89a3      	ldrh	r3, [r4, #12]
 8009e64:	071a      	lsls	r2, r3, #28
 8009e66:	d52f      	bpl.n	8009ec8 <__swbuf_r+0x84>
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	b36b      	cbz	r3, 8009ec8 <__swbuf_r+0x84>
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	6820      	ldr	r0, [r4, #0]
 8009e70:	1ac0      	subs	r0, r0, r3
 8009e72:	6963      	ldr	r3, [r4, #20]
 8009e74:	b2f6      	uxtb	r6, r6
 8009e76:	4283      	cmp	r3, r0
 8009e78:	4637      	mov	r7, r6
 8009e7a:	dc04      	bgt.n	8009e86 <__swbuf_r+0x42>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f000 f948 	bl	800a114 <_fflush_r>
 8009e84:	bb30      	cbnz	r0, 8009ed4 <__swbuf_r+0x90>
 8009e86:	68a3      	ldr	r3, [r4, #8]
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	60a3      	str	r3, [r4, #8]
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	6022      	str	r2, [r4, #0]
 8009e92:	701e      	strb	r6, [r3, #0]
 8009e94:	6963      	ldr	r3, [r4, #20]
 8009e96:	3001      	adds	r0, #1
 8009e98:	4283      	cmp	r3, r0
 8009e9a:	d004      	beq.n	8009ea6 <__swbuf_r+0x62>
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	07db      	lsls	r3, r3, #31
 8009ea0:	d506      	bpl.n	8009eb0 <__swbuf_r+0x6c>
 8009ea2:	2e0a      	cmp	r6, #10
 8009ea4:	d104      	bne.n	8009eb0 <__swbuf_r+0x6c>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	f000 f933 	bl	800a114 <_fflush_r>
 8009eae:	b988      	cbnz	r0, 8009ed4 <__swbuf_r+0x90>
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <__swbuf_r+0x9c>)
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	d101      	bne.n	8009ebe <__swbuf_r+0x7a>
 8009eba:	68ac      	ldr	r4, [r5, #8]
 8009ebc:	e7cf      	b.n	8009e5e <__swbuf_r+0x1a>
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <__swbuf_r+0xa0>)
 8009ec0:	429c      	cmp	r4, r3
 8009ec2:	bf08      	it	eq
 8009ec4:	68ec      	ldreq	r4, [r5, #12]
 8009ec6:	e7ca      	b.n	8009e5e <__swbuf_r+0x1a>
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f000 f81e 	bl	8009f0c <__swsetup_r>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d0cb      	beq.n	8009e6c <__swbuf_r+0x28>
 8009ed4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ed8:	e7ea      	b.n	8009eb0 <__swbuf_r+0x6c>
 8009eda:	bf00      	nop
 8009edc:	0800a478 	.word	0x0800a478
 8009ee0:	0800a498 	.word	0x0800a498
 8009ee4:	0800a458 	.word	0x0800a458

08009ee8 <_write_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	; (8009f08 <_write_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f7 fe1d 	bl	8001b36 <_write>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_write_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_write_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20001bd4 	.word	0x20001bd4

08009f0c <__swsetup_r>:
 8009f0c:	4b32      	ldr	r3, [pc, #200]	; (8009fd8 <__swsetup_r+0xcc>)
 8009f0e:	b570      	push	{r4, r5, r6, lr}
 8009f10:	681d      	ldr	r5, [r3, #0]
 8009f12:	4606      	mov	r6, r0
 8009f14:	460c      	mov	r4, r1
 8009f16:	b125      	cbz	r5, 8009f22 <__swsetup_r+0x16>
 8009f18:	69ab      	ldr	r3, [r5, #24]
 8009f1a:	b913      	cbnz	r3, 8009f22 <__swsetup_r+0x16>
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f7ff fb55 	bl	80095cc <__sinit>
 8009f22:	4b2e      	ldr	r3, [pc, #184]	; (8009fdc <__swsetup_r+0xd0>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d10f      	bne.n	8009f48 <__swsetup_r+0x3c>
 8009f28:	686c      	ldr	r4, [r5, #4]
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f30:	0719      	lsls	r1, r3, #28
 8009f32:	d42c      	bmi.n	8009f8e <__swsetup_r+0x82>
 8009f34:	06dd      	lsls	r5, r3, #27
 8009f36:	d411      	bmi.n	8009f5c <__swsetup_r+0x50>
 8009f38:	2309      	movs	r3, #9
 8009f3a:	6033      	str	r3, [r6, #0]
 8009f3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f46:	e03e      	b.n	8009fc6 <__swsetup_r+0xba>
 8009f48:	4b25      	ldr	r3, [pc, #148]	; (8009fe0 <__swsetup_r+0xd4>)
 8009f4a:	429c      	cmp	r4, r3
 8009f4c:	d101      	bne.n	8009f52 <__swsetup_r+0x46>
 8009f4e:	68ac      	ldr	r4, [r5, #8]
 8009f50:	e7eb      	b.n	8009f2a <__swsetup_r+0x1e>
 8009f52:	4b24      	ldr	r3, [pc, #144]	; (8009fe4 <__swsetup_r+0xd8>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	bf08      	it	eq
 8009f58:	68ec      	ldreq	r4, [r5, #12]
 8009f5a:	e7e6      	b.n	8009f2a <__swsetup_r+0x1e>
 8009f5c:	0758      	lsls	r0, r3, #29
 8009f5e:	d512      	bpl.n	8009f86 <__swsetup_r+0x7a>
 8009f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f62:	b141      	cbz	r1, 8009f76 <__swsetup_r+0x6a>
 8009f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f68:	4299      	cmp	r1, r3
 8009f6a:	d002      	beq.n	8009f72 <__swsetup_r+0x66>
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f000 f98f 	bl	800a290 <_free_r>
 8009f72:	2300      	movs	r3, #0
 8009f74:	6363      	str	r3, [r4, #52]	; 0x34
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6063      	str	r3, [r4, #4]
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f043 0308 	orr.w	r3, r3, #8
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	b94b      	cbnz	r3, 8009fa6 <__swsetup_r+0x9a>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f9c:	d003      	beq.n	8009fa6 <__swsetup_r+0x9a>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f000 f929 	bl	800a1f8 <__smakebuf_r>
 8009fa6:	89a0      	ldrh	r0, [r4, #12]
 8009fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fac:	f010 0301 	ands.w	r3, r0, #1
 8009fb0:	d00a      	beq.n	8009fc8 <__swsetup_r+0xbc>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60a3      	str	r3, [r4, #8]
 8009fb6:	6963      	ldr	r3, [r4, #20]
 8009fb8:	425b      	negs	r3, r3
 8009fba:	61a3      	str	r3, [r4, #24]
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	b943      	cbnz	r3, 8009fd2 <__swsetup_r+0xc6>
 8009fc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fc4:	d1ba      	bne.n	8009f3c <__swsetup_r+0x30>
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	0781      	lsls	r1, r0, #30
 8009fca:	bf58      	it	pl
 8009fcc:	6963      	ldrpl	r3, [r4, #20]
 8009fce:	60a3      	str	r3, [r4, #8]
 8009fd0:	e7f4      	b.n	8009fbc <__swsetup_r+0xb0>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e7f7      	b.n	8009fc6 <__swsetup_r+0xba>
 8009fd6:	bf00      	nop
 8009fd8:	20000010 	.word	0x20000010
 8009fdc:	0800a478 	.word	0x0800a478
 8009fe0:	0800a498 	.word	0x0800a498
 8009fe4:	0800a458 	.word	0x0800a458

08009fe8 <_close_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4d06      	ldr	r5, [pc, #24]	; (800a004 <_close_r+0x1c>)
 8009fec:	2300      	movs	r3, #0
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	f7f7 fdbb 	bl	8001b6e <_close>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_close_r+0x1a>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_close_r+0x1a>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	20001bd4 	.word	0x20001bd4

0800a008 <__sflush_r>:
 800a008:	898a      	ldrh	r2, [r1, #12]
 800a00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00e:	4605      	mov	r5, r0
 800a010:	0710      	lsls	r0, r2, #28
 800a012:	460c      	mov	r4, r1
 800a014:	d458      	bmi.n	800a0c8 <__sflush_r+0xc0>
 800a016:	684b      	ldr	r3, [r1, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	dc05      	bgt.n	800a028 <__sflush_r+0x20>
 800a01c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dc02      	bgt.n	800a028 <__sflush_r+0x20>
 800a022:	2000      	movs	r0, #0
 800a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	d0f9      	beq.n	800a022 <__sflush_r+0x1a>
 800a02e:	2300      	movs	r3, #0
 800a030:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a034:	682f      	ldr	r7, [r5, #0]
 800a036:	602b      	str	r3, [r5, #0]
 800a038:	d032      	beq.n	800a0a0 <__sflush_r+0x98>
 800a03a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	075a      	lsls	r2, r3, #29
 800a040:	d505      	bpl.n	800a04e <__sflush_r+0x46>
 800a042:	6863      	ldr	r3, [r4, #4]
 800a044:	1ac0      	subs	r0, r0, r3
 800a046:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a048:	b10b      	cbz	r3, 800a04e <__sflush_r+0x46>
 800a04a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a04c:	1ac0      	subs	r0, r0, r3
 800a04e:	2300      	movs	r3, #0
 800a050:	4602      	mov	r2, r0
 800a052:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a054:	6a21      	ldr	r1, [r4, #32]
 800a056:	4628      	mov	r0, r5
 800a058:	47b0      	blx	r6
 800a05a:	1c43      	adds	r3, r0, #1
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	d106      	bne.n	800a06e <__sflush_r+0x66>
 800a060:	6829      	ldr	r1, [r5, #0]
 800a062:	291d      	cmp	r1, #29
 800a064:	d82c      	bhi.n	800a0c0 <__sflush_r+0xb8>
 800a066:	4a2a      	ldr	r2, [pc, #168]	; (800a110 <__sflush_r+0x108>)
 800a068:	40ca      	lsrs	r2, r1
 800a06a:	07d6      	lsls	r6, r2, #31
 800a06c:	d528      	bpl.n	800a0c0 <__sflush_r+0xb8>
 800a06e:	2200      	movs	r2, #0
 800a070:	6062      	str	r2, [r4, #4]
 800a072:	04d9      	lsls	r1, r3, #19
 800a074:	6922      	ldr	r2, [r4, #16]
 800a076:	6022      	str	r2, [r4, #0]
 800a078:	d504      	bpl.n	800a084 <__sflush_r+0x7c>
 800a07a:	1c42      	adds	r2, r0, #1
 800a07c:	d101      	bne.n	800a082 <__sflush_r+0x7a>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	b903      	cbnz	r3, 800a084 <__sflush_r+0x7c>
 800a082:	6560      	str	r0, [r4, #84]	; 0x54
 800a084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a086:	602f      	str	r7, [r5, #0]
 800a088:	2900      	cmp	r1, #0
 800a08a:	d0ca      	beq.n	800a022 <__sflush_r+0x1a>
 800a08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a090:	4299      	cmp	r1, r3
 800a092:	d002      	beq.n	800a09a <__sflush_r+0x92>
 800a094:	4628      	mov	r0, r5
 800a096:	f000 f8fb 	bl	800a290 <_free_r>
 800a09a:	2000      	movs	r0, #0
 800a09c:	6360      	str	r0, [r4, #52]	; 0x34
 800a09e:	e7c1      	b.n	800a024 <__sflush_r+0x1c>
 800a0a0:	6a21      	ldr	r1, [r4, #32]
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b0      	blx	r6
 800a0a8:	1c41      	adds	r1, r0, #1
 800a0aa:	d1c7      	bne.n	800a03c <__sflush_r+0x34>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0c4      	beq.n	800a03c <__sflush_r+0x34>
 800a0b2:	2b1d      	cmp	r3, #29
 800a0b4:	d001      	beq.n	800a0ba <__sflush_r+0xb2>
 800a0b6:	2b16      	cmp	r3, #22
 800a0b8:	d101      	bne.n	800a0be <__sflush_r+0xb6>
 800a0ba:	602f      	str	r7, [r5, #0]
 800a0bc:	e7b1      	b.n	800a022 <__sflush_r+0x1a>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	e7ad      	b.n	800a024 <__sflush_r+0x1c>
 800a0c8:	690f      	ldr	r7, [r1, #16]
 800a0ca:	2f00      	cmp	r7, #0
 800a0cc:	d0a9      	beq.n	800a022 <__sflush_r+0x1a>
 800a0ce:	0793      	lsls	r3, r2, #30
 800a0d0:	680e      	ldr	r6, [r1, #0]
 800a0d2:	bf08      	it	eq
 800a0d4:	694b      	ldreq	r3, [r1, #20]
 800a0d6:	600f      	str	r7, [r1, #0]
 800a0d8:	bf18      	it	ne
 800a0da:	2300      	movne	r3, #0
 800a0dc:	eba6 0807 	sub.w	r8, r6, r7
 800a0e0:	608b      	str	r3, [r1, #8]
 800a0e2:	f1b8 0f00 	cmp.w	r8, #0
 800a0e6:	dd9c      	ble.n	800a022 <__sflush_r+0x1a>
 800a0e8:	6a21      	ldr	r1, [r4, #32]
 800a0ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0ec:	4643      	mov	r3, r8
 800a0ee:	463a      	mov	r2, r7
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	dc06      	bgt.n	800a106 <__sflush_r+0xfe>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a104:	e78e      	b.n	800a024 <__sflush_r+0x1c>
 800a106:	4407      	add	r7, r0
 800a108:	eba8 0800 	sub.w	r8, r8, r0
 800a10c:	e7e9      	b.n	800a0e2 <__sflush_r+0xda>
 800a10e:	bf00      	nop
 800a110:	20400001 	.word	0x20400001

0800a114 <_fflush_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	690b      	ldr	r3, [r1, #16]
 800a118:	4605      	mov	r5, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	b913      	cbnz	r3, 800a124 <_fflush_r+0x10>
 800a11e:	2500      	movs	r5, #0
 800a120:	4628      	mov	r0, r5
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	b118      	cbz	r0, 800a12e <_fflush_r+0x1a>
 800a126:	6983      	ldr	r3, [r0, #24]
 800a128:	b90b      	cbnz	r3, 800a12e <_fflush_r+0x1a>
 800a12a:	f7ff fa4f 	bl	80095cc <__sinit>
 800a12e:	4b14      	ldr	r3, [pc, #80]	; (800a180 <_fflush_r+0x6c>)
 800a130:	429c      	cmp	r4, r3
 800a132:	d11b      	bne.n	800a16c <_fflush_r+0x58>
 800a134:	686c      	ldr	r4, [r5, #4]
 800a136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0ef      	beq.n	800a11e <_fflush_r+0xa>
 800a13e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a140:	07d0      	lsls	r0, r2, #31
 800a142:	d404      	bmi.n	800a14e <_fflush_r+0x3a>
 800a144:	0599      	lsls	r1, r3, #22
 800a146:	d402      	bmi.n	800a14e <_fflush_r+0x3a>
 800a148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a14a:	f7ff fadd 	bl	8009708 <__retarget_lock_acquire_recursive>
 800a14e:	4628      	mov	r0, r5
 800a150:	4621      	mov	r1, r4
 800a152:	f7ff ff59 	bl	800a008 <__sflush_r>
 800a156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a158:	07da      	lsls	r2, r3, #31
 800a15a:	4605      	mov	r5, r0
 800a15c:	d4e0      	bmi.n	800a120 <_fflush_r+0xc>
 800a15e:	89a3      	ldrh	r3, [r4, #12]
 800a160:	059b      	lsls	r3, r3, #22
 800a162:	d4dd      	bmi.n	800a120 <_fflush_r+0xc>
 800a164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a166:	f7ff fad0 	bl	800970a <__retarget_lock_release_recursive>
 800a16a:	e7d9      	b.n	800a120 <_fflush_r+0xc>
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <_fflush_r+0x70>)
 800a16e:	429c      	cmp	r4, r3
 800a170:	d101      	bne.n	800a176 <_fflush_r+0x62>
 800a172:	68ac      	ldr	r4, [r5, #8]
 800a174:	e7df      	b.n	800a136 <_fflush_r+0x22>
 800a176:	4b04      	ldr	r3, [pc, #16]	; (800a188 <_fflush_r+0x74>)
 800a178:	429c      	cmp	r4, r3
 800a17a:	bf08      	it	eq
 800a17c:	68ec      	ldreq	r4, [r5, #12]
 800a17e:	e7da      	b.n	800a136 <_fflush_r+0x22>
 800a180:	0800a478 	.word	0x0800a478
 800a184:	0800a498 	.word	0x0800a498
 800a188:	0800a458 	.word	0x0800a458

0800a18c <_lseek_r>:
 800a18c:	b538      	push	{r3, r4, r5, lr}
 800a18e:	4d07      	ldr	r5, [pc, #28]	; (800a1ac <_lseek_r+0x20>)
 800a190:	4604      	mov	r4, r0
 800a192:	4608      	mov	r0, r1
 800a194:	4611      	mov	r1, r2
 800a196:	2200      	movs	r2, #0
 800a198:	602a      	str	r2, [r5, #0]
 800a19a:	461a      	mov	r2, r3
 800a19c:	f7f7 fd0e 	bl	8001bbc <_lseek>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_lseek_r+0x1e>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_lseek_r+0x1e>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	20001bd4 	.word	0x20001bd4

0800a1b0 <__swhatbuf_r>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	460e      	mov	r6, r1
 800a1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	b096      	sub	sp, #88	; 0x58
 800a1bc:	4614      	mov	r4, r2
 800a1be:	461d      	mov	r5, r3
 800a1c0:	da07      	bge.n	800a1d2 <__swhatbuf_r+0x22>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	89b3      	ldrh	r3, [r6, #12]
 800a1c8:	061a      	lsls	r2, r3, #24
 800a1ca:	d410      	bmi.n	800a1ee <__swhatbuf_r+0x3e>
 800a1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d0:	e00e      	b.n	800a1f0 <__swhatbuf_r+0x40>
 800a1d2:	466a      	mov	r2, sp
 800a1d4:	f000 f8be 	bl	800a354 <_fstat_r>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	dbf2      	blt.n	800a1c2 <__swhatbuf_r+0x12>
 800a1dc:	9a01      	ldr	r2, [sp, #4]
 800a1de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1e6:	425a      	negs	r2, r3
 800a1e8:	415a      	adcs	r2, r3
 800a1ea:	602a      	str	r2, [r5, #0]
 800a1ec:	e7ee      	b.n	800a1cc <__swhatbuf_r+0x1c>
 800a1ee:	2340      	movs	r3, #64	; 0x40
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	b016      	add	sp, #88	; 0x58
 800a1f6:	bd70      	pop	{r4, r5, r6, pc}

0800a1f8 <__smakebuf_r>:
 800a1f8:	898b      	ldrh	r3, [r1, #12]
 800a1fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1fc:	079d      	lsls	r5, r3, #30
 800a1fe:	4606      	mov	r6, r0
 800a200:	460c      	mov	r4, r1
 800a202:	d507      	bpl.n	800a214 <__smakebuf_r+0x1c>
 800a204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	6123      	str	r3, [r4, #16]
 800a20c:	2301      	movs	r3, #1
 800a20e:	6163      	str	r3, [r4, #20]
 800a210:	b002      	add	sp, #8
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	ab01      	add	r3, sp, #4
 800a216:	466a      	mov	r2, sp
 800a218:	f7ff ffca 	bl	800a1b0 <__swhatbuf_r>
 800a21c:	9900      	ldr	r1, [sp, #0]
 800a21e:	4605      	mov	r5, r0
 800a220:	4630      	mov	r0, r6
 800a222:	f7ff fa73 	bl	800970c <_malloc_r>
 800a226:	b948      	cbnz	r0, 800a23c <__smakebuf_r+0x44>
 800a228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a22c:	059a      	lsls	r2, r3, #22
 800a22e:	d4ef      	bmi.n	800a210 <__smakebuf_r+0x18>
 800a230:	f023 0303 	bic.w	r3, r3, #3
 800a234:	f043 0302 	orr.w	r3, r3, #2
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	e7e3      	b.n	800a204 <__smakebuf_r+0xc>
 800a23c:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <__smakebuf_r+0x7c>)
 800a23e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	6020      	str	r0, [r4, #0]
 800a244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	9b00      	ldr	r3, [sp, #0]
 800a24c:	6163      	str	r3, [r4, #20]
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	6120      	str	r0, [r4, #16]
 800a252:	b15b      	cbz	r3, 800a26c <__smakebuf_r+0x74>
 800a254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 f88d 	bl	800a378 <_isatty_r>
 800a25e:	b128      	cbz	r0, 800a26c <__smakebuf_r+0x74>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	f023 0303 	bic.w	r3, r3, #3
 800a266:	f043 0301 	orr.w	r3, r3, #1
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	89a0      	ldrh	r0, [r4, #12]
 800a26e:	4305      	orrs	r5, r0
 800a270:	81a5      	strh	r5, [r4, #12]
 800a272:	e7cd      	b.n	800a210 <__smakebuf_r+0x18>
 800a274:	08009565 	.word	0x08009565

0800a278 <__malloc_lock>:
 800a278:	4801      	ldr	r0, [pc, #4]	; (800a280 <__malloc_lock+0x8>)
 800a27a:	f7ff ba45 	b.w	8009708 <__retarget_lock_acquire_recursive>
 800a27e:	bf00      	nop
 800a280:	20001bcc 	.word	0x20001bcc

0800a284 <__malloc_unlock>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__malloc_unlock+0x8>)
 800a286:	f7ff ba40 	b.w	800970a <__retarget_lock_release_recursive>
 800a28a:	bf00      	nop
 800a28c:	20001bcc 	.word	0x20001bcc

0800a290 <_free_r>:
 800a290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a292:	2900      	cmp	r1, #0
 800a294:	d048      	beq.n	800a328 <_free_r+0x98>
 800a296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a29a:	9001      	str	r0, [sp, #4]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f1a1 0404 	sub.w	r4, r1, #4
 800a2a2:	bfb8      	it	lt
 800a2a4:	18e4      	addlt	r4, r4, r3
 800a2a6:	f7ff ffe7 	bl	800a278 <__malloc_lock>
 800a2aa:	4a20      	ldr	r2, [pc, #128]	; (800a32c <_free_r+0x9c>)
 800a2ac:	9801      	ldr	r0, [sp, #4]
 800a2ae:	6813      	ldr	r3, [r2, #0]
 800a2b0:	4615      	mov	r5, r2
 800a2b2:	b933      	cbnz	r3, 800a2c2 <_free_r+0x32>
 800a2b4:	6063      	str	r3, [r4, #4]
 800a2b6:	6014      	str	r4, [r2, #0]
 800a2b8:	b003      	add	sp, #12
 800a2ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2be:	f7ff bfe1 	b.w	800a284 <__malloc_unlock>
 800a2c2:	42a3      	cmp	r3, r4
 800a2c4:	d90b      	bls.n	800a2de <_free_r+0x4e>
 800a2c6:	6821      	ldr	r1, [r4, #0]
 800a2c8:	1862      	adds	r2, r4, r1
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	bf04      	itt	eq
 800a2ce:	681a      	ldreq	r2, [r3, #0]
 800a2d0:	685b      	ldreq	r3, [r3, #4]
 800a2d2:	6063      	str	r3, [r4, #4]
 800a2d4:	bf04      	itt	eq
 800a2d6:	1852      	addeq	r2, r2, r1
 800a2d8:	6022      	streq	r2, [r4, #0]
 800a2da:	602c      	str	r4, [r5, #0]
 800a2dc:	e7ec      	b.n	800a2b8 <_free_r+0x28>
 800a2de:	461a      	mov	r2, r3
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	b10b      	cbz	r3, 800a2e8 <_free_r+0x58>
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	d9fa      	bls.n	800a2de <_free_r+0x4e>
 800a2e8:	6811      	ldr	r1, [r2, #0]
 800a2ea:	1855      	adds	r5, r2, r1
 800a2ec:	42a5      	cmp	r5, r4
 800a2ee:	d10b      	bne.n	800a308 <_free_r+0x78>
 800a2f0:	6824      	ldr	r4, [r4, #0]
 800a2f2:	4421      	add	r1, r4
 800a2f4:	1854      	adds	r4, r2, r1
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	6011      	str	r1, [r2, #0]
 800a2fa:	d1dd      	bne.n	800a2b8 <_free_r+0x28>
 800a2fc:	681c      	ldr	r4, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	6053      	str	r3, [r2, #4]
 800a302:	4421      	add	r1, r4
 800a304:	6011      	str	r1, [r2, #0]
 800a306:	e7d7      	b.n	800a2b8 <_free_r+0x28>
 800a308:	d902      	bls.n	800a310 <_free_r+0x80>
 800a30a:	230c      	movs	r3, #12
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	e7d3      	b.n	800a2b8 <_free_r+0x28>
 800a310:	6825      	ldr	r5, [r4, #0]
 800a312:	1961      	adds	r1, r4, r5
 800a314:	428b      	cmp	r3, r1
 800a316:	bf04      	itt	eq
 800a318:	6819      	ldreq	r1, [r3, #0]
 800a31a:	685b      	ldreq	r3, [r3, #4]
 800a31c:	6063      	str	r3, [r4, #4]
 800a31e:	bf04      	itt	eq
 800a320:	1949      	addeq	r1, r1, r5
 800a322:	6021      	streq	r1, [r4, #0]
 800a324:	6054      	str	r4, [r2, #4]
 800a326:	e7c7      	b.n	800a2b8 <_free_r+0x28>
 800a328:	b003      	add	sp, #12
 800a32a:	bd30      	pop	{r4, r5, pc}
 800a32c:	20001960 	.word	0x20001960

0800a330 <_read_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4d07      	ldr	r5, [pc, #28]	; (800a350 <_read_r+0x20>)
 800a334:	4604      	mov	r4, r0
 800a336:	4608      	mov	r0, r1
 800a338:	4611      	mov	r1, r2
 800a33a:	2200      	movs	r2, #0
 800a33c:	602a      	str	r2, [r5, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	f7f7 fbdc 	bl	8001afc <_read>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_read_r+0x1e>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_read_r+0x1e>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	20001bd4 	.word	0x20001bd4

0800a354 <_fstat_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4d07      	ldr	r5, [pc, #28]	; (800a374 <_fstat_r+0x20>)
 800a358:	2300      	movs	r3, #0
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	f7f7 fc10 	bl	8001b86 <_fstat>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d102      	bne.n	800a370 <_fstat_r+0x1c>
 800a36a:	682b      	ldr	r3, [r5, #0]
 800a36c:	b103      	cbz	r3, 800a370 <_fstat_r+0x1c>
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	bd38      	pop	{r3, r4, r5, pc}
 800a372:	bf00      	nop
 800a374:	20001bd4 	.word	0x20001bd4

0800a378 <_isatty_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d06      	ldr	r5, [pc, #24]	; (800a394 <_isatty_r+0x1c>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7f7 fc0f 	bl	8001ba6 <_isatty>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_isatty_r+0x1a>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_isatty_r+0x1a>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	20001bd4 	.word	0x20001bd4

0800a398 <_init>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	bf00      	nop
 800a39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39e:	bc08      	pop	{r3}
 800a3a0:	469e      	mov	lr, r3
 800a3a2:	4770      	bx	lr

0800a3a4 <_fini>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	bf00      	nop
 800a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3aa:	bc08      	pop	{r3}
 800a3ac:	469e      	mov	lr, r3
 800a3ae:	4770      	bx	lr
