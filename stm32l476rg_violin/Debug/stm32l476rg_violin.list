
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fefc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08010090  08010090  00020090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105e0  080105e0  000301c4  2**0
                  CONTENTS
  4 .ARM          00000008  080105e0  080105e0  000205e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105e8  080105e8  000301c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105e8  080105e8  000205e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080105ec  080105ec  000205ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  080105f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fd44  200001c4  080107b4  000301c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ff08  080107b4  0003ff08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000320ce  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005989  00000000  00000000  000622c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e8  00000000  00000000  00067c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021d0  00000000  00000000  0006a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e44b  00000000  00000000  0006c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e50  00000000  00000000  0009a653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001190f9  00000000  00000000  000c24a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001db59c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a62c  00000000  00000000  001db5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010074 	.word	0x08010074

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	08010074 	.word	0x08010074

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b96e 	b.w	8000f40 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468c      	mov	ip, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8083 	bne.w	8000d92 <__udivmoddi4+0x116>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	d947      	bls.n	8000d22 <__udivmoddi4+0xa6>
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	b142      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c98:	f1c2 0020 	rsb	r0, r2, #32
 8000c9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	4097      	lsls	r7, r2
 8000ca4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb4:	fa1f fe87 	uxth.w	lr, r7
 8000cb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 8119 	bcs.w	8000f04 <__udivmoddi4+0x288>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8116 	bls.w	8000f04 <__udivmoddi4+0x288>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	443b      	add	r3, r7
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8105 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f240 8102 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b902      	cbnz	r2, 8000d26 <__udivmoddi4+0xaa>
 8000d24:	deff      	udf	#255	; 0xff
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d150      	bne.n	8000dd0 <__udivmoddi4+0x154>
 8000d2e:	1bcb      	subs	r3, r1, r7
 8000d30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	2601      	movs	r6, #1
 8000d3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3e:	0c21      	lsrs	r1, r4, #16
 8000d40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb08 f30c 	mul.w	r3, r8, ip
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0xe2>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	f200 80e9 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1ac9      	subs	r1, r1, r3
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x10c>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x10a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80d9 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e7bf      	b.n	8000d12 <__udivmoddi4+0x96>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x12e>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80b1 	beq.w	8000efe <__udivmoddi4+0x282>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x1cc>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0x140>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80b8 	bhi.w	8000f2c <__udivmoddi4+0x2b0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0a8      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000dca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd8:	4097      	lsls	r7, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	4330      	orrs	r0, r6
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df8:	fb06 f108 	mul.w	r1, r6, r8
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x19c>
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e0a:	f080 808d 	bcs.w	8000f28 <__udivmoddi4+0x2ac>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 808a 	bls.w	8000f28 <__udivmoddi4+0x2ac>
 8000e14:	3e02      	subs	r6, #2
 8000e16:	443b      	add	r3, r7
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b281      	uxth	r1, r0
 8000e1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb00 f308 	mul.w	r3, r0, r8
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x1c4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e36:	d273      	bcs.n	8000f20 <__udivmoddi4+0x2a4>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d971      	bls.n	8000f20 <__udivmoddi4+0x2a4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4439      	add	r1, r7
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e46:	e778      	b.n	8000d3a <__udivmoddi4+0xbe>
 8000e48:	f1c6 0c20 	rsb	ip, r6, #32
 8000e4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e54:	431c      	orrs	r4, r3
 8000e56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e66:	431f      	orrs	r7, r3
 8000e68:	0c3b      	lsrs	r3, r7, #16
 8000e6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6e:	fa1f f884 	uxth.w	r8, r4
 8000e72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	fa02 f206 	lsl.w	r2, r2, r6
 8000e84:	fa00 f306 	lsl.w	r3, r0, r6
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x220>
 8000e8a:	1861      	adds	r1, r4, r1
 8000e8c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e90:	d248      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d946      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000e96:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9a:	4421      	add	r1, r4
 8000e9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ea0:	b2bf      	uxth	r7, r7
 8000ea2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eaa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eae:	fb00 f808 	mul.w	r8, r0, r8
 8000eb2:	45b8      	cmp	r8, r7
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x24a>
 8000eb6:	19e7      	adds	r7, r4, r7
 8000eb8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ebc:	d22e      	bcs.n	8000f1c <__udivmoddi4+0x2a0>
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d92c      	bls.n	8000f1c <__udivmoddi4+0x2a0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4427      	add	r7, r4
 8000ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eca:	eba7 0708 	sub.w	r7, r7, r8
 8000ece:	fba0 8902 	umull	r8, r9, r0, r2
 8000ed2:	454f      	cmp	r7, r9
 8000ed4:	46c6      	mov	lr, r8
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	d31a      	bcc.n	8000f10 <__udivmoddi4+0x294>
 8000eda:	d017      	beq.n	8000f0c <__udivmoddi4+0x290>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x27a>
 8000ede:	ebb3 020e 	subs.w	r2, r3, lr
 8000ee2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eea:	40f2      	lsrs	r2, r6
 8000eec:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef0:	40f7      	lsrs	r7, r6
 8000ef2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e70b      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fd      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f0c:	4543      	cmp	r3, r8
 8000f0e:	d2e5      	bcs.n	8000edc <__udivmoddi4+0x260>
 8000f10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f14:	eb69 0104 	sbc.w	r1, r9, r4
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7df      	b.n	8000edc <__udivmoddi4+0x260>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e7d2      	b.n	8000ec6 <__udivmoddi4+0x24a>
 8000f20:	4660      	mov	r0, ip
 8000f22:	e78d      	b.n	8000e40 <__udivmoddi4+0x1c4>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e7b9      	b.n	8000e9c <__udivmoddi4+0x220>
 8000f28:	4666      	mov	r6, ip
 8000f2a:	e775      	b.n	8000e18 <__udivmoddi4+0x19c>
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e74a      	b.n	8000dc6 <__udivmoddi4+0x14a>
 8000f30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f34:	4439      	add	r1, r7
 8000f36:	e713      	b.n	8000d60 <__udivmoddi4+0xe4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	443c      	add	r4, r7
 8000f3c:	e724      	b.n	8000d88 <__udivmoddi4+0x10c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <SELECT+0x18>)
 8000f4e:	f004 fff3 	bl	8005f38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f003 f91c 	bl	8004190 <HAL_Delay>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	48000400 	.word	0x48000400

08000f60 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <DESELECT+0x18>)
 8000f6a:	f004 ffe5 	bl	8005f38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f003 f90e 	bl	8004190 <HAL_Delay>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	48000400 	.word	0x48000400

08000f7c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f86:	bf00      	nop
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <SPI_TxByte+0x30>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d1f8      	bne.n	8000f88 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f96:	1df9      	adds	r1, r7, #7
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <SPI_TxByte+0x30>)
 8000f9e:	f006 fd00 	bl	80079a2 <HAL_SPI_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000cc7c 	.word	0x2000cc7c

08000fb0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fbc:	bf00      	nop
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <SPI_TxBuffer+0x30>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d1f8      	bne.n	8000fbe <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <SPI_TxBuffer+0x30>)
 8000fd4:	f006 fce5 	bl	80079a2 <HAL_SPI_Transmit>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000cc7c 	.word	0x2000cc7c

08000fe4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000fea:	23ff      	movs	r3, #255	; 0xff
 8000fec:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fee:	bf00      	nop
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <SPI_RxByte+0x34>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d1f8      	bne.n	8000ff0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000ffe:	1dba      	adds	r2, r7, #6
 8001000:	1df9      	adds	r1, r7, #7
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <SPI_RxByte+0x34>)
 800100a:	f006 fe38 	bl	8007c7e <HAL_SPI_TransmitReceive>

	return data;
 800100e:	79bb      	ldrb	r3, [r7, #6]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000cc7c 	.word	0x2000cc7c

0800101c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001024:	f7ff ffde 	bl	8000fe4 <SPI_RxByte>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	701a      	strb	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <SD_ReadyWait+0x30>)
 8001040:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001044:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001046:	f7ff ffcd 	bl	8000fe4 <SPI_RxByte>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2bff      	cmp	r3, #255	; 0xff
 8001052:	d003      	beq.n	800105c <SD_ReadyWait+0x24>
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SD_ReadyWait+0x30>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f4      	bne.n	8001046 <SD_ReadyWait+0xe>

	return res;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20003664 	.word	0x20003664

0800106c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001072:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001076:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001078:	f7ff ff72 	bl	8000f60 <DESELECT>
	for(int i = 0; i < 10; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	e005      	b.n	800108e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001082:	20ff      	movs	r0, #255	; 0xff
 8001084:	f7ff ff7a 	bl	8000f7c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3301      	adds	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b09      	cmp	r3, #9
 8001092:	ddf6      	ble.n	8001082 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001094:	f7ff ff56 	bl	8000f44 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010ac:	2395      	movs	r3, #149	; 0x95
 80010ae:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010b0:	463b      	mov	r3, r7
 80010b2:	2106      	movs	r1, #6
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff7b 	bl	8000fb0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ba:	e002      	b.n	80010c2 <SD_PowerOn+0x56>
	{
		cnt--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010c2:	f7ff ff8f 	bl	8000fe4 <SPI_RxByte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d002      	beq.n	80010d2 <SD_PowerOn+0x66>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f4      	bne.n	80010bc <SD_PowerOn+0x50>
	}

	DESELECT();
 80010d2:	f7ff ff45 	bl	8000f60 <DESELECT>
	SPI_TxByte(0XFF);
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff ff50 	bl	8000f7c <SPI_TxByte>

	PowerFlag = 1;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <SD_PowerOn+0x80>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001e1 	.word	0x200001e1

080010f0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <SD_PowerOff+0x14>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	200001e1 	.word	0x200001e1

08001108 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <SD_CheckPower+0x14>)
 800110e:	781b      	ldrb	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200001e1 	.word	0x200001e1

08001120 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <SD_RxDataBlock+0x58>)
 800112c:	22c8      	movs	r2, #200	; 0xc8
 800112e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001130:	f7ff ff58 	bl	8000fe4 <SPI_RxByte>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d103      	bne.n	8001146 <SD_RxDataBlock+0x26>
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <SD_RxDataBlock+0x58>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f4      	bne.n	8001130 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2bfe      	cmp	r3, #254	; 0xfe
 800114a:	d001      	beq.n	8001150 <SD_RxDataBlock+0x30>
 800114c:	2300      	movs	r3, #0
 800114e:	e00f      	b.n	8001170 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff60 	bl	800101c <SPI_RxBytePtr>
	} while(len--);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	603a      	str	r2, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f4      	bne.n	8001150 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001166:	f7ff ff3d 	bl	8000fe4 <SPI_RxByte>
	SPI_RxByte();
 800116a:	f7ff ff3b 	bl	8000fe4 <SPI_RxByte>

	return TRUE;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20003666 	.word	0x20003666

0800117c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800118c:	f7ff ff54 	bl	8001038 <SD_ReadyWait>
 8001190:	4603      	mov	r3, r0
 8001192:	2bff      	cmp	r3, #255	; 0xff
 8001194:	d001      	beq.n	800119a <SD_TxDataBlock+0x1e>
 8001196:	2300      	movs	r3, #0
 8001198:	e02f      	b.n	80011fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff feed 	bl	8000f7c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2bfd      	cmp	r3, #253	; 0xfd
 80011a6:	d020      	beq.n	80011ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff feff 	bl	8000fb0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011b2:	f7ff ff17 	bl	8000fe4 <SPI_RxByte>
		SPI_RxByte();
 80011b6:	f7ff ff15 	bl	8000fe4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011ba:	e00b      	b.n	80011d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011bc:	f7ff ff12 	bl	8000fe4 <SPI_RxByte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d006      	beq.n	80011dc <SD_TxDataBlock+0x60>
			i++;
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	3301      	adds	r3, #1
 80011d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	2b40      	cmp	r3, #64	; 0x40
 80011d8:	d9f0      	bls.n	80011bc <SD_TxDataBlock+0x40>
 80011da:	e000      	b.n	80011de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011de:	bf00      	nop
 80011e0:	f7ff ff00 	bl	8000fe4 <SPI_RxByte>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0fa      	beq.n	80011e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d101      	bne.n	80011f8 <SD_TxDataBlock+0x7c>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	6039      	str	r1, [r7, #0]
 800120c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800120e:	f7ff ff13 	bl	8001038 <SD_ReadyWait>
 8001212:	4603      	mov	r3, r0
 8001214:	2bff      	cmp	r3, #255	; 0xff
 8001216:	d001      	beq.n	800121c <SD_SendCmd+0x1a>
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	e042      	b.n	80012a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff feac 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	0e1b      	lsrs	r3, r3, #24
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fea6 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fea0 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe9a 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe95 	bl	8000f7c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b40      	cmp	r3, #64	; 0x40
 8001256:	d102      	bne.n	800125e <SD_SendCmd+0x5c>
 8001258:	2395      	movs	r3, #149	; 0x95
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e007      	b.n	800126e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b48      	cmp	r3, #72	; 0x48
 8001262:	d102      	bne.n	800126a <SD_SendCmd+0x68>
 8001264:	2387      	movs	r3, #135	; 0x87
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e001      	b.n	800126e <SD_SendCmd+0x6c>
	else crc = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe83 	bl	8000f7c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b4c      	cmp	r3, #76	; 0x4c
 800127a:	d101      	bne.n	8001280 <SD_SendCmd+0x7e>
 800127c:	f7ff feb2 	bl	8000fe4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001280:	230a      	movs	r3, #10
 8001282:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001284:	f7ff feae 	bl	8000fe4 <SPI_RxByte>
 8001288:	4603      	mov	r3, r0
 800128a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800128c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da05      	bge.n	80012a0 <SD_SendCmd+0x9e>
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	3b01      	subs	r3, #1
 8001298:	73bb      	strb	r3, [r7, #14]
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f1      	bne.n	8001284 <SD_SendCmd+0x82>

	return res;
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SD_disk_initialize+0x14>
 80012bc:	2301      	movs	r3, #1
 80012be:	e0d1      	b.n	8001464 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <SD_disk_initialize+0x1c0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <SD_disk_initialize+0x2a>
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <SD_disk_initialize+0x1c0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	e0c6      	b.n	8001464 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80012d6:	f7ff fec9 	bl	800106c <SD_PowerOn>

	/* slave select */
	SELECT();
 80012da:	f7ff fe33 	bl	8000f44 <SELECT>

	/* check disk type */
	type = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012e2:	2100      	movs	r1, #0
 80012e4:	2040      	movs	r0, #64	; 0x40
 80012e6:	f7ff ff8c 	bl	8001202 <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 80a1 	bne.w	8001434 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <SD_disk_initialize+0x1c4>)
 80012f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012fe:	2048      	movs	r0, #72	; 0x48
 8001300:	f7ff ff7f 	bl	8001202 <SD_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d155      	bne.n	80013b6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e00c      	b.n	800132a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001310:	7bfc      	ldrb	r4, [r7, #15]
 8001312:	f7ff fe67 	bl	8000fe4 <SPI_RxByte>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4423      	add	r3, r4
 8001320:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3301      	adds	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d9ef      	bls.n	8001310 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001330:	7abb      	ldrb	r3, [r7, #10]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d17e      	bne.n	8001434 <SD_disk_initialize+0x188>
 8001336:	7afb      	ldrb	r3, [r7, #11]
 8001338:	2baa      	cmp	r3, #170	; 0xaa
 800133a:	d17b      	bne.n	8001434 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800133c:	2100      	movs	r1, #0
 800133e:	2077      	movs	r0, #119	; 0x77
 8001340:	f7ff ff5f 	bl	8001202 <SD_SendCmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d807      	bhi.n	800135a <SD_disk_initialize+0xae>
 800134a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800134e:	2069      	movs	r0, #105	; 0x69
 8001350:	f7ff ff57 	bl	8001202 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800135a:	4b45      	ldr	r3, [pc, #276]	; (8001470 <SD_disk_initialize+0x1c4>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1ec      	bne.n	800133c <SD_disk_initialize+0x90>
 8001362:	e000      	b.n	8001366 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001364:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <SD_disk_initialize+0x1c4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d062      	beq.n	8001434 <SD_disk_initialize+0x188>
 800136e:	2100      	movs	r1, #0
 8001370:	207a      	movs	r0, #122	; 0x7a
 8001372:	f7ff ff46 	bl	8001202 <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d15b      	bne.n	8001434 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e00c      	b.n	800139c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001382:	7bfc      	ldrb	r4, [r7, #15]
 8001384:	f7ff fe2e 	bl	8000fe4 <SPI_RxByte>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4423      	add	r3, r4
 8001392:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	3301      	adds	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d9ef      	bls.n	8001382 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013a2:	7a3b      	ldrb	r3, [r7, #8]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SD_disk_initialize+0x104>
 80013ac:	230c      	movs	r3, #12
 80013ae:	e000      	b.n	80013b2 <SD_disk_initialize+0x106>
 80013b0:	2304      	movs	r3, #4
 80013b2:	73bb      	strb	r3, [r7, #14]
 80013b4:	e03e      	b.n	8001434 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013b6:	2100      	movs	r1, #0
 80013b8:	2077      	movs	r0, #119	; 0x77
 80013ba:	f7ff ff22 	bl	8001202 <SD_SendCmd>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d808      	bhi.n	80013d6 <SD_disk_initialize+0x12a>
 80013c4:	2100      	movs	r1, #0
 80013c6:	2069      	movs	r0, #105	; 0x69
 80013c8:	f7ff ff1b 	bl	8001202 <SD_SendCmd>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d801      	bhi.n	80013d6 <SD_disk_initialize+0x12a>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e000      	b.n	80013d8 <SD_disk_initialize+0x12c>
 80013d6:	2301      	movs	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d10e      	bne.n	80013fe <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013e0:	2100      	movs	r1, #0
 80013e2:	2077      	movs	r0, #119	; 0x77
 80013e4:	f7ff ff0d 	bl	8001202 <SD_SendCmd>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d80e      	bhi.n	800140c <SD_disk_initialize+0x160>
 80013ee:	2100      	movs	r1, #0
 80013f0:	2069      	movs	r0, #105	; 0x69
 80013f2:	f7ff ff06 	bl	8001202 <SD_SendCmd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <SD_disk_initialize+0x160>
 80013fc:	e00c      	b.n	8001418 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013fe:	2100      	movs	r1, #0
 8001400:	2041      	movs	r0, #65	; 0x41
 8001402:	f7ff fefe 	bl	8001202 <SD_SendCmd>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <SD_disk_initialize+0x1c4>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e2      	bne.n	80013da <SD_disk_initialize+0x12e>
 8001414:	e000      	b.n	8001418 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001416:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <SD_disk_initialize+0x1c4>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d007      	beq.n	8001430 <SD_disk_initialize+0x184>
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	2050      	movs	r0, #80	; 0x50
 8001426:	f7ff feec 	bl	8001202 <SD_SendCmd>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SD_disk_initialize+0x188>
 8001430:	2300      	movs	r3, #0
 8001432:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <SD_disk_initialize+0x1c8>)
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800143a:	f7ff fd91 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 800143e:	f7ff fdd1 	bl	8000fe4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <SD_disk_initialize+0x1c0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SD_disk_initialize+0x1c0>)
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e001      	b.n	800145e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800145a:	f7ff fe49 	bl	80010f0 <SD_PowerOff>
	}

	return Stat;
 800145e:	4b03      	ldr	r3, [pc, #12]	; (800146c <SD_disk_initialize+0x1c0>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20003666 	.word	0x20003666
 8001474:	200001e0 	.word	0x200001e0

08001478 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SD_disk_status+0x14>
 8001488:	2301      	movs	r3, #1
 800148a:	e002      	b.n	8001492 <SD_disk_status+0x1a>
	return Stat;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SD_disk_status+0x28>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000

080014a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <SD_disk_read+0x1c>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <SD_disk_read+0x20>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e051      	b.n	8001568 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <SD_disk_read+0xcc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SD_disk_read+0x32>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e048      	b.n	8001568 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <SD_disk_read+0xd0>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <SD_disk_read+0x44>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80014e8:	f7ff fd2c 	bl	8000f44 <SELECT>

	if (count == 1)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d111      	bne.n	8001516 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	2051      	movs	r0, #81	; 0x51
 80014f6:	f7ff fe84 	bl	8001202 <SD_SendCmd>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d129      	bne.n	8001554 <SD_disk_read+0xb0>
 8001500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f7ff fe0b 	bl	8001120 <SD_RxDataBlock>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d021      	beq.n	8001554 <SD_disk_read+0xb0>
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	e01e      	b.n	8001554 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2052      	movs	r0, #82	; 0x52
 800151a:	f7ff fe72 	bl	8001202 <SD_SendCmd>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d117      	bne.n	8001554 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7ff fdf9 	bl	8001120 <SD_RxDataBlock>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00a      	beq.n	800154a <SD_disk_read+0xa6>
				buff += 512;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800153a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ed      	bne.n	8001524 <SD_disk_read+0x80>
 8001548:	e000      	b.n	800154c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800154a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800154c:	2100      	movs	r1, #0
 800154e:	204c      	movs	r0, #76	; 0x4c
 8001550:	f7ff fe57 	bl	8001202 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001554:	f7ff fd04 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 8001558:	f7ff fd44 	bl	8000fe4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	200001e0 	.word	0x200001e0

08001578 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <SD_disk_write+0x1c>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <SD_disk_write+0x20>
 8001594:	2304      	movs	r3, #4
 8001596:	e06b      	b.n	8001670 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <SD_disk_write+0x100>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SD_disk_write+0x32>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e062      	b.n	8001670 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <SD_disk_write+0x100>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SD_disk_write+0x44>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e059      	b.n	8001670 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015bc:	4b2f      	ldr	r3, [pc, #188]	; (800167c <SD_disk_write+0x104>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <SD_disk_write+0x56>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80015ce:	f7ff fcb9 	bl	8000f44 <SELECT>

	if (count == 1)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d110      	bne.n	80015fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	2058      	movs	r0, #88	; 0x58
 80015dc:	f7ff fe11 	bl	8001202 <SD_SendCmd>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d13a      	bne.n	800165c <SD_disk_write+0xe4>
 80015e6:	21fe      	movs	r1, #254	; 0xfe
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7ff fdc7 	bl	800117c <SD_TxDataBlock>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d033      	beq.n	800165c <SD_disk_write+0xe4>
			count = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	e030      	b.n	800165c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <SD_disk_write+0x104>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001606:	2100      	movs	r1, #0
 8001608:	2077      	movs	r0, #119	; 0x77
 800160a:	f7ff fdfa 	bl	8001202 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	2057      	movs	r0, #87	; 0x57
 8001612:	f7ff fdf6 	bl	8001202 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	2059      	movs	r0, #89	; 0x59
 800161a:	f7ff fdf2 	bl	8001202 <SD_SendCmd>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11b      	bne.n	800165c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001624:	21fc      	movs	r1, #252	; 0xfc
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7ff fda8 	bl	800117c <SD_TxDataBlock>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <SD_disk_write+0xd0>
				buff += 512;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001638:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <SD_disk_write+0xac>
 8001646:	e000      	b.n	800164a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001648:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800164a:	21fd      	movs	r1, #253	; 0xfd
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fd95 	bl	800117c <SD_TxDataBlock>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <SD_disk_write+0xe4>
			{
				count = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800165c:	f7ff fc80 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 8001660:	f7ff fcc0 	bl	8000fe4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	200001e0 	.word	0x200001e0

08001680 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b08b      	sub	sp, #44	; 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	603a      	str	r2, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	460b      	mov	r3, r1
 800168e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SD_disk_ioctl+0x1e>
 800169a:	2304      	movs	r3, #4
 800169c:	e115      	b.n	80018ca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d124      	bne.n	80016f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d012      	beq.n	80016d8 <SD_disk_ioctl+0x58>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	dc1a      	bgt.n	80016ec <SD_disk_ioctl+0x6c>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <SD_disk_ioctl+0x40>
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d006      	beq.n	80016cc <SD_disk_ioctl+0x4c>
 80016be:	e015      	b.n	80016ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016c0:	f7ff fd16 	bl	80010f0 <SD_PowerOff>
			res = RES_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ca:	e0fc      	b.n	80018c6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016cc:	f7ff fcce 	bl	800106c <SD_PowerOn>
			res = RES_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016d6:	e0f6      	b.n	80018c6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	1c5c      	adds	r4, r3, #1
 80016dc:	f7ff fd14 	bl	8001108 <SD_CheckPower>
 80016e0:	4603      	mov	r3, r0
 80016e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ea:	e0ec      	b.n	80018c6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016ec:	2304      	movs	r3, #4
 80016ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f2:	e0e8      	b.n	80018c6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <SD_disk_ioctl+0x254>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_ioctl+0x86>
 8001702:	2303      	movs	r3, #3
 8001704:	e0e1      	b.n	80018ca <SD_disk_ioctl+0x24a>

		SELECT();
 8001706:	f7ff fc1d 	bl	8000f44 <SELECT>

		switch (ctrl)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	2b0d      	cmp	r3, #13
 800170e:	f200 80cb 	bhi.w	80018a8 <SD_disk_ioctl+0x228>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <SD_disk_ioctl+0x98>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001813 	.word	0x08001813
 800171c:	08001751 	.word	0x08001751
 8001720:	08001803 	.word	0x08001803
 8001724:	080018a9 	.word	0x080018a9
 8001728:	080018a9 	.word	0x080018a9
 800172c:	080018a9 	.word	0x080018a9
 8001730:	080018a9 	.word	0x080018a9
 8001734:	080018a9 	.word	0x080018a9
 8001738:	080018a9 	.word	0x080018a9
 800173c:	080018a9 	.word	0x080018a9
 8001740:	080018a9 	.word	0x080018a9
 8001744:	08001825 	.word	0x08001825
 8001748:	08001849 	.word	0x08001849
 800174c:	0800186d 	.word	0x0800186d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001750:	2100      	movs	r1, #0
 8001752:	2049      	movs	r0, #73	; 0x49
 8001754:	f7ff fd55 	bl	8001202 <SD_SendCmd>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80a8 	bne.w	80018b0 <SD_disk_ioctl+0x230>
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2110      	movs	r1, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fcda 	bl	8001120 <SD_RxDataBlock>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 809e 	beq.w	80018b0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10e      	bne.n	800179c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800177e:	7d7b      	ldrb	r3, [r7, #21]
 8001780:	b29a      	uxth	r2, r3
 8001782:	7d3b      	ldrb	r3, [r7, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001792:	8bfb      	ldrh	r3, [r7, #30]
 8001794:	029a      	lsls	r2, r3, #10
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e02e      	b.n	80017fa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800179c:	7c7b      	ldrb	r3, [r7, #17]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	09db      	lsrs	r3, r3, #7
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	7d7b      	ldrb	r3, [r7, #21]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0306 	and.w	r3, r3, #6
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3302      	adds	r3, #2
 80017c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	7cbb      	ldrb	r3, [r7, #18]
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017ec:	8bfa      	ldrh	r2, [r7, #30]
 80017ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f2:	3b09      	subs	r3, #9
 80017f4:	409a      	lsls	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001800:	e056      	b.n	80018b0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001808:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001810:	e055      	b.n	80018be <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001812:	f7ff fc11 	bl	8001038 <SD_ReadyWait>
 8001816:	4603      	mov	r3, r0
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d14b      	bne.n	80018b4 <SD_disk_ioctl+0x234>
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001822:	e047      	b.n	80018b4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001824:	2100      	movs	r1, #0
 8001826:	2049      	movs	r0, #73	; 0x49
 8001828:	f7ff fceb 	bl	8001202 <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d142      	bne.n	80018b8 <SD_disk_ioctl+0x238>
 8001832:	2110      	movs	r1, #16
 8001834:	6a38      	ldr	r0, [r7, #32]
 8001836:	f7ff fc73 	bl	8001120 <SD_RxDataBlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03b      	beq.n	80018b8 <SD_disk_ioctl+0x238>
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001846:	e037      	b.n	80018b8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001848:	2100      	movs	r1, #0
 800184a:	204a      	movs	r0, #74	; 0x4a
 800184c:	f7ff fcd9 	bl	8001202 <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d132      	bne.n	80018bc <SD_disk_ioctl+0x23c>
 8001856:	2110      	movs	r1, #16
 8001858:	6a38      	ldr	r0, [r7, #32]
 800185a:	f7ff fc61 	bl	8001120 <SD_RxDataBlock>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02b      	beq.n	80018bc <SD_disk_ioctl+0x23c>
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800186a:	e027      	b.n	80018bc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800186c:	2100      	movs	r1, #0
 800186e:	207a      	movs	r0, #122	; 0x7a
 8001870:	f7ff fcc7 	bl	8001202 <SD_SendCmd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001880:	e00b      	b.n	800189a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001882:	6a3c      	ldr	r4, [r7, #32]
 8001884:	1c63      	adds	r3, r4, #1
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	f7ff fbac 	bl	8000fe4 <SPI_RxByte>
 800188c:	4603      	mov	r3, r0
 800188e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001894:	3301      	adds	r3, #1
 8001896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800189a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d9ef      	bls.n	8001882 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80018a8:	2304      	movs	r3, #4
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018ae:	e006      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b0:	bf00      	nop
 80018b2:	e004      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b4:	bf00      	nop
 80018b6:	e002      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b8:	bf00      	nop
 80018ba:	e000      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018bc:	bf00      	nop
		}

		DESELECT();
 80018be:	f7ff fb4f 	bl	8000f60 <DESELECT>
		SPI_RxByte();
 80018c2:	f7ff fb8f 	bl	8000fe4 <SPI_RxByte>
	}

	return res;
 80018c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000

080018d8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 80018e0:	1d39      	adds	r1, r7, #4
 80018e2:	2364      	movs	r3, #100	; 0x64
 80018e4:	2201      	movs	r2, #1
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <__io_putchar+0x20>)
 80018e8:	f008 fbc8 	bl	800a07c <HAL_UART_Transmit>
	return ch;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000cce0 	.word	0x2000cce0

080018fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001902:	f002 fc05 	bl	8004110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001906:	f000 f877 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190a:	f000 fd9f 	bl	800244c <MX_GPIO_Init>
  MX_DMA_Init();
 800190e:	f000 fd53 	bl	80023b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001912:	f000 fd21 	bl	8002358 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001916:	f000 f8f7 	bl	8001b08 <MX_ADC1_Init>
  MX_TIM1_Init();
 800191a:	f000 fa19 	bl	8001d50 <MX_TIM1_Init>
  MX_FATFS_Init();
 800191e:	f009 f833 	bl	800a988 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001922:	f000 f9d7 	bl	8001cd4 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001926:	f000 fba3 	bl	8002070 <MX_TIM15_Init>
  MX_TIM16_Init();
 800192a:	f000 fc25 	bl	8002178 <MX_TIM16_Init>
  MX_TIM17_Init();
 800192e:	f000 fc9b 	bl	8002268 <MX_TIM17_Init>
  MX_I2C1_Init();
 8001932:	f000 f98f 	bl	8001c54 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001936:	f000 fa9b 	bl	8001e70 <MX_TIM3_Init>
  MX_TIM8_Init();
 800193a:	f000 fb09 	bl	8001f50 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_vInit(&xWS2812B, &htim3, &htim8, &hdma_tim3_ch1_trig, &hdma_tim3_ch3, &hdma_tim3_ch4_up, &hdma_tim8_ch2);
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <main+0xac>)
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <main+0xb0>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <main+0xb4>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <main+0xb8>)
 800194c:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <main+0xbc>)
 800194e:	491b      	ldr	r1, [pc, #108]	; (80019bc <main+0xc0>)
 8001950:	481b      	ldr	r0, [pc, #108]	; (80019c0 <main+0xc4>)
 8001952:	f002 f99d 	bl	8003c90 <WS2812B_vInit>

	//[!] Care for HAL_ADC_START_DMA sampling too fast due to small array for DMA (ex: 4 instead of 400. Reduce sampling time of ADC if such case or filter more samples)
  HAL_ADC_Start_DMA(&hadc1, adcValue, ADC_CHANNEL_COUNT);
 8001956:	2204      	movs	r2, #4
 8001958:	491a      	ldr	r1, [pc, #104]	; (80019c4 <main+0xc8>)
 800195a:	481b      	ldr	r0, [pc, #108]	; (80019c8 <main+0xcc>)
 800195c:	f002 ff68 	bl	8004830 <HAL_ADC_Start_DMA>
  //HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001960:	f009 f91a 	bl	800ab98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <main+0xd0>)
 8001966:	2100      	movs	r1, #0
 8001968:	4819      	ldr	r0, [pc, #100]	; (80019d0 <main+0xd4>)
 800196a:	f009 f95f 	bl	800ac2c <osThreadNew>
 800196e:	4603      	mov	r3, r0
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <main+0xd8>)
 8001972:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <main+0xdc>)
 8001976:	2100      	movs	r1, #0
 8001978:	4818      	ldr	r0, [pc, #96]	; (80019dc <main+0xe0>)
 800197a:	f009 f957 	bl	800ac2c <osThreadNew>
 800197e:	4603      	mov	r3, r0
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <main+0xe4>)
 8001982:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <main+0xe8>)
 8001986:	2100      	movs	r1, #0
 8001988:	4817      	ldr	r0, [pc, #92]	; (80019e8 <main+0xec>)
 800198a:	f009 f94f 	bl	800ac2c <osThreadNew>
 800198e:	4603      	mov	r3, r0
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <main+0xf0>)
 8001992:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 8001994:	4816      	ldr	r0, [pc, #88]	; (80019f0 <main+0xf4>)
 8001996:	f009 fa23 	bl	800ade0 <osEventFlagsNew>
 800199a:	4603      	mov	r3, r0
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <main+0xf8>)
 800199e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019a0:	f009 f91e 	bl	800abe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <main+0xa8>
 80019a6:	bf00      	nop
 80019a8:	2000366c 	.word	0x2000366c
 80019ac:	2000cc2c 	.word	0x2000cc2c
 80019b0:	20004948 	.word	0x20004948
 80019b4:	20004af0 	.word	0x20004af0
 80019b8:	200036b8 	.word	0x200036b8
 80019bc:	20004990 	.word	0x20004990
 80019c0:	200047e0 	.word	0x200047e0
 80019c4:	2000cd68 	.word	0x2000cd68
 80019c8:	200049dc 	.word	0x200049dc
 80019cc:	0801029c 	.word	0x0801029c
 80019d0:	08002561 	.word	0x08002561
 80019d4:	20004a40 	.word	0x20004a40
 80019d8:	080102c0 	.word	0x080102c0
 80019dc:	080025d5 	.word	0x080025d5
 80019e0:	200036b4 	.word	0x200036b4
 80019e4:	080102e4 	.word	0x080102e4
 80019e8:	08002639 	.word	0x08002639
 80019ec:	2000cc74 	.word	0x2000cc74
 80019f0:	08010308 	.word	0x08010308
 80019f4:	20003704 	.word	0x20003704

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0b8      	sub	sp, #224	; 0xe0
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a02:	2244      	movs	r2, #68	; 0x44
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00c f938 	bl	800dc7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2288      	movs	r2, #136	; 0x88
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00c f92a 	bl	800dc7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a48:	230a      	movs	r3, #10
 8001a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 fc21 	bl	80062ac <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001a70:	f000 fe16 	bl	80026a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a96:	2104      	movs	r1, #4
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f004 ffed 	bl	8006a78 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001aa4:	f000 fdfc 	bl	80026a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001aa8:	f244 0342 	movw	r3, #16450	; 0x4042
 8001aac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001aba:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001abc:	2303      	movs	r3, #3
 8001abe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ad8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ada:	463b      	mov	r3, r7
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fa01 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001ae8:	f000 fdda 	bl	80026a0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af0:	f004 fb86 	bl	8006200 <HAL_PWREx_ControlVoltageScaling>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001afa:	f000 fdd1 	bl	80026a0 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	37e0      	adds	r7, #224	; 0xe0
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b2c:	4a44      	ldr	r2, [pc, #272]	; (8001c40 <MX_ADC1_Init+0x138>)
 8001b2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8a:	482c      	ldr	r0, [pc, #176]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b8c:	f002 fcfa 	bl	8004584 <HAL_ADC_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001b96:	f000 fd83 	bl	80026a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4825      	ldr	r0, [pc, #148]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001ba6:	f003 fc21 	bl	80053ec <HAL_ADCEx_MultiModeConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bb0:	f000 fd76 	bl	80026a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_ADC1_Init+0x13c>)
 8001bb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bc0:	237f      	movs	r3, #127	; 0x7f
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481a      	ldr	r0, [pc, #104]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001bd2:	f002 feff 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001bdc:	f000 fd60 	bl	80026a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <MX_ADC1_Init+0x140>)
 8001be2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001be4:	230c      	movs	r3, #12
 8001be6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4813      	ldr	r0, [pc, #76]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001bee:	f002 fef1 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001bf8:	f000 fd52 	bl	80026a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_ADC1_Init+0x144>)
 8001bfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c00:	2312      	movs	r3, #18
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001c0a:	f002 fee3 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001c14:	f000 fd44 	bl	80026a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <MX_ADC1_Init+0x148>)
 8001c1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c1c:	2318      	movs	r3, #24
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001c26:	f002 fed5 	bl	80049d4 <HAL_ADC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001c30:	f000 fd36 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200049dc 	.word	0x200049dc
 8001c40:	50040000 	.word	0x50040000
 8001c44:	04300002 	.word	0x04300002
 8001c48:	08600004 	.word	0x08600004
 8001c4c:	0c900008 	.word	0x0c900008
 8001c50:	10c00010 	.word	0x10c00010

08001c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <MX_I2C1_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <MX_I2C1_Init+0x7c>)
 8001c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c8e:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c90:	f004 f982 	bl	8005f98 <HAL_I2C_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c9a:	f000 fd01 	bl	80026a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001ca2:	f004 fa08 	bl	80060b6 <HAL_I2CEx_ConfigAnalogFilter>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cac:	f000 fcf8 	bl	80026a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001cb4:	f004 fa4a 	bl	800614c <HAL_I2CEx_ConfigDigitalFilter>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 fcef 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20004744 	.word	0x20004744
 8001ccc:	40005400 	.word	0x40005400
 8001cd0:	10909cec 	.word	0x10909cec

08001cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <MX_SPI1_Init+0x78>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d22:	2207      	movs	r2, #7
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d2e:	2208      	movs	r2, #8
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d34:	f005 fd92 	bl	800785c <HAL_SPI_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 fcaf 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000cc7c 	.word	0x2000cc7c
 8001d4c:	40013000 	.word	0x40013000

08001d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b096      	sub	sp, #88	; 0x58
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	222c      	movs	r2, #44	; 0x2c
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00b ff7d 	bl	800dc7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d84:	4a39      	ldr	r2, [pc, #228]	; (8001e6c <MX_TIM1_Init+0x11c>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dae:	482e      	ldr	r0, [pc, #184]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001db0:	f006 fba0 	bl	80084f4 <HAL_TIM_PWM_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f000 fc71 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4825      	ldr	r0, [pc, #148]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001dd2:	f007 ffe1 	bl	8009d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ddc:	f000 fc60 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de0:	2360      	movs	r3, #96	; 0x60
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001e06:	f007 fa1d 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e10:	f000 fc46 	bl	80026a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001e4a:	f008 f82d 	bl	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e54:	f000 fc24 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001e5a:	f001 fc03 	bl	8003664 <HAL_TIM_MspPostInit>

}
 8001e5e:	bf00      	nop
 8001e60:	3758      	adds	r7, #88	; 0x58
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000cbdc 	.word	0x2000cbdc
 8001e6c:	40012c00 	.word	0x40012c00

08001e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	463b      	mov	r3, r7
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	615a      	str	r2, [r3, #20]
 8001e92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001e96:	4a2d      	ldr	r2, [pc, #180]	; (8001f4c <MX_TIM3_Init+0xdc>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001eba:	4823      	ldr	r0, [pc, #140]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001ebc:	f006 fb1a 	bl	80084f4 <HAL_TIM_PWM_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001ec6:	f000 fbeb 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481b      	ldr	r0, [pc, #108]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001eda:	f007 ff5d 	bl	8009d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ee4:	f000 fbdc 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee8:	2360      	movs	r3, #96	; 0x60
 8001eea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef8:	463b      	mov	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4812      	ldr	r0, [pc, #72]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f00:	f007 f9a0 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f0a:	f000 fbc9 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2208      	movs	r2, #8
 8001f12:	4619      	mov	r1, r3
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f16:	f007 f995 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001f20:	f000 fbbe 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	220c      	movs	r2, #12
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f2c:	f007 f98a 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001f36:	f000 fbb3 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f3c:	f001 fb92 	bl	8003664 <HAL_TIM_MspPostInit>

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20004990 	.word	0x20004990
 8001f4c:	40000400 	.word	0x40000400

08001f50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b096      	sub	sp, #88	; 0x58
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	615a      	str	r2, [r3, #20]
 8001f74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	222c      	movs	r2, #44	; 0x2c
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00b fe7d 	bl	800dc7c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f84:	4a39      	ldr	r2, [pc, #228]	; (800206c <MX_TIM8_Init+0x11c>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f88:	4b37      	ldr	r3, [pc, #220]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <MX_TIM8_Init+0x118>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <MX_TIM8_Init+0x118>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fae:	482e      	ldr	r0, [pc, #184]	; (8002068 <MX_TIM8_Init+0x118>)
 8001fb0:	f006 faa0 	bl	80084f4 <HAL_TIM_PWM_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001fba:	f000 fb71 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4825      	ldr	r0, [pc, #148]	; (8002068 <MX_TIM8_Init+0x118>)
 8001fd2:	f007 fee1 	bl	8009d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001fdc:	f000 fb60 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002000:	2204      	movs	r2, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4818      	ldr	r0, [pc, #96]	; (8002068 <MX_TIM8_Init+0x118>)
 8002006:	f007 f91d 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002010:	f000 fb46 	bl	80026a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_TIM8_Init+0x118>)
 800204a:	f007 ff2d 	bl	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002054:	f000 fb24 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM8_Init+0x118>)
 800205a:	f001 fb03 	bl	8003664 <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3758      	adds	r7, #88	; 0x58
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200036b8 	.word	0x200036b8
 800206c:	40013400 	.word	0x40013400

08002070 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b096      	sub	sp, #88	; 0x58
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	222c      	movs	r2, #44	; 0x2c
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00b fded 	bl	800dc7c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <MX_TIM15_Init+0x100>)
 80020a4:	4a33      	ldr	r2, [pc, #204]	; (8002174 <MX_TIM15_Init+0x104>)
 80020a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <MX_TIM15_Init+0x100>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <MX_TIM15_Init+0x100>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <MX_TIM15_Init+0x100>)
 80020b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <MX_TIM15_Init+0x100>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <MX_TIM15_Init+0x100>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <MX_TIM15_Init+0x100>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80020ce:	4828      	ldr	r0, [pc, #160]	; (8002170 <MX_TIM15_Init+0x100>)
 80020d0:	f006 fa10 	bl	80084f4 <HAL_TIM_PWM_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80020da:	f000 fae1 	bl	80026a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80020e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ea:	4619      	mov	r1, r3
 80020ec:	4820      	ldr	r0, [pc, #128]	; (8002170 <MX_TIM15_Init+0x100>)
 80020ee:	f007 fe53 	bl	8009d98 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80020f8:	f000 fad2 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fc:	2360      	movs	r3, #96	; 0x60
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002108:	2300      	movs	r3, #0
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <MX_TIM15_Init+0x100>)
 8002122:	f007 f88f 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800212c:	f000 fab8 	bl	80026a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002148:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <MX_TIM15_Init+0x100>)
 8002154:	f007 fea8 	bl	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800215e:	f000 fa9f 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <MX_TIM15_Init+0x100>)
 8002164:	f001 fa7e 	bl	8003664 <HAL_TIM_MspPostInit>

}
 8002168:	bf00      	nop
 800216a:	3758      	adds	r7, #88	; 0x58
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20004790 	.word	0x20004790
 8002174:	40014000 	.word	0x40014000

08002178 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b092      	sub	sp, #72	; 0x48
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800217e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	615a      	str	r2, [r3, #20]
 8002190:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002192:	463b      	mov	r3, r7
 8002194:	222c      	movs	r2, #44	; 0x2c
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f00b fd6f 	bl	800dc7c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021a0:	4a30      	ldr	r2, [pc, #192]	; (8002264 <MX_TIM16_Init+0xec>)
 80021a2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021a6:	2207      	movs	r2, #7
 80021a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021ca:	4825      	ldr	r0, [pc, #148]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021cc:	f006 f8ca 	bl	8008364 <HAL_TIM_Base_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80021d6:	f000 fa63 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80021da:	4821      	ldr	r0, [pc, #132]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021dc:	f006 f98a 	bl	80084f4 <HAL_TIM_PWM_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80021e6:	f000 fa5b 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ea:	2360      	movs	r3, #96	; 0x60
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <MX_TIM16_Init+0xe8>)
 8002210:	f007 f818 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800221a:	f000 fa41 	bl	80026a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002236:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM16_Init+0xe8>)
 8002242:	f007 fe31 	bl	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800224c:	f000 fa28 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM16_Init+0xe8>)
 8002252:	f001 fa07 	bl	8003664 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3748      	adds	r7, #72	; 0x48
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000dda8 	.word	0x2000dda8
 8002264:	40014400 	.word	0x40014400

08002268 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b092      	sub	sp, #72	; 0x48
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800226e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	615a      	str	r2, [r3, #20]
 8002280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002282:	463b      	mov	r3, r7
 8002284:	222c      	movs	r2, #44	; 0x2c
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f00b fcf7 	bl	800dc7c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002290:	4a30      	ldr	r2, [pc, #192]	; (8002354 <MX_TIM17_Init+0xec>)
 8002292:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002296:	2207      	movs	r2, #7
 8002298:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <MX_TIM17_Init+0xe8>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80022ba:	4825      	ldr	r0, [pc, #148]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022bc:	f006 f852 	bl	8008364 <HAL_TIM_Base_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80022c6:	f000 f9eb 	bl	80026a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80022ca:	4821      	ldr	r0, [pc, #132]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022cc:	f006 f912 	bl	80084f4 <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80022d6:	f000 f9e3 	bl	80026a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022da:	2360      	movs	r3, #96	; 0x60
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e6:	2300      	movs	r3, #0
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fa:	2200      	movs	r2, #0
 80022fc:	4619      	mov	r1, r3
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002300:	f006 ffa0 	bl	8009244 <HAL_TIM_PWM_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800230a:	f000 f9c9 	bl	80026a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002326:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	4619      	mov	r1, r3
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002332:	f007 fdb9 	bl	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 800233c:	f000 f9b0 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002342:	f001 f98f 	bl	8003664 <HAL_TIM_MspPostInit>

}
 8002346:	bf00      	nop
 8002348:	3748      	adds	r7, #72	; 0x48
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200048fc 	.word	0x200048fc
 8002354:	40014800 	.word	0x40014800

08002358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <MX_USART2_UART_Init+0x5c>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800239c:	f007 fe20 	bl	8009fe0 <HAL_UART_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023a6:	f000 f97b 	bl	80026a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000cce0 	.word	0x2000cce0
 80023b4:	40004400 	.word	0x40004400

080023b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <MX_DMA_Init+0x90>)
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <MX_DMA_Init+0x90>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6493      	str	r3, [r2, #72]	; 0x48
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <MX_DMA_Init+0x90>)
 80023cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <MX_DMA_Init+0x90>)
 80023d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <MX_DMA_Init+0x90>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6493      	str	r3, [r2, #72]	; 0x48
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <MX_DMA_Init+0x90>)
 80023e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2105      	movs	r1, #5
 80023f2:	200b      	movs	r0, #11
 80023f4:	f003 f986 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023f8:	200b      	movs	r0, #11
 80023fa:	f003 f99f 	bl	800573c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2105      	movs	r1, #5
 8002402:	200c      	movs	r0, #12
 8002404:	f003 f97e 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002408:	200c      	movs	r0, #12
 800240a:	f003 f997 	bl	800573c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2105      	movs	r1, #5
 8002412:	200d      	movs	r0, #13
 8002414:	f003 f976 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002418:	200d      	movs	r0, #13
 800241a:	f003 f98f 	bl	800573c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2105      	movs	r1, #5
 8002422:	2010      	movs	r0, #16
 8002424:	f003 f96e 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002428:	2010      	movs	r0, #16
 800242a:	f003 f987 	bl	800573c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2105      	movs	r1, #5
 8002432:	2045      	movs	r0, #69	; 0x45
 8002434:	f003 f966 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002438:	2045      	movs	r0, #69	; 0x45
 800243a:	f003 f97f 	bl	800573c <HAL_NVIC_EnableIRQ>

}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <MX_GPIO_Init+0xe0>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	4a31      	ldr	r2, [pc, #196]	; (800252c <MX_GPIO_Init+0xe0>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246e:	4b2f      	ldr	r3, [pc, #188]	; (800252c <MX_GPIO_Init+0xe0>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <MX_GPIO_Init+0xe0>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <MX_GPIO_Init+0xe0>)
 8002480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <MX_GPIO_Init+0xe0>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <MX_GPIO_Init+0xe0>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	4a25      	ldr	r2, [pc, #148]	; (800252c <MX_GPIO_Init+0xe0>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <MX_GPIO_Init+0xe0>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <MX_GPIO_Init+0xe0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <MX_GPIO_Init+0xe0>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <MX_GPIO_Init+0xe0>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80024c2:	2201      	movs	r2, #1
 80024c4:	2140      	movs	r1, #64	; 0x40
 80024c6:	481a      	ldr	r0, [pc, #104]	; (8002530 <MX_GPIO_Init+0xe4>)
 80024c8:	f003 fd36 	bl	8005f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024cc:	2303      	movs	r3, #3
 80024ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <MX_GPIO_Init+0xe8>)
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e2:	f003 fb7f 	bl	8005be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024e6:	2340      	movs	r3, #64	; 0x40
 80024e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024f2:	2301      	movs	r3, #1
 80024f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_GPIO_Init+0xe4>)
 80024fe:	f003 fb71 	bl	8005be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	2006      	movs	r0, #6
 8002508:	f003 f8fc 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800250c:	2006      	movs	r0, #6
 800250e:	f003 f915 	bl	800573c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2105      	movs	r1, #5
 8002516:	2007      	movs	r0, #7
 8002518:	f003 f8f4 	bl	8005704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800251c:	2007      	movs	r0, #7
 800251e:	f003 f90d 	bl	800573c <HAL_NVIC_EnableIRQ>

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	48000400 	.word	0x48000400
 8002534:	10210000 	.word	0x10210000

08002538 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	80fb      	strh	r3, [r7, #6]
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002542:	2006      	movs	r0, #6
 8002544:	f003 f908 	bl	8005758 <HAL_NVIC_DisableIRQ>

	if (GPIO_Pin == GPIO_PIN_0)
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		printf(".\r\n");
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <HAL_GPIO_EXTI_Callback+0x24>)
 8002550:	f00b fc22 	bl	800dd98 <puts>
	}
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	080100dc 	.word	0x080100dc

08002560 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af02      	add	r7, sp, #8
 8002566:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8002568:	4818      	ldr	r0, [pc, #96]	; (80025cc <StartMainMenuTask+0x6c>)
 800256a:	f00b fc15 	bl	800dd98 <puts>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800256e:	2006      	movs	r0, #6
 8002570:	f003 f8e4 	bl	800573c <HAL_NVIC_EnableIRQ>





  	osDelay(250);
 8002574:	20fa      	movs	r0, #250	; 0xfa
 8002576:	f008 fbeb 	bl	800ad50 <osDelay>
    //WS2812B_vSetLED(&xWS2812B, 1, 0, 255, 0);
    //WS2812B_vSetLED(&xWS2812B, 2, 0, 0, 255);
    //WS2812B_vSetLED(&xWS2812B, 3, 0, 0, 255);


    WS2812B_vSetLED(&xWS2812B, 0, 0, 0, 255);
 800257a:	23ff      	movs	r3, #255	; 0xff
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	4812      	ldr	r0, [pc, #72]	; (80025d0 <StartMainMenuTask+0x70>)
 8002586:	f001 fbac 	bl	8003ce2 <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 5, 255, 0, 0);
    WS2812B_vSetLED(&xWS2812B, 6, 255, 0, 0);
    WS2812B_vSetLED(&xWS2812B, 7, 255, 0, 0);
		*/

    WS2812B_vSetBrightness(&xWS2812B, 1);
 800258a:	2101      	movs	r1, #1
 800258c:	4810      	ldr	r0, [pc, #64]	; (80025d0 <StartMainMenuTask+0x70>)
 800258e:	f001 fc37 	bl	8003e00 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 8002592:	480f      	ldr	r0, [pc, #60]	; (80025d0 <StartMainMenuTask+0x70>)
 8002594:	f001 fcfe 	bl	8003f94 <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <StartMainMenuTask+0x70>)
 800259a:	f001 fc13 	bl	8003dc4 <WS2812B_vResetLEDs>
  	osDelay(250);
 800259e:	20fa      	movs	r0, #250	; 0xfa
 80025a0:	f008 fbd6 	bl	800ad50 <osDelay>


    WS2812B_vSetLED(&xWS2812B, 0, 255, 0, 0);
 80025a4:	2300      	movs	r3, #0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	22ff      	movs	r2, #255	; 0xff
 80025ac:	2100      	movs	r1, #0
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <StartMainMenuTask+0x70>)
 80025b0:	f001 fb97 	bl	8003ce2 <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 6, 255, 0, 0);
    WS2812B_vSetLED(&xWS2812B, 7, 255, 0, 0);
		*/


    WS2812B_vSetBrightness(&xWS2812B, 1);
 80025b4:	2101      	movs	r1, #1
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <StartMainMenuTask+0x70>)
 80025b8:	f001 fc22 	bl	8003e00 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 80025bc:	4804      	ldr	r0, [pc, #16]	; (80025d0 <StartMainMenuTask+0x70>)
 80025be:	f001 fce9 	bl	8003f94 <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <StartMainMenuTask+0x70>)
 80025c4:	f001 fbfe 	bl	8003dc4 <WS2812B_vResetLEDs>
  	printf("Main Menu\r\n");
 80025c8:	e7ce      	b.n	8002568 <StartMainMenuTask+0x8>
 80025ca:	bf00      	nop
 80025cc:	080100e0 	.word	0x080100e0
 80025d0:	200047e0 	.word	0x200047e0

080025d4 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <StartPlayTickTask+0x4c>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <StartPlayTickTask+0x50>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ea:	2200      	movs	r2, #0
 80025ec:	f008 fc37 	bl	800ae5e <osEventFlagsWait>
 80025f0:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	dbf1      	blt.n	80025dc <StartPlayTickTask+0x8>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ec      	beq.n	80025dc <StartPlayTickTask+0x8>
		{
			while (running)
 8002602:	e008      	b.n	8002616 <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <StartPlayTickTask+0x54>)
 8002606:	f00b fbc7 	bl	800dd98 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <StartPlayTickTask+0x58>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	; (8002630 <StartPlayTickTask+0x5c>)
 8002612:	f009 fd43 	bl	800c09c <vTaskDelayUntil>
			while (running)
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <StartPlayTickTask+0x60>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 800261e:	e7dd      	b.n	80025dc <StartPlayTickTask+0x8>
 8002620:	20003704 	.word	0x20003704
 8002624:	08010318 	.word	0x08010318
 8002628:	080100ec 	.word	0x080100ec
 800262c:	0801031c 	.word	0x0801031c
 8002630:	200047dc 	.word	0x200047dc
 8002634:	200001e4 	.word	0x200001e4

08002638 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <StartPlayState+0x38>)
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <StartPlayState+0x3c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264e:	2200      	movs	r2, #0
 8002650:	f008 fc05 	bl	800ae5e <osEventFlagsWait>
 8002654:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	dbf1      	blt.n	8002640 <StartPlayState+0x8>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ec      	beq.n	8002640 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 8002666:	4804      	ldr	r0, [pc, #16]	; (8002678 <StartPlayState+0x40>)
 8002668:	f000 f83a 	bl	80026e0 <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 800266c:	e7e8      	b.n	8002640 <StartPlayState+0x8>
 800266e:	bf00      	nop
 8002670:	20003704 	.word	0x20003704
 8002674:	08010320 	.word	0x08010320
 8002678:	20004b38 	.word	0x20004b38

0800267c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800268e:	f001 fd5f 	bl	8004150 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40001000 	.word	0x40001000

080026a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a4:	b672      	cpsid	i
}
 80026a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <Error_Handler+0x8>

080026aa <Piece_ucParseBeatValue>:
	pxPiece->xCapture.ulTick = osKernelGetTickCount();
}


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3305      	adds	r3, #5
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	f102 0194 	add.w	r1, r2, #148	; 0x94
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	440a      	add	r2, r1
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	795b      	ldrb	r3, [r3, #5]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 80026ec:	e045      	b.n	800277a <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	f102 0194 	add.w	r1, r2, #148	; 0x94
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	440a      	add	r2, r1
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	4827      	ldr	r0, [pc, #156]	; (80027b0 <Piece_vParseCommand+0xd0>)
 8002714:	f00b faba 	bl	800dc8c <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	4619      	mov	r1, r3
 800271e:	4825      	ldr	r0, [pc, #148]	; (80027b4 <Piece_vParseCommand+0xd4>)
 8002720:	f00b fab4 	bl	800dc8c <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	791b      	ldrb	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <Piece_vParseCommand+0x52>
 800272c:	2b7f      	cmp	r3, #127	; 0x7f
 800272e:	d003      	beq.n	8002738 <Piece_vParseCommand+0x58>
 8002730:	e006      	b.n	8002740 <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
			break;
 8002736:	e020      	b.n	800277a <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f891 	bl	8002860 <Piece_vConfigureAll>
			break;
 800273e:	e01c      	b.n	800277a <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	791b      	ldrb	r3, [r3, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fb4b 	bl	8002de0 <bIsPlayCommand>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa5 	bl	80026aa <Piece_ucParseBeatValue>
 8002760:	4603      	mov	r3, r0
 8002762:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8002764:	7bba      	ldrb	r2, [r7, #14]
 8002766:	7b7b      	ldrb	r3, [r7, #13]
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f9d8 	bl	8002b20 <Piece_vPlayNotes>
 8002770:	e002      	b.n	8002778 <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8002772:	4811      	ldr	r0, [pc, #68]	; (80027b8 <Piece_vParseCommand+0xd8>)
 8002774:	f00b fb10 	bl	800dd98 <puts>
			}
			break;
 8002778:	bf00      	nop
	while (!endCommand)
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0b6      	beq.n	80026ee <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8002780:	480e      	ldr	r0, [pc, #56]	; (80027bc <Piece_vParseCommand+0xdc>)
 8002782:	f00b fb09 	bl	800dd98 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002786:	2100      	movs	r1, #0
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <Piece_vParseCommand+0xe0>)
 800278a:	f006 f857 	bl	800883c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 800278e:	2100      	movs	r1, #0
 8002790:	480c      	ldr	r0, [pc, #48]	; (80027c4 <Piece_vParseCommand+0xe4>)
 8002792:	f006 f853 	bl	800883c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8002796:	2100      	movs	r1, #0
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <Piece_vParseCommand+0xe8>)
 800279a:	f006 f84f 	bl	800883c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 800279e:	2100      	movs	r1, #0
 80027a0:	480a      	ldr	r0, [pc, #40]	; (80027cc <Piece_vParseCommand+0xec>)
 80027a2:	f006 f84b 	bl	800883c <HAL_TIM_PWM_Stop_IT>
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	0801013c 	.word	0x0801013c
 80027b4:	08010150 	.word	0x08010150
 80027b8:	08010160 	.word	0x08010160
 80027bc:	08010174 	.word	0x08010174
 80027c0:	2000cbdc 	.word	0x2000cbdc
 80027c4:	20004790 	.word	0x20004790
 80027c8:	2000dda8 	.word	0x2000dda8
 80027cc:	200048fc 	.word	0x200048fc

080027d0 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80027ea:	4619      	mov	r1, r3
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <Piece_vSetMovement+0x2c>)
 80027ee:	f00b fa4d 	bl	800dc8c <iprintf>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	08010188 	.word	0x08010188

08002800 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800281a:	4619      	mov	r1, r3
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <Piece_vSetBPM+0x2c>)
 800281e:	f00b fa35 	bl	800dc8c <iprintf>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	08010198 	.word	0x08010198

08002830 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800284a:	4619      	mov	r1, r3
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <Piece_vSetDynamic+0x2c>)
 800284e:	f00b fa1d 	bl	800dc8c <iprintf>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	080101a4 	.word	0x080101a4

08002860 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8002868:	481e      	ldr	r0, [pc, #120]	; (80028e4 <Piece_vConfigureAll+0x84>)
 800286a:	f00b fa95 	bl	800dd98 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ff84 	bl	80027d0 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 80028c8:	89bb      	ldrh	r3, [r7, #12]
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff97 	bl	8002800 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffaa 	bl	8002830 <Piece_vSetDynamic>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	080101b4 	.word	0x080101b4

080028e8 <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
	int count = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 80028f6:	e01e      	b.n	8002936 <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80028fe:	3394      	adds	r3, #148	; 0x94
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800290c:	3394      	adds	r3, #148	; 0x94
 800290e:	601a      	str	r2, [r3, #0]
		count++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	3b32      	subs	r3, #50	; 0x32
 800291a:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 800291c:	2232      	movs	r2, #50	; 0x32
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	4819      	ldr	r0, [pc, #100]	; (8002988 <Piece_vCaptureFragment+0xa0>)
 8002922:	f00b f9b3 	bl	800dc8c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800292c:	3394      	adds	r3, #148	; 0x94
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f008 fa28 	bl	800ad86 <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b31      	cmp	r3, #49	; 0x31
 800293a:	dcdd      	bgt.n	80028f8 <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	dd1b      	ble.n	800297a <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002948:	3394      	adds	r3, #148	; 0x94
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	441a      	add	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002956:	3394      	adds	r3, #148	; 0x94
 8002958:	601a      	str	r2, [r3, #0]

		count++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	4808      	ldr	r0, [pc, #32]	; (8002988 <Piece_vCaptureFragment+0xa0>)
 8002966:	f00b f991 	bl	800dc8c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002970:	3394      	adds	r3, #148	; 0x94
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f008 fa06 	bl	800ad86 <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	603b      	str	r3, [r7, #0]
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	080101d0 	.word	0x080101d0

0800298c <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800299a:	3398      	adds	r3, #152	; 0x98
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029a6:	339b      	adds	r3, #155	; 0x9b
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029b2:	339e      	adds	r3, #158	; 0x9e
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029be:	33a1      	adds	r3, #161	; 0xa1
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3306      	adds	r3, #6
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	f102 0194 	add.w	r1, r2, #148	; 0x94
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	440a      	add	r2, r1
 80029e8:	8812      	ldrh	r2, [r2, #0]
 80029ea:	b292      	uxth	r2, r2
 80029ec:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1c9a      	adds	r2, r3, #2
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	88db      	ldrh	r3, [r3, #6]
 80029fc:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	88db      	ldrh	r3, [r3, #6]
 8002a02:	0b9b      	lsrs	r3, r3, #14
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	88db      	ldrh	r3, [r3, #6]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a16:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8002a18:	7bbb      	ldrb	r3, [r7, #14]
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d856      	bhi.n	8002acc <Piece_vParseNoteGoal+0xfc>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <Piece_vParseNoteGoal+0x54>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a5b 	.word	0x08002a5b
 8002a2c:	08002a81 	.word	0x08002a81
 8002a30:	08002aa7 	.word	0x08002aa7
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a3a:	3398      	adds	r3, #152	; 0x98
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a46:	3399      	adds	r3, #153	; 0x99
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a52:	339a      	adds	r3, #154	; 0x9a
 8002a54:	7b7a      	ldrb	r2, [r7, #13]
 8002a56:	701a      	strb	r2, [r3, #0]
		break;
 8002a58:	e039      	b.n	8002ace <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a60:	339b      	adds	r3, #155	; 0x9b
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a6c:	339c      	adds	r3, #156	; 0x9c
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a78:	339d      	adds	r3, #157	; 0x9d
 8002a7a:	7b7a      	ldrb	r2, [r7, #13]
 8002a7c:	701a      	strb	r2, [r3, #0]
		break;
 8002a7e:	e026      	b.n	8002ace <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a86:	339e      	adds	r3, #158	; 0x9e
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a92:	339f      	adds	r3, #159	; 0x9f
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a9e:	33a0      	adds	r3, #160	; 0xa0
 8002aa0:	7b7a      	ldrb	r2, [r7, #13]
 8002aa2:	701a      	strb	r2, [r3, #0]
		break;
 8002aa4:	e013      	b.n	8002ace <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002aac:	33a1      	adds	r3, #161	; 0xa1
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ab8:	33a2      	adds	r3, #162	; 0xa2
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ac4:	33a3      	adds	r3, #163	; 0xa3
 8002ac6:	7b7a      	ldrb	r2, [r7, #13]
 8002ac8:	701a      	strb	r2, [r3, #0]
		break;
 8002aca:	e000      	b.n	8002ace <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 8002acc:	bf00      	nop
	}
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop

08002adc <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d901      	bls.n	8002af2 <Piece_vParseGoal+0x16>
 8002aee:	2304      	movs	r3, #4
 8002af0:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	81fb      	strh	r3, [r7, #14]
 8002af6:	e008      	b.n	8002b0a <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff69 	bl	80029d0 <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 8002afe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	81fb      	strh	r3, [r7, #14]
 8002b0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	dbf1      	blt.n	8002af8 <Piece_vParseGoal+0x1c>
	}
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 8002b30:	78bb      	ldrb	r3, [r7, #2]
 8002b32:	4619      	mov	r1, r3
 8002b34:	48a0      	ldr	r0, [pc, #640]	; (8002db8 <Piece_vPlayNotes+0x298>)
 8002b36:	f00b f8a9 	bl	800dc8c <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	489f      	ldr	r0, [pc, #636]	; (8002dbc <Piece_vPlayNotes+0x29c>)
 8002b40:	f00b f8a4 	bl	800dc8c <iprintf>

	Piece_vResetGoal(pxPiece);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff21 	bl	800298c <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 8002b4a:	78bb      	ldrb	r3, [r7, #2]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffc4 	bl	8002adc <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f9d1 	bl	8002efc <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d820      	bhi.n	8002ba2 <Piece_vPlayNotes+0x82>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <Piece_vPlayNotes+0x48>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b7d 	.word	0x08002b7d
 8002b6c:	08002b85 	.word	0x08002b85
 8002b70:	08002b8b 	.word	0x08002b8b
 8002b74:	08002b93 	.word	0x08002b93
 8002b78:	08002b9b 	.word	0x08002b9b
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 8002b7c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b80:	617b      	str	r3, [r7, #20]
		break;
 8002b82:	e012      	b.n	8002baa <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8002b84:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <Piece_vPlayNotes+0x2a0>)
 8002b86:	617b      	str	r3, [r7, #20]
		break;
 8002b88:	e00f      	b.n	8002baa <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 8002b8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b8e:	617b      	str	r3, [r7, #20]
		break;
 8002b90:	e00b      	b.n	8002baa <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8002b92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b96:	617b      	str	r3, [r7, #20]
		break;
 8002b98:	e007      	b.n	8002baa <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 8002b9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b9e:	617b      	str	r3, [r7, #20]
		break;
 8002ba0:	e003      	b.n	8002baa <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8002ba2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ba6:	617b      	str	r3, [r7, #20]
		break;
 8002ba8:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002bb0:	ee07 3a90 	vmov	s15, r3
 8002bb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb8:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002dc4 <Piece_vPlayNotes+0x2a4>
 8002bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc0:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002dc8 <Piece_vPlayNotes+0x2a8>
 8002bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc8:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	2b0b      	cmp	r3, #11
 8002bd0:	f200 80d6 	bhi.w	8002d80 <Piece_vPlayNotes+0x260>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <Piece_vPlayNotes+0xbc>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002c0d 	.word	0x08002c0d
 8002be0:	08002c2d 	.word	0x08002c2d
 8002be4:	08002c4d 	.word	0x08002c4d
 8002be8:	08002c6d 	.word	0x08002c6d
 8002bec:	08002c8d 	.word	0x08002c8d
 8002bf0:	08002ca9 	.word	0x08002ca9
 8002bf4:	08002cc1 	.word	0x08002cc1
 8002bf8:	08002ce1 	.word	0x08002ce1
 8002bfc:	08002d01 	.word	0x08002d01
 8002c00:	08002d21 	.word	0x08002d21
 8002c04:	08002d41 	.word	0x08002d41
 8002c08:	08002d61 	.word	0x08002d61
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002dcc <Piece_vPlayNotes+0x2ac>
 8002c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c24:	ee17 3a90 	vmov	r3, s15
 8002c28:	613b      	str	r3, [r7, #16]
		break;
 8002c2a:	e0b5      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 8002c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c30:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002c34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c44:	ee17 3a90 	vmov	r3, s15
 8002c48:	613b      	str	r3, [r7, #16]
		break;
 8002c4a:	e0a5      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 8002c4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c50:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c58:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c64:	ee17 3a90 	vmov	r3, s15
 8002c68:	613b      	str	r3, [r7, #16]
		break;
 8002c6a:	e095      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 8002c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c70:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c78:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c84:	ee17 3a90 	vmov	r3, s15
 8002c88:	613b      	str	r3, [r7, #16]
		break;
 8002c8a:	e085      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 8002c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c90:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ca0:	ee17 3a90 	vmov	r3, s15
 8002ca4:	613b      	str	r3, [r7, #16]
		break;
 8002ca6:	e077      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002ca8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cac:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb8:	ee17 3a90 	vmov	r3, s15
 8002cbc:	613b      	str	r3, [r7, #16]
		break;
 8002cbe:	e06b      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 8002cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd8:	ee17 3a90 	vmov	r3, s15
 8002cdc:	613b      	str	r3, [r7, #16]
		break;
 8002cde:	e05b      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 8002ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002ce8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf8:	ee17 3a90 	vmov	r3, s15
 8002cfc:	613b      	str	r3, [r7, #16]
		break;
 8002cfe:	e04b      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 8002d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d04:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002d08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d18:	ee17 3a90 	vmov	r3, s15
 8002d1c:	613b      	str	r3, [r7, #16]
		break;
 8002d1e:	e03b      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d24:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002dd0 <Piece_vPlayNotes+0x2b0>
 8002d28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d38:	ee17 3a90 	vmov	r3, s15
 8002d3c:	613b      	str	r3, [r7, #16]
		break;
 8002d3e:	e02b      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d44:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002dd4 <Piece_vPlayNotes+0x2b4>
 8002d48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d58:	ee17 3a90 	vmov	r3, s15
 8002d5c:	613b      	str	r3, [r7, #16]
		break;
 8002d5e:	e01b      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002dd8 <Piece_vPlayNotes+0x2b8>
 8002d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d78:	ee17 3a90 	vmov	r3, s15
 8002d7c:	613b      	str	r3, [r7, #16]
		break;
 8002d7e:	e00b      	b.n	8002d98 <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002d80:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d84:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d90:	ee17 3a90 	vmov	r3, s15
 8002d94:	613b      	str	r3, [r7, #16]
		break;
 8002d96:	bf00      	nop
	}


	if (ucNumNotes == 0)
 8002d98:	78bb      	ldrb	r3, [r7, #2]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 8002d9e:	480f      	ldr	r0, [pc, #60]	; (8002ddc <Piece_vPlayNotes+0x2bc>)
 8002da0:	f00a fffa 	bl	800dd98 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fd9d 	bl	80028e8 <Piece_vCaptureFragment>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	080101e8 	.word	0x080101e8
 8002dbc:	080101fc 	.word	0x080101fc
 8002dc0:	3f2aaaab 	.word	0x3f2aaaab
 8002dc4:	42700000 	.word	0x42700000
 8002dc8:	447a0000 	.word	0x447a0000
 8002dcc:	42000000 	.word	0x42000000
 8002dd0:	3d800000 	.word	0x3d800000
 8002dd4:	3d000000 	.word	0x3d000000
 8002dd8:	3c800000 	.word	0x3c800000
 8002ddc:	08010210 	.word	0x08010210

08002de0 <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	09db      	lsrs	r3, r3, #7
 8002df2:	b2db      	uxtb	r3, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	460a      	mov	r2, r1
 8002e0a:	71fb      	strb	r3, [r7, #7]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d816      	bhi.n	8002e44 <Piece_usGetPitchTick+0x44>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <Piece_usGetPitchTick+0x1c>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e33 	.word	0x08002e33
 8002e24:	08002e39 	.word	0x08002e39
 8002e28:	08002e3f 	.word	0x08002e3f
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
		break;
 8002e30:	e00b      	b.n	8002e4a <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 8002e32:	230a      	movs	r3, #10
 8002e34:	73fb      	strb	r3, [r7, #15]
		break;
 8002e36:	e008      	b.n	8002e4a <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 8002e38:	2314      	movs	r3, #20
 8002e3a:	73fb      	strb	r3, [r7, #15]
		break;
 8002e3c:	e005      	b.n	8002e4a <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 8002e3e:	231e      	movs	r3, #30
 8002e40:	73fb      	strb	r3, [r7, #15]
		break;
 8002e42:	e002      	b.n	8002e4a <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
		break;
 8002e48:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	79bb      	ldrb	r3, [r7, #6]
 8002e4e:	4413      	add	r3, r2
 8002e50:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b47      	cmp	r3, #71	; 0x47
 8002e56:	bf28      	it	cs
 8002e58:	2347      	movcs	r3, #71	; 0x47
 8002e5a:	73fb      	strb	r3, [r7, #15]

	return pusNoteToPitchMap[ucPitchTickIndex];
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <Piece_usGetPitchTick+0x70>)
 8002e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	20000004 	.word	0x20000004

08002e74 <Piece_ucGetFingeringIndex>:



uint8_t Piece_ucGetFingeringIndex(uint8_t ucString, uint8_t ucOffset)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	71fb      	strb	r3, [r7, #7]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71bb      	strb	r3, [r7, #6]
	uint8_t ucFingeringIndex;

	// [!] assert ucOffset [0, 29]

	switch (ucString)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d82b      	bhi.n	8002ee2 <Piece_ucGetFingeringIndex+0x6e>
 8002e8a:	a201      	add	r2, pc, #4	; (adr r2, 8002e90 <Piece_ucGetFingeringIndex+0x1c>)
 8002e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002eb1 	.word	0x08002eb1
 8002e98:	08002ec1 	.word	0x08002ec1
 8002e9c:	08002ed3 	.word	0x08002ed3
	{
	case G_STRING:
		ucFingeringIndex = G_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucG;
 8002ea0:	79bb      	ldrb	r3, [r7, #6]
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <Piece_ucGetFingeringIndex+0x84>)
 8002ea4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8002ea8:	f1c3 031d 	rsb	r3, r3, #29
 8002eac:	73fb      	strb	r3, [r7, #15]
		break;
 8002eae:	e01b      	b.n	8002ee8 <Piece_ucGetFingeringIndex+0x74>
	case D_STRING:
		ucFingeringIndex = D_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucD;
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <Piece_ucGetFingeringIndex+0x84>)
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	331e      	adds	r3, #30
 8002ebc:	73fb      	strb	r3, [r7, #15]
		break;
 8002ebe:	e013      	b.n	8002ee8 <Piece_ucGetFingeringIndex+0x74>
	case A_STRING:
		ucFingeringIndex = A_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucA;
 8002ec0:	79bb      	ldrb	r3, [r7, #6]
 8002ec2:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <Piece_ucGetFingeringIndex+0x84>)
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	789b      	ldrb	r3, [r3, #2]
 8002eca:	f1c3 0359 	rsb	r3, r3, #89	; 0x59
 8002ece:	73fb      	strb	r3, [r7, #15]
		break;
 8002ed0:	e00a      	b.n	8002ee8 <Piece_ucGetFingeringIndex+0x74>
	case E_STRING:
		ucFingeringIndex = E_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucE;
 8002ed2:	79bb      	ldrb	r3, [r7, #6]
 8002ed4:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <Piece_ucGetFingeringIndex+0x84>)
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	78db      	ldrb	r3, [r3, #3]
 8002edc:	335a      	adds	r3, #90	; 0x5a
 8002ede:	73fb      	strb	r3, [r7, #15]
		break;
 8002ee0:	e002      	b.n	8002ee8 <Piece_ucGetFingeringIndex+0x74>
	default:
		// [!] error light
		ucFingeringIndex = G_STRING_FINGER_OFFSET;
 8002ee2:	231d      	movs	r3, #29
 8002ee4:	73fb      	strb	r3, [r7, #15]
		break;
 8002ee6:	bf00      	nop
	}

	return ucFingeringIndex;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000094 	.word	0x20000094

08002efc <Piece_Debug_vPrintGoal>:

extern WS2812BHandle_t xWS2812B;


void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 8002f04:	4885      	ldr	r0, [pc, #532]	; (800311c <Piece_Debug_vPrintGoal+0x220>)
 8002f06:	f00a ff47 	bl	800dd98 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f10:	3398      	adds	r3, #152	; 0x98
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d04b      	beq.n	8002fb0 <Piece_Debug_vPrintGoal+0xb4>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f1e:	339a      	adds	r3, #154	; 0x9a
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	461c      	mov	r4, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f2a:	339a      	adds	r3, #154	; 0x9a
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7ff ff65 	bl	8002e00 <Piece_usGetPitchTick>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4878      	ldr	r0, [pc, #480]	; (8003120 <Piece_Debug_vPrintGoal+0x224>)
 8002f3e:	f00a fea5 	bl	800dc8c <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f48:	339a      	adds	r3, #154	; 0x9a
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7ff ff56 	bl	8002e00 <Piece_usGetPitchTick>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b72      	ldr	r3, [pc, #456]	; (8003124 <Piece_Debug_vPrintGoal+0x228>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 8002f5e:	4b71      	ldr	r3, [pc, #452]	; (8003124 <Piece_Debug_vPrintGoal+0x228>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <Piece_Debug_vPrintGoal+0x228>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0852      	lsrs	r2, r2, #1
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	486d      	ldr	r0, [pc, #436]	; (8003124 <Piece_Debug_vPrintGoal+0x228>)
 8002f70:	f005 fb18 	bl	80085a4 <HAL_TIM_PWM_Start_IT>


		uint8_t ucGFingeringOffset = Piece_ucGetFingeringIndex(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002f7a:	339a      	adds	r3, #154	; 0x9a
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff ff77 	bl	8002e74 <Piece_ucGetFingeringIndex>
 8002f86:	4603      	mov	r3, r0
 8002f88:	73fb      	strb	r3, [r7, #15]
		WS2812B_vSetLED(&xWS2812B, ucGFingeringOffset, 255, 0, 0);
 8002f8a:	7bf9      	ldrb	r1, [r7, #15]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	22ff      	movs	r2, #255	; 0xff
 8002f94:	4864      	ldr	r0, [pc, #400]	; (8003128 <Piece_Debug_vPrintGoal+0x22c>)
 8002f96:	f000 fea4 	bl	8003ce2 <WS2812B_vSetLED>
    WS2812B_vSetBrightness(&xWS2812B, 1);
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4862      	ldr	r0, [pc, #392]	; (8003128 <Piece_Debug_vPrintGoal+0x22c>)
 8002f9e:	f000 ff2f 	bl	8003e00 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 8002fa2:	4861      	ldr	r0, [pc, #388]	; (8003128 <Piece_Debug_vPrintGoal+0x22c>)
 8002fa4:	f000 fff6 	bl	8003f94 <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 8002fa8:	485f      	ldr	r0, [pc, #380]	; (8003128 <Piece_Debug_vPrintGoal+0x22c>)
 8002faa:	f000 ff0b 	bl	8003dc4 <WS2812B_vResetLEDs>
 8002fae:	e003      	b.n	8002fb8 <Piece_Debug_vPrintGoal+0xbc>

	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	485c      	ldr	r0, [pc, #368]	; (8003124 <Piece_Debug_vPrintGoal+0x228>)
 8002fb4:	f005 fc42 	bl	800883c <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fbe:	339b      	adds	r3, #155	; 0x9b
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d02e      	beq.n	8003024 <Piece_Debug_vPrintGoal+0x128>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fcc:	339d      	adds	r3, #157	; 0x9d
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fd8:	339d      	adds	r3, #157	; 0x9d
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7ff ff0e 	bl	8002e00 <Piece_usGetPitchTick>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4850      	ldr	r0, [pc, #320]	; (800312c <Piece_Debug_vPrintGoal+0x230>)
 8002fec:	f00a fe4e 	bl	800dc8c <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ff6:	339d      	adds	r3, #157	; 0x9d
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7ff feff 	bl	8002e00 <Piece_usGetPitchTick>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	4b4a      	ldr	r3, [pc, #296]	; (8003130 <Piece_Debug_vPrintGoal+0x234>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 800300c:	4b48      	ldr	r3, [pc, #288]	; (8003130 <Piece_Debug_vPrintGoal+0x234>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003012:	4b47      	ldr	r3, [pc, #284]	; (8003130 <Piece_Debug_vPrintGoal+0x234>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0852      	lsrs	r2, r2, #1
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 800301a:	2100      	movs	r1, #0
 800301c:	4844      	ldr	r0, [pc, #272]	; (8003130 <Piece_Debug_vPrintGoal+0x234>)
 800301e:	f005 fac1 	bl	80085a4 <HAL_TIM_PWM_Start_IT>
 8003022:	e003      	b.n	800302c <Piece_Debug_vPrintGoal+0x130>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8003024:	2100      	movs	r1, #0
 8003026:	4842      	ldr	r0, [pc, #264]	; (8003130 <Piece_Debug_vPrintGoal+0x234>)
 8003028:	f005 fc08 	bl	800883c <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003032:	339e      	adds	r3, #158	; 0x9e
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d02e      	beq.n	8003098 <Piece_Debug_vPrintGoal+0x19c>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003040:	33a0      	adds	r3, #160	; 0xa0
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461c      	mov	r4, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800304c:	33a0      	adds	r3, #160	; 0xa0
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	2002      	movs	r0, #2
 8003054:	f7ff fed4 	bl	8002e00 <Piece_usGetPitchTick>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	4621      	mov	r1, r4
 800305e:	4835      	ldr	r0, [pc, #212]	; (8003134 <Piece_Debug_vPrintGoal+0x238>)
 8003060:	f00a fe14 	bl	800dc8c <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800306a:	33a0      	adds	r3, #160	; 0xa0
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	2002      	movs	r0, #2
 8003072:	f7ff fec5 	bl	8002e00 <Piece_usGetPitchTick>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <Piece_Debug_vPrintGoal+0x23c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 8003080:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <Piece_Debug_vPrintGoal+0x23c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003086:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <Piece_Debug_vPrintGoal+0x23c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0852      	lsrs	r2, r2, #1
 800308c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800308e:	2100      	movs	r1, #0
 8003090:	4829      	ldr	r0, [pc, #164]	; (8003138 <Piece_Debug_vPrintGoal+0x23c>)
 8003092:	f005 fa87 	bl	80085a4 <HAL_TIM_PWM_Start_IT>
 8003096:	e003      	b.n	80030a0 <Piece_Debug_vPrintGoal+0x1a4>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8003098:	2100      	movs	r1, #0
 800309a:	4827      	ldr	r0, [pc, #156]	; (8003138 <Piece_Debug_vPrintGoal+0x23c>)
 800309c:	f005 fbce 	bl	800883c <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030a6:	33a1      	adds	r3, #161	; 0xa1
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d02e      	beq.n	800310c <Piece_Debug_vPrintGoal+0x210>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030b4:	33a3      	adds	r3, #163	; 0xa3
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461c      	mov	r4, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030c0:	33a3      	adds	r3, #163	; 0xa3
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	2003      	movs	r0, #3
 80030c8:	f7ff fe9a 	bl	8002e00 <Piece_usGetPitchTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	4621      	mov	r1, r4
 80030d2:	481a      	ldr	r0, [pc, #104]	; (800313c <Piece_Debug_vPrintGoal+0x240>)
 80030d4:	f00a fdda 	bl	800dc8c <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030de:	33a3      	adds	r3, #163	; 0xa3
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	4619      	mov	r1, r3
 80030e4:	2003      	movs	r0, #3
 80030e6:	f7ff fe8b 	bl	8002e00 <Piece_usGetPitchTick>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b14      	ldr	r3, [pc, #80]	; (8003140 <Piece_Debug_vPrintGoal+0x244>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <Piece_Debug_vPrintGoal+0x244>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <Piece_Debug_vPrintGoal+0x244>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8003102:	2100      	movs	r1, #0
 8003104:	480e      	ldr	r0, [pc, #56]	; (8003140 <Piece_Debug_vPrintGoal+0x244>)
 8003106:	f005 fa4d 	bl	80085a4 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 800310a:	e003      	b.n	8003114 <Piece_Debug_vPrintGoal+0x218>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 800310c:	2100      	movs	r1, #0
 800310e:	480c      	ldr	r0, [pc, #48]	; (8003140 <Piece_Debug_vPrintGoal+0x244>)
 8003110:	f005 fb94 	bl	800883c <HAL_TIM_PWM_Stop_IT>
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	08010228 	.word	0x08010228
 8003120:	08010230 	.word	0x08010230
 8003124:	2000cbdc 	.word	0x2000cbdc
 8003128:	200047e0 	.word	0x200047e0
 800312c:	08010240 	.word	0x08010240
 8003130:	20004790 	.word	0x20004790
 8003134:	08010250 	.word	0x08010250
 8003138:	2000dda8 	.word	0x2000dda8
 800313c:	08010260 	.word	0x08010260
 8003140:	200048fc 	.word	0x200048fc

08003144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_MspInit+0x4c>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314e:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_MspInit+0x4c>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6613      	str	r3, [r2, #96]	; 0x60
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_MspInit+0x4c>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_MspInit+0x4c>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <HAL_MspInit+0x4c>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6593      	str	r3, [r2, #88]	; 0x58
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_MspInit+0x4c>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800317a:	2200      	movs	r2, #0
 800317c:	210f      	movs	r1, #15
 800317e:	f06f 0001 	mvn.w	r0, #1
 8003182:	f002 fabf 	bl	8005704 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000

08003194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <HAL_ADC_MspInit+0xc8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d14e      	bne.n	8003254 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_ADC_MspInit+0xcc>)
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_ADC_MspInit+0xcc>)
 80031bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_ADC_MspInit+0xcc>)
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_ADC_MspInit+0xcc>)
 80031d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d2:	4a23      	ldr	r2, [pc, #140]	; (8003260 <HAL_ADC_MspInit+0xcc>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_ADC_MspInit+0xcc>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031e6:	230f      	movs	r3, #15
 80031e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031ea:	230b      	movs	r3, #11
 80031ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	481a      	ldr	r0, [pc, #104]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 80031fa:	f002 fcf3 	bl	8005be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003200:	4a1a      	ldr	r2, [pc, #104]	; (800326c <HAL_ADC_MspInit+0xd8>)
 8003202:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800320a:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 800321e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003222:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800322a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 800322e:	2220      	movs	r2, #32
 8003230:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003238:	480b      	ldr	r0, [pc, #44]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 800323a:	f002 fa9b 	bl	8005774 <HAL_DMA_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8003244:	f7ff fa2c 	bl	80026a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 800324c:	64da      	str	r2, [r3, #76]	; 0x4c
 800324e:	4a06      	ldr	r2, [pc, #24]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	50040000 	.word	0x50040000
 8003260:	40021000 	.word	0x40021000
 8003264:	48000800 	.word	0x48000800
 8003268:	20004aa8 	.word	0x20004aa8
 800326c:	40020008 	.word	0x40020008

08003270 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_I2C_MspInit+0x7c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d128      	bne.n	80032e4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <HAL_I2C_MspInit+0x80>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <HAL_I2C_MspInit+0x80>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_I2C_MspInit+0x80>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80032aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032b0:	2312      	movs	r3, #18
 80032b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b4:	2301      	movs	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b8:	2303      	movs	r3, #3
 80032ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032bc:	2304      	movs	r3, #4
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4619      	mov	r1, r3
 80032c6:	480b      	ldr	r0, [pc, #44]	; (80032f4 <HAL_I2C_MspInit+0x84>)
 80032c8:	f002 fc8c 	bl	8005be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_I2C_MspInit+0x80>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <HAL_I2C_MspInit+0x80>)
 80032d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d6:	6593      	str	r3, [r2, #88]	; 0x58
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_I2C_MspInit+0x80>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40005400 	.word	0x40005400
 80032f0:	40021000 	.word	0x40021000
 80032f4:	48000400 	.word	0x48000400

080032f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_SPI_MspInit+0xb4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d144      	bne.n	80033a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 8003320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003324:	6613      	str	r3, [r2, #96]	; 0x60
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_SPI_MspInit+0xb8>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003362:	2320      	movs	r3, #32
 8003364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003372:	2305      	movs	r3, #5
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003380:	f002 fc30 	bl	8005be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003384:	2330      	movs	r3, #48	; 0x30
 8003386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003390:	2303      	movs	r3, #3
 8003392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003394:	2305      	movs	r3, #5
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	4619      	mov	r1, r3
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <HAL_SPI_MspInit+0xbc>)
 80033a0:	f002 fc20 	bl	8005be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033a4:	bf00      	nop
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40013000 	.word	0x40013000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	48000400 	.word	0x48000400

080033b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a80      	ldr	r2, [pc, #512]	; (80035c8 <HAL_TIM_PWM_MspInit+0x210>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10c      	bne.n	80033e4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ca:	4b80      	ldr	r3, [pc, #512]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80033cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ce:	4a7f      	ldr	r2, [pc, #508]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80033d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033d4:	6613      	str	r3, [r2, #96]	; 0x60
 80033d6:	4b7d      	ldr	r3, [pc, #500]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80033d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80033e2:	e0ed      	b.n	80035c0 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM3)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a79      	ldr	r2, [pc, #484]	; (80035d0 <HAL_TIM_PWM_MspInit+0x218>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	f040 809a 	bne.w	8003524 <HAL_TIM_PWM_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033f0:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80033f6:	f043 0302 	orr.w	r3, r3, #2
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
 80033fc:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8003408:	4b72      	ldr	r3, [pc, #456]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 800340a:	4a73      	ldr	r2, [pc, #460]	; (80035d8 <HAL_TIM_PWM_MspInit+0x220>)
 800340c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 800340e:	4b71      	ldr	r3, [pc, #452]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003410:	2205      	movs	r2, #5
 8003412:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003414:	4b6f      	ldr	r3, [pc, #444]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003416:	2210      	movs	r2, #16
 8003418:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800341a:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 800341c:	2200      	movs	r2, #0
 800341e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8003420:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003426:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800342e:	4b69      	ldr	r3, [pc, #420]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003434:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003438:	2200      	movs	r2, #0
 800343a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800343c:	4b65      	ldr	r3, [pc, #404]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 800343e:	2200      	movs	r2, #0
 8003440:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003442:	4864      	ldr	r0, [pc, #400]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003444:	f002 f996 	bl	8005774 <HAL_DMA_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_TIM_PWM_MspInit+0x9a>
      Error_Handler();
 800344e:	f7ff f927 	bl	80026a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a5f      	ldr	r2, [pc, #380]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003456:	625a      	str	r2, [r3, #36]	; 0x24
 8003458:	4a5e      	ldr	r2, [pc, #376]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003462:	639a      	str	r2, [r3, #56]	; 0x38
 8003464:	4a5b      	ldr	r2, [pc, #364]	; (80035d4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800346a:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 800346c:	4a5c      	ldr	r2, [pc, #368]	; (80035e0 <HAL_TIM_PWM_MspInit+0x228>)
 800346e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 8003470:	4b5a      	ldr	r3, [pc, #360]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 8003472:	2205      	movs	r2, #5
 8003474:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003476:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 8003478:	2210      	movs	r2, #16
 800347a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800347c:	4b57      	ldr	r3, [pc, #348]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003482:	4b56      	ldr	r3, [pc, #344]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 8003484:	2280      	movs	r2, #128	; 0x80
 8003486:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003488:	4b54      	ldr	r3, [pc, #336]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 800348a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800348e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003490:	4b52      	ldr	r3, [pc, #328]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 8003492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003496:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8003498:	4b50      	ldr	r3, [pc, #320]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800349e:	4b4f      	ldr	r3, [pc, #316]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80034a4:	484d      	ldr	r0, [pc, #308]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 80034a6:	f002 f965 	bl	8005774 <HAL_DMA_Init>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_TIM_PWM_MspInit+0xfc>
      Error_Handler();
 80034b0:	f7ff f8f6 	bl	80026a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a49      	ldr	r2, [pc, #292]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034ba:	4a48      	ldr	r2, [pc, #288]	; (80035dc <HAL_TIM_PWM_MspInit+0x224>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80034c0:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034c2:	4a49      	ldr	r2, [pc, #292]	; (80035e8 <HAL_TIM_PWM_MspInit+0x230>)
 80034c4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034c8:	2205      	movs	r2, #5
 80034ca:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034cc:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034ce:	2210      	movs	r2, #16
 80034d0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d2:	4b44      	ldr	r3, [pc, #272]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80034d8:	4b42      	ldr	r3, [pc, #264]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034de:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ec:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80034f4:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80034fa:	483a      	ldr	r0, [pc, #232]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 80034fc:	f002 f93a 	bl	8005774 <HAL_DMA_Init>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_MspInit+0x152>
      Error_Handler();
 8003506:	f7ff f8cb 	bl	80026a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a35      	ldr	r2, [pc, #212]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
 8003510:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a32      	ldr	r2, [pc, #200]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 800351a:	621a      	str	r2, [r3, #32]
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_TIM_PWM_MspInit+0x22c>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003522:	e04d      	b.n	80035c0 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM8)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a30      	ldr	r2, [pc, #192]	; (80035ec <HAL_TIM_PWM_MspInit+0x234>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d137      	bne.n	800359e <HAL_TIM_PWM_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800352e:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	4a26      	ldr	r2, [pc, #152]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 8003534:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003538:	6613      	str	r3, [r2, #96]	; 0x60
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Channel7;
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_TIM_PWM_MspInit+0x23c>)
 800354a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_7;
 800354c:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 800354e:	2207      	movs	r2, #7
 8003550:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003554:	2210      	movs	r2, #16
 8003556:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003564:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800356a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 800356e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003572:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8003574:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 800357c:	2200      	movs	r2, #0
 800357e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8003580:	481b      	ldr	r0, [pc, #108]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003582:	f002 f8f7 	bl	8005774 <HAL_DMA_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_TIM_PWM_MspInit+0x1d8>
      Error_Handler();
 800358c:	f7ff f888 	bl	80026a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
 8003596:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_TIM_PWM_MspInit+0x238>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800359c:	e010      	b.n	80035c0 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM15)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_TIM_PWM_MspInit+0x240>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d10b      	bne.n	80035c0 <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80035a8:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80035aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ac:	4a07      	ldr	r2, [pc, #28]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80035ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b2:	6613      	str	r3, [r2, #96]	; 0x60
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_TIM_PWM_MspInit+0x214>)
 80035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
}
 80035c0:	bf00      	nop
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	20004af0 	.word	0x20004af0
 80035d8:	4002006c 	.word	0x4002006c
 80035dc:	20004948 	.word	0x20004948
 80035e0:	4002001c 	.word	0x4002001c
 80035e4:	2000cc2c 	.word	0x2000cc2c
 80035e8:	40020030 	.word	0x40020030
 80035ec:	40013400 	.word	0x40013400
 80035f0:	2000366c 	.word	0x2000366c
 80035f4:	40020480 	.word	0x40020480
 80035f8:	40014000 	.word	0x40014000

080035fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_TIM_Base_MspInit+0x5c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d10c      	bne.n	8003628 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_TIM_Base_MspInit+0x60>)
 8003610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003612:	4a12      	ldr	r2, [pc, #72]	; (800365c <HAL_TIM_Base_MspInit+0x60>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	6613      	str	r3, [r2, #96]	; 0x60
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_TIM_Base_MspInit+0x60>)
 800361c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003626:	e010      	b.n	800364a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <HAL_TIM_Base_MspInit+0x64>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10b      	bne.n	800364a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_TIM_Base_MspInit+0x60>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <HAL_TIM_Base_MspInit+0x60>)
 8003638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363c:	6613      	str	r3, [r2, #96]	; 0x60
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <HAL_TIM_Base_MspInit+0x60>)
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40014400 	.word	0x40014400
 800365c:	40021000 	.word	0x40021000
 8003660:	40014800 	.word	0x40014800

08003664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a76      	ldr	r2, [pc, #472]	; (800385c <HAL_TIM_MspPostInit+0x1f8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d11e      	bne.n	80036c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003686:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	4a75      	ldr	r2, [pc, #468]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003692:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800369e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b8:	4619      	mov	r1, r3
 80036ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036be:	f002 fa91 	bl	8005be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80036c2:	e0c7      	b.n	8003854 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM3)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a66      	ldr	r2, [pc, #408]	; (8003864 <HAL_TIM_MspPostInit+0x200>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d138      	bne.n	8003740 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ce:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	4a63      	ldr	r2, [pc, #396]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036e6:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	4a5d      	ldr	r2, [pc, #372]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f2:	4b5b      	ldr	r3, [pc, #364]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	61bb      	str	r3, [r7, #24]
 80036fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036fe:	2303      	movs	r3, #3
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800370e:	2302      	movs	r3, #2
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003716:	4619      	mov	r1, r3
 8003718:	4853      	ldr	r0, [pc, #332]	; (8003868 <HAL_TIM_MspPostInit+0x204>)
 800371a:	f002 fa63 	bl	8005be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800371e:	2340      	movs	r3, #64	; 0x40
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800372e:	2302      	movs	r3, #2
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003736:	4619      	mov	r1, r3
 8003738:	484c      	ldr	r0, [pc, #304]	; (800386c <HAL_TIM_MspPostInit+0x208>)
 800373a:	f002 fa53 	bl	8005be4 <HAL_GPIO_Init>
}
 800373e:	e089      	b.n	8003854 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM8)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a4a      	ldr	r2, [pc, #296]	; (8003870 <HAL_TIM_MspPostInit+0x20c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d11c      	bne.n	8003784 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800374a:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	4a44      	ldr	r2, [pc, #272]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003750:	f043 0304 	orr.w	r3, r3, #4
 8003754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003756:	4b42      	ldr	r3, [pc, #264]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2300      	movs	r3, #0
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003772:	2303      	movs	r3, #3
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800377a:	4619      	mov	r1, r3
 800377c:	483b      	ldr	r0, [pc, #236]	; (800386c <HAL_TIM_MspPostInit+0x208>)
 800377e:	f002 fa31 	bl	8005be4 <HAL_GPIO_Init>
}
 8003782:	e067      	b.n	8003854 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM15)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3a      	ldr	r2, [pc, #232]	; (8003874 <HAL_TIM_MspPostInit+0x210>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d11d      	bne.n	80037ca <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	4a33      	ldr	r2, [pc, #204]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80037a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b4:	2300      	movs	r3, #0
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80037b8:	230e      	movs	r3, #14
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c0:	4619      	mov	r1, r3
 80037c2:	4829      	ldr	r0, [pc, #164]	; (8003868 <HAL_TIM_MspPostInit+0x204>)
 80037c4:	f002 fa0e 	bl	8005be4 <HAL_GPIO_Init>
}
 80037c8:	e044      	b.n	8003854 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM16)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2a      	ldr	r2, [pc, #168]	; (8003878 <HAL_TIM_MspPostInit+0x214>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d11d      	bne.n	8003810 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	4a21      	ldr	r2, [pc, #132]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037ec:	2340      	movs	r3, #64	; 0x40
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f0:	2302      	movs	r3, #2
 80037f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2300      	movs	r3, #0
 80037fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80037fc:	230e      	movs	r3, #14
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003804:	4619      	mov	r1, r3
 8003806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800380a:	f002 f9eb 	bl	8005be4 <HAL_GPIO_Init>
}
 800380e:	e021      	b.n	8003854 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM17)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_TIM_MspPostInit+0x218>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d11c      	bne.n	8003854 <HAL_TIM_MspPostInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_TIM_MspPostInit+0x1fc>)
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2300      	movs	r3, #0
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383e:	2300      	movs	r3, #0
 8003840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8003842:	230e      	movs	r3, #14
 8003844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384a:	4619      	mov	r1, r3
 800384c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003850:	f002 f9c8 	bl	8005be4 <HAL_GPIO_Init>
}
 8003854:	bf00      	nop
 8003856:	3738      	adds	r7, #56	; 0x38
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40021000 	.word	0x40021000
 8003864:	40000400 	.word	0x40000400
 8003868:	48000400 	.word	0x48000400
 800386c:	48000800 	.word	0x48000800
 8003870:	40013400 	.word	0x40013400
 8003874:	40014000 	.word	0x40014000
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800

08003880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	; (80038fc <HAL_UART_MspInit+0x7c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d128      	bne.n	80038f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <HAL_UART_MspInit+0x80>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_UART_MspInit+0x80>)
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <HAL_UART_MspInit+0x80>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_UART_MspInit+0x80>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_UART_MspInit+0x80>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_UART_MspInit+0x80>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038d2:	230c      	movs	r3, #12
 80038d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038de:	2303      	movs	r3, #3
 80038e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038e2:	2307      	movs	r3, #7
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e6:	f107 0314 	add.w	r3, r7, #20
 80038ea:	4619      	mov	r1, r3
 80038ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f0:	f002 f978 	bl	8005be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038f4:	bf00      	nop
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40004400 	.word	0x40004400
 8003900:	40021000 	.word	0x40021000

08003904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003914:	2200      	movs	r2, #0
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	2036      	movs	r0, #54	; 0x36
 800391a:	f001 fef3 	bl	8005704 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800391e:	2036      	movs	r0, #54	; 0x36
 8003920:	f001 ff0c 	bl	800573c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_InitTick+0x9c>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_InitTick+0x9c>)
 800392a:	f043 0310 	orr.w	r3, r3, #16
 800392e:	6593      	str	r3, [r2, #88]	; 0x58
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_InitTick+0x9c>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800393c:	f107 0210 	add.w	r2, r7, #16
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f003 fa3a 	bl	8006dc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800394c:	f003 fa0c 	bl	8006d68 <HAL_RCC_GetPCLK1Freq>
 8003950:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <HAL_InitTick+0xa0>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0c9b      	lsrs	r3, r3, #18
 800395c:	3b01      	subs	r3, #1
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_InitTick+0xa4>)
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <HAL_InitTick+0xa8>)
 8003964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_InitTick+0xa4>)
 8003968:	f240 32e7 	movw	r2, #999	; 0x3e7
 800396c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_InitTick+0xa4>)
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_InitTick+0xa4>)
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_InitTick+0xa4>)
 800397c:	2200      	movs	r2, #0
 800397e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003980:	4809      	ldr	r0, [pc, #36]	; (80039a8 <HAL_InitTick+0xa4>)
 8003982:	f004 fcef 	bl	8008364 <HAL_TIM_Base_Init>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800398c:	4806      	ldr	r0, [pc, #24]	; (80039a8 <HAL_InitTick+0xa4>)
 800398e:	f004 fd41 	bl	8008414 <HAL_TIM_Base_Start_IT>
 8003992:	4603      	mov	r3, r0
 8003994:	e000      	b.n	8003998 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
}
 8003998:	4618      	mov	r0, r3
 800399a:	3730      	adds	r7, #48	; 0x30
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	431bde83 	.word	0x431bde83
 80039a8:	2000ddf4 	.word	0x2000ddf4
 80039ac:	40001000 	.word	0x40001000

080039b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <NMI_Handler+0x4>

080039b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ba:	e7fe      	b.n	80039ba <HardFault_Handler+0x4>

080039bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <MemManage_Handler+0x4>

080039c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039c6:	e7fe      	b.n	80039c6 <BusFault_Handler+0x4>

080039c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039cc:	e7fe      	b.n	80039cc <UsageFault_Handler+0x4>

080039ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ce:	b480      	push	{r7}
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80039e0:	2001      	movs	r0, #1
 80039e2:	f002 fac1 	bl	8005f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}

080039ea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80039ee:	2002      	movs	r0, #2
 80039f0:	f002 faba 	bl	8005f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <DMA1_Channel1_IRQHandler+0x10>)
 80039fe:	f002 f812 	bl	8005a26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20004aa8 	.word	0x20004aa8

08003a0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003a10:	4802      	ldr	r0, [pc, #8]	; (8003a1c <DMA1_Channel2_IRQHandler+0x10>)
 8003a12:	f002 f808 	bl	8005a26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20004948 	.word	0x20004948

08003a20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <DMA1_Channel3_IRQHandler+0x10>)
 8003a26:	f001 fffe 	bl	8005a26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	2000cc2c 	.word	0x2000cc2c

08003a34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <DMA1_Channel6_IRQHandler+0x10>)
 8003a3a:	f001 fff4 	bl	8005a26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20004af0 	.word	0x20004af0

08003a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <TIM6_DAC_IRQHandler+0x38>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <TIM6_DAC_IRQHandler+0x38>)
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <TIM6_DAC_IRQHandler+0x38>)
 8003a5e:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8003a60:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <TIM6_DAC_IRQHandler+0x3c>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <TIM6_DAC_IRQHandler+0x3c>)
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <TIM6_DAC_IRQHandler+0x3c>)
 8003a72:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a74:	4804      	ldr	r0, [pc, #16]	; (8003a88 <TIM6_DAC_IRQHandler+0x40>)
 8003a76:	f005 fac5 	bl	8009004 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20003666 	.word	0x20003666
 8003a84:	20003664 	.word	0x20003664
 8003a88:	2000ddf4 	.word	0x2000ddf4

08003a8c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <DMA2_Channel7_IRQHandler+0x10>)
 8003a92:	f001 ffc8 	bl	8005a26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000366c 	.word	0x2000366c

08003aa0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e00a      	b.n	8003ac8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ab2:	f3af 8000 	nop.w
 8003ab6:	4601      	mov	r1, r0
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	60ba      	str	r2, [r7, #8]
 8003abe:	b2ca      	uxtb	r2, r1
 8003ac0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	dbf0      	blt.n	8003ab2 <_read+0x12>
	}

return len;
 8003ad0:	687b      	ldr	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	e009      	b.n	8003b00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	60ba      	str	r2, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd feef 	bl	80018d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3301      	adds	r3, #1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	dbf1      	blt.n	8003aec <_write+0x12>
	}
	return len;
 8003b08:	687b      	ldr	r3, [r7, #4]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <_close>:

int _close(int file)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
	return -1;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b3a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_isatty>:

int _isatty(int file)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
	return 1;
 8003b52:	2301      	movs	r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <_sbrk+0x5c>)
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <_sbrk+0x60>)
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <_sbrk+0x64>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <_sbrk+0x64>)
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <_sbrk+0x68>)
 8003b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d207      	bcs.n	8003bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bac:	f00a f82e 	bl	800dc0c <__errno>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bba:	e009      	b.n	8003bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <_sbrk+0x64>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bc2:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <_sbrk+0x64>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	4a05      	ldr	r2, [pc, #20]	; (8003be0 <_sbrk+0x64>)
 8003bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bce:	68fb      	ldr	r3, [r7, #12]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20018000 	.word	0x20018000
 8003bdc:	00000400 	.word	0x00000400
 8003be0:	200001e8 	.word	0x200001e8
 8003be4:	2000ff08 	.word	0x2000ff08

08003be8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003bec:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <SystemInit+0x5c>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <SystemInit+0x5c>)
 8003bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <SystemInit+0x60>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <SystemInit+0x60>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <SystemInit+0x60>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <SystemInit+0x60>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <SystemInit+0x60>)
 8003c14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003c18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <SystemInit+0x60>)
 8003c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <SystemInit+0x60>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <SystemInit+0x60>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <SystemInit+0x60>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000ed00 	.word	0xe000ed00
 8003c48:	40021000 	.word	0x40021000

08003c4c <HAL_TIM_PWM_PulseFinishedCallback>:
extern TIM_HandleTypeDef htim3;

volatile uint8_t ucDataSentFlag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10d      	bne.n	8003c78 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8003c5c:	2108      	movs	r1, #8
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f005 f8e0 	bl	8008e24 <HAL_TIM_PWM_Stop_DMA>
		HAL_UART_Transmit(&huart2, (uint8_t*)"testzzzz\r\n", sizeof("testzzzz\r\n"), 1000);
 8003c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c68:	220b      	movs	r2, #11
 8003c6a:	4906      	ldr	r1, [pc, #24]	; (8003c84 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8003c6c:	4806      	ldr	r0, [pc, #24]	; (8003c88 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8003c6e:	f006 fa05 	bl	800a07c <HAL_UART_Transmit>

		ucDataSentFlag = 1;
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
		// [!] need to update DMA

	}
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20004990 	.word	0x20004990
 8003c84:	08010270 	.word	0x08010270
 8003c88:	2000cce0 	.word	0x2000cce0
 8003c8c:	200001ec 	.word	0x200001ec

08003c90 <WS2812B_vInit>:
		DMA_HandleTypeDef *pxDMA1Channel1,
		DMA_HandleTypeDef *pxDMA1Channel2,
		DMA_HandleTypeDef *pxDMA1Channel3,
		DMA_HandleTypeDef *pxDMA2Channel1
	)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
	pxWS28182B->pxTimer1 = pxTimer1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	601a      	str	r2, [r3, #0]
	pxWS28182B->pxTimer2 = pxTimer2;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
	pxWS28182B->pxTimer1->Instance->ARR = WS2812B_ARR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2260      	movs	r2, #96	; 0x60
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
	pxWS28182B->pxTimer2->Instance->ARR = WS2812B_ARR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2260      	movs	r2, #96	; 0x60
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c

	pxWS28182B->pxDMA1Channel1 = pxDMA1Channel1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	609a      	str	r2, [r3, #8]
	pxWS28182B->pxDMA1Channel2 = pxDMA1Channel2;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	60da      	str	r2, [r3, #12]
	pxWS28182B->pxDMA1Channel3 = pxDMA1Channel3;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	611a      	str	r2, [r3, #16]
	pxWS28182B->pxDMA2Channel1 = pxDMA2Channel1;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	615a      	str	r2, [r3, #20]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <WS2812B_vSetLED>:



void WS2812B_vSetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex, uint8_t ucRed, uint8_t ucGreen, uint8_t ucBlue)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	70fb      	strb	r3, [r7, #3]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70bb      	strb	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3244      	adds	r2, #68	; 0x44
 8003d02:	78f9      	ldrb	r1, [r7, #3]
 8003d04:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = ucGreen;
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	3344      	adds	r3, #68	; 0x44
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	787a      	ldrb	r2, [r7, #1]
 8003d14:	705a      	strb	r2, [r3, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = ucRed;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	3344      	adds	r3, #68	; 0x44
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	78ba      	ldrb	r2, [r7, #2]
 8003d22:	709a      	strb	r2, [r3, #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = ucBlue;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	3344      	adds	r3, #68	; 0x44
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	7c3a      	ldrb	r2, [r7, #16]
 8003d30:	70da      	strb	r2, [r3, #3]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <WS2812B_vResetLED>:


void WS2812B_vResetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	70fb      	strb	r3, [r7, #3]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3244      	adds	r2, #68	; 0x44
 8003d50:	78f9      	ldrb	r1, [r7, #3]
 8003d52:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = 0;
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	3344      	adds	r3, #68	; 0x44
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	2200      	movs	r2, #0
 8003d62:	705a      	strb	r2, [r3, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = 0;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	3344      	adds	r3, #68	; 0x44
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	2200      	movs	r2, #0
 8003d70:	709a      	strb	r2, [r3, #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = 0;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	3344      	adds	r3, #68	; 0x44
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	70da      	strb	r2, [r3, #3]


	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucIndex = ucLEDIndex;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	3344      	adds	r3, #68	; 0x44
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	711a      	strb	r2, [r3, #4]
	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucGreen = 0;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	3344      	adds	r3, #68	; 0x44
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]
	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucRed = 0;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	3344      	adds	r3, #68	; 0x44
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	2200      	movs	r2, #0
 8003da8:	719a      	strb	r2, [r3, #6]
	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucBlue = 0;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	3344      	adds	r3, #68	; 0x44
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	2200      	movs	r2, #0
 8003db6:	71da      	strb	r2, [r3, #7]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <WS2812B_vResetLEDs>:


void WS2812B_vResetLEDs(WS2812BHandle_t *pxWS28182B)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	// [!] faster way to reset with memclr
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
 8003dd0:	e00a      	b.n	8003de8 <WS2812B_vResetLEDs+0x24>
	{
		WS2812B_vResetLED(pxWS28182B, i);
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff ffb1 	bl	8003d3e <WS2812B_vResetLED>
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	73fb      	strb	r3, [r7, #15]
 8003de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	ddf0      	ble.n	8003dd2 <WS2812B_vResetLEDs+0xe>
	}
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	0000      	movs	r0, r0
 8003dfc:	0000      	movs	r0, r0
	...

08003e00 <WS2812B_vSetBrightness>:


// Credits to Controllers Tech
void WS2812B_vSetBrightness(WS2812BHandle_t *pxWS28182B, int brightness)
{
 8003e00:	b5b0      	push	{r4, r5, r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8003e0e:	dd01      	ble.n	8003e14 <WS2812B_vSetBrightness+0x14>
 8003e10:	232d      	movs	r3, #45	; 0x2d
 8003e12:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < LED_COUNT; i++)
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e0ab      	b.n	8003f72 <WS2812B_vSetBrightness+0x172>
	{
		pxWS28182B->pxLEDBrightness[i].ucIndex = pxWS28182B->pxLEDData[i].ucIndex;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	3244      	adds	r2, #68	; 0x44
 8003e20:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3344      	adds	r3, #68	; 0x44
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	460a      	mov	r2, r1
 8003e30:	711a      	strb	r2, [r3, #4]

		float angle = 90 - brightness;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e40:	edc7 7a02 	vstr	s15, [r7, #8]
		angle = angle*M_PI / 180;
 8003e44:	68b8      	ldr	r0, [r7, #8]
 8003e46:	f7fc fb77 	bl	8000538 <__aeabi_f2d>
 8003e4a:	a350      	add	r3, pc, #320	; (adr r3, 8003f8c <WS2812B_vSetBrightness+0x18c>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fbca 	bl	80005e8 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <WS2812B_vSetBrightness+0x188>)
 8003e62:	f7fc fceb 	bl	800083c <__aeabi_ddiv>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f7fc fe9d 	bl	8000bac <__aeabi_d2f>
 8003e72:	4603      	mov	r3, r0
 8003e74:	60bb      	str	r3, [r7, #8]
		pxWS28182B->pxLEDBrightness[i].ucGreen = (pxWS28182B->pxLEDData[i].ucGreen)/(tan(angle));
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3344      	adds	r3, #68	; 0x44
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fb46 	bl	8000514 <__aeabi_i2d>
 8003e88:	4604      	mov	r4, r0
 8003e8a:	460d      	mov	r5, r1
 8003e8c:	68b8      	ldr	r0, [r7, #8]
 8003e8e:	f7fc fb53 	bl	8000538 <__aeabi_f2d>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	ec43 2b10 	vmov	d0, r2, r3
 8003e9a:	f00b f889 	bl	800efb0 <tan>
 8003e9e:	ec53 2b10 	vmov	r2, r3, d0
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc fcc9 	bl	800083c <__aeabi_ddiv>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fc fe5b 	bl	8000b6c <__aeabi_d2uiz>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	b2d9      	uxtb	r1, r3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3344      	adds	r3, #68	; 0x44
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	715a      	strb	r2, [r3, #5]
		pxWS28182B->pxLEDBrightness[i].ucRed = (pxWS28182B->pxLEDData[i].ucRed)/(tan(angle));
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3344      	adds	r3, #68	; 0x44
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	789b      	ldrb	r3, [r3, #2]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc fb1d 	bl	8000514 <__aeabi_i2d>
 8003eda:	4604      	mov	r4, r0
 8003edc:	460d      	mov	r5, r1
 8003ede:	68b8      	ldr	r0, [r7, #8]
 8003ee0:	f7fc fb2a 	bl	8000538 <__aeabi_f2d>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	ec43 2b10 	vmov	d0, r2, r3
 8003eec:	f00b f860 	bl	800efb0 <tan>
 8003ef0:	ec53 2b10 	vmov	r2, r3, d0
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f7fc fca0 	bl	800083c <__aeabi_ddiv>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	f7fc fe32 	bl	8000b6c <__aeabi_d2uiz>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	b2d9      	uxtb	r1, r3
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3344      	adds	r3, #68	; 0x44
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	460a      	mov	r2, r1
 8003f18:	719a      	strb	r2, [r3, #6]
		pxWS28182B->pxLEDBrightness[i].ucBlue = (pxWS28182B->pxLEDData[i].ucBlue)/(tan(angle));
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3344      	adds	r3, #68	; 0x44
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	78db      	ldrb	r3, [r3, #3]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc faf4 	bl	8000514 <__aeabi_i2d>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	460d      	mov	r5, r1
 8003f30:	68b8      	ldr	r0, [r7, #8]
 8003f32:	f7fc fb01 	bl	8000538 <__aeabi_f2d>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	ec43 2b10 	vmov	d0, r2, r3
 8003f3e:	f00b f837 	bl	800efb0 <tan>
 8003f42:	ec53 2b10 	vmov	r2, r3, d0
 8003f46:	4620      	mov	r0, r4
 8003f48:	4629      	mov	r1, r5
 8003f4a:	f7fc fc77 	bl	800083c <__aeabi_ddiv>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f7fc fe09 	bl	8000b6c <__aeabi_d2uiz>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	b2d9      	uxtb	r1, r3
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3344      	adds	r3, #68	; 0x44
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	460a      	mov	r2, r1
 8003f6a:	71da      	strb	r2, [r3, #7]
	for (int i = 0; i < LED_COUNT; i++)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f77f af50 	ble.w	8003e1a <WS2812B_vSetBrightness+0x1a>
		pxWS28182B->pxLEDBrightness[i].ucGreen = (pxWS28182B->pxLEDData[i].ucGreen);
		pxWS28182B->pxLEDBrightness[i].ucRed = (pxWS28182B->pxLEDData[i].ucRed);
		pxWS28182B->pxLEDBrightness[i].ucBlue = (pxWS28182B->pxLEDData[i].ucBlue);
	}
#endif
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bdb0      	pop	{r4, r5, r7, pc}
 8003f84:	f3af 8000 	nop.w
 8003f88:	40668000 	.word	0x40668000
 8003f8c:	54442d18 	.word	0x54442d18
 8003f90:	400921fb 	.word	0x400921fb

08003f94 <WS2812B_vSend>:




void WS2812B_vSend(WS2812BHandle_t *pxWS28182B)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
	uint32_t color;

	for (int i = 0; i < LED_COUNT; i++)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	e03b      	b.n	800401e <WS2812B_vSend+0x8a>
	{
		color = ((pxWS28182B->pxLEDBrightness[i].ucGreen<<16) | (pxWS28182B->pxLEDBrightness[i].ucRed<<8) | (pxWS28182B->pxLEDBrightness[i].ucBlue));
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	3344      	adds	r3, #68	; 0x44
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	795b      	ldrb	r3, [r3, #5]
 8003fb2:	041a      	lsls	r2, r3, #16
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	3344      	adds	r3, #68	; 0x44
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	799b      	ldrb	r3, [r3, #6]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	3344      	adds	r3, #68	; 0x44
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	79db      	ldrb	r3, [r3, #7]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--)
 8003fd4:	2317      	movs	r3, #23
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e01b      	b.n	8004012 <WS2812B_vSend+0x7e>
		{
			if (color & (1 << i))
 8003fda:	2201      	movs	r2, #1
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d006      	beq.n	8003ffa <WS2812B_vSend+0x66>
			{
				pxWS28182B->pwmData[indx] = WS2812B_T1H_TICKS;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	320c      	adds	r2, #12
 8003ff2:	2130      	movs	r1, #48	; 0x30
 8003ff4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003ff8:	e005      	b.n	8004006 <WS2812B_vSend+0x72>
			}
			else
			{
				pxWS28182B->pwmData[indx] = WS2812B_T0H_TICKS;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	320c      	adds	r2, #12
 8004000:	2118      	movs	r1, #24
 8004002:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			indx++;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3b01      	subs	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	dae0      	bge.n	8003fda <WS2812B_vSend+0x46>
	for (int i = 0; i < LED_COUNT; i++)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3301      	adds	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	ddc0      	ble.n	8003fa6 <WS2812B_vSend+0x12>
	}


	static char buffer[64];

	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", WS2812B_T1H_TICKS), 1000);
 8004024:	2230      	movs	r2, #48	; 0x30
 8004026:	4921      	ldr	r1, [pc, #132]	; (80040ac <WS2812B_vSend+0x118>)
 8004028:	4821      	ldr	r0, [pc, #132]	; (80040b0 <WS2812B_vSend+0x11c>)
 800402a:	f009 febd 	bl	800dda8 <siprintf>
 800402e:	4603      	mov	r3, r0
 8004030:	b29a      	uxth	r2, r3
 8004032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004036:	491e      	ldr	r1, [pc, #120]	; (80040b0 <WS2812B_vSend+0x11c>)
 8004038:	481e      	ldr	r0, [pc, #120]	; (80040b4 <WS2812B_vSend+0x120>)
 800403a:	f006 f81f 	bl	800a07c <HAL_UART_Transmit>

	for (int i = 0; i < WS2812B_RES_TICKS; i++) // [!]
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	e00b      	b.n	800405c <WS2812B_vSend+0xc8>
	{
		pxWS28182B->pwmData[indx] = 0;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	320c      	adds	r2, #12
 800404a:	2100      	movs	r1, #0
 800404c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3301      	adds	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < WS2812B_RES_TICKS; i++) // [!]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b63      	cmp	r3, #99	; 0x63
 8004060:	ddf0      	ble.n	8004044 <WS2812B_vSend+0xb0>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", WS2812B_T0H_TICKS), 1000);
 8004062:	2218      	movs	r2, #24
 8004064:	4911      	ldr	r1, [pc, #68]	; (80040ac <WS2812B_vSend+0x118>)
 8004066:	4812      	ldr	r0, [pc, #72]	; (80040b0 <WS2812B_vSend+0x11c>)
 8004068:	f009 fe9e 	bl	800dda8 <siprintf>
 800406c:	4603      	mov	r3, r0
 800406e:	b29a      	uxth	r2, r3
 8004070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004074:	490e      	ldr	r1, [pc, #56]	; (80040b0 <WS2812B_vSend+0x11c>)
 8004076:	480f      	ldr	r0, [pc, #60]	; (80040b4 <WS2812B_vSend+0x120>)
 8004078:	f006 f800 	bl	800a07c <HAL_UART_Transmit>


	HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_3, (uint32_t *)pxWS28182B->pwmData, indx);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f103 0218 	add.w	r2, r3, #24
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	b29b      	uxth	r3, r3
 800408a:	2108      	movs	r1, #8
 800408c:	f004 fcb2 	bl	80089f4 <HAL_TIM_PWM_Start_DMA>


	// [!] semaphore wait or osdelay
	while (!ucDataSentFlag) {};
 8004090:	bf00      	nop
 8004092:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <WS2812B_vSend+0x124>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0fa      	beq.n	8004092 <WS2812B_vSend+0xfe>
	ucDataSentFlag = 0;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <WS2812B_vSend+0x124>)
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]
}
 80040a2:	bf00      	nop
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	0801027c 	.word	0x0801027c
 80040b0:	200001f0 	.word	0x200001f0
 80040b4:	2000cce0 	.word	0x2000cce0
 80040b8:	200001ec 	.word	0x200001ec

080040bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80040bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040c0:	f7ff fd92 	bl	8003be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80040c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80040c6:	e003      	b.n	80040d0 <LoopCopyDataInit>

080040c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80040ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80040cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80040ce:	3104      	adds	r1, #4

080040d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80040d0:	480a      	ldr	r0, [pc, #40]	; (80040fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80040d2:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <LoopForever+0xe>)
	adds	r2, r0, r1
 80040d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80040d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80040d8:	d3f6      	bcc.n	80040c8 <CopyDataInit>
	ldr	r2, =_sbss
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <LoopForever+0x12>)
	b	LoopFillZerobss
 80040dc:	e002      	b.n	80040e4 <LoopFillZerobss>

080040de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80040de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80040e0:	f842 3b04 	str.w	r3, [r2], #4

080040e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <LoopForever+0x16>)
	cmp	r2, r3
 80040e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040e8:	d3f9      	bcc.n	80040de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040ea:	f009 fd95 	bl	800dc18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040ee:	f7fd fc05 	bl	80018fc <main>

080040f2 <LoopForever>:

LoopForever:
    b LoopForever
 80040f2:	e7fe      	b.n	80040f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80040f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80040f8:	080105f0 	.word	0x080105f0
	ldr	r0, =_sdata
 80040fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004100:	200001c4 	.word	0x200001c4
	ldr	r2, =_sbss
 8004104:	200001c4 	.word	0x200001c4
	ldr	r3, = _ebss
 8004108:	2000ff08 	.word	0x2000ff08

0800410c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800410c:	e7fe      	b.n	800410c <ADC1_2_IRQHandler>
	...

08004110 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_Init+0x3c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_Init+0x3c>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004126:	2003      	movs	r0, #3
 8004128:	f001 fae1 	bl	80056ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800412c:	2000      	movs	r0, #0
 800412e:	f7ff fbe9 	bl	8003904 <HAL_InitTick>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	71fb      	strb	r3, [r7, #7]
 800413c:	e001      	b.n	8004142 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800413e:	f7ff f801 	bl	8003144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004142:	79fb      	ldrb	r3, [r7, #7]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40022000 	.word	0x40022000

08004150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_IncTick+0x20>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_IncTick+0x24>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4413      	add	r3, r2
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_IncTick+0x24>)
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000144 	.word	0x20000144
 8004174:	2000de40 	.word	0x2000de40

08004178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return uwTick;
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_GetTick+0x14>)
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	2000de40 	.word	0x2000de40

08004190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004198:	f7ff ffee 	bl	8004178 <HAL_GetTick>
 800419c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a8:	d005      	beq.n	80041b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_Delay+0x44>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041b6:	bf00      	nop
 80041b8:	f7ff ffde 	bl	8004178 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d8f7      	bhi.n	80041b8 <HAL_Delay+0x28>
  {
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000144 	.word	0x20000144

080041d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3360      	adds	r3, #96	; 0x60
 8004252:	461a      	mov	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b08      	ldr	r3, [pc, #32]	; (8004284 <LL_ADC_SetOffset+0x44>)
 8004262:	4013      	ands	r3, r2
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	03fff000 	.word	0x03fff000

08004288 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3360      	adds	r3, #96	; 0x60
 8004296:	461a      	mov	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3360      	adds	r3, #96	; 0x60
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	431a      	orrs	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3330      	adds	r3, #48	; 0x30
 8004320:	461a      	mov	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	4413      	add	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	211f      	movs	r1, #31
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0e9b      	lsrs	r3, r3, #26
 8004348:	f003 011f 	and.w	r1, r3, #31
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	431a      	orrs	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3314      	adds	r3, #20
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0e5b      	lsrs	r3, r3, #25
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	0d1b      	lsrs	r3, r3, #20
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2107      	movs	r1, #7
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	401a      	ands	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	0d1b      	lsrs	r3, r3, #20
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	431a      	orrs	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d8:	43db      	mvns	r3, r3
 80043da:	401a      	ands	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0318 	and.w	r3, r3, #24
 80043e2:	4908      	ldr	r1, [pc, #32]	; (8004404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043e4:	40d9      	lsrs	r1, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	400b      	ands	r3, r1
 80043ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	0007ffff 	.word	0x0007ffff

08004408 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 031f 	and.w	r3, r3, #31
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6093      	str	r3, [r2, #8]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445c:	d101      	bne.n	8004462 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004484:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ac:	d101      	bne.n	80044b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <LL_ADC_IsEnabled+0x18>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <LL_ADC_IsEnabled+0x1a>
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800451e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004522:	f043 0204 	orr.w	r2, r3, #4
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d101      	bne.n	800454e <LL_ADC_REG_IsConversionOngoing+0x18>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b08      	cmp	r3, #8
 800456e:	d101      	bne.n	8004574 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e136      	b.n	800480c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fe fdf1 	bl	8003194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff3f 	bl	8004448 <LL_ADC_IsDeepPowerDownEnabled>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff25 	bl	8004424 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff5a 	bl	8004498 <LL_ADC_IsInternalRegulatorEnabled>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff3e 	bl	8004470 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f4:	4b87      	ldr	r3, [pc, #540]	; (8004814 <HAL_ADC_Init+0x290>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	4a87      	ldr	r2, [pc, #540]	; (8004818 <HAL_ADC_Init+0x294>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	3301      	adds	r3, #1
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004608:	e002      	b.n	8004610 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3b01      	subs	r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f9      	bne.n	800460a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff ff3c 	bl	8004498 <LL_ADC_IsInternalRegulatorEnabled>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10d      	bne.n	8004642 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0210 	orr.w	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	f043 0201 	orr.w	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ff75 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 800464c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 80cf 	bne.w	80047fa <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 80cb 	bne.w	80047fa <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800466c:	f043 0202 	orr.w	r2, r3, #2
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff35 	bl	80044e8 <LL_ADC_IsEnabled>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d115      	bne.n	80046b0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004684:	4865      	ldr	r0, [pc, #404]	; (800481c <HAL_ADC_Init+0x298>)
 8004686:	f7ff ff2f 	bl	80044e8 <LL_ADC_IsEnabled>
 800468a:	4604      	mov	r4, r0
 800468c:	4864      	ldr	r0, [pc, #400]	; (8004820 <HAL_ADC_Init+0x29c>)
 800468e:	f7ff ff2b 	bl	80044e8 <LL_ADC_IsEnabled>
 8004692:	4603      	mov	r3, r0
 8004694:	431c      	orrs	r4, r3
 8004696:	4863      	ldr	r0, [pc, #396]	; (8004824 <HAL_ADC_Init+0x2a0>)
 8004698:	f7ff ff26 	bl	80044e8 <LL_ADC_IsEnabled>
 800469c:	4603      	mov	r3, r0
 800469e:	4323      	orrs	r3, r4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	485f      	ldr	r0, [pc, #380]	; (8004828 <HAL_ADC_Init+0x2a4>)
 80046ac:	f7ff fd94 	bl	80041d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7e5b      	ldrb	r3, [r3, #25]
 80046b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80046c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80046c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d106      	bne.n	80046ec <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	3b01      	subs	r3, #1
 80046e4:	045b      	lsls	r3, r3, #17
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	4b47      	ldr	r3, [pc, #284]	; (800482c <HAL_ADC_Init+0x2a8>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	69b9      	ldr	r1, [r7, #24]
 8004718:	430b      	orrs	r3, r1
 800471a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff08 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 8004726:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ff15 	bl	800455c <LL_ADC_INJ_IsConversionOngoing>
 8004732:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d13d      	bne.n	80047b6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d13a      	bne.n	80047b6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004744:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800474c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475c:	f023 0302 	bic.w	r3, r3, #2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	69b9      	ldr	r1, [r7, #24]
 8004766:	430b      	orrs	r3, r1
 8004768:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004770:	2b01      	cmp	r3, #1
 8004772:	d118      	bne.n	80047a6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800477e:	f023 0304 	bic.w	r3, r3, #4
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800478a:	4311      	orrs	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004790:	4311      	orrs	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004796:	430a      	orrs	r2, r1
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	611a      	str	r2, [r3, #16]
 80047a4:	e007      	b.n	80047b6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10c      	bne.n	80047d8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f023 010f 	bic.w	r1, r3, #15
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	1e5a      	subs	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
 80047d6:	e007      	b.n	80047e8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 020f 	bic.w	r2, r2, #15
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f023 0303 	bic.w	r3, r3, #3
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
 80047f8:	e007      	b.n	800480a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	f043 0210 	orr.w	r2, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800480a:	7ffb      	ldrb	r3, [r7, #31]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3724      	adds	r7, #36	; 0x24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd90      	pop	{r4, r7, pc}
 8004814:	2000013c 	.word	0x2000013c
 8004818:	053e2d63 	.word	0x053e2d63
 800481c:	50040000 	.word	0x50040000
 8004820:	50040100 	.word	0x50040100
 8004824:	50040200 	.word	0x50040200
 8004828:	50040300 	.word	0x50040300
 800482c:	fff0c007 	.word	0xfff0c007

08004830 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800483c:	4850      	ldr	r0, [pc, #320]	; (8004980 <HAL_ADC_Start_DMA+0x150>)
 800483e:	f7ff fde3 	bl	8004408 <LL_ADC_GetMultimode>
 8004842:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fe74 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 808e 	bne.w	8004972 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_ADC_Start_DMA+0x34>
 8004860:	2302      	movs	r3, #2
 8004862:	e089      	b.n	8004978 <HAL_ADC_Start_DMA+0x148>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b05      	cmp	r3, #5
 8004876:	d002      	beq.n	800487e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b09      	cmp	r3, #9
 800487c:	d172      	bne.n	8004964 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fc98 	bl	80051b4 <ADC_Enable>
 8004884:	4603      	mov	r3, r0
 8004886:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004888:	7dfb      	ldrb	r3, [r7, #23]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d165      	bne.n	800495a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a37      	ldr	r2, [pc, #220]	; (8004984 <HAL_ADC_Start_DMA+0x154>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d002      	beq.n	80048b2 <HAL_ADC_Start_DMA+0x82>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	e000      	b.n	80048b4 <HAL_ADC_Start_DMA+0x84>
 80048b2:	4b35      	ldr	r3, [pc, #212]	; (8004988 <HAL_ADC_Start_DMA+0x158>)
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d002      	beq.n	80048c2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d105      	bne.n	80048ce <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d006      	beq.n	80048e8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	f023 0206 	bic.w	r2, r3, #6
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	659a      	str	r2, [r3, #88]	; 0x58
 80048e6:	e002      	b.n	80048ee <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f2:	4a26      	ldr	r2, [pc, #152]	; (800498c <HAL_ADC_Start_DMA+0x15c>)
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	4a25      	ldr	r2, [pc, #148]	; (8004990 <HAL_ADC_Start_DMA+0x160>)
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <HAL_ADC_Start_DMA+0x164>)
 8004904:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	221c      	movs	r2, #28
 800490c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0210 	orr.w	r2, r2, #16
 8004924:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3340      	adds	r3, #64	; 0x40
 8004940:	4619      	mov	r1, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f000 ffcd 	bl	80058e4 <HAL_DMA_Start_IT>
 800494a:	4603      	mov	r3, r0
 800494c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fddb 	bl	800450e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004958:	e00d      	b.n	8004976 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004962:	e008      	b.n	8004976 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004970:	e001      	b.n	8004976 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	50040300 	.word	0x50040300
 8004984:	50040100 	.word	0x50040100
 8004988:	50040000 	.word	0x50040000
 800498c:	08005279 	.word	0x08005279
 8004990:	08005351 	.word	0x08005351
 8004994:	0800536d 	.word	0x0800536d

08004998 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b0b6      	sub	sp, #216	; 0xd8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x22>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e3c7      	b.n	8005186 <HAL_ADC_ConfigChannel+0x7b2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fd97 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 83a8 	bne.w	8005160 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d824      	bhi.n	8004a62 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	3b02      	subs	r3, #2
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d81b      	bhi.n	8004a5a <HAL_ADC_ConfigChannel+0x86>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_ADC_ConfigChannel+0x54>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a41 	.word	0x08004a41
 8004a30:	08004a49 	.word	0x08004a49
 8004a34:	08004a51 	.word	0x08004a51
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	220c      	movs	r2, #12
 8004a3c:	605a      	str	r2, [r3, #4]
          break;
 8004a3e:	e011      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2212      	movs	r2, #18
 8004a44:	605a      	str	r2, [r3, #4]
          break;
 8004a46:	e00d      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2218      	movs	r2, #24
 8004a4c:	605a      	str	r2, [r3, #4]
          break;
 8004a4e:	e009      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a56:	605a      	str	r2, [r3, #4]
          break;
 8004a58:	e004      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2206      	movs	r2, #6
 8004a5e:	605a      	str	r2, [r3, #4]
          break;
 8004a60:	e000      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004a62:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	f7ff fc4d 	bl	8004310 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fd5b 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 8004a80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fd67 	bl	800455c <LL_ADC_INJ_IsConversionOngoing>
 8004a8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 81a6 	bne.w	8004de8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 81a1 	bne.w	8004de8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f7ff fc58 	bl	8004368 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	08db      	lsrs	r3, r3, #3
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d00a      	beq.n	8004af0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6919      	ldr	r1, [r3, #16]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aea:	f7ff fba9 	bl	8004240 <LL_ADC_SetOffset>
 8004aee:	e17b      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fbc6 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x148>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fbbb 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004b12:	4603      	mov	r3, r0
 8004b14:	0e9b      	lsrs	r3, r3, #26
 8004b16:	f003 021f 	and.w	r2, r3, #31
 8004b1a:	e01e      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x186>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fbb0 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b32:	fa93 f3a3 	rbit	r3, r3
 8004b36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	e004      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d105      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x19e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	0e9b      	lsrs	r3, r3, #26
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	e018      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x1d0>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b7e:	fa93 f3a3 	rbit	r3, r3
 8004b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004b96:	2320      	movs	r3, #32
 8004b98:	e004      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004b9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d106      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fb7f 	bl	80042b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fb63 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x20e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fb58 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	e01e      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x24c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fb4d 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004c00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e004      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x264>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	e018      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x296>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004c4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e004      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d106      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fb1c 	bl	80042b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2102      	movs	r1, #2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fb00 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x2d4>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2102      	movs	r1, #2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff faf5 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	0e9b      	lsrs	r3, r3, #26
 8004ca2:	f003 021f 	and.w	r2, r3, #31
 8004ca6:	e01e      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x312>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2102      	movs	r1, #2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff faea 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e004      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x32a>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	0e9b      	lsrs	r3, r3, #26
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	e016      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x358>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d0a:	fa93 f3a3 	rbit	r3, r3
 8004d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004d1e:	2320      	movs	r3, #32
 8004d20:	e004      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d106      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fabb 	bl	80042b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2103      	movs	r1, #3
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fa9f 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_ADC_ConfigChannel+0x396>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2103      	movs	r1, #3
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fa94 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004d60:	4603      	mov	r3, r0
 8004d62:	0e9b      	lsrs	r3, r3, #26
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	e017      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x3c6>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2103      	movs	r1, #3
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fa89 	bl	8004288 <LL_ADC_GetOffsetChannel>
 8004d76:	4603      	mov	r3, r0
 8004d78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d84:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	e003      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d92:	fab3 f383 	clz	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x3de>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	0e9b      	lsrs	r3, r3, #26
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	e011      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x402>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004dca:	2320      	movs	r3, #32
 8004dcc:	e003      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	fab3 f383 	clz	r3, r3
 8004dd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d106      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2200      	movs	r2, #0
 8004de0:	2103      	movs	r1, #3
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fa66 	bl	80042b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fb7b 	bl	80044e8 <LL_ADC_IsEnabled>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f040 813f 	bne.w	8005078 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6819      	ldr	r1, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	461a      	mov	r2, r3
 8004e08:	f7ff fada 	bl	80043c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a8e      	ldr	r2, [pc, #568]	; (800504c <HAL_ADC_ConfigChannel+0x678>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f040 8130 	bne.w	8005078 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x46c>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	0e9b      	lsrs	r3, r3, #26
 8004e2e:	3301      	adds	r3, #1
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	bf94      	ite	ls
 8004e38:	2301      	movls	r3, #1
 8004e3a:	2300      	movhi	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	e019      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x4a0>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e50:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004e58:	2320      	movs	r3, #32
 8004e5a:	e003      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3301      	adds	r3, #1
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2b09      	cmp	r3, #9
 8004e6c:	bf94      	ite	ls
 8004e6e:	2301      	movls	r3, #1
 8004e70:	2300      	movhi	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d079      	beq.n	8004f6c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d107      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x4c0>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0e9b      	lsrs	r3, r3, #26
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	069b      	lsls	r3, r3, #26
 8004e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e92:	e015      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x4ec>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9c:	fa93 f3a3 	rbit	r3, r3
 8004ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004eac:	2320      	movs	r3, #32
 8004eae:	e003      	b.n	8004eb8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	069b      	lsls	r3, r3, #26
 8004ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x50c>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	0e9b      	lsrs	r3, r3, #26
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2101      	movs	r1, #1
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	e017      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x53c>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004ef8:	2320      	movs	r3, #32
 8004efa:	e003      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	3301      	adds	r3, #1
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_ADC_ConfigChannel+0x562>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0e9b      	lsrs	r3, r3, #26
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 021f 	and.w	r2, r3, #31
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	051b      	lsls	r3, r3, #20
 8004f34:	e018      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x594>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	fa93 f3a3 	rbit	r3, r3
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e003      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f003 021f 	and.w	r2, r3, #31
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	e080      	b.n	800506e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x5b4>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	0e9b      	lsrs	r3, r3, #26
 8004f7e:	3301      	adds	r3, #1
 8004f80:	069b      	lsls	r3, r3, #26
 8004f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f86:	e015      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x5e0>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	fa93 f3a3 	rbit	r3, r3
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e003      	b.n	8004fac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	3301      	adds	r3, #1
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x600>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	0e9b      	lsrs	r3, r3, #26
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd2:	e017      	b.n	8005004 <HAL_ADC_ConfigChannel+0x630>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	61fb      	str	r3, [r7, #28]
  return result;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e003      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2101      	movs	r1, #1
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	ea42 0103 	orr.w	r1, r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x65c>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	0e9b      	lsrs	r3, r3, #26
 800501a:	3301      	adds	r3, #1
 800501c:	f003 021f 	and.w	r2, r3, #31
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	3b1e      	subs	r3, #30
 8005028:	051b      	lsls	r3, r3, #20
 800502a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800502e:	e01d      	b.n	800506c <HAL_ADC_ConfigChannel+0x698>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	613b      	str	r3, [r7, #16]
  return result;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005048:	2320      	movs	r3, #32
 800504a:	e005      	b.n	8005058 <HAL_ADC_ConfigChannel+0x684>
 800504c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	fab3 f383 	clz	r3, r3
 8005056:	b2db      	uxtb	r3, r3
 8005058:	3301      	adds	r3, #1
 800505a:	f003 021f 	and.w	r2, r3, #31
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	3b1e      	subs	r3, #30
 8005066:	051b      	lsls	r3, r3, #20
 8005068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800506c:	430b      	orrs	r3, r1
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	6892      	ldr	r2, [r2, #8]
 8005072:	4619      	mov	r1, r3
 8005074:	f7ff f978 	bl	8004368 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b44      	ldr	r3, [pc, #272]	; (8005190 <HAL_ADC_ConfigChannel+0x7bc>)
 800507e:	4013      	ands	r3, r2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d07a      	beq.n	800517a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005084:	4843      	ldr	r0, [pc, #268]	; (8005194 <HAL_ADC_ConfigChannel+0x7c0>)
 8005086:	f7ff f8cd 	bl	8004224 <LL_ADC_GetCommonPathInternalCh>
 800508a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a41      	ldr	r2, [pc, #260]	; (8005198 <HAL_ADC_ConfigChannel+0x7c4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d12c      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800509c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d126      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3c      	ldr	r2, [pc, #240]	; (800519c <HAL_ADC_ConfigChannel+0x7c8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_ADC_ConfigChannel+0x6e4>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3b      	ldr	r2, [pc, #236]	; (80051a0 <HAL_ADC_ConfigChannel+0x7cc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d15d      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050c0:	4619      	mov	r1, r3
 80050c2:	4834      	ldr	r0, [pc, #208]	; (8005194 <HAL_ADC_ConfigChannel+0x7c0>)
 80050c4:	f7ff f89b 	bl	80041fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050c8:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <HAL_ADC_ConfigChannel+0x7d0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	4a36      	ldr	r2, [pc, #216]	; (80051a8 <HAL_ADC_ConfigChannel+0x7d4>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	099b      	lsrs	r3, r3, #6
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80050e2:	e002      	b.n	80050ea <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f9      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050f0:	e040      	b.n	8005174 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2d      	ldr	r2, [pc, #180]	; (80051ac <HAL_ADC_ConfigChannel+0x7d8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d118      	bne.n	800512e <HAL_ADC_ConfigChannel+0x75a>
 80050fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d112      	bne.n	800512e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a23      	ldr	r2, [pc, #140]	; (800519c <HAL_ADC_ConfigChannel+0x7c8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_ADC_ConfigChannel+0x748>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a22      	ldr	r2, [pc, #136]	; (80051a0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d12d      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800511c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005124:	4619      	mov	r1, r3
 8005126:	481b      	ldr	r0, [pc, #108]	; (8005194 <HAL_ADC_ConfigChannel+0x7c0>)
 8005128:	f7ff f869 	bl	80041fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800512c:	e024      	b.n	8005178 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d120      	bne.n	800517a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800513c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11a      	bne.n	800517a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a14      	ldr	r2, [pc, #80]	; (800519c <HAL_ADC_ConfigChannel+0x7c8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d115      	bne.n	800517a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800514e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005156:	4619      	mov	r1, r3
 8005158:	480e      	ldr	r0, [pc, #56]	; (8005194 <HAL_ADC_ConfigChannel+0x7c0>)
 800515a:	f7ff f850 	bl	80041fe <LL_ADC_SetCommonPathInternalCh>
 800515e:	e00c      	b.n	800517a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005172:	e002      	b.n	800517a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005178:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005182:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005186:	4618      	mov	r0, r3
 8005188:	37d8      	adds	r7, #216	; 0xd8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	80080000 	.word	0x80080000
 8005194:	50040300 	.word	0x50040300
 8005198:	c7520000 	.word	0xc7520000
 800519c:	50040000 	.word	0x50040000
 80051a0:	50040200 	.word	0x50040200
 80051a4:	2000013c 	.word	0x2000013c
 80051a8:	053e2d63 	.word	0x053e2d63
 80051ac:	cb840000 	.word	0xcb840000
 80051b0:	80000001 	.word	0x80000001

080051b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff f991 	bl	80044e8 <LL_ADC_IsEnabled>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d14d      	bne.n	8005268 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	4b28      	ldr	r3, [pc, #160]	; (8005274 <ADC_Enable+0xc0>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f043 0210 	orr.w	r2, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ea:	f043 0201 	orr.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e039      	b.n	800526a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff f960 	bl	80044c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005200:	f7fe ffba 	bl	8004178 <HAL_GetTick>
 8005204:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005206:	e028      	b.n	800525a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff f96b 	bl	80044e8 <LL_ADC_IsEnabled>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff f94f 	bl	80044c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005222:	f7fe ffa9 	bl	8004178 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d914      	bls.n	800525a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d00d      	beq.n	800525a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	f043 0210 	orr.w	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	f043 0201 	orr.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e007      	b.n	800526a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b01      	cmp	r3, #1
 8005266:	d1cf      	bne.n	8005208 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	8000003f 	.word	0x8000003f

08005278 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d14b      	bne.n	800532a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d021      	beq.n	80052f0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff f81a 	bl	80042ea <LL_ADC_REG_IsTriggerSourceSWStart>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d032      	beq.n	8005322 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d12b      	bne.n	8005322 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d11f      	bne.n	8005322 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54
 80052ee:	e018      	b.n	8005322 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d111      	bne.n	8005322 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d105      	bne.n	8005322 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f043 0201 	orr.w	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff fb38 	bl	8004998 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005328:	e00e      	b.n	8005348 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff fb42 	bl	80049c0 <HAL_ADC_ErrorCallback>
}
 800533c:	e004      	b.n	8005348 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff fb24 	bl	80049ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fb14 	bl	80049c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <LL_ADC_IsEnabled>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <LL_ADC_IsEnabled+0x18>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <LL_ADC_IsEnabled+0x1a>
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d101      	bne.n	80053de <LL_ADC_REG_IsConversionOngoing+0x18>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80053ec:	b590      	push	{r4, r7, lr}
 80053ee:	b09f      	sub	sp, #124	; 0x7c
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005406:	2302      	movs	r3, #2
 8005408:	e093      	b.n	8005532 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005412:	2300      	movs	r3, #0
 8005414:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005416:	2300      	movs	r3, #0
 8005418:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a47      	ldr	r2, [pc, #284]	; (800553c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d102      	bne.n	800542a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005424:	4b46      	ldr	r3, [pc, #280]	; (8005540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	e001      	b.n	800542e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10b      	bne.n	800544c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e072      	b.n	8005532 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff ffb9 	bl	80053c6 <LL_ADC_REG_IsConversionOngoing>
 8005454:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff ffb3 	bl	80053c6 <LL_ADC_REG_IsConversionOngoing>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d154      	bne.n	8005510 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005468:	2b00      	cmp	r3, #0
 800546a:	d151      	bne.n	8005510 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800546c:	4b35      	ldr	r3, [pc, #212]	; (8005544 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800546e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02c      	beq.n	80054d2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800548a:	035b      	lsls	r3, r3, #13
 800548c:	430b      	orrs	r3, r1
 800548e:	431a      	orrs	r2, r3
 8005490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005492:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005494:	4829      	ldr	r0, [pc, #164]	; (800553c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005496:	f7ff ff83 	bl	80053a0 <LL_ADC_IsEnabled>
 800549a:	4604      	mov	r4, r0
 800549c:	4828      	ldr	r0, [pc, #160]	; (8005540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800549e:	f7ff ff7f 	bl	80053a0 <LL_ADC_IsEnabled>
 80054a2:	4603      	mov	r3, r0
 80054a4:	431c      	orrs	r4, r3
 80054a6:	4828      	ldr	r0, [pc, #160]	; (8005548 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80054a8:	f7ff ff7a 	bl	80053a0 <LL_ADC_IsEnabled>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4323      	orrs	r3, r4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d137      	bne.n	8005524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80054b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80054bc:	f023 030f 	bic.w	r3, r3, #15
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	6811      	ldr	r1, [r2, #0]
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	6892      	ldr	r2, [r2, #8]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	431a      	orrs	r2, r3
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054d0:	e028      	b.n	8005524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054de:	4817      	ldr	r0, [pc, #92]	; (800553c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80054e0:	f7ff ff5e 	bl	80053a0 <LL_ADC_IsEnabled>
 80054e4:	4604      	mov	r4, r0
 80054e6:	4816      	ldr	r0, [pc, #88]	; (8005540 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80054e8:	f7ff ff5a 	bl	80053a0 <LL_ADC_IsEnabled>
 80054ec:	4603      	mov	r3, r0
 80054ee:	431c      	orrs	r4, r3
 80054f0:	4815      	ldr	r0, [pc, #84]	; (8005548 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80054f2:	f7ff ff55 	bl	80053a0 <LL_ADC_IsEnabled>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4323      	orrs	r3, r4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d112      	bne.n	8005524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005506:	f023 030f 	bic.w	r3, r3, #15
 800550a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800550c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800550e:	e009      	b.n	8005524 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005522:	e000      	b.n	8005526 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005524:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800552e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005532:	4618      	mov	r0, r3
 8005534:	377c      	adds	r7, #124	; 0x7c
 8005536:	46bd      	mov	sp, r7
 8005538:	bd90      	pop	{r4, r7, pc}
 800553a:	bf00      	nop
 800553c:	50040000 	.word	0x50040000
 8005540:	50040100 	.word	0x50040100
 8005544:	50040300 	.word	0x50040300
 8005548:	50040200 	.word	0x50040200

0800554c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <__NVIC_SetPriorityGrouping+0x44>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800557e:	4a04      	ldr	r2, [pc, #16]	; (8005590 <__NVIC_SetPriorityGrouping+0x44>)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	60d3      	str	r3, [r2, #12]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <__NVIC_GetPriorityGrouping+0x18>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	f003 0307 	and.w	r3, r3, #7
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db0b      	blt.n	80055da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	f003 021f 	and.w	r2, r3, #31
 80055c8:	4907      	ldr	r1, [pc, #28]	; (80055e8 <__NVIC_EnableIRQ+0x38>)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	2001      	movs	r0, #1
 80055d2:	fa00 f202 	lsl.w	r2, r0, r2
 80055d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e100 	.word	0xe000e100

080055ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	db12      	blt.n	8005624 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	f003 021f 	and.w	r2, r3, #31
 8005604:	490a      	ldr	r1, [pc, #40]	; (8005630 <__NVIC_DisableIRQ+0x44>)
 8005606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	2001      	movs	r0, #1
 800560e:	fa00 f202 	lsl.w	r2, r0, r2
 8005612:	3320      	adds	r3, #32
 8005614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005618:	f3bf 8f4f 	dsb	sy
}
 800561c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800561e:	f3bf 8f6f 	isb	sy
}
 8005622:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000e100 	.word	0xe000e100

08005634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	6039      	str	r1, [r7, #0]
 800563e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005644:	2b00      	cmp	r3, #0
 8005646:	db0a      	blt.n	800565e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	490c      	ldr	r1, [pc, #48]	; (8005680 <__NVIC_SetPriority+0x4c>)
 800564e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005652:	0112      	lsls	r2, r2, #4
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	440b      	add	r3, r1
 8005658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800565c:	e00a      	b.n	8005674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	4908      	ldr	r1, [pc, #32]	; (8005684 <__NVIC_SetPriority+0x50>)
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	3b04      	subs	r3, #4
 800566c:	0112      	lsls	r2, r2, #4
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	440b      	add	r3, r1
 8005672:	761a      	strb	r2, [r3, #24]
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	e000e100 	.word	0xe000e100
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005688:	b480      	push	{r7}
 800568a:	b089      	sub	sp, #36	; 0x24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	f1c3 0307 	rsb	r3, r3, #7
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	bf28      	it	cs
 80056a6:	2304      	movcs	r3, #4
 80056a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3304      	adds	r3, #4
 80056ae:	2b06      	cmp	r3, #6
 80056b0:	d902      	bls.n	80056b8 <NVIC_EncodePriority+0x30>
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3b03      	subs	r3, #3
 80056b6:	e000      	b.n	80056ba <NVIC_EncodePriority+0x32>
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43da      	mvns	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	401a      	ands	r2, r3
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	fa01 f303 	lsl.w	r3, r1, r3
 80056da:	43d9      	mvns	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e0:	4313      	orrs	r3, r2
         );
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3724      	adds	r7, #36	; 0x24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff28 	bl	800554c <__NVIC_SetPriorityGrouping>
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005716:	f7ff ff3d 	bl	8005594 <__NVIC_GetPriorityGrouping>
 800571a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	6978      	ldr	r0, [r7, #20]
 8005722:	f7ff ffb1 	bl	8005688 <NVIC_EncodePriority>
 8005726:	4602      	mov	r2, r0
 8005728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff ff80 	bl	8005634 <__NVIC_SetPriority>
}
 8005734:	bf00      	nop
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff ff30 	bl	80055b0 <__NVIC_EnableIRQ>
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff ff40 	bl	80055ec <__NVIC_DisableIRQ>
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e098      	b.n	80058b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	4b4d      	ldr	r3, [pc, #308]	; (80058c4 <HAL_DMA_Init+0x150>)
 800578e:	429a      	cmp	r2, r3
 8005790:	d80f      	bhi.n	80057b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	4b4b      	ldr	r3, [pc, #300]	; (80058c8 <HAL_DMA_Init+0x154>)
 800579a:	4413      	add	r3, r2
 800579c:	4a4b      	ldr	r2, [pc, #300]	; (80058cc <HAL_DMA_Init+0x158>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	009a      	lsls	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a48      	ldr	r2, [pc, #288]	; (80058d0 <HAL_DMA_Init+0x15c>)
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
 80057b0:	e00e      	b.n	80057d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	4b46      	ldr	r3, [pc, #280]	; (80058d4 <HAL_DMA_Init+0x160>)
 80057ba:	4413      	add	r3, r2
 80057bc:	4a43      	ldr	r2, [pc, #268]	; (80058cc <HAL_DMA_Init+0x158>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	009a      	lsls	r2, r3, #2
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a42      	ldr	r2, [pc, #264]	; (80058d8 <HAL_DMA_Init+0x164>)
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80057f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800582a:	d039      	beq.n	80058a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	4a27      	ldr	r2, [pc, #156]	; (80058d0 <HAL_DMA_Init+0x15c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d11a      	bne.n	800586c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005836:	4b29      	ldr	r3, [pc, #164]	; (80058dc <HAL_DMA_Init+0x168>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	f003 031c 	and.w	r3, r3, #28
 8005842:	210f      	movs	r1, #15
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	4924      	ldr	r1, [pc, #144]	; (80058dc <HAL_DMA_Init+0x168>)
 800584c:	4013      	ands	r3, r2
 800584e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005850:	4b22      	ldr	r3, [pc, #136]	; (80058dc <HAL_DMA_Init+0x168>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585c:	f003 031c 	and.w	r3, r3, #28
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	491d      	ldr	r1, [pc, #116]	; (80058dc <HAL_DMA_Init+0x168>)
 8005866:	4313      	orrs	r3, r2
 8005868:	600b      	str	r3, [r1, #0]
 800586a:	e019      	b.n	80058a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800586c:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <HAL_DMA_Init+0x16c>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	f003 031c 	and.w	r3, r3, #28
 8005878:	210f      	movs	r1, #15
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	4917      	ldr	r1, [pc, #92]	; (80058e0 <HAL_DMA_Init+0x16c>)
 8005882:	4013      	ands	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005886:	4b16      	ldr	r3, [pc, #88]	; (80058e0 <HAL_DMA_Init+0x16c>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6859      	ldr	r1, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	f003 031c 	and.w	r3, r3, #28
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	4911      	ldr	r1, [pc, #68]	; (80058e0 <HAL_DMA_Init+0x16c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	40020407 	.word	0x40020407
 80058c8:	bffdfff8 	.word	0xbffdfff8
 80058cc:	cccccccd 	.word	0xcccccccd
 80058d0:	40020000 	.word	0x40020000
 80058d4:	bffdfbf8 	.word	0xbffdfbf8
 80058d8:	40020400 	.word	0x40020400
 80058dc:	400200a8 	.word	0x400200a8
 80058e0:	400204a8 	.word	0x400204a8

080058e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_DMA_Start_IT+0x20>
 8005900:	2302      	movs	r3, #2
 8005902:	e04b      	b.n	800599c <HAL_DMA_Start_IT+0xb8>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d13a      	bne.n	800598e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f921 	bl	8005b84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 020e 	orr.w	r2, r2, #14
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e00f      	b.n	800597c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0204 	bic.w	r2, r2, #4
 800596a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 020a 	orr.w	r2, r2, #10
 800597a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e005      	b.n	800599a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005996:	2302      	movs	r3, #2
 8005998:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d005      	beq.n	80059c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2204      	movs	r2, #4
 80059c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	73fb      	strb	r3, [r7, #15]
 80059c6:	e029      	b.n	8005a1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 020e 	bic.w	r2, r2, #14
 80059d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	f003 021c 	and.w	r2, r3, #28
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	2101      	movs	r1, #1
 80059f6:	fa01 f202 	lsl.w	r2, r1, r2
 80059fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
    }
  }
  return status;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	f003 031c 	and.w	r3, r3, #28
 8005a46:	2204      	movs	r2, #4
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d026      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x7a>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d021      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0204 	bic.w	r2, r2, #4
 8005a78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	f003 021c 	and.w	r2, r3, #28
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2104      	movs	r1, #4
 8005a88:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d071      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005a9e:	e06c      	b.n	8005b7a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa4:	f003 031c 	and.w	r3, r3, #28
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d02e      	beq.n	8005b12 <HAL_DMA_IRQHandler+0xec>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d029      	beq.n	8005b12 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 020a 	bic.w	r2, r2, #10
 8005ada:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	f003 021c 	and.w	r2, r3, #28
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	2102      	movs	r1, #2
 8005af2:	fa01 f202 	lsl.w	r2, r1, r2
 8005af6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d038      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005b10:	e033      	b.n	8005b7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f003 031c 	and.w	r3, r3, #28
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d02a      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x156>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d025      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 020e 	bic.w	r2, r2, #14
 8005b3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	f003 021c 	and.w	r2, r3, #28
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
}
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b96:	f003 021c 	and.w	r2, r3, #28
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d108      	bne.n	8005bc8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005bc6:	e007      	b.n	8005bd8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bf2:	e17f      	b.n	8005ef4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8171 	beq.w	8005eee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d00b      	beq.n	8005c2c <HAL_GPIO_Init+0x48>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d007      	beq.n	8005c2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c20:	2b11      	cmp	r3, #17
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b12      	cmp	r3, #18
 8005c2a:	d130      	bne.n	8005c8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	2203      	movs	r2, #3
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4013      	ands	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c62:	2201      	movs	r2, #1
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 0201 	and.w	r2, r3, #1
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d118      	bne.n	8005ccc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4013      	ands	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	08db      	lsrs	r3, r3, #3
 8005cb6:	f003 0201 	and.w	r2, r3, #1
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0x128>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b12      	cmp	r3, #18
 8005d0a:	d123      	bne.n	8005d54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	220f      	movs	r2, #15
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	08da      	lsrs	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	6939      	ldr	r1, [r7, #16]
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0203 	and.w	r2, r3, #3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80ac 	beq.w	8005eee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d96:	4b5f      	ldr	r3, [pc, #380]	; (8005f14 <HAL_GPIO_Init+0x330>)
 8005d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9a:	4a5e      	ldr	r2, [pc, #376]	; (8005f14 <HAL_GPIO_Init+0x330>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6613      	str	r3, [r2, #96]	; 0x60
 8005da2:	4b5c      	ldr	r3, [pc, #368]	; (8005f14 <HAL_GPIO_Init+0x330>)
 8005da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	60bb      	str	r3, [r7, #8]
 8005dac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005dae:	4a5a      	ldr	r2, [pc, #360]	; (8005f18 <HAL_GPIO_Init+0x334>)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	3302      	adds	r3, #2
 8005db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	220f      	movs	r2, #15
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dd8:	d025      	beq.n	8005e26 <HAL_GPIO_Init+0x242>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a4f      	ldr	r2, [pc, #316]	; (8005f1c <HAL_GPIO_Init+0x338>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01f      	beq.n	8005e22 <HAL_GPIO_Init+0x23e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a4e      	ldr	r2, [pc, #312]	; (8005f20 <HAL_GPIO_Init+0x33c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d019      	beq.n	8005e1e <HAL_GPIO_Init+0x23a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a4d      	ldr	r2, [pc, #308]	; (8005f24 <HAL_GPIO_Init+0x340>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d013      	beq.n	8005e1a <HAL_GPIO_Init+0x236>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a4c      	ldr	r2, [pc, #304]	; (8005f28 <HAL_GPIO_Init+0x344>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00d      	beq.n	8005e16 <HAL_GPIO_Init+0x232>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a4b      	ldr	r2, [pc, #300]	; (8005f2c <HAL_GPIO_Init+0x348>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <HAL_GPIO_Init+0x22e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <HAL_GPIO_Init+0x34c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d101      	bne.n	8005e0e <HAL_GPIO_Init+0x22a>
 8005e0a:	2306      	movs	r3, #6
 8005e0c:	e00c      	b.n	8005e28 <HAL_GPIO_Init+0x244>
 8005e0e:	2307      	movs	r3, #7
 8005e10:	e00a      	b.n	8005e28 <HAL_GPIO_Init+0x244>
 8005e12:	2305      	movs	r3, #5
 8005e14:	e008      	b.n	8005e28 <HAL_GPIO_Init+0x244>
 8005e16:	2304      	movs	r3, #4
 8005e18:	e006      	b.n	8005e28 <HAL_GPIO_Init+0x244>
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e004      	b.n	8005e28 <HAL_GPIO_Init+0x244>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e002      	b.n	8005e28 <HAL_GPIO_Init+0x244>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <HAL_GPIO_Init+0x244>
 8005e26:	2300      	movs	r3, #0
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	f002 0203 	and.w	r2, r2, #3
 8005e2e:	0092      	lsls	r2, r2, #2
 8005e30:	4093      	lsls	r3, r2
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e38:	4937      	ldr	r1, [pc, #220]	; (8005f18 <HAL_GPIO_Init+0x334>)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	089b      	lsrs	r3, r3, #2
 8005e3e:	3302      	adds	r3, #2
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e46:	4b3b      	ldr	r3, [pc, #236]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	43db      	mvns	r3, r3
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4013      	ands	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e6a:	4a32      	ldr	r2, [pc, #200]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005e70:	4b30      	ldr	r3, [pc, #192]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e94:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e9a:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	43db      	mvns	r3, r3
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ec4:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ee8:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <HAL_GPIO_Init+0x350>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	fa22 f303 	lsr.w	r3, r2, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f47f ae78 	bne.w	8005bf4 <HAL_GPIO_Init+0x10>
  }
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	48000400 	.word	0x48000400
 8005f20:	48000800 	.word	0x48000800
 8005f24:	48000c00 	.word	0x48000c00
 8005f28:	48001000 	.word	0x48001000
 8005f2c:	48001400 	.word	0x48001400
 8005f30:	48001800 	.word	0x48001800
 8005f34:	40010400 	.word	0x40010400

08005f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	807b      	strh	r3, [r7, #2]
 8005f44:	4613      	mov	r3, r2
 8005f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f48:	787b      	ldrb	r3, [r7, #1]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f4e:	887a      	ldrh	r2, [r7, #2]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f54:	e002      	b.n	8005f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f56:	887a      	ldrh	r2, [r7, #2]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f74:	695a      	ldr	r2, [r3, #20]
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d006      	beq.n	8005f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f7e:	4a05      	ldr	r2, [pc, #20]	; (8005f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fc fad6 	bl	8002538 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40010400 	.word	0x40010400

08005f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e081      	b.n	80060ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fd f956 	bl	8003270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2224      	movs	r2, #36	; 0x24
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fe8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ff8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d107      	bne.n	8006012 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	e006      	b.n	8006020 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800601e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d104      	bne.n	8006032 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006044:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006054:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	ea42 0103 	orr.w	r1, r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d138      	bne.n	800613e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e032      	b.n	8006140 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2224      	movs	r2, #36	; 0x24
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006108:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b20      	cmp	r3, #32
 8006160:	d139      	bne.n	80061d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800616c:	2302      	movs	r3, #2
 800616e:	e033      	b.n	80061d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800619e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f042 0201 	orr.w	r2, r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061d6:	2302      	movs	r3, #2
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <HAL_PWREx_GetVoltageRange+0x18>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40007000 	.word	0x40007000

08006200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620e:	d130      	bne.n	8006272 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006210:	4b23      	ldr	r3, [pc, #140]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800621c:	d038      	beq.n	8006290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800621e:	4b20      	ldr	r3, [pc, #128]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006226:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800622c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800622e:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2232      	movs	r2, #50	; 0x32
 8006234:	fb02 f303 	mul.w	r3, r2, r3
 8006238:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800623a:	fba2 2303 	umull	r2, r3, r2, r3
 800623e:	0c9b      	lsrs	r3, r3, #18
 8006240:	3301      	adds	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006244:	e002      	b.n	800624c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3b01      	subs	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800624c:	4b14      	ldr	r3, [pc, #80]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006258:	d102      	bne.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x60>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f2      	bne.n	8006246 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800626c:	d110      	bne.n	8006290 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e00f      	b.n	8006292 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627e:	d007      	beq.n	8006290 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006288:	4a05      	ldr	r2, [pc, #20]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800628a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800628e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40007000 	.word	0x40007000
 80062a4:	2000013c 	.word	0x2000013c
 80062a8:	431bde83 	.word	0x431bde83

080062ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e3d4      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062be:	4ba1      	ldr	r3, [pc, #644]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
 80062c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062c8:	4b9e      	ldr	r3, [pc, #632]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80e4 	beq.w	80064a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_RCC_OscConfig+0x4a>
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b0c      	cmp	r3, #12
 80062ea:	f040 808b 	bne.w	8006404 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	f040 8087 	bne.w	8006404 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062f6:	4b93      	ldr	r3, [pc, #588]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_RCC_OscConfig+0x62>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e3ac      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	4b8c      	ldr	r3, [pc, #560]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <HAL_RCC_OscConfig+0x7c>
 800631e:	4b89      	ldr	r3, [pc, #548]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006326:	e005      	b.n	8006334 <HAL_RCC_OscConfig+0x88>
 8006328:	4b86      	ldr	r3, [pc, #536]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800632a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006334:	4293      	cmp	r3, r2
 8006336:	d223      	bcs.n	8006380 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fd71 	bl	8006e24 <RCC_SetFlashLatencyFromMSIRange>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e38d      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800634c:	4b7d      	ldr	r3, [pc, #500]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a7c      	ldr	r2, [pc, #496]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006352:	f043 0308 	orr.w	r3, r3, #8
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	4b7a      	ldr	r3, [pc, #488]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4977      	ldr	r1, [pc, #476]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006366:	4313      	orrs	r3, r2
 8006368:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800636a:	4b76      	ldr	r3, [pc, #472]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	4972      	ldr	r1, [pc, #456]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800637a:	4313      	orrs	r3, r2
 800637c:	604b      	str	r3, [r1, #4]
 800637e:	e025      	b.n	80063cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006380:	4b70      	ldr	r3, [pc, #448]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a6f      	ldr	r2, [pc, #444]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006386:	f043 0308 	orr.w	r3, r3, #8
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	4b6d      	ldr	r3, [pc, #436]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	496a      	ldr	r1, [pc, #424]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800639e:	4b69      	ldr	r3, [pc, #420]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	4965      	ldr	r1, [pc, #404]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fd31 	bl	8006e24 <RCC_SetFlashLatencyFromMSIRange>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e34d      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063cc:	f000 fc36 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 80063d0:	4602      	mov	r2, r0
 80063d2:	4b5c      	ldr	r3, [pc, #368]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	091b      	lsrs	r3, r3, #4
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	495a      	ldr	r1, [pc, #360]	; (8006548 <HAL_RCC_OscConfig+0x29c>)
 80063de:	5ccb      	ldrb	r3, [r1, r3]
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	4a58      	ldr	r2, [pc, #352]	; (800654c <HAL_RCC_OscConfig+0x2a0>)
 80063ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063ec:	4b58      	ldr	r3, [pc, #352]	; (8006550 <HAL_RCC_OscConfig+0x2a4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fd fa87 	bl	8003904 <HAL_InitTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d052      	beq.n	80064a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	e331      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d032      	beq.n	8006472 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800640c:	4b4d      	ldr	r3, [pc, #308]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a4c      	ldr	r2, [pc, #304]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006418:	f7fd feae 	bl	8004178 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006420:	f7fd feaa 	bl	8004178 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e31a      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006432:	4b44      	ldr	r3, [pc, #272]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0f0      	beq.n	8006420 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800643e:	4b41      	ldr	r3, [pc, #260]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a40      	ldr	r2, [pc, #256]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006444:	f043 0308 	orr.w	r3, r3, #8
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	4b3e      	ldr	r3, [pc, #248]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	493b      	ldr	r1, [pc, #236]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006458:	4313      	orrs	r3, r2
 800645a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800645c:	4b39      	ldr	r3, [pc, #228]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	4936      	ldr	r1, [pc, #216]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800646c:	4313      	orrs	r3, r2
 800646e:	604b      	str	r3, [r1, #4]
 8006470:	e01a      	b.n	80064a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006472:	4b34      	ldr	r3, [pc, #208]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a33      	ldr	r2, [pc, #204]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800647e:	f7fd fe7b 	bl	8004178 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006484:	e008      	b.n	8006498 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006486:	f7fd fe77 	bl	8004178 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e2e7      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006498:	4b2a      	ldr	r3, [pc, #168]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0302 	and.w	r3, r3, #2
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f0      	bne.n	8006486 <HAL_RCC_OscConfig+0x1da>
 80064a4:	e000      	b.n	80064a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d074      	beq.n	800659e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d005      	beq.n	80064c6 <HAL_RCC_OscConfig+0x21a>
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d10e      	bne.n	80064de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d10b      	bne.n	80064de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c6:	4b1f      	ldr	r3, [pc, #124]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d064      	beq.n	800659c <HAL_RCC_OscConfig+0x2f0>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d160      	bne.n	800659c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e2c4      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e6:	d106      	bne.n	80064f6 <HAL_RCC_OscConfig+0x24a>
 80064e8:	4b16      	ldr	r3, [pc, #88]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a15      	ldr	r2, [pc, #84]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 80064ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e01d      	b.n	8006532 <HAL_RCC_OscConfig+0x286>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064fe:	d10c      	bne.n	800651a <HAL_RCC_OscConfig+0x26e>
 8006500:	4b10      	ldr	r3, [pc, #64]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a0f      	ldr	r2, [pc, #60]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0c      	ldr	r2, [pc, #48]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	e00b      	b.n	8006532 <HAL_RCC_OscConfig+0x286>
 800651a:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b07      	ldr	r3, [pc, #28]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a06      	ldr	r2, [pc, #24]	; (8006544 <HAL_RCC_OscConfig+0x298>)
 800652c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006530:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01c      	beq.n	8006574 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653a:	f7fd fe1d 	bl	8004178 <HAL_GetTick>
 800653e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006540:	e011      	b.n	8006566 <HAL_RCC_OscConfig+0x2ba>
 8006542:	bf00      	nop
 8006544:	40021000 	.word	0x40021000
 8006548:	08010324 	.word	0x08010324
 800654c:	2000013c 	.word	0x2000013c
 8006550:	20000140 	.word	0x20000140
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006554:	f7fd fe10 	bl	8004178 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b64      	cmp	r3, #100	; 0x64
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e280      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006566:	4baf      	ldr	r3, [pc, #700]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0f0      	beq.n	8006554 <HAL_RCC_OscConfig+0x2a8>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fd fe00 	bl	8004178 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800657c:	f7fd fdfc 	bl	8004178 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b64      	cmp	r3, #100	; 0x64
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e26c      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800658e:	4ba5      	ldr	r3, [pc, #660]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x2d0>
 800659a:	e000      	b.n	800659e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d060      	beq.n	800666c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d005      	beq.n	80065bc <HAL_RCC_OscConfig+0x310>
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2b0c      	cmp	r3, #12
 80065b4:	d119      	bne.n	80065ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d116      	bne.n	80065ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065bc:	4b99      	ldr	r3, [pc, #612]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_RCC_OscConfig+0x328>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e249      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d4:	4b93      	ldr	r3, [pc, #588]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	061b      	lsls	r3, r3, #24
 80065e2:	4990      	ldr	r1, [pc, #576]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065e8:	e040      	b.n	800666c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d023      	beq.n	800663a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065f2:	4b8c      	ldr	r3, [pc, #560]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a8b      	ldr	r2, [pc, #556]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80065f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fe:	f7fd fdbb 	bl	8004178 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006606:	f7fd fdb7 	bl	8004178 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e227      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006618:	4b82      	ldr	r3, [pc, #520]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006624:	4b7f      	ldr	r3, [pc, #508]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	497c      	ldr	r1, [pc, #496]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
 8006638:	e018      	b.n	800666c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800663a:	4b7a      	ldr	r3, [pc, #488]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a79      	ldr	r2, [pc, #484]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006646:	f7fd fd97 	bl	8004178 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664e:	f7fd fd93 	bl	8004178 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e203      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006660:	4b70      	ldr	r3, [pc, #448]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f0      	bne.n	800664e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d03c      	beq.n	80066f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01c      	beq.n	80066ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006680:	4b68      	ldr	r3, [pc, #416]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006686:	4a67      	ldr	r2, [pc, #412]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006690:	f7fd fd72 	bl	8004178 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006698:	f7fd fd6e 	bl	8004178 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e1de      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066aa:	4b5e      	ldr	r3, [pc, #376]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80066ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0ef      	beq.n	8006698 <HAL_RCC_OscConfig+0x3ec>
 80066b8:	e01b      	b.n	80066f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ba:	4b5a      	ldr	r3, [pc, #360]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80066bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066c0:	4a58      	ldr	r2, [pc, #352]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ca:	f7fd fd55 	bl	8004178 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066d0:	e008      	b.n	80066e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d2:	f7fd fd51 	bl	8004178 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e1c1      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066e4:	4b4f      	ldr	r3, [pc, #316]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80066e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1ef      	bne.n	80066d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80a6 	beq.w	800684c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006700:	2300      	movs	r3, #0
 8006702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006704:	4b47      	ldr	r3, [pc, #284]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10d      	bne.n	800672c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006710:	4b44      	ldr	r3, [pc, #272]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006714:	4a43      	ldr	r2, [pc, #268]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800671a:	6593      	str	r3, [r2, #88]	; 0x58
 800671c:	4b41      	ldr	r3, [pc, #260]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 800671e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006728:	2301      	movs	r3, #1
 800672a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800672c:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <HAL_RCC_OscConfig+0x57c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d118      	bne.n	800676a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006738:	4b3b      	ldr	r3, [pc, #236]	; (8006828 <HAL_RCC_OscConfig+0x57c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3a      	ldr	r2, [pc, #232]	; (8006828 <HAL_RCC_OscConfig+0x57c>)
 800673e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006744:	f7fd fd18 	bl	8004178 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674c:	f7fd fd14 	bl	8004178 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e184      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800675e:	4b32      	ldr	r3, [pc, #200]	; (8006828 <HAL_RCC_OscConfig+0x57c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d108      	bne.n	8006784 <HAL_RCC_OscConfig+0x4d8>
 8006772:	4b2c      	ldr	r3, [pc, #176]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006778:	4a2a      	ldr	r2, [pc, #168]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006782:	e024      	b.n	80067ce <HAL_RCC_OscConfig+0x522>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b05      	cmp	r3, #5
 800678a:	d110      	bne.n	80067ae <HAL_RCC_OscConfig+0x502>
 800678c:	4b25      	ldr	r3, [pc, #148]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 800678e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006792:	4a24      	ldr	r2, [pc, #144]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 8006794:	f043 0304 	orr.w	r3, r3, #4
 8006798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800679c:	4b21      	ldr	r3, [pc, #132]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	4a20      	ldr	r2, [pc, #128]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067ac:	e00f      	b.n	80067ce <HAL_RCC_OscConfig+0x522>
 80067ae:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b4:	4a1b      	ldr	r2, [pc, #108]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80067b6:	f023 0301 	bic.w	r3, r3, #1
 80067ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067be:	4b19      	ldr	r3, [pc, #100]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	4a17      	ldr	r2, [pc, #92]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80067c6:	f023 0304 	bic.w	r3, r3, #4
 80067ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d6:	f7fd fccf 	bl	8004178 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067dc:	e00a      	b.n	80067f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067de:	f7fd fccb 	bl	8004178 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e139      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_RCC_OscConfig+0x578>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0ed      	beq.n	80067de <HAL_RCC_OscConfig+0x532>
 8006802:	e01a      	b.n	800683a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006804:	f7fd fcb8 	bl	8004178 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800680a:	e00f      	b.n	800682c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680c:	f7fd fcb4 	bl	8004178 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	; 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d906      	bls.n	800682c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e122      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000
 8006828:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800682c:	4b90      	ldr	r3, [pc, #576]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 800682e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e8      	bne.n	800680c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800683a:	7ffb      	ldrb	r3, [r7, #31]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d105      	bne.n	800684c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006840:	4b8b      	ldr	r3, [pc, #556]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006844:	4a8a      	ldr	r2, [pc, #552]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800684a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8108 	beq.w	8006a66 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	2b02      	cmp	r3, #2
 800685c:	f040 80d0 	bne.w	8006a00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006860:	4b83      	ldr	r3, [pc, #524]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f003 0203 	and.w	r2, r3, #3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006870:	429a      	cmp	r2, r3
 8006872:	d130      	bne.n	80068d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	3b01      	subs	r3, #1
 8006880:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006882:	429a      	cmp	r2, r3
 8006884:	d127      	bne.n	80068d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006892:	429a      	cmp	r2, r3
 8006894:	d11f      	bne.n	80068d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068a0:	2a07      	cmp	r2, #7
 80068a2:	bf14      	ite	ne
 80068a4:	2201      	movne	r2, #1
 80068a6:	2200      	moveq	r2, #0
 80068a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d113      	bne.n	80068d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	3b01      	subs	r3, #1
 80068bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80068be:	429a      	cmp	r2, r3
 80068c0:	d109      	bne.n	80068d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	085b      	lsrs	r3, r3, #1
 80068ce:	3b01      	subs	r3, #1
 80068d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d06e      	beq.n	80069b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	d069      	beq.n	80069b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80068dc:	4b64      	ldr	r3, [pc, #400]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80068e8:	4b61      	ldr	r3, [pc, #388]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0b7      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80068f8:	4b5d      	ldr	r3, [pc, #372]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a5c      	ldr	r2, [pc, #368]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80068fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006902:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006904:	f7fd fc38 	bl	8004178 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800690c:	f7fd fc34 	bl	8004178 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e0a4      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800691e:	4b54      	ldr	r3, [pc, #336]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1f0      	bne.n	800690c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800692a:	4b51      	ldr	r3, [pc, #324]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	4b51      	ldr	r3, [pc, #324]	; (8006a74 <HAL_RCC_OscConfig+0x7c8>)
 8006930:	4013      	ands	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800693a:	3a01      	subs	r2, #1
 800693c:	0112      	lsls	r2, r2, #4
 800693e:	4311      	orrs	r1, r2
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006944:	0212      	lsls	r2, r2, #8
 8006946:	4311      	orrs	r1, r2
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800694c:	0852      	lsrs	r2, r2, #1
 800694e:	3a01      	subs	r2, #1
 8006950:	0552      	lsls	r2, r2, #21
 8006952:	4311      	orrs	r1, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006958:	0852      	lsrs	r2, r2, #1
 800695a:	3a01      	subs	r2, #1
 800695c:	0652      	lsls	r2, r2, #25
 800695e:	4311      	orrs	r1, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006964:	0912      	lsrs	r2, r2, #4
 8006966:	0452      	lsls	r2, r2, #17
 8006968:	430a      	orrs	r2, r1
 800696a:	4941      	ldr	r1, [pc, #260]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 800696c:	4313      	orrs	r3, r2
 800696e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006970:	4b3f      	ldr	r3, [pc, #252]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a3e      	ldr	r2, [pc, #248]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800697a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800697c:	4b3c      	ldr	r3, [pc, #240]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a3b      	ldr	r2, [pc, #236]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006986:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006988:	f7fd fbf6 	bl	8004178 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006990:	f7fd fbf2 	bl	8004178 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e062      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069a2:	4b33      	ldr	r3, [pc, #204]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069ae:	e05a      	b.n	8006a66 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e059      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069b4:	4b2e      	ldr	r3, [pc, #184]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d152      	bne.n	8006a66 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80069c0:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a2a      	ldr	r2, [pc, #168]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80069c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069cc:	4b28      	ldr	r3, [pc, #160]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4a27      	ldr	r2, [pc, #156]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80069d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069d8:	f7fd fbce 	bl	8004178 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e0:	f7fd fbca 	bl	8004178 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e03a      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f2:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x734>
 80069fe:	e032      	b.n	8006a66 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b0c      	cmp	r3, #12
 8006a04:	d02d      	beq.n	8006a62 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a10:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d105      	bne.n	8006a2a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a1e:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a24:	f023 0303 	bic.w	r3, r3, #3
 8006a28:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	4a10      	ldr	r2, [pc, #64]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3a:	f7fd fb9d 	bl	8004178 <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a40:	e008      	b.n	8006a54 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a42:	f7fd fb99 	bl	8004178 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e009      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <HAL_RCC_OscConfig+0x7c4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f0      	bne.n	8006a42 <HAL_RCC_OscConfig+0x796>
 8006a60:	e001      	b.n	8006a66 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40021000 	.word	0x40021000
 8006a74:	f99d808c 	.word	0xf99d808c

08006a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0c8      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a8c:	4b66      	ldr	r3, [pc, #408]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d910      	bls.n	8006abc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9a:	4b63      	ldr	r3, [pc, #396]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f023 0207 	bic.w	r2, r3, #7
 8006aa2:	4961      	ldr	r1, [pc, #388]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aaa:	4b5f      	ldr	r3, [pc, #380]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d001      	beq.n	8006abc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0b0      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d04c      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d107      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad0:	4b56      	ldr	r3, [pc, #344]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d121      	bne.n	8006b20 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e09e      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d107      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ae8:	4b50      	ldr	r3, [pc, #320]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d115      	bne.n	8006b20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e092      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d107      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b00:	4b4a      	ldr	r3, [pc, #296]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e086      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b10:	4b46      	ldr	r3, [pc, #280]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e07e      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b20:	4b42      	ldr	r3, [pc, #264]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f023 0203 	bic.w	r2, r3, #3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	493f      	ldr	r1, [pc, #252]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b32:	f7fd fb21 	bl	8004178 <HAL_GetTick>
 8006b36:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b38:	e00a      	b.n	8006b50 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b3a:	f7fd fb1d 	bl	8004178 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e066      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b50:	4b36      	ldr	r3, [pc, #216]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 020c 	and.w	r2, r3, #12
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d1eb      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b6e:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	492c      	ldr	r1, [pc, #176]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b80:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d210      	bcs.n	8006bb0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8e:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f023 0207 	bic.w	r2, r3, #7
 8006b96:	4924      	ldr	r1, [pc, #144]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9e:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <HAL_RCC_ClockConfig+0x1b0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d001      	beq.n	8006bb0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e036      	b.n	8006c1e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bbc:	4b1b      	ldr	r3, [pc, #108]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4918      	ldr	r1, [pc, #96]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bda:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	4910      	ldr	r1, [pc, #64]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bee:	f000 f825 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <HAL_RCC_ClockConfig+0x1b4>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	490c      	ldr	r1, [pc, #48]	; (8006c30 <HAL_RCC_ClockConfig+0x1b8>)
 8006c00:	5ccb      	ldrb	r3, [r1, r3]
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c0e:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <HAL_RCC_ClockConfig+0x1c0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fc fe76 	bl	8003904 <HAL_InitTick>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	40022000 	.word	0x40022000
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	08010324 	.word	0x08010324
 8006c34:	2000013c 	.word	0x2000013c
 8006c38:	20000140 	.word	0x20000140

08006c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b089      	sub	sp, #36	; 0x24
 8006c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	2300      	movs	r3, #0
 8006c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c4a:	4b3e      	ldr	r3, [pc, #248]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 030c 	and.w	r3, r3, #12
 8006c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c54:	4b3b      	ldr	r3, [pc, #236]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0x34>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b0c      	cmp	r3, #12
 8006c68:	d121      	bne.n	8006cae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d11e      	bne.n	8006cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c70:	4b34      	ldr	r3, [pc, #208]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c7c:	4b31      	ldr	r3, [pc, #196]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	e005      	b.n	8006c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c8c:	4b2d      	ldr	r3, [pc, #180]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	091b      	lsrs	r3, r3, #4
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c98:	4a2b      	ldr	r2, [pc, #172]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006cac:	e00a      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d102      	bne.n	8006cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e004      	b.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d101      	bne.n	8006cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b0c      	cmp	r3, #12
 8006cc8:	d134      	bne.n	8006d34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006cca:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCC_GetSysClockFreq+0xa6>
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d003      	beq.n	8006ce8 <HAL_RCC_GetSysClockFreq+0xac>
 8006ce0:	e005      	b.n	8006cee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ce2:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ce4:	617b      	str	r3, [r7, #20]
      break;
 8006ce6:	e005      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ce8:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8006cea:	617b      	str	r3, [r7, #20]
      break;
 8006cec:	e002      	b.n	8006cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	617b      	str	r3, [r7, #20]
      break;
 8006cf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cf4:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	3301      	adds	r3, #1
 8006d00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d02:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	fb02 f203 	mul.w	r2, r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	0e5b      	lsrs	r3, r3, #25
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	3301      	adds	r3, #1
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006d34:	69bb      	ldr	r3, [r7, #24]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3724      	adds	r7, #36	; 0x24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40021000 	.word	0x40021000
 8006d48:	0801033c 	.word	0x0801033c
 8006d4c:	00f42400 	.word	0x00f42400

08006d50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d54:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d56:	681b      	ldr	r3, [r3, #0]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	2000013c 	.word	0x2000013c

08006d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d6c:	f7ff fff0 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 8006d70:	4602      	mov	r2, r0
 8006d72:	4b06      	ldr	r3, [pc, #24]	; (8006d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	0a1b      	lsrs	r3, r3, #8
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	4904      	ldr	r1, [pc, #16]	; (8006d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d7e:	5ccb      	ldrb	r3, [r1, r3]
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	08010334 	.word	0x08010334

08006d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d98:	f7ff ffda 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	0adb      	lsrs	r3, r3, #11
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	4904      	ldr	r1, [pc, #16]	; (8006dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006daa:	5ccb      	ldrb	r3, [r1, r3]
 8006dac:	f003 031f 	and.w	r3, r3, #31
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	08010334 	.word	0x08010334

08006dc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	220f      	movs	r2, #15
 8006dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006dd0:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0203 	and.w	r2, r3, #3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006df4:	4b09      	ldr	r3, [pc, #36]	; (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	08db      	lsrs	r3, r3, #3
 8006dfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <HAL_RCC_GetClockConfig+0x60>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0207 	and.w	r2, r3, #7
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	601a      	str	r2, [r3, #0]
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40021000 	.word	0x40021000
 8006e20:	40022000 	.word	0x40022000

08006e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e30:	4b2a      	ldr	r3, [pc, #168]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e3c:	f7ff f9d2 	bl	80061e4 <HAL_PWREx_GetVoltageRange>
 8006e40:	6178      	str	r0, [r7, #20]
 8006e42:	e014      	b.n	8006e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e44:	4b25      	ldr	r3, [pc, #148]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e48:	4a24      	ldr	r2, [pc, #144]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e50:	4b22      	ldr	r3, [pc, #136]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e5c:	f7ff f9c2 	bl	80061e4 <HAL_PWREx_GetVoltageRange>
 8006e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e62:	4b1e      	ldr	r3, [pc, #120]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e66:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d10b      	bne.n	8006e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b80      	cmp	r3, #128	; 0x80
 8006e7a:	d919      	bls.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2ba0      	cmp	r3, #160	; 0xa0
 8006e80:	d902      	bls.n	8006e88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e82:	2302      	movs	r3, #2
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e013      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e88:	2301      	movs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e010      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d902      	bls.n	8006e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e94:	2303      	movs	r3, #3
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	e00a      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	d102      	bne.n	8006ea6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	e004      	b.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b70      	cmp	r3, #112	; 0x70
 8006eaa:	d101      	bne.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006eac:	2301      	movs	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f023 0207 	bic.w	r2, r3, #7
 8006eb8:	4909      	ldr	r1, [pc, #36]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d001      	beq.n	8006ed2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	40022000 	.word	0x40022000

08006ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006eec:	2300      	movs	r3, #0
 8006eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d041      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f08:	d02a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f0e:	d824      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f14:	d008      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f1a:	d81e      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f24:	d010      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f26:	e018      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f28:	4b86      	ldr	r3, [pc, #536]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4a85      	ldr	r2, [pc, #532]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f34:	e015      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fabb 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f46:	e00c      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3320      	adds	r3, #32
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fba6 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f58:	e003      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8006f5e:	e000      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f68:	4b76      	ldr	r3, [pc, #472]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f76:	4973      	ldr	r1, [pc, #460]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f7e:	e001      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	7cfb      	ldrb	r3, [r7, #19]
 8006f82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d041      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f98:	d02a      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006f9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f9e:	d824      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa4:	d008      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006faa:	d81e      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fb4:	d010      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006fb6:	e018      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fb8:	4b62      	ldr	r3, [pc, #392]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a61      	ldr	r2, [pc, #388]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fc4:	e015      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fa73 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fd6:	e00c      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3320      	adds	r3, #32
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fb5e 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fe8:	e003      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	74fb      	strb	r3, [r7, #19]
      break;
 8006fee:	e000      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff2:	7cfb      	ldrb	r3, [r7, #19]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ff8:	4b52      	ldr	r3, [pc, #328]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007006:	494f      	ldr	r1, [pc, #316]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800700e:	e001      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007010:	7cfb      	ldrb	r3, [r7, #19]
 8007012:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80a0 	beq.w	8007162 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007022:	2300      	movs	r3, #0
 8007024:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007026:	4b47      	ldr	r3, [pc, #284]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00d      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703c:	4b41      	ldr	r3, [pc, #260]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800703e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007040:	4a40      	ldr	r2, [pc, #256]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007046:	6593      	str	r3, [r2, #88]	; 0x58
 8007048:	4b3e      	ldr	r3, [pc, #248]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800704a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007054:	2301      	movs	r3, #1
 8007056:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007058:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a3a      	ldr	r2, [pc, #232]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800705e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007064:	f7fd f888 	bl	8004178 <HAL_GetTick>
 8007068:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800706a:	e009      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706c:	f7fd f884 	bl	8004178 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d902      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	74fb      	strb	r3, [r7, #19]
        break;
 800707e:	e005      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007080:	4b31      	ldr	r3, [pc, #196]	; (8007148 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0ef      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800708c:	7cfb      	ldrb	r3, [r7, #19]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d15c      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007092:	4b2c      	ldr	r3, [pc, #176]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01f      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d019      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070b0:	4b24      	ldr	r3, [pc, #144]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070bc:	4b21      	ldr	r3, [pc, #132]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c2:	4a20      	ldr	r2, [pc, #128]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070cc:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d2:	4a1c      	ldr	r2, [pc, #112]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070dc:	4a19      	ldr	r2, [pc, #100]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d016      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ee:	f7fd f843 	bl	8004178 <HAL_GetTick>
 80070f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070f4:	e00b      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f6:	f7fd f83f 	bl	8004178 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	4293      	cmp	r3, r2
 8007106:	d902      	bls.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	74fb      	strb	r3, [r7, #19]
            break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800710e:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0ec      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800711c:	7cfb      	ldrb	r3, [r7, #19]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10c      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007132:	4904      	ldr	r1, [pc, #16]	; (8007144 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800713a:	e009      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800713c:	7cfb      	ldrb	r3, [r7, #19]
 800713e:	74bb      	strb	r3, [r7, #18]
 8007140:	e006      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007142:	bf00      	nop
 8007144:	40021000 	.word	0x40021000
 8007148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	7cfb      	ldrb	r3, [r7, #19]
 800714e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007150:	7c7b      	ldrb	r3, [r7, #17]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d105      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007156:	4b9e      	ldr	r3, [pc, #632]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	4a9d      	ldr	r2, [pc, #628]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800715c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007160:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800716e:	4b98      	ldr	r3, [pc, #608]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007174:	f023 0203 	bic.w	r2, r3, #3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	4994      	ldr	r1, [pc, #592]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007190:	4b8f      	ldr	r3, [pc, #572]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	f023 020c 	bic.w	r2, r3, #12
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	498c      	ldr	r1, [pc, #560]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071b2:	4b87      	ldr	r3, [pc, #540]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c0:	4983      	ldr	r1, [pc, #524]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00a      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071d4:	4b7e      	ldr	r3, [pc, #504]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	497b      	ldr	r1, [pc, #492]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071f6:	4b76      	ldr	r3, [pc, #472]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007204:	4972      	ldr	r1, [pc, #456]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007218:	4b6d      	ldr	r3, [pc, #436]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800721a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	496a      	ldr	r1, [pc, #424]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007228:	4313      	orrs	r3, r2
 800722a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800723a:	4b65      	ldr	r3, [pc, #404]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	4961      	ldr	r1, [pc, #388]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800725c:	4b5c      	ldr	r3, [pc, #368]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800725e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726a:	4959      	ldr	r1, [pc, #356]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800727e:	4b54      	ldr	r3, [pc, #336]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007284:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728c:	4950      	ldr	r1, [pc, #320]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800728e:	4313      	orrs	r3, r2
 8007290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072a0:	4b4b      	ldr	r3, [pc, #300]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	4948      	ldr	r1, [pc, #288]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072c2:	4b43      	ldr	r3, [pc, #268]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	493f      	ldr	r1, [pc, #252]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d028      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072e4:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f2:	4937      	ldr	r1, [pc, #220]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007302:	d106      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007304:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730e:	60d3      	str	r3, [r2, #12]
 8007310:	e011      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007316:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800731a:	d10c      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3304      	adds	r3, #4
 8007320:	2101      	movs	r1, #1
 8007322:	4618      	mov	r0, r3
 8007324:	f000 f8c8 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800732c:	7cfb      	ldrb	r3, [r7, #19]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007332:	7cfb      	ldrb	r3, [r7, #19]
 8007334:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d028      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007342:	4b23      	ldr	r3, [pc, #140]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	491f      	ldr	r1, [pc, #124]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007360:	d106      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007362:	4b1b      	ldr	r3, [pc, #108]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800736c:	60d3      	str	r3, [r2, #12]
 800736e:	e011      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007378:	d10c      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3304      	adds	r3, #4
 800737e:	2101      	movs	r1, #1
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f899 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800738a:	7cfb      	ldrb	r3, [r7, #19]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d02b      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	4908      	ldr	r1, [pc, #32]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073be:	d109      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4a02      	ldr	r2, [pc, #8]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ca:	60d3      	str	r3, [r2, #12]
 80073cc:	e014      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80073ce:	bf00      	nop
 80073d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073dc:	d10c      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3304      	adds	r3, #4
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 f867 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073ee:	7cfb      	ldrb	r3, [r7, #19]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02f      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007404:	4b2b      	ldr	r3, [pc, #172]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007412:	4928      	ldr	r1, [pc, #160]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007422:	d10d      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	3304      	adds	r3, #4
 8007428:	2102      	movs	r1, #2
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f844 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007430:	4603      	mov	r3, r0
 8007432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007434:	7cfb      	ldrb	r3, [r7, #19]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d014      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800743a:	7cfb      	ldrb	r3, [r7, #19]
 800743c:	74bb      	strb	r3, [r7, #18]
 800743e:	e011      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007448:	d10c      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3320      	adds	r3, #32
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f925 	bl	80076a0 <RCCEx_PLLSAI2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800745a:	7cfb      	ldrb	r3, [r7, #19]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007460:	7cfb      	ldrb	r3, [r7, #19]
 8007462:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00a      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007470:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747e:	490d      	ldr	r1, [pc, #52]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00b      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074a2:	4904      	ldr	r1, [pc, #16]	; (80074b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80074aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40021000 	.word	0x40021000

080074b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074c6:	4b75      	ldr	r3, [pc, #468]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d018      	beq.n	8007504 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80074d2:	4b72      	ldr	r3, [pc, #456]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0203 	and.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d10d      	bne.n	80074fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
       ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80074ea:	4b6c      	ldr	r3, [pc, #432]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
       ||
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d047      	beq.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e044      	b.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d018      	beq.n	800753e <RCCEx_PLLSAI1_Config+0x86>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d825      	bhi.n	800755c <RCCEx_PLLSAI1_Config+0xa4>
 8007510:	2b01      	cmp	r3, #1
 8007512:	d002      	beq.n	800751a <RCCEx_PLLSAI1_Config+0x62>
 8007514:	2b02      	cmp	r3, #2
 8007516:	d009      	beq.n	800752c <RCCEx_PLLSAI1_Config+0x74>
 8007518:	e020      	b.n	800755c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800751a:	4b60      	ldr	r3, [pc, #384]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11d      	bne.n	8007562 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800752a:	e01a      	b.n	8007562 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800752c:	4b5b      	ldr	r3, [pc, #364]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	2b00      	cmp	r3, #0
 8007536:	d116      	bne.n	8007566 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800753c:	e013      	b.n	8007566 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800753e:	4b57      	ldr	r3, [pc, #348]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800754a:	4b54      	ldr	r3, [pc, #336]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800755a:	e006      	b.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
      break;
 8007560:	e004      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800756a:	bf00      	nop
    }

    if(status == HAL_OK)
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10d      	bne.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007572:	4b4a      	ldr	r3, [pc, #296]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6819      	ldr	r1, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	3b01      	subs	r3, #1
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	430b      	orrs	r3, r1
 8007588:	4944      	ldr	r1, [pc, #272]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800758a:	4313      	orrs	r3, r2
 800758c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d17d      	bne.n	8007690 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007594:	4b41      	ldr	r3, [pc, #260]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a40      	ldr	r2, [pc, #256]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800759a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800759e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a0:	f7fc fdea 	bl	8004178 <HAL_GetTick>
 80075a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075a6:	e009      	b.n	80075bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075a8:	f7fc fde6 	bl	8004178 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d902      	bls.n	80075bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	73fb      	strb	r3, [r7, #15]
        break;
 80075ba:	e005      	b.n	80075c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075bc:	4b37      	ldr	r3, [pc, #220]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ef      	bne.n	80075a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d160      	bne.n	8007690 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d111      	bne.n	80075f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075d4:	4b31      	ldr	r3, [pc, #196]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80075dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6892      	ldr	r2, [r2, #8]
 80075e4:	0211      	lsls	r1, r2, #8
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68d2      	ldr	r2, [r2, #12]
 80075ea:	0912      	lsrs	r2, r2, #4
 80075ec:	0452      	lsls	r2, r2, #17
 80075ee:	430a      	orrs	r2, r1
 80075f0:	492a      	ldr	r1, [pc, #168]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	610b      	str	r3, [r1, #16]
 80075f6:	e027      	b.n	8007648 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d112      	bne.n	8007624 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075fe:	4b27      	ldr	r3, [pc, #156]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007606:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6892      	ldr	r2, [r2, #8]
 800760e:	0211      	lsls	r1, r2, #8
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6912      	ldr	r2, [r2, #16]
 8007614:	0852      	lsrs	r2, r2, #1
 8007616:	3a01      	subs	r2, #1
 8007618:	0552      	lsls	r2, r2, #21
 800761a:	430a      	orrs	r2, r1
 800761c:	491f      	ldr	r1, [pc, #124]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	610b      	str	r3, [r1, #16]
 8007622:	e011      	b.n	8007648 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800762c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6892      	ldr	r2, [r2, #8]
 8007634:	0211      	lsls	r1, r2, #8
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6952      	ldr	r2, [r2, #20]
 800763a:	0852      	lsrs	r2, r2, #1
 800763c:	3a01      	subs	r2, #1
 800763e:	0652      	lsls	r2, r2, #25
 8007640:	430a      	orrs	r2, r1
 8007642:	4916      	ldr	r1, [pc, #88]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007644:	4313      	orrs	r3, r2
 8007646:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007648:	4b14      	ldr	r3, [pc, #80]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a13      	ldr	r2, [pc, #76]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800764e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007654:	f7fc fd90 	bl	8004178 <HAL_GetTick>
 8007658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800765a:	e009      	b.n	8007670 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800765c:	f7fc fd8c 	bl	8004178 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d902      	bls.n	8007670 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	73fb      	strb	r3, [r7, #15]
          break;
 800766e:	e005      	b.n	800767c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007670:	4b0a      	ldr	r3, [pc, #40]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0ef      	beq.n	800765c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007682:	4b06      	ldr	r3, [pc, #24]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	4904      	ldr	r1, [pc, #16]	; (800769c <RCCEx_PLLSAI1_Config+0x1e4>)
 800768c:	4313      	orrs	r3, r2
 800768e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40021000 	.word	0x40021000

080076a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076ae:	4b6a      	ldr	r3, [pc, #424]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d018      	beq.n	80076ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80076ba:	4b67      	ldr	r3, [pc, #412]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f003 0203 	and.w	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d10d      	bne.n	80076e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
       ||
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80076d2:	4b61      	ldr	r3, [pc, #388]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	091b      	lsrs	r3, r3, #4
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
       ||
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d047      	beq.n	8007776 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	73fb      	strb	r3, [r7, #15]
 80076ea:	e044      	b.n	8007776 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d018      	beq.n	8007726 <RCCEx_PLLSAI2_Config+0x86>
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d825      	bhi.n	8007744 <RCCEx_PLLSAI2_Config+0xa4>
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d002      	beq.n	8007702 <RCCEx_PLLSAI2_Config+0x62>
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d009      	beq.n	8007714 <RCCEx_PLLSAI2_Config+0x74>
 8007700:	e020      	b.n	8007744 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007702:	4b55      	ldr	r3, [pc, #340]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d11d      	bne.n	800774a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007712:	e01a      	b.n	800774a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007714:	4b50      	ldr	r3, [pc, #320]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800771c:	2b00      	cmp	r3, #0
 800771e:	d116      	bne.n	800774e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007724:	e013      	b.n	800774e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007726:	4b4c      	ldr	r3, [pc, #304]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10f      	bne.n	8007752 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007732:	4b49      	ldr	r3, [pc, #292]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d109      	bne.n	8007752 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007742:	e006      	b.n	8007752 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e004      	b.n	8007754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800774a:	bf00      	nop
 800774c:	e002      	b.n	8007754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800774e:	bf00      	nop
 8007750:	e000      	b.n	8007754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007752:	bf00      	nop
    }

    if(status == HAL_OK)
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10d      	bne.n	8007776 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800775a:	4b3f      	ldr	r3, [pc, #252]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6819      	ldr	r1, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	3b01      	subs	r3, #1
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	430b      	orrs	r3, r1
 8007770:	4939      	ldr	r1, [pc, #228]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007772:	4313      	orrs	r3, r2
 8007774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d167      	bne.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800777c:	4b36      	ldr	r3, [pc, #216]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a35      	ldr	r2, [pc, #212]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007788:	f7fc fcf6 	bl	8004178 <HAL_GetTick>
 800778c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800778e:	e009      	b.n	80077a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007790:	f7fc fcf2 	bl	8004178 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d902      	bls.n	80077a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	73fb      	strb	r3, [r7, #15]
        break;
 80077a2:	e005      	b.n	80077b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077a4:	4b2c      	ldr	r3, [pc, #176]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1ef      	bne.n	8007790 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d14a      	bne.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d111      	bne.n	80077e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077bc:	4b26      	ldr	r3, [pc, #152]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80077c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6892      	ldr	r2, [r2, #8]
 80077cc:	0211      	lsls	r1, r2, #8
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68d2      	ldr	r2, [r2, #12]
 80077d2:	0912      	lsrs	r2, r2, #4
 80077d4:	0452      	lsls	r2, r2, #17
 80077d6:	430a      	orrs	r2, r1
 80077d8:	491f      	ldr	r1, [pc, #124]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	614b      	str	r3, [r1, #20]
 80077de:	e011      	b.n	8007804 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077e0:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80077e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6892      	ldr	r2, [r2, #8]
 80077f0:	0211      	lsls	r1, r2, #8
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6912      	ldr	r2, [r2, #16]
 80077f6:	0852      	lsrs	r2, r2, #1
 80077f8:	3a01      	subs	r2, #1
 80077fa:	0652      	lsls	r2, r2, #25
 80077fc:	430a      	orrs	r2, r1
 80077fe:	4916      	ldr	r1, [pc, #88]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007800:	4313      	orrs	r3, r2
 8007802:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007804:	4b14      	ldr	r3, [pc, #80]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a13      	ldr	r2, [pc, #76]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800780a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800780e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007810:	f7fc fcb2 	bl	8004178 <HAL_GetTick>
 8007814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007816:	e009      	b.n	800782c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007818:	f7fc fcae 	bl	8004178 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d902      	bls.n	800782c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
          break;
 800782a:	e005      	b.n	8007838 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0ef      	beq.n	8007818 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007840:	695a      	ldr	r2, [r3, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	4904      	ldr	r1, [pc, #16]	; (8007858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007848:	4313      	orrs	r3, r2
 800784a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40021000 	.word	0x40021000

0800785c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e095      	b.n	800799a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d108      	bne.n	8007888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800787e:	d009      	beq.n	8007894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	61da      	str	r2, [r3, #28]
 8007886:	e005      	b.n	8007894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fb fd22 	bl	80032f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078d4:	d902      	bls.n	80078dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e002      	b.n	80078e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80078ea:	d007      	beq.n	80078fc <HAL_SPI_Init+0xa0>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	ea42 0103 	orr.w	r1, r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	f003 0204 	and.w	r2, r3, #4
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007978:	ea42 0103 	orr.w	r1, r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b088      	sub	sp, #32
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_SPI_Transmit+0x22>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e158      	b.n	8007c76 <HAL_SPI_Transmit+0x2d4>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079cc:	f7fc fbd4 	bl	8004178 <HAL_GetTick>
 80079d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80079d2:	88fb      	ldrh	r3, [r7, #6]
 80079d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d002      	beq.n	80079e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80079e2:	2302      	movs	r3, #2
 80079e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079e6:	e13d      	b.n	8007c64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_SPI_Transmit+0x52>
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d102      	bne.n	80079fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079f8:	e134      	b.n	8007c64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2203      	movs	r2, #3
 80079fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	88fa      	ldrh	r2, [r7, #6]
 8007a12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88fa      	ldrh	r2, [r7, #6]
 8007a18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a44:	d10f      	bne.n	8007a66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a70:	2b40      	cmp	r3, #64	; 0x40
 8007a72:	d007      	beq.n	8007a84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a8c:	d94b      	bls.n	8007b26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_Transmit+0xfa>
 8007a96:	8afb      	ldrh	r3, [r7, #22]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d13e      	bne.n	8007b1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	881a      	ldrh	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aac:	1c9a      	adds	r2, r3, #2
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ac0:	e02b      	b.n	8007b1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d112      	bne.n	8007af6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	1c9a      	adds	r2, r3, #2
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007af4:	e011      	b.n	8007b1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af6:	f7fc fb3f 	bl	8004178 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d803      	bhi.n	8007b0e <HAL_SPI_Transmit+0x16c>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0c:	d102      	bne.n	8007b14 <HAL_SPI_Transmit+0x172>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b18:	e0a4      	b.n	8007c64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1ce      	bne.n	8007ac2 <HAL_SPI_Transmit+0x120>
 8007b24:	e07c      	b.n	8007c20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SPI_Transmit+0x192>
 8007b2e:	8afb      	ldrh	r3, [r7, #22]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d170      	bne.n	8007c16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d912      	bls.n	8007b64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	881a      	ldrh	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	1c9a      	adds	r2, r3, #2
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b02      	subs	r3, #2
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b62:	e058      	b.n	8007c16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b8a:	e044      	b.n	8007c16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d12b      	bne.n	8007bf2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d912      	bls.n	8007bca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	881a      	ldrh	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	1c9a      	adds	r2, r3, #2
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b02      	subs	r3, #2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bc8:	e025      	b.n	8007c16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	330c      	adds	r3, #12
 8007bd4:	7812      	ldrb	r2, [r2, #0]
 8007bd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bf0:	e011      	b.n	8007c16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bf2:	f7fc fac1 	bl	8004178 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d803      	bhi.n	8007c0a <HAL_SPI_Transmit+0x268>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c08:	d102      	bne.n	8007c10 <HAL_SPI_Transmit+0x26e>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c14:	e026      	b.n	8007c64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1b5      	bne.n	8007b8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fb57 	bl	80082d8 <SPI_EndRxTxTransaction>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	77fb      	strb	r3, [r7, #31]
 8007c60:	e000      	b.n	8007c64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007c62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b08a      	sub	sp, #40	; 0x28
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d101      	bne.n	8007ca4 <HAL_SPI_TransmitReceive+0x26>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e1fb      	b.n	800809c <HAL_SPI_TransmitReceive+0x41e>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cac:	f7fc fa64 	bl	8004178 <HAL_GetTick>
 8007cb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007cc0:	887b      	ldrh	r3, [r7, #2]
 8007cc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007cc4:	887b      	ldrh	r3, [r7, #2]
 8007cc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007cc8:	7efb      	ldrb	r3, [r7, #27]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d00e      	beq.n	8007cec <HAL_SPI_TransmitReceive+0x6e>
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cd4:	d106      	bne.n	8007ce4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <HAL_SPI_TransmitReceive+0x66>
 8007cde:	7efb      	ldrb	r3, [r7, #27]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d003      	beq.n	8007cec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007cea:	e1cd      	b.n	8008088 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_SPI_TransmitReceive+0x80>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <HAL_SPI_TransmitReceive+0x80>
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d103      	bne.n	8007d06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d04:	e1c0      	b.n	8008088 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d003      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2205      	movs	r2, #5
 8007d16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	887a      	ldrh	r2, [r7, #2]
 8007d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	887a      	ldrh	r2, [r7, #2]
 8007d32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	887a      	ldrh	r2, [r7, #2]
 8007d40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	887a      	ldrh	r2, [r7, #2]
 8007d46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d5c:	d802      	bhi.n	8007d64 <HAL_SPI_TransmitReceive+0xe6>
 8007d5e:	8a3b      	ldrh	r3, [r7, #16]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d908      	bls.n	8007d76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d72:	605a      	str	r2, [r3, #4]
 8007d74:	e007      	b.n	8007d86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b40      	cmp	r3, #64	; 0x40
 8007d92:	d007      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dac:	d97c      	bls.n	8007ea8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <HAL_SPI_TransmitReceive+0x13e>
 8007db6:	8a7b      	ldrh	r3, [r7, #18]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d169      	bne.n	8007e90 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	881a      	ldrh	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	1c9a      	adds	r2, r3, #2
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de0:	e056      	b.n	8007e90 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d11b      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x1aa>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d016      	beq.n	8007e28 <HAL_SPI_TransmitReceive+0x1aa>
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d113      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	881a      	ldrh	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	1c9a      	adds	r2, r3, #2
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d11c      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x1f2>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	b292      	uxth	r2, r2
 8007e4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e54:	1c9a      	adds	r2, r3, #2
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e70:	f7fc f982 	bl	8004178 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d807      	bhi.n	8007e90 <HAL_SPI_TransmitReceive+0x212>
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e86:	d003      	beq.n	8007e90 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e8e:	e0fb      	b.n	8008088 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1a3      	bne.n	8007de2 <HAL_SPI_TransmitReceive+0x164>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d19d      	bne.n	8007de2 <HAL_SPI_TransmitReceive+0x164>
 8007ea6:	e0df      	b.n	8008068 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <HAL_SPI_TransmitReceive+0x23a>
 8007eb0:	8a7b      	ldrh	r3, [r7, #18]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	f040 80cb 	bne.w	800804e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d912      	bls.n	8007ee8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	881a      	ldrh	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	1c9a      	adds	r2, r3, #2
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b02      	subs	r3, #2
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ee6:	e0b2      	b.n	800804e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	7812      	ldrb	r2, [r2, #0]
 8007ef4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f0e:	e09e      	b.n	800804e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d134      	bne.n	8007f88 <HAL_SPI_TransmitReceive+0x30a>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d02f      	beq.n	8007f88 <HAL_SPI_TransmitReceive+0x30a>
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d12c      	bne.n	8007f88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d912      	bls.n	8007f5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	881a      	ldrh	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	1c9a      	adds	r2, r3, #2
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b02      	subs	r3, #2
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f5c:	e012      	b.n	8007f84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	7812      	ldrb	r2, [r2, #0]
 8007f6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d148      	bne.n	8008028 <HAL_SPI_TransmitReceive+0x3aa>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d042      	beq.n	8008028 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d923      	bls.n	8007ff6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	b292      	uxth	r2, r2
 8007fba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	1c9a      	adds	r2, r3, #2
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	3b02      	subs	r3, #2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d81f      	bhi.n	8008024 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ff2:	605a      	str	r2, [r3, #4]
 8007ff4:	e016      	b.n	8008024 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f103 020c 	add.w	r2, r3, #12
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008002:	7812      	ldrb	r2, [r2, #0]
 8008004:	b2d2      	uxtb	r2, r2
 8008006:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008024:	2301      	movs	r3, #1
 8008026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008028:	f7fc f8a6 	bl	8004178 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008034:	429a      	cmp	r2, r3
 8008036:	d803      	bhi.n	8008040 <HAL_SPI_TransmitReceive+0x3c2>
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800803e:	d102      	bne.n	8008046 <HAL_SPI_TransmitReceive+0x3c8>
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	2b00      	cmp	r3, #0
 8008044:	d103      	bne.n	800804e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800804c:	e01c      	b.n	8008088 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	f47f af5b 	bne.w	8007f10 <HAL_SPI_TransmitReceive+0x292>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	f47f af54 	bne.w	8007f10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f933 	bl	80082d8 <SPI_EndRxTxTransaction>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d006      	beq.n	8008086 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2220      	movs	r2, #32
 8008082:	661a      	str	r2, [r3, #96]	; 0x60
 8008084:	e000      	b.n	8008088 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008086:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800809c:	4618      	mov	r0, r3
 800809e:	3728      	adds	r7, #40	; 0x28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080b4:	f7fc f860 	bl	8004178 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	1a9b      	subs	r3, r3, r2
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	4413      	add	r3, r2
 80080c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080c4:	f7fc f858 	bl	8004178 <HAL_GetTick>
 80080c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080ca:	4b39      	ldr	r3, [pc, #228]	; (80081b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	015b      	lsls	r3, r3, #5
 80080d0:	0d1b      	lsrs	r3, r3, #20
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	fb02 f303 	mul.w	r3, r2, r3
 80080d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080da:	e054      	b.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e2:	d050      	beq.n	8008186 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080e4:	f7fc f848 	bl	8004178 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d902      	bls.n	80080fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d13d      	bne.n	8008176 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008108:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008112:	d111      	bne.n	8008138 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800811c:	d004      	beq.n	8008128 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008126:	d107      	bne.n	8008138 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008136:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008140:	d10f      	bne.n	8008162 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008160:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e017      	b.n	80081a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	3b01      	subs	r3, #1
 8008184:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689a      	ldr	r2, [r3, #8]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4013      	ands	r3, r2
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	429a      	cmp	r2, r3
 8008194:	bf0c      	ite	eq
 8008196:	2301      	moveq	r3, #1
 8008198:	2300      	movne	r3, #0
 800819a:	b2db      	uxtb	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d19b      	bne.n	80080dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	2000013c 	.word	0x2000013c

080081b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081c2:	f7fb ffd9 	bl	8004178 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	4413      	add	r3, r2
 80081d0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081d2:	f7fb ffd1 	bl	8004178 <HAL_GetTick>
 80081d6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081d8:	4b3e      	ldr	r3, [pc, #248]	; (80082d4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	00da      	lsls	r2, r3, #3
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	0d1b      	lsrs	r3, r3, #20
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80081f0:	e062      	b.n	80082b8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80081f8:	d109      	bne.n	800820e <SPI_WaitFifoStateUntilTimeout+0x5a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800820c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008214:	d050      	beq.n	80082b8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008216:	f7fb ffaf 	bl	8004178 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	429a      	cmp	r2, r3
 8008224:	d902      	bls.n	800822c <SPI_WaitFifoStateUntilTimeout+0x78>
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d13d      	bne.n	80082a8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800823a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008244:	d111      	bne.n	800826a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824e:	d004      	beq.n	800825a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008258:	d107      	bne.n	800826a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008268:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008272:	d10f      	bne.n	8008294 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008292:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e010      	b.n	80082ca <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4013      	ands	r3, r2
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d194      	bne.n	80081f2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	2000013c 	.word	0x2000013c

080082d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff ff5f 	bl	80081b4 <SPI_WaitFifoStateUntilTimeout>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d007      	beq.n	800830c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008300:	f043 0220 	orr.w	r2, r3, #32
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e027      	b.n	800835c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2200      	movs	r2, #0
 8008314:	2180      	movs	r1, #128	; 0x80
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff fec4 	bl	80080a4 <SPI_WaitFlagStateUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e014      	b.n	800835c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff ff38 	bl	80081b4 <SPI_WaitFifoStateUntilTimeout>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834e:	f043 0220 	orr.w	r2, r3, #32
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e000      	b.n	800835c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e049      	b.n	800840a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fb f936 	bl	80035fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
 80083a0:	4619      	mov	r1, r3
 80083a2:	4610      	mov	r0, r2
 80083a4:	f001 f962 	bl	800966c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	d001      	beq.n	800842c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e04f      	b.n	80084cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0201 	orr.w	r2, r2, #1
 8008442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a23      	ldr	r2, [pc, #140]	; (80084d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d01d      	beq.n	800848a <HAL_TIM_Base_Start_IT+0x76>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008456:	d018      	beq.n	800848a <HAL_TIM_Base_Start_IT+0x76>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a1f      	ldr	r2, [pc, #124]	; (80084dc <HAL_TIM_Base_Start_IT+0xc8>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d013      	beq.n	800848a <HAL_TIM_Base_Start_IT+0x76>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a1e      	ldr	r2, [pc, #120]	; (80084e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00e      	beq.n	800848a <HAL_TIM_Base_Start_IT+0x76>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a1c      	ldr	r2, [pc, #112]	; (80084e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d009      	beq.n	800848a <HAL_TIM_Base_Start_IT+0x76>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a1b      	ldr	r2, [pc, #108]	; (80084e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d004      	beq.n	800848a <HAL_TIM_Base_Start_IT+0x76>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a19      	ldr	r2, [pc, #100]	; (80084ec <HAL_TIM_Base_Start_IT+0xd8>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d115      	bne.n	80084b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008492:	4013      	ands	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b06      	cmp	r3, #6
 800849a:	d015      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0xb4>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a2:	d011      	beq.n	80084c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b4:	e008      	b.n	80084c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0201 	orr.w	r2, r2, #1
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	e000      	b.n	80084ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	40012c00 	.word	0x40012c00
 80084dc:	40000400 	.word	0x40000400
 80084e0:	40000800 	.word	0x40000800
 80084e4:	40000c00 	.word	0x40000c00
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	00010007 	.word	0x00010007

080084f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e049      	b.n	800859a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fa ff4c 	bl	80033b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f001 f89a 	bl	800966c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d109      	bne.n	80085c8 <HAL_TIM_PWM_Start_IT+0x24>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b01      	cmp	r3, #1
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	e03c      	b.n	8008642 <HAL_TIM_PWM_Start_IT+0x9e>
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d109      	bne.n	80085e2 <HAL_TIM_PWM_Start_IT+0x3e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	bf14      	ite	ne
 80085da:	2301      	movne	r3, #1
 80085dc:	2300      	moveq	r3, #0
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	e02f      	b.n	8008642 <HAL_TIM_PWM_Start_IT+0x9e>
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d109      	bne.n	80085fc <HAL_TIM_PWM_Start_IT+0x58>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	bf14      	ite	ne
 80085f4:	2301      	movne	r3, #1
 80085f6:	2300      	moveq	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	e022      	b.n	8008642 <HAL_TIM_PWM_Start_IT+0x9e>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b0c      	cmp	r3, #12
 8008600:	d109      	bne.n	8008616 <HAL_TIM_PWM_Start_IT+0x72>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b01      	cmp	r3, #1
 800860c:	bf14      	ite	ne
 800860e:	2301      	movne	r3, #1
 8008610:	2300      	moveq	r3, #0
 8008612:	b2db      	uxtb	r3, r3
 8008614:	e015      	b.n	8008642 <HAL_TIM_PWM_Start_IT+0x9e>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b10      	cmp	r3, #16
 800861a:	d109      	bne.n	8008630 <HAL_TIM_PWM_Start_IT+0x8c>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b01      	cmp	r3, #1
 8008626:	bf14      	ite	ne
 8008628:	2301      	movne	r3, #1
 800862a:	2300      	moveq	r3, #0
 800862c:	b2db      	uxtb	r3, r3
 800862e:	e008      	b.n	8008642 <HAL_TIM_PWM_Start_IT+0x9e>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b01      	cmp	r3, #1
 800863a:	bf14      	ite	ne
 800863c:	2301      	movne	r3, #1
 800863e:	2300      	moveq	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e0e2      	b.n	8008810 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d104      	bne.n	800865a <HAL_TIM_PWM_Start_IT+0xb6>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008658:	e023      	b.n	80086a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b04      	cmp	r3, #4
 800865e:	d104      	bne.n	800866a <HAL_TIM_PWM_Start_IT+0xc6>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008668:	e01b      	b.n	80086a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b08      	cmp	r3, #8
 800866e:	d104      	bne.n	800867a <HAL_TIM_PWM_Start_IT+0xd6>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008678:	e013      	b.n	80086a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b0c      	cmp	r3, #12
 800867e:	d104      	bne.n	800868a <HAL_TIM_PWM_Start_IT+0xe6>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008688:	e00b      	b.n	80086a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b10      	cmp	r3, #16
 800868e:	d104      	bne.n	800869a <HAL_TIM_PWM_Start_IT+0xf6>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008698:	e003      	b.n	80086a2 <HAL_TIM_PWM_Start_IT+0xfe>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2202      	movs	r2, #2
 800869e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b0c      	cmp	r3, #12
 80086a6:	d841      	bhi.n	800872c <HAL_TIM_PWM_Start_IT+0x188>
 80086a8:	a201      	add	r2, pc, #4	; (adr r2, 80086b0 <HAL_TIM_PWM_Start_IT+0x10c>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086e5 	.word	0x080086e5
 80086b4:	0800872d 	.word	0x0800872d
 80086b8:	0800872d 	.word	0x0800872d
 80086bc:	0800872d 	.word	0x0800872d
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	0800872d 	.word	0x0800872d
 80086c8:	0800872d 	.word	0x0800872d
 80086cc:	0800872d 	.word	0x0800872d
 80086d0:	08008709 	.word	0x08008709
 80086d4:	0800872d 	.word	0x0800872d
 80086d8:	0800872d 	.word	0x0800872d
 80086dc:	0800872d 	.word	0x0800872d
 80086e0:	0800871b 	.word	0x0800871b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0202 	orr.w	r2, r2, #2
 80086f2:	60da      	str	r2, [r3, #12]
      break;
 80086f4:	e01b      	b.n	800872e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0204 	orr.w	r2, r2, #4
 8008704:	60da      	str	r2, [r3, #12]
      break;
 8008706:	e012      	b.n	800872e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0208 	orr.w	r2, r2, #8
 8008716:	60da      	str	r2, [r3, #12]
      break;
 8008718:	e009      	b.n	800872e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 0210 	orr.w	r2, r2, #16
 8008728:	60da      	str	r2, [r3, #12]
      break;
 800872a:	e000      	b.n	800872e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800872c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2201      	movs	r2, #1
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f001 fb08 	bl	8009d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a35      	ldr	r2, [pc, #212]	; (8008818 <HAL_TIM_PWM_Start_IT+0x274>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <HAL_TIM_PWM_Start_IT+0x1ca>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a34      	ldr	r2, [pc, #208]	; (800881c <HAL_TIM_PWM_Start_IT+0x278>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00e      	beq.n	800876e <HAL_TIM_PWM_Start_IT+0x1ca>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a32      	ldr	r2, [pc, #200]	; (8008820 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d009      	beq.n	800876e <HAL_TIM_PWM_Start_IT+0x1ca>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a31      	ldr	r2, [pc, #196]	; (8008824 <HAL_TIM_PWM_Start_IT+0x280>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d004      	beq.n	800876e <HAL_TIM_PWM_Start_IT+0x1ca>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a2f      	ldr	r2, [pc, #188]	; (8008828 <HAL_TIM_PWM_Start_IT+0x284>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d101      	bne.n	8008772 <HAL_TIM_PWM_Start_IT+0x1ce>
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008772:	2300      	movs	r3, #0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008786:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a22      	ldr	r2, [pc, #136]	; (8008818 <HAL_TIM_PWM_Start_IT+0x274>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d01d      	beq.n	80087ce <HAL_TIM_PWM_Start_IT+0x22a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879a:	d018      	beq.n	80087ce <HAL_TIM_PWM_Start_IT+0x22a>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a22      	ldr	r2, [pc, #136]	; (800882c <HAL_TIM_PWM_Start_IT+0x288>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d013      	beq.n	80087ce <HAL_TIM_PWM_Start_IT+0x22a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a21      	ldr	r2, [pc, #132]	; (8008830 <HAL_TIM_PWM_Start_IT+0x28c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00e      	beq.n	80087ce <HAL_TIM_PWM_Start_IT+0x22a>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a1f      	ldr	r2, [pc, #124]	; (8008834 <HAL_TIM_PWM_Start_IT+0x290>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d009      	beq.n	80087ce <HAL_TIM_PWM_Start_IT+0x22a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a17      	ldr	r2, [pc, #92]	; (800881c <HAL_TIM_PWM_Start_IT+0x278>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d004      	beq.n	80087ce <HAL_TIM_PWM_Start_IT+0x22a>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a15      	ldr	r2, [pc, #84]	; (8008820 <HAL_TIM_PWM_Start_IT+0x27c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d115      	bne.n	80087fa <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	4b18      	ldr	r3, [pc, #96]	; (8008838 <HAL_TIM_PWM_Start_IT+0x294>)
 80087d6:	4013      	ands	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b06      	cmp	r3, #6
 80087de:	d015      	beq.n	800880c <HAL_TIM_PWM_Start_IT+0x268>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e6:	d011      	beq.n	800880c <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0201 	orr.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f8:	e008      	b.n	800880c <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f042 0201 	orr.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e000      	b.n	800880e <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800880c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	40012c00 	.word	0x40012c00
 800881c:	40013400 	.word	0x40013400
 8008820:	40014000 	.word	0x40014000
 8008824:	40014400 	.word	0x40014400
 8008828:	40014800 	.word	0x40014800
 800882c:	40000400 	.word	0x40000400
 8008830:	40000800 	.word	0x40000800
 8008834:	40000c00 	.word	0x40000c00
 8008838:	00010007 	.word	0x00010007

0800883c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b0c      	cmp	r3, #12
 800884a:	d841      	bhi.n	80088d0 <HAL_TIM_PWM_Stop_IT+0x94>
 800884c:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <HAL_TIM_PWM_Stop_IT+0x18>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008889 	.word	0x08008889
 8008858:	080088d1 	.word	0x080088d1
 800885c:	080088d1 	.word	0x080088d1
 8008860:	080088d1 	.word	0x080088d1
 8008864:	0800889b 	.word	0x0800889b
 8008868:	080088d1 	.word	0x080088d1
 800886c:	080088d1 	.word	0x080088d1
 8008870:	080088d1 	.word	0x080088d1
 8008874:	080088ad 	.word	0x080088ad
 8008878:	080088d1 	.word	0x080088d1
 800887c:	080088d1 	.word	0x080088d1
 8008880:	080088d1 	.word	0x080088d1
 8008884:	080088bf 	.word	0x080088bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0202 	bic.w	r2, r2, #2
 8008896:	60da      	str	r2, [r3, #12]
      break;
 8008898:	e01b      	b.n	80088d2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68da      	ldr	r2, [r3, #12]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0204 	bic.w	r2, r2, #4
 80088a8:	60da      	str	r2, [r3, #12]
      break;
 80088aa:	e012      	b.n	80088d2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0208 	bic.w	r2, r2, #8
 80088ba:	60da      	str	r2, [r3, #12]
      break;
 80088bc:	e009      	b.n	80088d2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0210 	bic.w	r2, r2, #16
 80088cc:	60da      	str	r2, [r3, #12]
      break;
 80088ce:	e000      	b.n	80088d2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80088d0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2200      	movs	r2, #0
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 fa36 	bl	8009d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a3e      	ldr	r2, [pc, #248]	; (80089e0 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_TIM_PWM_Stop_IT+0xd6>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a3d      	ldr	r2, [pc, #244]	; (80089e4 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00e      	beq.n	8008912 <HAL_TIM_PWM_Stop_IT+0xd6>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a3b      	ldr	r2, [pc, #236]	; (80089e8 <HAL_TIM_PWM_Stop_IT+0x1ac>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_TIM_PWM_Stop_IT+0xd6>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a3a      	ldr	r2, [pc, #232]	; (80089ec <HAL_TIM_PWM_Stop_IT+0x1b0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_TIM_PWM_Stop_IT+0xd6>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a38      	ldr	r2, [pc, #224]	; (80089f0 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d101      	bne.n	8008916 <HAL_TIM_PWM_Stop_IT+0xda>
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <HAL_TIM_PWM_Stop_IT+0xdc>
 8008916:	2300      	movs	r3, #0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d017      	beq.n	800894c <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a1a      	ldr	r2, [r3, #32]
 8008922:	f241 1311 	movw	r3, #4369	; 0x1111
 8008926:	4013      	ands	r3, r2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10f      	bne.n	800894c <HAL_TIM_PWM_Stop_IT+0x110>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6a1a      	ldr	r2, [r3, #32]
 8008932:	f240 4344 	movw	r3, #1092	; 0x444
 8008936:	4013      	ands	r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d107      	bne.n	800894c <HAL_TIM_PWM_Stop_IT+0x110>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a1a      	ldr	r2, [r3, #32]
 8008952:	f241 1311 	movw	r3, #4369	; 0x1111
 8008956:	4013      	ands	r3, r2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10f      	bne.n	800897c <HAL_TIM_PWM_Stop_IT+0x140>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	f240 4344 	movw	r3, #1092	; 0x444
 8008966:	4013      	ands	r3, r2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d107      	bne.n	800897c <HAL_TIM_PWM_Stop_IT+0x140>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0201 	bic.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d104      	bne.n	800898c <HAL_TIM_PWM_Stop_IT+0x150>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800898a:	e023      	b.n	80089d4 <HAL_TIM_PWM_Stop_IT+0x198>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b04      	cmp	r3, #4
 8008990:	d104      	bne.n	800899c <HAL_TIM_PWM_Stop_IT+0x160>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800899a:	e01b      	b.n	80089d4 <HAL_TIM_PWM_Stop_IT+0x198>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d104      	bne.n	80089ac <HAL_TIM_PWM_Stop_IT+0x170>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089aa:	e013      	b.n	80089d4 <HAL_TIM_PWM_Stop_IT+0x198>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b0c      	cmp	r3, #12
 80089b0:	d104      	bne.n	80089bc <HAL_TIM_PWM_Stop_IT+0x180>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089ba:	e00b      	b.n	80089d4 <HAL_TIM_PWM_Stop_IT+0x198>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d104      	bne.n	80089cc <HAL_TIM_PWM_Stop_IT+0x190>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089ca:	e003      	b.n	80089d4 <HAL_TIM_PWM_Stop_IT+0x198>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40012c00 	.word	0x40012c00
 80089e4:	40013400 	.word	0x40013400
 80089e8:	40014000 	.word	0x40014000
 80089ec:	40014400 	.word	0x40014400
 80089f0:	40014800 	.word	0x40014800

080089f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d109      	bne.n	8008a1c <HAL_TIM_PWM_Start_DMA+0x28>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	e03c      	b.n	8008a96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d109      	bne.n	8008a36 <HAL_TIM_PWM_Start_DMA+0x42>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	bf0c      	ite	eq
 8008a2e:	2301      	moveq	r3, #1
 8008a30:	2300      	movne	r3, #0
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	e02f      	b.n	8008a96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d109      	bne.n	8008a50 <HAL_TIM_PWM_Start_DMA+0x5c>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	bf0c      	ite	eq
 8008a48:	2301      	moveq	r3, #1
 8008a4a:	2300      	movne	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	e022      	b.n	8008a96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b0c      	cmp	r3, #12
 8008a54:	d109      	bne.n	8008a6a <HAL_TIM_PWM_Start_DMA+0x76>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	e015      	b.n	8008a96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b10      	cmp	r3, #16
 8008a6e:	d109      	bne.n	8008a84 <HAL_TIM_PWM_Start_DMA+0x90>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2301      	moveq	r3, #1
 8008a7e:	2300      	movne	r3, #0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	e008      	b.n	8008a96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	bf0c      	ite	eq
 8008a90:	2301      	moveq	r3, #1
 8008a92:	2300      	movne	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e1a6      	b.n	8008dec <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d109      	bne.n	8008ab8 <HAL_TIM_PWM_Start_DMA+0xc4>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	bf0c      	ite	eq
 8008ab0:	2301      	moveq	r3, #1
 8008ab2:	2300      	movne	r3, #0
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	e03c      	b.n	8008b32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d109      	bne.n	8008ad2 <HAL_TIM_PWM_Start_DMA+0xde>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	bf0c      	ite	eq
 8008aca:	2301      	moveq	r3, #1
 8008acc:	2300      	movne	r3, #0
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	e02f      	b.n	8008b32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d109      	bne.n	8008aec <HAL_TIM_PWM_Start_DMA+0xf8>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	bf0c      	ite	eq
 8008ae4:	2301      	moveq	r3, #1
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	e022      	b.n	8008b32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b0c      	cmp	r3, #12
 8008af0:	d109      	bne.n	8008b06 <HAL_TIM_PWM_Start_DMA+0x112>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	bf0c      	ite	eq
 8008afe:	2301      	moveq	r3, #1
 8008b00:	2300      	movne	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	e015      	b.n	8008b32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b10      	cmp	r3, #16
 8008b0a:	d109      	bne.n	8008b20 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	bf0c      	ite	eq
 8008b18:	2301      	moveq	r3, #1
 8008b1a:	2300      	movne	r3, #0
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	e008      	b.n	8008b32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	bf0c      	ite	eq
 8008b2c:	2301      	moveq	r3, #1
 8008b2e:	2300      	movne	r3, #0
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d034      	beq.n	8008ba0 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d104      	bne.n	8008b46 <HAL_TIM_PWM_Start_DMA+0x152>
 8008b3c:	887b      	ldrh	r3, [r7, #2]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e152      	b.n	8008dec <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <HAL_TIM_PWM_Start_DMA+0x162>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b54:	e026      	b.n	8008ba4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d104      	bne.n	8008b66 <HAL_TIM_PWM_Start_DMA+0x172>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b64:	e01e      	b.n	8008ba4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d104      	bne.n	8008b76 <HAL_TIM_PWM_Start_DMA+0x182>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b74:	e016      	b.n	8008ba4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b0c      	cmp	r3, #12
 8008b7a:	d104      	bne.n	8008b86 <HAL_TIM_PWM_Start_DMA+0x192>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2202      	movs	r2, #2
 8008b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b84:	e00e      	b.n	8008ba4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b10      	cmp	r3, #16
 8008b8a:	d104      	bne.n	8008b96 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b94:	e006      	b.n	8008ba4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b9e:	e001      	b.n	8008ba4 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e123      	b.n	8008dec <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2b0c      	cmp	r3, #12
 8008ba8:	f200 80ae 	bhi.w	8008d08 <HAL_TIM_PWM_Start_DMA+0x314>
 8008bac:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8008bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb2:	bf00      	nop
 8008bb4:	08008be9 	.word	0x08008be9
 8008bb8:	08008d09 	.word	0x08008d09
 8008bbc:	08008d09 	.word	0x08008d09
 8008bc0:	08008d09 	.word	0x08008d09
 8008bc4:	08008c31 	.word	0x08008c31
 8008bc8:	08008d09 	.word	0x08008d09
 8008bcc:	08008d09 	.word	0x08008d09
 8008bd0:	08008d09 	.word	0x08008d09
 8008bd4:	08008c79 	.word	0x08008c79
 8008bd8:	08008d09 	.word	0x08008d09
 8008bdc:	08008d09 	.word	0x08008d09
 8008be0:	08008d09 	.word	0x08008d09
 8008be4:	08008cc1 	.word	0x08008cc1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	4a81      	ldr	r2, [pc, #516]	; (8008df4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008bee:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	4a80      	ldr	r2, [pc, #512]	; (8008df8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	4a7f      	ldr	r2, [pc, #508]	; (8008dfc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3334      	adds	r3, #52	; 0x34
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	887b      	ldrh	r3, [r7, #2]
 8008c10:	f7fc fe68 	bl	80058e4 <HAL_DMA_Start_IT>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e0e6      	b.n	8008dec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c2c:	60da      	str	r2, [r3, #12]
      break;
 8008c2e:	e06c      	b.n	8008d0a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c34:	4a6f      	ldr	r2, [pc, #444]	; (8008df4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008c36:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	4a6e      	ldr	r2, [pc, #440]	; (8008df8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c44:	4a6d      	ldr	r2, [pc, #436]	; (8008dfc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3338      	adds	r3, #56	; 0x38
 8008c54:	461a      	mov	r2, r3
 8008c56:	887b      	ldrh	r3, [r7, #2]
 8008c58:	f7fc fe44 	bl	80058e4 <HAL_DMA_Start_IT>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e0c2      	b.n	8008dec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c74:	60da      	str	r2, [r3, #12]
      break;
 8008c76:	e048      	b.n	8008d0a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	4a5d      	ldr	r2, [pc, #372]	; (8008df4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008c7e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	4a5c      	ldr	r2, [pc, #368]	; (8008df8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	4a5b      	ldr	r2, [pc, #364]	; (8008dfc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	333c      	adds	r3, #60	; 0x3c
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	887b      	ldrh	r3, [r7, #2]
 8008ca0:	f7fc fe20 	bl	80058e4 <HAL_DMA_Start_IT>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e09e      	b.n	8008dec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68da      	ldr	r2, [r3, #12]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cbc:	60da      	str	r2, [r3, #12]
      break;
 8008cbe:	e024      	b.n	8008d0a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc4:	4a4b      	ldr	r2, [pc, #300]	; (8008df4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	4a4a      	ldr	r2, [pc, #296]	; (8008df8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008cce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd4:	4a49      	ldr	r2, [pc, #292]	; (8008dfc <HAL_TIM_PWM_Start_DMA+0x408>)
 8008cd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3340      	adds	r3, #64	; 0x40
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	887b      	ldrh	r3, [r7, #2]
 8008ce8:	f7fc fdfc 	bl	80058e4 <HAL_DMA_Start_IT>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e07a      	b.n	8008dec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d04:	60da      	str	r2, [r3, #12]
      break;
 8008d06:	e000      	b.n	8008d0a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8008d08:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f001 f81a 	bl	8009d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a38      	ldr	r2, [pc, #224]	; (8008e00 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d013      	beq.n	8008d4a <HAL_TIM_PWM_Start_DMA+0x356>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a37      	ldr	r2, [pc, #220]	; (8008e04 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00e      	beq.n	8008d4a <HAL_TIM_PWM_Start_DMA+0x356>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a35      	ldr	r2, [pc, #212]	; (8008e08 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d009      	beq.n	8008d4a <HAL_TIM_PWM_Start_DMA+0x356>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a34      	ldr	r2, [pc, #208]	; (8008e0c <HAL_TIM_PWM_Start_DMA+0x418>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d004      	beq.n	8008d4a <HAL_TIM_PWM_Start_DMA+0x356>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a32      	ldr	r2, [pc, #200]	; (8008e10 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d101      	bne.n	8008d4e <HAL_TIM_PWM_Start_DMA+0x35a>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e000      	b.n	8008d50 <HAL_TIM_PWM_Start_DMA+0x35c>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d007      	beq.n	8008d64 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a25      	ldr	r2, [pc, #148]	; (8008e00 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d01d      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d76:	d018      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a25      	ldr	r2, [pc, #148]	; (8008e14 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d013      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a24      	ldr	r2, [pc, #144]	; (8008e18 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d00e      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a22      	ldr	r2, [pc, #136]	; (8008e1c <HAL_TIM_PWM_Start_DMA+0x428>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d009      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d004      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d115      	bne.n	8008dd6 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	4b1b      	ldr	r3, [pc, #108]	; (8008e20 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008db2:	4013      	ands	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b06      	cmp	r3, #6
 8008dba:	d015      	beq.n	8008de8 <HAL_TIM_PWM_Start_DMA+0x3f4>
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc2:	d011      	beq.n	8008de8 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd4:	e008      	b.n	8008de8 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0201 	orr.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e000      	b.n	8008dea <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	0800955b 	.word	0x0800955b
 8008df8:	08009603 	.word	0x08009603
 8008dfc:	080094c9 	.word	0x080094c9
 8008e00:	40012c00 	.word	0x40012c00
 8008e04:	40013400 	.word	0x40013400
 8008e08:	40014000 	.word	0x40014000
 8008e0c:	40014400 	.word	0x40014400
 8008e10:	40014800 	.word	0x40014800
 8008e14:	40000400 	.word	0x40000400
 8008e18:	40000800 	.word	0x40000800
 8008e1c:	40000c00 	.word	0x40000c00
 8008e20:	00010007 	.word	0x00010007

08008e24 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b0c      	cmp	r3, #12
 8008e32:	d855      	bhi.n	8008ee0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8008e34:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e71 	.word	0x08008e71
 8008e40:	08008ee1 	.word	0x08008ee1
 8008e44:	08008ee1 	.word	0x08008ee1
 8008e48:	08008ee1 	.word	0x08008ee1
 8008e4c:	08008e8d 	.word	0x08008e8d
 8008e50:	08008ee1 	.word	0x08008ee1
 8008e54:	08008ee1 	.word	0x08008ee1
 8008e58:	08008ee1 	.word	0x08008ee1
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008ee1 	.word	0x08008ee1
 8008e64:	08008ee1 	.word	0x08008ee1
 8008e68:	08008ee1 	.word	0x08008ee1
 8008e6c:	08008ec5 	.word	0x08008ec5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e7e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fc fd8d 	bl	80059a4 <HAL_DMA_Abort_IT>
      break;
 8008e8a:	e02a      	b.n	8008ee2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fc fd7f 	bl	80059a4 <HAL_DMA_Abort_IT>
      break;
 8008ea6:	e01c      	b.n	8008ee2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008eb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fc fd71 	bl	80059a4 <HAL_DMA_Abort_IT>
      break;
 8008ec2:	e00e      	b.n	8008ee2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ed2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fc fd63 	bl	80059a4 <HAL_DMA_Abort_IT>
      break;
 8008ede:	e000      	b.n	8008ee2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8008ee0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 ff2e 	bl	8009d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a3e      	ldr	r2, [pc, #248]	; (8008ff0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d013      	beq.n	8008f22 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a3d      	ldr	r2, [pc, #244]	; (8008ff4 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d00e      	beq.n	8008f22 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a3b      	ldr	r2, [pc, #236]	; (8008ff8 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d009      	beq.n	8008f22 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a3a      	ldr	r2, [pc, #232]	; (8008ffc <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d004      	beq.n	8008f22 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a38      	ldr	r2, [pc, #224]	; (8009000 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d101      	bne.n	8008f26 <HAL_TIM_PWM_Stop_DMA+0x102>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <HAL_TIM_PWM_Stop_DMA+0x104>
 8008f26:	2300      	movs	r3, #0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d017      	beq.n	8008f5c <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6a1a      	ldr	r2, [r3, #32]
 8008f32:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <HAL_TIM_PWM_Stop_DMA+0x138>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6a1a      	ldr	r2, [r3, #32]
 8008f42:	f240 4344 	movw	r3, #1092	; 0x444
 8008f46:	4013      	ands	r3, r2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d107      	bne.n	8008f5c <HAL_TIM_PWM_Stop_DMA+0x138>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6a1a      	ldr	r2, [r3, #32]
 8008f62:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f66:	4013      	ands	r3, r2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10f      	bne.n	8008f8c <HAL_TIM_PWM_Stop_DMA+0x168>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6a1a      	ldr	r2, [r3, #32]
 8008f72:	f240 4344 	movw	r3, #1092	; 0x444
 8008f76:	4013      	ands	r3, r2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d107      	bne.n	8008f8c <HAL_TIM_PWM_Stop_DMA+0x168>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0201 	bic.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <HAL_TIM_PWM_Stop_DMA+0x178>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f9a:	e023      	b.n	8008fe4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d104      	bne.n	8008fac <HAL_TIM_PWM_Stop_DMA+0x188>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008faa:	e01b      	b.n	8008fe4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2b08      	cmp	r3, #8
 8008fb0:	d104      	bne.n	8008fbc <HAL_TIM_PWM_Stop_DMA+0x198>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fba:	e013      	b.n	8008fe4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b0c      	cmp	r3, #12
 8008fc0:	d104      	bne.n	8008fcc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fca:	e00b      	b.n	8008fe4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b10      	cmp	r3, #16
 8008fd0:	d104      	bne.n	8008fdc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fda:	e003      	b.n	8008fe4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	40012c00 	.word	0x40012c00
 8008ff4:	40013400 	.word	0x40013400
 8008ff8:	40014000 	.word	0x40014000
 8008ffc:	40014400 	.word	0x40014400
 8009000:	40014800 	.word	0x40014800

08009004 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b02      	cmp	r3, #2
 8009018:	d122      	bne.n	8009060 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b02      	cmp	r3, #2
 8009026:	d11b      	bne.n	8009060 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f06f 0202 	mvn.w	r2, #2
 8009030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa16 	bl	8009478 <HAL_TIM_IC_CaptureCallback>
 800904c:	e005      	b.n	800905a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa08 	bl	8009464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fa fdf9 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b04      	cmp	r3, #4
 800906c:	d122      	bne.n	80090b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 0304 	and.w	r3, r3, #4
 8009078:	2b04      	cmp	r3, #4
 800907a:	d11b      	bne.n	80090b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0204 	mvn.w	r2, #4
 8009084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2202      	movs	r2, #2
 800908a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f9ec 	bl	8009478 <HAL_TIM_IC_CaptureCallback>
 80090a0:	e005      	b.n	80090ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f9de 	bl	8009464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fa fdcf 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d122      	bne.n	8009108 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0308 	and.w	r3, r3, #8
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d11b      	bne.n	8009108 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0208 	mvn.w	r2, #8
 80090d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2204      	movs	r2, #4
 80090de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9c2 	bl	8009478 <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f9b4 	bl	8009464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fa fda5 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b10      	cmp	r3, #16
 8009114:	d122      	bne.n	800915c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0310 	and.w	r3, r3, #16
 8009120:	2b10      	cmp	r3, #16
 8009122:	d11b      	bne.n	800915c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0210 	mvn.w	r2, #16
 800912c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2208      	movs	r2, #8
 8009132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f998 	bl	8009478 <HAL_TIM_IC_CaptureCallback>
 8009148:	e005      	b.n	8009156 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f98a 	bl	8009464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7fa fd7b 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b01      	cmp	r3, #1
 8009168:	d10e      	bne.n	8009188 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b01      	cmp	r3, #1
 8009176:	d107      	bne.n	8009188 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0201 	mvn.w	r2, #1
 8009180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f9 fa7a 	bl	800267c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009192:	2b80      	cmp	r3, #128	; 0x80
 8009194:	d10e      	bne.n	80091b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a0:	2b80      	cmp	r3, #128	; 0x80
 80091a2:	d107      	bne.n	80091b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80091ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 ff02 	bl	8009fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c2:	d10e      	bne.n	80091e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ce:	2b80      	cmp	r3, #128	; 0x80
 80091d0:	d107      	bne.n	80091e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80091da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fef5 	bl	8009fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ec:	2b40      	cmp	r3, #64	; 0x40
 80091ee:	d10e      	bne.n	800920e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d107      	bne.n	800920e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f949 	bl	80094a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b20      	cmp	r3, #32
 800921a:	d10e      	bne.n	800923a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f003 0320 	and.w	r3, r3, #32
 8009226:	2b20      	cmp	r3, #32
 8009228:	d107      	bne.n	800923a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f06f 0220 	mvn.w	r2, #32
 8009232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 feb5 	bl	8009fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800925a:	2302      	movs	r3, #2
 800925c:	e0fd      	b.n	800945a <HAL_TIM_PWM_ConfigChannel+0x216>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b14      	cmp	r3, #20
 800926a:	f200 80f0 	bhi.w	800944e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800926e:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	080092c9 	.word	0x080092c9
 8009278:	0800944f 	.word	0x0800944f
 800927c:	0800944f 	.word	0x0800944f
 8009280:	0800944f 	.word	0x0800944f
 8009284:	08009309 	.word	0x08009309
 8009288:	0800944f 	.word	0x0800944f
 800928c:	0800944f 	.word	0x0800944f
 8009290:	0800944f 	.word	0x0800944f
 8009294:	0800934b 	.word	0x0800934b
 8009298:	0800944f 	.word	0x0800944f
 800929c:	0800944f 	.word	0x0800944f
 80092a0:	0800944f 	.word	0x0800944f
 80092a4:	0800938b 	.word	0x0800938b
 80092a8:	0800944f 	.word	0x0800944f
 80092ac:	0800944f 	.word	0x0800944f
 80092b0:	0800944f 	.word	0x0800944f
 80092b4:	080093cd 	.word	0x080093cd
 80092b8:	0800944f 	.word	0x0800944f
 80092bc:	0800944f 	.word	0x0800944f
 80092c0:	0800944f 	.word	0x0800944f
 80092c4:	0800940d 	.word	0x0800940d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 fa66 	bl	80097a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	699a      	ldr	r2, [r3, #24]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0208 	orr.w	r2, r2, #8
 80092e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f022 0204 	bic.w	r2, r2, #4
 80092f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6999      	ldr	r1, [r3, #24]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	691a      	ldr	r2, [r3, #16]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	619a      	str	r2, [r3, #24]
      break;
 8009306:	e0a3      	b.n	8009450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68b9      	ldr	r1, [r7, #8]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 fad6 	bl	80098c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	699a      	ldr	r2, [r3, #24]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	699a      	ldr	r2, [r3, #24]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6999      	ldr	r1, [r3, #24]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	021a      	lsls	r2, r3, #8
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	619a      	str	r2, [r3, #24]
      break;
 8009348:	e082      	b.n	8009450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fb3f 	bl	80099d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	69da      	ldr	r2, [r3, #28]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0208 	orr.w	r2, r2, #8
 8009364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69da      	ldr	r2, [r3, #28]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f022 0204 	bic.w	r2, r2, #4
 8009374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69d9      	ldr	r1, [r3, #28]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	61da      	str	r2, [r3, #28]
      break;
 8009388:	e062      	b.n	8009450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68b9      	ldr	r1, [r7, #8]
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fba7 	bl	8009ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69da      	ldr	r2, [r3, #28]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	69da      	ldr	r2, [r3, #28]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69d9      	ldr	r1, [r3, #28]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	021a      	lsls	r2, r3, #8
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	61da      	str	r2, [r3, #28]
      break;
 80093ca:	e041      	b.n	8009450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68b9      	ldr	r1, [r7, #8]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fbf0 	bl	8009bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f042 0208 	orr.w	r2, r2, #8
 80093e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0204 	bic.w	r2, r2, #4
 80093f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	691a      	ldr	r2, [r3, #16]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800940a:	e021      	b.n	8009450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68b9      	ldr	r1, [r7, #8]
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fc34 	bl	8009c80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009426:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009436:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	021a      	lsls	r2, r3, #8
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800944c:	e000      	b.n	8009450 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800944e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop

08009464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d107      	bne.n	80094f0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094ee:	e02a      	b.n	8009546 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d107      	bne.n	800950a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2202      	movs	r2, #2
 80094fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009508:	e01d      	b.n	8009546 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	d107      	bne.n	8009524 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2204      	movs	r2, #4
 8009518:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009522:	e010      	b.n	8009546 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d107      	bne.n	800953e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2208      	movs	r2, #8
 8009532:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800953c:	e003      	b.n	8009546 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f7ff ffb4 	bl	80094b4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	771a      	strb	r2, [r3, #28]
}
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	429a      	cmp	r2, r3
 8009570:	d10b      	bne.n	800958a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d136      	bne.n	80095ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009588:	e031      	b.n	80095ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d10b      	bne.n	80095ac <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2202      	movs	r2, #2
 8009598:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d125      	bne.n	80095ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095aa:	e020      	b.n	80095ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d10b      	bne.n	80095ce <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2204      	movs	r2, #4
 80095ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d114      	bne.n	80095ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095cc:	e00f      	b.n	80095ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d10a      	bne.n	80095ee <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2208      	movs	r2, #8
 80095dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d103      	bne.n	80095ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7fa fb2c 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	771a      	strb	r2, [r3, #28]
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	d103      	bne.n	8009622 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	771a      	strb	r2, [r3, #28]
 8009620:	e019      	b.n	8009656 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d103      	bne.n	8009634 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2202      	movs	r2, #2
 8009630:	771a      	strb	r2, [r3, #28]
 8009632:	e010      	b.n	8009656 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d103      	bne.n	8009646 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2204      	movs	r2, #4
 8009642:	771a      	strb	r2, [r3, #28]
 8009644:	e007      	b.n	8009656 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d102      	bne.n	8009656 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2208      	movs	r2, #8
 8009654:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7ff ff18 	bl	800948c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	771a      	strb	r2, [r3, #28]
}
 8009662:	bf00      	nop
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a40      	ldr	r2, [pc, #256]	; (8009780 <TIM_Base_SetConfig+0x114>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d013      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800968a:	d00f      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a3d      	ldr	r2, [pc, #244]	; (8009784 <TIM_Base_SetConfig+0x118>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00b      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a3c      	ldr	r2, [pc, #240]	; (8009788 <TIM_Base_SetConfig+0x11c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d007      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a3b      	ldr	r2, [pc, #236]	; (800978c <TIM_Base_SetConfig+0x120>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d003      	beq.n	80096ac <TIM_Base_SetConfig+0x40>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a3a      	ldr	r2, [pc, #232]	; (8009790 <TIM_Base_SetConfig+0x124>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d108      	bne.n	80096be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a2f      	ldr	r2, [pc, #188]	; (8009780 <TIM_Base_SetConfig+0x114>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d01f      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096cc:	d01b      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a2c      	ldr	r2, [pc, #176]	; (8009784 <TIM_Base_SetConfig+0x118>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d017      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a2b      	ldr	r2, [pc, #172]	; (8009788 <TIM_Base_SetConfig+0x11c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d013      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a2a      	ldr	r2, [pc, #168]	; (800978c <TIM_Base_SetConfig+0x120>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00f      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a29      	ldr	r2, [pc, #164]	; (8009790 <TIM_Base_SetConfig+0x124>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00b      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a28      	ldr	r2, [pc, #160]	; (8009794 <TIM_Base_SetConfig+0x128>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d007      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a27      	ldr	r2, [pc, #156]	; (8009798 <TIM_Base_SetConfig+0x12c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d003      	beq.n	8009706 <TIM_Base_SetConfig+0x9a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a26      	ldr	r2, [pc, #152]	; (800979c <TIM_Base_SetConfig+0x130>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d108      	bne.n	8009718 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800970c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	4313      	orrs	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a10      	ldr	r2, [pc, #64]	; (8009780 <TIM_Base_SetConfig+0x114>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00f      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a12      	ldr	r2, [pc, #72]	; (8009790 <TIM_Base_SetConfig+0x124>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d00b      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a11      	ldr	r2, [pc, #68]	; (8009794 <TIM_Base_SetConfig+0x128>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d007      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a10      	ldr	r2, [pc, #64]	; (8009798 <TIM_Base_SetConfig+0x12c>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d003      	beq.n	8009764 <TIM_Base_SetConfig+0xf8>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a0f      	ldr	r2, [pc, #60]	; (800979c <TIM_Base_SetConfig+0x130>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d103      	bne.n	800976c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	615a      	str	r2, [r3, #20]
}
 8009772:	bf00      	nop
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40012c00 	.word	0x40012c00
 8009784:	40000400 	.word	0x40000400
 8009788:	40000800 	.word	0x40000800
 800978c:	40000c00 	.word	0x40000c00
 8009790:	40013400 	.word	0x40013400
 8009794:	40014000 	.word	0x40014000
 8009798:	40014400 	.word	0x40014400
 800979c:	40014800 	.word	0x40014800

080097a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f023 0201 	bic.w	r2, r3, #1
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0303 	bic.w	r3, r3, #3
 80097da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f023 0302 	bic.w	r3, r3, #2
 80097ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a2c      	ldr	r2, [pc, #176]	; (80098ac <TIM_OC1_SetConfig+0x10c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00f      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a2b      	ldr	r2, [pc, #172]	; (80098b0 <TIM_OC1_SetConfig+0x110>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00b      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a2a      	ldr	r2, [pc, #168]	; (80098b4 <TIM_OC1_SetConfig+0x114>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d007      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a29      	ldr	r2, [pc, #164]	; (80098b8 <TIM_OC1_SetConfig+0x118>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a28      	ldr	r2, [pc, #160]	; (80098bc <TIM_OC1_SetConfig+0x11c>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10c      	bne.n	800983a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0308 	bic.w	r3, r3, #8
 8009826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 0304 	bic.w	r3, r3, #4
 8009838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a1b      	ldr	r2, [pc, #108]	; (80098ac <TIM_OC1_SetConfig+0x10c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00f      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1a      	ldr	r2, [pc, #104]	; (80098b0 <TIM_OC1_SetConfig+0x110>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00b      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a19      	ldr	r2, [pc, #100]	; (80098b4 <TIM_OC1_SetConfig+0x114>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d007      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a18      	ldr	r2, [pc, #96]	; (80098b8 <TIM_OC1_SetConfig+0x118>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d003      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a17      	ldr	r2, [pc, #92]	; (80098bc <TIM_OC1_SetConfig+0x11c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d111      	bne.n	8009886 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	621a      	str	r2, [r3, #32]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	40012c00 	.word	0x40012c00
 80098b0:	40013400 	.word	0x40013400
 80098b4:	40014000 	.word	0x40014000
 80098b8:	40014400 	.word	0x40014400
 80098bc:	40014800 	.word	0x40014800

080098c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f023 0210 	bic.w	r2, r3, #16
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f023 0320 	bic.w	r3, r3, #32
 800990e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	4313      	orrs	r3, r2
 800991a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a28      	ldr	r2, [pc, #160]	; (80099c0 <TIM_OC2_SetConfig+0x100>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC2_SetConfig+0x6c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a27      	ldr	r2, [pc, #156]	; (80099c4 <TIM_OC2_SetConfig+0x104>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d10d      	bne.n	8009948 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a1d      	ldr	r2, [pc, #116]	; (80099c0 <TIM_OC2_SetConfig+0x100>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d00f      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1c      	ldr	r2, [pc, #112]	; (80099c4 <TIM_OC2_SetConfig+0x104>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00b      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a1b      	ldr	r2, [pc, #108]	; (80099c8 <TIM_OC2_SetConfig+0x108>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d007      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a1a      	ldr	r2, [pc, #104]	; (80099cc <TIM_OC2_SetConfig+0x10c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d003      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a19      	ldr	r2, [pc, #100]	; (80099d0 <TIM_OC2_SetConfig+0x110>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d113      	bne.n	8009998 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800997e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	4313      	orrs	r3, r2
 800998a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	4313      	orrs	r3, r2
 8009996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	621a      	str	r2, [r3, #32]
}
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40012c00 	.word	0x40012c00
 80099c4:	40013400 	.word	0x40013400
 80099c8:	40014000 	.word	0x40014000
 80099cc:	40014400 	.word	0x40014400
 80099d0:	40014800 	.word	0x40014800

080099d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 0303 	bic.w	r3, r3, #3
 8009a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a27      	ldr	r2, [pc, #156]	; (8009ad0 <TIM_OC3_SetConfig+0xfc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d003      	beq.n	8009a3e <TIM_OC3_SetConfig+0x6a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a26      	ldr	r2, [pc, #152]	; (8009ad4 <TIM_OC3_SetConfig+0x100>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d10d      	bne.n	8009a5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	021b      	lsls	r3, r3, #8
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a1c      	ldr	r2, [pc, #112]	; (8009ad0 <TIM_OC3_SetConfig+0xfc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d00f      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a1b      	ldr	r2, [pc, #108]	; (8009ad4 <TIM_OC3_SetConfig+0x100>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d00b      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a1a      	ldr	r2, [pc, #104]	; (8009ad8 <TIM_OC3_SetConfig+0x104>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d007      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a19      	ldr	r2, [pc, #100]	; (8009adc <TIM_OC3_SetConfig+0x108>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d003      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a18      	ldr	r2, [pc, #96]	; (8009ae0 <TIM_OC3_SetConfig+0x10c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d113      	bne.n	8009aaa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	621a      	str	r2, [r3, #32]
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	40012c00 	.word	0x40012c00
 8009ad4:	40013400 	.word	0x40013400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800

08009ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	031b      	lsls	r3, r3, #12
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a18      	ldr	r2, [pc, #96]	; (8009ba4 <TIM_OC4_SetConfig+0xc0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00f      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <TIM_OC4_SetConfig+0xc4>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00b      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a16      	ldr	r2, [pc, #88]	; (8009bac <TIM_OC4_SetConfig+0xc8>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d007      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <TIM_OC4_SetConfig+0xcc>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a14      	ldr	r2, [pc, #80]	; (8009bb4 <TIM_OC4_SetConfig+0xd0>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d109      	bne.n	8009b7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	019b      	lsls	r3, r3, #6
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	621a      	str	r2, [r3, #32]
}
 8009b96:	bf00      	nop
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	40012c00 	.word	0x40012c00
 8009ba8:	40013400 	.word	0x40013400
 8009bac:	40014000 	.word	0x40014000
 8009bb0:	40014400 	.word	0x40014400
 8009bb4:	40014800 	.word	0x40014800

08009bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a17      	ldr	r2, [pc, #92]	; (8009c6c <TIM_OC5_SetConfig+0xb4>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d00f      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a16      	ldr	r2, [pc, #88]	; (8009c70 <TIM_OC5_SetConfig+0xb8>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d00b      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a15      	ldr	r2, [pc, #84]	; (8009c74 <TIM_OC5_SetConfig+0xbc>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d007      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a14      	ldr	r2, [pc, #80]	; (8009c78 <TIM_OC5_SetConfig+0xc0>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d003      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a13      	ldr	r2, [pc, #76]	; (8009c7c <TIM_OC5_SetConfig+0xc4>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d109      	bne.n	8009c46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	021b      	lsls	r3, r3, #8
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	621a      	str	r2, [r3, #32]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40013400 	.word	0x40013400
 8009c74:	40014000 	.word	0x40014000
 8009c78:	40014400 	.word	0x40014400
 8009c7c:	40014800 	.word	0x40014800

08009c80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	051b      	lsls	r3, r3, #20
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a18      	ldr	r2, [pc, #96]	; (8009d38 <TIM_OC6_SetConfig+0xb8>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d00f      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a17      	ldr	r2, [pc, #92]	; (8009d3c <TIM_OC6_SetConfig+0xbc>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00b      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a16      	ldr	r2, [pc, #88]	; (8009d40 <TIM_OC6_SetConfig+0xc0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d007      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a15      	ldr	r2, [pc, #84]	; (8009d44 <TIM_OC6_SetConfig+0xc4>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d003      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a14      	ldr	r2, [pc, #80]	; (8009d48 <TIM_OC6_SetConfig+0xc8>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d109      	bne.n	8009d10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	029b      	lsls	r3, r3, #10
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	621a      	str	r2, [r3, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40013400 	.word	0x40013400
 8009d40:	40014000 	.word	0x40014000
 8009d44:	40014400 	.word	0x40014400
 8009d48:	40014800 	.word	0x40014800

08009d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f003 031f 	and.w	r3, r3, #31
 8009d5e:	2201      	movs	r2, #1
 8009d60:	fa02 f303 	lsl.w	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a1a      	ldr	r2, [r3, #32]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	43db      	mvns	r3, r3
 8009d6e:	401a      	ands	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6a1a      	ldr	r2, [r3, #32]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f003 031f 	and.w	r3, r3, #31
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	fa01 f303 	lsl.w	r3, r1, r3
 8009d84:	431a      	orrs	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	621a      	str	r2, [r3, #32]
}
 8009d8a:	bf00      	nop
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e068      	b.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a2e      	ldr	r2, [pc, #184]	; (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d004      	beq.n	8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a2d      	ldr	r2, [pc, #180]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d108      	bne.n	8009df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a1e      	ldr	r2, [pc, #120]	; (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d01d      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e22:	d018      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a1b      	ldr	r2, [pc, #108]	; (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d013      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a1a      	ldr	r2, [pc, #104]	; (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00e      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a18      	ldr	r2, [pc, #96]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d009      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a13      	ldr	r2, [pc, #76]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d004      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a14      	ldr	r2, [pc, #80]	; (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d10c      	bne.n	8009e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	40012c00 	.word	0x40012c00
 8009e94:	40013400 	.word	0x40013400
 8009e98:	40000400 	.word	0x40000400
 8009e9c:	40000800 	.word	0x40000800
 8009ea0:	40000c00 	.word	0x40000c00
 8009ea4:	40014000 	.word	0x40014000

08009ea8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d101      	bne.n	8009ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e065      	b.n	8009f90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	041b      	lsls	r3, r3, #16
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a16      	ldr	r2, [pc, #88]	; (8009f9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d004      	beq.n	8009f52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a14      	ldr	r2, [pc, #80]	; (8009fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d115      	bne.n	8009f7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	051b      	lsls	r3, r3, #20
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	40012c00 	.word	0x40012c00
 8009fa0:	40013400 	.word	0x40013400

08009fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e040      	b.n	800a074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7f9 fc3c 	bl	8003880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2224      	movs	r2, #36	; 0x24
 800a00c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0201 	bic.w	r2, r2, #1
 800a01c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f8c0 	bl	800a1a4 <UART_SetConfig>
 800a024:	4603      	mov	r3, r0
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e022      	b.n	800a074 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fb3e 	bl	800a6b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a04a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a05a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0201 	orr.w	r2, r2, #1
 800a06a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fbc5 	bl	800a7fc <UART_CheckIdleState>
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08a      	sub	sp, #40	; 0x28
 800a080:	af02      	add	r7, sp, #8
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	4613      	mov	r3, r2
 800a08a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a090:	2b20      	cmp	r3, #32
 800a092:	f040 8082 	bne.w	800a19a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <HAL_UART_Transmit+0x26>
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e07a      	b.n	800a19c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_UART_Transmit+0x38>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e073      	b.n	800a19c <HAL_UART_Transmit+0x120>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2221      	movs	r2, #33	; 0x21
 800a0c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0ca:	f7fa f855 	bl	8004178 <HAL_GetTick>
 800a0ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	88fa      	ldrh	r2, [r7, #6]
 800a0d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	88fa      	ldrh	r2, [r7, #6]
 800a0dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e8:	d108      	bne.n	800a0fc <HAL_UART_Transmit+0x80>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d104      	bne.n	800a0fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	61bb      	str	r3, [r7, #24]
 800a0fa:	e003      	b.n	800a104 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a100:	2300      	movs	r3, #0
 800a102:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a10c:	e02d      	b.n	800a16a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2200      	movs	r2, #0
 800a116:	2180      	movs	r1, #128	; 0x80
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 fbb8 	bl	800a88e <UART_WaitOnFlagUntilTimeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e039      	b.n	800a19c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10b      	bne.n	800a146 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	881a      	ldrh	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a13a:	b292      	uxth	r2, r2
 800a13c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	3302      	adds	r3, #2
 800a142:	61bb      	str	r3, [r7, #24]
 800a144:	e008      	b.n	800a158 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	b292      	uxth	r2, r2
 800a150:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	3301      	adds	r3, #1
 800a156:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a170:	b29b      	uxth	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1cb      	bne.n	800a10e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2200      	movs	r2, #0
 800a17e:	2140      	movs	r1, #64	; 0x40
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 fb84 	bl	800a88e <UART_WaitOnFlagUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e005      	b.n	800a19c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2220      	movs	r2, #32
 800a194:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	e000      	b.n	800a19c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a19a:	2302      	movs	r3, #2
  }
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3720      	adds	r7, #32
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1a4:	b5b0      	push	{r4, r5, r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689a      	ldr	r2, [r3, #8]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	695b      	ldr	r3, [r3, #20]
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	4bad      	ldr	r3, [pc, #692]	; (800a484 <UART_SetConfig+0x2e0>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	69f9      	ldr	r1, [r7, #28]
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4aa2      	ldr	r2, [pc, #648]	; (800a488 <UART_SetConfig+0x2e4>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d004      	beq.n	800a20c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	4313      	orrs	r3, r2
 800a20a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	430a      	orrs	r2, r1
 800a21e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a99      	ldr	r2, [pc, #612]	; (800a48c <UART_SetConfig+0x2e8>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d121      	bne.n	800a26e <UART_SetConfig+0xca>
 800a22a:	4b99      	ldr	r3, [pc, #612]	; (800a490 <UART_SetConfig+0x2ec>)
 800a22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a230:	f003 0303 	and.w	r3, r3, #3
 800a234:	2b03      	cmp	r3, #3
 800a236:	d817      	bhi.n	800a268 <UART_SetConfig+0xc4>
 800a238:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <UART_SetConfig+0x9c>)
 800a23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23e:	bf00      	nop
 800a240:	0800a251 	.word	0x0800a251
 800a244:	0800a25d 	.word	0x0800a25d
 800a248:	0800a257 	.word	0x0800a257
 800a24c:	0800a263 	.word	0x0800a263
 800a250:	2301      	movs	r3, #1
 800a252:	76fb      	strb	r3, [r7, #27]
 800a254:	e0e7      	b.n	800a426 <UART_SetConfig+0x282>
 800a256:	2302      	movs	r3, #2
 800a258:	76fb      	strb	r3, [r7, #27]
 800a25a:	e0e4      	b.n	800a426 <UART_SetConfig+0x282>
 800a25c:	2304      	movs	r3, #4
 800a25e:	76fb      	strb	r3, [r7, #27]
 800a260:	e0e1      	b.n	800a426 <UART_SetConfig+0x282>
 800a262:	2308      	movs	r3, #8
 800a264:	76fb      	strb	r3, [r7, #27]
 800a266:	e0de      	b.n	800a426 <UART_SetConfig+0x282>
 800a268:	2310      	movs	r3, #16
 800a26a:	76fb      	strb	r3, [r7, #27]
 800a26c:	e0db      	b.n	800a426 <UART_SetConfig+0x282>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a88      	ldr	r2, [pc, #544]	; (800a494 <UART_SetConfig+0x2f0>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d132      	bne.n	800a2de <UART_SetConfig+0x13a>
 800a278:	4b85      	ldr	r3, [pc, #532]	; (800a490 <UART_SetConfig+0x2ec>)
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27e:	f003 030c 	and.w	r3, r3, #12
 800a282:	2b0c      	cmp	r3, #12
 800a284:	d828      	bhi.n	800a2d8 <UART_SetConfig+0x134>
 800a286:	a201      	add	r2, pc, #4	; (adr r2, 800a28c <UART_SetConfig+0xe8>)
 800a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28c:	0800a2c1 	.word	0x0800a2c1
 800a290:	0800a2d9 	.word	0x0800a2d9
 800a294:	0800a2d9 	.word	0x0800a2d9
 800a298:	0800a2d9 	.word	0x0800a2d9
 800a29c:	0800a2cd 	.word	0x0800a2cd
 800a2a0:	0800a2d9 	.word	0x0800a2d9
 800a2a4:	0800a2d9 	.word	0x0800a2d9
 800a2a8:	0800a2d9 	.word	0x0800a2d9
 800a2ac:	0800a2c7 	.word	0x0800a2c7
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2d9 	.word	0x0800a2d9
 800a2b8:	0800a2d9 	.word	0x0800a2d9
 800a2bc:	0800a2d3 	.word	0x0800a2d3
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	76fb      	strb	r3, [r7, #27]
 800a2c4:	e0af      	b.n	800a426 <UART_SetConfig+0x282>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	76fb      	strb	r3, [r7, #27]
 800a2ca:	e0ac      	b.n	800a426 <UART_SetConfig+0x282>
 800a2cc:	2304      	movs	r3, #4
 800a2ce:	76fb      	strb	r3, [r7, #27]
 800a2d0:	e0a9      	b.n	800a426 <UART_SetConfig+0x282>
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	76fb      	strb	r3, [r7, #27]
 800a2d6:	e0a6      	b.n	800a426 <UART_SetConfig+0x282>
 800a2d8:	2310      	movs	r3, #16
 800a2da:	76fb      	strb	r3, [r7, #27]
 800a2dc:	e0a3      	b.n	800a426 <UART_SetConfig+0x282>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a6d      	ldr	r2, [pc, #436]	; (800a498 <UART_SetConfig+0x2f4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d120      	bne.n	800a32a <UART_SetConfig+0x186>
 800a2e8:	4b69      	ldr	r3, [pc, #420]	; (800a490 <UART_SetConfig+0x2ec>)
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2f2:	2b30      	cmp	r3, #48	; 0x30
 800a2f4:	d013      	beq.n	800a31e <UART_SetConfig+0x17a>
 800a2f6:	2b30      	cmp	r3, #48	; 0x30
 800a2f8:	d814      	bhi.n	800a324 <UART_SetConfig+0x180>
 800a2fa:	2b20      	cmp	r3, #32
 800a2fc:	d009      	beq.n	800a312 <UART_SetConfig+0x16e>
 800a2fe:	2b20      	cmp	r3, #32
 800a300:	d810      	bhi.n	800a324 <UART_SetConfig+0x180>
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <UART_SetConfig+0x168>
 800a306:	2b10      	cmp	r3, #16
 800a308:	d006      	beq.n	800a318 <UART_SetConfig+0x174>
 800a30a:	e00b      	b.n	800a324 <UART_SetConfig+0x180>
 800a30c:	2300      	movs	r3, #0
 800a30e:	76fb      	strb	r3, [r7, #27]
 800a310:	e089      	b.n	800a426 <UART_SetConfig+0x282>
 800a312:	2302      	movs	r3, #2
 800a314:	76fb      	strb	r3, [r7, #27]
 800a316:	e086      	b.n	800a426 <UART_SetConfig+0x282>
 800a318:	2304      	movs	r3, #4
 800a31a:	76fb      	strb	r3, [r7, #27]
 800a31c:	e083      	b.n	800a426 <UART_SetConfig+0x282>
 800a31e:	2308      	movs	r3, #8
 800a320:	76fb      	strb	r3, [r7, #27]
 800a322:	e080      	b.n	800a426 <UART_SetConfig+0x282>
 800a324:	2310      	movs	r3, #16
 800a326:	76fb      	strb	r3, [r7, #27]
 800a328:	e07d      	b.n	800a426 <UART_SetConfig+0x282>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a5b      	ldr	r2, [pc, #364]	; (800a49c <UART_SetConfig+0x2f8>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d120      	bne.n	800a376 <UART_SetConfig+0x1d2>
 800a334:	4b56      	ldr	r3, [pc, #344]	; (800a490 <UART_SetConfig+0x2ec>)
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a33e:	2bc0      	cmp	r3, #192	; 0xc0
 800a340:	d013      	beq.n	800a36a <UART_SetConfig+0x1c6>
 800a342:	2bc0      	cmp	r3, #192	; 0xc0
 800a344:	d814      	bhi.n	800a370 <UART_SetConfig+0x1cc>
 800a346:	2b80      	cmp	r3, #128	; 0x80
 800a348:	d009      	beq.n	800a35e <UART_SetConfig+0x1ba>
 800a34a:	2b80      	cmp	r3, #128	; 0x80
 800a34c:	d810      	bhi.n	800a370 <UART_SetConfig+0x1cc>
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <UART_SetConfig+0x1b4>
 800a352:	2b40      	cmp	r3, #64	; 0x40
 800a354:	d006      	beq.n	800a364 <UART_SetConfig+0x1c0>
 800a356:	e00b      	b.n	800a370 <UART_SetConfig+0x1cc>
 800a358:	2300      	movs	r3, #0
 800a35a:	76fb      	strb	r3, [r7, #27]
 800a35c:	e063      	b.n	800a426 <UART_SetConfig+0x282>
 800a35e:	2302      	movs	r3, #2
 800a360:	76fb      	strb	r3, [r7, #27]
 800a362:	e060      	b.n	800a426 <UART_SetConfig+0x282>
 800a364:	2304      	movs	r3, #4
 800a366:	76fb      	strb	r3, [r7, #27]
 800a368:	e05d      	b.n	800a426 <UART_SetConfig+0x282>
 800a36a:	2308      	movs	r3, #8
 800a36c:	76fb      	strb	r3, [r7, #27]
 800a36e:	e05a      	b.n	800a426 <UART_SetConfig+0x282>
 800a370:	2310      	movs	r3, #16
 800a372:	76fb      	strb	r3, [r7, #27]
 800a374:	e057      	b.n	800a426 <UART_SetConfig+0x282>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a49      	ldr	r2, [pc, #292]	; (800a4a0 <UART_SetConfig+0x2fc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d125      	bne.n	800a3cc <UART_SetConfig+0x228>
 800a380:	4b43      	ldr	r3, [pc, #268]	; (800a490 <UART_SetConfig+0x2ec>)
 800a382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a38a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a38e:	d017      	beq.n	800a3c0 <UART_SetConfig+0x21c>
 800a390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a394:	d817      	bhi.n	800a3c6 <UART_SetConfig+0x222>
 800a396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a39a:	d00b      	beq.n	800a3b4 <UART_SetConfig+0x210>
 800a39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a0:	d811      	bhi.n	800a3c6 <UART_SetConfig+0x222>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <UART_SetConfig+0x20a>
 800a3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3aa:	d006      	beq.n	800a3ba <UART_SetConfig+0x216>
 800a3ac:	e00b      	b.n	800a3c6 <UART_SetConfig+0x222>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	76fb      	strb	r3, [r7, #27]
 800a3b2:	e038      	b.n	800a426 <UART_SetConfig+0x282>
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	76fb      	strb	r3, [r7, #27]
 800a3b8:	e035      	b.n	800a426 <UART_SetConfig+0x282>
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	76fb      	strb	r3, [r7, #27]
 800a3be:	e032      	b.n	800a426 <UART_SetConfig+0x282>
 800a3c0:	2308      	movs	r3, #8
 800a3c2:	76fb      	strb	r3, [r7, #27]
 800a3c4:	e02f      	b.n	800a426 <UART_SetConfig+0x282>
 800a3c6:	2310      	movs	r3, #16
 800a3c8:	76fb      	strb	r3, [r7, #27]
 800a3ca:	e02c      	b.n	800a426 <UART_SetConfig+0x282>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a2d      	ldr	r2, [pc, #180]	; (800a488 <UART_SetConfig+0x2e4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d125      	bne.n	800a422 <UART_SetConfig+0x27e>
 800a3d6:	4b2e      	ldr	r3, [pc, #184]	; (800a490 <UART_SetConfig+0x2ec>)
 800a3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a3e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3e4:	d017      	beq.n	800a416 <UART_SetConfig+0x272>
 800a3e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3ea:	d817      	bhi.n	800a41c <UART_SetConfig+0x278>
 800a3ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3f0:	d00b      	beq.n	800a40a <UART_SetConfig+0x266>
 800a3f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3f6:	d811      	bhi.n	800a41c <UART_SetConfig+0x278>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <UART_SetConfig+0x260>
 800a3fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a400:	d006      	beq.n	800a410 <UART_SetConfig+0x26c>
 800a402:	e00b      	b.n	800a41c <UART_SetConfig+0x278>
 800a404:	2300      	movs	r3, #0
 800a406:	76fb      	strb	r3, [r7, #27]
 800a408:	e00d      	b.n	800a426 <UART_SetConfig+0x282>
 800a40a:	2302      	movs	r3, #2
 800a40c:	76fb      	strb	r3, [r7, #27]
 800a40e:	e00a      	b.n	800a426 <UART_SetConfig+0x282>
 800a410:	2304      	movs	r3, #4
 800a412:	76fb      	strb	r3, [r7, #27]
 800a414:	e007      	b.n	800a426 <UART_SetConfig+0x282>
 800a416:	2308      	movs	r3, #8
 800a418:	76fb      	strb	r3, [r7, #27]
 800a41a:	e004      	b.n	800a426 <UART_SetConfig+0x282>
 800a41c:	2310      	movs	r3, #16
 800a41e:	76fb      	strb	r3, [r7, #27]
 800a420:	e001      	b.n	800a426 <UART_SetConfig+0x282>
 800a422:	2310      	movs	r3, #16
 800a424:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a17      	ldr	r2, [pc, #92]	; (800a488 <UART_SetConfig+0x2e4>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	f040 8087 	bne.w	800a540 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a432:	7efb      	ldrb	r3, [r7, #27]
 800a434:	2b08      	cmp	r3, #8
 800a436:	d837      	bhi.n	800a4a8 <UART_SetConfig+0x304>
 800a438:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <UART_SetConfig+0x29c>)
 800a43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43e:	bf00      	nop
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a4a9 	.word	0x0800a4a9
 800a448:	0800a46d 	.word	0x0800a46d
 800a44c:	0800a4a9 	.word	0x0800a4a9
 800a450:	0800a473 	.word	0x0800a473
 800a454:	0800a4a9 	.word	0x0800a4a9
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	0800a4a9 	.word	0x0800a4a9
 800a460:	0800a47b 	.word	0x0800a47b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a464:	f7fc fc80 	bl	8006d68 <HAL_RCC_GetPCLK1Freq>
 800a468:	6178      	str	r0, [r7, #20]
        break;
 800a46a:	e022      	b.n	800a4b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <UART_SetConfig+0x300>)
 800a46e:	617b      	str	r3, [r7, #20]
        break;
 800a470:	e01f      	b.n	800a4b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a472:	f7fc fbe3 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 800a476:	6178      	str	r0, [r7, #20]
        break;
 800a478:	e01b      	b.n	800a4b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a47e:	617b      	str	r3, [r7, #20]
        break;
 800a480:	e017      	b.n	800a4b2 <UART_SetConfig+0x30e>
 800a482:	bf00      	nop
 800a484:	efff69f3 	.word	0xefff69f3
 800a488:	40008000 	.word	0x40008000
 800a48c:	40013800 	.word	0x40013800
 800a490:	40021000 	.word	0x40021000
 800a494:	40004400 	.word	0x40004400
 800a498:	40004800 	.word	0x40004800
 800a49c:	40004c00 	.word	0x40004c00
 800a4a0:	40005000 	.word	0x40005000
 800a4a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	76bb      	strb	r3, [r7, #26]
        break;
 800a4b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80f1 	beq.w	800a69c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	005b      	lsls	r3, r3, #1
 800a4c2:	4413      	add	r3, r2
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d305      	bcc.n	800a4d6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d902      	bls.n	800a4dc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	76bb      	strb	r3, [r7, #26]
 800a4da:	e0df      	b.n	800a69c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f04f 0100 	mov.w	r1, #0
 800a4e4:	f04f 0200 	mov.w	r2, #0
 800a4e8:	f04f 0300 	mov.w	r3, #0
 800a4ec:	020b      	lsls	r3, r1, #8
 800a4ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4f2:	0202      	lsls	r2, r0, #8
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	6849      	ldr	r1, [r1, #4]
 800a4f8:	0849      	lsrs	r1, r1, #1
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	f04f 0100 	mov.w	r1, #0
 800a500:	1814      	adds	r4, r2, r0
 800a502:	eb43 0501 	adc.w	r5, r3, r1
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	461a      	mov	r2, r3
 800a50c:	f04f 0300 	mov.w	r3, #0
 800a510:	4620      	mov	r0, r4
 800a512:	4629      	mov	r1, r5
 800a514:	f7f6 fb9a 	bl	8000c4c <__aeabi_uldivmod>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4613      	mov	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a526:	d308      	bcc.n	800a53a <UART_SetConfig+0x396>
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52e:	d204      	bcs.n	800a53a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	693a      	ldr	r2, [r7, #16]
 800a536:	60da      	str	r2, [r3, #12]
 800a538:	e0b0      	b.n	800a69c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	76bb      	strb	r3, [r7, #26]
 800a53e:	e0ad      	b.n	800a69c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a548:	d15c      	bne.n	800a604 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a54a:	7efb      	ldrb	r3, [r7, #27]
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d828      	bhi.n	800a5a2 <UART_SetConfig+0x3fe>
 800a550:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <UART_SetConfig+0x3b4>)
 800a552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a556:	bf00      	nop
 800a558:	0800a57d 	.word	0x0800a57d
 800a55c:	0800a585 	.word	0x0800a585
 800a560:	0800a58d 	.word	0x0800a58d
 800a564:	0800a5a3 	.word	0x0800a5a3
 800a568:	0800a593 	.word	0x0800a593
 800a56c:	0800a5a3 	.word	0x0800a5a3
 800a570:	0800a5a3 	.word	0x0800a5a3
 800a574:	0800a5a3 	.word	0x0800a5a3
 800a578:	0800a59b 	.word	0x0800a59b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a57c:	f7fc fbf4 	bl	8006d68 <HAL_RCC_GetPCLK1Freq>
 800a580:	6178      	str	r0, [r7, #20]
        break;
 800a582:	e013      	b.n	800a5ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a584:	f7fc fc06 	bl	8006d94 <HAL_RCC_GetPCLK2Freq>
 800a588:	6178      	str	r0, [r7, #20]
        break;
 800a58a:	e00f      	b.n	800a5ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a58c:	4b49      	ldr	r3, [pc, #292]	; (800a6b4 <UART_SetConfig+0x510>)
 800a58e:	617b      	str	r3, [r7, #20]
        break;
 800a590:	e00c      	b.n	800a5ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a592:	f7fc fb53 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 800a596:	6178      	str	r0, [r7, #20]
        break;
 800a598:	e008      	b.n	800a5ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a59a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a59e:	617b      	str	r3, [r7, #20]
        break;
 800a5a0:	e004      	b.n	800a5ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	76bb      	strb	r3, [r7, #26]
        break;
 800a5aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d074      	beq.n	800a69c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	005a      	lsls	r2, r3, #1
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	085b      	lsrs	r3, r3, #1
 800a5bc:	441a      	add	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	2b0f      	cmp	r3, #15
 800a5ce:	d916      	bls.n	800a5fe <UART_SetConfig+0x45a>
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d6:	d212      	bcs.n	800a5fe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f023 030f 	bic.w	r3, r3, #15
 800a5e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	085b      	lsrs	r3, r3, #1
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	f003 0307 	and.w	r3, r3, #7
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	89fb      	ldrh	r3, [r7, #14]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	89fa      	ldrh	r2, [r7, #14]
 800a5fa:	60da      	str	r2, [r3, #12]
 800a5fc:	e04e      	b.n	800a69c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	76bb      	strb	r3, [r7, #26]
 800a602:	e04b      	b.n	800a69c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a604:	7efb      	ldrb	r3, [r7, #27]
 800a606:	2b08      	cmp	r3, #8
 800a608:	d827      	bhi.n	800a65a <UART_SetConfig+0x4b6>
 800a60a:	a201      	add	r2, pc, #4	; (adr r2, 800a610 <UART_SetConfig+0x46c>)
 800a60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a610:	0800a635 	.word	0x0800a635
 800a614:	0800a63d 	.word	0x0800a63d
 800a618:	0800a645 	.word	0x0800a645
 800a61c:	0800a65b 	.word	0x0800a65b
 800a620:	0800a64b 	.word	0x0800a64b
 800a624:	0800a65b 	.word	0x0800a65b
 800a628:	0800a65b 	.word	0x0800a65b
 800a62c:	0800a65b 	.word	0x0800a65b
 800a630:	0800a653 	.word	0x0800a653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a634:	f7fc fb98 	bl	8006d68 <HAL_RCC_GetPCLK1Freq>
 800a638:	6178      	str	r0, [r7, #20]
        break;
 800a63a:	e013      	b.n	800a664 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a63c:	f7fc fbaa 	bl	8006d94 <HAL_RCC_GetPCLK2Freq>
 800a640:	6178      	str	r0, [r7, #20]
        break;
 800a642:	e00f      	b.n	800a664 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a644:	4b1b      	ldr	r3, [pc, #108]	; (800a6b4 <UART_SetConfig+0x510>)
 800a646:	617b      	str	r3, [r7, #20]
        break;
 800a648:	e00c      	b.n	800a664 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a64a:	f7fc faf7 	bl	8006c3c <HAL_RCC_GetSysClockFreq>
 800a64e:	6178      	str	r0, [r7, #20]
        break;
 800a650:	e008      	b.n	800a664 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a656:	617b      	str	r3, [r7, #20]
        break;
 800a658:	e004      	b.n	800a664 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	76bb      	strb	r3, [r7, #26]
        break;
 800a662:	bf00      	nop
    }

    if (pclk != 0U)
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d018      	beq.n	800a69c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	085a      	lsrs	r2, r3, #1
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	441a      	add	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2b0f      	cmp	r3, #15
 800a684:	d908      	bls.n	800a698 <UART_SetConfig+0x4f4>
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a68c:	d204      	bcs.n	800a698 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	60da      	str	r2, [r3, #12]
 800a696:	e001      	b.n	800a69c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a6a8:	7ebb      	ldrb	r3, [r7, #26]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	00f42400 	.word	0x00f42400

0800a6b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00a      	beq.n	800a6e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00a      	beq.n	800a704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	430a      	orrs	r2, r1
 800a702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00a      	beq.n	800a726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	430a      	orrs	r2, r1
 800a724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	430a      	orrs	r2, r1
 800a746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	f003 0310 	and.w	r3, r3, #16
 800a750:	2b00      	cmp	r3, #0
 800a752:	d00a      	beq.n	800a76a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	430a      	orrs	r2, r1
 800a768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d00a      	beq.n	800a78c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	430a      	orrs	r2, r1
 800a78a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	d01a      	beq.n	800a7ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7b6:	d10a      	bne.n	800a7ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	430a      	orrs	r2, r1
 800a7ee:	605a      	str	r2, [r3, #4]
  }
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af02      	add	r7, sp, #8
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a80c:	f7f9 fcb4 	bl	8004178 <HAL_GetTick>
 800a810:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0308 	and.w	r3, r3, #8
 800a81c:	2b08      	cmp	r3, #8
 800a81e:	d10e      	bne.n	800a83e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f82d 	bl	800a88e <UART_WaitOnFlagUntilTimeout>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e023      	b.n	800a886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b04      	cmp	r3, #4
 800a84a:	d10e      	bne.n	800a86a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a84c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f817 	bl	800a88e <UART_WaitOnFlagUntilTimeout>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a866:	2303      	movs	r3, #3
 800a868:	e00d      	b.n	800a886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2220      	movs	r2, #32
 800a874:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	603b      	str	r3, [r7, #0]
 800a89a:	4613      	mov	r3, r2
 800a89c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a89e:	e05e      	b.n	800a95e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8a6:	d05a      	beq.n	800a95e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8a8:	f7f9 fc66 	bl	8004178 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d302      	bcc.n	800a8be <UART_WaitOnFlagUntilTimeout+0x30>
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d11b      	bne.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a8cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 0201 	bic.w	r2, r2, #1
 800a8dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e043      	b.n	800a97e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	d02c      	beq.n	800a95e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a90e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a912:	d124      	bne.n	800a95e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a91c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a92c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	689a      	ldr	r2, [r3, #8]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f022 0201 	bic.w	r2, r2, #1
 800a93c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2220      	movs	r2, #32
 800a942:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2220      	movs	r2, #32
 800a948:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e00f      	b.n	800a97e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69da      	ldr	r2, [r3, #28]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4013      	ands	r3, r2
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	bf0c      	ite	eq
 800a96e:	2301      	moveq	r3, #1
 800a970:	2300      	movne	r3, #0
 800a972:	b2db      	uxtb	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d091      	beq.n	800a8a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
	...

0800a988 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a98c:	4904      	ldr	r1, [pc, #16]	; (800a9a0 <MX_FATFS_Init+0x18>)
 800a98e:	4805      	ldr	r0, [pc, #20]	; (800a9a4 <MX_FATFS_Init+0x1c>)
 800a990:	f000 f8ae 	bl	800aaf0 <FATFS_LinkDriver>
 800a994:	4603      	mov	r3, r0
 800a996:	461a      	mov	r2, r3
 800a998:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <MX_FATFS_Init+0x20>)
 800a99a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a99c:	bf00      	nop
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	2000de44 	.word	0x2000de44
 800a9a4:	20000148 	.word	0x20000148
 800a9a8:	2000de48 	.word	0x2000de48

0800a9ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7f6 fc77 	bl	80012ac <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800a9be:	bf00      	nop
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f6 fd4f 	bl	8001478 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800a9da:	bf00      	nop
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
 800a9ee:	603b      	str	r3, [r7, #0]
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 800a9f4:	7bf8      	ldrb	r0, [r7, #15]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	f7f6 fd52 	bl	80014a4 <SD_disk_read>
  /* USER CODE END READ */
}
 800aa00:	bf00      	nop
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
 800aa16:	4603      	mov	r3, r0
 800aa18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 800aa1a:	7bf8      	ldrb	r0, [r7, #15]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	f7f6 fda9 	bl	8001578 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800aa26:	bf00      	nop
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	603a      	str	r2, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 800aa40:	79fb      	ldrb	r3, [r7, #7]
 800aa42:	79b9      	ldrb	r1, [r7, #6]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7f6 fe1a 	bl	8001680 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800aa4c:	bf00      	nop
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
	...

0800aa58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	4613      	mov	r3, r2
 800aa64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aa6e:	4b1f      	ldr	r3, [pc, #124]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aa70:	7a5b      	ldrb	r3, [r3, #9]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d131      	bne.n	800aadc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa78:	4b1c      	ldr	r3, [pc, #112]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aa7a:	7a5b      	ldrb	r3, [r3, #9]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	461a      	mov	r2, r3
 800aa80:	4b1a      	ldr	r3, [pc, #104]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aa82:	2100      	movs	r1, #0
 800aa84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa86:	4b19      	ldr	r3, [pc, #100]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aa88:	7a5b      	ldrb	r3, [r3, #9]
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	4a17      	ldr	r2, [pc, #92]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aa96:	4b15      	ldr	r3, [pc, #84]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aa98:	7a5b      	ldrb	r3, [r3, #9]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4b13      	ldr	r3, [pc, #76]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aaa0:	4413      	add	r3, r2
 800aaa2:	79fa      	ldrb	r2, [r7, #7]
 800aaa4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aaa6:	4b11      	ldr	r3, [pc, #68]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aaa8:	7a5b      	ldrb	r3, [r3, #9]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	b2d1      	uxtb	r1, r2
 800aab0:	4a0e      	ldr	r2, [pc, #56]	; (800aaec <FATFS_LinkDriverEx+0x94>)
 800aab2:	7251      	strb	r1, [r2, #9]
 800aab4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aab6:	7dbb      	ldrb	r3, [r7, #22]
 800aab8:	3330      	adds	r3, #48	; 0x30
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	3301      	adds	r3, #1
 800aac4:	223a      	movs	r2, #58	; 0x3a
 800aac6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	3302      	adds	r3, #2
 800aacc:	222f      	movs	r2, #47	; 0x2f
 800aace:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	3303      	adds	r3, #3
 800aad4:	2200      	movs	r2, #0
 800aad6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	20000230 	.word	0x20000230

0800aaf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aafa:	2200      	movs	r2, #0
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff ffaa 	bl	800aa58 <FATFS_LinkDriverEx>
 800ab04:	4603      	mov	r3, r0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
	...

0800ab10 <__NVIC_SetPriority>:
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	6039      	str	r1, [r7, #0]
 800ab1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ab1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	db0a      	blt.n	800ab3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	490c      	ldr	r1, [pc, #48]	; (800ab5c <__NVIC_SetPriority+0x4c>)
 800ab2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab2e:	0112      	lsls	r2, r2, #4
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	440b      	add	r3, r1
 800ab34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ab38:	e00a      	b.n	800ab50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	4908      	ldr	r1, [pc, #32]	; (800ab60 <__NVIC_SetPriority+0x50>)
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	3b04      	subs	r3, #4
 800ab48:	0112      	lsls	r2, r2, #4
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	761a      	strb	r2, [r3, #24]
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	e000e100 	.word	0xe000e100
 800ab60:	e000ed00 	.word	0xe000ed00

0800ab64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ab68:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <SysTick_Handler+0x1c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ab6c:	f001 ffcc 	bl	800cb08 <xTaskGetSchedulerState>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d001      	beq.n	800ab7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ab76:	f002 fdcf 	bl	800d718 <xPortSysTickHandler>
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	e000e010 	.word	0xe000e010

0800ab84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ab84:	b580      	push	{r7, lr}
 800ab86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	f06f 0004 	mvn.w	r0, #4
 800ab8e:	f7ff ffbf 	bl	800ab10 <__NVIC_SetPriority>
#endif
}
 800ab92:	bf00      	nop
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab9e:	f3ef 8305 	mrs	r3, IPSR
 800aba2:	603b      	str	r3, [r7, #0]
  return(result);
 800aba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800abaa:	f06f 0305 	mvn.w	r3, #5
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	e00c      	b.n	800abcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800abb2:	4b0a      	ldr	r3, [pc, #40]	; (800abdc <osKernelInitialize+0x44>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d105      	bne.n	800abc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800abba:	4b08      	ldr	r3, [pc, #32]	; (800abdc <osKernelInitialize+0x44>)
 800abbc:	2201      	movs	r2, #1
 800abbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	607b      	str	r3, [r7, #4]
 800abc4:	e002      	b.n	800abcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800abc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800abcc:	687b      	ldr	r3, [r7, #4]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	2000023c 	.word	0x2000023c

0800abe0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe6:	f3ef 8305 	mrs	r3, IPSR
 800abea:	603b      	str	r3, [r7, #0]
  return(result);
 800abec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <osKernelStart+0x1a>
    stat = osErrorISR;
 800abf2:	f06f 0305 	mvn.w	r3, #5
 800abf6:	607b      	str	r3, [r7, #4]
 800abf8:	e010      	b.n	800ac1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800abfa:	4b0b      	ldr	r3, [pc, #44]	; (800ac28 <osKernelStart+0x48>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d109      	bne.n	800ac16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ac02:	f7ff ffbf 	bl	800ab84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ac06:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <osKernelStart+0x48>)
 800ac08:	2202      	movs	r2, #2
 800ac0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ac0c:	f001 faf8 	bl	800c200 <vTaskStartScheduler>
      stat = osOK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	607b      	str	r3, [r7, #4]
 800ac14:	e002      	b.n	800ac1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ac16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac1c:	687b      	ldr	r3, [r7, #4]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	2000023c 	.word	0x2000023c

0800ac2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08e      	sub	sp, #56	; 0x38
 800ac30:	af04      	add	r7, sp, #16
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac3c:	f3ef 8305 	mrs	r3, IPSR
 800ac40:	617b      	str	r3, [r7, #20]
  return(result);
 800ac42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d17e      	bne.n	800ad46 <osThreadNew+0x11a>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d07b      	beq.n	800ad46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ac4e:	2380      	movs	r3, #128	; 0x80
 800ac50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ac52:	2318      	movs	r3, #24
 800ac54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ac5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d045      	beq.n	800acf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <osThreadNew+0x48>
        name = attr->name;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d008      	beq.n	800ac9a <osThreadNew+0x6e>
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	2b38      	cmp	r3, #56	; 0x38
 800ac8c:	d805      	bhi.n	800ac9a <osThreadNew+0x6e>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <osThreadNew+0x72>
        return (NULL);
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e054      	b.n	800ad48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	089b      	lsrs	r3, r3, #2
 800acac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00e      	beq.n	800acd4 <osThreadNew+0xa8>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	2b5b      	cmp	r3, #91	; 0x5b
 800acbc:	d90a      	bls.n	800acd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <osThreadNew+0xa8>
        mem = 1;
 800acce:	2301      	movs	r3, #1
 800acd0:	61bb      	str	r3, [r7, #24]
 800acd2:	e010      	b.n	800acf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10c      	bne.n	800acf6 <osThreadNew+0xca>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d108      	bne.n	800acf6 <osThreadNew+0xca>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d104      	bne.n	800acf6 <osThreadNew+0xca>
          mem = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	61bb      	str	r3, [r7, #24]
 800acf0:	e001      	b.n	800acf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d110      	bne.n	800ad1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ad04:	9202      	str	r2, [sp, #8]
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6a3a      	ldr	r2, [r7, #32]
 800ad10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f001 f820 	bl	800bd58 <xTaskCreateStatic>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	613b      	str	r3, [r7, #16]
 800ad1c:	e013      	b.n	800ad46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d110      	bne.n	800ad46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	f107 0310 	add.w	r3, r7, #16
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f001 f86b 	bl	800be12 <xTaskCreate>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d001      	beq.n	800ad46 <osThreadNew+0x11a>
            hTask = NULL;
 800ad42:	2300      	movs	r3, #0
 800ad44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ad46:	693b      	ldr	r3, [r7, #16]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3728      	adds	r7, #40	; 0x28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad58:	f3ef 8305 	mrs	r3, IPSR
 800ad5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <osDelay+0x1c>
    stat = osErrorISR;
 800ad64:	f06f 0305 	mvn.w	r3, #5
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e007      	b.n	800ad7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <osDelay+0x2c>
      vTaskDelay(ticks);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 fa0e 	bl	800c198 <vTaskDelay>
    }
  }

  return (stat);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b086      	sub	sp, #24
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad8e:	f3ef 8305 	mrs	r3, IPSR
 800ad92:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad94:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ad9a:	f06f 0305 	mvn.w	r3, #5
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	e019      	b.n	800add6 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ada6:	f001 fb3d 	bl	800c424 <xTaskGetTickCount>
 800adaa:	4603      	mov	r3, r0
 800adac:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d009      	beq.n	800add0 <osDelayUntil+0x4a>
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	db06      	blt.n	800add0 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800adc2:	f107 0308 	add.w	r3, r7, #8
 800adc6:	6939      	ldr	r1, [r7, #16]
 800adc8:	4618      	mov	r0, r3
 800adca:	f001 f967 	bl	800c09c <vTaskDelayUntil>
 800adce:	e002      	b.n	800add6 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800add0:	f06f 0303 	mvn.w	r3, #3
 800add4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800add6:	697b      	ldr	r3, [r7, #20]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adec:	f3ef 8305 	mrs	r3, IPSR
 800adf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800adf2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d12d      	bne.n	800ae54 <osEventFlagsNew+0x74>
    mem = -1;
 800adf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adfc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d015      	beq.n	800ae30 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <osEventFlagsNew+0x3a>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	2b1f      	cmp	r3, #31
 800ae12:	d902      	bls.n	800ae1a <osEventFlagsNew+0x3a>
        mem = 1;
 800ae14:	2301      	movs	r3, #1
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	e00c      	b.n	800ae34 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d108      	bne.n	800ae34 <osEventFlagsNew+0x54>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d104      	bne.n	800ae34 <osEventFlagsNew+0x54>
          mem = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	613b      	str	r3, [r7, #16]
 800ae2e:	e001      	b.n	800ae34 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d106      	bne.n	800ae48 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f8a8 	bl	800af94 <xEventGroupCreateStatic>
 800ae44:	6178      	str	r0, [r7, #20]
 800ae46:	e005      	b.n	800ae54 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d102      	bne.n	800ae54 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800ae4e:	f000 f8d8 	bl	800b002 <xEventGroupCreate>
 800ae52:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ae54:	697b      	ldr	r3, [r7, #20]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b08c      	sub	sp, #48	; 0x30
 800ae62:	af02      	add	r7, sp, #8
 800ae64:	60f8      	str	r0, [r7, #12]
 800ae66:	60b9      	str	r1, [r7, #8]
 800ae68:	607a      	str	r2, [r7, #4]
 800ae6a:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <osEventFlagsWait+0x22>
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800ae80:	f06f 0303 	mvn.w	r3, #3
 800ae84:	61fb      	str	r3, [r7, #28]
 800ae86:	e04b      	b.n	800af20 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae88:	f3ef 8305 	mrs	r3, IPSR
 800ae8c:	617b      	str	r3, [r7, #20]
  return(result);
 800ae8e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800ae94:	f06f 0305 	mvn.w	r3, #5
 800ae98:	61fb      	str	r3, [r7, #28]
 800ae9a:	e041      	b.n	800af20 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800aea6:	2301      	movs	r3, #1
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
 800aeaa:	e001      	b.n	800aeb0 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800aeac:	2300      	movs	r3, #0
 800aeae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	623b      	str	r3, [r7, #32]
 800aebe:	e001      	b.n	800aec4 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800aec0:	2301      	movs	r3, #1
 800aec2:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	6a3a      	ldr	r2, [r7, #32]
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	69b8      	ldr	r0, [r7, #24]
 800aed0:	f000 f8b2 	bl	800b038 <xEventGroupWaitBits>
 800aed4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d010      	beq.n	800af02 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4013      	ands	r3, r2
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d019      	beq.n	800af20 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800aef2:	f06f 0301 	mvn.w	r3, #1
 800aef6:	61fb      	str	r3, [r7, #28]
 800aef8:	e012      	b.n	800af20 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800aefa:	f06f 0302 	mvn.w	r3, #2
 800aefe:	61fb      	str	r3, [r7, #28]
 800af00:	e00e      	b.n	800af20 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4013      	ands	r3, r2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d109      	bne.n	800af20 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800af12:	f06f 0301 	mvn.w	r3, #1
 800af16:	61fb      	str	r3, [r7, #28]
 800af18:	e002      	b.n	800af20 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800af1a:	f06f 0302 	mvn.w	r3, #2
 800af1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800af20:	69fb      	ldr	r3, [r7, #28]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3728      	adds	r7, #40	; 0x28
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4a07      	ldr	r2, [pc, #28]	; (800af58 <vApplicationGetIdleTaskMemory+0x2c>)
 800af3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	4a06      	ldr	r2, [pc, #24]	; (800af5c <vApplicationGetIdleTaskMemory+0x30>)
 800af42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2280      	movs	r2, #128	; 0x80
 800af48:	601a      	str	r2, [r3, #0]
}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	20000240 	.word	0x20000240
 800af5c:	2000029c 	.word	0x2000029c

0800af60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4a07      	ldr	r2, [pc, #28]	; (800af8c <vApplicationGetTimerTaskMemory+0x2c>)
 800af70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	4a06      	ldr	r2, [pc, #24]	; (800af90 <vApplicationGetTimerTaskMemory+0x30>)
 800af76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af7e:	601a      	str	r2, [r3, #0]
}
 800af80:	bf00      	nop
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	2000049c 	.word	0x2000049c
 800af90:	200004f8 	.word	0x200004f8

0800af94 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800afb8:	2320      	movs	r3, #32
 800afba:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2b20      	cmp	r3, #32
 800afc0:	d00a      	beq.n	800afd8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	60fb      	str	r3, [r7, #12]
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	3304      	adds	r3, #4
 800afec:	4618      	mov	r0, r3
 800afee:	f000 f913 	bl	800b218 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	2201      	movs	r2, #1
 800aff6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800aff8:	697b      	ldr	r3, [r7, #20]
	}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b008:	2020      	movs	r0, #32
 800b00a:	f002 fc15 	bl	800d838 <pvPortMalloc>
 800b00e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3304      	adds	r3, #4
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f8f9 	bl	800b218 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b02c:	687b      	ldr	r3, [r7, #4]
	}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b090      	sub	sp, #64	; 0x40
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b04e:	2300      	movs	r3, #0
 800b050:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <xEventGroupWaitBits+0x36>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	623b      	str	r3, [r7, #32]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00a      	beq.n	800b08e <xEventGroupWaitBits+0x56>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	61fb      	str	r3, [r7, #28]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <xEventGroupWaitBits+0x72>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	61bb      	str	r3, [r7, #24]
}
 800b0a6:	bf00      	nop
 800b0a8:	e7fe      	b.n	800b0a8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0aa:	f001 fd2d 	bl	800cb08 <xTaskGetSchedulerState>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d102      	bne.n	800b0ba <xEventGroupWaitBits+0x82>
 800b0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <xEventGroupWaitBits+0x86>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e000      	b.n	800b0c0 <xEventGroupWaitBits+0x88>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10a      	bne.n	800b0da <xEventGroupWaitBits+0xa2>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	617b      	str	r3, [r7, #20]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800b0da:	f001 f8f7 	bl	800c2cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	68b9      	ldr	r1, [r7, #8]
 800b0e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0ea:	f000 f873 	bl	800b1d4 <prvTestWaitCondition>
 800b0ee:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800b0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00e      	beq.n	800b114 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d028      	beq.n	800b156 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	43db      	mvns	r3, r3
 800b10c:	401a      	ands	r2, r3
 800b10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	e020      	b.n	800b156 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b116:	2b00      	cmp	r3, #0
 800b118:	d104      	bne.n	800b124 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800b11e:	2301      	movs	r3, #1
 800b120:	633b      	str	r3, [r7, #48]	; 0x30
 800b122:	e018      	b.n	800b156 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b130:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b13e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b142:	1d18      	adds	r0, r3, #4
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	4313      	orrs	r3, r2
 800b14a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b14c:	4619      	mov	r1, r3
 800b14e:	f001 fab5 	bl	800c6bc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b152:	2300      	movs	r3, #0
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b156:	f001 f8c7 	bl	800c2e8 <xTaskResumeAll>
 800b15a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d031      	beq.n	800b1c6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d107      	bne.n	800b178 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800b168:	4b19      	ldr	r3, [pc, #100]	; (800b1d0 <xEventGroupWaitBits+0x198>)
 800b16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b16e:	601a      	str	r2, [r3, #0]
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b178:	f001 fd52 	bl	800cc20 <uxTaskResetEventItemValue>
 800b17c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d11a      	bne.n	800b1be <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800b188:	f002 fa34 	bl	800d5f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b198:	f000 f81c 	bl	800b1d4 <prvTestWaitCondition>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d009      	beq.n	800b1b6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d006      	beq.n	800b1b6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	43db      	mvns	r3, r3
 800b1b0:	401a      	ands	r2, r3
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800b1ba:	f002 fa4b 	bl	800d654 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3740      	adds	r7, #64	; 0x40
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d107      	bne.n	800b1fa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	e007      	b.n	800b20a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	4013      	ands	r3, r2
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	429a      	cmp	r2, r3
 800b204:	d101      	bne.n	800b20a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800b20a:	697b      	ldr	r3, [r7, #20]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	371c      	adds	r7, #28
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f103 0208 	add.w	r2, r3, #8
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f103 0208 	add.w	r2, r3, #8
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f103 0208 	add.w	r2, r3, #8
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b272:	b480      	push	{r7}
 800b274:	b085      	sub	sp, #20
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	683a      	ldr	r2, [r7, #0]
 800b296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
}
 800b2ae:	bf00      	nop
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b085      	sub	sp, #20
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2d0:	d103      	bne.n	800b2da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	e00c      	b.n	800b2f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3308      	adds	r3, #8
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	e002      	b.n	800b2e8 <vListInsert+0x2e>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d2f6      	bcs.n	800b2e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	68fa      	ldr	r2, [r7, #12]
 800b308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	601a      	str	r2, [r3, #0]
}
 800b320:	bf00      	nop
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6892      	ldr	r2, [r2, #8]
 800b342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	6852      	ldr	r2, [r2, #4]
 800b34c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	429a      	cmp	r2, r3
 800b356:	d103      	bne.n	800b360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	689a      	ldr	r2, [r3, #8]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	1e5a      	subs	r2, r3, #1
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <xQueueGenericReset+0x2a>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60bb      	str	r3, [r7, #8]
}
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b3aa:	f002 f923 	bl	800d5f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b6:	68f9      	ldr	r1, [r7, #12]
 800b3b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3ba:	fb01 f303 	mul.w	r3, r1, r3
 800b3be:	441a      	add	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	68f9      	ldr	r1, [r7, #12]
 800b3de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b3e0:	fb01 f303 	mul.w	r3, r1, r3
 800b3e4:	441a      	add	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	22ff      	movs	r2, #255	; 0xff
 800b3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	22ff      	movs	r2, #255	; 0xff
 800b3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d114      	bne.n	800b42a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d01a      	beq.n	800b43e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	3310      	adds	r3, #16
 800b40c:	4618      	mov	r0, r3
 800b40e:	f001 f9bd 	bl	800c78c <xTaskRemoveFromEventList>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d012      	beq.n	800b43e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b418:	4b0c      	ldr	r3, [pc, #48]	; (800b44c <xQueueGenericReset+0xcc>)
 800b41a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	e009      	b.n	800b43e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3310      	adds	r3, #16
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff fef2 	bl	800b218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3324      	adds	r3, #36	; 0x24
 800b438:	4618      	mov	r0, r3
 800b43a:	f7ff feed 	bl	800b218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b43e:	f002 f909 	bl	800d654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b442:	2301      	movs	r3, #1
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	e000ed04 	.word	0xe000ed04

0800b450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08e      	sub	sp, #56	; 0x38
 800b454:	af02      	add	r7, sp, #8
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
 800b45c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10a      	bne.n	800b47a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <xQueueGenericCreateStatic+0x52>
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <xQueueGenericCreateStatic+0x56>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <xQueueGenericCreateStatic+0x58>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	623b      	str	r3, [r7, #32]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d102      	bne.n	800b4ce <xQueueGenericCreateStatic+0x7e>
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <xQueueGenericCreateStatic+0x82>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e000      	b.n	800b4d4 <xQueueGenericCreateStatic+0x84>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	61fb      	str	r3, [r7, #28]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b4ee:	2350      	movs	r3, #80	; 0x50
 800b4f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b50      	cmp	r3, #80	; 0x50
 800b4f6:	d00a      	beq.n	800b50e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	61bb      	str	r3, [r7, #24]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b50e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00d      	beq.n	800b536 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	4613      	mov	r3, r2
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 f805 	bl	800b540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b538:	4618      	mov	r0, r3
 800b53a:	3730      	adds	r7, #48	; 0x30
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
 800b54c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d103      	bne.n	800b55c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	69ba      	ldr	r2, [r7, #24]
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	e002      	b.n	800b562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b56e:	2101      	movs	r1, #1
 800b570:	69b8      	ldr	r0, [r7, #24]
 800b572:	f7ff ff05 	bl	800b380 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	78fa      	ldrb	r2, [r7, #3]
 800b57a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b57e:	bf00      	nop
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08e      	sub	sp, #56	; 0x38
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b596:	2300      	movs	r3, #0
 800b598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10a      	bne.n	800b5ba <xQueueGenericSend+0x32>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5b6:	bf00      	nop
 800b5b8:	e7fe      	b.n	800b5b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d103      	bne.n	800b5c8 <xQueueGenericSend+0x40>
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d101      	bne.n	800b5cc <xQueueGenericSend+0x44>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e000      	b.n	800b5ce <xQueueGenericSend+0x46>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10a      	bne.n	800b5e8 <xQueueGenericSend+0x60>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d103      	bne.n	800b5f6 <xQueueGenericSend+0x6e>
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d101      	bne.n	800b5fa <xQueueGenericSend+0x72>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e000      	b.n	800b5fc <xQueueGenericSend+0x74>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10a      	bne.n	800b616 <xQueueGenericSend+0x8e>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	623b      	str	r3, [r7, #32]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b616:	f001 fa77 	bl	800cb08 <xTaskGetSchedulerState>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <xQueueGenericSend+0x9e>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <xQueueGenericSend+0xa2>
 800b626:	2301      	movs	r3, #1
 800b628:	e000      	b.n	800b62c <xQueueGenericSend+0xa4>
 800b62a:	2300      	movs	r3, #0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10a      	bne.n	800b646 <xQueueGenericSend+0xbe>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	61fb      	str	r3, [r7, #28]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b646:	f001 ffd5 	bl	800d5f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b652:	429a      	cmp	r2, r3
 800b654:	d302      	bcc.n	800b65c <xQueueGenericSend+0xd4>
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d129      	bne.n	800b6b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b662:	f000 fa0b 	bl	800ba7c <prvCopyDataToQueue>
 800b666:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d010      	beq.n	800b692 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	3324      	adds	r3, #36	; 0x24
 800b674:	4618      	mov	r0, r3
 800b676:	f001 f889 	bl	800c78c <xTaskRemoveFromEventList>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d013      	beq.n	800b6a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b680:	4b3f      	ldr	r3, [pc, #252]	; (800b780 <xQueueGenericSend+0x1f8>)
 800b682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	e00a      	b.n	800b6a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d007      	beq.n	800b6a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b698:	4b39      	ldr	r3, [pc, #228]	; (800b780 <xQueueGenericSend+0x1f8>)
 800b69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6a8:	f001 ffd4 	bl	800d654 <vPortExitCritical>
				return pdPASS;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e063      	b.n	800b778 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d103      	bne.n	800b6be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6b6:	f001 ffcd 	bl	800d654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e05c      	b.n	800b778 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6c4:	f107 0314 	add.w	r3, r7, #20
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f001 f8c3 	bl	800c854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6d2:	f001 ffbf 	bl	800d654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6d6:	f000 fdf9 	bl	800c2cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6da:	f001 ff8b 	bl	800d5f4 <vPortEnterCritical>
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6e4:	b25b      	sxtb	r3, r3
 800b6e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6ea:	d103      	bne.n	800b6f4 <xQueueGenericSend+0x16c>
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6fa:	b25b      	sxtb	r3, r3
 800b6fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b700:	d103      	bne.n	800b70a <xQueueGenericSend+0x182>
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b70a:	f001 ffa3 	bl	800d654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b70e:	1d3a      	adds	r2, r7, #4
 800b710:	f107 0314 	add.w	r3, r7, #20
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f001 f8b2 	bl	800c880 <xTaskCheckForTimeOut>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d124      	bne.n	800b76c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b724:	f000 faa2 	bl	800bc6c <prvIsQueueFull>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d018      	beq.n	800b760 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	3310      	adds	r3, #16
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	4611      	mov	r1, r2
 800b736:	4618      	mov	r0, r3
 800b738:	f000 ff9c 	bl	800c674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b73c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b73e:	f000 fa2d 	bl	800bb9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b742:	f000 fdd1 	bl	800c2e8 <xTaskResumeAll>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	f47f af7c 	bne.w	800b646 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b74e:	4b0c      	ldr	r3, [pc, #48]	; (800b780 <xQueueGenericSend+0x1f8>)
 800b750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	e772      	b.n	800b646 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b762:	f000 fa1b 	bl	800bb9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b766:	f000 fdbf 	bl	800c2e8 <xTaskResumeAll>
 800b76a:	e76c      	b.n	800b646 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b76c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b76e:	f000 fa15 	bl	800bb9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b772:	f000 fdb9 	bl	800c2e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b776:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3738      	adds	r7, #56	; 0x38
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	e000ed04 	.word	0xe000ed04

0800b784 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b090      	sub	sp, #64	; 0x40
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10a      	bne.n	800b7b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <xQueueGenericSendFromISR+0x3c>
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <xQueueGenericSendFromISR+0x40>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e000      	b.n	800b7c6 <xQueueGenericSendFromISR+0x42>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10a      	bne.n	800b7e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7dc:	bf00      	nop
 800b7de:	e7fe      	b.n	800b7de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d103      	bne.n	800b7ee <xQueueGenericSendFromISR+0x6a>
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d101      	bne.n	800b7f2 <xQueueGenericSendFromISR+0x6e>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <xQueueGenericSendFromISR+0x70>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10a      	bne.n	800b80e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	623b      	str	r3, [r7, #32]
}
 800b80a:	bf00      	nop
 800b80c:	e7fe      	b.n	800b80c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b80e:	f001 ffd3 	bl	800d7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b812:	f3ef 8211 	mrs	r2, BASEPRI
 800b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	61fa      	str	r2, [r7, #28]
 800b828:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b82a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b82c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b836:	429a      	cmp	r2, r3
 800b838:	d302      	bcc.n	800b840 <xQueueGenericSendFromISR+0xbc>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d12f      	bne.n	800b8a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b856:	f000 f911 	bl	800ba7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b85a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b85e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b862:	d112      	bne.n	800b88a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d016      	beq.n	800b89a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	3324      	adds	r3, #36	; 0x24
 800b870:	4618      	mov	r0, r3
 800b872:	f000 ff8b 	bl	800c78c <xTaskRemoveFromEventList>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00e      	beq.n	800b89a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00b      	beq.n	800b89a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	601a      	str	r2, [r3, #0]
 800b888:	e007      	b.n	800b89a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b88a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b88e:	3301      	adds	r3, #1
 800b890:	b2db      	uxtb	r3, r3
 800b892:	b25a      	sxtb	r2, r3
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b89a:	2301      	movs	r3, #1
 800b89c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b89e:	e001      	b.n	800b8a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b8ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3740      	adds	r7, #64	; 0x40
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08c      	sub	sp, #48	; 0x30
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10a      	bne.n	800b8ec <xQueueReceive+0x30>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	623b      	str	r3, [r7, #32]
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d103      	bne.n	800b8fa <xQueueReceive+0x3e>
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <xQueueReceive+0x42>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e000      	b.n	800b900 <xQueueReceive+0x44>
 800b8fe:	2300      	movs	r3, #0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <xQueueReceive+0x5e>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	61fb      	str	r3, [r7, #28]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b91a:	f001 f8f5 	bl	800cb08 <xTaskGetSchedulerState>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d102      	bne.n	800b92a <xQueueReceive+0x6e>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <xQueueReceive+0x72>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e000      	b.n	800b930 <xQueueReceive+0x74>
 800b92e:	2300      	movs	r3, #0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10a      	bne.n	800b94a <xQueueReceive+0x8e>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61bb      	str	r3, [r7, #24]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b94a:	f001 fe53 	bl	800d5f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b952:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01f      	beq.n	800b99a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b95a:	68b9      	ldr	r1, [r7, #8]
 800b95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b95e:	f000 f8f7 	bl	800bb50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	1e5a      	subs	r2, r3, #1
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00f      	beq.n	800b992 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	3310      	adds	r3, #16
 800b976:	4618      	mov	r0, r3
 800b978:	f000 ff08 	bl	800c78c <xTaskRemoveFromEventList>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d007      	beq.n	800b992 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b982:	4b3d      	ldr	r3, [pc, #244]	; (800ba78 <xQueueReceive+0x1bc>)
 800b984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b992:	f001 fe5f 	bl	800d654 <vPortExitCritical>
				return pdPASS;
 800b996:	2301      	movs	r3, #1
 800b998:	e069      	b.n	800ba6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d103      	bne.n	800b9a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9a0:	f001 fe58 	bl	800d654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e062      	b.n	800ba6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d106      	bne.n	800b9bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9ae:	f107 0310 	add.w	r3, r7, #16
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 ff4e 	bl	800c854 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9bc:	f001 fe4a 	bl	800d654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9c0:	f000 fc84 	bl	800c2cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9c4:	f001 fe16 	bl	800d5f4 <vPortEnterCritical>
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9ce:	b25b      	sxtb	r3, r3
 800b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9d4:	d103      	bne.n	800b9de <xQueueReceive+0x122>
 800b9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9e4:	b25b      	sxtb	r3, r3
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9ea:	d103      	bne.n	800b9f4 <xQueueReceive+0x138>
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9f4:	f001 fe2e 	bl	800d654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9f8:	1d3a      	adds	r2, r7, #4
 800b9fa:	f107 0310 	add.w	r3, r7, #16
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 ff3d 	bl	800c880 <xTaskCheckForTimeOut>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d123      	bne.n	800ba54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba0e:	f000 f917 	bl	800bc40 <prvIsQueueEmpty>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d017      	beq.n	800ba48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	3324      	adds	r3, #36	; 0x24
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4611      	mov	r1, r2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 fe27 	bl	800c674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba28:	f000 f8b8 	bl	800bb9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba2c:	f000 fc5c 	bl	800c2e8 <xTaskResumeAll>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d189      	bne.n	800b94a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba36:	4b10      	ldr	r3, [pc, #64]	; (800ba78 <xQueueReceive+0x1bc>)
 800ba38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	e780      	b.n	800b94a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba4a:	f000 f8a7 	bl	800bb9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba4e:	f000 fc4b 	bl	800c2e8 <xTaskResumeAll>
 800ba52:	e77a      	b.n	800b94a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba56:	f000 f8a1 	bl	800bb9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba5a:	f000 fc45 	bl	800c2e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba60:	f000 f8ee 	bl	800bc40 <prvIsQueueEmpty>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f43f af6f 	beq.w	800b94a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3730      	adds	r7, #48	; 0x30
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	e000ed04 	.word	0xe000ed04

0800ba7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10d      	bne.n	800bab6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d14d      	bne.n	800bb3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 f84c 	bl	800cb44 <xTaskPriorityDisinherit>
 800baac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	609a      	str	r2, [r3, #8]
 800bab4:	e043      	b.n	800bb3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d119      	bne.n	800baf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6858      	ldr	r0, [r3, #4]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac4:	461a      	mov	r2, r3
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	f002 f8ca 	bl	800dc60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad4:	441a      	add	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d32b      	bcc.n	800bb3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	605a      	str	r2, [r3, #4]
 800baee:	e026      	b.n	800bb3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	68d8      	ldr	r0, [r3, #12]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf8:	461a      	mov	r2, r3
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	f002 f8b0 	bl	800dc60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	68da      	ldr	r2, [r3, #12]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb08:	425b      	negs	r3, r3
 800bb0a:	441a      	add	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	68da      	ldr	r2, [r3, #12]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d207      	bcs.n	800bb2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	689a      	ldr	r2, [r3, #8]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb24:	425b      	negs	r3, r3
 800bb26:	441a      	add	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d105      	bne.n	800bb3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb46:	697b      	ldr	r3, [r7, #20]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d018      	beq.n	800bb94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68da      	ldr	r2, [r3, #12]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	441a      	add	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d303      	bcc.n	800bb84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68d9      	ldr	r1, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	6838      	ldr	r0, [r7, #0]
 800bb90:	f002 f866 	bl	800dc60 <memcpy>
	}
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bba4:	f001 fd26 	bl	800d5f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbb0:	e011      	b.n	800bbd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d012      	beq.n	800bbe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3324      	adds	r3, #36	; 0x24
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 fde4 	bl	800c78c <xTaskRemoveFromEventList>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbca:	f000 febb 	bl	800c944 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dce9      	bgt.n	800bbb2 <prvUnlockQueue+0x16>
 800bbde:	e000      	b.n	800bbe2 <prvUnlockQueue+0x46>
					break;
 800bbe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bbea:	f001 fd33 	bl	800d654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbee:	f001 fd01 	bl	800d5f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbf8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbfa:	e011      	b.n	800bc20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d012      	beq.n	800bc2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3310      	adds	r3, #16
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f000 fdbf 	bl	800c78c <xTaskRemoveFromEventList>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc14:	f000 fe96 	bl	800c944 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	dce9      	bgt.n	800bbfc <prvUnlockQueue+0x60>
 800bc28:	e000      	b.n	800bc2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	22ff      	movs	r2, #255	; 0xff
 800bc30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc34:	f001 fd0e 	bl	800d654 <vPortExitCritical>
}
 800bc38:	bf00      	nop
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc48:	f001 fcd4 	bl	800d5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc54:	2301      	movs	r3, #1
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	e001      	b.n	800bc5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc5e:	f001 fcf9 	bl	800d654 <vPortExitCritical>

	return xReturn;
 800bc62:	68fb      	ldr	r3, [r7, #12]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc74:	f001 fcbe 	bl	800d5f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d102      	bne.n	800bc8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc84:	2301      	movs	r3, #1
 800bc86:	60fb      	str	r3, [r7, #12]
 800bc88:	e001      	b.n	800bc8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc8e:	f001 fce1 	bl	800d654 <vPortExitCritical>

	return xReturn;
 800bc92:	68fb      	ldr	r3, [r7, #12]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	e014      	b.n	800bcd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bcac:	4a0f      	ldr	r2, [pc, #60]	; (800bcec <vQueueAddToRegistry+0x50>)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10b      	bne.n	800bcd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bcb8:	490c      	ldr	r1, [pc, #48]	; (800bcec <vQueueAddToRegistry+0x50>)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bcc2:	4a0a      	ldr	r2, [pc, #40]	; (800bcec <vQueueAddToRegistry+0x50>)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	4413      	add	r3, r2
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bcce:	e006      	b.n	800bcde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b07      	cmp	r3, #7
 800bcda:	d9e7      	bls.n	800bcac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bcdc:	bf00      	nop
 800bcde:	bf00      	nop
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	2000feb8 	.word	0x2000feb8

0800bcf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd00:	f001 fc78 	bl	800d5f4 <vPortEnterCritical>
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd10:	d103      	bne.n	800bd1a <vQueueWaitForMessageRestricted+0x2a>
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd20:	b25b      	sxtb	r3, r3
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd26:	d103      	bne.n	800bd30 <vQueueWaitForMessageRestricted+0x40>
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd30:	f001 fc90 	bl	800d654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d106      	bne.n	800bd4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	3324      	adds	r3, #36	; 0x24
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fcf5 	bl	800c734 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd4a:	6978      	ldr	r0, [r7, #20]
 800bd4c:	f7ff ff26 	bl	800bb9c <prvUnlockQueue>
	}
 800bd50:	bf00      	nop
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b08e      	sub	sp, #56	; 0x38
 800bd5c:	af04      	add	r7, sp, #16
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10a      	bne.n	800bd82 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	623b      	str	r3, [r7, #32]
}
 800bd7e:	bf00      	nop
 800bd80:	e7fe      	b.n	800bd80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10a      	bne.n	800bd9e <xTaskCreateStatic+0x46>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8c:	f383 8811 	msr	BASEPRI, r3
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	61fb      	str	r3, [r7, #28]
}
 800bd9a:	bf00      	nop
 800bd9c:	e7fe      	b.n	800bd9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd9e:	235c      	movs	r3, #92	; 0x5c
 800bda0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2b5c      	cmp	r3, #92	; 0x5c
 800bda6:	d00a      	beq.n	800bdbe <xTaskCreateStatic+0x66>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	61bb      	str	r3, [r7, #24]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bdbe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d01e      	beq.n	800be04 <xTaskCreateStatic+0xac>
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d01b      	beq.n	800be04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	2202      	movs	r2, #2
 800bdda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bdde:	2300      	movs	r3, #0
 800bde0:	9303      	str	r3, [sp, #12]
 800bde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde4:	9302      	str	r3, [sp, #8]
 800bde6:	f107 0314 	add.w	r3, r7, #20
 800bdea:	9301      	str	r3, [sp, #4]
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	68b9      	ldr	r1, [r7, #8]
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f000 f850 	bl	800be9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdfe:	f000 f8dd 	bl	800bfbc <prvAddNewTaskToReadyList>
 800be02:	e001      	b.n	800be08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be04:	2300      	movs	r3, #0
 800be06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be08:	697b      	ldr	r3, [r7, #20]
	}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3728      	adds	r7, #40	; 0x28
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be12:	b580      	push	{r7, lr}
 800be14:	b08c      	sub	sp, #48	; 0x30
 800be16:	af04      	add	r7, sp, #16
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	603b      	str	r3, [r7, #0]
 800be1e:	4613      	mov	r3, r2
 800be20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be22:	88fb      	ldrh	r3, [r7, #6]
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4618      	mov	r0, r3
 800be28:	f001 fd06 	bl	800d838 <pvPortMalloc>
 800be2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00e      	beq.n	800be52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be34:	205c      	movs	r0, #92	; 0x5c
 800be36:	f001 fcff 	bl	800d838 <pvPortMalloc>
 800be3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	631a      	str	r2, [r3, #48]	; 0x30
 800be48:	e005      	b.n	800be56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be4a:	6978      	ldr	r0, [r7, #20]
 800be4c:	f001 fdc0 	bl	800d9d0 <vPortFree>
 800be50:	e001      	b.n	800be56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d017      	beq.n	800be8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be64:	88fa      	ldrh	r2, [r7, #6]
 800be66:	2300      	movs	r3, #0
 800be68:	9303      	str	r3, [sp, #12]
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	9302      	str	r3, [sp, #8]
 800be6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be70:	9301      	str	r3, [sp, #4]
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 f80e 	bl	800be9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be80:	69f8      	ldr	r0, [r7, #28]
 800be82:	f000 f89b 	bl	800bfbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be86:	2301      	movs	r3, #1
 800be88:	61bb      	str	r3, [r7, #24]
 800be8a:	e002      	b.n	800be92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be92:	69bb      	ldr	r3, [r7, #24]
	}
 800be94:	4618      	mov	r0, r3
 800be96:	3720      	adds	r7, #32
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	461a      	mov	r2, r3
 800beb4:	21a5      	movs	r1, #165	; 0xa5
 800beb6:	f001 fee1 	bl	800dc7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bec4:	3b01      	subs	r3, #1
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	f023 0307 	bic.w	r3, r3, #7
 800bed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	f003 0307 	and.w	r3, r3, #7
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00a      	beq.n	800bef4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	617b      	str	r3, [r7, #20]
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d01f      	beq.n	800bf3a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800befa:	2300      	movs	r3, #0
 800befc:	61fb      	str	r3, [r7, #28]
 800befe:	e012      	b.n	800bf26 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	4413      	add	r3, r2
 800bf06:	7819      	ldrb	r1, [r3, #0]
 800bf08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	3334      	adds	r3, #52	; 0x34
 800bf10:	460a      	mov	r2, r1
 800bf12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	4413      	add	r3, r2
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d006      	beq.n	800bf2e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	3301      	adds	r3, #1
 800bf24:	61fb      	str	r3, [r7, #28]
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	2b0f      	cmp	r3, #15
 800bf2a:	d9e9      	bls.n	800bf00 <prvInitialiseNewTask+0x64>
 800bf2c:	e000      	b.n	800bf30 <prvInitialiseNewTask+0x94>
			{
				break;
 800bf2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf38:	e003      	b.n	800bf42 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf44:	2b37      	cmp	r3, #55	; 0x37
 800bf46:	d901      	bls.n	800bf4c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf48:	2337      	movs	r3, #55	; 0x37
 800bf4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	3304      	adds	r3, #4
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff f978 	bl	800b258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	3318      	adds	r3, #24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff f973 	bl	800b258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	68f9      	ldr	r1, [r7, #12]
 800bf9a:	69b8      	ldr	r0, [r7, #24]
 800bf9c:	f001 f9fa 	bl	800d394 <pxPortInitialiseStack>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfb2:	bf00      	nop
 800bfb4:	3720      	adds	r7, #32
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfc4:	f001 fb16 	bl	800d5f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfc8:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <prvAddNewTaskToReadyList+0xc4>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	4a2c      	ldr	r2, [pc, #176]	; (800c080 <prvAddNewTaskToReadyList+0xc4>)
 800bfd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfd2:	4b2c      	ldr	r3, [pc, #176]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d109      	bne.n	800bfee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfda:	4a2a      	ldr	r2, [pc, #168]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bfe0:	4b27      	ldr	r3, [pc, #156]	; (800c080 <prvAddNewTaskToReadyList+0xc4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d110      	bne.n	800c00a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bfe8:	f000 fcd0 	bl	800c98c <prvInitialiseTaskLists>
 800bfec:	e00d      	b.n	800c00a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bfee:	4b26      	ldr	r3, [pc, #152]	; (800c088 <prvAddNewTaskToReadyList+0xcc>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d109      	bne.n	800c00a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bff6:	4b23      	ldr	r3, [pc, #140]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c000:	429a      	cmp	r2, r3
 800c002:	d802      	bhi.n	800c00a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c004:	4a1f      	ldr	r2, [pc, #124]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c00a:	4b20      	ldr	r3, [pc, #128]	; (800c08c <prvAddNewTaskToReadyList+0xd0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3301      	adds	r3, #1
 800c010:	4a1e      	ldr	r2, [pc, #120]	; (800c08c <prvAddNewTaskToReadyList+0xd0>)
 800c012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c014:	4b1d      	ldr	r3, [pc, #116]	; (800c08c <prvAddNewTaskToReadyList+0xd0>)
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c020:	4b1b      	ldr	r3, [pc, #108]	; (800c090 <prvAddNewTaskToReadyList+0xd4>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d903      	bls.n	800c030 <prvAddNewTaskToReadyList+0x74>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02c:	4a18      	ldr	r2, [pc, #96]	; (800c090 <prvAddNewTaskToReadyList+0xd4>)
 800c02e:	6013      	str	r3, [r2, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c034:	4613      	mov	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4a15      	ldr	r2, [pc, #84]	; (800c094 <prvAddNewTaskToReadyList+0xd8>)
 800c03e:	441a      	add	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3304      	adds	r3, #4
 800c044:	4619      	mov	r1, r3
 800c046:	4610      	mov	r0, r2
 800c048:	f7ff f913 	bl	800b272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c04c:	f001 fb02 	bl	800d654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c050:	4b0d      	ldr	r3, [pc, #52]	; (800c088 <prvAddNewTaskToReadyList+0xcc>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00e      	beq.n	800c076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <prvAddNewTaskToReadyList+0xc8>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	429a      	cmp	r2, r3
 800c064:	d207      	bcs.n	800c076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c066:	4b0c      	ldr	r3, [pc, #48]	; (800c098 <prvAddNewTaskToReadyList+0xdc>)
 800c068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20000dcc 	.word	0x20000dcc
 800c084:	200008f8 	.word	0x200008f8
 800c088:	20000dd8 	.word	0x20000dd8
 800c08c:	20000de8 	.word	0x20000de8
 800c090:	20000dd4 	.word	0x20000dd4
 800c094:	200008fc 	.word	0x200008fc
 800c098:	e000ed04 	.word	0xe000ed04

0800c09c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b08a      	sub	sp, #40	; 0x28
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10a      	bne.n	800c0c6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	617b      	str	r3, [r7, #20]
}
 800c0c2:	bf00      	nop
 800c0c4:	e7fe      	b.n	800c0c4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <vTaskDelayUntil+0x46>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	613b      	str	r3, [r7, #16]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c0e2:	4b2a      	ldr	r3, [pc, #168]	; (800c18c <vTaskDelayUntil+0xf0>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00a      	beq.n	800c100 <vTaskDelayUntil+0x64>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	60fb      	str	r3, [r7, #12]
}
 800c0fc:	bf00      	nop
 800c0fe:	e7fe      	b.n	800c0fe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c100:	f000 f8e4 	bl	800c2cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c104:	4b22      	ldr	r3, [pc, #136]	; (800c190 <vTaskDelayUntil+0xf4>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	4413      	add	r3, r2
 800c112:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6a3a      	ldr	r2, [r7, #32]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d20b      	bcs.n	800c136 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	429a      	cmp	r2, r3
 800c126:	d211      	bcs.n	800c14c <vTaskDelayUntil+0xb0>
 800c128:	69fa      	ldr	r2, [r7, #28]
 800c12a:	6a3b      	ldr	r3, [r7, #32]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d90d      	bls.n	800c14c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c130:	2301      	movs	r3, #1
 800c132:	627b      	str	r3, [r7, #36]	; 0x24
 800c134:	e00a      	b.n	800c14c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	69fa      	ldr	r2, [r7, #28]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d303      	bcc.n	800c148 <vTaskDelayUntil+0xac>
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	429a      	cmp	r2, r3
 800c146:	d901      	bls.n	800c14c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	69fa      	ldr	r2, [r7, #28]
 800c150:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	2b00      	cmp	r3, #0
 800c156:	d006      	beq.n	800c166 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c158:	69fa      	ldr	r2, [r7, #28]
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	2100      	movs	r1, #0
 800c160:	4618      	mov	r0, r3
 800c162:	f000 fd75 	bl	800cc50 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c166:	f000 f8bf 	bl	800c2e8 <xTaskResumeAll>
 800c16a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d107      	bne.n	800c182 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c172:	4b08      	ldr	r3, [pc, #32]	; (800c194 <vTaskDelayUntil+0xf8>)
 800c174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c182:	bf00      	nop
 800c184:	3728      	adds	r7, #40	; 0x28
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	20000df4 	.word	0x20000df4
 800c190:	20000dd0 	.word	0x20000dd0
 800c194:	e000ed04 	.word	0xe000ed04

0800c198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d017      	beq.n	800c1da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1aa:	4b13      	ldr	r3, [pc, #76]	; (800c1f8 <vTaskDelay+0x60>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <vTaskDelay+0x30>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60bb      	str	r3, [r7, #8]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c1c8:	f000 f880 	bl	800c2cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fd3e 	bl	800cc50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1d4:	f000 f888 	bl	800c2e8 <xTaskResumeAll>
 800c1d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d107      	bne.n	800c1f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c1e0:	4b06      	ldr	r3, [pc, #24]	; (800c1fc <vTaskDelay+0x64>)
 800c1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e6:	601a      	str	r2, [r3, #0]
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1f0:	bf00      	nop
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20000df4 	.word	0x20000df4
 800c1fc:	e000ed04 	.word	0xe000ed04

0800c200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08a      	sub	sp, #40	; 0x28
 800c204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c206:	2300      	movs	r3, #0
 800c208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c20e:	463a      	mov	r2, r7
 800c210:	1d39      	adds	r1, r7, #4
 800c212:	f107 0308 	add.w	r3, r7, #8
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fe88 	bl	800af2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	9202      	str	r2, [sp, #8]
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	2300      	movs	r3, #0
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	2300      	movs	r3, #0
 800c22c:	460a      	mov	r2, r1
 800c22e:	4921      	ldr	r1, [pc, #132]	; (800c2b4 <vTaskStartScheduler+0xb4>)
 800c230:	4821      	ldr	r0, [pc, #132]	; (800c2b8 <vTaskStartScheduler+0xb8>)
 800c232:	f7ff fd91 	bl	800bd58 <xTaskCreateStatic>
 800c236:	4603      	mov	r3, r0
 800c238:	4a20      	ldr	r2, [pc, #128]	; (800c2bc <vTaskStartScheduler+0xbc>)
 800c23a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c23c:	4b1f      	ldr	r3, [pc, #124]	; (800c2bc <vTaskStartScheduler+0xbc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c244:	2301      	movs	r3, #1
 800c246:	617b      	str	r3, [r7, #20]
 800c248:	e001      	b.n	800c24e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d102      	bne.n	800c25a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c254:	f000 fd50 	bl	800ccf8 <xTimerCreateTimerTask>
 800c258:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d116      	bne.n	800c28e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	613b      	str	r3, [r7, #16]
}
 800c272:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c274:	4b12      	ldr	r3, [pc, #72]	; (800c2c0 <vTaskStartScheduler+0xc0>)
 800c276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c27a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c27c:	4b11      	ldr	r3, [pc, #68]	; (800c2c4 <vTaskStartScheduler+0xc4>)
 800c27e:	2201      	movs	r2, #1
 800c280:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c282:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <vTaskStartScheduler+0xc8>)
 800c284:	2200      	movs	r2, #0
 800c286:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c288:	f001 f912 	bl	800d4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c28c:	e00e      	b.n	800c2ac <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c294:	d10a      	bne.n	800c2ac <vTaskStartScheduler+0xac>
	__asm volatile
 800c296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	60fb      	str	r3, [r7, #12]
}
 800c2a8:	bf00      	nop
 800c2aa:	e7fe      	b.n	800c2aa <vTaskStartScheduler+0xaa>
}
 800c2ac:	bf00      	nop
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	08010284 	.word	0x08010284
 800c2b8:	0800c95d 	.word	0x0800c95d
 800c2bc:	20000df0 	.word	0x20000df0
 800c2c0:	20000dec 	.word	0x20000dec
 800c2c4:	20000dd8 	.word	0x20000dd8
 800c2c8:	20000dd0 	.word	0x20000dd0

0800c2cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c2d0:	4b04      	ldr	r3, [pc, #16]	; (800c2e4 <vTaskSuspendAll+0x18>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	4a03      	ldr	r2, [pc, #12]	; (800c2e4 <vTaskSuspendAll+0x18>)
 800c2d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c2da:	bf00      	nop
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	20000df4 	.word	0x20000df4

0800c2e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2f6:	4b42      	ldr	r3, [pc, #264]	; (800c400 <xTaskResumeAll+0x118>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10a      	bne.n	800c314 <xTaskResumeAll+0x2c>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	603b      	str	r3, [r7, #0]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c314:	f001 f96e 	bl	800d5f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c318:	4b39      	ldr	r3, [pc, #228]	; (800c400 <xTaskResumeAll+0x118>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	4a38      	ldr	r2, [pc, #224]	; (800c400 <xTaskResumeAll+0x118>)
 800c320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c322:	4b37      	ldr	r3, [pc, #220]	; (800c400 <xTaskResumeAll+0x118>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d162      	bne.n	800c3f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c32a:	4b36      	ldr	r3, [pc, #216]	; (800c404 <xTaskResumeAll+0x11c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d05e      	beq.n	800c3f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c332:	e02f      	b.n	800c394 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c334:	4b34      	ldr	r3, [pc, #208]	; (800c408 <xTaskResumeAll+0x120>)
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3318      	adds	r3, #24
 800c340:	4618      	mov	r0, r3
 800c342:	f7fe fff3 	bl	800b32c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe ffee 	bl	800b32c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c354:	4b2d      	ldr	r3, [pc, #180]	; (800c40c <xTaskResumeAll+0x124>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d903      	bls.n	800c364 <xTaskResumeAll+0x7c>
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	4a2a      	ldr	r2, [pc, #168]	; (800c40c <xTaskResumeAll+0x124>)
 800c362:	6013      	str	r3, [r2, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4a27      	ldr	r2, [pc, #156]	; (800c410 <xTaskResumeAll+0x128>)
 800c372:	441a      	add	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	3304      	adds	r3, #4
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7fe ff79 	bl	800b272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c384:	4b23      	ldr	r3, [pc, #140]	; (800c414 <xTaskResumeAll+0x12c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d302      	bcc.n	800c394 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c38e:	4b22      	ldr	r3, [pc, #136]	; (800c418 <xTaskResumeAll+0x130>)
 800c390:	2201      	movs	r2, #1
 800c392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c394:	4b1c      	ldr	r3, [pc, #112]	; (800c408 <xTaskResumeAll+0x120>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1cb      	bne.n	800c334 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3a2:	f000 fb91 	bl	800cac8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c3a6:	4b1d      	ldr	r3, [pc, #116]	; (800c41c <xTaskResumeAll+0x134>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d010      	beq.n	800c3d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3b2:	f000 f847 	bl	800c444 <xTaskIncrementTick>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c3bc:	4b16      	ldr	r3, [pc, #88]	; (800c418 <xTaskResumeAll+0x130>)
 800c3be:	2201      	movs	r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f1      	bne.n	800c3b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c3ce:	4b13      	ldr	r3, [pc, #76]	; (800c41c <xTaskResumeAll+0x134>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3d4:	4b10      	ldr	r3, [pc, #64]	; (800c418 <xTaskResumeAll+0x130>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d009      	beq.n	800c3f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3e0:	4b0f      	ldr	r3, [pc, #60]	; (800c420 <xTaskResumeAll+0x138>)
 800c3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3f0:	f001 f930 	bl	800d654 <vPortExitCritical>

	return xAlreadyYielded;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20000df4 	.word	0x20000df4
 800c404:	20000dcc 	.word	0x20000dcc
 800c408:	20000d8c 	.word	0x20000d8c
 800c40c:	20000dd4 	.word	0x20000dd4
 800c410:	200008fc 	.word	0x200008fc
 800c414:	200008f8 	.word	0x200008f8
 800c418:	20000de0 	.word	0x20000de0
 800c41c:	20000ddc 	.word	0x20000ddc
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c42a:	4b05      	ldr	r3, [pc, #20]	; (800c440 <xTaskGetTickCount+0x1c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c430:	687b      	ldr	r3, [r7, #4]
}
 800c432:	4618      	mov	r0, r3
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20000dd0 	.word	0x20000dd0

0800c444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b086      	sub	sp, #24
 800c448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c44a:	2300      	movs	r3, #0
 800c44c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c44e:	4b4f      	ldr	r3, [pc, #316]	; (800c58c <xTaskIncrementTick+0x148>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f040 808f 	bne.w	800c576 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c458:	4b4d      	ldr	r3, [pc, #308]	; (800c590 <xTaskIncrementTick+0x14c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3301      	adds	r3, #1
 800c45e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c460:	4a4b      	ldr	r2, [pc, #300]	; (800c590 <xTaskIncrementTick+0x14c>)
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d120      	bne.n	800c4ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c46c:	4b49      	ldr	r3, [pc, #292]	; (800c594 <xTaskIncrementTick+0x150>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00a      	beq.n	800c48c <xTaskIncrementTick+0x48>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	603b      	str	r3, [r7, #0]
}
 800c488:	bf00      	nop
 800c48a:	e7fe      	b.n	800c48a <xTaskIncrementTick+0x46>
 800c48c:	4b41      	ldr	r3, [pc, #260]	; (800c594 <xTaskIncrementTick+0x150>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	4b41      	ldr	r3, [pc, #260]	; (800c598 <xTaskIncrementTick+0x154>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a3f      	ldr	r2, [pc, #252]	; (800c594 <xTaskIncrementTick+0x150>)
 800c498:	6013      	str	r3, [r2, #0]
 800c49a:	4a3f      	ldr	r2, [pc, #252]	; (800c598 <xTaskIncrementTick+0x154>)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	4b3e      	ldr	r3, [pc, #248]	; (800c59c <xTaskIncrementTick+0x158>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	4a3d      	ldr	r2, [pc, #244]	; (800c59c <xTaskIncrementTick+0x158>)
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	f000 fb0d 	bl	800cac8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4ae:	4b3c      	ldr	r3, [pc, #240]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d349      	bcc.n	800c54c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4b8:	4b36      	ldr	r3, [pc, #216]	; (800c594 <xTaskIncrementTick+0x150>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d104      	bne.n	800c4cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c2:	4b37      	ldr	r3, [pc, #220]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4c8:	601a      	str	r2, [r3, #0]
					break;
 800c4ca:	e03f      	b.n	800c54c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4cc:	4b31      	ldr	r3, [pc, #196]	; (800c594 <xTaskIncrementTick+0x150>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d203      	bcs.n	800c4ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4e4:	4a2e      	ldr	r2, [pc, #184]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4ea:	e02f      	b.n	800c54c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe ff1b 	bl	800b32c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d004      	beq.n	800c508 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	3318      	adds	r3, #24
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe ff12 	bl	800b32c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50c:	4b25      	ldr	r3, [pc, #148]	; (800c5a4 <xTaskIncrementTick+0x160>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d903      	bls.n	800c51c <xTaskIncrementTick+0xd8>
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	4a22      	ldr	r2, [pc, #136]	; (800c5a4 <xTaskIncrementTick+0x160>)
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c520:	4613      	mov	r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4a1f      	ldr	r2, [pc, #124]	; (800c5a8 <xTaskIncrementTick+0x164>)
 800c52a:	441a      	add	r2, r3
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	3304      	adds	r3, #4
 800c530:	4619      	mov	r1, r3
 800c532:	4610      	mov	r0, r2
 800c534:	f7fe fe9d 	bl	800b272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ac <xTaskIncrementTick+0x168>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	429a      	cmp	r2, r3
 800c544:	d3b8      	bcc.n	800c4b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c546:	2301      	movs	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c54a:	e7b5      	b.n	800c4b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c54c:	4b17      	ldr	r3, [pc, #92]	; (800c5ac <xTaskIncrementTick+0x168>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c552:	4915      	ldr	r1, [pc, #84]	; (800c5a8 <xTaskIncrementTick+0x164>)
 800c554:	4613      	mov	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	440b      	add	r3, r1
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d901      	bls.n	800c568 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c564:	2301      	movs	r3, #1
 800c566:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c568:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <xTaskIncrementTick+0x16c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d007      	beq.n	800c580 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e004      	b.n	800c580 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c576:	4b0f      	ldr	r3, [pc, #60]	; (800c5b4 <xTaskIncrementTick+0x170>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3301      	adds	r3, #1
 800c57c:	4a0d      	ldr	r2, [pc, #52]	; (800c5b4 <xTaskIncrementTick+0x170>)
 800c57e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c580:	697b      	ldr	r3, [r7, #20]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20000df4 	.word	0x20000df4
 800c590:	20000dd0 	.word	0x20000dd0
 800c594:	20000d84 	.word	0x20000d84
 800c598:	20000d88 	.word	0x20000d88
 800c59c:	20000de4 	.word	0x20000de4
 800c5a0:	20000dec 	.word	0x20000dec
 800c5a4:	20000dd4 	.word	0x20000dd4
 800c5a8:	200008fc 	.word	0x200008fc
 800c5ac:	200008f8 	.word	0x200008f8
 800c5b0:	20000de0 	.word	0x20000de0
 800c5b4:	20000ddc 	.word	0x20000ddc

0800c5b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5be:	4b28      	ldr	r3, [pc, #160]	; (800c660 <vTaskSwitchContext+0xa8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c5c6:	4b27      	ldr	r3, [pc, #156]	; (800c664 <vTaskSwitchContext+0xac>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c5cc:	e041      	b.n	800c652 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c5ce:	4b25      	ldr	r3, [pc, #148]	; (800c664 <vTaskSwitchContext+0xac>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d4:	4b24      	ldr	r3, [pc, #144]	; (800c668 <vTaskSwitchContext+0xb0>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	60fb      	str	r3, [r7, #12]
 800c5da:	e010      	b.n	800c5fe <vTaskSwitchContext+0x46>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10a      	bne.n	800c5f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	607b      	str	r3, [r7, #4]
}
 800c5f4:	bf00      	nop
 800c5f6:	e7fe      	b.n	800c5f6 <vTaskSwitchContext+0x3e>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	491b      	ldr	r1, [pc, #108]	; (800c66c <vTaskSwitchContext+0xb4>)
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	440b      	add	r3, r1
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0e4      	beq.n	800c5dc <vTaskSwitchContext+0x24>
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4a13      	ldr	r2, [pc, #76]	; (800c66c <vTaskSwitchContext+0xb4>)
 800c61e:	4413      	add	r3, r2
 800c620:	60bb      	str	r3, [r7, #8]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	605a      	str	r2, [r3, #4]
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	3308      	adds	r3, #8
 800c634:	429a      	cmp	r2, r3
 800c636:	d104      	bne.n	800c642 <vTaskSwitchContext+0x8a>
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	605a      	str	r2, [r3, #4]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	4a09      	ldr	r2, [pc, #36]	; (800c670 <vTaskSwitchContext+0xb8>)
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	4a06      	ldr	r2, [pc, #24]	; (800c668 <vTaskSwitchContext+0xb0>)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6013      	str	r3, [r2, #0]
}
 800c652:	bf00      	nop
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	20000df4 	.word	0x20000df4
 800c664:	20000de0 	.word	0x20000de0
 800c668:	20000dd4 	.word	0x20000dd4
 800c66c:	200008fc 	.word	0x200008fc
 800c670:	200008f8 	.word	0x200008f8

0800c674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	60fb      	str	r3, [r7, #12]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c69a:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <vTaskPlaceOnEventList+0x44>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3318      	adds	r3, #24
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7fe fe09 	bl	800b2ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	6838      	ldr	r0, [r7, #0]
 800c6ac:	f000 fad0 	bl	800cc50 <prvAddCurrentTaskToDelayedList>
}
 800c6b0:	bf00      	nop
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	200008f8 	.word	0x200008f8

0800c6bc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10a      	bne.n	800c6e4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	617b      	str	r3, [r7, #20]
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c6e4:	4b11      	ldr	r3, [pc, #68]	; (800c72c <vTaskPlaceOnUnorderedEventList+0x70>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10a      	bne.n	800c702 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800c6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	613b      	str	r3, [r7, #16]
}
 800c6fe:	bf00      	nop
 800c700:	e7fe      	b.n	800c700 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c702:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c70c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c70e:	4b08      	ldr	r3, [pc, #32]	; (800c730 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3318      	adds	r3, #24
 800c714:	4619      	mov	r1, r3
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f7fe fdab 	bl	800b272 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c71c:	2101      	movs	r1, #1
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fa96 	bl	800cc50 <prvAddCurrentTaskToDelayedList>
}
 800c724:	bf00      	nop
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20000df4 	.word	0x20000df4
 800c730:	200008f8 	.word	0x200008f8

0800c734 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10a      	bne.n	800c75c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	617b      	str	r3, [r7, #20]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c75c:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <vTaskPlaceOnEventListRestricted+0x54>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	3318      	adds	r3, #24
 800c762:	4619      	mov	r1, r3
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f7fe fd84 	bl	800b272 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c774:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c776:	6879      	ldr	r1, [r7, #4]
 800c778:	68b8      	ldr	r0, [r7, #8]
 800c77a:	f000 fa69 	bl	800cc50 <prvAddCurrentTaskToDelayedList>
	}
 800c77e:	bf00      	nop
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200008f8 	.word	0x200008f8

0800c78c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b086      	sub	sp, #24
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10a      	bne.n	800c7b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	60fb      	str	r3, [r7, #12]
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	3318      	adds	r3, #24
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe fdb5 	bl	800b32c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7c2:	4b1e      	ldr	r3, [pc, #120]	; (800c83c <xTaskRemoveFromEventList+0xb0>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d11d      	bne.n	800c806 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	3304      	adds	r3, #4
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fe fdac 	bl	800b32c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d8:	4b19      	ldr	r3, [pc, #100]	; (800c840 <xTaskRemoveFromEventList+0xb4>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d903      	bls.n	800c7e8 <xTaskRemoveFromEventList+0x5c>
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	4a16      	ldr	r2, [pc, #88]	; (800c840 <xTaskRemoveFromEventList+0xb4>)
 800c7e6:	6013      	str	r3, [r2, #0]
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	4a13      	ldr	r2, [pc, #76]	; (800c844 <xTaskRemoveFromEventList+0xb8>)
 800c7f6:	441a      	add	r2, r3
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4610      	mov	r0, r2
 800c800:	f7fe fd37 	bl	800b272 <vListInsertEnd>
 800c804:	e005      	b.n	800c812 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	3318      	adds	r3, #24
 800c80a:	4619      	mov	r1, r3
 800c80c:	480e      	ldr	r0, [pc, #56]	; (800c848 <xTaskRemoveFromEventList+0xbc>)
 800c80e:	f7fe fd30 	bl	800b272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c816:	4b0d      	ldr	r3, [pc, #52]	; (800c84c <xTaskRemoveFromEventList+0xc0>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d905      	bls.n	800c82c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c820:	2301      	movs	r3, #1
 800c822:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c824:	4b0a      	ldr	r3, [pc, #40]	; (800c850 <xTaskRemoveFromEventList+0xc4>)
 800c826:	2201      	movs	r2, #1
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	e001      	b.n	800c830 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c82c:	2300      	movs	r3, #0
 800c82e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c830:	697b      	ldr	r3, [r7, #20]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20000df4 	.word	0x20000df4
 800c840:	20000dd4 	.word	0x20000dd4
 800c844:	200008fc 	.word	0x200008fc
 800c848:	20000d8c 	.word	0x20000d8c
 800c84c:	200008f8 	.word	0x200008f8
 800c850:	20000de0 	.word	0x20000de0

0800c854 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c85c:	4b06      	ldr	r3, [pc, #24]	; (800c878 <vTaskInternalSetTimeOutState+0x24>)
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c864:	4b05      	ldr	r3, [pc, #20]	; (800c87c <vTaskInternalSetTimeOutState+0x28>)
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	605a      	str	r2, [r3, #4]
}
 800c86c:	bf00      	nop
 800c86e:	370c      	adds	r7, #12
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	20000de4 	.word	0x20000de4
 800c87c:	20000dd0 	.word	0x20000dd0

0800c880 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10a      	bne.n	800c8a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	613b      	str	r3, [r7, #16]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10a      	bne.n	800c8c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	60fb      	str	r3, [r7, #12]
}
 800c8be:	bf00      	nop
 800c8c0:	e7fe      	b.n	800c8c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c8c2:	f000 fe97 	bl	800d5f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8c6:	4b1d      	ldr	r3, [pc, #116]	; (800c93c <xTaskCheckForTimeOut+0xbc>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	69ba      	ldr	r2, [r7, #24]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8de:	d102      	bne.n	800c8e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	61fb      	str	r3, [r7, #28]
 800c8e4:	e023      	b.n	800c92e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	4b15      	ldr	r3, [pc, #84]	; (800c940 <xTaskCheckForTimeOut+0xc0>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d007      	beq.n	800c902 <xTaskCheckForTimeOut+0x82>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d302      	bcc.n	800c902 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	61fb      	str	r3, [r7, #28]
 800c900:	e015      	b.n	800c92e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d20b      	bcs.n	800c924 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	1ad2      	subs	r2, r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff ff9b 	bl	800c854 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c91e:	2300      	movs	r3, #0
 800c920:	61fb      	str	r3, [r7, #28]
 800c922:	e004      	b.n	800c92e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2200      	movs	r2, #0
 800c928:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c92a:	2301      	movs	r3, #1
 800c92c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c92e:	f000 fe91 	bl	800d654 <vPortExitCritical>

	return xReturn;
 800c932:	69fb      	ldr	r3, [r7, #28]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3720      	adds	r7, #32
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	20000dd0 	.word	0x20000dd0
 800c940:	20000de4 	.word	0x20000de4

0800c944 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c944:	b480      	push	{r7}
 800c946:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c948:	4b03      	ldr	r3, [pc, #12]	; (800c958 <vTaskMissedYield+0x14>)
 800c94a:	2201      	movs	r2, #1
 800c94c:	601a      	str	r2, [r3, #0]
}
 800c94e:	bf00      	nop
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr
 800c958:	20000de0 	.word	0x20000de0

0800c95c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c964:	f000 f852 	bl	800ca0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <prvIdleTask+0x28>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d9f9      	bls.n	800c964 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c970:	4b05      	ldr	r3, [pc, #20]	; (800c988 <prvIdleTask+0x2c>)
 800c972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c980:	e7f0      	b.n	800c964 <prvIdleTask+0x8>
 800c982:	bf00      	nop
 800c984:	200008fc 	.word	0x200008fc
 800c988:	e000ed04 	.word	0xe000ed04

0800c98c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c992:	2300      	movs	r3, #0
 800c994:	607b      	str	r3, [r7, #4]
 800c996:	e00c      	b.n	800c9b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	4613      	mov	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4a12      	ldr	r2, [pc, #72]	; (800c9ec <prvInitialiseTaskLists+0x60>)
 800c9a4:	4413      	add	r3, r2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fe fc36 	bl	800b218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	607b      	str	r3, [r7, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b37      	cmp	r3, #55	; 0x37
 800c9b6:	d9ef      	bls.n	800c998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c9b8:	480d      	ldr	r0, [pc, #52]	; (800c9f0 <prvInitialiseTaskLists+0x64>)
 800c9ba:	f7fe fc2d 	bl	800b218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c9be:	480d      	ldr	r0, [pc, #52]	; (800c9f4 <prvInitialiseTaskLists+0x68>)
 800c9c0:	f7fe fc2a 	bl	800b218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9c4:	480c      	ldr	r0, [pc, #48]	; (800c9f8 <prvInitialiseTaskLists+0x6c>)
 800c9c6:	f7fe fc27 	bl	800b218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9ca:	480c      	ldr	r0, [pc, #48]	; (800c9fc <prvInitialiseTaskLists+0x70>)
 800c9cc:	f7fe fc24 	bl	800b218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9d0:	480b      	ldr	r0, [pc, #44]	; (800ca00 <prvInitialiseTaskLists+0x74>)
 800c9d2:	f7fe fc21 	bl	800b218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <prvInitialiseTaskLists+0x78>)
 800c9d8:	4a05      	ldr	r2, [pc, #20]	; (800c9f0 <prvInitialiseTaskLists+0x64>)
 800c9da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <prvInitialiseTaskLists+0x7c>)
 800c9de:	4a05      	ldr	r2, [pc, #20]	; (800c9f4 <prvInitialiseTaskLists+0x68>)
 800c9e0:	601a      	str	r2, [r3, #0]
}
 800c9e2:	bf00      	nop
 800c9e4:	3708      	adds	r7, #8
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	200008fc 	.word	0x200008fc
 800c9f0:	20000d5c 	.word	0x20000d5c
 800c9f4:	20000d70 	.word	0x20000d70
 800c9f8:	20000d8c 	.word	0x20000d8c
 800c9fc:	20000da0 	.word	0x20000da0
 800ca00:	20000db8 	.word	0x20000db8
 800ca04:	20000d84 	.word	0x20000d84
 800ca08:	20000d88 	.word	0x20000d88

0800ca0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca12:	e019      	b.n	800ca48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca14:	f000 fdee 	bl	800d5f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca18:	4b10      	ldr	r3, [pc, #64]	; (800ca5c <prvCheckTasksWaitingTermination+0x50>)
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fe fc81 	bl	800b32c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca2a:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <prvCheckTasksWaitingTermination+0x54>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	4a0b      	ldr	r2, [pc, #44]	; (800ca60 <prvCheckTasksWaitingTermination+0x54>)
 800ca32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca34:	4b0b      	ldr	r3, [pc, #44]	; (800ca64 <prvCheckTasksWaitingTermination+0x58>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	4a0a      	ldr	r2, [pc, #40]	; (800ca64 <prvCheckTasksWaitingTermination+0x58>)
 800ca3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca3e:	f000 fe09 	bl	800d654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f810 	bl	800ca68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca48:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <prvCheckTasksWaitingTermination+0x58>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1e1      	bne.n	800ca14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20000da0 	.word	0x20000da0
 800ca60:	20000dcc 	.word	0x20000dcc
 800ca64:	20000db4 	.word	0x20000db4

0800ca68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d108      	bne.n	800ca8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 ffa6 	bl	800d9d0 <vPortFree>
				vPortFree( pxTCB );
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 ffa3 	bl	800d9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca8a:	e018      	b.n	800cabe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d103      	bne.n	800ca9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 ff9a 	bl	800d9d0 <vPortFree>
	}
 800ca9c:	e00f      	b.n	800cabe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d00a      	beq.n	800cabe <prvDeleteTCB+0x56>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	60fb      	str	r3, [r7, #12]
}
 800caba:	bf00      	nop
 800cabc:	e7fe      	b.n	800cabc <prvDeleteTCB+0x54>
	}
 800cabe:	bf00      	nop
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
	...

0800cac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cace:	4b0c      	ldr	r3, [pc, #48]	; (800cb00 <prvResetNextTaskUnblockTime+0x38>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d104      	bne.n	800cae2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cad8:	4b0a      	ldr	r3, [pc, #40]	; (800cb04 <prvResetNextTaskUnblockTime+0x3c>)
 800cada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cade:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cae0:	e008      	b.n	800caf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cae2:	4b07      	ldr	r3, [pc, #28]	; (800cb00 <prvResetNextTaskUnblockTime+0x38>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	4a04      	ldr	r2, [pc, #16]	; (800cb04 <prvResetNextTaskUnblockTime+0x3c>)
 800caf2:	6013      	str	r3, [r2, #0]
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr
 800cb00:	20000d84 	.word	0x20000d84
 800cb04:	20000dec 	.word	0x20000dec

0800cb08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb0e:	4b0b      	ldr	r3, [pc, #44]	; (800cb3c <xTaskGetSchedulerState+0x34>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb16:	2301      	movs	r3, #1
 800cb18:	607b      	str	r3, [r7, #4]
 800cb1a:	e008      	b.n	800cb2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb1c:	4b08      	ldr	r3, [pc, #32]	; (800cb40 <xTaskGetSchedulerState+0x38>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d102      	bne.n	800cb2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb24:	2302      	movs	r3, #2
 800cb26:	607b      	str	r3, [r7, #4]
 800cb28:	e001      	b.n	800cb2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb2e:	687b      	ldr	r3, [r7, #4]
	}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr
 800cb3c:	20000dd8 	.word	0x20000dd8
 800cb40:	20000df4 	.word	0x20000df4

0800cb44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb50:	2300      	movs	r3, #0
 800cb52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d056      	beq.n	800cc08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb5a:	4b2e      	ldr	r3, [pc, #184]	; (800cc14 <xTaskPriorityDisinherit+0xd0>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d00a      	beq.n	800cb7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	60fb      	str	r3, [r7, #12]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10a      	bne.n	800cb98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	60bb      	str	r3, [r7, #8]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9c:	1e5a      	subs	r2, r3, #1
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d02c      	beq.n	800cc08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d128      	bne.n	800cc08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	3304      	adds	r3, #4
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe fbb6 	bl	800b32c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd8:	4b0f      	ldr	r3, [pc, #60]	; (800cc18 <xTaskPriorityDisinherit+0xd4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d903      	bls.n	800cbe8 <xTaskPriorityDisinherit+0xa4>
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	4a0c      	ldr	r2, [pc, #48]	; (800cc18 <xTaskPriorityDisinherit+0xd4>)
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbec:	4613      	mov	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4a09      	ldr	r2, [pc, #36]	; (800cc1c <xTaskPriorityDisinherit+0xd8>)
 800cbf6:	441a      	add	r2, r3
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7fe fb37 	bl	800b272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc04:	2301      	movs	r3, #1
 800cc06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc08:	697b      	ldr	r3, [r7, #20]
	}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3718      	adds	r7, #24
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	200008f8 	.word	0x200008f8
 800cc18:	20000dd4 	.word	0x20000dd4
 800cc1c:	200008fc 	.word	0x200008fc

0800cc20 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800cc26:	4b09      	ldr	r3, [pc, #36]	; (800cc4c <uxTaskResetEventItemValue+0x2c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc2e:	4b07      	ldr	r3, [pc, #28]	; (800cc4c <uxTaskResetEventItemValue+0x2c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc34:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <uxTaskResetEventItemValue+0x2c>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800cc3c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800cc3e:	687b      	ldr	r3, [r7, #4]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr
 800cc4c:	200008f8 	.word	0x200008f8

0800cc50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc5a:	4b21      	ldr	r3, [pc, #132]	; (800cce0 <prvAddCurrentTaskToDelayedList+0x90>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc60:	4b20      	ldr	r3, [pc, #128]	; (800cce4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3304      	adds	r3, #4
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe fb60 	bl	800b32c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc72:	d10a      	bne.n	800cc8a <prvAddCurrentTaskToDelayedList+0x3a>
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d007      	beq.n	800cc8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc7a:	4b1a      	ldr	r3, [pc, #104]	; (800cce4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	4619      	mov	r1, r3
 800cc82:	4819      	ldr	r0, [pc, #100]	; (800cce8 <prvAddCurrentTaskToDelayedList+0x98>)
 800cc84:	f7fe faf5 	bl	800b272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc88:	e026      	b.n	800ccd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4413      	add	r3, r2
 800cc90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc92:	4b14      	ldr	r3, [pc, #80]	; (800cce4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d209      	bcs.n	800ccb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cca2:	4b12      	ldr	r3, [pc, #72]	; (800ccec <prvAddCurrentTaskToDelayedList+0x9c>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <prvAddCurrentTaskToDelayedList+0x94>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	4619      	mov	r1, r3
 800ccae:	4610      	mov	r0, r2
 800ccb0:	f7fe fb03 	bl	800b2ba <vListInsert>
}
 800ccb4:	e010      	b.n	800ccd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ccb6:	4b0e      	ldr	r3, [pc, #56]	; (800ccf0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	4b0a      	ldr	r3, [pc, #40]	; (800cce4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	f7fe faf9 	bl	800b2ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d202      	bcs.n	800ccd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ccd2:	4a08      	ldr	r2, [pc, #32]	; (800ccf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	6013      	str	r3, [r2, #0]
}
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	20000dd0 	.word	0x20000dd0
 800cce4:	200008f8 	.word	0x200008f8
 800cce8:	20000db8 	.word	0x20000db8
 800ccec:	20000d88 	.word	0x20000d88
 800ccf0:	20000d84 	.word	0x20000d84
 800ccf4:	20000dec 	.word	0x20000dec

0800ccf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08a      	sub	sp, #40	; 0x28
 800ccfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cd02:	f000 fb07 	bl	800d314 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cd06:	4b1c      	ldr	r3, [pc, #112]	; (800cd78 <xTimerCreateTimerTask+0x80>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d021      	beq.n	800cd52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cd12:	2300      	movs	r3, #0
 800cd14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cd16:	1d3a      	adds	r2, r7, #4
 800cd18:	f107 0108 	add.w	r1, r7, #8
 800cd1c:	f107 030c 	add.w	r3, r7, #12
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe f91d 	bl	800af60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	9202      	str	r2, [sp, #8]
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	2302      	movs	r3, #2
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	2300      	movs	r3, #0
 800cd36:	460a      	mov	r2, r1
 800cd38:	4910      	ldr	r1, [pc, #64]	; (800cd7c <xTimerCreateTimerTask+0x84>)
 800cd3a:	4811      	ldr	r0, [pc, #68]	; (800cd80 <xTimerCreateTimerTask+0x88>)
 800cd3c:	f7ff f80c 	bl	800bd58 <xTaskCreateStatic>
 800cd40:	4603      	mov	r3, r0
 800cd42:	4a10      	ldr	r2, [pc, #64]	; (800cd84 <xTimerCreateTimerTask+0x8c>)
 800cd44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd46:	4b0f      	ldr	r3, [pc, #60]	; (800cd84 <xTimerCreateTimerTask+0x8c>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd4e:	2301      	movs	r3, #1
 800cd50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10a      	bne.n	800cd6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5c:	f383 8811 	msr	BASEPRI, r3
 800cd60:	f3bf 8f6f 	isb	sy
 800cd64:	f3bf 8f4f 	dsb	sy
 800cd68:	613b      	str	r3, [r7, #16]
}
 800cd6a:	bf00      	nop
 800cd6c:	e7fe      	b.n	800cd6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd6e:	697b      	ldr	r3, [r7, #20]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3718      	adds	r7, #24
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	20000e28 	.word	0x20000e28
 800cd7c:	0801028c 	.word	0x0801028c
 800cd80:	0800cebd 	.word	0x0800cebd
 800cd84:	20000e2c 	.word	0x20000e2c

0800cd88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08a      	sub	sp, #40	; 0x28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	623b      	str	r3, [r7, #32]
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cdb6:	4b1a      	ldr	r3, [pc, #104]	; (800ce20 <xTimerGenericCommand+0x98>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d02a      	beq.n	800ce14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b05      	cmp	r3, #5
 800cdce:	dc18      	bgt.n	800ce02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cdd0:	f7ff fe9a 	bl	800cb08 <xTaskGetSchedulerState>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d109      	bne.n	800cdee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cdda:	4b11      	ldr	r3, [pc, #68]	; (800ce20 <xTimerGenericCommand+0x98>)
 800cddc:	6818      	ldr	r0, [r3, #0]
 800cdde:	f107 0110 	add.w	r1, r7, #16
 800cde2:	2300      	movs	r3, #0
 800cde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cde6:	f7fe fbcf 	bl	800b588 <xQueueGenericSend>
 800cdea:	6278      	str	r0, [r7, #36]	; 0x24
 800cdec:	e012      	b.n	800ce14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cdee:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <xTimerGenericCommand+0x98>)
 800cdf0:	6818      	ldr	r0, [r3, #0]
 800cdf2:	f107 0110 	add.w	r1, r7, #16
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f7fe fbc5 	bl	800b588 <xQueueGenericSend>
 800cdfe:	6278      	str	r0, [r7, #36]	; 0x24
 800ce00:	e008      	b.n	800ce14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce02:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <xTimerGenericCommand+0x98>)
 800ce04:	6818      	ldr	r0, [r3, #0]
 800ce06:	f107 0110 	add.w	r1, r7, #16
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	f7fe fcb9 	bl	800b784 <xQueueGenericSendFromISR>
 800ce12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3728      	adds	r7, #40	; 0x28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20000e28 	.word	0x20000e28

0800ce24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b088      	sub	sp, #32
 800ce28:	af02      	add	r7, sp, #8
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce2e:	4b22      	ldr	r3, [pc, #136]	; (800ceb8 <prvProcessExpiredTimer+0x94>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fe fa75 	bl	800b32c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce48:	f003 0304 	and.w	r3, r3, #4
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d022      	beq.n	800ce96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	699a      	ldr	r2, [r3, #24]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	18d1      	adds	r1, r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	6978      	ldr	r0, [r7, #20]
 800ce5e:	f000 f8d1 	bl	800d004 <prvInsertTimerInActiveList>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01f      	beq.n	800cea8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce68:	2300      	movs	r3, #0
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	2100      	movs	r1, #0
 800ce72:	6978      	ldr	r0, [r7, #20]
 800ce74:	f7ff ff88 	bl	800cd88 <xTimerGenericCommand>
 800ce78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d113      	bne.n	800cea8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	f383 8811 	msr	BASEPRI, r3
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	f3bf 8f4f 	dsb	sy
 800ce90:	60fb      	str	r3, [r7, #12]
}
 800ce92:	bf00      	nop
 800ce94:	e7fe      	b.n	800ce94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce9c:	f023 0301 	bic.w	r3, r3, #1
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	6a1b      	ldr	r3, [r3, #32]
 800ceac:	6978      	ldr	r0, [r7, #20]
 800ceae:	4798      	blx	r3
}
 800ceb0:	bf00      	nop
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	20000e20 	.word	0x20000e20

0800cebc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cec4:	f107 0308 	add.w	r3, r7, #8
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 f857 	bl	800cf7c <prvGetNextExpireTime>
 800cece:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	4619      	mov	r1, r3
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f000 f803 	bl	800cee0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ceda:	f000 f8d5 	bl	800d088 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cede:	e7f1      	b.n	800cec4 <prvTimerTask+0x8>

0800cee0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ceea:	f7ff f9ef 	bl	800c2cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ceee:	f107 0308 	add.w	r3, r7, #8
 800cef2:	4618      	mov	r0, r3
 800cef4:	f000 f866 	bl	800cfc4 <prvSampleTimeNow>
 800cef8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d130      	bne.n	800cf62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <prvProcessTimerOrBlockTask+0x3c>
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d806      	bhi.n	800cf1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf0e:	f7ff f9eb 	bl	800c2e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff ff85 	bl	800ce24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf1a:	e024      	b.n	800cf66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d008      	beq.n	800cf34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf22:	4b13      	ldr	r3, [pc, #76]	; (800cf70 <prvProcessTimerOrBlockTask+0x90>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <prvProcessTimerOrBlockTask+0x50>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e000      	b.n	800cf32 <prvProcessTimerOrBlockTask+0x52>
 800cf30:	2300      	movs	r3, #0
 800cf32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf34:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <prvProcessTimerOrBlockTask+0x94>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	4619      	mov	r1, r3
 800cf42:	f7fe fed5 	bl	800bcf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf46:	f7ff f9cf 	bl	800c2e8 <xTaskResumeAll>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10a      	bne.n	800cf66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cf50:	4b09      	ldr	r3, [pc, #36]	; (800cf78 <prvProcessTimerOrBlockTask+0x98>)
 800cf52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	f3bf 8f6f 	isb	sy
}
 800cf60:	e001      	b.n	800cf66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cf62:	f7ff f9c1 	bl	800c2e8 <xTaskResumeAll>
}
 800cf66:	bf00      	nop
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	20000e24 	.word	0x20000e24
 800cf74:	20000e28 	.word	0x20000e28
 800cf78:	e000ed04 	.word	0xe000ed04

0800cf7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cf84:	4b0e      	ldr	r3, [pc, #56]	; (800cfc0 <prvGetNextExpireTime+0x44>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <prvGetNextExpireTime+0x16>
 800cf8e:	2201      	movs	r2, #1
 800cf90:	e000      	b.n	800cf94 <prvGetNextExpireTime+0x18>
 800cf92:	2200      	movs	r2, #0
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d105      	bne.n	800cfac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <prvGetNextExpireTime+0x44>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	e001      	b.n	800cfb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cfac:	2300      	movs	r3, #0
 800cfae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	20000e20 	.word	0x20000e20

0800cfc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cfcc:	f7ff fa2a 	bl	800c424 <xTaskGetTickCount>
 800cfd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <prvSampleTimeNow+0x3c>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68fa      	ldr	r2, [r7, #12]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d205      	bcs.n	800cfe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cfdc:	f000 f936 	bl	800d24c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	e002      	b.n	800cfee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cfee:	4a04      	ldr	r2, [pc, #16]	; (800d000 <prvSampleTimeNow+0x3c>)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cff4:	68fb      	ldr	r3, [r7, #12]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	20000e30 	.word	0x20000e30

0800d004 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d012:	2300      	movs	r3, #0
 800d014:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	429a      	cmp	r2, r3
 800d028:	d812      	bhi.n	800d050 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	1ad2      	subs	r2, r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	699b      	ldr	r3, [r3, #24]
 800d034:	429a      	cmp	r2, r3
 800d036:	d302      	bcc.n	800d03e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d038:	2301      	movs	r3, #1
 800d03a:	617b      	str	r3, [r7, #20]
 800d03c:	e01b      	b.n	800d076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d03e:	4b10      	ldr	r3, [pc, #64]	; (800d080 <prvInsertTimerInActiveList+0x7c>)
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	3304      	adds	r3, #4
 800d046:	4619      	mov	r1, r3
 800d048:	4610      	mov	r0, r2
 800d04a:	f7fe f936 	bl	800b2ba <vListInsert>
 800d04e:	e012      	b.n	800d076 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	d206      	bcs.n	800d066 <prvInsertTimerInActiveList+0x62>
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d302      	bcc.n	800d066 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d060:	2301      	movs	r3, #1
 800d062:	617b      	str	r3, [r7, #20]
 800d064:	e007      	b.n	800d076 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d066:	4b07      	ldr	r3, [pc, #28]	; (800d084 <prvInsertTimerInActiveList+0x80>)
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	3304      	adds	r3, #4
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f7fe f922 	bl	800b2ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d076:	697b      	ldr	r3, [r7, #20]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	20000e24 	.word	0x20000e24
 800d084:	20000e20 	.word	0x20000e20

0800d088 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08e      	sub	sp, #56	; 0x38
 800d08c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d08e:	e0ca      	b.n	800d226 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	da18      	bge.n	800d0c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d096:	1d3b      	adds	r3, r7, #4
 800d098:	3304      	adds	r3, #4
 800d09a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10a      	bne.n	800d0b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	61fb      	str	r3, [r7, #28]
}
 800d0b4:	bf00      	nop
 800d0b6:	e7fe      	b.n	800d0b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0be:	6850      	ldr	r0, [r2, #4]
 800d0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0c2:	6892      	ldr	r2, [r2, #8]
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f2c0 80aa 	blt.w	800d224 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d004      	beq.n	800d0e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fe f923 	bl	800b32c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0e6:	463b      	mov	r3, r7
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff ff6b 	bl	800cfc4 <prvSampleTimeNow>
 800d0ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b09      	cmp	r3, #9
 800d0f4:	f200 8097 	bhi.w	800d226 <prvProcessReceivedCommands+0x19e>
 800d0f8:	a201      	add	r2, pc, #4	; (adr r2, 800d100 <prvProcessReceivedCommands+0x78>)
 800d0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fe:	bf00      	nop
 800d100:	0800d129 	.word	0x0800d129
 800d104:	0800d129 	.word	0x0800d129
 800d108:	0800d129 	.word	0x0800d129
 800d10c:	0800d19d 	.word	0x0800d19d
 800d110:	0800d1b1 	.word	0x0800d1b1
 800d114:	0800d1fb 	.word	0x0800d1fb
 800d118:	0800d129 	.word	0x0800d129
 800d11c:	0800d129 	.word	0x0800d129
 800d120:	0800d19d 	.word	0x0800d19d
 800d124:	0800d1b1 	.word	0x0800d1b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d12e:	f043 0301 	orr.w	r3, r3, #1
 800d132:	b2da      	uxtb	r2, r3
 800d134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	18d1      	adds	r1, r2, r3
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d148:	f7ff ff5c 	bl	800d004 <prvInsertTimerInActiveList>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d069      	beq.n	800d226 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d158:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d160:	f003 0304 	and.w	r3, r3, #4
 800d164:	2b00      	cmp	r3, #0
 800d166:	d05e      	beq.n	800d226 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	441a      	add	r2, r3
 800d170:	2300      	movs	r3, #0
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	2300      	movs	r3, #0
 800d176:	2100      	movs	r1, #0
 800d178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d17a:	f7ff fe05 	bl	800cd88 <xTimerGenericCommand>
 800d17e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d14f      	bne.n	800d226 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	61bb      	str	r3, [r7, #24]
}
 800d198:	bf00      	nop
 800d19a:	e7fe      	b.n	800d19a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1a2:	f023 0301 	bic.w	r3, r3, #1
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d1ae:	e03a      	b.n	800d226 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1b6:	f043 0301 	orr.w	r3, r3, #1
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10a      	bne.n	800d1e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	617b      	str	r3, [r7, #20]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e8:	699a      	ldr	r2, [r3, #24]
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	18d1      	adds	r1, r2, r3
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f4:	f7ff ff06 	bl	800d004 <prvInsertTimerInActiveList>
					break;
 800d1f8:	e015      	b.n	800d226 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d20a:	f000 fbe1 	bl	800d9d0 <vPortFree>
 800d20e:	e00a      	b.n	800d226 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d216:	f023 0301 	bic.w	r3, r3, #1
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d222:	e000      	b.n	800d226 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d224:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d226:	4b08      	ldr	r3, [pc, #32]	; (800d248 <prvProcessReceivedCommands+0x1c0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	1d39      	adds	r1, r7, #4
 800d22c:	2200      	movs	r2, #0
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fe fb44 	bl	800b8bc <xQueueReceive>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	f47f af2a 	bne.w	800d090 <prvProcessReceivedCommands+0x8>
	}
}
 800d23c:	bf00      	nop
 800d23e:	bf00      	nop
 800d240:	3730      	adds	r7, #48	; 0x30
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20000e28 	.word	0x20000e28

0800d24c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d252:	e048      	b.n	800d2e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d254:	4b2d      	ldr	r3, [pc, #180]	; (800d30c <prvSwitchTimerLists+0xc0>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d25e:	4b2b      	ldr	r3, [pc, #172]	; (800d30c <prvSwitchTimerLists+0xc0>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	3304      	adds	r3, #4
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fe f85d 	bl	800b32c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d280:	f003 0304 	and.w	r3, r3, #4
 800d284:	2b00      	cmp	r3, #0
 800d286:	d02e      	beq.n	800d2e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	4413      	add	r3, r2
 800d290:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	429a      	cmp	r2, r3
 800d298:	d90e      	bls.n	800d2b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2a6:	4b19      	ldr	r3, [pc, #100]	; (800d30c <prvSwitchTimerLists+0xc0>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7fe f802 	bl	800b2ba <vListInsert>
 800d2b6:	e016      	b.n	800d2e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	2300      	movs	r3, #0
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f7ff fd60 	bl	800cd88 <xTimerGenericCommand>
 800d2c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10a      	bne.n	800d2e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	f383 8811 	msr	BASEPRI, r3
 800d2d8:	f3bf 8f6f 	isb	sy
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	603b      	str	r3, [r7, #0]
}
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2e6:	4b09      	ldr	r3, [pc, #36]	; (800d30c <prvSwitchTimerLists+0xc0>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1b1      	bne.n	800d254 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d2f0:	4b06      	ldr	r3, [pc, #24]	; (800d30c <prvSwitchTimerLists+0xc0>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d2f6:	4b06      	ldr	r3, [pc, #24]	; (800d310 <prvSwitchTimerLists+0xc4>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a04      	ldr	r2, [pc, #16]	; (800d30c <prvSwitchTimerLists+0xc0>)
 800d2fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d2fe:	4a04      	ldr	r2, [pc, #16]	; (800d310 <prvSwitchTimerLists+0xc4>)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	6013      	str	r3, [r2, #0]
}
 800d304:	bf00      	nop
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	20000e20 	.word	0x20000e20
 800d310:	20000e24 	.word	0x20000e24

0800d314 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d31a:	f000 f96b 	bl	800d5f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d31e:	4b15      	ldr	r3, [pc, #84]	; (800d374 <prvCheckForValidListAndQueue+0x60>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d120      	bne.n	800d368 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d326:	4814      	ldr	r0, [pc, #80]	; (800d378 <prvCheckForValidListAndQueue+0x64>)
 800d328:	f7fd ff76 	bl	800b218 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d32c:	4813      	ldr	r0, [pc, #76]	; (800d37c <prvCheckForValidListAndQueue+0x68>)
 800d32e:	f7fd ff73 	bl	800b218 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d332:	4b13      	ldr	r3, [pc, #76]	; (800d380 <prvCheckForValidListAndQueue+0x6c>)
 800d334:	4a10      	ldr	r2, [pc, #64]	; (800d378 <prvCheckForValidListAndQueue+0x64>)
 800d336:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d338:	4b12      	ldr	r3, [pc, #72]	; (800d384 <prvCheckForValidListAndQueue+0x70>)
 800d33a:	4a10      	ldr	r2, [pc, #64]	; (800d37c <prvCheckForValidListAndQueue+0x68>)
 800d33c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d33e:	2300      	movs	r3, #0
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	4b11      	ldr	r3, [pc, #68]	; (800d388 <prvCheckForValidListAndQueue+0x74>)
 800d344:	4a11      	ldr	r2, [pc, #68]	; (800d38c <prvCheckForValidListAndQueue+0x78>)
 800d346:	2110      	movs	r1, #16
 800d348:	200a      	movs	r0, #10
 800d34a:	f7fe f881 	bl	800b450 <xQueueGenericCreateStatic>
 800d34e:	4603      	mov	r3, r0
 800d350:	4a08      	ldr	r2, [pc, #32]	; (800d374 <prvCheckForValidListAndQueue+0x60>)
 800d352:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d354:	4b07      	ldr	r3, [pc, #28]	; (800d374 <prvCheckForValidListAndQueue+0x60>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d005      	beq.n	800d368 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d35c:	4b05      	ldr	r3, [pc, #20]	; (800d374 <prvCheckForValidListAndQueue+0x60>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	490b      	ldr	r1, [pc, #44]	; (800d390 <prvCheckForValidListAndQueue+0x7c>)
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe fc9a 	bl	800bc9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d368:	f000 f974 	bl	800d654 <vPortExitCritical>
}
 800d36c:	bf00      	nop
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	20000e28 	.word	0x20000e28
 800d378:	20000df8 	.word	0x20000df8
 800d37c:	20000e0c 	.word	0x20000e0c
 800d380:	20000e20 	.word	0x20000e20
 800d384:	20000e24 	.word	0x20000e24
 800d388:	20000ed4 	.word	0x20000ed4
 800d38c:	20000e34 	.word	0x20000e34
 800d390:	08010294 	.word	0x08010294

0800d394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3b04      	subs	r3, #4
 800d3a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3b04      	subs	r3, #4
 800d3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	f023 0201 	bic.w	r2, r3, #1
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3b04      	subs	r3, #4
 800d3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d3c4:	4a0c      	ldr	r2, [pc, #48]	; (800d3f8 <pxPortInitialiseStack+0x64>)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3b14      	subs	r3, #20
 800d3ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3b04      	subs	r3, #4
 800d3da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f06f 0202 	mvn.w	r2, #2
 800d3e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	3b20      	subs	r3, #32
 800d3e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	0800d3fd 	.word	0x0800d3fd

0800d3fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d406:	4b12      	ldr	r3, [pc, #72]	; (800d450 <prvTaskExitError+0x54>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d40e:	d00a      	beq.n	800d426 <prvTaskExitError+0x2a>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	60fb      	str	r3, [r7, #12]
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <prvTaskExitError+0x28>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	60bb      	str	r3, [r7, #8]
}
 800d438:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d43a:	bf00      	nop
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d0fc      	beq.n	800d43c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d442:	bf00      	nop
 800d444:	bf00      	nop
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	2000015c 	.word	0x2000015c
	...

0800d460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d460:	4b07      	ldr	r3, [pc, #28]	; (800d480 <pxCurrentTCBConst2>)
 800d462:	6819      	ldr	r1, [r3, #0]
 800d464:	6808      	ldr	r0, [r1, #0]
 800d466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46a:	f380 8809 	msr	PSP, r0
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f04f 0000 	mov.w	r0, #0
 800d476:	f380 8811 	msr	BASEPRI, r0
 800d47a:	4770      	bx	lr
 800d47c:	f3af 8000 	nop.w

0800d480 <pxCurrentTCBConst2>:
 800d480:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d484:	bf00      	nop
 800d486:	bf00      	nop

0800d488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d488:	4808      	ldr	r0, [pc, #32]	; (800d4ac <prvPortStartFirstTask+0x24>)
 800d48a:	6800      	ldr	r0, [r0, #0]
 800d48c:	6800      	ldr	r0, [r0, #0]
 800d48e:	f380 8808 	msr	MSP, r0
 800d492:	f04f 0000 	mov.w	r0, #0
 800d496:	f380 8814 	msr	CONTROL, r0
 800d49a:	b662      	cpsie	i
 800d49c:	b661      	cpsie	f
 800d49e:	f3bf 8f4f 	dsb	sy
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	df00      	svc	0
 800d4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4aa:	bf00      	nop
 800d4ac:	e000ed08 	.word	0xe000ed08

0800d4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b086      	sub	sp, #24
 800d4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d4b6:	4b46      	ldr	r3, [pc, #280]	; (800d5d0 <xPortStartScheduler+0x120>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a46      	ldr	r2, [pc, #280]	; (800d5d4 <xPortStartScheduler+0x124>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d10a      	bne.n	800d4d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	613b      	str	r3, [r7, #16]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d4d6:	4b3e      	ldr	r3, [pc, #248]	; (800d5d0 <xPortStartScheduler+0x120>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a3f      	ldr	r2, [pc, #252]	; (800d5d8 <xPortStartScheduler+0x128>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d10a      	bne.n	800d4f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	60fb      	str	r3, [r7, #12]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4f6:	4b39      	ldr	r3, [pc, #228]	; (800d5dc <xPortStartScheduler+0x12c>)
 800d4f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	22ff      	movs	r2, #255	; 0xff
 800d506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	b2db      	uxtb	r3, r3
 800d514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	4b31      	ldr	r3, [pc, #196]	; (800d5e0 <xPortStartScheduler+0x130>)
 800d51c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d51e:	4b31      	ldr	r3, [pc, #196]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d520:	2207      	movs	r2, #7
 800d522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d524:	e009      	b.n	800d53a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d526:	4b2f      	ldr	r3, [pc, #188]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	3b01      	subs	r3, #1
 800d52c:	4a2d      	ldr	r2, [pc, #180]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d52e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d530:	78fb      	ldrb	r3, [r7, #3]
 800d532:	b2db      	uxtb	r3, r3
 800d534:	005b      	lsls	r3, r3, #1
 800d536:	b2db      	uxtb	r3, r3
 800d538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d53a:	78fb      	ldrb	r3, [r7, #3]
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d542:	2b80      	cmp	r3, #128	; 0x80
 800d544:	d0ef      	beq.n	800d526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d546:	4b27      	ldr	r3, [pc, #156]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f1c3 0307 	rsb	r3, r3, #7
 800d54e:	2b04      	cmp	r3, #4
 800d550:	d00a      	beq.n	800d568 <xPortStartScheduler+0xb8>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	60bb      	str	r3, [r7, #8]
}
 800d564:	bf00      	nop
 800d566:	e7fe      	b.n	800d566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d568:	4b1e      	ldr	r3, [pc, #120]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	021b      	lsls	r3, r3, #8
 800d56e:	4a1d      	ldr	r2, [pc, #116]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d572:	4b1c      	ldr	r3, [pc, #112]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d57a:	4a1a      	ldr	r2, [pc, #104]	; (800d5e4 <xPortStartScheduler+0x134>)
 800d57c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	b2da      	uxtb	r2, r3
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d586:	4b18      	ldr	r3, [pc, #96]	; (800d5e8 <xPortStartScheduler+0x138>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a17      	ldr	r2, [pc, #92]	; (800d5e8 <xPortStartScheduler+0x138>)
 800d58c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d592:	4b15      	ldr	r3, [pc, #84]	; (800d5e8 <xPortStartScheduler+0x138>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a14      	ldr	r2, [pc, #80]	; (800d5e8 <xPortStartScheduler+0x138>)
 800d598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d59c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d59e:	f000 f8dd 	bl	800d75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5a2:	4b12      	ldr	r3, [pc, #72]	; (800d5ec <xPortStartScheduler+0x13c>)
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5a8:	f000 f8fc 	bl	800d7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5ac:	4b10      	ldr	r3, [pc, #64]	; (800d5f0 <xPortStartScheduler+0x140>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a0f      	ldr	r2, [pc, #60]	; (800d5f0 <xPortStartScheduler+0x140>)
 800d5b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d5b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5b8:	f7ff ff66 	bl	800d488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5bc:	f7fe fffc 	bl	800c5b8 <vTaskSwitchContext>
	prvTaskExitError();
 800d5c0:	f7ff ff1c 	bl	800d3fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5c4:	2300      	movs	r3, #0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	e000ed00 	.word	0xe000ed00
 800d5d4:	410fc271 	.word	0x410fc271
 800d5d8:	410fc270 	.word	0x410fc270
 800d5dc:	e000e400 	.word	0xe000e400
 800d5e0:	20000f24 	.word	0x20000f24
 800d5e4:	20000f28 	.word	0x20000f28
 800d5e8:	e000ed20 	.word	0xe000ed20
 800d5ec:	2000015c 	.word	0x2000015c
 800d5f0:	e000ef34 	.word	0xe000ef34

0800d5f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
	__asm volatile
 800d5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fe:	f383 8811 	msr	BASEPRI, r3
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	607b      	str	r3, [r7, #4]
}
 800d60c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d60e:	4b0f      	ldr	r3, [pc, #60]	; (800d64c <vPortEnterCritical+0x58>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3301      	adds	r3, #1
 800d614:	4a0d      	ldr	r2, [pc, #52]	; (800d64c <vPortEnterCritical+0x58>)
 800d616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d618:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <vPortEnterCritical+0x58>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d10f      	bne.n	800d640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d620:	4b0b      	ldr	r3, [pc, #44]	; (800d650 <vPortEnterCritical+0x5c>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <vPortEnterCritical+0x4c>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	603b      	str	r3, [r7, #0]
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <vPortEnterCritical+0x4a>
	}
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	2000015c 	.word	0x2000015c
 800d650:	e000ed04 	.word	0xe000ed04

0800d654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d65a:	4b12      	ldr	r3, [pc, #72]	; (800d6a4 <vPortExitCritical+0x50>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10a      	bne.n	800d678 <vPortExitCritical+0x24>
	__asm volatile
 800d662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	607b      	str	r3, [r7, #4]
}
 800d674:	bf00      	nop
 800d676:	e7fe      	b.n	800d676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d678:	4b0a      	ldr	r3, [pc, #40]	; (800d6a4 <vPortExitCritical+0x50>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	4a09      	ldr	r2, [pc, #36]	; (800d6a4 <vPortExitCritical+0x50>)
 800d680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d682:	4b08      	ldr	r3, [pc, #32]	; (800d6a4 <vPortExitCritical+0x50>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d105      	bne.n	800d696 <vPortExitCritical+0x42>
 800d68a:	2300      	movs	r3, #0
 800d68c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	f383 8811 	msr	BASEPRI, r3
}
 800d694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d696:	bf00      	nop
 800d698:	370c      	adds	r7, #12
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	2000015c 	.word	0x2000015c
	...

0800d6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6b0:	f3ef 8009 	mrs	r0, PSP
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	4b15      	ldr	r3, [pc, #84]	; (800d710 <pxCurrentTCBConst>)
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	f01e 0f10 	tst.w	lr, #16
 800d6c0:	bf08      	it	eq
 800d6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ca:	6010      	str	r0, [r2, #0]
 800d6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d6d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d6d4:	f380 8811 	msr	BASEPRI, r0
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f7fe ff6a 	bl	800c5b8 <vTaskSwitchContext>
 800d6e4:	f04f 0000 	mov.w	r0, #0
 800d6e8:	f380 8811 	msr	BASEPRI, r0
 800d6ec:	bc09      	pop	{r0, r3}
 800d6ee:	6819      	ldr	r1, [r3, #0]
 800d6f0:	6808      	ldr	r0, [r1, #0]
 800d6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f6:	f01e 0f10 	tst.w	lr, #16
 800d6fa:	bf08      	it	eq
 800d6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d700:	f380 8809 	msr	PSP, r0
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	f3af 8000 	nop.w

0800d710 <pxCurrentTCBConst>:
 800d710:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d714:	bf00      	nop
 800d716:	bf00      	nop

0800d718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
	__asm volatile
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	607b      	str	r3, [r7, #4]
}
 800d730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d732:	f7fe fe87 	bl	800c444 <xTaskIncrementTick>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d003      	beq.n	800d744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d73c:	4b06      	ldr	r3, [pc, #24]	; (800d758 <xPortSysTickHandler+0x40>)
 800d73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	2300      	movs	r3, #0
 800d746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	f383 8811 	msr	BASEPRI, r3
}
 800d74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	e000ed04 	.word	0xe000ed04

0800d75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d75c:	b480      	push	{r7}
 800d75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d760:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <vPortSetupTimerInterrupt+0x34>)
 800d762:	2200      	movs	r2, #0
 800d764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d766:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <vPortSetupTimerInterrupt+0x38>)
 800d768:	2200      	movs	r2, #0
 800d76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d76c:	4b0a      	ldr	r3, [pc, #40]	; (800d798 <vPortSetupTimerInterrupt+0x3c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a0a      	ldr	r2, [pc, #40]	; (800d79c <vPortSetupTimerInterrupt+0x40>)
 800d772:	fba2 2303 	umull	r2, r3, r2, r3
 800d776:	099b      	lsrs	r3, r3, #6
 800d778:	4a09      	ldr	r2, [pc, #36]	; (800d7a0 <vPortSetupTimerInterrupt+0x44>)
 800d77a:	3b01      	subs	r3, #1
 800d77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d77e:	4b04      	ldr	r3, [pc, #16]	; (800d790 <vPortSetupTimerInterrupt+0x34>)
 800d780:	2207      	movs	r2, #7
 800d782:	601a      	str	r2, [r3, #0]
}
 800d784:	bf00      	nop
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	e000e010 	.word	0xe000e010
 800d794:	e000e018 	.word	0xe000e018
 800d798:	2000013c 	.word	0x2000013c
 800d79c:	10624dd3 	.word	0x10624dd3
 800d7a0:	e000e014 	.word	0xe000e014

0800d7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d7b4 <vPortEnableVFP+0x10>
 800d7a8:	6801      	ldr	r1, [r0, #0]
 800d7aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d7ae:	6001      	str	r1, [r0, #0]
 800d7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7b2:	bf00      	nop
 800d7b4:	e000ed88 	.word	0xe000ed88

0800d7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7be:	f3ef 8305 	mrs	r3, IPSR
 800d7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b0f      	cmp	r3, #15
 800d7c8:	d914      	bls.n	800d7f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d7ca:	4a17      	ldr	r2, [pc, #92]	; (800d828 <vPortValidateInterruptPriority+0x70>)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d7d4:	4b15      	ldr	r3, [pc, #84]	; (800d82c <vPortValidateInterruptPriority+0x74>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	7afa      	ldrb	r2, [r7, #11]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d20a      	bcs.n	800d7f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	607b      	str	r3, [r7, #4]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d7f4:	4b0e      	ldr	r3, [pc, #56]	; (800d830 <vPortValidateInterruptPriority+0x78>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d7fc:	4b0d      	ldr	r3, [pc, #52]	; (800d834 <vPortValidateInterruptPriority+0x7c>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d90a      	bls.n	800d81a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	603b      	str	r3, [r7, #0]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <vPortValidateInterruptPriority+0x60>
	}
 800d81a:	bf00      	nop
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	e000e3f0 	.word	0xe000e3f0
 800d82c:	20000f24 	.word	0x20000f24
 800d830:	e000ed0c 	.word	0xe000ed0c
 800d834:	20000f28 	.word	0x20000f28

0800d838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b08a      	sub	sp, #40	; 0x28
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d840:	2300      	movs	r3, #0
 800d842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d844:	f7fe fd42 	bl	800c2cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d848:	4b5b      	ldr	r3, [pc, #364]	; (800d9b8 <pvPortMalloc+0x180>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d850:	f000 f920 	bl	800da94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d854:	4b59      	ldr	r3, [pc, #356]	; (800d9bc <pvPortMalloc+0x184>)
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4013      	ands	r3, r2
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f040 8093 	bne.w	800d988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d01d      	beq.n	800d8a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d868:	2208      	movs	r2, #8
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4413      	add	r3, r2
 800d86e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f003 0307 	and.w	r3, r3, #7
 800d876:	2b00      	cmp	r3, #0
 800d878:	d014      	beq.n	800d8a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f023 0307 	bic.w	r3, r3, #7
 800d880:	3308      	adds	r3, #8
 800d882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00a      	beq.n	800d8a4 <pvPortMalloc+0x6c>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	617b      	str	r3, [r7, #20]
}
 800d8a0:	bf00      	nop
 800d8a2:	e7fe      	b.n	800d8a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d06e      	beq.n	800d988 <pvPortMalloc+0x150>
 800d8aa:	4b45      	ldr	r3, [pc, #276]	; (800d9c0 <pvPortMalloc+0x188>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d869      	bhi.n	800d988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d8b4:	4b43      	ldr	r3, [pc, #268]	; (800d9c4 <pvPortMalloc+0x18c>)
 800d8b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d8b8:	4b42      	ldr	r3, [pc, #264]	; (800d9c4 <pvPortMalloc+0x18c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8be:	e004      	b.n	800d8ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d903      	bls.n	800d8dc <pvPortMalloc+0xa4>
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1f1      	bne.n	800d8c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d8dc:	4b36      	ldr	r3, [pc, #216]	; (800d9b8 <pvPortMalloc+0x180>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d050      	beq.n	800d988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2208      	movs	r2, #8
 800d8ec:	4413      	add	r3, r2
 800d8ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	6a3b      	ldr	r3, [r7, #32]
 800d8f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	685a      	ldr	r2, [r3, #4]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	1ad2      	subs	r2, r2, r3
 800d900:	2308      	movs	r3, #8
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	429a      	cmp	r2, r3
 800d906:	d91f      	bls.n	800d948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4413      	add	r3, r2
 800d90e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	f003 0307 	and.w	r3, r3, #7
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00a      	beq.n	800d930 <pvPortMalloc+0xf8>
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	613b      	str	r3, [r7, #16]
}
 800d92c:	bf00      	nop
 800d92e:	e7fe      	b.n	800d92e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	685a      	ldr	r2, [r3, #4]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	1ad2      	subs	r2, r2, r3
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	687a      	ldr	r2, [r7, #4]
 800d940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d942:	69b8      	ldr	r0, [r7, #24]
 800d944:	f000 f908 	bl	800db58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d948:	4b1d      	ldr	r3, [pc, #116]	; (800d9c0 <pvPortMalloc+0x188>)
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	4a1b      	ldr	r2, [pc, #108]	; (800d9c0 <pvPortMalloc+0x188>)
 800d954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d956:	4b1a      	ldr	r3, [pc, #104]	; (800d9c0 <pvPortMalloc+0x188>)
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	4b1b      	ldr	r3, [pc, #108]	; (800d9c8 <pvPortMalloc+0x190>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d203      	bcs.n	800d96a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d962:	4b17      	ldr	r3, [pc, #92]	; (800d9c0 <pvPortMalloc+0x188>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a18      	ldr	r2, [pc, #96]	; (800d9c8 <pvPortMalloc+0x190>)
 800d968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	685a      	ldr	r2, [r3, #4]
 800d96e:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <pvPortMalloc+0x184>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	431a      	orrs	r2, r3
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	2200      	movs	r2, #0
 800d97c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d97e:	4b13      	ldr	r3, [pc, #76]	; (800d9cc <pvPortMalloc+0x194>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	3301      	adds	r3, #1
 800d984:	4a11      	ldr	r2, [pc, #68]	; (800d9cc <pvPortMalloc+0x194>)
 800d986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d988:	f7fe fcae 	bl	800c2e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f003 0307 	and.w	r3, r3, #7
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00a      	beq.n	800d9ac <pvPortMalloc+0x174>
	__asm volatile
 800d996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99a:	f383 8811 	msr	BASEPRI, r3
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f3bf 8f4f 	dsb	sy
 800d9a6:	60fb      	str	r3, [r7, #12]
}
 800d9a8:	bf00      	nop
 800d9aa:	e7fe      	b.n	800d9aa <pvPortMalloc+0x172>
	return pvReturn;
 800d9ac:	69fb      	ldr	r3, [r7, #28]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3728      	adds	r7, #40	; 0x28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20003644 	.word	0x20003644
 800d9bc:	20003658 	.word	0x20003658
 800d9c0:	20003648 	.word	0x20003648
 800d9c4:	2000363c 	.word	0x2000363c
 800d9c8:	2000364c 	.word	0x2000364c
 800d9cc:	20003650 	.word	0x20003650

0800d9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d04d      	beq.n	800da7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d9e2:	2308      	movs	r3, #8
 800d9e4:	425b      	negs	r3, r3
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	685a      	ldr	r2, [r3, #4]
 800d9f4:	4b24      	ldr	r3, [pc, #144]	; (800da88 <vPortFree+0xb8>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10a      	bne.n	800da14 <vPortFree+0x44>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	60fb      	str	r3, [r7, #12]
}
 800da10:	bf00      	nop
 800da12:	e7fe      	b.n	800da12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00a      	beq.n	800da32 <vPortFree+0x62>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	60bb      	str	r3, [r7, #8]
}
 800da2e:	bf00      	nop
 800da30:	e7fe      	b.n	800da30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	685a      	ldr	r2, [r3, #4]
 800da36:	4b14      	ldr	r3, [pc, #80]	; (800da88 <vPortFree+0xb8>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4013      	ands	r3, r2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d01e      	beq.n	800da7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d11a      	bne.n	800da7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	4b0e      	ldr	r3, [pc, #56]	; (800da88 <vPortFree+0xb8>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	43db      	mvns	r3, r3
 800da52:	401a      	ands	r2, r3
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da58:	f7fe fc38 	bl	800c2cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <vPortFree+0xbc>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4413      	add	r3, r2
 800da66:	4a09      	ldr	r2, [pc, #36]	; (800da8c <vPortFree+0xbc>)
 800da68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da6a:	6938      	ldr	r0, [r7, #16]
 800da6c:	f000 f874 	bl	800db58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800da70:	4b07      	ldr	r3, [pc, #28]	; (800da90 <vPortFree+0xc0>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	3301      	adds	r3, #1
 800da76:	4a06      	ldr	r2, [pc, #24]	; (800da90 <vPortFree+0xc0>)
 800da78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800da7a:	f7fe fc35 	bl	800c2e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da7e:	bf00      	nop
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	20003658 	.word	0x20003658
 800da8c:	20003648 	.word	0x20003648
 800da90:	20003654 	.word	0x20003654

0800da94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da9a:	f242 7310 	movw	r3, #10000	; 0x2710
 800da9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800daa0:	4b27      	ldr	r3, [pc, #156]	; (800db40 <prvHeapInit+0xac>)
 800daa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f003 0307 	and.w	r3, r3, #7
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00c      	beq.n	800dac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3307      	adds	r3, #7
 800dab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f023 0307 	bic.w	r3, r3, #7
 800daba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	4a1f      	ldr	r2, [pc, #124]	; (800db40 <prvHeapInit+0xac>)
 800dac4:	4413      	add	r3, r2
 800dac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dacc:	4a1d      	ldr	r2, [pc, #116]	; (800db44 <prvHeapInit+0xb0>)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dad2:	4b1c      	ldr	r3, [pc, #112]	; (800db44 <prvHeapInit+0xb0>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	68ba      	ldr	r2, [r7, #8]
 800dadc:	4413      	add	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dae0:	2208      	movs	r2, #8
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	1a9b      	subs	r3, r3, r2
 800dae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f023 0307 	bic.w	r3, r3, #7
 800daee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	4a15      	ldr	r2, [pc, #84]	; (800db48 <prvHeapInit+0xb4>)
 800daf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800daf6:	4b14      	ldr	r3, [pc, #80]	; (800db48 <prvHeapInit+0xb4>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2200      	movs	r2, #0
 800dafc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dafe:	4b12      	ldr	r3, [pc, #72]	; (800db48 <prvHeapInit+0xb4>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2200      	movs	r2, #0
 800db04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	1ad2      	subs	r2, r2, r3
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db14:	4b0c      	ldr	r3, [pc, #48]	; (800db48 <prvHeapInit+0xb4>)
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	4a0a      	ldr	r2, [pc, #40]	; (800db4c <prvHeapInit+0xb8>)
 800db22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	4a09      	ldr	r2, [pc, #36]	; (800db50 <prvHeapInit+0xbc>)
 800db2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800db2c:	4b09      	ldr	r3, [pc, #36]	; (800db54 <prvHeapInit+0xc0>)
 800db2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800db32:	601a      	str	r2, [r3, #0]
}
 800db34:	bf00      	nop
 800db36:	3714      	adds	r7, #20
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	20000f2c 	.word	0x20000f2c
 800db44:	2000363c 	.word	0x2000363c
 800db48:	20003644 	.word	0x20003644
 800db4c:	2000364c 	.word	0x2000364c
 800db50:	20003648 	.word	0x20003648
 800db54:	20003658 	.word	0x20003658

0800db58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db60:	4b28      	ldr	r3, [pc, #160]	; (800dc04 <prvInsertBlockIntoFreeList+0xac>)
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	e002      	b.n	800db6c <prvInsertBlockIntoFreeList+0x14>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d8f7      	bhi.n	800db66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	68ba      	ldr	r2, [r7, #8]
 800db80:	4413      	add	r3, r2
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	429a      	cmp	r2, r3
 800db86:	d108      	bne.n	800db9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	441a      	add	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	441a      	add	r2, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d118      	bne.n	800dbe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	4b15      	ldr	r3, [pc, #84]	; (800dc08 <prvInsertBlockIntoFreeList+0xb0>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d00d      	beq.n	800dbd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	685a      	ldr	r2, [r3, #4]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	441a      	add	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	e008      	b.n	800dbe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dbd6:	4b0c      	ldr	r3, [pc, #48]	; (800dc08 <prvInsertBlockIntoFreeList+0xb0>)
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	e003      	b.n	800dbe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d002      	beq.n	800dbf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbf6:	bf00      	nop
 800dbf8:	3714      	adds	r7, #20
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	2000363c 	.word	0x2000363c
 800dc08:	20003644 	.word	0x20003644

0800dc0c <__errno>:
 800dc0c:	4b01      	ldr	r3, [pc, #4]	; (800dc14 <__errno+0x8>)
 800dc0e:	6818      	ldr	r0, [r3, #0]
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	20000160 	.word	0x20000160

0800dc18 <__libc_init_array>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	4d0d      	ldr	r5, [pc, #52]	; (800dc50 <__libc_init_array+0x38>)
 800dc1c:	4c0d      	ldr	r4, [pc, #52]	; (800dc54 <__libc_init_array+0x3c>)
 800dc1e:	1b64      	subs	r4, r4, r5
 800dc20:	10a4      	asrs	r4, r4, #2
 800dc22:	2600      	movs	r6, #0
 800dc24:	42a6      	cmp	r6, r4
 800dc26:	d109      	bne.n	800dc3c <__libc_init_array+0x24>
 800dc28:	4d0b      	ldr	r5, [pc, #44]	; (800dc58 <__libc_init_array+0x40>)
 800dc2a:	4c0c      	ldr	r4, [pc, #48]	; (800dc5c <__libc_init_array+0x44>)
 800dc2c:	f002 fa22 	bl	8010074 <_init>
 800dc30:	1b64      	subs	r4, r4, r5
 800dc32:	10a4      	asrs	r4, r4, #2
 800dc34:	2600      	movs	r6, #0
 800dc36:	42a6      	cmp	r6, r4
 800dc38:	d105      	bne.n	800dc46 <__libc_init_array+0x2e>
 800dc3a:	bd70      	pop	{r4, r5, r6, pc}
 800dc3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc40:	4798      	blx	r3
 800dc42:	3601      	adds	r6, #1
 800dc44:	e7ee      	b.n	800dc24 <__libc_init_array+0xc>
 800dc46:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc4a:	4798      	blx	r3
 800dc4c:	3601      	adds	r6, #1
 800dc4e:	e7f2      	b.n	800dc36 <__libc_init_array+0x1e>
 800dc50:	080105e8 	.word	0x080105e8
 800dc54:	080105e8 	.word	0x080105e8
 800dc58:	080105e8 	.word	0x080105e8
 800dc5c:	080105ec 	.word	0x080105ec

0800dc60 <memcpy>:
 800dc60:	440a      	add	r2, r1
 800dc62:	4291      	cmp	r1, r2
 800dc64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dc68:	d100      	bne.n	800dc6c <memcpy+0xc>
 800dc6a:	4770      	bx	lr
 800dc6c:	b510      	push	{r4, lr}
 800dc6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc76:	4291      	cmp	r1, r2
 800dc78:	d1f9      	bne.n	800dc6e <memcpy+0xe>
 800dc7a:	bd10      	pop	{r4, pc}

0800dc7c <memset>:
 800dc7c:	4402      	add	r2, r0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d100      	bne.n	800dc86 <memset+0xa>
 800dc84:	4770      	bx	lr
 800dc86:	f803 1b01 	strb.w	r1, [r3], #1
 800dc8a:	e7f9      	b.n	800dc80 <memset+0x4>

0800dc8c <iprintf>:
 800dc8c:	b40f      	push	{r0, r1, r2, r3}
 800dc8e:	4b0a      	ldr	r3, [pc, #40]	; (800dcb8 <iprintf+0x2c>)
 800dc90:	b513      	push	{r0, r1, r4, lr}
 800dc92:	681c      	ldr	r4, [r3, #0]
 800dc94:	b124      	cbz	r4, 800dca0 <iprintf+0x14>
 800dc96:	69a3      	ldr	r3, [r4, #24]
 800dc98:	b913      	cbnz	r3, 800dca0 <iprintf+0x14>
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 fa7e 	bl	800e19c <__sinit>
 800dca0:	ab05      	add	r3, sp, #20
 800dca2:	9a04      	ldr	r2, [sp, #16]
 800dca4:	68a1      	ldr	r1, [r4, #8]
 800dca6:	9301      	str	r3, [sp, #4]
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f000 fdab 	bl	800e804 <_vfiprintf_r>
 800dcae:	b002      	add	sp, #8
 800dcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcb4:	b004      	add	sp, #16
 800dcb6:	4770      	bx	lr
 800dcb8:	20000160 	.word	0x20000160

0800dcbc <_puts_r>:
 800dcbc:	b570      	push	{r4, r5, r6, lr}
 800dcbe:	460e      	mov	r6, r1
 800dcc0:	4605      	mov	r5, r0
 800dcc2:	b118      	cbz	r0, 800dccc <_puts_r+0x10>
 800dcc4:	6983      	ldr	r3, [r0, #24]
 800dcc6:	b90b      	cbnz	r3, 800dccc <_puts_r+0x10>
 800dcc8:	f000 fa68 	bl	800e19c <__sinit>
 800dccc:	69ab      	ldr	r3, [r5, #24]
 800dcce:	68ac      	ldr	r4, [r5, #8]
 800dcd0:	b913      	cbnz	r3, 800dcd8 <_puts_r+0x1c>
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f000 fa62 	bl	800e19c <__sinit>
 800dcd8:	4b2c      	ldr	r3, [pc, #176]	; (800dd8c <_puts_r+0xd0>)
 800dcda:	429c      	cmp	r4, r3
 800dcdc:	d120      	bne.n	800dd20 <_puts_r+0x64>
 800dcde:	686c      	ldr	r4, [r5, #4]
 800dce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dce2:	07db      	lsls	r3, r3, #31
 800dce4:	d405      	bmi.n	800dcf2 <_puts_r+0x36>
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	0598      	lsls	r0, r3, #22
 800dcea:	d402      	bmi.n	800dcf2 <_puts_r+0x36>
 800dcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcee:	f000 faf3 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	0719      	lsls	r1, r3, #28
 800dcf6:	d51d      	bpl.n	800dd34 <_puts_r+0x78>
 800dcf8:	6923      	ldr	r3, [r4, #16]
 800dcfa:	b1db      	cbz	r3, 800dd34 <_puts_r+0x78>
 800dcfc:	3e01      	subs	r6, #1
 800dcfe:	68a3      	ldr	r3, [r4, #8]
 800dd00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dd04:	3b01      	subs	r3, #1
 800dd06:	60a3      	str	r3, [r4, #8]
 800dd08:	bb39      	cbnz	r1, 800dd5a <_puts_r+0x9e>
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	da38      	bge.n	800dd80 <_puts_r+0xc4>
 800dd0e:	4622      	mov	r2, r4
 800dd10:	210a      	movs	r1, #10
 800dd12:	4628      	mov	r0, r5
 800dd14:	f000 f868 	bl	800dde8 <__swbuf_r>
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d011      	beq.n	800dd40 <_puts_r+0x84>
 800dd1c:	250a      	movs	r5, #10
 800dd1e:	e011      	b.n	800dd44 <_puts_r+0x88>
 800dd20:	4b1b      	ldr	r3, [pc, #108]	; (800dd90 <_puts_r+0xd4>)
 800dd22:	429c      	cmp	r4, r3
 800dd24:	d101      	bne.n	800dd2a <_puts_r+0x6e>
 800dd26:	68ac      	ldr	r4, [r5, #8]
 800dd28:	e7da      	b.n	800dce0 <_puts_r+0x24>
 800dd2a:	4b1a      	ldr	r3, [pc, #104]	; (800dd94 <_puts_r+0xd8>)
 800dd2c:	429c      	cmp	r4, r3
 800dd2e:	bf08      	it	eq
 800dd30:	68ec      	ldreq	r4, [r5, #12]
 800dd32:	e7d5      	b.n	800dce0 <_puts_r+0x24>
 800dd34:	4621      	mov	r1, r4
 800dd36:	4628      	mov	r0, r5
 800dd38:	f000 f8a8 	bl	800de8c <__swsetup_r>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	d0dd      	beq.n	800dcfc <_puts_r+0x40>
 800dd40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dd44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd46:	07da      	lsls	r2, r3, #31
 800dd48:	d405      	bmi.n	800dd56 <_puts_r+0x9a>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	059b      	lsls	r3, r3, #22
 800dd4e:	d402      	bmi.n	800dd56 <_puts_r+0x9a>
 800dd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd52:	f000 fac2 	bl	800e2da <__retarget_lock_release_recursive>
 800dd56:	4628      	mov	r0, r5
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	da04      	bge.n	800dd68 <_puts_r+0xac>
 800dd5e:	69a2      	ldr	r2, [r4, #24]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	dc06      	bgt.n	800dd72 <_puts_r+0xb6>
 800dd64:	290a      	cmp	r1, #10
 800dd66:	d004      	beq.n	800dd72 <_puts_r+0xb6>
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	1c5a      	adds	r2, r3, #1
 800dd6c:	6022      	str	r2, [r4, #0]
 800dd6e:	7019      	strb	r1, [r3, #0]
 800dd70:	e7c5      	b.n	800dcfe <_puts_r+0x42>
 800dd72:	4622      	mov	r2, r4
 800dd74:	4628      	mov	r0, r5
 800dd76:	f000 f837 	bl	800dde8 <__swbuf_r>
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	d1bf      	bne.n	800dcfe <_puts_r+0x42>
 800dd7e:	e7df      	b.n	800dd40 <_puts_r+0x84>
 800dd80:	6823      	ldr	r3, [r4, #0]
 800dd82:	250a      	movs	r5, #10
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	6022      	str	r2, [r4, #0]
 800dd88:	701d      	strb	r5, [r3, #0]
 800dd8a:	e7db      	b.n	800dd44 <_puts_r+0x88>
 800dd8c:	08010390 	.word	0x08010390
 800dd90:	080103b0 	.word	0x080103b0
 800dd94:	08010370 	.word	0x08010370

0800dd98 <puts>:
 800dd98:	4b02      	ldr	r3, [pc, #8]	; (800dda4 <puts+0xc>)
 800dd9a:	4601      	mov	r1, r0
 800dd9c:	6818      	ldr	r0, [r3, #0]
 800dd9e:	f7ff bf8d 	b.w	800dcbc <_puts_r>
 800dda2:	bf00      	nop
 800dda4:	20000160 	.word	0x20000160

0800dda8 <siprintf>:
 800dda8:	b40e      	push	{r1, r2, r3}
 800ddaa:	b500      	push	{lr}
 800ddac:	b09c      	sub	sp, #112	; 0x70
 800ddae:	ab1d      	add	r3, sp, #116	; 0x74
 800ddb0:	9002      	str	r0, [sp, #8]
 800ddb2:	9006      	str	r0, [sp, #24]
 800ddb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ddb8:	4809      	ldr	r0, [pc, #36]	; (800dde0 <siprintf+0x38>)
 800ddba:	9107      	str	r1, [sp, #28]
 800ddbc:	9104      	str	r1, [sp, #16]
 800ddbe:	4909      	ldr	r1, [pc, #36]	; (800dde4 <siprintf+0x3c>)
 800ddc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc4:	9105      	str	r1, [sp, #20]
 800ddc6:	6800      	ldr	r0, [r0, #0]
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	a902      	add	r1, sp, #8
 800ddcc:	f000 fbf0 	bl	800e5b0 <_svfiprintf_r>
 800ddd0:	9b02      	ldr	r3, [sp, #8]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	b01c      	add	sp, #112	; 0x70
 800ddd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dddc:	b003      	add	sp, #12
 800ddde:	4770      	bx	lr
 800dde0:	20000160 	.word	0x20000160
 800dde4:	ffff0208 	.word	0xffff0208

0800dde8 <__swbuf_r>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	460e      	mov	r6, r1
 800ddec:	4614      	mov	r4, r2
 800ddee:	4605      	mov	r5, r0
 800ddf0:	b118      	cbz	r0, 800ddfa <__swbuf_r+0x12>
 800ddf2:	6983      	ldr	r3, [r0, #24]
 800ddf4:	b90b      	cbnz	r3, 800ddfa <__swbuf_r+0x12>
 800ddf6:	f000 f9d1 	bl	800e19c <__sinit>
 800ddfa:	4b21      	ldr	r3, [pc, #132]	; (800de80 <__swbuf_r+0x98>)
 800ddfc:	429c      	cmp	r4, r3
 800ddfe:	d12b      	bne.n	800de58 <__swbuf_r+0x70>
 800de00:	686c      	ldr	r4, [r5, #4]
 800de02:	69a3      	ldr	r3, [r4, #24]
 800de04:	60a3      	str	r3, [r4, #8]
 800de06:	89a3      	ldrh	r3, [r4, #12]
 800de08:	071a      	lsls	r2, r3, #28
 800de0a:	d52f      	bpl.n	800de6c <__swbuf_r+0x84>
 800de0c:	6923      	ldr	r3, [r4, #16]
 800de0e:	b36b      	cbz	r3, 800de6c <__swbuf_r+0x84>
 800de10:	6923      	ldr	r3, [r4, #16]
 800de12:	6820      	ldr	r0, [r4, #0]
 800de14:	1ac0      	subs	r0, r0, r3
 800de16:	6963      	ldr	r3, [r4, #20]
 800de18:	b2f6      	uxtb	r6, r6
 800de1a:	4283      	cmp	r3, r0
 800de1c:	4637      	mov	r7, r6
 800de1e:	dc04      	bgt.n	800de2a <__swbuf_r+0x42>
 800de20:	4621      	mov	r1, r4
 800de22:	4628      	mov	r0, r5
 800de24:	f000 f926 	bl	800e074 <_fflush_r>
 800de28:	bb30      	cbnz	r0, 800de78 <__swbuf_r+0x90>
 800de2a:	68a3      	ldr	r3, [r4, #8]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	60a3      	str	r3, [r4, #8]
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	6022      	str	r2, [r4, #0]
 800de36:	701e      	strb	r6, [r3, #0]
 800de38:	6963      	ldr	r3, [r4, #20]
 800de3a:	3001      	adds	r0, #1
 800de3c:	4283      	cmp	r3, r0
 800de3e:	d004      	beq.n	800de4a <__swbuf_r+0x62>
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	07db      	lsls	r3, r3, #31
 800de44:	d506      	bpl.n	800de54 <__swbuf_r+0x6c>
 800de46:	2e0a      	cmp	r6, #10
 800de48:	d104      	bne.n	800de54 <__swbuf_r+0x6c>
 800de4a:	4621      	mov	r1, r4
 800de4c:	4628      	mov	r0, r5
 800de4e:	f000 f911 	bl	800e074 <_fflush_r>
 800de52:	b988      	cbnz	r0, 800de78 <__swbuf_r+0x90>
 800de54:	4638      	mov	r0, r7
 800de56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de58:	4b0a      	ldr	r3, [pc, #40]	; (800de84 <__swbuf_r+0x9c>)
 800de5a:	429c      	cmp	r4, r3
 800de5c:	d101      	bne.n	800de62 <__swbuf_r+0x7a>
 800de5e:	68ac      	ldr	r4, [r5, #8]
 800de60:	e7cf      	b.n	800de02 <__swbuf_r+0x1a>
 800de62:	4b09      	ldr	r3, [pc, #36]	; (800de88 <__swbuf_r+0xa0>)
 800de64:	429c      	cmp	r4, r3
 800de66:	bf08      	it	eq
 800de68:	68ec      	ldreq	r4, [r5, #12]
 800de6a:	e7ca      	b.n	800de02 <__swbuf_r+0x1a>
 800de6c:	4621      	mov	r1, r4
 800de6e:	4628      	mov	r0, r5
 800de70:	f000 f80c 	bl	800de8c <__swsetup_r>
 800de74:	2800      	cmp	r0, #0
 800de76:	d0cb      	beq.n	800de10 <__swbuf_r+0x28>
 800de78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800de7c:	e7ea      	b.n	800de54 <__swbuf_r+0x6c>
 800de7e:	bf00      	nop
 800de80:	08010390 	.word	0x08010390
 800de84:	080103b0 	.word	0x080103b0
 800de88:	08010370 	.word	0x08010370

0800de8c <__swsetup_r>:
 800de8c:	4b32      	ldr	r3, [pc, #200]	; (800df58 <__swsetup_r+0xcc>)
 800de8e:	b570      	push	{r4, r5, r6, lr}
 800de90:	681d      	ldr	r5, [r3, #0]
 800de92:	4606      	mov	r6, r0
 800de94:	460c      	mov	r4, r1
 800de96:	b125      	cbz	r5, 800dea2 <__swsetup_r+0x16>
 800de98:	69ab      	ldr	r3, [r5, #24]
 800de9a:	b913      	cbnz	r3, 800dea2 <__swsetup_r+0x16>
 800de9c:	4628      	mov	r0, r5
 800de9e:	f000 f97d 	bl	800e19c <__sinit>
 800dea2:	4b2e      	ldr	r3, [pc, #184]	; (800df5c <__swsetup_r+0xd0>)
 800dea4:	429c      	cmp	r4, r3
 800dea6:	d10f      	bne.n	800dec8 <__swsetup_r+0x3c>
 800dea8:	686c      	ldr	r4, [r5, #4]
 800deaa:	89a3      	ldrh	r3, [r4, #12]
 800deac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800deb0:	0719      	lsls	r1, r3, #28
 800deb2:	d42c      	bmi.n	800df0e <__swsetup_r+0x82>
 800deb4:	06dd      	lsls	r5, r3, #27
 800deb6:	d411      	bmi.n	800dedc <__swsetup_r+0x50>
 800deb8:	2309      	movs	r3, #9
 800deba:	6033      	str	r3, [r6, #0]
 800debc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dec0:	81a3      	strh	r3, [r4, #12]
 800dec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dec6:	e03e      	b.n	800df46 <__swsetup_r+0xba>
 800dec8:	4b25      	ldr	r3, [pc, #148]	; (800df60 <__swsetup_r+0xd4>)
 800deca:	429c      	cmp	r4, r3
 800decc:	d101      	bne.n	800ded2 <__swsetup_r+0x46>
 800dece:	68ac      	ldr	r4, [r5, #8]
 800ded0:	e7eb      	b.n	800deaa <__swsetup_r+0x1e>
 800ded2:	4b24      	ldr	r3, [pc, #144]	; (800df64 <__swsetup_r+0xd8>)
 800ded4:	429c      	cmp	r4, r3
 800ded6:	bf08      	it	eq
 800ded8:	68ec      	ldreq	r4, [r5, #12]
 800deda:	e7e6      	b.n	800deaa <__swsetup_r+0x1e>
 800dedc:	0758      	lsls	r0, r3, #29
 800dede:	d512      	bpl.n	800df06 <__swsetup_r+0x7a>
 800dee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dee2:	b141      	cbz	r1, 800def6 <__swsetup_r+0x6a>
 800dee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dee8:	4299      	cmp	r1, r3
 800deea:	d002      	beq.n	800def2 <__swsetup_r+0x66>
 800deec:	4630      	mov	r0, r6
 800deee:	f000 fa59 	bl	800e3a4 <_free_r>
 800def2:	2300      	movs	r3, #0
 800def4:	6363      	str	r3, [r4, #52]	; 0x34
 800def6:	89a3      	ldrh	r3, [r4, #12]
 800def8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800defc:	81a3      	strh	r3, [r4, #12]
 800defe:	2300      	movs	r3, #0
 800df00:	6063      	str	r3, [r4, #4]
 800df02:	6923      	ldr	r3, [r4, #16]
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	f043 0308 	orr.w	r3, r3, #8
 800df0c:	81a3      	strh	r3, [r4, #12]
 800df0e:	6923      	ldr	r3, [r4, #16]
 800df10:	b94b      	cbnz	r3, 800df26 <__swsetup_r+0x9a>
 800df12:	89a3      	ldrh	r3, [r4, #12]
 800df14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df1c:	d003      	beq.n	800df26 <__swsetup_r+0x9a>
 800df1e:	4621      	mov	r1, r4
 800df20:	4630      	mov	r0, r6
 800df22:	f000 f9ff 	bl	800e324 <__smakebuf_r>
 800df26:	89a0      	ldrh	r0, [r4, #12]
 800df28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df2c:	f010 0301 	ands.w	r3, r0, #1
 800df30:	d00a      	beq.n	800df48 <__swsetup_r+0xbc>
 800df32:	2300      	movs	r3, #0
 800df34:	60a3      	str	r3, [r4, #8]
 800df36:	6963      	ldr	r3, [r4, #20]
 800df38:	425b      	negs	r3, r3
 800df3a:	61a3      	str	r3, [r4, #24]
 800df3c:	6923      	ldr	r3, [r4, #16]
 800df3e:	b943      	cbnz	r3, 800df52 <__swsetup_r+0xc6>
 800df40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df44:	d1ba      	bne.n	800debc <__swsetup_r+0x30>
 800df46:	bd70      	pop	{r4, r5, r6, pc}
 800df48:	0781      	lsls	r1, r0, #30
 800df4a:	bf58      	it	pl
 800df4c:	6963      	ldrpl	r3, [r4, #20]
 800df4e:	60a3      	str	r3, [r4, #8]
 800df50:	e7f4      	b.n	800df3c <__swsetup_r+0xb0>
 800df52:	2000      	movs	r0, #0
 800df54:	e7f7      	b.n	800df46 <__swsetup_r+0xba>
 800df56:	bf00      	nop
 800df58:	20000160 	.word	0x20000160
 800df5c:	08010390 	.word	0x08010390
 800df60:	080103b0 	.word	0x080103b0
 800df64:	08010370 	.word	0x08010370

0800df68 <__sflush_r>:
 800df68:	898a      	ldrh	r2, [r1, #12]
 800df6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df6e:	4605      	mov	r5, r0
 800df70:	0710      	lsls	r0, r2, #28
 800df72:	460c      	mov	r4, r1
 800df74:	d458      	bmi.n	800e028 <__sflush_r+0xc0>
 800df76:	684b      	ldr	r3, [r1, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	dc05      	bgt.n	800df88 <__sflush_r+0x20>
 800df7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df7e:	2b00      	cmp	r3, #0
 800df80:	dc02      	bgt.n	800df88 <__sflush_r+0x20>
 800df82:	2000      	movs	r0, #0
 800df84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df8a:	2e00      	cmp	r6, #0
 800df8c:	d0f9      	beq.n	800df82 <__sflush_r+0x1a>
 800df8e:	2300      	movs	r3, #0
 800df90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df94:	682f      	ldr	r7, [r5, #0]
 800df96:	602b      	str	r3, [r5, #0]
 800df98:	d032      	beq.n	800e000 <__sflush_r+0x98>
 800df9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df9c:	89a3      	ldrh	r3, [r4, #12]
 800df9e:	075a      	lsls	r2, r3, #29
 800dfa0:	d505      	bpl.n	800dfae <__sflush_r+0x46>
 800dfa2:	6863      	ldr	r3, [r4, #4]
 800dfa4:	1ac0      	subs	r0, r0, r3
 800dfa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfa8:	b10b      	cbz	r3, 800dfae <__sflush_r+0x46>
 800dfaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfac:	1ac0      	subs	r0, r0, r3
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfb4:	6a21      	ldr	r1, [r4, #32]
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	47b0      	blx	r6
 800dfba:	1c43      	adds	r3, r0, #1
 800dfbc:	89a3      	ldrh	r3, [r4, #12]
 800dfbe:	d106      	bne.n	800dfce <__sflush_r+0x66>
 800dfc0:	6829      	ldr	r1, [r5, #0]
 800dfc2:	291d      	cmp	r1, #29
 800dfc4:	d82c      	bhi.n	800e020 <__sflush_r+0xb8>
 800dfc6:	4a2a      	ldr	r2, [pc, #168]	; (800e070 <__sflush_r+0x108>)
 800dfc8:	40ca      	lsrs	r2, r1
 800dfca:	07d6      	lsls	r6, r2, #31
 800dfcc:	d528      	bpl.n	800e020 <__sflush_r+0xb8>
 800dfce:	2200      	movs	r2, #0
 800dfd0:	6062      	str	r2, [r4, #4]
 800dfd2:	04d9      	lsls	r1, r3, #19
 800dfd4:	6922      	ldr	r2, [r4, #16]
 800dfd6:	6022      	str	r2, [r4, #0]
 800dfd8:	d504      	bpl.n	800dfe4 <__sflush_r+0x7c>
 800dfda:	1c42      	adds	r2, r0, #1
 800dfdc:	d101      	bne.n	800dfe2 <__sflush_r+0x7a>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b903      	cbnz	r3, 800dfe4 <__sflush_r+0x7c>
 800dfe2:	6560      	str	r0, [r4, #84]	; 0x54
 800dfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfe6:	602f      	str	r7, [r5, #0]
 800dfe8:	2900      	cmp	r1, #0
 800dfea:	d0ca      	beq.n	800df82 <__sflush_r+0x1a>
 800dfec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dff0:	4299      	cmp	r1, r3
 800dff2:	d002      	beq.n	800dffa <__sflush_r+0x92>
 800dff4:	4628      	mov	r0, r5
 800dff6:	f000 f9d5 	bl	800e3a4 <_free_r>
 800dffa:	2000      	movs	r0, #0
 800dffc:	6360      	str	r0, [r4, #52]	; 0x34
 800dffe:	e7c1      	b.n	800df84 <__sflush_r+0x1c>
 800e000:	6a21      	ldr	r1, [r4, #32]
 800e002:	2301      	movs	r3, #1
 800e004:	4628      	mov	r0, r5
 800e006:	47b0      	blx	r6
 800e008:	1c41      	adds	r1, r0, #1
 800e00a:	d1c7      	bne.n	800df9c <__sflush_r+0x34>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0c4      	beq.n	800df9c <__sflush_r+0x34>
 800e012:	2b1d      	cmp	r3, #29
 800e014:	d001      	beq.n	800e01a <__sflush_r+0xb2>
 800e016:	2b16      	cmp	r3, #22
 800e018:	d101      	bne.n	800e01e <__sflush_r+0xb6>
 800e01a:	602f      	str	r7, [r5, #0]
 800e01c:	e7b1      	b.n	800df82 <__sflush_r+0x1a>
 800e01e:	89a3      	ldrh	r3, [r4, #12]
 800e020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e024:	81a3      	strh	r3, [r4, #12]
 800e026:	e7ad      	b.n	800df84 <__sflush_r+0x1c>
 800e028:	690f      	ldr	r7, [r1, #16]
 800e02a:	2f00      	cmp	r7, #0
 800e02c:	d0a9      	beq.n	800df82 <__sflush_r+0x1a>
 800e02e:	0793      	lsls	r3, r2, #30
 800e030:	680e      	ldr	r6, [r1, #0]
 800e032:	bf08      	it	eq
 800e034:	694b      	ldreq	r3, [r1, #20]
 800e036:	600f      	str	r7, [r1, #0]
 800e038:	bf18      	it	ne
 800e03a:	2300      	movne	r3, #0
 800e03c:	eba6 0807 	sub.w	r8, r6, r7
 800e040:	608b      	str	r3, [r1, #8]
 800e042:	f1b8 0f00 	cmp.w	r8, #0
 800e046:	dd9c      	ble.n	800df82 <__sflush_r+0x1a>
 800e048:	6a21      	ldr	r1, [r4, #32]
 800e04a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e04c:	4643      	mov	r3, r8
 800e04e:	463a      	mov	r2, r7
 800e050:	4628      	mov	r0, r5
 800e052:	47b0      	blx	r6
 800e054:	2800      	cmp	r0, #0
 800e056:	dc06      	bgt.n	800e066 <__sflush_r+0xfe>
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e05e:	81a3      	strh	r3, [r4, #12]
 800e060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e064:	e78e      	b.n	800df84 <__sflush_r+0x1c>
 800e066:	4407      	add	r7, r0
 800e068:	eba8 0800 	sub.w	r8, r8, r0
 800e06c:	e7e9      	b.n	800e042 <__sflush_r+0xda>
 800e06e:	bf00      	nop
 800e070:	20400001 	.word	0x20400001

0800e074 <_fflush_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	690b      	ldr	r3, [r1, #16]
 800e078:	4605      	mov	r5, r0
 800e07a:	460c      	mov	r4, r1
 800e07c:	b913      	cbnz	r3, 800e084 <_fflush_r+0x10>
 800e07e:	2500      	movs	r5, #0
 800e080:	4628      	mov	r0, r5
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	b118      	cbz	r0, 800e08e <_fflush_r+0x1a>
 800e086:	6983      	ldr	r3, [r0, #24]
 800e088:	b90b      	cbnz	r3, 800e08e <_fflush_r+0x1a>
 800e08a:	f000 f887 	bl	800e19c <__sinit>
 800e08e:	4b14      	ldr	r3, [pc, #80]	; (800e0e0 <_fflush_r+0x6c>)
 800e090:	429c      	cmp	r4, r3
 800e092:	d11b      	bne.n	800e0cc <_fflush_r+0x58>
 800e094:	686c      	ldr	r4, [r5, #4]
 800e096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d0ef      	beq.n	800e07e <_fflush_r+0xa>
 800e09e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0a0:	07d0      	lsls	r0, r2, #31
 800e0a2:	d404      	bmi.n	800e0ae <_fflush_r+0x3a>
 800e0a4:	0599      	lsls	r1, r3, #22
 800e0a6:	d402      	bmi.n	800e0ae <_fflush_r+0x3a>
 800e0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0aa:	f000 f915 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	f7ff ff59 	bl	800df68 <__sflush_r>
 800e0b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0b8:	07da      	lsls	r2, r3, #31
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	d4e0      	bmi.n	800e080 <_fflush_r+0xc>
 800e0be:	89a3      	ldrh	r3, [r4, #12]
 800e0c0:	059b      	lsls	r3, r3, #22
 800e0c2:	d4dd      	bmi.n	800e080 <_fflush_r+0xc>
 800e0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0c6:	f000 f908 	bl	800e2da <__retarget_lock_release_recursive>
 800e0ca:	e7d9      	b.n	800e080 <_fflush_r+0xc>
 800e0cc:	4b05      	ldr	r3, [pc, #20]	; (800e0e4 <_fflush_r+0x70>)
 800e0ce:	429c      	cmp	r4, r3
 800e0d0:	d101      	bne.n	800e0d6 <_fflush_r+0x62>
 800e0d2:	68ac      	ldr	r4, [r5, #8]
 800e0d4:	e7df      	b.n	800e096 <_fflush_r+0x22>
 800e0d6:	4b04      	ldr	r3, [pc, #16]	; (800e0e8 <_fflush_r+0x74>)
 800e0d8:	429c      	cmp	r4, r3
 800e0da:	bf08      	it	eq
 800e0dc:	68ec      	ldreq	r4, [r5, #12]
 800e0de:	e7da      	b.n	800e096 <_fflush_r+0x22>
 800e0e0:	08010390 	.word	0x08010390
 800e0e4:	080103b0 	.word	0x080103b0
 800e0e8:	08010370 	.word	0x08010370

0800e0ec <std>:
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	b510      	push	{r4, lr}
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	e9c0 3300 	strd	r3, r3, [r0]
 800e0f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0fa:	6083      	str	r3, [r0, #8]
 800e0fc:	8181      	strh	r1, [r0, #12]
 800e0fe:	6643      	str	r3, [r0, #100]	; 0x64
 800e100:	81c2      	strh	r2, [r0, #14]
 800e102:	6183      	str	r3, [r0, #24]
 800e104:	4619      	mov	r1, r3
 800e106:	2208      	movs	r2, #8
 800e108:	305c      	adds	r0, #92	; 0x5c
 800e10a:	f7ff fdb7 	bl	800dc7c <memset>
 800e10e:	4b05      	ldr	r3, [pc, #20]	; (800e124 <std+0x38>)
 800e110:	6263      	str	r3, [r4, #36]	; 0x24
 800e112:	4b05      	ldr	r3, [pc, #20]	; (800e128 <std+0x3c>)
 800e114:	62a3      	str	r3, [r4, #40]	; 0x28
 800e116:	4b05      	ldr	r3, [pc, #20]	; (800e12c <std+0x40>)
 800e118:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e11a:	4b05      	ldr	r3, [pc, #20]	; (800e130 <std+0x44>)
 800e11c:	6224      	str	r4, [r4, #32]
 800e11e:	6323      	str	r3, [r4, #48]	; 0x30
 800e120:	bd10      	pop	{r4, pc}
 800e122:	bf00      	nop
 800e124:	0800edad 	.word	0x0800edad
 800e128:	0800edcf 	.word	0x0800edcf
 800e12c:	0800ee07 	.word	0x0800ee07
 800e130:	0800ee2b 	.word	0x0800ee2b

0800e134 <_cleanup_r>:
 800e134:	4901      	ldr	r1, [pc, #4]	; (800e13c <_cleanup_r+0x8>)
 800e136:	f000 b8af 	b.w	800e298 <_fwalk_reent>
 800e13a:	bf00      	nop
 800e13c:	0800e075 	.word	0x0800e075

0800e140 <__sfmoreglue>:
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	1e4a      	subs	r2, r1, #1
 800e144:	2568      	movs	r5, #104	; 0x68
 800e146:	4355      	muls	r5, r2
 800e148:	460e      	mov	r6, r1
 800e14a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e14e:	f000 f979 	bl	800e444 <_malloc_r>
 800e152:	4604      	mov	r4, r0
 800e154:	b140      	cbz	r0, 800e168 <__sfmoreglue+0x28>
 800e156:	2100      	movs	r1, #0
 800e158:	e9c0 1600 	strd	r1, r6, [r0]
 800e15c:	300c      	adds	r0, #12
 800e15e:	60a0      	str	r0, [r4, #8]
 800e160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e164:	f7ff fd8a 	bl	800dc7c <memset>
 800e168:	4620      	mov	r0, r4
 800e16a:	bd70      	pop	{r4, r5, r6, pc}

0800e16c <__sfp_lock_acquire>:
 800e16c:	4801      	ldr	r0, [pc, #4]	; (800e174 <__sfp_lock_acquire+0x8>)
 800e16e:	f000 b8b3 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e172:	bf00      	nop
 800e174:	2000ff00 	.word	0x2000ff00

0800e178 <__sfp_lock_release>:
 800e178:	4801      	ldr	r0, [pc, #4]	; (800e180 <__sfp_lock_release+0x8>)
 800e17a:	f000 b8ae 	b.w	800e2da <__retarget_lock_release_recursive>
 800e17e:	bf00      	nop
 800e180:	2000ff00 	.word	0x2000ff00

0800e184 <__sinit_lock_acquire>:
 800e184:	4801      	ldr	r0, [pc, #4]	; (800e18c <__sinit_lock_acquire+0x8>)
 800e186:	f000 b8a7 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800e18a:	bf00      	nop
 800e18c:	2000fefb 	.word	0x2000fefb

0800e190 <__sinit_lock_release>:
 800e190:	4801      	ldr	r0, [pc, #4]	; (800e198 <__sinit_lock_release+0x8>)
 800e192:	f000 b8a2 	b.w	800e2da <__retarget_lock_release_recursive>
 800e196:	bf00      	nop
 800e198:	2000fefb 	.word	0x2000fefb

0800e19c <__sinit>:
 800e19c:	b510      	push	{r4, lr}
 800e19e:	4604      	mov	r4, r0
 800e1a0:	f7ff fff0 	bl	800e184 <__sinit_lock_acquire>
 800e1a4:	69a3      	ldr	r3, [r4, #24]
 800e1a6:	b11b      	cbz	r3, 800e1b0 <__sinit+0x14>
 800e1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1ac:	f7ff bff0 	b.w	800e190 <__sinit_lock_release>
 800e1b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1b4:	6523      	str	r3, [r4, #80]	; 0x50
 800e1b6:	4b13      	ldr	r3, [pc, #76]	; (800e204 <__sinit+0x68>)
 800e1b8:	4a13      	ldr	r2, [pc, #76]	; (800e208 <__sinit+0x6c>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1be:	42a3      	cmp	r3, r4
 800e1c0:	bf04      	itt	eq
 800e1c2:	2301      	moveq	r3, #1
 800e1c4:	61a3      	streq	r3, [r4, #24]
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f000 f820 	bl	800e20c <__sfp>
 800e1cc:	6060      	str	r0, [r4, #4]
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	f000 f81c 	bl	800e20c <__sfp>
 800e1d4:	60a0      	str	r0, [r4, #8]
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 f818 	bl	800e20c <__sfp>
 800e1dc:	2200      	movs	r2, #0
 800e1de:	60e0      	str	r0, [r4, #12]
 800e1e0:	2104      	movs	r1, #4
 800e1e2:	6860      	ldr	r0, [r4, #4]
 800e1e4:	f7ff ff82 	bl	800e0ec <std>
 800e1e8:	68a0      	ldr	r0, [r4, #8]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	2109      	movs	r1, #9
 800e1ee:	f7ff ff7d 	bl	800e0ec <std>
 800e1f2:	68e0      	ldr	r0, [r4, #12]
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	2112      	movs	r1, #18
 800e1f8:	f7ff ff78 	bl	800e0ec <std>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	61a3      	str	r3, [r4, #24]
 800e200:	e7d2      	b.n	800e1a8 <__sinit+0xc>
 800e202:	bf00      	nop
 800e204:	0801036c 	.word	0x0801036c
 800e208:	0800e135 	.word	0x0800e135

0800e20c <__sfp>:
 800e20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20e:	4607      	mov	r7, r0
 800e210:	f7ff ffac 	bl	800e16c <__sfp_lock_acquire>
 800e214:	4b1e      	ldr	r3, [pc, #120]	; (800e290 <__sfp+0x84>)
 800e216:	681e      	ldr	r6, [r3, #0]
 800e218:	69b3      	ldr	r3, [r6, #24]
 800e21a:	b913      	cbnz	r3, 800e222 <__sfp+0x16>
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7ff ffbd 	bl	800e19c <__sinit>
 800e222:	3648      	adds	r6, #72	; 0x48
 800e224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e228:	3b01      	subs	r3, #1
 800e22a:	d503      	bpl.n	800e234 <__sfp+0x28>
 800e22c:	6833      	ldr	r3, [r6, #0]
 800e22e:	b30b      	cbz	r3, 800e274 <__sfp+0x68>
 800e230:	6836      	ldr	r6, [r6, #0]
 800e232:	e7f7      	b.n	800e224 <__sfp+0x18>
 800e234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e238:	b9d5      	cbnz	r5, 800e270 <__sfp+0x64>
 800e23a:	4b16      	ldr	r3, [pc, #88]	; (800e294 <__sfp+0x88>)
 800e23c:	60e3      	str	r3, [r4, #12]
 800e23e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e242:	6665      	str	r5, [r4, #100]	; 0x64
 800e244:	f000 f847 	bl	800e2d6 <__retarget_lock_init_recursive>
 800e248:	f7ff ff96 	bl	800e178 <__sfp_lock_release>
 800e24c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e254:	6025      	str	r5, [r4, #0]
 800e256:	61a5      	str	r5, [r4, #24]
 800e258:	2208      	movs	r2, #8
 800e25a:	4629      	mov	r1, r5
 800e25c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e260:	f7ff fd0c 	bl	800dc7c <memset>
 800e264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e26c:	4620      	mov	r0, r4
 800e26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e270:	3468      	adds	r4, #104	; 0x68
 800e272:	e7d9      	b.n	800e228 <__sfp+0x1c>
 800e274:	2104      	movs	r1, #4
 800e276:	4638      	mov	r0, r7
 800e278:	f7ff ff62 	bl	800e140 <__sfmoreglue>
 800e27c:	4604      	mov	r4, r0
 800e27e:	6030      	str	r0, [r6, #0]
 800e280:	2800      	cmp	r0, #0
 800e282:	d1d5      	bne.n	800e230 <__sfp+0x24>
 800e284:	f7ff ff78 	bl	800e178 <__sfp_lock_release>
 800e288:	230c      	movs	r3, #12
 800e28a:	603b      	str	r3, [r7, #0]
 800e28c:	e7ee      	b.n	800e26c <__sfp+0x60>
 800e28e:	bf00      	nop
 800e290:	0801036c 	.word	0x0801036c
 800e294:	ffff0001 	.word	0xffff0001

0800e298 <_fwalk_reent>:
 800e298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e29c:	4606      	mov	r6, r0
 800e29e:	4688      	mov	r8, r1
 800e2a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e2a4:	2700      	movs	r7, #0
 800e2a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2aa:	f1b9 0901 	subs.w	r9, r9, #1
 800e2ae:	d505      	bpl.n	800e2bc <_fwalk_reent+0x24>
 800e2b0:	6824      	ldr	r4, [r4, #0]
 800e2b2:	2c00      	cmp	r4, #0
 800e2b4:	d1f7      	bne.n	800e2a6 <_fwalk_reent+0xe>
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2bc:	89ab      	ldrh	r3, [r5, #12]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d907      	bls.n	800e2d2 <_fwalk_reent+0x3a>
 800e2c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	d003      	beq.n	800e2d2 <_fwalk_reent+0x3a>
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	47c0      	blx	r8
 800e2d0:	4307      	orrs	r7, r0
 800e2d2:	3568      	adds	r5, #104	; 0x68
 800e2d4:	e7e9      	b.n	800e2aa <_fwalk_reent+0x12>

0800e2d6 <__retarget_lock_init_recursive>:
 800e2d6:	4770      	bx	lr

0800e2d8 <__retarget_lock_acquire_recursive>:
 800e2d8:	4770      	bx	lr

0800e2da <__retarget_lock_release_recursive>:
 800e2da:	4770      	bx	lr

0800e2dc <__swhatbuf_r>:
 800e2dc:	b570      	push	{r4, r5, r6, lr}
 800e2de:	460e      	mov	r6, r1
 800e2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2e4:	2900      	cmp	r1, #0
 800e2e6:	b096      	sub	sp, #88	; 0x58
 800e2e8:	4614      	mov	r4, r2
 800e2ea:	461d      	mov	r5, r3
 800e2ec:	da07      	bge.n	800e2fe <__swhatbuf_r+0x22>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	602b      	str	r3, [r5, #0]
 800e2f2:	89b3      	ldrh	r3, [r6, #12]
 800e2f4:	061a      	lsls	r2, r3, #24
 800e2f6:	d410      	bmi.n	800e31a <__swhatbuf_r+0x3e>
 800e2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2fc:	e00e      	b.n	800e31c <__swhatbuf_r+0x40>
 800e2fe:	466a      	mov	r2, sp
 800e300:	f000 fdba 	bl	800ee78 <_fstat_r>
 800e304:	2800      	cmp	r0, #0
 800e306:	dbf2      	blt.n	800e2ee <__swhatbuf_r+0x12>
 800e308:	9a01      	ldr	r2, [sp, #4]
 800e30a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e30e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e312:	425a      	negs	r2, r3
 800e314:	415a      	adcs	r2, r3
 800e316:	602a      	str	r2, [r5, #0]
 800e318:	e7ee      	b.n	800e2f8 <__swhatbuf_r+0x1c>
 800e31a:	2340      	movs	r3, #64	; 0x40
 800e31c:	2000      	movs	r0, #0
 800e31e:	6023      	str	r3, [r4, #0]
 800e320:	b016      	add	sp, #88	; 0x58
 800e322:	bd70      	pop	{r4, r5, r6, pc}

0800e324 <__smakebuf_r>:
 800e324:	898b      	ldrh	r3, [r1, #12]
 800e326:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e328:	079d      	lsls	r5, r3, #30
 800e32a:	4606      	mov	r6, r0
 800e32c:	460c      	mov	r4, r1
 800e32e:	d507      	bpl.n	800e340 <__smakebuf_r+0x1c>
 800e330:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	6123      	str	r3, [r4, #16]
 800e338:	2301      	movs	r3, #1
 800e33a:	6163      	str	r3, [r4, #20]
 800e33c:	b002      	add	sp, #8
 800e33e:	bd70      	pop	{r4, r5, r6, pc}
 800e340:	ab01      	add	r3, sp, #4
 800e342:	466a      	mov	r2, sp
 800e344:	f7ff ffca 	bl	800e2dc <__swhatbuf_r>
 800e348:	9900      	ldr	r1, [sp, #0]
 800e34a:	4605      	mov	r5, r0
 800e34c:	4630      	mov	r0, r6
 800e34e:	f000 f879 	bl	800e444 <_malloc_r>
 800e352:	b948      	cbnz	r0, 800e368 <__smakebuf_r+0x44>
 800e354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e358:	059a      	lsls	r2, r3, #22
 800e35a:	d4ef      	bmi.n	800e33c <__smakebuf_r+0x18>
 800e35c:	f023 0303 	bic.w	r3, r3, #3
 800e360:	f043 0302 	orr.w	r3, r3, #2
 800e364:	81a3      	strh	r3, [r4, #12]
 800e366:	e7e3      	b.n	800e330 <__smakebuf_r+0xc>
 800e368:	4b0d      	ldr	r3, [pc, #52]	; (800e3a0 <__smakebuf_r+0x7c>)
 800e36a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	6020      	str	r0, [r4, #0]
 800e370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e374:	81a3      	strh	r3, [r4, #12]
 800e376:	9b00      	ldr	r3, [sp, #0]
 800e378:	6163      	str	r3, [r4, #20]
 800e37a:	9b01      	ldr	r3, [sp, #4]
 800e37c:	6120      	str	r0, [r4, #16]
 800e37e:	b15b      	cbz	r3, 800e398 <__smakebuf_r+0x74>
 800e380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e384:	4630      	mov	r0, r6
 800e386:	f000 fd89 	bl	800ee9c <_isatty_r>
 800e38a:	b128      	cbz	r0, 800e398 <__smakebuf_r+0x74>
 800e38c:	89a3      	ldrh	r3, [r4, #12]
 800e38e:	f023 0303 	bic.w	r3, r3, #3
 800e392:	f043 0301 	orr.w	r3, r3, #1
 800e396:	81a3      	strh	r3, [r4, #12]
 800e398:	89a0      	ldrh	r0, [r4, #12]
 800e39a:	4305      	orrs	r5, r0
 800e39c:	81a5      	strh	r5, [r4, #12]
 800e39e:	e7cd      	b.n	800e33c <__smakebuf_r+0x18>
 800e3a0:	0800e135 	.word	0x0800e135

0800e3a4 <_free_r>:
 800e3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3a6:	2900      	cmp	r1, #0
 800e3a8:	d048      	beq.n	800e43c <_free_r+0x98>
 800e3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3ae:	9001      	str	r0, [sp, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f1a1 0404 	sub.w	r4, r1, #4
 800e3b6:	bfb8      	it	lt
 800e3b8:	18e4      	addlt	r4, r4, r3
 800e3ba:	f000 fdab 	bl	800ef14 <__malloc_lock>
 800e3be:	4a20      	ldr	r2, [pc, #128]	; (800e440 <_free_r+0x9c>)
 800e3c0:	9801      	ldr	r0, [sp, #4]
 800e3c2:	6813      	ldr	r3, [r2, #0]
 800e3c4:	4615      	mov	r5, r2
 800e3c6:	b933      	cbnz	r3, 800e3d6 <_free_r+0x32>
 800e3c8:	6063      	str	r3, [r4, #4]
 800e3ca:	6014      	str	r4, [r2, #0]
 800e3cc:	b003      	add	sp, #12
 800e3ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3d2:	f000 bda5 	b.w	800ef20 <__malloc_unlock>
 800e3d6:	42a3      	cmp	r3, r4
 800e3d8:	d90b      	bls.n	800e3f2 <_free_r+0x4e>
 800e3da:	6821      	ldr	r1, [r4, #0]
 800e3dc:	1862      	adds	r2, r4, r1
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	bf04      	itt	eq
 800e3e2:	681a      	ldreq	r2, [r3, #0]
 800e3e4:	685b      	ldreq	r3, [r3, #4]
 800e3e6:	6063      	str	r3, [r4, #4]
 800e3e8:	bf04      	itt	eq
 800e3ea:	1852      	addeq	r2, r2, r1
 800e3ec:	6022      	streq	r2, [r4, #0]
 800e3ee:	602c      	str	r4, [r5, #0]
 800e3f0:	e7ec      	b.n	800e3cc <_free_r+0x28>
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	b10b      	cbz	r3, 800e3fc <_free_r+0x58>
 800e3f8:	42a3      	cmp	r3, r4
 800e3fa:	d9fa      	bls.n	800e3f2 <_free_r+0x4e>
 800e3fc:	6811      	ldr	r1, [r2, #0]
 800e3fe:	1855      	adds	r5, r2, r1
 800e400:	42a5      	cmp	r5, r4
 800e402:	d10b      	bne.n	800e41c <_free_r+0x78>
 800e404:	6824      	ldr	r4, [r4, #0]
 800e406:	4421      	add	r1, r4
 800e408:	1854      	adds	r4, r2, r1
 800e40a:	42a3      	cmp	r3, r4
 800e40c:	6011      	str	r1, [r2, #0]
 800e40e:	d1dd      	bne.n	800e3cc <_free_r+0x28>
 800e410:	681c      	ldr	r4, [r3, #0]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	6053      	str	r3, [r2, #4]
 800e416:	4421      	add	r1, r4
 800e418:	6011      	str	r1, [r2, #0]
 800e41a:	e7d7      	b.n	800e3cc <_free_r+0x28>
 800e41c:	d902      	bls.n	800e424 <_free_r+0x80>
 800e41e:	230c      	movs	r3, #12
 800e420:	6003      	str	r3, [r0, #0]
 800e422:	e7d3      	b.n	800e3cc <_free_r+0x28>
 800e424:	6825      	ldr	r5, [r4, #0]
 800e426:	1961      	adds	r1, r4, r5
 800e428:	428b      	cmp	r3, r1
 800e42a:	bf04      	itt	eq
 800e42c:	6819      	ldreq	r1, [r3, #0]
 800e42e:	685b      	ldreq	r3, [r3, #4]
 800e430:	6063      	str	r3, [r4, #4]
 800e432:	bf04      	itt	eq
 800e434:	1949      	addeq	r1, r1, r5
 800e436:	6021      	streq	r1, [r4, #0]
 800e438:	6054      	str	r4, [r2, #4]
 800e43a:	e7c7      	b.n	800e3cc <_free_r+0x28>
 800e43c:	b003      	add	sp, #12
 800e43e:	bd30      	pop	{r4, r5, pc}
 800e440:	2000365c 	.word	0x2000365c

0800e444 <_malloc_r>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	1ccd      	adds	r5, r1, #3
 800e448:	f025 0503 	bic.w	r5, r5, #3
 800e44c:	3508      	adds	r5, #8
 800e44e:	2d0c      	cmp	r5, #12
 800e450:	bf38      	it	cc
 800e452:	250c      	movcc	r5, #12
 800e454:	2d00      	cmp	r5, #0
 800e456:	4606      	mov	r6, r0
 800e458:	db01      	blt.n	800e45e <_malloc_r+0x1a>
 800e45a:	42a9      	cmp	r1, r5
 800e45c:	d903      	bls.n	800e466 <_malloc_r+0x22>
 800e45e:	230c      	movs	r3, #12
 800e460:	6033      	str	r3, [r6, #0]
 800e462:	2000      	movs	r0, #0
 800e464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e466:	f000 fd55 	bl	800ef14 <__malloc_lock>
 800e46a:	4921      	ldr	r1, [pc, #132]	; (800e4f0 <_malloc_r+0xac>)
 800e46c:	680a      	ldr	r2, [r1, #0]
 800e46e:	4614      	mov	r4, r2
 800e470:	b99c      	cbnz	r4, 800e49a <_malloc_r+0x56>
 800e472:	4f20      	ldr	r7, [pc, #128]	; (800e4f4 <_malloc_r+0xb0>)
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	b923      	cbnz	r3, 800e482 <_malloc_r+0x3e>
 800e478:	4621      	mov	r1, r4
 800e47a:	4630      	mov	r0, r6
 800e47c:	f000 fc86 	bl	800ed8c <_sbrk_r>
 800e480:	6038      	str	r0, [r7, #0]
 800e482:	4629      	mov	r1, r5
 800e484:	4630      	mov	r0, r6
 800e486:	f000 fc81 	bl	800ed8c <_sbrk_r>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	d123      	bne.n	800e4d6 <_malloc_r+0x92>
 800e48e:	230c      	movs	r3, #12
 800e490:	6033      	str	r3, [r6, #0]
 800e492:	4630      	mov	r0, r6
 800e494:	f000 fd44 	bl	800ef20 <__malloc_unlock>
 800e498:	e7e3      	b.n	800e462 <_malloc_r+0x1e>
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	1b5b      	subs	r3, r3, r5
 800e49e:	d417      	bmi.n	800e4d0 <_malloc_r+0x8c>
 800e4a0:	2b0b      	cmp	r3, #11
 800e4a2:	d903      	bls.n	800e4ac <_malloc_r+0x68>
 800e4a4:	6023      	str	r3, [r4, #0]
 800e4a6:	441c      	add	r4, r3
 800e4a8:	6025      	str	r5, [r4, #0]
 800e4aa:	e004      	b.n	800e4b6 <_malloc_r+0x72>
 800e4ac:	6863      	ldr	r3, [r4, #4]
 800e4ae:	42a2      	cmp	r2, r4
 800e4b0:	bf0c      	ite	eq
 800e4b2:	600b      	streq	r3, [r1, #0]
 800e4b4:	6053      	strne	r3, [r2, #4]
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f000 fd32 	bl	800ef20 <__malloc_unlock>
 800e4bc:	f104 000b 	add.w	r0, r4, #11
 800e4c0:	1d23      	adds	r3, r4, #4
 800e4c2:	f020 0007 	bic.w	r0, r0, #7
 800e4c6:	1ac2      	subs	r2, r0, r3
 800e4c8:	d0cc      	beq.n	800e464 <_malloc_r+0x20>
 800e4ca:	1a1b      	subs	r3, r3, r0
 800e4cc:	50a3      	str	r3, [r4, r2]
 800e4ce:	e7c9      	b.n	800e464 <_malloc_r+0x20>
 800e4d0:	4622      	mov	r2, r4
 800e4d2:	6864      	ldr	r4, [r4, #4]
 800e4d4:	e7cc      	b.n	800e470 <_malloc_r+0x2c>
 800e4d6:	1cc4      	adds	r4, r0, #3
 800e4d8:	f024 0403 	bic.w	r4, r4, #3
 800e4dc:	42a0      	cmp	r0, r4
 800e4de:	d0e3      	beq.n	800e4a8 <_malloc_r+0x64>
 800e4e0:	1a21      	subs	r1, r4, r0
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f000 fc52 	bl	800ed8c <_sbrk_r>
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d1dd      	bne.n	800e4a8 <_malloc_r+0x64>
 800e4ec:	e7cf      	b.n	800e48e <_malloc_r+0x4a>
 800e4ee:	bf00      	nop
 800e4f0:	2000365c 	.word	0x2000365c
 800e4f4:	20003660 	.word	0x20003660

0800e4f8 <__ssputs_r>:
 800e4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4fc:	688e      	ldr	r6, [r1, #8]
 800e4fe:	429e      	cmp	r6, r3
 800e500:	4682      	mov	sl, r0
 800e502:	460c      	mov	r4, r1
 800e504:	4690      	mov	r8, r2
 800e506:	461f      	mov	r7, r3
 800e508:	d838      	bhi.n	800e57c <__ssputs_r+0x84>
 800e50a:	898a      	ldrh	r2, [r1, #12]
 800e50c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e510:	d032      	beq.n	800e578 <__ssputs_r+0x80>
 800e512:	6825      	ldr	r5, [r4, #0]
 800e514:	6909      	ldr	r1, [r1, #16]
 800e516:	eba5 0901 	sub.w	r9, r5, r1
 800e51a:	6965      	ldr	r5, [r4, #20]
 800e51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e524:	3301      	adds	r3, #1
 800e526:	444b      	add	r3, r9
 800e528:	106d      	asrs	r5, r5, #1
 800e52a:	429d      	cmp	r5, r3
 800e52c:	bf38      	it	cc
 800e52e:	461d      	movcc	r5, r3
 800e530:	0553      	lsls	r3, r2, #21
 800e532:	d531      	bpl.n	800e598 <__ssputs_r+0xa0>
 800e534:	4629      	mov	r1, r5
 800e536:	f7ff ff85 	bl	800e444 <_malloc_r>
 800e53a:	4606      	mov	r6, r0
 800e53c:	b950      	cbnz	r0, 800e554 <__ssputs_r+0x5c>
 800e53e:	230c      	movs	r3, #12
 800e540:	f8ca 3000 	str.w	r3, [sl]
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e554:	6921      	ldr	r1, [r4, #16]
 800e556:	464a      	mov	r2, r9
 800e558:	f7ff fb82 	bl	800dc60 <memcpy>
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e566:	81a3      	strh	r3, [r4, #12]
 800e568:	6126      	str	r6, [r4, #16]
 800e56a:	6165      	str	r5, [r4, #20]
 800e56c:	444e      	add	r6, r9
 800e56e:	eba5 0509 	sub.w	r5, r5, r9
 800e572:	6026      	str	r6, [r4, #0]
 800e574:	60a5      	str	r5, [r4, #8]
 800e576:	463e      	mov	r6, r7
 800e578:	42be      	cmp	r6, r7
 800e57a:	d900      	bls.n	800e57e <__ssputs_r+0x86>
 800e57c:	463e      	mov	r6, r7
 800e57e:	4632      	mov	r2, r6
 800e580:	6820      	ldr	r0, [r4, #0]
 800e582:	4641      	mov	r1, r8
 800e584:	f000 fcac 	bl	800eee0 <memmove>
 800e588:	68a3      	ldr	r3, [r4, #8]
 800e58a:	6822      	ldr	r2, [r4, #0]
 800e58c:	1b9b      	subs	r3, r3, r6
 800e58e:	4432      	add	r2, r6
 800e590:	60a3      	str	r3, [r4, #8]
 800e592:	6022      	str	r2, [r4, #0]
 800e594:	2000      	movs	r0, #0
 800e596:	e7db      	b.n	800e550 <__ssputs_r+0x58>
 800e598:	462a      	mov	r2, r5
 800e59a:	f000 fcc7 	bl	800ef2c <_realloc_r>
 800e59e:	4606      	mov	r6, r0
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	d1e1      	bne.n	800e568 <__ssputs_r+0x70>
 800e5a4:	6921      	ldr	r1, [r4, #16]
 800e5a6:	4650      	mov	r0, sl
 800e5a8:	f7ff fefc 	bl	800e3a4 <_free_r>
 800e5ac:	e7c7      	b.n	800e53e <__ssputs_r+0x46>
	...

0800e5b0 <_svfiprintf_r>:
 800e5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	4698      	mov	r8, r3
 800e5b6:	898b      	ldrh	r3, [r1, #12]
 800e5b8:	061b      	lsls	r3, r3, #24
 800e5ba:	b09d      	sub	sp, #116	; 0x74
 800e5bc:	4607      	mov	r7, r0
 800e5be:	460d      	mov	r5, r1
 800e5c0:	4614      	mov	r4, r2
 800e5c2:	d50e      	bpl.n	800e5e2 <_svfiprintf_r+0x32>
 800e5c4:	690b      	ldr	r3, [r1, #16]
 800e5c6:	b963      	cbnz	r3, 800e5e2 <_svfiprintf_r+0x32>
 800e5c8:	2140      	movs	r1, #64	; 0x40
 800e5ca:	f7ff ff3b 	bl	800e444 <_malloc_r>
 800e5ce:	6028      	str	r0, [r5, #0]
 800e5d0:	6128      	str	r0, [r5, #16]
 800e5d2:	b920      	cbnz	r0, 800e5de <_svfiprintf_r+0x2e>
 800e5d4:	230c      	movs	r3, #12
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5dc:	e0d1      	b.n	800e782 <_svfiprintf_r+0x1d2>
 800e5de:	2340      	movs	r3, #64	; 0x40
 800e5e0:	616b      	str	r3, [r5, #20]
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e6:	2320      	movs	r3, #32
 800e5e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5f0:	2330      	movs	r3, #48	; 0x30
 800e5f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e79c <_svfiprintf_r+0x1ec>
 800e5f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5fa:	f04f 0901 	mov.w	r9, #1
 800e5fe:	4623      	mov	r3, r4
 800e600:	469a      	mov	sl, r3
 800e602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e606:	b10a      	cbz	r2, 800e60c <_svfiprintf_r+0x5c>
 800e608:	2a25      	cmp	r2, #37	; 0x25
 800e60a:	d1f9      	bne.n	800e600 <_svfiprintf_r+0x50>
 800e60c:	ebba 0b04 	subs.w	fp, sl, r4
 800e610:	d00b      	beq.n	800e62a <_svfiprintf_r+0x7a>
 800e612:	465b      	mov	r3, fp
 800e614:	4622      	mov	r2, r4
 800e616:	4629      	mov	r1, r5
 800e618:	4638      	mov	r0, r7
 800e61a:	f7ff ff6d 	bl	800e4f8 <__ssputs_r>
 800e61e:	3001      	adds	r0, #1
 800e620:	f000 80aa 	beq.w	800e778 <_svfiprintf_r+0x1c8>
 800e624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e626:	445a      	add	r2, fp
 800e628:	9209      	str	r2, [sp, #36]	; 0x24
 800e62a:	f89a 3000 	ldrb.w	r3, [sl]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 80a2 	beq.w	800e778 <_svfiprintf_r+0x1c8>
 800e634:	2300      	movs	r3, #0
 800e636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e63e:	f10a 0a01 	add.w	sl, sl, #1
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	9307      	str	r3, [sp, #28]
 800e646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e64a:	931a      	str	r3, [sp, #104]	; 0x68
 800e64c:	4654      	mov	r4, sl
 800e64e:	2205      	movs	r2, #5
 800e650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e654:	4851      	ldr	r0, [pc, #324]	; (800e79c <_svfiprintf_r+0x1ec>)
 800e656:	f7f1 fdbb 	bl	80001d0 <memchr>
 800e65a:	9a04      	ldr	r2, [sp, #16]
 800e65c:	b9d8      	cbnz	r0, 800e696 <_svfiprintf_r+0xe6>
 800e65e:	06d0      	lsls	r0, r2, #27
 800e660:	bf44      	itt	mi
 800e662:	2320      	movmi	r3, #32
 800e664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e668:	0711      	lsls	r1, r2, #28
 800e66a:	bf44      	itt	mi
 800e66c:	232b      	movmi	r3, #43	; 0x2b
 800e66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e672:	f89a 3000 	ldrb.w	r3, [sl]
 800e676:	2b2a      	cmp	r3, #42	; 0x2a
 800e678:	d015      	beq.n	800e6a6 <_svfiprintf_r+0xf6>
 800e67a:	9a07      	ldr	r2, [sp, #28]
 800e67c:	4654      	mov	r4, sl
 800e67e:	2000      	movs	r0, #0
 800e680:	f04f 0c0a 	mov.w	ip, #10
 800e684:	4621      	mov	r1, r4
 800e686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e68a:	3b30      	subs	r3, #48	; 0x30
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	d94e      	bls.n	800e72e <_svfiprintf_r+0x17e>
 800e690:	b1b0      	cbz	r0, 800e6c0 <_svfiprintf_r+0x110>
 800e692:	9207      	str	r2, [sp, #28]
 800e694:	e014      	b.n	800e6c0 <_svfiprintf_r+0x110>
 800e696:	eba0 0308 	sub.w	r3, r0, r8
 800e69a:	fa09 f303 	lsl.w	r3, r9, r3
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	9304      	str	r3, [sp, #16]
 800e6a2:	46a2      	mov	sl, r4
 800e6a4:	e7d2      	b.n	800e64c <_svfiprintf_r+0x9c>
 800e6a6:	9b03      	ldr	r3, [sp, #12]
 800e6a8:	1d19      	adds	r1, r3, #4
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	9103      	str	r1, [sp, #12]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bfbb      	ittet	lt
 800e6b2:	425b      	neglt	r3, r3
 800e6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800e6b8:	9307      	strge	r3, [sp, #28]
 800e6ba:	9307      	strlt	r3, [sp, #28]
 800e6bc:	bfb8      	it	lt
 800e6be:	9204      	strlt	r2, [sp, #16]
 800e6c0:	7823      	ldrb	r3, [r4, #0]
 800e6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800e6c4:	d10c      	bne.n	800e6e0 <_svfiprintf_r+0x130>
 800e6c6:	7863      	ldrb	r3, [r4, #1]
 800e6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e6ca:	d135      	bne.n	800e738 <_svfiprintf_r+0x188>
 800e6cc:	9b03      	ldr	r3, [sp, #12]
 800e6ce:	1d1a      	adds	r2, r3, #4
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	9203      	str	r2, [sp, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	bfb8      	it	lt
 800e6d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e6dc:	3402      	adds	r4, #2
 800e6de:	9305      	str	r3, [sp, #20]
 800e6e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e7ac <_svfiprintf_r+0x1fc>
 800e6e4:	7821      	ldrb	r1, [r4, #0]
 800e6e6:	2203      	movs	r2, #3
 800e6e8:	4650      	mov	r0, sl
 800e6ea:	f7f1 fd71 	bl	80001d0 <memchr>
 800e6ee:	b140      	cbz	r0, 800e702 <_svfiprintf_r+0x152>
 800e6f0:	2340      	movs	r3, #64	; 0x40
 800e6f2:	eba0 000a 	sub.w	r0, r0, sl
 800e6f6:	fa03 f000 	lsl.w	r0, r3, r0
 800e6fa:	9b04      	ldr	r3, [sp, #16]
 800e6fc:	4303      	orrs	r3, r0
 800e6fe:	3401      	adds	r4, #1
 800e700:	9304      	str	r3, [sp, #16]
 800e702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e706:	4826      	ldr	r0, [pc, #152]	; (800e7a0 <_svfiprintf_r+0x1f0>)
 800e708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e70c:	2206      	movs	r2, #6
 800e70e:	f7f1 fd5f 	bl	80001d0 <memchr>
 800e712:	2800      	cmp	r0, #0
 800e714:	d038      	beq.n	800e788 <_svfiprintf_r+0x1d8>
 800e716:	4b23      	ldr	r3, [pc, #140]	; (800e7a4 <_svfiprintf_r+0x1f4>)
 800e718:	bb1b      	cbnz	r3, 800e762 <_svfiprintf_r+0x1b2>
 800e71a:	9b03      	ldr	r3, [sp, #12]
 800e71c:	3307      	adds	r3, #7
 800e71e:	f023 0307 	bic.w	r3, r3, #7
 800e722:	3308      	adds	r3, #8
 800e724:	9303      	str	r3, [sp, #12]
 800e726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e728:	4433      	add	r3, r6
 800e72a:	9309      	str	r3, [sp, #36]	; 0x24
 800e72c:	e767      	b.n	800e5fe <_svfiprintf_r+0x4e>
 800e72e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e732:	460c      	mov	r4, r1
 800e734:	2001      	movs	r0, #1
 800e736:	e7a5      	b.n	800e684 <_svfiprintf_r+0xd4>
 800e738:	2300      	movs	r3, #0
 800e73a:	3401      	adds	r4, #1
 800e73c:	9305      	str	r3, [sp, #20]
 800e73e:	4619      	mov	r1, r3
 800e740:	f04f 0c0a 	mov.w	ip, #10
 800e744:	4620      	mov	r0, r4
 800e746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e74a:	3a30      	subs	r2, #48	; 0x30
 800e74c:	2a09      	cmp	r2, #9
 800e74e:	d903      	bls.n	800e758 <_svfiprintf_r+0x1a8>
 800e750:	2b00      	cmp	r3, #0
 800e752:	d0c5      	beq.n	800e6e0 <_svfiprintf_r+0x130>
 800e754:	9105      	str	r1, [sp, #20]
 800e756:	e7c3      	b.n	800e6e0 <_svfiprintf_r+0x130>
 800e758:	fb0c 2101 	mla	r1, ip, r1, r2
 800e75c:	4604      	mov	r4, r0
 800e75e:	2301      	movs	r3, #1
 800e760:	e7f0      	b.n	800e744 <_svfiprintf_r+0x194>
 800e762:	ab03      	add	r3, sp, #12
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	462a      	mov	r2, r5
 800e768:	4b0f      	ldr	r3, [pc, #60]	; (800e7a8 <_svfiprintf_r+0x1f8>)
 800e76a:	a904      	add	r1, sp, #16
 800e76c:	4638      	mov	r0, r7
 800e76e:	f3af 8000 	nop.w
 800e772:	1c42      	adds	r2, r0, #1
 800e774:	4606      	mov	r6, r0
 800e776:	d1d6      	bne.n	800e726 <_svfiprintf_r+0x176>
 800e778:	89ab      	ldrh	r3, [r5, #12]
 800e77a:	065b      	lsls	r3, r3, #25
 800e77c:	f53f af2c 	bmi.w	800e5d8 <_svfiprintf_r+0x28>
 800e780:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e782:	b01d      	add	sp, #116	; 0x74
 800e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e788:	ab03      	add	r3, sp, #12
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	462a      	mov	r2, r5
 800e78e:	4b06      	ldr	r3, [pc, #24]	; (800e7a8 <_svfiprintf_r+0x1f8>)
 800e790:	a904      	add	r1, sp, #16
 800e792:	4638      	mov	r0, r7
 800e794:	f000 f9d4 	bl	800eb40 <_printf_i>
 800e798:	e7eb      	b.n	800e772 <_svfiprintf_r+0x1c2>
 800e79a:	bf00      	nop
 800e79c:	080103d0 	.word	0x080103d0
 800e7a0:	080103da 	.word	0x080103da
 800e7a4:	00000000 	.word	0x00000000
 800e7a8:	0800e4f9 	.word	0x0800e4f9
 800e7ac:	080103d6 	.word	0x080103d6

0800e7b0 <__sfputc_r>:
 800e7b0:	6893      	ldr	r3, [r2, #8]
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	b410      	push	{r4}
 800e7b8:	6093      	str	r3, [r2, #8]
 800e7ba:	da08      	bge.n	800e7ce <__sfputc_r+0x1e>
 800e7bc:	6994      	ldr	r4, [r2, #24]
 800e7be:	42a3      	cmp	r3, r4
 800e7c0:	db01      	blt.n	800e7c6 <__sfputc_r+0x16>
 800e7c2:	290a      	cmp	r1, #10
 800e7c4:	d103      	bne.n	800e7ce <__sfputc_r+0x1e>
 800e7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7ca:	f7ff bb0d 	b.w	800dde8 <__swbuf_r>
 800e7ce:	6813      	ldr	r3, [r2, #0]
 800e7d0:	1c58      	adds	r0, r3, #1
 800e7d2:	6010      	str	r0, [r2, #0]
 800e7d4:	7019      	strb	r1, [r3, #0]
 800e7d6:	4608      	mov	r0, r1
 800e7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <__sfputs_r>:
 800e7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e0:	4606      	mov	r6, r0
 800e7e2:	460f      	mov	r7, r1
 800e7e4:	4614      	mov	r4, r2
 800e7e6:	18d5      	adds	r5, r2, r3
 800e7e8:	42ac      	cmp	r4, r5
 800e7ea:	d101      	bne.n	800e7f0 <__sfputs_r+0x12>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	e007      	b.n	800e800 <__sfputs_r+0x22>
 800e7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7f4:	463a      	mov	r2, r7
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	f7ff ffda 	bl	800e7b0 <__sfputc_r>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d1f3      	bne.n	800e7e8 <__sfputs_r+0xa>
 800e800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e804 <_vfiprintf_r>:
 800e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e808:	460d      	mov	r5, r1
 800e80a:	b09d      	sub	sp, #116	; 0x74
 800e80c:	4614      	mov	r4, r2
 800e80e:	4698      	mov	r8, r3
 800e810:	4606      	mov	r6, r0
 800e812:	b118      	cbz	r0, 800e81c <_vfiprintf_r+0x18>
 800e814:	6983      	ldr	r3, [r0, #24]
 800e816:	b90b      	cbnz	r3, 800e81c <_vfiprintf_r+0x18>
 800e818:	f7ff fcc0 	bl	800e19c <__sinit>
 800e81c:	4b89      	ldr	r3, [pc, #548]	; (800ea44 <_vfiprintf_r+0x240>)
 800e81e:	429d      	cmp	r5, r3
 800e820:	d11b      	bne.n	800e85a <_vfiprintf_r+0x56>
 800e822:	6875      	ldr	r5, [r6, #4]
 800e824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e826:	07d9      	lsls	r1, r3, #31
 800e828:	d405      	bmi.n	800e836 <_vfiprintf_r+0x32>
 800e82a:	89ab      	ldrh	r3, [r5, #12]
 800e82c:	059a      	lsls	r2, r3, #22
 800e82e:	d402      	bmi.n	800e836 <_vfiprintf_r+0x32>
 800e830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e832:	f7ff fd51 	bl	800e2d8 <__retarget_lock_acquire_recursive>
 800e836:	89ab      	ldrh	r3, [r5, #12]
 800e838:	071b      	lsls	r3, r3, #28
 800e83a:	d501      	bpl.n	800e840 <_vfiprintf_r+0x3c>
 800e83c:	692b      	ldr	r3, [r5, #16]
 800e83e:	b9eb      	cbnz	r3, 800e87c <_vfiprintf_r+0x78>
 800e840:	4629      	mov	r1, r5
 800e842:	4630      	mov	r0, r6
 800e844:	f7ff fb22 	bl	800de8c <__swsetup_r>
 800e848:	b1c0      	cbz	r0, 800e87c <_vfiprintf_r+0x78>
 800e84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e84c:	07dc      	lsls	r4, r3, #31
 800e84e:	d50e      	bpl.n	800e86e <_vfiprintf_r+0x6a>
 800e850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e854:	b01d      	add	sp, #116	; 0x74
 800e856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85a:	4b7b      	ldr	r3, [pc, #492]	; (800ea48 <_vfiprintf_r+0x244>)
 800e85c:	429d      	cmp	r5, r3
 800e85e:	d101      	bne.n	800e864 <_vfiprintf_r+0x60>
 800e860:	68b5      	ldr	r5, [r6, #8]
 800e862:	e7df      	b.n	800e824 <_vfiprintf_r+0x20>
 800e864:	4b79      	ldr	r3, [pc, #484]	; (800ea4c <_vfiprintf_r+0x248>)
 800e866:	429d      	cmp	r5, r3
 800e868:	bf08      	it	eq
 800e86a:	68f5      	ldreq	r5, [r6, #12]
 800e86c:	e7da      	b.n	800e824 <_vfiprintf_r+0x20>
 800e86e:	89ab      	ldrh	r3, [r5, #12]
 800e870:	0598      	lsls	r0, r3, #22
 800e872:	d4ed      	bmi.n	800e850 <_vfiprintf_r+0x4c>
 800e874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e876:	f7ff fd30 	bl	800e2da <__retarget_lock_release_recursive>
 800e87a:	e7e9      	b.n	800e850 <_vfiprintf_r+0x4c>
 800e87c:	2300      	movs	r3, #0
 800e87e:	9309      	str	r3, [sp, #36]	; 0x24
 800e880:	2320      	movs	r3, #32
 800e882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e886:	f8cd 800c 	str.w	r8, [sp, #12]
 800e88a:	2330      	movs	r3, #48	; 0x30
 800e88c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea50 <_vfiprintf_r+0x24c>
 800e890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e894:	f04f 0901 	mov.w	r9, #1
 800e898:	4623      	mov	r3, r4
 800e89a:	469a      	mov	sl, r3
 800e89c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8a0:	b10a      	cbz	r2, 800e8a6 <_vfiprintf_r+0xa2>
 800e8a2:	2a25      	cmp	r2, #37	; 0x25
 800e8a4:	d1f9      	bne.n	800e89a <_vfiprintf_r+0x96>
 800e8a6:	ebba 0b04 	subs.w	fp, sl, r4
 800e8aa:	d00b      	beq.n	800e8c4 <_vfiprintf_r+0xc0>
 800e8ac:	465b      	mov	r3, fp
 800e8ae:	4622      	mov	r2, r4
 800e8b0:	4629      	mov	r1, r5
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f7ff ff93 	bl	800e7de <__sfputs_r>
 800e8b8:	3001      	adds	r0, #1
 800e8ba:	f000 80aa 	beq.w	800ea12 <_vfiprintf_r+0x20e>
 800e8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8c0:	445a      	add	r2, fp
 800e8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800e8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f000 80a2 	beq.w	800ea12 <_vfiprintf_r+0x20e>
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8d8:	f10a 0a01 	add.w	sl, sl, #1
 800e8dc:	9304      	str	r3, [sp, #16]
 800e8de:	9307      	str	r3, [sp, #28]
 800e8e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8e4:	931a      	str	r3, [sp, #104]	; 0x68
 800e8e6:	4654      	mov	r4, sl
 800e8e8:	2205      	movs	r2, #5
 800e8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ee:	4858      	ldr	r0, [pc, #352]	; (800ea50 <_vfiprintf_r+0x24c>)
 800e8f0:	f7f1 fc6e 	bl	80001d0 <memchr>
 800e8f4:	9a04      	ldr	r2, [sp, #16]
 800e8f6:	b9d8      	cbnz	r0, 800e930 <_vfiprintf_r+0x12c>
 800e8f8:	06d1      	lsls	r1, r2, #27
 800e8fa:	bf44      	itt	mi
 800e8fc:	2320      	movmi	r3, #32
 800e8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e902:	0713      	lsls	r3, r2, #28
 800e904:	bf44      	itt	mi
 800e906:	232b      	movmi	r3, #43	; 0x2b
 800e908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e90c:	f89a 3000 	ldrb.w	r3, [sl]
 800e910:	2b2a      	cmp	r3, #42	; 0x2a
 800e912:	d015      	beq.n	800e940 <_vfiprintf_r+0x13c>
 800e914:	9a07      	ldr	r2, [sp, #28]
 800e916:	4654      	mov	r4, sl
 800e918:	2000      	movs	r0, #0
 800e91a:	f04f 0c0a 	mov.w	ip, #10
 800e91e:	4621      	mov	r1, r4
 800e920:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e924:	3b30      	subs	r3, #48	; 0x30
 800e926:	2b09      	cmp	r3, #9
 800e928:	d94e      	bls.n	800e9c8 <_vfiprintf_r+0x1c4>
 800e92a:	b1b0      	cbz	r0, 800e95a <_vfiprintf_r+0x156>
 800e92c:	9207      	str	r2, [sp, #28]
 800e92e:	e014      	b.n	800e95a <_vfiprintf_r+0x156>
 800e930:	eba0 0308 	sub.w	r3, r0, r8
 800e934:	fa09 f303 	lsl.w	r3, r9, r3
 800e938:	4313      	orrs	r3, r2
 800e93a:	9304      	str	r3, [sp, #16]
 800e93c:	46a2      	mov	sl, r4
 800e93e:	e7d2      	b.n	800e8e6 <_vfiprintf_r+0xe2>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	1d19      	adds	r1, r3, #4
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	9103      	str	r1, [sp, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	bfbb      	ittet	lt
 800e94c:	425b      	neglt	r3, r3
 800e94e:	f042 0202 	orrlt.w	r2, r2, #2
 800e952:	9307      	strge	r3, [sp, #28]
 800e954:	9307      	strlt	r3, [sp, #28]
 800e956:	bfb8      	it	lt
 800e958:	9204      	strlt	r2, [sp, #16]
 800e95a:	7823      	ldrb	r3, [r4, #0]
 800e95c:	2b2e      	cmp	r3, #46	; 0x2e
 800e95e:	d10c      	bne.n	800e97a <_vfiprintf_r+0x176>
 800e960:	7863      	ldrb	r3, [r4, #1]
 800e962:	2b2a      	cmp	r3, #42	; 0x2a
 800e964:	d135      	bne.n	800e9d2 <_vfiprintf_r+0x1ce>
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	1d1a      	adds	r2, r3, #4
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	9203      	str	r2, [sp, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	bfb8      	it	lt
 800e972:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e976:	3402      	adds	r4, #2
 800e978:	9305      	str	r3, [sp, #20]
 800e97a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea60 <_vfiprintf_r+0x25c>
 800e97e:	7821      	ldrb	r1, [r4, #0]
 800e980:	2203      	movs	r2, #3
 800e982:	4650      	mov	r0, sl
 800e984:	f7f1 fc24 	bl	80001d0 <memchr>
 800e988:	b140      	cbz	r0, 800e99c <_vfiprintf_r+0x198>
 800e98a:	2340      	movs	r3, #64	; 0x40
 800e98c:	eba0 000a 	sub.w	r0, r0, sl
 800e990:	fa03 f000 	lsl.w	r0, r3, r0
 800e994:	9b04      	ldr	r3, [sp, #16]
 800e996:	4303      	orrs	r3, r0
 800e998:	3401      	adds	r4, #1
 800e99a:	9304      	str	r3, [sp, #16]
 800e99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a0:	482c      	ldr	r0, [pc, #176]	; (800ea54 <_vfiprintf_r+0x250>)
 800e9a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9a6:	2206      	movs	r2, #6
 800e9a8:	f7f1 fc12 	bl	80001d0 <memchr>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d03f      	beq.n	800ea30 <_vfiprintf_r+0x22c>
 800e9b0:	4b29      	ldr	r3, [pc, #164]	; (800ea58 <_vfiprintf_r+0x254>)
 800e9b2:	bb1b      	cbnz	r3, 800e9fc <_vfiprintf_r+0x1f8>
 800e9b4:	9b03      	ldr	r3, [sp, #12]
 800e9b6:	3307      	adds	r3, #7
 800e9b8:	f023 0307 	bic.w	r3, r3, #7
 800e9bc:	3308      	adds	r3, #8
 800e9be:	9303      	str	r3, [sp, #12]
 800e9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c2:	443b      	add	r3, r7
 800e9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e9c6:	e767      	b.n	800e898 <_vfiprintf_r+0x94>
 800e9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9cc:	460c      	mov	r4, r1
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	e7a5      	b.n	800e91e <_vfiprintf_r+0x11a>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	3401      	adds	r4, #1
 800e9d6:	9305      	str	r3, [sp, #20]
 800e9d8:	4619      	mov	r1, r3
 800e9da:	f04f 0c0a 	mov.w	ip, #10
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9e4:	3a30      	subs	r2, #48	; 0x30
 800e9e6:	2a09      	cmp	r2, #9
 800e9e8:	d903      	bls.n	800e9f2 <_vfiprintf_r+0x1ee>
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d0c5      	beq.n	800e97a <_vfiprintf_r+0x176>
 800e9ee:	9105      	str	r1, [sp, #20]
 800e9f0:	e7c3      	b.n	800e97a <_vfiprintf_r+0x176>
 800e9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e7f0      	b.n	800e9de <_vfiprintf_r+0x1da>
 800e9fc:	ab03      	add	r3, sp, #12
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	462a      	mov	r2, r5
 800ea02:	4b16      	ldr	r3, [pc, #88]	; (800ea5c <_vfiprintf_r+0x258>)
 800ea04:	a904      	add	r1, sp, #16
 800ea06:	4630      	mov	r0, r6
 800ea08:	f3af 8000 	nop.w
 800ea0c:	4607      	mov	r7, r0
 800ea0e:	1c78      	adds	r0, r7, #1
 800ea10:	d1d6      	bne.n	800e9c0 <_vfiprintf_r+0x1bc>
 800ea12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea14:	07d9      	lsls	r1, r3, #31
 800ea16:	d405      	bmi.n	800ea24 <_vfiprintf_r+0x220>
 800ea18:	89ab      	ldrh	r3, [r5, #12]
 800ea1a:	059a      	lsls	r2, r3, #22
 800ea1c:	d402      	bmi.n	800ea24 <_vfiprintf_r+0x220>
 800ea1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea20:	f7ff fc5b 	bl	800e2da <__retarget_lock_release_recursive>
 800ea24:	89ab      	ldrh	r3, [r5, #12]
 800ea26:	065b      	lsls	r3, r3, #25
 800ea28:	f53f af12 	bmi.w	800e850 <_vfiprintf_r+0x4c>
 800ea2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea2e:	e711      	b.n	800e854 <_vfiprintf_r+0x50>
 800ea30:	ab03      	add	r3, sp, #12
 800ea32:	9300      	str	r3, [sp, #0]
 800ea34:	462a      	mov	r2, r5
 800ea36:	4b09      	ldr	r3, [pc, #36]	; (800ea5c <_vfiprintf_r+0x258>)
 800ea38:	a904      	add	r1, sp, #16
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f000 f880 	bl	800eb40 <_printf_i>
 800ea40:	e7e4      	b.n	800ea0c <_vfiprintf_r+0x208>
 800ea42:	bf00      	nop
 800ea44:	08010390 	.word	0x08010390
 800ea48:	080103b0 	.word	0x080103b0
 800ea4c:	08010370 	.word	0x08010370
 800ea50:	080103d0 	.word	0x080103d0
 800ea54:	080103da 	.word	0x080103da
 800ea58:	00000000 	.word	0x00000000
 800ea5c:	0800e7df 	.word	0x0800e7df
 800ea60:	080103d6 	.word	0x080103d6

0800ea64 <_printf_common>:
 800ea64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea68:	4616      	mov	r6, r2
 800ea6a:	4699      	mov	r9, r3
 800ea6c:	688a      	ldr	r2, [r1, #8]
 800ea6e:	690b      	ldr	r3, [r1, #16]
 800ea70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea74:	4293      	cmp	r3, r2
 800ea76:	bfb8      	it	lt
 800ea78:	4613      	movlt	r3, r2
 800ea7a:	6033      	str	r3, [r6, #0]
 800ea7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea80:	4607      	mov	r7, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	b10a      	cbz	r2, 800ea8a <_printf_common+0x26>
 800ea86:	3301      	adds	r3, #1
 800ea88:	6033      	str	r3, [r6, #0]
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	0699      	lsls	r1, r3, #26
 800ea8e:	bf42      	ittt	mi
 800ea90:	6833      	ldrmi	r3, [r6, #0]
 800ea92:	3302      	addmi	r3, #2
 800ea94:	6033      	strmi	r3, [r6, #0]
 800ea96:	6825      	ldr	r5, [r4, #0]
 800ea98:	f015 0506 	ands.w	r5, r5, #6
 800ea9c:	d106      	bne.n	800eaac <_printf_common+0x48>
 800ea9e:	f104 0a19 	add.w	sl, r4, #25
 800eaa2:	68e3      	ldr	r3, [r4, #12]
 800eaa4:	6832      	ldr	r2, [r6, #0]
 800eaa6:	1a9b      	subs	r3, r3, r2
 800eaa8:	42ab      	cmp	r3, r5
 800eaaa:	dc26      	bgt.n	800eafa <_printf_common+0x96>
 800eaac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eab0:	1e13      	subs	r3, r2, #0
 800eab2:	6822      	ldr	r2, [r4, #0]
 800eab4:	bf18      	it	ne
 800eab6:	2301      	movne	r3, #1
 800eab8:	0692      	lsls	r2, r2, #26
 800eaba:	d42b      	bmi.n	800eb14 <_printf_common+0xb0>
 800eabc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eac0:	4649      	mov	r1, r9
 800eac2:	4638      	mov	r0, r7
 800eac4:	47c0      	blx	r8
 800eac6:	3001      	adds	r0, #1
 800eac8:	d01e      	beq.n	800eb08 <_printf_common+0xa4>
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	68e5      	ldr	r5, [r4, #12]
 800eace:	6832      	ldr	r2, [r6, #0]
 800ead0:	f003 0306 	and.w	r3, r3, #6
 800ead4:	2b04      	cmp	r3, #4
 800ead6:	bf08      	it	eq
 800ead8:	1aad      	subeq	r5, r5, r2
 800eada:	68a3      	ldr	r3, [r4, #8]
 800eadc:	6922      	ldr	r2, [r4, #16]
 800eade:	bf0c      	ite	eq
 800eae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eae4:	2500      	movne	r5, #0
 800eae6:	4293      	cmp	r3, r2
 800eae8:	bfc4      	itt	gt
 800eaea:	1a9b      	subgt	r3, r3, r2
 800eaec:	18ed      	addgt	r5, r5, r3
 800eaee:	2600      	movs	r6, #0
 800eaf0:	341a      	adds	r4, #26
 800eaf2:	42b5      	cmp	r5, r6
 800eaf4:	d11a      	bne.n	800eb2c <_printf_common+0xc8>
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	e008      	b.n	800eb0c <_printf_common+0xa8>
 800eafa:	2301      	movs	r3, #1
 800eafc:	4652      	mov	r2, sl
 800eafe:	4649      	mov	r1, r9
 800eb00:	4638      	mov	r0, r7
 800eb02:	47c0      	blx	r8
 800eb04:	3001      	adds	r0, #1
 800eb06:	d103      	bne.n	800eb10 <_printf_common+0xac>
 800eb08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb10:	3501      	adds	r5, #1
 800eb12:	e7c6      	b.n	800eaa2 <_printf_common+0x3e>
 800eb14:	18e1      	adds	r1, r4, r3
 800eb16:	1c5a      	adds	r2, r3, #1
 800eb18:	2030      	movs	r0, #48	; 0x30
 800eb1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb1e:	4422      	add	r2, r4
 800eb20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb28:	3302      	adds	r3, #2
 800eb2a:	e7c7      	b.n	800eabc <_printf_common+0x58>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	4622      	mov	r2, r4
 800eb30:	4649      	mov	r1, r9
 800eb32:	4638      	mov	r0, r7
 800eb34:	47c0      	blx	r8
 800eb36:	3001      	adds	r0, #1
 800eb38:	d0e6      	beq.n	800eb08 <_printf_common+0xa4>
 800eb3a:	3601      	adds	r6, #1
 800eb3c:	e7d9      	b.n	800eaf2 <_printf_common+0x8e>
	...

0800eb40 <_printf_i>:
 800eb40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb44:	460c      	mov	r4, r1
 800eb46:	4691      	mov	r9, r2
 800eb48:	7e27      	ldrb	r7, [r4, #24]
 800eb4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb4c:	2f78      	cmp	r7, #120	; 0x78
 800eb4e:	4680      	mov	r8, r0
 800eb50:	469a      	mov	sl, r3
 800eb52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb56:	d807      	bhi.n	800eb68 <_printf_i+0x28>
 800eb58:	2f62      	cmp	r7, #98	; 0x62
 800eb5a:	d80a      	bhi.n	800eb72 <_printf_i+0x32>
 800eb5c:	2f00      	cmp	r7, #0
 800eb5e:	f000 80d8 	beq.w	800ed12 <_printf_i+0x1d2>
 800eb62:	2f58      	cmp	r7, #88	; 0x58
 800eb64:	f000 80a3 	beq.w	800ecae <_printf_i+0x16e>
 800eb68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eb6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb70:	e03a      	b.n	800ebe8 <_printf_i+0xa8>
 800eb72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb76:	2b15      	cmp	r3, #21
 800eb78:	d8f6      	bhi.n	800eb68 <_printf_i+0x28>
 800eb7a:	a001      	add	r0, pc, #4	; (adr r0, 800eb80 <_printf_i+0x40>)
 800eb7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eb80:	0800ebd9 	.word	0x0800ebd9
 800eb84:	0800ebed 	.word	0x0800ebed
 800eb88:	0800eb69 	.word	0x0800eb69
 800eb8c:	0800eb69 	.word	0x0800eb69
 800eb90:	0800eb69 	.word	0x0800eb69
 800eb94:	0800eb69 	.word	0x0800eb69
 800eb98:	0800ebed 	.word	0x0800ebed
 800eb9c:	0800eb69 	.word	0x0800eb69
 800eba0:	0800eb69 	.word	0x0800eb69
 800eba4:	0800eb69 	.word	0x0800eb69
 800eba8:	0800eb69 	.word	0x0800eb69
 800ebac:	0800ecf9 	.word	0x0800ecf9
 800ebb0:	0800ec1d 	.word	0x0800ec1d
 800ebb4:	0800ecdb 	.word	0x0800ecdb
 800ebb8:	0800eb69 	.word	0x0800eb69
 800ebbc:	0800eb69 	.word	0x0800eb69
 800ebc0:	0800ed1b 	.word	0x0800ed1b
 800ebc4:	0800eb69 	.word	0x0800eb69
 800ebc8:	0800ec1d 	.word	0x0800ec1d
 800ebcc:	0800eb69 	.word	0x0800eb69
 800ebd0:	0800eb69 	.word	0x0800eb69
 800ebd4:	0800ece3 	.word	0x0800ece3
 800ebd8:	680b      	ldr	r3, [r1, #0]
 800ebda:	1d1a      	adds	r2, r3, #4
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	600a      	str	r2, [r1, #0]
 800ebe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ebe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebe8:	2301      	movs	r3, #1
 800ebea:	e0a3      	b.n	800ed34 <_printf_i+0x1f4>
 800ebec:	6825      	ldr	r5, [r4, #0]
 800ebee:	6808      	ldr	r0, [r1, #0]
 800ebf0:	062e      	lsls	r6, r5, #24
 800ebf2:	f100 0304 	add.w	r3, r0, #4
 800ebf6:	d50a      	bpl.n	800ec0e <_printf_i+0xce>
 800ebf8:	6805      	ldr	r5, [r0, #0]
 800ebfa:	600b      	str	r3, [r1, #0]
 800ebfc:	2d00      	cmp	r5, #0
 800ebfe:	da03      	bge.n	800ec08 <_printf_i+0xc8>
 800ec00:	232d      	movs	r3, #45	; 0x2d
 800ec02:	426d      	negs	r5, r5
 800ec04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec08:	485e      	ldr	r0, [pc, #376]	; (800ed84 <_printf_i+0x244>)
 800ec0a:	230a      	movs	r3, #10
 800ec0c:	e019      	b.n	800ec42 <_printf_i+0x102>
 800ec0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ec12:	6805      	ldr	r5, [r0, #0]
 800ec14:	600b      	str	r3, [r1, #0]
 800ec16:	bf18      	it	ne
 800ec18:	b22d      	sxthne	r5, r5
 800ec1a:	e7ef      	b.n	800ebfc <_printf_i+0xbc>
 800ec1c:	680b      	ldr	r3, [r1, #0]
 800ec1e:	6825      	ldr	r5, [r4, #0]
 800ec20:	1d18      	adds	r0, r3, #4
 800ec22:	6008      	str	r0, [r1, #0]
 800ec24:	0628      	lsls	r0, r5, #24
 800ec26:	d501      	bpl.n	800ec2c <_printf_i+0xec>
 800ec28:	681d      	ldr	r5, [r3, #0]
 800ec2a:	e002      	b.n	800ec32 <_printf_i+0xf2>
 800ec2c:	0669      	lsls	r1, r5, #25
 800ec2e:	d5fb      	bpl.n	800ec28 <_printf_i+0xe8>
 800ec30:	881d      	ldrh	r5, [r3, #0]
 800ec32:	4854      	ldr	r0, [pc, #336]	; (800ed84 <_printf_i+0x244>)
 800ec34:	2f6f      	cmp	r7, #111	; 0x6f
 800ec36:	bf0c      	ite	eq
 800ec38:	2308      	moveq	r3, #8
 800ec3a:	230a      	movne	r3, #10
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec42:	6866      	ldr	r6, [r4, #4]
 800ec44:	60a6      	str	r6, [r4, #8]
 800ec46:	2e00      	cmp	r6, #0
 800ec48:	bfa2      	ittt	ge
 800ec4a:	6821      	ldrge	r1, [r4, #0]
 800ec4c:	f021 0104 	bicge.w	r1, r1, #4
 800ec50:	6021      	strge	r1, [r4, #0]
 800ec52:	b90d      	cbnz	r5, 800ec58 <_printf_i+0x118>
 800ec54:	2e00      	cmp	r6, #0
 800ec56:	d04d      	beq.n	800ecf4 <_printf_i+0x1b4>
 800ec58:	4616      	mov	r6, r2
 800ec5a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec5e:	fb03 5711 	mls	r7, r3, r1, r5
 800ec62:	5dc7      	ldrb	r7, [r0, r7]
 800ec64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec68:	462f      	mov	r7, r5
 800ec6a:	42bb      	cmp	r3, r7
 800ec6c:	460d      	mov	r5, r1
 800ec6e:	d9f4      	bls.n	800ec5a <_printf_i+0x11a>
 800ec70:	2b08      	cmp	r3, #8
 800ec72:	d10b      	bne.n	800ec8c <_printf_i+0x14c>
 800ec74:	6823      	ldr	r3, [r4, #0]
 800ec76:	07df      	lsls	r7, r3, #31
 800ec78:	d508      	bpl.n	800ec8c <_printf_i+0x14c>
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	6861      	ldr	r1, [r4, #4]
 800ec7e:	4299      	cmp	r1, r3
 800ec80:	bfde      	ittt	le
 800ec82:	2330      	movle	r3, #48	; 0x30
 800ec84:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec88:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ec8c:	1b92      	subs	r2, r2, r6
 800ec8e:	6122      	str	r2, [r4, #16]
 800ec90:	f8cd a000 	str.w	sl, [sp]
 800ec94:	464b      	mov	r3, r9
 800ec96:	aa03      	add	r2, sp, #12
 800ec98:	4621      	mov	r1, r4
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	f7ff fee2 	bl	800ea64 <_printf_common>
 800eca0:	3001      	adds	r0, #1
 800eca2:	d14c      	bne.n	800ed3e <_printf_i+0x1fe>
 800eca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eca8:	b004      	add	sp, #16
 800ecaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecae:	4835      	ldr	r0, [pc, #212]	; (800ed84 <_printf_i+0x244>)
 800ecb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	680e      	ldr	r6, [r1, #0]
 800ecb8:	061f      	lsls	r7, r3, #24
 800ecba:	f856 5b04 	ldr.w	r5, [r6], #4
 800ecbe:	600e      	str	r6, [r1, #0]
 800ecc0:	d514      	bpl.n	800ecec <_printf_i+0x1ac>
 800ecc2:	07d9      	lsls	r1, r3, #31
 800ecc4:	bf44      	itt	mi
 800ecc6:	f043 0320 	orrmi.w	r3, r3, #32
 800ecca:	6023      	strmi	r3, [r4, #0]
 800eccc:	b91d      	cbnz	r5, 800ecd6 <_printf_i+0x196>
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	f023 0320 	bic.w	r3, r3, #32
 800ecd4:	6023      	str	r3, [r4, #0]
 800ecd6:	2310      	movs	r3, #16
 800ecd8:	e7b0      	b.n	800ec3c <_printf_i+0xfc>
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	f043 0320 	orr.w	r3, r3, #32
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	2378      	movs	r3, #120	; 0x78
 800ece4:	4828      	ldr	r0, [pc, #160]	; (800ed88 <_printf_i+0x248>)
 800ece6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecea:	e7e3      	b.n	800ecb4 <_printf_i+0x174>
 800ecec:	065e      	lsls	r6, r3, #25
 800ecee:	bf48      	it	mi
 800ecf0:	b2ad      	uxthmi	r5, r5
 800ecf2:	e7e6      	b.n	800ecc2 <_printf_i+0x182>
 800ecf4:	4616      	mov	r6, r2
 800ecf6:	e7bb      	b.n	800ec70 <_printf_i+0x130>
 800ecf8:	680b      	ldr	r3, [r1, #0]
 800ecfa:	6826      	ldr	r6, [r4, #0]
 800ecfc:	6960      	ldr	r0, [r4, #20]
 800ecfe:	1d1d      	adds	r5, r3, #4
 800ed00:	600d      	str	r5, [r1, #0]
 800ed02:	0635      	lsls	r5, r6, #24
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	d501      	bpl.n	800ed0c <_printf_i+0x1cc>
 800ed08:	6018      	str	r0, [r3, #0]
 800ed0a:	e002      	b.n	800ed12 <_printf_i+0x1d2>
 800ed0c:	0671      	lsls	r1, r6, #25
 800ed0e:	d5fb      	bpl.n	800ed08 <_printf_i+0x1c8>
 800ed10:	8018      	strh	r0, [r3, #0]
 800ed12:	2300      	movs	r3, #0
 800ed14:	6123      	str	r3, [r4, #16]
 800ed16:	4616      	mov	r6, r2
 800ed18:	e7ba      	b.n	800ec90 <_printf_i+0x150>
 800ed1a:	680b      	ldr	r3, [r1, #0]
 800ed1c:	1d1a      	adds	r2, r3, #4
 800ed1e:	600a      	str	r2, [r1, #0]
 800ed20:	681e      	ldr	r6, [r3, #0]
 800ed22:	6862      	ldr	r2, [r4, #4]
 800ed24:	2100      	movs	r1, #0
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7f1 fa52 	bl	80001d0 <memchr>
 800ed2c:	b108      	cbz	r0, 800ed32 <_printf_i+0x1f2>
 800ed2e:	1b80      	subs	r0, r0, r6
 800ed30:	6060      	str	r0, [r4, #4]
 800ed32:	6863      	ldr	r3, [r4, #4]
 800ed34:	6123      	str	r3, [r4, #16]
 800ed36:	2300      	movs	r3, #0
 800ed38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed3c:	e7a8      	b.n	800ec90 <_printf_i+0x150>
 800ed3e:	6923      	ldr	r3, [r4, #16]
 800ed40:	4632      	mov	r2, r6
 800ed42:	4649      	mov	r1, r9
 800ed44:	4640      	mov	r0, r8
 800ed46:	47d0      	blx	sl
 800ed48:	3001      	adds	r0, #1
 800ed4a:	d0ab      	beq.n	800eca4 <_printf_i+0x164>
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	079b      	lsls	r3, r3, #30
 800ed50:	d413      	bmi.n	800ed7a <_printf_i+0x23a>
 800ed52:	68e0      	ldr	r0, [r4, #12]
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	4298      	cmp	r0, r3
 800ed58:	bfb8      	it	lt
 800ed5a:	4618      	movlt	r0, r3
 800ed5c:	e7a4      	b.n	800eca8 <_printf_i+0x168>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	4632      	mov	r2, r6
 800ed62:	4649      	mov	r1, r9
 800ed64:	4640      	mov	r0, r8
 800ed66:	47d0      	blx	sl
 800ed68:	3001      	adds	r0, #1
 800ed6a:	d09b      	beq.n	800eca4 <_printf_i+0x164>
 800ed6c:	3501      	adds	r5, #1
 800ed6e:	68e3      	ldr	r3, [r4, #12]
 800ed70:	9903      	ldr	r1, [sp, #12]
 800ed72:	1a5b      	subs	r3, r3, r1
 800ed74:	42ab      	cmp	r3, r5
 800ed76:	dcf2      	bgt.n	800ed5e <_printf_i+0x21e>
 800ed78:	e7eb      	b.n	800ed52 <_printf_i+0x212>
 800ed7a:	2500      	movs	r5, #0
 800ed7c:	f104 0619 	add.w	r6, r4, #25
 800ed80:	e7f5      	b.n	800ed6e <_printf_i+0x22e>
 800ed82:	bf00      	nop
 800ed84:	080103e1 	.word	0x080103e1
 800ed88:	080103f2 	.word	0x080103f2

0800ed8c <_sbrk_r>:
 800ed8c:	b538      	push	{r3, r4, r5, lr}
 800ed8e:	4d06      	ldr	r5, [pc, #24]	; (800eda8 <_sbrk_r+0x1c>)
 800ed90:	2300      	movs	r3, #0
 800ed92:	4604      	mov	r4, r0
 800ed94:	4608      	mov	r0, r1
 800ed96:	602b      	str	r3, [r5, #0]
 800ed98:	f7f4 fef0 	bl	8003b7c <_sbrk>
 800ed9c:	1c43      	adds	r3, r0, #1
 800ed9e:	d102      	bne.n	800eda6 <_sbrk_r+0x1a>
 800eda0:	682b      	ldr	r3, [r5, #0]
 800eda2:	b103      	cbz	r3, 800eda6 <_sbrk_r+0x1a>
 800eda4:	6023      	str	r3, [r4, #0]
 800eda6:	bd38      	pop	{r3, r4, r5, pc}
 800eda8:	2000ff04 	.word	0x2000ff04

0800edac <__sread>:
 800edac:	b510      	push	{r4, lr}
 800edae:	460c      	mov	r4, r1
 800edb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb4:	f000 f8e0 	bl	800ef78 <_read_r>
 800edb8:	2800      	cmp	r0, #0
 800edba:	bfab      	itete	ge
 800edbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edbe:	89a3      	ldrhlt	r3, [r4, #12]
 800edc0:	181b      	addge	r3, r3, r0
 800edc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edc6:	bfac      	ite	ge
 800edc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800edca:	81a3      	strhlt	r3, [r4, #12]
 800edcc:	bd10      	pop	{r4, pc}

0800edce <__swrite>:
 800edce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd2:	461f      	mov	r7, r3
 800edd4:	898b      	ldrh	r3, [r1, #12]
 800edd6:	05db      	lsls	r3, r3, #23
 800edd8:	4605      	mov	r5, r0
 800edda:	460c      	mov	r4, r1
 800eddc:	4616      	mov	r6, r2
 800edde:	d505      	bpl.n	800edec <__swrite+0x1e>
 800ede0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ede4:	2302      	movs	r3, #2
 800ede6:	2200      	movs	r2, #0
 800ede8:	f000 f868 	bl	800eebc <_lseek_r>
 800edec:	89a3      	ldrh	r3, [r4, #12]
 800edee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edf6:	81a3      	strh	r3, [r4, #12]
 800edf8:	4632      	mov	r2, r6
 800edfa:	463b      	mov	r3, r7
 800edfc:	4628      	mov	r0, r5
 800edfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee02:	f000 b817 	b.w	800ee34 <_write_r>

0800ee06 <__sseek>:
 800ee06:	b510      	push	{r4, lr}
 800ee08:	460c      	mov	r4, r1
 800ee0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee0e:	f000 f855 	bl	800eebc <_lseek_r>
 800ee12:	1c43      	adds	r3, r0, #1
 800ee14:	89a3      	ldrh	r3, [r4, #12]
 800ee16:	bf15      	itete	ne
 800ee18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee22:	81a3      	strheq	r3, [r4, #12]
 800ee24:	bf18      	it	ne
 800ee26:	81a3      	strhne	r3, [r4, #12]
 800ee28:	bd10      	pop	{r4, pc}

0800ee2a <__sclose>:
 800ee2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee2e:	f000 b813 	b.w	800ee58 <_close_r>
	...

0800ee34 <_write_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	4d07      	ldr	r5, [pc, #28]	; (800ee54 <_write_r+0x20>)
 800ee38:	4604      	mov	r4, r0
 800ee3a:	4608      	mov	r0, r1
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	2200      	movs	r2, #0
 800ee40:	602a      	str	r2, [r5, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	f7f4 fe49 	bl	8003ada <_write>
 800ee48:	1c43      	adds	r3, r0, #1
 800ee4a:	d102      	bne.n	800ee52 <_write_r+0x1e>
 800ee4c:	682b      	ldr	r3, [r5, #0]
 800ee4e:	b103      	cbz	r3, 800ee52 <_write_r+0x1e>
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	bd38      	pop	{r3, r4, r5, pc}
 800ee54:	2000ff04 	.word	0x2000ff04

0800ee58 <_close_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	4d06      	ldr	r5, [pc, #24]	; (800ee74 <_close_r+0x1c>)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	4608      	mov	r0, r1
 800ee62:	602b      	str	r3, [r5, #0]
 800ee64:	f7f4 fe55 	bl	8003b12 <_close>
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	d102      	bne.n	800ee72 <_close_r+0x1a>
 800ee6c:	682b      	ldr	r3, [r5, #0]
 800ee6e:	b103      	cbz	r3, 800ee72 <_close_r+0x1a>
 800ee70:	6023      	str	r3, [r4, #0]
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	2000ff04 	.word	0x2000ff04

0800ee78 <_fstat_r>:
 800ee78:	b538      	push	{r3, r4, r5, lr}
 800ee7a:	4d07      	ldr	r5, [pc, #28]	; (800ee98 <_fstat_r+0x20>)
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	4604      	mov	r4, r0
 800ee80:	4608      	mov	r0, r1
 800ee82:	4611      	mov	r1, r2
 800ee84:	602b      	str	r3, [r5, #0]
 800ee86:	f7f4 fe50 	bl	8003b2a <_fstat>
 800ee8a:	1c43      	adds	r3, r0, #1
 800ee8c:	d102      	bne.n	800ee94 <_fstat_r+0x1c>
 800ee8e:	682b      	ldr	r3, [r5, #0]
 800ee90:	b103      	cbz	r3, 800ee94 <_fstat_r+0x1c>
 800ee92:	6023      	str	r3, [r4, #0]
 800ee94:	bd38      	pop	{r3, r4, r5, pc}
 800ee96:	bf00      	nop
 800ee98:	2000ff04 	.word	0x2000ff04

0800ee9c <_isatty_r>:
 800ee9c:	b538      	push	{r3, r4, r5, lr}
 800ee9e:	4d06      	ldr	r5, [pc, #24]	; (800eeb8 <_isatty_r+0x1c>)
 800eea0:	2300      	movs	r3, #0
 800eea2:	4604      	mov	r4, r0
 800eea4:	4608      	mov	r0, r1
 800eea6:	602b      	str	r3, [r5, #0]
 800eea8:	f7f4 fe4f 	bl	8003b4a <_isatty>
 800eeac:	1c43      	adds	r3, r0, #1
 800eeae:	d102      	bne.n	800eeb6 <_isatty_r+0x1a>
 800eeb0:	682b      	ldr	r3, [r5, #0]
 800eeb2:	b103      	cbz	r3, 800eeb6 <_isatty_r+0x1a>
 800eeb4:	6023      	str	r3, [r4, #0]
 800eeb6:	bd38      	pop	{r3, r4, r5, pc}
 800eeb8:	2000ff04 	.word	0x2000ff04

0800eebc <_lseek_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4d07      	ldr	r5, [pc, #28]	; (800eedc <_lseek_r+0x20>)
 800eec0:	4604      	mov	r4, r0
 800eec2:	4608      	mov	r0, r1
 800eec4:	4611      	mov	r1, r2
 800eec6:	2200      	movs	r2, #0
 800eec8:	602a      	str	r2, [r5, #0]
 800eeca:	461a      	mov	r2, r3
 800eecc:	f7f4 fe48 	bl	8003b60 <_lseek>
 800eed0:	1c43      	adds	r3, r0, #1
 800eed2:	d102      	bne.n	800eeda <_lseek_r+0x1e>
 800eed4:	682b      	ldr	r3, [r5, #0]
 800eed6:	b103      	cbz	r3, 800eeda <_lseek_r+0x1e>
 800eed8:	6023      	str	r3, [r4, #0]
 800eeda:	bd38      	pop	{r3, r4, r5, pc}
 800eedc:	2000ff04 	.word	0x2000ff04

0800eee0 <memmove>:
 800eee0:	4288      	cmp	r0, r1
 800eee2:	b510      	push	{r4, lr}
 800eee4:	eb01 0402 	add.w	r4, r1, r2
 800eee8:	d902      	bls.n	800eef0 <memmove+0x10>
 800eeea:	4284      	cmp	r4, r0
 800eeec:	4623      	mov	r3, r4
 800eeee:	d807      	bhi.n	800ef00 <memmove+0x20>
 800eef0:	1e43      	subs	r3, r0, #1
 800eef2:	42a1      	cmp	r1, r4
 800eef4:	d008      	beq.n	800ef08 <memmove+0x28>
 800eef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eefa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eefe:	e7f8      	b.n	800eef2 <memmove+0x12>
 800ef00:	4402      	add	r2, r0
 800ef02:	4601      	mov	r1, r0
 800ef04:	428a      	cmp	r2, r1
 800ef06:	d100      	bne.n	800ef0a <memmove+0x2a>
 800ef08:	bd10      	pop	{r4, pc}
 800ef0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef12:	e7f7      	b.n	800ef04 <memmove+0x24>

0800ef14 <__malloc_lock>:
 800ef14:	4801      	ldr	r0, [pc, #4]	; (800ef1c <__malloc_lock+0x8>)
 800ef16:	f7ff b9df 	b.w	800e2d8 <__retarget_lock_acquire_recursive>
 800ef1a:	bf00      	nop
 800ef1c:	2000fefc 	.word	0x2000fefc

0800ef20 <__malloc_unlock>:
 800ef20:	4801      	ldr	r0, [pc, #4]	; (800ef28 <__malloc_unlock+0x8>)
 800ef22:	f7ff b9da 	b.w	800e2da <__retarget_lock_release_recursive>
 800ef26:	bf00      	nop
 800ef28:	2000fefc 	.word	0x2000fefc

0800ef2c <_realloc_r>:
 800ef2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef2e:	4607      	mov	r7, r0
 800ef30:	4614      	mov	r4, r2
 800ef32:	460e      	mov	r6, r1
 800ef34:	b921      	cbnz	r1, 800ef40 <_realloc_r+0x14>
 800ef36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ef3a:	4611      	mov	r1, r2
 800ef3c:	f7ff ba82 	b.w	800e444 <_malloc_r>
 800ef40:	b922      	cbnz	r2, 800ef4c <_realloc_r+0x20>
 800ef42:	f7ff fa2f 	bl	800e3a4 <_free_r>
 800ef46:	4625      	mov	r5, r4
 800ef48:	4628      	mov	r0, r5
 800ef4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef4c:	f000 f826 	bl	800ef9c <_malloc_usable_size_r>
 800ef50:	42a0      	cmp	r0, r4
 800ef52:	d20f      	bcs.n	800ef74 <_realloc_r+0x48>
 800ef54:	4621      	mov	r1, r4
 800ef56:	4638      	mov	r0, r7
 800ef58:	f7ff fa74 	bl	800e444 <_malloc_r>
 800ef5c:	4605      	mov	r5, r0
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d0f2      	beq.n	800ef48 <_realloc_r+0x1c>
 800ef62:	4631      	mov	r1, r6
 800ef64:	4622      	mov	r2, r4
 800ef66:	f7fe fe7b 	bl	800dc60 <memcpy>
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	f7ff fa19 	bl	800e3a4 <_free_r>
 800ef72:	e7e9      	b.n	800ef48 <_realloc_r+0x1c>
 800ef74:	4635      	mov	r5, r6
 800ef76:	e7e7      	b.n	800ef48 <_realloc_r+0x1c>

0800ef78 <_read_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	; (800ef98 <_read_r+0x20>)
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	602a      	str	r2, [r5, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f7f4 fd8a 	bl	8003aa0 <_read>
 800ef8c:	1c43      	adds	r3, r0, #1
 800ef8e:	d102      	bne.n	800ef96 <_read_r+0x1e>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b103      	cbz	r3, 800ef96 <_read_r+0x1e>
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	2000ff04 	.word	0x2000ff04

0800ef9c <_malloc_usable_size_r>:
 800ef9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efa0:	1f18      	subs	r0, r3, #4
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	bfbc      	itt	lt
 800efa6:	580b      	ldrlt	r3, [r1, r0]
 800efa8:	18c0      	addlt	r0, r0, r3
 800efaa:	4770      	bx	lr
 800efac:	0000      	movs	r0, r0
	...

0800efb0 <tan>:
 800efb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800efb2:	ec53 2b10 	vmov	r2, r3, d0
 800efb6:	4814      	ldr	r0, [pc, #80]	; (800f008 <tan+0x58>)
 800efb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800efbc:	4281      	cmp	r1, r0
 800efbe:	dc05      	bgt.n	800efcc <tan+0x1c>
 800efc0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800f000 <tan+0x50>
 800efc4:	2001      	movs	r0, #1
 800efc6:	f000 fd6f 	bl	800faa8 <__kernel_tan>
 800efca:	e009      	b.n	800efe0 <tan+0x30>
 800efcc:	480f      	ldr	r0, [pc, #60]	; (800f00c <tan+0x5c>)
 800efce:	4281      	cmp	r1, r0
 800efd0:	dd09      	ble.n	800efe6 <tan+0x36>
 800efd2:	ee10 0a10 	vmov	r0, s0
 800efd6:	4619      	mov	r1, r3
 800efd8:	f7f1 f94e 	bl	8000278 <__aeabi_dsub>
 800efdc:	ec41 0b10 	vmov	d0, r0, r1
 800efe0:	b005      	add	sp, #20
 800efe2:	f85d fb04 	ldr.w	pc, [sp], #4
 800efe6:	4668      	mov	r0, sp
 800efe8:	f000 f812 	bl	800f010 <__ieee754_rem_pio2>
 800efec:	0040      	lsls	r0, r0, #1
 800efee:	f000 0002 	and.w	r0, r0, #2
 800eff2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eff6:	ed9d 0b00 	vldr	d0, [sp]
 800effa:	f1c0 0001 	rsb	r0, r0, #1
 800effe:	e7e2      	b.n	800efc6 <tan+0x16>
	...
 800f008:	3fe921fb 	.word	0x3fe921fb
 800f00c:	7fefffff 	.word	0x7fefffff

0800f010 <__ieee754_rem_pio2>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	ed2d 8b02 	vpush	{d8}
 800f018:	ec55 4b10 	vmov	r4, r5, d0
 800f01c:	4bca      	ldr	r3, [pc, #808]	; (800f348 <__ieee754_rem_pio2+0x338>)
 800f01e:	b08b      	sub	sp, #44	; 0x2c
 800f020:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f024:	4598      	cmp	r8, r3
 800f026:	4682      	mov	sl, r0
 800f028:	9502      	str	r5, [sp, #8]
 800f02a:	dc08      	bgt.n	800f03e <__ieee754_rem_pio2+0x2e>
 800f02c:	2200      	movs	r2, #0
 800f02e:	2300      	movs	r3, #0
 800f030:	ed80 0b00 	vstr	d0, [r0]
 800f034:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f038:	f04f 0b00 	mov.w	fp, #0
 800f03c:	e028      	b.n	800f090 <__ieee754_rem_pio2+0x80>
 800f03e:	4bc3      	ldr	r3, [pc, #780]	; (800f34c <__ieee754_rem_pio2+0x33c>)
 800f040:	4598      	cmp	r8, r3
 800f042:	dc78      	bgt.n	800f136 <__ieee754_rem_pio2+0x126>
 800f044:	9b02      	ldr	r3, [sp, #8]
 800f046:	4ec2      	ldr	r6, [pc, #776]	; (800f350 <__ieee754_rem_pio2+0x340>)
 800f048:	2b00      	cmp	r3, #0
 800f04a:	ee10 0a10 	vmov	r0, s0
 800f04e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f310 <__ieee754_rem_pio2+0x300>)
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	4629      	mov	r1, r5
 800f056:	dd39      	ble.n	800f0cc <__ieee754_rem_pio2+0xbc>
 800f058:	f7f1 f90e 	bl	8000278 <__aeabi_dsub>
 800f05c:	45b0      	cmp	r8, r6
 800f05e:	4604      	mov	r4, r0
 800f060:	460d      	mov	r5, r1
 800f062:	d01b      	beq.n	800f09c <__ieee754_rem_pio2+0x8c>
 800f064:	a3ac      	add	r3, pc, #688	; (adr r3, 800f318 <__ieee754_rem_pio2+0x308>)
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	f7f1 f905 	bl	8000278 <__aeabi_dsub>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	e9ca 2300 	strd	r2, r3, [sl]
 800f076:	4620      	mov	r0, r4
 800f078:	4629      	mov	r1, r5
 800f07a:	f7f1 f8fd 	bl	8000278 <__aeabi_dsub>
 800f07e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f318 <__ieee754_rem_pio2+0x308>)
 800f080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f084:	f7f1 f8f8 	bl	8000278 <__aeabi_dsub>
 800f088:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f08c:	f04f 0b01 	mov.w	fp, #1
 800f090:	4658      	mov	r0, fp
 800f092:	b00b      	add	sp, #44	; 0x2c
 800f094:	ecbd 8b02 	vpop	{d8}
 800f098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f320 <__ieee754_rem_pio2+0x310>)
 800f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a2:	f7f1 f8e9 	bl	8000278 <__aeabi_dsub>
 800f0a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800f328 <__ieee754_rem_pio2+0x318>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	460d      	mov	r5, r1
 800f0b0:	f7f1 f8e2 	bl	8000278 <__aeabi_dsub>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	e9ca 2300 	strd	r2, r3, [sl]
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4629      	mov	r1, r5
 800f0c0:	f7f1 f8da 	bl	8000278 <__aeabi_dsub>
 800f0c4:	a398      	add	r3, pc, #608	; (adr r3, 800f328 <__ieee754_rem_pio2+0x318>)
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	e7db      	b.n	800f084 <__ieee754_rem_pio2+0x74>
 800f0cc:	f7f1 f8d6 	bl	800027c <__adddf3>
 800f0d0:	45b0      	cmp	r8, r6
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	460d      	mov	r5, r1
 800f0d6:	d016      	beq.n	800f106 <__ieee754_rem_pio2+0xf6>
 800f0d8:	a38f      	add	r3, pc, #572	; (adr r3, 800f318 <__ieee754_rem_pio2+0x308>)
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	f7f1 f8cd 	bl	800027c <__adddf3>
 800f0e2:	4602      	mov	r2, r0
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	e9ca 2300 	strd	r2, r3, [sl]
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	4629      	mov	r1, r5
 800f0ee:	f7f1 f8c3 	bl	8000278 <__aeabi_dsub>
 800f0f2:	a389      	add	r3, pc, #548	; (adr r3, 800f318 <__ieee754_rem_pio2+0x308>)
 800f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f8:	f7f1 f8c0 	bl	800027c <__adddf3>
 800f0fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800f100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f104:	e7c4      	b.n	800f090 <__ieee754_rem_pio2+0x80>
 800f106:	a386      	add	r3, pc, #536	; (adr r3, 800f320 <__ieee754_rem_pio2+0x310>)
 800f108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10c:	f7f1 f8b6 	bl	800027c <__adddf3>
 800f110:	a385      	add	r3, pc, #532	; (adr r3, 800f328 <__ieee754_rem_pio2+0x318>)
 800f112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f116:	4604      	mov	r4, r0
 800f118:	460d      	mov	r5, r1
 800f11a:	f7f1 f8af 	bl	800027c <__adddf3>
 800f11e:	4602      	mov	r2, r0
 800f120:	460b      	mov	r3, r1
 800f122:	e9ca 2300 	strd	r2, r3, [sl]
 800f126:	4620      	mov	r0, r4
 800f128:	4629      	mov	r1, r5
 800f12a:	f7f1 f8a5 	bl	8000278 <__aeabi_dsub>
 800f12e:	a37e      	add	r3, pc, #504	; (adr r3, 800f328 <__ieee754_rem_pio2+0x318>)
 800f130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f134:	e7e0      	b.n	800f0f8 <__ieee754_rem_pio2+0xe8>
 800f136:	4b87      	ldr	r3, [pc, #540]	; (800f354 <__ieee754_rem_pio2+0x344>)
 800f138:	4598      	cmp	r8, r3
 800f13a:	f300 80d9 	bgt.w	800f2f0 <__ieee754_rem_pio2+0x2e0>
 800f13e:	f000 fe87 	bl	800fe50 <fabs>
 800f142:	ec55 4b10 	vmov	r4, r5, d0
 800f146:	ee10 0a10 	vmov	r0, s0
 800f14a:	a379      	add	r3, pc, #484	; (adr r3, 800f330 <__ieee754_rem_pio2+0x320>)
 800f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f150:	4629      	mov	r1, r5
 800f152:	f7f1 fa49 	bl	80005e8 <__aeabi_dmul>
 800f156:	4b80      	ldr	r3, [pc, #512]	; (800f358 <__ieee754_rem_pio2+0x348>)
 800f158:	2200      	movs	r2, #0
 800f15a:	f7f1 f88f 	bl	800027c <__adddf3>
 800f15e:	f7f1 fcdd 	bl	8000b1c <__aeabi_d2iz>
 800f162:	4683      	mov	fp, r0
 800f164:	f7f1 f9d6 	bl	8000514 <__aeabi_i2d>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	ec43 2b18 	vmov	d8, r2, r3
 800f170:	a367      	add	r3, pc, #412	; (adr r3, 800f310 <__ieee754_rem_pio2+0x300>)
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	f7f1 fa37 	bl	80005e8 <__aeabi_dmul>
 800f17a:	4602      	mov	r2, r0
 800f17c:	460b      	mov	r3, r1
 800f17e:	4620      	mov	r0, r4
 800f180:	4629      	mov	r1, r5
 800f182:	f7f1 f879 	bl	8000278 <__aeabi_dsub>
 800f186:	a364      	add	r3, pc, #400	; (adr r3, 800f318 <__ieee754_rem_pio2+0x308>)
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	4606      	mov	r6, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	ec51 0b18 	vmov	r0, r1, d8
 800f194:	f7f1 fa28 	bl	80005e8 <__aeabi_dmul>
 800f198:	f1bb 0f1f 	cmp.w	fp, #31
 800f19c:	4604      	mov	r4, r0
 800f19e:	460d      	mov	r5, r1
 800f1a0:	dc0d      	bgt.n	800f1be <__ieee754_rem_pio2+0x1ae>
 800f1a2:	4b6e      	ldr	r3, [pc, #440]	; (800f35c <__ieee754_rem_pio2+0x34c>)
 800f1a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ac:	4543      	cmp	r3, r8
 800f1ae:	d006      	beq.n	800f1be <__ieee754_rem_pio2+0x1ae>
 800f1b0:	4622      	mov	r2, r4
 800f1b2:	462b      	mov	r3, r5
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	f7f1 f85e 	bl	8000278 <__aeabi_dsub>
 800f1bc:	e00f      	b.n	800f1de <__ieee754_rem_pio2+0x1ce>
 800f1be:	462b      	mov	r3, r5
 800f1c0:	4622      	mov	r2, r4
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	4639      	mov	r1, r7
 800f1c6:	f7f1 f857 	bl	8000278 <__aeabi_dsub>
 800f1ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f1ce:	9303      	str	r3, [sp, #12]
 800f1d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f1d8:	f1b8 0f10 	cmp.w	r8, #16
 800f1dc:	dc02      	bgt.n	800f1e4 <__ieee754_rem_pio2+0x1d4>
 800f1de:	e9ca 0100 	strd	r0, r1, [sl]
 800f1e2:	e039      	b.n	800f258 <__ieee754_rem_pio2+0x248>
 800f1e4:	a34e      	add	r3, pc, #312	; (adr r3, 800f320 <__ieee754_rem_pio2+0x310>)
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	ec51 0b18 	vmov	r0, r1, d8
 800f1ee:	f7f1 f9fb 	bl	80005e8 <__aeabi_dmul>
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	460d      	mov	r5, r1
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	f7f1 f83b 	bl	8000278 <__aeabi_dsub>
 800f202:	4602      	mov	r2, r0
 800f204:	460b      	mov	r3, r1
 800f206:	4680      	mov	r8, r0
 800f208:	4689      	mov	r9, r1
 800f20a:	4630      	mov	r0, r6
 800f20c:	4639      	mov	r1, r7
 800f20e:	f7f1 f833 	bl	8000278 <__aeabi_dsub>
 800f212:	4622      	mov	r2, r4
 800f214:	462b      	mov	r3, r5
 800f216:	f7f1 f82f 	bl	8000278 <__aeabi_dsub>
 800f21a:	a343      	add	r3, pc, #268	; (adr r3, 800f328 <__ieee754_rem_pio2+0x318>)
 800f21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f220:	4604      	mov	r4, r0
 800f222:	460d      	mov	r5, r1
 800f224:	ec51 0b18 	vmov	r0, r1, d8
 800f228:	f7f1 f9de 	bl	80005e8 <__aeabi_dmul>
 800f22c:	4622      	mov	r2, r4
 800f22e:	462b      	mov	r3, r5
 800f230:	f7f1 f822 	bl	8000278 <__aeabi_dsub>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	4604      	mov	r4, r0
 800f23a:	460d      	mov	r5, r1
 800f23c:	4640      	mov	r0, r8
 800f23e:	4649      	mov	r1, r9
 800f240:	f7f1 f81a 	bl	8000278 <__aeabi_dsub>
 800f244:	9a03      	ldr	r2, [sp, #12]
 800f246:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	2b31      	cmp	r3, #49	; 0x31
 800f24e:	dc24      	bgt.n	800f29a <__ieee754_rem_pio2+0x28a>
 800f250:	e9ca 0100 	strd	r0, r1, [sl]
 800f254:	4646      	mov	r6, r8
 800f256:	464f      	mov	r7, r9
 800f258:	e9da 8900 	ldrd	r8, r9, [sl]
 800f25c:	4630      	mov	r0, r6
 800f25e:	4642      	mov	r2, r8
 800f260:	464b      	mov	r3, r9
 800f262:	4639      	mov	r1, r7
 800f264:	f7f1 f808 	bl	8000278 <__aeabi_dsub>
 800f268:	462b      	mov	r3, r5
 800f26a:	4622      	mov	r2, r4
 800f26c:	f7f1 f804 	bl	8000278 <__aeabi_dsub>
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	2b00      	cmp	r3, #0
 800f274:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f278:	f6bf af0a 	bge.w	800f090 <__ieee754_rem_pio2+0x80>
 800f27c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f280:	f8ca 3004 	str.w	r3, [sl, #4]
 800f284:	f8ca 8000 	str.w	r8, [sl]
 800f288:	f8ca 0008 	str.w	r0, [sl, #8]
 800f28c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f290:	f8ca 300c 	str.w	r3, [sl, #12]
 800f294:	f1cb 0b00 	rsb	fp, fp, #0
 800f298:	e6fa      	b.n	800f090 <__ieee754_rem_pio2+0x80>
 800f29a:	a327      	add	r3, pc, #156	; (adr r3, 800f338 <__ieee754_rem_pio2+0x328>)
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	ec51 0b18 	vmov	r0, r1, d8
 800f2a4:	f7f1 f9a0 	bl	80005e8 <__aeabi_dmul>
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	460d      	mov	r5, r1
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	4649      	mov	r1, r9
 800f2b4:	f7f0 ffe0 	bl	8000278 <__aeabi_dsub>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	4606      	mov	r6, r0
 800f2be:	460f      	mov	r7, r1
 800f2c0:	4640      	mov	r0, r8
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	f7f0 ffd8 	bl	8000278 <__aeabi_dsub>
 800f2c8:	4622      	mov	r2, r4
 800f2ca:	462b      	mov	r3, r5
 800f2cc:	f7f0 ffd4 	bl	8000278 <__aeabi_dsub>
 800f2d0:	a31b      	add	r3, pc, #108	; (adr r3, 800f340 <__ieee754_rem_pio2+0x330>)
 800f2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	460d      	mov	r5, r1
 800f2da:	ec51 0b18 	vmov	r0, r1, d8
 800f2de:	f7f1 f983 	bl	80005e8 <__aeabi_dmul>
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	462b      	mov	r3, r5
 800f2e6:	f7f0 ffc7 	bl	8000278 <__aeabi_dsub>
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	460d      	mov	r5, r1
 800f2ee:	e75f      	b.n	800f1b0 <__ieee754_rem_pio2+0x1a0>
 800f2f0:	4b1b      	ldr	r3, [pc, #108]	; (800f360 <__ieee754_rem_pio2+0x350>)
 800f2f2:	4598      	cmp	r8, r3
 800f2f4:	dd36      	ble.n	800f364 <__ieee754_rem_pio2+0x354>
 800f2f6:	ee10 2a10 	vmov	r2, s0
 800f2fa:	462b      	mov	r3, r5
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	4629      	mov	r1, r5
 800f300:	f7f0 ffba 	bl	8000278 <__aeabi_dsub>
 800f304:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f308:	e9ca 0100 	strd	r0, r1, [sl]
 800f30c:	e694      	b.n	800f038 <__ieee754_rem_pio2+0x28>
 800f30e:	bf00      	nop
 800f310:	54400000 	.word	0x54400000
 800f314:	3ff921fb 	.word	0x3ff921fb
 800f318:	1a626331 	.word	0x1a626331
 800f31c:	3dd0b461 	.word	0x3dd0b461
 800f320:	1a600000 	.word	0x1a600000
 800f324:	3dd0b461 	.word	0x3dd0b461
 800f328:	2e037073 	.word	0x2e037073
 800f32c:	3ba3198a 	.word	0x3ba3198a
 800f330:	6dc9c883 	.word	0x6dc9c883
 800f334:	3fe45f30 	.word	0x3fe45f30
 800f338:	2e000000 	.word	0x2e000000
 800f33c:	3ba3198a 	.word	0x3ba3198a
 800f340:	252049c1 	.word	0x252049c1
 800f344:	397b839a 	.word	0x397b839a
 800f348:	3fe921fb 	.word	0x3fe921fb
 800f34c:	4002d97b 	.word	0x4002d97b
 800f350:	3ff921fb 	.word	0x3ff921fb
 800f354:	413921fb 	.word	0x413921fb
 800f358:	3fe00000 	.word	0x3fe00000
 800f35c:	08010404 	.word	0x08010404
 800f360:	7fefffff 	.word	0x7fefffff
 800f364:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f368:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f36c:	ee10 0a10 	vmov	r0, s0
 800f370:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f374:	ee10 6a10 	vmov	r6, s0
 800f378:	460f      	mov	r7, r1
 800f37a:	f7f1 fbcf 	bl	8000b1c <__aeabi_d2iz>
 800f37e:	f7f1 f8c9 	bl	8000514 <__aeabi_i2d>
 800f382:	4602      	mov	r2, r0
 800f384:	460b      	mov	r3, r1
 800f386:	4630      	mov	r0, r6
 800f388:	4639      	mov	r1, r7
 800f38a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f38e:	f7f0 ff73 	bl	8000278 <__aeabi_dsub>
 800f392:	4b22      	ldr	r3, [pc, #136]	; (800f41c <__ieee754_rem_pio2+0x40c>)
 800f394:	2200      	movs	r2, #0
 800f396:	f7f1 f927 	bl	80005e8 <__aeabi_dmul>
 800f39a:	460f      	mov	r7, r1
 800f39c:	4606      	mov	r6, r0
 800f39e:	f7f1 fbbd 	bl	8000b1c <__aeabi_d2iz>
 800f3a2:	f7f1 f8b7 	bl	8000514 <__aeabi_i2d>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	4630      	mov	r0, r6
 800f3ac:	4639      	mov	r1, r7
 800f3ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f3b2:	f7f0 ff61 	bl	8000278 <__aeabi_dsub>
 800f3b6:	4b19      	ldr	r3, [pc, #100]	; (800f41c <__ieee754_rem_pio2+0x40c>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f7f1 f915 	bl	80005e8 <__aeabi_dmul>
 800f3be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f3c2:	ad04      	add	r5, sp, #16
 800f3c4:	f04f 0803 	mov.w	r8, #3
 800f3c8:	46a9      	mov	r9, r5
 800f3ca:	2600      	movs	r6, #0
 800f3cc:	2700      	movs	r7, #0
 800f3ce:	4632      	mov	r2, r6
 800f3d0:	463b      	mov	r3, r7
 800f3d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f3d6:	46c3      	mov	fp, r8
 800f3d8:	3d08      	subs	r5, #8
 800f3da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f3de:	f7f1 fb6b 	bl	8000ab8 <__aeabi_dcmpeq>
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d1f3      	bne.n	800f3ce <__ieee754_rem_pio2+0x3be>
 800f3e6:	4b0e      	ldr	r3, [pc, #56]	; (800f420 <__ieee754_rem_pio2+0x410>)
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	2302      	movs	r3, #2
 800f3ec:	9300      	str	r3, [sp, #0]
 800f3ee:	4622      	mov	r2, r4
 800f3f0:	465b      	mov	r3, fp
 800f3f2:	4651      	mov	r1, sl
 800f3f4:	4648      	mov	r0, r9
 800f3f6:	f000 f817 	bl	800f428 <__kernel_rem_pio2>
 800f3fa:	9b02      	ldr	r3, [sp, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	4683      	mov	fp, r0
 800f400:	f6bf ae46 	bge.w	800f090 <__ieee754_rem_pio2+0x80>
 800f404:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f408:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f40c:	f8ca 3004 	str.w	r3, [sl, #4]
 800f410:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f414:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f418:	e73a      	b.n	800f290 <__ieee754_rem_pio2+0x280>
 800f41a:	bf00      	nop
 800f41c:	41700000 	.word	0x41700000
 800f420:	08010484 	.word	0x08010484
 800f424:	00000000 	.word	0x00000000

0800f428 <__kernel_rem_pio2>:
 800f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	ed2d 8b02 	vpush	{d8}
 800f430:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f434:	f112 0f14 	cmn.w	r2, #20
 800f438:	9308      	str	r3, [sp, #32]
 800f43a:	9101      	str	r1, [sp, #4]
 800f43c:	4bc6      	ldr	r3, [pc, #792]	; (800f758 <__kernel_rem_pio2+0x330>)
 800f43e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f440:	9009      	str	r0, [sp, #36]	; 0x24
 800f442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f446:	9304      	str	r3, [sp, #16]
 800f448:	9b08      	ldr	r3, [sp, #32]
 800f44a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f44e:	bfa8      	it	ge
 800f450:	1ed4      	subge	r4, r2, #3
 800f452:	9306      	str	r3, [sp, #24]
 800f454:	bfb2      	itee	lt
 800f456:	2400      	movlt	r4, #0
 800f458:	2318      	movge	r3, #24
 800f45a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f45e:	f06f 0317 	mvn.w	r3, #23
 800f462:	fb04 3303 	mla	r3, r4, r3, r3
 800f466:	eb03 0a02 	add.w	sl, r3, r2
 800f46a:	9b04      	ldr	r3, [sp, #16]
 800f46c:	9a06      	ldr	r2, [sp, #24]
 800f46e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f748 <__kernel_rem_pio2+0x320>
 800f472:	eb03 0802 	add.w	r8, r3, r2
 800f476:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f478:	1aa7      	subs	r7, r4, r2
 800f47a:	ae20      	add	r6, sp, #128	; 0x80
 800f47c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f480:	2500      	movs	r5, #0
 800f482:	4545      	cmp	r5, r8
 800f484:	dd18      	ble.n	800f4b8 <__kernel_rem_pio2+0x90>
 800f486:	9b08      	ldr	r3, [sp, #32]
 800f488:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f48c:	aa20      	add	r2, sp, #128	; 0x80
 800f48e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f748 <__kernel_rem_pio2+0x320>
 800f492:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f496:	f1c3 0301 	rsb	r3, r3, #1
 800f49a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f49e:	9307      	str	r3, [sp, #28]
 800f4a0:	9b07      	ldr	r3, [sp, #28]
 800f4a2:	9a04      	ldr	r2, [sp, #16]
 800f4a4:	4443      	add	r3, r8
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	db2f      	blt.n	800f50a <__kernel_rem_pio2+0xe2>
 800f4aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f4ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f4b2:	462f      	mov	r7, r5
 800f4b4:	2600      	movs	r6, #0
 800f4b6:	e01b      	b.n	800f4f0 <__kernel_rem_pio2+0xc8>
 800f4b8:	42ef      	cmn	r7, r5
 800f4ba:	d407      	bmi.n	800f4cc <__kernel_rem_pio2+0xa4>
 800f4bc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f4c0:	f7f1 f828 	bl	8000514 <__aeabi_i2d>
 800f4c4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f4c8:	3501      	adds	r5, #1
 800f4ca:	e7da      	b.n	800f482 <__kernel_rem_pio2+0x5a>
 800f4cc:	ec51 0b18 	vmov	r0, r1, d8
 800f4d0:	e7f8      	b.n	800f4c4 <__kernel_rem_pio2+0x9c>
 800f4d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4d6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f4da:	f7f1 f885 	bl	80005e8 <__aeabi_dmul>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4e6:	f7f0 fec9 	bl	800027c <__adddf3>
 800f4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4ee:	3601      	adds	r6, #1
 800f4f0:	9b06      	ldr	r3, [sp, #24]
 800f4f2:	429e      	cmp	r6, r3
 800f4f4:	f1a7 0708 	sub.w	r7, r7, #8
 800f4f8:	ddeb      	ble.n	800f4d2 <__kernel_rem_pio2+0xaa>
 800f4fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4fe:	3508      	adds	r5, #8
 800f500:	ecab 7b02 	vstmia	fp!, {d7}
 800f504:	f108 0801 	add.w	r8, r8, #1
 800f508:	e7ca      	b.n	800f4a0 <__kernel_rem_pio2+0x78>
 800f50a:	9b04      	ldr	r3, [sp, #16]
 800f50c:	aa0c      	add	r2, sp, #48	; 0x30
 800f50e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f512:	930b      	str	r3, [sp, #44]	; 0x2c
 800f514:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f516:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f51a:	9c04      	ldr	r4, [sp, #16]
 800f51c:	930a      	str	r3, [sp, #40]	; 0x28
 800f51e:	ab98      	add	r3, sp, #608	; 0x260
 800f520:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f524:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f528:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f52c:	f8cd b008 	str.w	fp, [sp, #8]
 800f530:	4625      	mov	r5, r4
 800f532:	2d00      	cmp	r5, #0
 800f534:	dc78      	bgt.n	800f628 <__kernel_rem_pio2+0x200>
 800f536:	ec47 6b10 	vmov	d0, r6, r7
 800f53a:	4650      	mov	r0, sl
 800f53c:	f000 fd14 	bl	800ff68 <scalbn>
 800f540:	ec57 6b10 	vmov	r6, r7, d0
 800f544:	2200      	movs	r2, #0
 800f546:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f54a:	ee10 0a10 	vmov	r0, s0
 800f54e:	4639      	mov	r1, r7
 800f550:	f7f1 f84a 	bl	80005e8 <__aeabi_dmul>
 800f554:	ec41 0b10 	vmov	d0, r0, r1
 800f558:	f000 fc86 	bl	800fe68 <floor>
 800f55c:	4b7f      	ldr	r3, [pc, #508]	; (800f75c <__kernel_rem_pio2+0x334>)
 800f55e:	ec51 0b10 	vmov	r0, r1, d0
 800f562:	2200      	movs	r2, #0
 800f564:	f7f1 f840 	bl	80005e8 <__aeabi_dmul>
 800f568:	4602      	mov	r2, r0
 800f56a:	460b      	mov	r3, r1
 800f56c:	4630      	mov	r0, r6
 800f56e:	4639      	mov	r1, r7
 800f570:	f7f0 fe82 	bl	8000278 <__aeabi_dsub>
 800f574:	460f      	mov	r7, r1
 800f576:	4606      	mov	r6, r0
 800f578:	f7f1 fad0 	bl	8000b1c <__aeabi_d2iz>
 800f57c:	9007      	str	r0, [sp, #28]
 800f57e:	f7f0 ffc9 	bl	8000514 <__aeabi_i2d>
 800f582:	4602      	mov	r2, r0
 800f584:	460b      	mov	r3, r1
 800f586:	4630      	mov	r0, r6
 800f588:	4639      	mov	r1, r7
 800f58a:	f7f0 fe75 	bl	8000278 <__aeabi_dsub>
 800f58e:	f1ba 0f00 	cmp.w	sl, #0
 800f592:	4606      	mov	r6, r0
 800f594:	460f      	mov	r7, r1
 800f596:	dd70      	ble.n	800f67a <__kernel_rem_pio2+0x252>
 800f598:	1e62      	subs	r2, r4, #1
 800f59a:	ab0c      	add	r3, sp, #48	; 0x30
 800f59c:	9d07      	ldr	r5, [sp, #28]
 800f59e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f5a2:	f1ca 0118 	rsb	r1, sl, #24
 800f5a6:	fa40 f301 	asr.w	r3, r0, r1
 800f5aa:	441d      	add	r5, r3
 800f5ac:	408b      	lsls	r3, r1
 800f5ae:	1ac0      	subs	r0, r0, r3
 800f5b0:	ab0c      	add	r3, sp, #48	; 0x30
 800f5b2:	9507      	str	r5, [sp, #28]
 800f5b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f5b8:	f1ca 0317 	rsb	r3, sl, #23
 800f5bc:	fa40 f303 	asr.w	r3, r0, r3
 800f5c0:	9302      	str	r3, [sp, #8]
 800f5c2:	9b02      	ldr	r3, [sp, #8]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	dd66      	ble.n	800f696 <__kernel_rem_pio2+0x26e>
 800f5c8:	9b07      	ldr	r3, [sp, #28]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	9307      	str	r3, [sp, #28]
 800f5d0:	4615      	mov	r5, r2
 800f5d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f5d6:	4294      	cmp	r4, r2
 800f5d8:	f300 8099 	bgt.w	800f70e <__kernel_rem_pio2+0x2e6>
 800f5dc:	f1ba 0f00 	cmp.w	sl, #0
 800f5e0:	dd07      	ble.n	800f5f2 <__kernel_rem_pio2+0x1ca>
 800f5e2:	f1ba 0f01 	cmp.w	sl, #1
 800f5e6:	f000 80a5 	beq.w	800f734 <__kernel_rem_pio2+0x30c>
 800f5ea:	f1ba 0f02 	cmp.w	sl, #2
 800f5ee:	f000 80c1 	beq.w	800f774 <__kernel_rem_pio2+0x34c>
 800f5f2:	9b02      	ldr	r3, [sp, #8]
 800f5f4:	2b02      	cmp	r3, #2
 800f5f6:	d14e      	bne.n	800f696 <__kernel_rem_pio2+0x26e>
 800f5f8:	4632      	mov	r2, r6
 800f5fa:	463b      	mov	r3, r7
 800f5fc:	4958      	ldr	r1, [pc, #352]	; (800f760 <__kernel_rem_pio2+0x338>)
 800f5fe:	2000      	movs	r0, #0
 800f600:	f7f0 fe3a 	bl	8000278 <__aeabi_dsub>
 800f604:	4606      	mov	r6, r0
 800f606:	460f      	mov	r7, r1
 800f608:	2d00      	cmp	r5, #0
 800f60a:	d044      	beq.n	800f696 <__kernel_rem_pio2+0x26e>
 800f60c:	4650      	mov	r0, sl
 800f60e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f750 <__kernel_rem_pio2+0x328>
 800f612:	f000 fca9 	bl	800ff68 <scalbn>
 800f616:	4630      	mov	r0, r6
 800f618:	4639      	mov	r1, r7
 800f61a:	ec53 2b10 	vmov	r2, r3, d0
 800f61e:	f7f0 fe2b 	bl	8000278 <__aeabi_dsub>
 800f622:	4606      	mov	r6, r0
 800f624:	460f      	mov	r7, r1
 800f626:	e036      	b.n	800f696 <__kernel_rem_pio2+0x26e>
 800f628:	4b4e      	ldr	r3, [pc, #312]	; (800f764 <__kernel_rem_pio2+0x33c>)
 800f62a:	2200      	movs	r2, #0
 800f62c:	4630      	mov	r0, r6
 800f62e:	4639      	mov	r1, r7
 800f630:	f7f0 ffda 	bl	80005e8 <__aeabi_dmul>
 800f634:	f7f1 fa72 	bl	8000b1c <__aeabi_d2iz>
 800f638:	f7f0 ff6c 	bl	8000514 <__aeabi_i2d>
 800f63c:	4b4a      	ldr	r3, [pc, #296]	; (800f768 <__kernel_rem_pio2+0x340>)
 800f63e:	2200      	movs	r2, #0
 800f640:	4680      	mov	r8, r0
 800f642:	4689      	mov	r9, r1
 800f644:	f7f0 ffd0 	bl	80005e8 <__aeabi_dmul>
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4630      	mov	r0, r6
 800f64e:	4639      	mov	r1, r7
 800f650:	f7f0 fe12 	bl	8000278 <__aeabi_dsub>
 800f654:	f7f1 fa62 	bl	8000b1c <__aeabi_d2iz>
 800f658:	9b02      	ldr	r3, [sp, #8]
 800f65a:	f843 0b04 	str.w	r0, [r3], #4
 800f65e:	3d01      	subs	r5, #1
 800f660:	9302      	str	r3, [sp, #8]
 800f662:	ab70      	add	r3, sp, #448	; 0x1c0
 800f664:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66c:	4640      	mov	r0, r8
 800f66e:	4649      	mov	r1, r9
 800f670:	f7f0 fe04 	bl	800027c <__adddf3>
 800f674:	4606      	mov	r6, r0
 800f676:	460f      	mov	r7, r1
 800f678:	e75b      	b.n	800f532 <__kernel_rem_pio2+0x10a>
 800f67a:	d105      	bne.n	800f688 <__kernel_rem_pio2+0x260>
 800f67c:	1e63      	subs	r3, r4, #1
 800f67e:	aa0c      	add	r2, sp, #48	; 0x30
 800f680:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f684:	15c3      	asrs	r3, r0, #23
 800f686:	e79b      	b.n	800f5c0 <__kernel_rem_pio2+0x198>
 800f688:	4b38      	ldr	r3, [pc, #224]	; (800f76c <__kernel_rem_pio2+0x344>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	f7f1 fa32 	bl	8000af4 <__aeabi_dcmpge>
 800f690:	2800      	cmp	r0, #0
 800f692:	d139      	bne.n	800f708 <__kernel_rem_pio2+0x2e0>
 800f694:	9002      	str	r0, [sp, #8]
 800f696:	2200      	movs	r2, #0
 800f698:	2300      	movs	r3, #0
 800f69a:	4630      	mov	r0, r6
 800f69c:	4639      	mov	r1, r7
 800f69e:	f7f1 fa0b 	bl	8000ab8 <__aeabi_dcmpeq>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	f000 80b4 	beq.w	800f810 <__kernel_rem_pio2+0x3e8>
 800f6a8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800f6ac:	465b      	mov	r3, fp
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	9904      	ldr	r1, [sp, #16]
 800f6b2:	428b      	cmp	r3, r1
 800f6b4:	da65      	bge.n	800f782 <__kernel_rem_pio2+0x35a>
 800f6b6:	2a00      	cmp	r2, #0
 800f6b8:	d07b      	beq.n	800f7b2 <__kernel_rem_pio2+0x38a>
 800f6ba:	ab0c      	add	r3, sp, #48	; 0x30
 800f6bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800f6c0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	f000 80a0 	beq.w	800f80a <__kernel_rem_pio2+0x3e2>
 800f6ca:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f750 <__kernel_rem_pio2+0x328>
 800f6ce:	4650      	mov	r0, sl
 800f6d0:	f000 fc4a 	bl	800ff68 <scalbn>
 800f6d4:	4f23      	ldr	r7, [pc, #140]	; (800f764 <__kernel_rem_pio2+0x33c>)
 800f6d6:	ec55 4b10 	vmov	r4, r5, d0
 800f6da:	46d8      	mov	r8, fp
 800f6dc:	2600      	movs	r6, #0
 800f6de:	f1b8 0f00 	cmp.w	r8, #0
 800f6e2:	f280 80cf 	bge.w	800f884 <__kernel_rem_pio2+0x45c>
 800f6e6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f748 <__kernel_rem_pio2+0x320>
 800f6ea:	465f      	mov	r7, fp
 800f6ec:	f04f 0800 	mov.w	r8, #0
 800f6f0:	2f00      	cmp	r7, #0
 800f6f2:	f2c0 80fd 	blt.w	800f8f0 <__kernel_rem_pio2+0x4c8>
 800f6f6:	ab70      	add	r3, sp, #448	; 0x1c0
 800f6f8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f770 <__kernel_rem_pio2+0x348>
 800f6fc:	ec55 4b18 	vmov	r4, r5, d8
 800f700:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f704:	2600      	movs	r6, #0
 800f706:	e0e5      	b.n	800f8d4 <__kernel_rem_pio2+0x4ac>
 800f708:	2302      	movs	r3, #2
 800f70a:	9302      	str	r3, [sp, #8]
 800f70c:	e75c      	b.n	800f5c8 <__kernel_rem_pio2+0x1a0>
 800f70e:	f8db 3000 	ldr.w	r3, [fp]
 800f712:	b955      	cbnz	r5, 800f72a <__kernel_rem_pio2+0x302>
 800f714:	b123      	cbz	r3, 800f720 <__kernel_rem_pio2+0x2f8>
 800f716:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f71a:	f8cb 3000 	str.w	r3, [fp]
 800f71e:	2301      	movs	r3, #1
 800f720:	3201      	adds	r2, #1
 800f722:	f10b 0b04 	add.w	fp, fp, #4
 800f726:	461d      	mov	r5, r3
 800f728:	e755      	b.n	800f5d6 <__kernel_rem_pio2+0x1ae>
 800f72a:	1acb      	subs	r3, r1, r3
 800f72c:	f8cb 3000 	str.w	r3, [fp]
 800f730:	462b      	mov	r3, r5
 800f732:	e7f5      	b.n	800f720 <__kernel_rem_pio2+0x2f8>
 800f734:	1e62      	subs	r2, r4, #1
 800f736:	ab0c      	add	r3, sp, #48	; 0x30
 800f738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f73c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f740:	a90c      	add	r1, sp, #48	; 0x30
 800f742:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f746:	e754      	b.n	800f5f2 <__kernel_rem_pio2+0x1ca>
	...
 800f754:	3ff00000 	.word	0x3ff00000
 800f758:	080105d0 	.word	0x080105d0
 800f75c:	40200000 	.word	0x40200000
 800f760:	3ff00000 	.word	0x3ff00000
 800f764:	3e700000 	.word	0x3e700000
 800f768:	41700000 	.word	0x41700000
 800f76c:	3fe00000 	.word	0x3fe00000
 800f770:	08010590 	.word	0x08010590
 800f774:	1e62      	subs	r2, r4, #1
 800f776:	ab0c      	add	r3, sp, #48	; 0x30
 800f778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f77c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f780:	e7de      	b.n	800f740 <__kernel_rem_pio2+0x318>
 800f782:	a90c      	add	r1, sp, #48	; 0x30
 800f784:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f788:	3b01      	subs	r3, #1
 800f78a:	430a      	orrs	r2, r1
 800f78c:	e790      	b.n	800f6b0 <__kernel_rem_pio2+0x288>
 800f78e:	3301      	adds	r3, #1
 800f790:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f794:	2900      	cmp	r1, #0
 800f796:	d0fa      	beq.n	800f78e <__kernel_rem_pio2+0x366>
 800f798:	9a08      	ldr	r2, [sp, #32]
 800f79a:	18e3      	adds	r3, r4, r3
 800f79c:	18a6      	adds	r6, r4, r2
 800f79e:	aa20      	add	r2, sp, #128	; 0x80
 800f7a0:	1c65      	adds	r5, r4, #1
 800f7a2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f7a6:	9302      	str	r3, [sp, #8]
 800f7a8:	9b02      	ldr	r3, [sp, #8]
 800f7aa:	42ab      	cmp	r3, r5
 800f7ac:	da04      	bge.n	800f7b8 <__kernel_rem_pio2+0x390>
 800f7ae:	461c      	mov	r4, r3
 800f7b0:	e6b5      	b.n	800f51e <__kernel_rem_pio2+0xf6>
 800f7b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e7eb      	b.n	800f790 <__kernel_rem_pio2+0x368>
 800f7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f7be:	f7f0 fea9 	bl	8000514 <__aeabi_i2d>
 800f7c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c8:	46b3      	mov	fp, r6
 800f7ca:	461c      	mov	r4, r3
 800f7cc:	2700      	movs	r7, #0
 800f7ce:	f04f 0800 	mov.w	r8, #0
 800f7d2:	f04f 0900 	mov.w	r9, #0
 800f7d6:	9b06      	ldr	r3, [sp, #24]
 800f7d8:	429f      	cmp	r7, r3
 800f7da:	dd06      	ble.n	800f7ea <__kernel_rem_pio2+0x3c2>
 800f7dc:	ab70      	add	r3, sp, #448	; 0x1c0
 800f7de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f7e2:	e9c3 8900 	strd	r8, r9, [r3]
 800f7e6:	3501      	adds	r5, #1
 800f7e8:	e7de      	b.n	800f7a8 <__kernel_rem_pio2+0x380>
 800f7ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f7ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f7f2:	f7f0 fef9 	bl	80005e8 <__aeabi_dmul>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	4640      	mov	r0, r8
 800f7fc:	4649      	mov	r1, r9
 800f7fe:	f7f0 fd3d 	bl	800027c <__adddf3>
 800f802:	3701      	adds	r7, #1
 800f804:	4680      	mov	r8, r0
 800f806:	4689      	mov	r9, r1
 800f808:	e7e5      	b.n	800f7d6 <__kernel_rem_pio2+0x3ae>
 800f80a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f80e:	e754      	b.n	800f6ba <__kernel_rem_pio2+0x292>
 800f810:	ec47 6b10 	vmov	d0, r6, r7
 800f814:	f1ca 0000 	rsb	r0, sl, #0
 800f818:	f000 fba6 	bl	800ff68 <scalbn>
 800f81c:	ec57 6b10 	vmov	r6, r7, d0
 800f820:	4b9f      	ldr	r3, [pc, #636]	; (800faa0 <__kernel_rem_pio2+0x678>)
 800f822:	ee10 0a10 	vmov	r0, s0
 800f826:	2200      	movs	r2, #0
 800f828:	4639      	mov	r1, r7
 800f82a:	f7f1 f963 	bl	8000af4 <__aeabi_dcmpge>
 800f82e:	b300      	cbz	r0, 800f872 <__kernel_rem_pio2+0x44a>
 800f830:	4b9c      	ldr	r3, [pc, #624]	; (800faa4 <__kernel_rem_pio2+0x67c>)
 800f832:	2200      	movs	r2, #0
 800f834:	4630      	mov	r0, r6
 800f836:	4639      	mov	r1, r7
 800f838:	f7f0 fed6 	bl	80005e8 <__aeabi_dmul>
 800f83c:	f7f1 f96e 	bl	8000b1c <__aeabi_d2iz>
 800f840:	4605      	mov	r5, r0
 800f842:	f7f0 fe67 	bl	8000514 <__aeabi_i2d>
 800f846:	4b96      	ldr	r3, [pc, #600]	; (800faa0 <__kernel_rem_pio2+0x678>)
 800f848:	2200      	movs	r2, #0
 800f84a:	f7f0 fecd 	bl	80005e8 <__aeabi_dmul>
 800f84e:	460b      	mov	r3, r1
 800f850:	4602      	mov	r2, r0
 800f852:	4639      	mov	r1, r7
 800f854:	4630      	mov	r0, r6
 800f856:	f7f0 fd0f 	bl	8000278 <__aeabi_dsub>
 800f85a:	f7f1 f95f 	bl	8000b1c <__aeabi_d2iz>
 800f85e:	f104 0b01 	add.w	fp, r4, #1
 800f862:	ab0c      	add	r3, sp, #48	; 0x30
 800f864:	f10a 0a18 	add.w	sl, sl, #24
 800f868:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f86c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f870:	e72b      	b.n	800f6ca <__kernel_rem_pio2+0x2a2>
 800f872:	4630      	mov	r0, r6
 800f874:	4639      	mov	r1, r7
 800f876:	f7f1 f951 	bl	8000b1c <__aeabi_d2iz>
 800f87a:	ab0c      	add	r3, sp, #48	; 0x30
 800f87c:	46a3      	mov	fp, r4
 800f87e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f882:	e722      	b.n	800f6ca <__kernel_rem_pio2+0x2a2>
 800f884:	ab70      	add	r3, sp, #448	; 0x1c0
 800f886:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f88a:	ab0c      	add	r3, sp, #48	; 0x30
 800f88c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f890:	f7f0 fe40 	bl	8000514 <__aeabi_i2d>
 800f894:	4622      	mov	r2, r4
 800f896:	462b      	mov	r3, r5
 800f898:	f7f0 fea6 	bl	80005e8 <__aeabi_dmul>
 800f89c:	4632      	mov	r2, r6
 800f89e:	e9c9 0100 	strd	r0, r1, [r9]
 800f8a2:	463b      	mov	r3, r7
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	f7f0 fe9e 	bl	80005e8 <__aeabi_dmul>
 800f8ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	e713      	b.n	800f6de <__kernel_rem_pio2+0x2b6>
 800f8b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f8ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f8be:	f7f0 fe93 	bl	80005e8 <__aeabi_dmul>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	f7f0 fcd7 	bl	800027c <__adddf3>
 800f8ce:	3601      	adds	r6, #1
 800f8d0:	4604      	mov	r4, r0
 800f8d2:	460d      	mov	r5, r1
 800f8d4:	9b04      	ldr	r3, [sp, #16]
 800f8d6:	429e      	cmp	r6, r3
 800f8d8:	dc01      	bgt.n	800f8de <__kernel_rem_pio2+0x4b6>
 800f8da:	45b0      	cmp	r8, r6
 800f8dc:	daeb      	bge.n	800f8b6 <__kernel_rem_pio2+0x48e>
 800f8de:	ab48      	add	r3, sp, #288	; 0x120
 800f8e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f8e4:	e9c3 4500 	strd	r4, r5, [r3]
 800f8e8:	3f01      	subs	r7, #1
 800f8ea:	f108 0801 	add.w	r8, r8, #1
 800f8ee:	e6ff      	b.n	800f6f0 <__kernel_rem_pio2+0x2c8>
 800f8f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	dc0b      	bgt.n	800f90e <__kernel_rem_pio2+0x4e6>
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	dc6e      	bgt.n	800f9d8 <__kernel_rem_pio2+0x5b0>
 800f8fa:	d045      	beq.n	800f988 <__kernel_rem_pio2+0x560>
 800f8fc:	9b07      	ldr	r3, [sp, #28]
 800f8fe:	f003 0007 	and.w	r0, r3, #7
 800f902:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f906:	ecbd 8b02 	vpop	{d8}
 800f90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f90e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f910:	2b03      	cmp	r3, #3
 800f912:	d1f3      	bne.n	800f8fc <__kernel_rem_pio2+0x4d4>
 800f914:	ab48      	add	r3, sp, #288	; 0x120
 800f916:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f91a:	46d0      	mov	r8, sl
 800f91c:	46d9      	mov	r9, fp
 800f91e:	f1b9 0f00 	cmp.w	r9, #0
 800f922:	f1a8 0808 	sub.w	r8, r8, #8
 800f926:	dc64      	bgt.n	800f9f2 <__kernel_rem_pio2+0x5ca>
 800f928:	465c      	mov	r4, fp
 800f92a:	2c01      	cmp	r4, #1
 800f92c:	f1aa 0a08 	sub.w	sl, sl, #8
 800f930:	dc7e      	bgt.n	800fa30 <__kernel_rem_pio2+0x608>
 800f932:	2000      	movs	r0, #0
 800f934:	2100      	movs	r1, #0
 800f936:	f1bb 0f01 	cmp.w	fp, #1
 800f93a:	f300 8097 	bgt.w	800fa6c <__kernel_rem_pio2+0x644>
 800f93e:	9b02      	ldr	r3, [sp, #8]
 800f940:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f944:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f040 8099 	bne.w	800fa80 <__kernel_rem_pio2+0x658>
 800f94e:	9b01      	ldr	r3, [sp, #4]
 800f950:	e9c3 5600 	strd	r5, r6, [r3]
 800f954:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f958:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f95c:	e7ce      	b.n	800f8fc <__kernel_rem_pio2+0x4d4>
 800f95e:	ab48      	add	r3, sp, #288	; 0x120
 800f960:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	f7f0 fc88 	bl	800027c <__adddf3>
 800f96c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f970:	f1bb 0f00 	cmp.w	fp, #0
 800f974:	daf3      	bge.n	800f95e <__kernel_rem_pio2+0x536>
 800f976:	9b02      	ldr	r3, [sp, #8]
 800f978:	b113      	cbz	r3, 800f980 <__kernel_rem_pio2+0x558>
 800f97a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f97e:	4619      	mov	r1, r3
 800f980:	9b01      	ldr	r3, [sp, #4]
 800f982:	e9c3 0100 	strd	r0, r1, [r3]
 800f986:	e7b9      	b.n	800f8fc <__kernel_rem_pio2+0x4d4>
 800f988:	2000      	movs	r0, #0
 800f98a:	2100      	movs	r1, #0
 800f98c:	e7f0      	b.n	800f970 <__kernel_rem_pio2+0x548>
 800f98e:	ab48      	add	r3, sp, #288	; 0x120
 800f990:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f998:	f7f0 fc70 	bl	800027c <__adddf3>
 800f99c:	3c01      	subs	r4, #1
 800f99e:	2c00      	cmp	r4, #0
 800f9a0:	daf5      	bge.n	800f98e <__kernel_rem_pio2+0x566>
 800f9a2:	9b02      	ldr	r3, [sp, #8]
 800f9a4:	b1e3      	cbz	r3, 800f9e0 <__kernel_rem_pio2+0x5b8>
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9ac:	9c01      	ldr	r4, [sp, #4]
 800f9ae:	e9c4 2300 	strd	r2, r3, [r4]
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f9ba:	f7f0 fc5d 	bl	8000278 <__aeabi_dsub>
 800f9be:	ad4a      	add	r5, sp, #296	; 0x128
 800f9c0:	2401      	movs	r4, #1
 800f9c2:	45a3      	cmp	fp, r4
 800f9c4:	da0f      	bge.n	800f9e6 <__kernel_rem_pio2+0x5be>
 800f9c6:	9b02      	ldr	r3, [sp, #8]
 800f9c8:	b113      	cbz	r3, 800f9d0 <__kernel_rem_pio2+0x5a8>
 800f9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	9b01      	ldr	r3, [sp, #4]
 800f9d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f9d6:	e791      	b.n	800f8fc <__kernel_rem_pio2+0x4d4>
 800f9d8:	465c      	mov	r4, fp
 800f9da:	2000      	movs	r0, #0
 800f9dc:	2100      	movs	r1, #0
 800f9de:	e7de      	b.n	800f99e <__kernel_rem_pio2+0x576>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	e7e2      	b.n	800f9ac <__kernel_rem_pio2+0x584>
 800f9e6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f9ea:	f7f0 fc47 	bl	800027c <__adddf3>
 800f9ee:	3401      	adds	r4, #1
 800f9f0:	e7e7      	b.n	800f9c2 <__kernel_rem_pio2+0x59a>
 800f9f2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f9f6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	4632      	mov	r2, r6
 800f9fe:	463b      	mov	r3, r7
 800fa00:	4629      	mov	r1, r5
 800fa02:	f7f0 fc3b 	bl	800027c <__adddf3>
 800fa06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	4620      	mov	r0, r4
 800fa10:	4629      	mov	r1, r5
 800fa12:	f7f0 fc31 	bl	8000278 <__aeabi_dsub>
 800fa16:	4632      	mov	r2, r6
 800fa18:	463b      	mov	r3, r7
 800fa1a:	f7f0 fc2f 	bl	800027c <__adddf3>
 800fa1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa22:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800fa26:	ed88 7b00 	vstr	d7, [r8]
 800fa2a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fa2e:	e776      	b.n	800f91e <__kernel_rem_pio2+0x4f6>
 800fa30:	e9da 8900 	ldrd	r8, r9, [sl]
 800fa34:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fa38:	4640      	mov	r0, r8
 800fa3a:	4632      	mov	r2, r6
 800fa3c:	463b      	mov	r3, r7
 800fa3e:	4649      	mov	r1, r9
 800fa40:	f7f0 fc1c 	bl	800027c <__adddf3>
 800fa44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa48:	4602      	mov	r2, r0
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	4640      	mov	r0, r8
 800fa4e:	4649      	mov	r1, r9
 800fa50:	f7f0 fc12 	bl	8000278 <__aeabi_dsub>
 800fa54:	4632      	mov	r2, r6
 800fa56:	463b      	mov	r3, r7
 800fa58:	f7f0 fc10 	bl	800027c <__adddf3>
 800fa5c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fa64:	ed8a 7b00 	vstr	d7, [sl]
 800fa68:	3c01      	subs	r4, #1
 800fa6a:	e75e      	b.n	800f92a <__kernel_rem_pio2+0x502>
 800fa6c:	ab48      	add	r3, sp, #288	; 0x120
 800fa6e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	f7f0 fc01 	bl	800027c <__adddf3>
 800fa7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fa7e:	e75a      	b.n	800f936 <__kernel_rem_pio2+0x50e>
 800fa80:	9b01      	ldr	r3, [sp, #4]
 800fa82:	9a01      	ldr	r2, [sp, #4]
 800fa84:	601d      	str	r5, [r3, #0]
 800fa86:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fa8a:	605c      	str	r4, [r3, #4]
 800fa8c:	609f      	str	r7, [r3, #8]
 800fa8e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fa92:	60d3      	str	r3, [r2, #12]
 800fa94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa98:	6110      	str	r0, [r2, #16]
 800fa9a:	6153      	str	r3, [r2, #20]
 800fa9c:	e72e      	b.n	800f8fc <__kernel_rem_pio2+0x4d4>
 800fa9e:	bf00      	nop
 800faa0:	41700000 	.word	0x41700000
 800faa4:	3e700000 	.word	0x3e700000

0800faa8 <__kernel_tan>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	ed2d 8b04 	vpush	{d8-d9}
 800fab0:	ec5b ab10 	vmov	sl, fp, d0
 800fab4:	4be2      	ldr	r3, [pc, #904]	; (800fe40 <__kernel_tan+0x398>)
 800fab6:	b085      	sub	sp, #20
 800fab8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800fabc:	429f      	cmp	r7, r3
 800fabe:	ed8d 1b00 	vstr	d1, [sp]
 800fac2:	4606      	mov	r6, r0
 800fac4:	f8cd b00c 	str.w	fp, [sp, #12]
 800fac8:	dc24      	bgt.n	800fb14 <__kernel_tan+0x6c>
 800faca:	ee10 0a10 	vmov	r0, s0
 800face:	4659      	mov	r1, fp
 800fad0:	f7f1 f824 	bl	8000b1c <__aeabi_d2iz>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d148      	bne.n	800fb6a <__kernel_tan+0xc2>
 800fad8:	1c73      	adds	r3, r6, #1
 800fada:	4652      	mov	r2, sl
 800fadc:	4313      	orrs	r3, r2
 800fade:	433b      	orrs	r3, r7
 800fae0:	d112      	bne.n	800fb08 <__kernel_tan+0x60>
 800fae2:	ec4b ab10 	vmov	d0, sl, fp
 800fae6:	f000 f9b3 	bl	800fe50 <fabs>
 800faea:	49d6      	ldr	r1, [pc, #856]	; (800fe44 <__kernel_tan+0x39c>)
 800faec:	ec53 2b10 	vmov	r2, r3, d0
 800faf0:	2000      	movs	r0, #0
 800faf2:	f7f0 fea3 	bl	800083c <__aeabi_ddiv>
 800faf6:	4682      	mov	sl, r0
 800faf8:	468b      	mov	fp, r1
 800fafa:	ec4b ab10 	vmov	d0, sl, fp
 800fafe:	b005      	add	sp, #20
 800fb00:	ecbd 8b04 	vpop	{d8-d9}
 800fb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb08:	2e01      	cmp	r6, #1
 800fb0a:	d0f6      	beq.n	800fafa <__kernel_tan+0x52>
 800fb0c:	49ce      	ldr	r1, [pc, #824]	; (800fe48 <__kernel_tan+0x3a0>)
 800fb0e:	465b      	mov	r3, fp
 800fb10:	2000      	movs	r0, #0
 800fb12:	e7ee      	b.n	800faf2 <__kernel_tan+0x4a>
 800fb14:	4bcd      	ldr	r3, [pc, #820]	; (800fe4c <__kernel_tan+0x3a4>)
 800fb16:	429f      	cmp	r7, r3
 800fb18:	dd27      	ble.n	800fb6a <__kernel_tan+0xc2>
 800fb1a:	9b03      	ldr	r3, [sp, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	da0a      	bge.n	800fb36 <__kernel_tan+0x8e>
 800fb20:	e9dd 2100 	ldrd	r2, r1, [sp]
 800fb24:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fb28:	469b      	mov	fp, r3
 800fb2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb2e:	e9cd 2300 	strd	r2, r3, [sp]
 800fb32:	ee10 aa10 	vmov	sl, s0
 800fb36:	4652      	mov	r2, sl
 800fb38:	465b      	mov	r3, fp
 800fb3a:	a1a1      	add	r1, pc, #644	; (adr r1, 800fdc0 <__kernel_tan+0x318>)
 800fb3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb40:	f7f0 fb9a 	bl	8000278 <__aeabi_dsub>
 800fb44:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb48:	4604      	mov	r4, r0
 800fb4a:	460d      	mov	r5, r1
 800fb4c:	a19e      	add	r1, pc, #632	; (adr r1, 800fdc8 <__kernel_tan+0x320>)
 800fb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb52:	f7f0 fb91 	bl	8000278 <__aeabi_dsub>
 800fb56:	4622      	mov	r2, r4
 800fb58:	462b      	mov	r3, r5
 800fb5a:	f7f0 fb8f 	bl	800027c <__adddf3>
 800fb5e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800fdd0 <__kernel_tan+0x328>
 800fb62:	ed8d 7b00 	vstr	d7, [sp]
 800fb66:	4682      	mov	sl, r0
 800fb68:	468b      	mov	fp, r1
 800fb6a:	4652      	mov	r2, sl
 800fb6c:	465b      	mov	r3, fp
 800fb6e:	4650      	mov	r0, sl
 800fb70:	4659      	mov	r1, fp
 800fb72:	f7f0 fd39 	bl	80005e8 <__aeabi_dmul>
 800fb76:	4602      	mov	r2, r0
 800fb78:	460b      	mov	r3, r1
 800fb7a:	4680      	mov	r8, r0
 800fb7c:	4689      	mov	r9, r1
 800fb7e:	f7f0 fd33 	bl	80005e8 <__aeabi_dmul>
 800fb82:	4642      	mov	r2, r8
 800fb84:	4604      	mov	r4, r0
 800fb86:	460d      	mov	r5, r1
 800fb88:	464b      	mov	r3, r9
 800fb8a:	4650      	mov	r0, sl
 800fb8c:	4659      	mov	r1, fp
 800fb8e:	f7f0 fd2b 	bl	80005e8 <__aeabi_dmul>
 800fb92:	a391      	add	r3, pc, #580	; (adr r3, 800fdd8 <__kernel_tan+0x330>)
 800fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb98:	ec41 0b18 	vmov	d8, r0, r1
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	4629      	mov	r1, r5
 800fba0:	f7f0 fd22 	bl	80005e8 <__aeabi_dmul>
 800fba4:	a38e      	add	r3, pc, #568	; (adr r3, 800fde0 <__kernel_tan+0x338>)
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	f7f0 fb67 	bl	800027c <__adddf3>
 800fbae:	4622      	mov	r2, r4
 800fbb0:	462b      	mov	r3, r5
 800fbb2:	f7f0 fd19 	bl	80005e8 <__aeabi_dmul>
 800fbb6:	a38c      	add	r3, pc, #560	; (adr r3, 800fde8 <__kernel_tan+0x340>)
 800fbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbbc:	f7f0 fb5e 	bl	800027c <__adddf3>
 800fbc0:	4622      	mov	r2, r4
 800fbc2:	462b      	mov	r3, r5
 800fbc4:	f7f0 fd10 	bl	80005e8 <__aeabi_dmul>
 800fbc8:	a389      	add	r3, pc, #548	; (adr r3, 800fdf0 <__kernel_tan+0x348>)
 800fbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbce:	f7f0 fb55 	bl	800027c <__adddf3>
 800fbd2:	4622      	mov	r2, r4
 800fbd4:	462b      	mov	r3, r5
 800fbd6:	f7f0 fd07 	bl	80005e8 <__aeabi_dmul>
 800fbda:	a387      	add	r3, pc, #540	; (adr r3, 800fdf8 <__kernel_tan+0x350>)
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	f7f0 fb4c 	bl	800027c <__adddf3>
 800fbe4:	4622      	mov	r2, r4
 800fbe6:	462b      	mov	r3, r5
 800fbe8:	f7f0 fcfe 	bl	80005e8 <__aeabi_dmul>
 800fbec:	a384      	add	r3, pc, #528	; (adr r3, 800fe00 <__kernel_tan+0x358>)
 800fbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf2:	f7f0 fb43 	bl	800027c <__adddf3>
 800fbf6:	4642      	mov	r2, r8
 800fbf8:	464b      	mov	r3, r9
 800fbfa:	f7f0 fcf5 	bl	80005e8 <__aeabi_dmul>
 800fbfe:	a382      	add	r3, pc, #520	; (adr r3, 800fe08 <__kernel_tan+0x360>)
 800fc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc04:	ec41 0b19 	vmov	d9, r0, r1
 800fc08:	4620      	mov	r0, r4
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	f7f0 fcec 	bl	80005e8 <__aeabi_dmul>
 800fc10:	a37f      	add	r3, pc, #508	; (adr r3, 800fe10 <__kernel_tan+0x368>)
 800fc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc16:	f7f0 fb31 	bl	800027c <__adddf3>
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	462b      	mov	r3, r5
 800fc1e:	f7f0 fce3 	bl	80005e8 <__aeabi_dmul>
 800fc22:	a37d      	add	r3, pc, #500	; (adr r3, 800fe18 <__kernel_tan+0x370>)
 800fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc28:	f7f0 fb28 	bl	800027c <__adddf3>
 800fc2c:	4622      	mov	r2, r4
 800fc2e:	462b      	mov	r3, r5
 800fc30:	f7f0 fcda 	bl	80005e8 <__aeabi_dmul>
 800fc34:	a37a      	add	r3, pc, #488	; (adr r3, 800fe20 <__kernel_tan+0x378>)
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	f7f0 fb1f 	bl	800027c <__adddf3>
 800fc3e:	4622      	mov	r2, r4
 800fc40:	462b      	mov	r3, r5
 800fc42:	f7f0 fcd1 	bl	80005e8 <__aeabi_dmul>
 800fc46:	a378      	add	r3, pc, #480	; (adr r3, 800fe28 <__kernel_tan+0x380>)
 800fc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4c:	f7f0 fb16 	bl	800027c <__adddf3>
 800fc50:	4622      	mov	r2, r4
 800fc52:	462b      	mov	r3, r5
 800fc54:	f7f0 fcc8 	bl	80005e8 <__aeabi_dmul>
 800fc58:	a375      	add	r3, pc, #468	; (adr r3, 800fe30 <__kernel_tan+0x388>)
 800fc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5e:	f7f0 fb0d 	bl	800027c <__adddf3>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	ec51 0b19 	vmov	r0, r1, d9
 800fc6a:	f7f0 fb07 	bl	800027c <__adddf3>
 800fc6e:	ec53 2b18 	vmov	r2, r3, d8
 800fc72:	f7f0 fcb9 	bl	80005e8 <__aeabi_dmul>
 800fc76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc7a:	f7f0 faff 	bl	800027c <__adddf3>
 800fc7e:	4642      	mov	r2, r8
 800fc80:	464b      	mov	r3, r9
 800fc82:	f7f0 fcb1 	bl	80005e8 <__aeabi_dmul>
 800fc86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc8a:	f7f0 faf7 	bl	800027c <__adddf3>
 800fc8e:	a36a      	add	r3, pc, #424	; (adr r3, 800fe38 <__kernel_tan+0x390>)
 800fc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc94:	4604      	mov	r4, r0
 800fc96:	460d      	mov	r5, r1
 800fc98:	ec51 0b18 	vmov	r0, r1, d8
 800fc9c:	f7f0 fca4 	bl	80005e8 <__aeabi_dmul>
 800fca0:	4622      	mov	r2, r4
 800fca2:	462b      	mov	r3, r5
 800fca4:	f7f0 faea 	bl	800027c <__adddf3>
 800fca8:	460b      	mov	r3, r1
 800fcaa:	ec41 0b18 	vmov	d8, r0, r1
 800fcae:	4602      	mov	r2, r0
 800fcb0:	4659      	mov	r1, fp
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	f7f0 fae2 	bl	800027c <__adddf3>
 800fcb8:	4b64      	ldr	r3, [pc, #400]	; (800fe4c <__kernel_tan+0x3a4>)
 800fcba:	429f      	cmp	r7, r3
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	460d      	mov	r5, r1
 800fcc0:	dd3e      	ble.n	800fd40 <__kernel_tan+0x298>
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	f7f0 fc26 	bl	8000514 <__aeabi_i2d>
 800fcc8:	4622      	mov	r2, r4
 800fcca:	4680      	mov	r8, r0
 800fccc:	4689      	mov	r9, r1
 800fcce:	462b      	mov	r3, r5
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	4629      	mov	r1, r5
 800fcd4:	f7f0 fc88 	bl	80005e8 <__aeabi_dmul>
 800fcd8:	4642      	mov	r2, r8
 800fcda:	4606      	mov	r6, r0
 800fcdc:	460f      	mov	r7, r1
 800fcde:	464b      	mov	r3, r9
 800fce0:	4620      	mov	r0, r4
 800fce2:	4629      	mov	r1, r5
 800fce4:	f7f0 faca 	bl	800027c <__adddf3>
 800fce8:	4602      	mov	r2, r0
 800fcea:	460b      	mov	r3, r1
 800fcec:	4630      	mov	r0, r6
 800fcee:	4639      	mov	r1, r7
 800fcf0:	f7f0 fda4 	bl	800083c <__aeabi_ddiv>
 800fcf4:	ec53 2b18 	vmov	r2, r3, d8
 800fcf8:	f7f0 fabe 	bl	8000278 <__aeabi_dsub>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4650      	mov	r0, sl
 800fd02:	4659      	mov	r1, fp
 800fd04:	f7f0 fab8 	bl	8000278 <__aeabi_dsub>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	f7f0 fab6 	bl	800027c <__adddf3>
 800fd10:	4602      	mov	r2, r0
 800fd12:	460b      	mov	r3, r1
 800fd14:	4640      	mov	r0, r8
 800fd16:	4649      	mov	r1, r9
 800fd18:	f7f0 faae 	bl	8000278 <__aeabi_dsub>
 800fd1c:	9b03      	ldr	r3, [sp, #12]
 800fd1e:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800fd22:	f00a 0a02 	and.w	sl, sl, #2
 800fd26:	4604      	mov	r4, r0
 800fd28:	f1ca 0001 	rsb	r0, sl, #1
 800fd2c:	460d      	mov	r5, r1
 800fd2e:	f7f0 fbf1 	bl	8000514 <__aeabi_i2d>
 800fd32:	4602      	mov	r2, r0
 800fd34:	460b      	mov	r3, r1
 800fd36:	4620      	mov	r0, r4
 800fd38:	4629      	mov	r1, r5
 800fd3a:	f7f0 fc55 	bl	80005e8 <__aeabi_dmul>
 800fd3e:	e6da      	b.n	800faf6 <__kernel_tan+0x4e>
 800fd40:	2e01      	cmp	r6, #1
 800fd42:	d038      	beq.n	800fdb6 <__kernel_tan+0x30e>
 800fd44:	460f      	mov	r7, r1
 800fd46:	4689      	mov	r9, r1
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	493e      	ldr	r1, [pc, #248]	; (800fe48 <__kernel_tan+0x3a0>)
 800fd50:	f7f0 fd74 	bl	800083c <__aeabi_ddiv>
 800fd54:	2600      	movs	r6, #0
 800fd56:	e9cd 0100 	strd	r0, r1, [sp]
 800fd5a:	4652      	mov	r2, sl
 800fd5c:	465b      	mov	r3, fp
 800fd5e:	4630      	mov	r0, r6
 800fd60:	4639      	mov	r1, r7
 800fd62:	f7f0 fa89 	bl	8000278 <__aeabi_dsub>
 800fd66:	e9dd 4500 	ldrd	r4, r5, [sp]
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	ec51 0b18 	vmov	r0, r1, d8
 800fd72:	f7f0 fa81 	bl	8000278 <__aeabi_dsub>
 800fd76:	4632      	mov	r2, r6
 800fd78:	462b      	mov	r3, r5
 800fd7a:	f7f0 fc35 	bl	80005e8 <__aeabi_dmul>
 800fd7e:	46b0      	mov	r8, r6
 800fd80:	460f      	mov	r7, r1
 800fd82:	4606      	mov	r6, r0
 800fd84:	4642      	mov	r2, r8
 800fd86:	462b      	mov	r3, r5
 800fd88:	4640      	mov	r0, r8
 800fd8a:	4649      	mov	r1, r9
 800fd8c:	f7f0 fc2c 	bl	80005e8 <__aeabi_dmul>
 800fd90:	4b2c      	ldr	r3, [pc, #176]	; (800fe44 <__kernel_tan+0x39c>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	f7f0 fa72 	bl	800027c <__adddf3>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	4639      	mov	r1, r7
 800fda0:	f7f0 fa6c 	bl	800027c <__adddf3>
 800fda4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fda8:	f7f0 fc1e 	bl	80005e8 <__aeabi_dmul>
 800fdac:	4642      	mov	r2, r8
 800fdae:	462b      	mov	r3, r5
 800fdb0:	f7f0 fa64 	bl	800027c <__adddf3>
 800fdb4:	e69f      	b.n	800faf6 <__kernel_tan+0x4e>
 800fdb6:	4682      	mov	sl, r0
 800fdb8:	468b      	mov	fp, r1
 800fdba:	e69e      	b.n	800fafa <__kernel_tan+0x52>
 800fdbc:	f3af 8000 	nop.w
 800fdc0:	54442d18 	.word	0x54442d18
 800fdc4:	3fe921fb 	.word	0x3fe921fb
 800fdc8:	33145c07 	.word	0x33145c07
 800fdcc:	3c81a626 	.word	0x3c81a626
	...
 800fdd8:	74bf7ad4 	.word	0x74bf7ad4
 800fddc:	3efb2a70 	.word	0x3efb2a70
 800fde0:	32f0a7e9 	.word	0x32f0a7e9
 800fde4:	3f12b80f 	.word	0x3f12b80f
 800fde8:	1a8d1068 	.word	0x1a8d1068
 800fdec:	3f3026f7 	.word	0x3f3026f7
 800fdf0:	fee08315 	.word	0xfee08315
 800fdf4:	3f57dbc8 	.word	0x3f57dbc8
 800fdf8:	e96e8493 	.word	0xe96e8493
 800fdfc:	3f8226e3 	.word	0x3f8226e3
 800fe00:	1bb341fe 	.word	0x1bb341fe
 800fe04:	3faba1ba 	.word	0x3faba1ba
 800fe08:	db605373 	.word	0xdb605373
 800fe0c:	bef375cb 	.word	0xbef375cb
 800fe10:	a03792a6 	.word	0xa03792a6
 800fe14:	3f147e88 	.word	0x3f147e88
 800fe18:	f2f26501 	.word	0xf2f26501
 800fe1c:	3f4344d8 	.word	0x3f4344d8
 800fe20:	c9560328 	.word	0xc9560328
 800fe24:	3f6d6d22 	.word	0x3f6d6d22
 800fe28:	8406d637 	.word	0x8406d637
 800fe2c:	3f9664f4 	.word	0x3f9664f4
 800fe30:	1110fe7a 	.word	0x1110fe7a
 800fe34:	3fc11111 	.word	0x3fc11111
 800fe38:	55555563 	.word	0x55555563
 800fe3c:	3fd55555 	.word	0x3fd55555
 800fe40:	3e2fffff 	.word	0x3e2fffff
 800fe44:	3ff00000 	.word	0x3ff00000
 800fe48:	bff00000 	.word	0xbff00000
 800fe4c:	3fe59427 	.word	0x3fe59427

0800fe50 <fabs>:
 800fe50:	ec51 0b10 	vmov	r0, r1, d0
 800fe54:	ee10 2a10 	vmov	r2, s0
 800fe58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe5c:	ec43 2b10 	vmov	d0, r2, r3
 800fe60:	4770      	bx	lr
 800fe62:	0000      	movs	r0, r0
 800fe64:	0000      	movs	r0, r0
	...

0800fe68 <floor>:
 800fe68:	ec51 0b10 	vmov	r0, r1, d0
 800fe6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fe74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fe78:	2e13      	cmp	r6, #19
 800fe7a:	ee10 5a10 	vmov	r5, s0
 800fe7e:	ee10 8a10 	vmov	r8, s0
 800fe82:	460c      	mov	r4, r1
 800fe84:	dc32      	bgt.n	800feec <floor+0x84>
 800fe86:	2e00      	cmp	r6, #0
 800fe88:	da14      	bge.n	800feb4 <floor+0x4c>
 800fe8a:	a333      	add	r3, pc, #204	; (adr r3, 800ff58 <floor+0xf0>)
 800fe8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe90:	f7f0 f9f4 	bl	800027c <__adddf3>
 800fe94:	2200      	movs	r2, #0
 800fe96:	2300      	movs	r3, #0
 800fe98:	f7f0 fe36 	bl	8000b08 <__aeabi_dcmpgt>
 800fe9c:	b138      	cbz	r0, 800feae <floor+0x46>
 800fe9e:	2c00      	cmp	r4, #0
 800fea0:	da57      	bge.n	800ff52 <floor+0xea>
 800fea2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fea6:	431d      	orrs	r5, r3
 800fea8:	d001      	beq.n	800feae <floor+0x46>
 800feaa:	4c2d      	ldr	r4, [pc, #180]	; (800ff60 <floor+0xf8>)
 800feac:	2500      	movs	r5, #0
 800feae:	4621      	mov	r1, r4
 800feb0:	4628      	mov	r0, r5
 800feb2:	e025      	b.n	800ff00 <floor+0x98>
 800feb4:	4f2b      	ldr	r7, [pc, #172]	; (800ff64 <floor+0xfc>)
 800feb6:	4137      	asrs	r7, r6
 800feb8:	ea01 0307 	and.w	r3, r1, r7
 800febc:	4303      	orrs	r3, r0
 800febe:	d01f      	beq.n	800ff00 <floor+0x98>
 800fec0:	a325      	add	r3, pc, #148	; (adr r3, 800ff58 <floor+0xf0>)
 800fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec6:	f7f0 f9d9 	bl	800027c <__adddf3>
 800feca:	2200      	movs	r2, #0
 800fecc:	2300      	movs	r3, #0
 800fece:	f7f0 fe1b 	bl	8000b08 <__aeabi_dcmpgt>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d0eb      	beq.n	800feae <floor+0x46>
 800fed6:	2c00      	cmp	r4, #0
 800fed8:	bfbe      	ittt	lt
 800feda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fede:	fa43 f606 	asrlt.w	r6, r3, r6
 800fee2:	19a4      	addlt	r4, r4, r6
 800fee4:	ea24 0407 	bic.w	r4, r4, r7
 800fee8:	2500      	movs	r5, #0
 800feea:	e7e0      	b.n	800feae <floor+0x46>
 800feec:	2e33      	cmp	r6, #51	; 0x33
 800feee:	dd0b      	ble.n	800ff08 <floor+0xa0>
 800fef0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fef4:	d104      	bne.n	800ff00 <floor+0x98>
 800fef6:	ee10 2a10 	vmov	r2, s0
 800fefa:	460b      	mov	r3, r1
 800fefc:	f7f0 f9be 	bl	800027c <__adddf3>
 800ff00:	ec41 0b10 	vmov	d0, r0, r1
 800ff04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff08:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ff0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff10:	fa23 f707 	lsr.w	r7, r3, r7
 800ff14:	4207      	tst	r7, r0
 800ff16:	d0f3      	beq.n	800ff00 <floor+0x98>
 800ff18:	a30f      	add	r3, pc, #60	; (adr r3, 800ff58 <floor+0xf0>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	f7f0 f9ad 	bl	800027c <__adddf3>
 800ff22:	2200      	movs	r2, #0
 800ff24:	2300      	movs	r3, #0
 800ff26:	f7f0 fdef 	bl	8000b08 <__aeabi_dcmpgt>
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d0bf      	beq.n	800feae <floor+0x46>
 800ff2e:	2c00      	cmp	r4, #0
 800ff30:	da02      	bge.n	800ff38 <floor+0xd0>
 800ff32:	2e14      	cmp	r6, #20
 800ff34:	d103      	bne.n	800ff3e <floor+0xd6>
 800ff36:	3401      	adds	r4, #1
 800ff38:	ea25 0507 	bic.w	r5, r5, r7
 800ff3c:	e7b7      	b.n	800feae <floor+0x46>
 800ff3e:	2301      	movs	r3, #1
 800ff40:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ff44:	fa03 f606 	lsl.w	r6, r3, r6
 800ff48:	4435      	add	r5, r6
 800ff4a:	4545      	cmp	r5, r8
 800ff4c:	bf38      	it	cc
 800ff4e:	18e4      	addcc	r4, r4, r3
 800ff50:	e7f2      	b.n	800ff38 <floor+0xd0>
 800ff52:	2500      	movs	r5, #0
 800ff54:	462c      	mov	r4, r5
 800ff56:	e7aa      	b.n	800feae <floor+0x46>
 800ff58:	8800759c 	.word	0x8800759c
 800ff5c:	7e37e43c 	.word	0x7e37e43c
 800ff60:	bff00000 	.word	0xbff00000
 800ff64:	000fffff 	.word	0x000fffff

0800ff68 <scalbn>:
 800ff68:	b570      	push	{r4, r5, r6, lr}
 800ff6a:	ec55 4b10 	vmov	r4, r5, d0
 800ff6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ff72:	4606      	mov	r6, r0
 800ff74:	462b      	mov	r3, r5
 800ff76:	b99a      	cbnz	r2, 800ffa0 <scalbn+0x38>
 800ff78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ff7c:	4323      	orrs	r3, r4
 800ff7e:	d036      	beq.n	800ffee <scalbn+0x86>
 800ff80:	4b39      	ldr	r3, [pc, #228]	; (8010068 <scalbn+0x100>)
 800ff82:	4629      	mov	r1, r5
 800ff84:	ee10 0a10 	vmov	r0, s0
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f7f0 fb2d 	bl	80005e8 <__aeabi_dmul>
 800ff8e:	4b37      	ldr	r3, [pc, #220]	; (801006c <scalbn+0x104>)
 800ff90:	429e      	cmp	r6, r3
 800ff92:	4604      	mov	r4, r0
 800ff94:	460d      	mov	r5, r1
 800ff96:	da10      	bge.n	800ffba <scalbn+0x52>
 800ff98:	a32b      	add	r3, pc, #172	; (adr r3, 8010048 <scalbn+0xe0>)
 800ff9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9e:	e03a      	b.n	8010016 <scalbn+0xae>
 800ffa0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ffa4:	428a      	cmp	r2, r1
 800ffa6:	d10c      	bne.n	800ffc2 <scalbn+0x5a>
 800ffa8:	ee10 2a10 	vmov	r2, s0
 800ffac:	4620      	mov	r0, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	f7f0 f964 	bl	800027c <__adddf3>
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	460d      	mov	r5, r1
 800ffb8:	e019      	b.n	800ffee <scalbn+0x86>
 800ffba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ffbe:	460b      	mov	r3, r1
 800ffc0:	3a36      	subs	r2, #54	; 0x36
 800ffc2:	4432      	add	r2, r6
 800ffc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ffc8:	428a      	cmp	r2, r1
 800ffca:	dd08      	ble.n	800ffde <scalbn+0x76>
 800ffcc:	2d00      	cmp	r5, #0
 800ffce:	a120      	add	r1, pc, #128	; (adr r1, 8010050 <scalbn+0xe8>)
 800ffd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffd4:	da1c      	bge.n	8010010 <scalbn+0xa8>
 800ffd6:	a120      	add	r1, pc, #128	; (adr r1, 8010058 <scalbn+0xf0>)
 800ffd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffdc:	e018      	b.n	8010010 <scalbn+0xa8>
 800ffde:	2a00      	cmp	r2, #0
 800ffe0:	dd08      	ble.n	800fff4 <scalbn+0x8c>
 800ffe2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffe6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ffee:	ec45 4b10 	vmov	d0, r4, r5
 800fff2:	bd70      	pop	{r4, r5, r6, pc}
 800fff4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fff8:	da19      	bge.n	801002e <scalbn+0xc6>
 800fffa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fffe:	429e      	cmp	r6, r3
 8010000:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010004:	dd0a      	ble.n	801001c <scalbn+0xb4>
 8010006:	a112      	add	r1, pc, #72	; (adr r1, 8010050 <scalbn+0xe8>)
 8010008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1e2      	bne.n	800ffd6 <scalbn+0x6e>
 8010010:	a30f      	add	r3, pc, #60	; (adr r3, 8010050 <scalbn+0xe8>)
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	f7f0 fae7 	bl	80005e8 <__aeabi_dmul>
 801001a:	e7cb      	b.n	800ffb4 <scalbn+0x4c>
 801001c:	a10a      	add	r1, pc, #40	; (adr r1, 8010048 <scalbn+0xe0>)
 801001e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d0b8      	beq.n	800ff98 <scalbn+0x30>
 8010026:	a10e      	add	r1, pc, #56	; (adr r1, 8010060 <scalbn+0xf8>)
 8010028:	e9d1 0100 	ldrd	r0, r1, [r1]
 801002c:	e7b4      	b.n	800ff98 <scalbn+0x30>
 801002e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010032:	3236      	adds	r2, #54	; 0x36
 8010034:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010038:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801003c:	4620      	mov	r0, r4
 801003e:	4b0c      	ldr	r3, [pc, #48]	; (8010070 <scalbn+0x108>)
 8010040:	2200      	movs	r2, #0
 8010042:	e7e8      	b.n	8010016 <scalbn+0xae>
 8010044:	f3af 8000 	nop.w
 8010048:	c2f8f359 	.word	0xc2f8f359
 801004c:	01a56e1f 	.word	0x01a56e1f
 8010050:	8800759c 	.word	0x8800759c
 8010054:	7e37e43c 	.word	0x7e37e43c
 8010058:	8800759c 	.word	0x8800759c
 801005c:	fe37e43c 	.word	0xfe37e43c
 8010060:	c2f8f359 	.word	0xc2f8f359
 8010064:	81a56e1f 	.word	0x81a56e1f
 8010068:	43500000 	.word	0x43500000
 801006c:	ffff3cb0 	.word	0xffff3cb0
 8010070:	3c900000 	.word	0x3c900000

08010074 <_init>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	bf00      	nop
 8010078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801007a:	bc08      	pop	{r3}
 801007c:	469e      	mov	lr, r3
 801007e:	4770      	bx	lr

08010080 <_fini>:
 8010080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010082:	bf00      	nop
 8010084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010086:	bc08      	pop	{r3}
 8010088:	469e      	mov	lr, r3
 801008a:	4770      	bx	lr
