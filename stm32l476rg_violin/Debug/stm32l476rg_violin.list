
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  08013b38  08013b38  00023b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014618  08014618  000301c4  2**0
                  CONTENTS
  4 .ARM          00000008  08014618  08014618  00024618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014620  08014620  000301c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014620  08014620  00024620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014624  08014624  00024624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08014628  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010390  200001c4  080147ec  000301c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010554  080147ec  00030554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000352d2  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fcf  00000000  00000000  000654c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026c8  00000000  00000000  0006b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002470  00000000  00000000  0006db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f447  00000000  00000000  0006ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002da00  00000000  00000000  0009f417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a32d  00000000  00000000  000cce17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e7144  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0d8  00000000  00000000  001e7198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013b1c 	.word	0x08013b1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	08013b1c 	.word	0x08013b1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <SELECT+0x18>)
 8000f5e:	f005 f83d 	bl	8005fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f003 f998 	bl	8004298 <HAL_Delay>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	48000400 	.word	0x48000400

08000f70 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <DESELECT+0x18>)
 8000f7a:	f005 f82f 	bl	8005fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f003 f98a 	bl	8004298 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	48000400 	.word	0x48000400

08000f8c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f96:	bf00      	nop
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SPI_TxByte+0x30>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d1f8      	bne.n	8000f98 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fa6:	1df9      	adds	r1, r7, #7
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	2201      	movs	r2, #1
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <SPI_TxByte+0x30>)
 8000fae:	f006 fd32 	bl	8007a16 <HAL_SPI_Transmit>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000d2c8 	.word	0x2000d2c8

08000fc0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fcc:	bf00      	nop
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <SPI_TxBuffer+0x30>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d1f8      	bne.n	8000fce <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fdc:	887a      	ldrh	r2, [r7, #2]
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <SPI_TxBuffer+0x30>)
 8000fe4:	f006 fd17 	bl	8007a16 <HAL_SPI_Transmit>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000d2c8 	.word	0x2000d2c8

08000ff4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ffe:	bf00      	nop
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <SPI_RxByte+0x34>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b02      	cmp	r3, #2
 800100c:	d1f8      	bne.n	8001000 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800100e:	1dba      	adds	r2, r7, #6
 8001010:	1df9      	adds	r1, r7, #7
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <SPI_RxByte+0x34>)
 800101a:	f006 fe6a 	bl	8007cf2 <HAL_SPI_TransmitReceive>

	return data;
 800101e:	79bb      	ldrb	r3, [r7, #6]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000d2c8 	.word	0x2000d2c8

0800102c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001034:	f7ff ffde 	bl	8000ff4 <SPI_RxByte>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	701a      	strb	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <SD_ReadyWait+0x30>)
 8001050:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001054:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001056:	f7ff ffcd 	bl	8000ff4 <SPI_RxByte>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2bff      	cmp	r3, #255	; 0xff
 8001062:	d003      	beq.n	800106c <SD_ReadyWait+0x24>
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SD_ReadyWait+0x30>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f4      	bne.n	8001056 <SD_ReadyWait+0xe>

	return res;
 800106c:	79fb      	ldrb	r3, [r7, #7]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000364c 	.word	0x2000364c

0800107c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001082:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001086:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001088:	f7ff ff72 	bl	8000f70 <DESELECT>
	for(int i = 0; i < 10; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	e005      	b.n	800109e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001092:	20ff      	movs	r0, #255	; 0xff
 8001094:	f7ff ff7a 	bl	8000f8c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	ddf6      	ble.n	8001092 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80010a4:	f7ff ff56 	bl	8000f54 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010bc:	2395      	movs	r3, #149	; 0x95
 80010be:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010c0:	463b      	mov	r3, r7
 80010c2:	2106      	movs	r1, #6
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff7b 	bl	8000fc0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ca:	e002      	b.n	80010d2 <SD_PowerOn+0x56>
	{
		cnt--;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010d2:	f7ff ff8f 	bl	8000ff4 <SPI_RxByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d002      	beq.n	80010e2 <SD_PowerOn+0x66>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f4      	bne.n	80010cc <SD_PowerOn+0x50>
	}

	DESELECT();
 80010e2:	f7ff ff45 	bl	8000f70 <DESELECT>
	SPI_TxByte(0XFF);
 80010e6:	20ff      	movs	r0, #255	; 0xff
 80010e8:	f7ff ff50 	bl	8000f8c <SPI_TxByte>

	PowerFlag = 1;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <SD_PowerOn+0x80>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001e1 	.word	0x200001e1

08001100 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <SD_PowerOff+0x14>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	200001e1 	.word	0x200001e1

08001118 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <SD_CheckPower+0x14>)
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200001e1 	.word	0x200001e1

08001130 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <SD_RxDataBlock+0x58>)
 800113c:	22c8      	movs	r2, #200	; 0xc8
 800113e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001140:	f7ff ff58 	bl	8000ff4 <SPI_RxByte>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d103      	bne.n	8001156 <SD_RxDataBlock+0x26>
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <SD_RxDataBlock+0x58>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f4      	bne.n	8001140 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2bfe      	cmp	r3, #254	; 0xfe
 800115a:	d001      	beq.n	8001160 <SD_RxDataBlock+0x30>
 800115c:	2300      	movs	r3, #0
 800115e:	e00f      	b.n	8001180 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff60 	bl	800102c <SPI_RxBytePtr>
	} while(len--);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	603a      	str	r2, [r7, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f4      	bne.n	8001160 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001176:	f7ff ff3d 	bl	8000ff4 <SPI_RxByte>
	SPI_RxByte();
 800117a:	f7ff ff3b 	bl	8000ff4 <SPI_RxByte>

	return TRUE;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000364e 	.word	0x2000364e

0800118c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800119c:	f7ff ff54 	bl	8001048 <SD_ReadyWait>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2bff      	cmp	r3, #255	; 0xff
 80011a4:	d001      	beq.n	80011aa <SD_TxDataBlock+0x1e>
 80011a6:	2300      	movs	r3, #0
 80011a8:	e02f      	b.n	800120a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff feed 	bl	8000f8c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	2bfd      	cmp	r3, #253	; 0xfd
 80011b6:	d020      	beq.n	80011fa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff feff 	bl	8000fc0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011c2:	f7ff ff17 	bl	8000ff4 <SPI_RxByte>
		SPI_RxByte();
 80011c6:	f7ff ff15 	bl	8000ff4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011ca:	e00b      	b.n	80011e4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011cc:	f7ff ff12 	bl	8000ff4 <SPI_RxByte>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d006      	beq.n	80011ec <SD_TxDataBlock+0x60>
			i++;
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d9f0      	bls.n	80011cc <SD_TxDataBlock+0x40>
 80011ea:	e000      	b.n	80011ee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011ec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011ee:	bf00      	nop
 80011f0:	f7ff ff00 	bl	8000ff4 <SPI_RxByte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0fa      	beq.n	80011f0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b05      	cmp	r3, #5
 8001202:	d101      	bne.n	8001208 <SD_TxDataBlock+0x7c>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	6039      	str	r1, [r7, #0]
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800121e:	f7ff ff13 	bl	8001048 <SD_ReadyWait>
 8001222:	4603      	mov	r3, r0
 8001224:	2bff      	cmp	r3, #255	; 0xff
 8001226:	d001      	beq.n	800122c <SD_SendCmd+0x1a>
 8001228:	23ff      	movs	r3, #255	; 0xff
 800122a:	e042      	b.n	80012b2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff feac 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	0e1b      	lsrs	r3, r3, #24
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fea6 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fea0 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fe9a 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe95 	bl	8000f8c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b40      	cmp	r3, #64	; 0x40
 8001266:	d102      	bne.n	800126e <SD_SendCmd+0x5c>
 8001268:	2395      	movs	r3, #149	; 0x95
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e007      	b.n	800127e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b48      	cmp	r3, #72	; 0x48
 8001272:	d102      	bne.n	800127a <SD_SendCmd+0x68>
 8001274:	2387      	movs	r3, #135	; 0x87
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e001      	b.n	800127e <SD_SendCmd+0x6c>
	else crc = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe83 	bl	8000f8c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b4c      	cmp	r3, #76	; 0x4c
 800128a:	d101      	bne.n	8001290 <SD_SendCmd+0x7e>
 800128c:	f7ff feb2 	bl	8000ff4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001290:	230a      	movs	r3, #10
 8001292:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001294:	f7ff feae 	bl	8000ff4 <SPI_RxByte>
 8001298:	4603      	mov	r3, r0
 800129a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800129c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da05      	bge.n	80012b0 <SD_SendCmd+0x9e>
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	73bb      	strb	r3, [r7, #14]
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f1      	bne.n	8001294 <SD_SendCmd+0x82>

	return res;
 80012b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SD_disk_initialize+0x14>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d1      	b.n	8001474 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <SD_disk_initialize+0x1c0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <SD_disk_initialize+0x2a>
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <SD_disk_initialize+0x1c0>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	e0c6      	b.n	8001474 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80012e6:	f7ff fec9 	bl	800107c <SD_PowerOn>

	/* slave select */
	SELECT();
 80012ea:	f7ff fe33 	bl	8000f54 <SELECT>

	/* check disk type */
	type = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012f2:	2100      	movs	r1, #0
 80012f4:	2040      	movs	r0, #64	; 0x40
 80012f6:	f7ff ff8c 	bl	8001212 <SD_SendCmd>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 80a1 	bne.w	8001444 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001302:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <SD_disk_initialize+0x1c4>)
 8001304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001308:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800130a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800130e:	2048      	movs	r0, #72	; 0x48
 8001310:	f7ff ff7f 	bl	8001212 <SD_SendCmd>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d155      	bne.n	80013c6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e00c      	b.n	800133a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001320:	7bfc      	ldrb	r4, [r7, #15]
 8001322:	f7ff fe67 	bl	8000ff4 <SPI_RxByte>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4423      	add	r3, r4
 8001330:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d9ef      	bls.n	8001320 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d17e      	bne.n	8001444 <SD_disk_initialize+0x188>
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	2baa      	cmp	r3, #170	; 0xaa
 800134a:	d17b      	bne.n	8001444 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800134c:	2100      	movs	r1, #0
 800134e:	2077      	movs	r0, #119	; 0x77
 8001350:	f7ff ff5f 	bl	8001212 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d807      	bhi.n	800136a <SD_disk_initialize+0xae>
 800135a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800135e:	2069      	movs	r0, #105	; 0x69
 8001360:	f7ff ff57 	bl	8001212 <SD_SendCmd>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <SD_disk_initialize+0x1c4>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ec      	bne.n	800134c <SD_disk_initialize+0x90>
 8001372:	e000      	b.n	8001376 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001374:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <SD_disk_initialize+0x1c4>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d062      	beq.n	8001444 <SD_disk_initialize+0x188>
 800137e:	2100      	movs	r1, #0
 8001380:	207a      	movs	r0, #122	; 0x7a
 8001382:	f7ff ff46 	bl	8001212 <SD_SendCmd>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d15b      	bne.n	8001444 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e00c      	b.n	80013ac <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001392:	7bfc      	ldrb	r4, [r7, #15]
 8001394:	f7ff fe2e 	bl	8000ff4 <SPI_RxByte>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4423      	add	r3, r4
 80013a2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9ef      	bls.n	8001392 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013b2:	7a3b      	ldrb	r3, [r7, #8]
 80013b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SD_disk_initialize+0x104>
 80013bc:	230c      	movs	r3, #12
 80013be:	e000      	b.n	80013c2 <SD_disk_initialize+0x106>
 80013c0:	2304      	movs	r3, #4
 80013c2:	73bb      	strb	r3, [r7, #14]
 80013c4:	e03e      	b.n	8001444 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013c6:	2100      	movs	r1, #0
 80013c8:	2077      	movs	r0, #119	; 0x77
 80013ca:	f7ff ff22 	bl	8001212 <SD_SendCmd>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d808      	bhi.n	80013e6 <SD_disk_initialize+0x12a>
 80013d4:	2100      	movs	r1, #0
 80013d6:	2069      	movs	r0, #105	; 0x69
 80013d8:	f7ff ff1b 	bl	8001212 <SD_SendCmd>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d801      	bhi.n	80013e6 <SD_disk_initialize+0x12a>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e000      	b.n	80013e8 <SD_disk_initialize+0x12c>
 80013e6:	2301      	movs	r3, #1
 80013e8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d10e      	bne.n	800140e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013f0:	2100      	movs	r1, #0
 80013f2:	2077      	movs	r0, #119	; 0x77
 80013f4:	f7ff ff0d 	bl	8001212 <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d80e      	bhi.n	800141c <SD_disk_initialize+0x160>
 80013fe:	2100      	movs	r1, #0
 8001400:	2069      	movs	r0, #105	; 0x69
 8001402:	f7ff ff06 	bl	8001212 <SD_SendCmd>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <SD_disk_initialize+0x160>
 800140c:	e00c      	b.n	8001428 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800140e:	2100      	movs	r1, #0
 8001410:	2041      	movs	r0, #65	; 0x41
 8001412:	f7ff fefe 	bl	8001212 <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <SD_disk_initialize+0x1c4>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e2      	bne.n	80013ea <SD_disk_initialize+0x12e>
 8001424:	e000      	b.n	8001428 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001426:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <SD_disk_initialize+0x1c4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <SD_disk_initialize+0x184>
 8001430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001434:	2050      	movs	r0, #80	; 0x50
 8001436:	f7ff feec 	bl	8001212 <SD_SendCmd>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SD_disk_initialize+0x188>
 8001440:	2300      	movs	r3, #0
 8001442:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <SD_disk_initialize+0x1c8>)
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800144a:	f7ff fd91 	bl	8000f70 <DESELECT>
	SPI_RxByte();
 800144e:	f7ff fdd1 	bl	8000ff4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <SD_disk_initialize+0x1c0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SD_disk_initialize+0x1c0>)
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e001      	b.n	800146e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800146a:	f7ff fe49 	bl	8001100 <SD_PowerOff>
	}

	return Stat;
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <SD_disk_initialize+0x1c0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	20000000 	.word	0x20000000
 8001480:	2000364e 	.word	0x2000364e
 8001484:	200001e0 	.word	0x200001e0

08001488 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SD_disk_status+0x14>
 8001498:	2301      	movs	r3, #1
 800149a:	e002      	b.n	80014a2 <SD_disk_status+0x1a>
	return Stat;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SD_disk_status+0x28>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000

080014b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <SD_disk_read+0x1c>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <SD_disk_read+0x20>
 80014d0:	2304      	movs	r3, #4
 80014d2:	e051      	b.n	8001578 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <SD_disk_read+0xcc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SD_disk_read+0x32>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e048      	b.n	8001578 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <SD_disk_read+0xd0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <SD_disk_read+0x44>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	607b      	str	r3, [r7, #4]

	SELECT();
 80014f8:	f7ff fd2c 	bl	8000f54 <SELECT>

	if (count == 1)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d111      	bne.n	8001526 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2051      	movs	r0, #81	; 0x51
 8001506:	f7ff fe84 	bl	8001212 <SD_SendCmd>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d129      	bne.n	8001564 <SD_disk_read+0xb0>
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff fe0b 	bl	8001130 <SD_RxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d021      	beq.n	8001564 <SD_disk_read+0xb0>
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	e01e      	b.n	8001564 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	2052      	movs	r0, #82	; 0x52
 800152a:	f7ff fe72 	bl	8001212 <SD_SendCmd>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d117      	bne.n	8001564 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff fdf9 	bl	8001130 <SD_RxDataBlock>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00a      	beq.n	800155a <SD_disk_read+0xa6>
				buff += 512;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800154a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ed      	bne.n	8001534 <SD_disk_read+0x80>
 8001558:	e000      	b.n	800155c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800155a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	204c      	movs	r0, #76	; 0x4c
 8001560:	f7ff fe57 	bl	8001212 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001564:	f7ff fd04 	bl	8000f70 <DESELECT>
	SPI_RxByte();
 8001568:	f7ff fd44 	bl	8000ff4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf14      	ite	ne
 8001572:	2301      	movne	r3, #1
 8001574:	2300      	moveq	r3, #0
 8001576:	b2db      	uxtb	r3, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000000 	.word	0x20000000
 8001584:	200001e0 	.word	0x200001e0

08001588 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <SD_disk_write+0x1c>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <SD_disk_write+0x20>
 80015a4:	2304      	movs	r3, #4
 80015a6:	e06b      	b.n	8001680 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <SD_disk_write+0x100>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SD_disk_write+0x32>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e062      	b.n	8001680 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <SD_disk_write+0x100>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SD_disk_write+0x44>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e059      	b.n	8001680 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <SD_disk_write+0x104>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <SD_disk_write+0x56>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	607b      	str	r3, [r7, #4]

	SELECT();
 80015de:	f7ff fcb9 	bl	8000f54 <SELECT>

	if (count == 1)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d110      	bne.n	800160a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	2058      	movs	r0, #88	; 0x58
 80015ec:	f7ff fe11 	bl	8001212 <SD_SendCmd>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d13a      	bne.n	800166c <SD_disk_write+0xe4>
 80015f6:	21fe      	movs	r1, #254	; 0xfe
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f7ff fdc7 	bl	800118c <SD_TxDataBlock>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d033      	beq.n	800166c <SD_disk_write+0xe4>
			count = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	e030      	b.n	800166c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <SD_disk_write+0x104>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001616:	2100      	movs	r1, #0
 8001618:	2077      	movs	r0, #119	; 0x77
 800161a:	f7ff fdfa 	bl	8001212 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	2057      	movs	r0, #87	; 0x57
 8001622:	f7ff fdf6 	bl	8001212 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	2059      	movs	r0, #89	; 0x59
 800162a:	f7ff fdf2 	bl	8001212 <SD_SendCmd>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11b      	bne.n	800166c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001634:	21fc      	movs	r1, #252	; 0xfc
 8001636:	68b8      	ldr	r0, [r7, #8]
 8001638:	f7ff fda8 	bl	800118c <SD_TxDataBlock>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <SD_disk_write+0xd0>
				buff += 512;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001648:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3b01      	subs	r3, #1
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ee      	bne.n	8001634 <SD_disk_write+0xac>
 8001656:	e000      	b.n	800165a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001658:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800165a:	21fd      	movs	r1, #253	; 0xfd
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fd95 	bl	800118c <SD_TxDataBlock>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <SD_disk_write+0xe4>
			{
				count = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800166c:	f7ff fc80 	bl	8000f70 <DESELECT>
	SPI_RxByte();
 8001670:	f7ff fcc0 	bl	8000ff4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	200001e0 	.word	0x200001e0

08001690 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	603a      	str	r2, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	460b      	mov	r3, r1
 800169e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SD_disk_ioctl+0x1e>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e115      	b.n	80018da <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d124      	bne.n	8001704 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d012      	beq.n	80016e8 <SD_disk_ioctl+0x58>
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	dc1a      	bgt.n	80016fc <SD_disk_ioctl+0x6c>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <SD_disk_ioctl+0x40>
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d006      	beq.n	80016dc <SD_disk_ioctl+0x4c>
 80016ce:	e015      	b.n	80016fc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016d0:	f7ff fd16 	bl	8001100 <SD_PowerOff>
			res = RES_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016da:	e0fc      	b.n	80018d6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016dc:	f7ff fcce 	bl	800107c <SD_PowerOn>
			res = RES_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016e6:	e0f6      	b.n	80018d6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	1c5c      	adds	r4, r3, #1
 80016ec:	f7ff fd14 	bl	8001118 <SD_CheckPower>
 80016f0:	4603      	mov	r3, r0
 80016f2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016fa:	e0ec      	b.n	80018d6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016fc:	2304      	movs	r3, #4
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001702:	e0e8      	b.n	80018d6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001704:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <SD_disk_ioctl+0x254>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SD_disk_ioctl+0x86>
 8001712:	2303      	movs	r3, #3
 8001714:	e0e1      	b.n	80018da <SD_disk_ioctl+0x24a>

		SELECT();
 8001716:	f7ff fc1d 	bl	8000f54 <SELECT>

		switch (ctrl)
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	2b0d      	cmp	r3, #13
 800171e:	f200 80cb 	bhi.w	80018b8 <SD_disk_ioctl+0x228>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <SD_disk_ioctl+0x98>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001823 	.word	0x08001823
 800172c:	08001761 	.word	0x08001761
 8001730:	08001813 	.word	0x08001813
 8001734:	080018b9 	.word	0x080018b9
 8001738:	080018b9 	.word	0x080018b9
 800173c:	080018b9 	.word	0x080018b9
 8001740:	080018b9 	.word	0x080018b9
 8001744:	080018b9 	.word	0x080018b9
 8001748:	080018b9 	.word	0x080018b9
 800174c:	080018b9 	.word	0x080018b9
 8001750:	080018b9 	.word	0x080018b9
 8001754:	08001835 	.word	0x08001835
 8001758:	08001859 	.word	0x08001859
 800175c:	0800187d 	.word	0x0800187d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001760:	2100      	movs	r1, #0
 8001762:	2049      	movs	r0, #73	; 0x49
 8001764:	f7ff fd55 	bl	8001212 <SD_SendCmd>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80a8 	bne.w	80018c0 <SD_disk_ioctl+0x230>
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2110      	movs	r1, #16
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fcda 	bl	8001130 <SD_RxDataBlock>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 809e 	beq.w	80018c0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001784:	7b3b      	ldrb	r3, [r7, #12]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10e      	bne.n	80017ac <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800178e:	7d7b      	ldrb	r3, [r7, #21]
 8001790:	b29a      	uxth	r2, r3
 8001792:	7d3b      	ldrb	r3, [r7, #20]
 8001794:	b29b      	uxth	r3, r3
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	4413      	add	r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80017a2:	8bfb      	ldrh	r3, [r7, #30]
 80017a4:	029a      	lsls	r2, r3, #10
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e02e      	b.n	800180a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017ac:	7c7b      	ldrb	r3, [r7, #17]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	7dbb      	ldrb	r3, [r7, #22]
 80017b6:	09db      	lsrs	r3, r3, #7
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	7d7b      	ldrb	r3, [r7, #21]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0306 	and.w	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3302      	adds	r3, #2
 80017d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017d4:	7d3b      	ldrb	r3, [r7, #20]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b29a      	uxth	r2, r3
 80017dc:	7cfb      	ldrb	r3, [r7, #19]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	7cbb      	ldrb	r3, [r7, #18]
 80017ea:	029b      	lsls	r3, r3, #10
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017fc:	8bfa      	ldrh	r2, [r7, #30]
 80017fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001802:	3b09      	subs	r3, #9
 8001804:	409a      	lsls	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001810:	e056      	b.n	80018c0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001820:	e055      	b.n	80018ce <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001822:	f7ff fc11 	bl	8001048 <SD_ReadyWait>
 8001826:	4603      	mov	r3, r0
 8001828:	2bff      	cmp	r3, #255	; 0xff
 800182a:	d14b      	bne.n	80018c4 <SD_disk_ioctl+0x234>
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001832:	e047      	b.n	80018c4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001834:	2100      	movs	r1, #0
 8001836:	2049      	movs	r0, #73	; 0x49
 8001838:	f7ff fceb 	bl	8001212 <SD_SendCmd>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d142      	bne.n	80018c8 <SD_disk_ioctl+0x238>
 8001842:	2110      	movs	r1, #16
 8001844:	6a38      	ldr	r0, [r7, #32]
 8001846:	f7ff fc73 	bl	8001130 <SD_RxDataBlock>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03b      	beq.n	80018c8 <SD_disk_ioctl+0x238>
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001856:	e037      	b.n	80018c8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001858:	2100      	movs	r1, #0
 800185a:	204a      	movs	r0, #74	; 0x4a
 800185c:	f7ff fcd9 	bl	8001212 <SD_SendCmd>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d132      	bne.n	80018cc <SD_disk_ioctl+0x23c>
 8001866:	2110      	movs	r1, #16
 8001868:	6a38      	ldr	r0, [r7, #32]
 800186a:	f7ff fc61 	bl	8001130 <SD_RxDataBlock>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02b      	beq.n	80018cc <SD_disk_ioctl+0x23c>
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800187a:	e027      	b.n	80018cc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800187c:	2100      	movs	r1, #0
 800187e:	207a      	movs	r0, #122	; 0x7a
 8001880:	f7ff fcc7 	bl	8001212 <SD_SendCmd>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d116      	bne.n	80018b8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001890:	e00b      	b.n	80018aa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001892:	6a3c      	ldr	r4, [r7, #32]
 8001894:	1c63      	adds	r3, r4, #1
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	f7ff fbac 	bl	8000ff4 <SPI_RxByte>
 800189c:	4603      	mov	r3, r0
 800189e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80018a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018a4:	3301      	adds	r3, #1
 80018a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d9ef      	bls.n	8001892 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80018b8:	2304      	movs	r3, #4
 80018ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018be:	e006      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018c0:	bf00      	nop
 80018c2:	e004      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018c4:	bf00      	nop
 80018c6:	e002      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018c8:	bf00      	nop
 80018ca:	e000      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018cc:	bf00      	nop
		}

		DESELECT();
 80018ce:	f7ff fb4f 	bl	8000f70 <DESELECT>
		SPI_RxByte();
 80018d2:	f7ff fb8f 	bl	8000ff4 <SPI_RxByte>
	}

	return res;
 80018d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018da:	4618      	mov	r0, r3
 80018dc:	372c      	adds	r7, #44	; 0x2c
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000

080018e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 80018f0:	1d39      	adds	r1, r7, #4
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	2201      	movs	r2, #1
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <__io_putchar+0x20>)
 80018f8:	f008 fbfa 	bl	800a0f0 <HAL_UART_Transmit>
	return ch;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000d32c 	.word	0x2000d32c

0800190c <transmit_uart>:

void transmit_uart(char *string) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7fe fc5b 	bl	80001d0 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, pdMS_TO_TICKS(100));
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	b29a      	uxth	r2, r3
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <transmit_uart+0x28>)
 8001928:	f008 fbe2 	bl	800a0f0 <HAL_UART_Transmit>
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000d32c 	.word	0x2000d32c

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193e:	f002 fc6b 	bl	8004218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001942:	f000 f877 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001946:	f000 fd9f 	bl	8002488 <MX_GPIO_Init>
  MX_DMA_Init();
 800194a:	f000 fd53 	bl	80023f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800194e:	f000 fd21 	bl	8002394 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001952:	f000 f8f7 	bl	8001b44 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001956:	f000 fa19 	bl	8001d8c <MX_TIM1_Init>
  MX_FATFS_Init();
 800195a:	f009 f84f 	bl	800a9fc <MX_FATFS_Init>
  MX_SPI1_Init();
 800195e:	f000 f9d7 	bl	8001d10 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001962:	f000 fba3 	bl	80020ac <MX_TIM15_Init>
  MX_TIM16_Init();
 8001966:	f000 fc25 	bl	80021b4 <MX_TIM16_Init>
  MX_TIM17_Init();
 800196a:	f000 fc9b 	bl	80022a4 <MX_TIM17_Init>
  MX_I2C1_Init();
 800196e:	f000 f98f 	bl	8001c90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001972:	f000 fa9b 	bl	8001eac <MX_TIM3_Init>
  MX_TIM8_Init();
 8001976:	f000 fb09 	bl	8001f8c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_vInit(&xWS2812B, &htim3, &htim8, &hdma_tim3_ch1_trig, &hdma_tim3_ch3, &hdma_tim3_ch4_up, &hdma_tim8_ch2);
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <main+0xac>)
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <main+0xb0>)
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <main+0xb4>)
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <main+0xb8>)
 8001988:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <main+0xbc>)
 800198a:	491b      	ldr	r1, [pc, #108]	; (80019f8 <main+0xc0>)
 800198c:	481b      	ldr	r0, [pc, #108]	; (80019fc <main+0xc4>)
 800198e:	f002 fa33 	bl	8003df8 <WS2812B_vInit>

	//[!] Care for HAL_ADC_START_DMA sampling too fast due to small array for DMA (ex: 4 instead of 400. Reduce sampling time of ADC if such case or filter more samples)
  HAL_ADC_Start_DMA(&hadc1, adcValue, ADC_CHANNEL_COUNT);
 8001992:	2204      	movs	r2, #4
 8001994:	491a      	ldr	r1, [pc, #104]	; (8001a00 <main+0xc8>)
 8001996:	481b      	ldr	r0, [pc, #108]	; (8001a04 <main+0xcc>)
 8001998:	f002 ffce 	bl	8004938 <HAL_ADC_Start_DMA>
  //HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800199c:	f00c f918 	bl	800dbd0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <main+0xd0>)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4819      	ldr	r0, [pc, #100]	; (8001a0c <main+0xd4>)
 80019a6:	f00c f972 	bl	800dc8e <osThreadNew>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <main+0xd8>)
 80019ae:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <main+0xdc>)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4818      	ldr	r0, [pc, #96]	; (8001a18 <main+0xe0>)
 80019b6:	f00c f96a 	bl	800dc8e <osThreadNew>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <main+0xe4>)
 80019be:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <main+0xe8>)
 80019c2:	2100      	movs	r1, #0
 80019c4:	4817      	ldr	r0, [pc, #92]	; (8001a24 <main+0xec>)
 80019c6:	f00c f962 	bl	800dc8e <osThreadNew>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <main+0xf0>)
 80019ce:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 80019d0:	4816      	ldr	r0, [pc, #88]	; (8001a2c <main+0xf4>)
 80019d2:	f00c fa36 	bl	800de42 <osEventFlagsNew>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <main+0xf8>)
 80019da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019dc:	f00c f91c 	bl	800dc18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <main+0xa8>
 80019e2:	bf00      	nop
 80019e4:	20003654 	.word	0x20003654
 80019e8:	2000d278 	.word	0x2000d278
 80019ec:	20004f94 	.word	0x20004f94
 80019f0:	2000513c 	.word	0x2000513c
 80019f4:	200036a0 	.word	0x200036a0
 80019f8:	20004fdc 	.word	0x20004fdc
 80019fc:	200047c8 	.word	0x200047c8
 8001a00:	2000d3b4 	.word	0x2000d3b4
 8001a04:	20005028 	.word	0x20005028
 8001a08:	08013e94 	.word	0x08013e94
 8001a0c:	08002535 	.word	0x08002535
 8001a10:	2000508c 	.word	0x2000508c
 8001a14:	08013eb8 	.word	0x08013eb8
 8001a18:	080026a9 	.word	0x080026a9
 8001a1c:	2000369c 	.word	0x2000369c
 8001a20:	08013edc 	.word	0x08013edc
 8001a24:	0800270d 	.word	0x0800270d
 8001a28:	2000d2c0 	.word	0x2000d2c0
 8001a2c:	08013f00 	.word	0x08013f00
 8001a30:	200036ec 	.word	0x200036ec

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0b8      	sub	sp, #224	; 0xe0
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3e:	2244      	movs	r2, #68	; 0x44
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f010 f832 	bl	8011aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2288      	movs	r2, #136	; 0x88
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f010 f824 	bl	8011aac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a84:	230a      	movs	r3, #10
 8001a86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fc3d 	bl	8006320 <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001aac:	f000 fe62 	bl	8002774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ace:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 f809 	bl	8006aec <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ae0:	f000 fe48 	bl	8002774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001ae4:	f244 0342 	movw	r3, #16450	; 0x4042
 8001ae8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001af6:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001af8:	2303      	movs	r3, #3
 8001afa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b00:	2308      	movs	r3, #8
 8001b02:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b04:	2307      	movs	r3, #7
 8001b06:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b14:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 fa1d 	bl	8006f58 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001b24:	f000 fe26 	bl	8002774 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b2c:	f004 fba2 	bl	8006274 <HAL_PWREx_ControlVoltageScaling>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001b36:	f000 fe1d 	bl	8002774 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	37e0      	adds	r7, #224	; 0xe0
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b68:	4a44      	ldr	r2, [pc, #272]	; (8001c7c <MX_ADC1_Init+0x138>)
 8001b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b84:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b86:	2204      	movs	r2, #4
 8001b88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b98:	2204      	movs	r2, #4
 8001b9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc6:	482c      	ldr	r0, [pc, #176]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bc8:	f002 fd60 	bl	800468c <HAL_ADC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001bd2:	f000 fdcf 	bl	8002774 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	4825      	ldr	r0, [pc, #148]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001be2:	f003 fc87 	bl	80054f4 <HAL_ADCEx_MultiModeConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bec:	f000 fdc2 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <MX_ADC1_Init+0x13c>)
 8001bf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf4:	2306      	movs	r3, #6
 8001bf6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bfc:	237f      	movs	r3, #127	; 0x7f
 8001bfe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c00:	2304      	movs	r3, #4
 8001c02:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481a      	ldr	r0, [pc, #104]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c0e:	f002 ff65 	bl	8004adc <HAL_ADC_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001c18:	f000 fdac 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <MX_ADC1_Init+0x140>)
 8001c1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c20:	230c      	movs	r3, #12
 8001c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c2a:	f002 ff57 	bl	8004adc <HAL_ADC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001c34:	f000 fd9e 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_ADC1_Init+0x144>)
 8001c3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c46:	f002 ff49 	bl	8004adc <HAL_ADC_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001c50:	f000 fd90 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <MX_ADC1_Init+0x148>)
 8001c56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c58:	2318      	movs	r3, #24
 8001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c62:	f002 ff3b 	bl	8004adc <HAL_ADC_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001c6c:	f000 fd82 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20005028 	.word	0x20005028
 8001c7c:	50040000 	.word	0x50040000
 8001c80:	04300002 	.word	0x04300002
 8001c84:	08600004 	.word	0x08600004
 8001c88:	0c900008 	.word	0x0c900008
 8001c8c:	10c00010 	.word	0x10c00010

08001c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <MX_I2C1_Init+0x78>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <MX_I2C1_Init+0x7c>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ccc:	f004 f99e 	bl	800600c <HAL_I2C_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cd6:	f000 fd4d 	bl	8002774 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cde:	f004 fa24 	bl	800612a <HAL_I2CEx_ConfigAnalogFilter>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f000 fd44 	bl	8002774 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cf0:	f004 fa66 	bl	80061c0 <HAL_I2CEx_ConfigDigitalFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cfa:	f000 fd3b 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000472c 	.word	0x2000472c
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	10909cec 	.word	0x10909cec

08001d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <MX_SPI1_Init+0x78>)
 8001d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d46:	2220      	movs	r2, #32
 8001d48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d5e:	2207      	movs	r2, #7
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d70:	f005 fdae 	bl	80078d0 <HAL_SPI_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d7a:	f000 fcfb 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000d2c8 	.word	0x2000d2c8
 8001d88:	40013000 	.word	0x40013000

08001d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b096      	sub	sp, #88	; 0x58
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	222c      	movs	r2, #44	; 0x2c
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00f fe77 	bl	8011aac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dc0:	4a39      	ldr	r2, [pc, #228]	; (8001ea8 <MX_TIM1_Init+0x11c>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8001dc4:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dea:	482e      	ldr	r0, [pc, #184]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dec:	f006 fbbc 	bl	8008568 <HAL_TIM_PWM_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001df6:	f000 fcbd 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4825      	ldr	r0, [pc, #148]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e0e:	f007 fffd 	bl	8009e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e18:	f000 fcac 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1c:	2360      	movs	r3, #96	; 0x60
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4818      	ldr	r0, [pc, #96]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e42:	f007 fa39 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e4c:	f000 fc92 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e86:	f008 f849 	bl	8009f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e90:	f000 fc70 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e96:	f001 fcb7 	bl	8003808 <HAL_TIM_MspPostInit>

}
 8001e9a:	bf00      	nop
 8001e9c:	3758      	adds	r7, #88	; 0x58
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000d228 	.word	0x2000d228
 8001ea8:	40012c00 	.word	0x40012c00

08001eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	615a      	str	r2, [r3, #20]
 8001ece:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ed2:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <MX_TIM3_Init+0xdc>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ef6:	4823      	ldr	r0, [pc, #140]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ef8:	f006 fb36 	bl	8008568 <HAL_TIM_PWM_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001f02:	f000 fc37 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	481b      	ldr	r0, [pc, #108]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f16:	f007 ff79 	bl	8009e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001f20:	f000 fc28 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f24:	2360      	movs	r3, #96	; 0x60
 8001f26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f34:	463b      	mov	r3, r7
 8001f36:	2200      	movs	r2, #0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f3c:	f007 f9bc 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f46:	f000 fc15 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f52:	f007 f9b1 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001f5c:	f000 fc0a 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	220c      	movs	r2, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f68:	f007 f9a6 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001f72:	f000 fbff 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f78:	f001 fc46 	bl	8003808 <HAL_TIM_MspPostInit>

}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20004fdc 	.word	0x20004fdc
 8001f88:	40000400 	.word	0x40000400

08001f8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b096      	sub	sp, #88	; 0x58
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	615a      	str	r2, [r3, #20]
 8001fb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	222c      	movs	r2, #44	; 0x2c
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00f fd77 	bl	8011aac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fc0:	4a39      	ldr	r2, [pc, #228]	; (80020a8 <MX_TIM8_Init+0x11c>)
 8001fc2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fea:	482e      	ldr	r0, [pc, #184]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fec:	f006 fabc 	bl	8008568 <HAL_TIM_PWM_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001ff6:	f000 fbbd 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002006:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800200a:	4619      	mov	r1, r3
 800200c:	4825      	ldr	r0, [pc, #148]	; (80020a4 <MX_TIM8_Init+0x118>)
 800200e:	f007 fefd 	bl	8009e0c <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002018:	f000 fbac 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201c:	2360      	movs	r3, #96	; 0x60
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800203c:	2204      	movs	r2, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4818      	ldr	r0, [pc, #96]	; (80020a4 <MX_TIM8_Init+0x118>)
 8002042:	f007 f939 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800204c:	f000 fb92 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM8_Init+0x118>)
 8002086:	f007 ff49 	bl	8009f1c <HAL_TIMEx_ConfigBreakDeadTime>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002090:	f000 fb70 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM8_Init+0x118>)
 8002096:	f001 fbb7 	bl	8003808 <HAL_TIM_MspPostInit>

}
 800209a:	bf00      	nop
 800209c:	3758      	adds	r7, #88	; 0x58
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200036a0 	.word	0x200036a0
 80020a8:	40013400 	.word	0x40013400

080020ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b096      	sub	sp, #88	; 0x58
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	615a      	str	r2, [r3, #20]
 80020d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	222c      	movs	r2, #44	; 0x2c
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f00f fce7 	bl	8011aac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <MX_TIM15_Init+0x100>)
 80020e0:	4a33      	ldr	r2, [pc, #204]	; (80021b0 <MX_TIM15_Init+0x104>)
 80020e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <MX_TIM15_Init+0x100>)
 80020e6:	2207      	movs	r2, #7
 80020e8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <MX_TIM15_Init+0x100>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <MX_TIM15_Init+0x100>)
 80020f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <MX_TIM15_Init+0x100>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <MX_TIM15_Init+0x100>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <MX_TIM15_Init+0x100>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800210a:	4828      	ldr	r0, [pc, #160]	; (80021ac <MX_TIM15_Init+0x100>)
 800210c:	f006 fa2c 	bl	8008568 <HAL_TIM_PWM_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002116:	f000 fb2d 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002122:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002126:	4619      	mov	r1, r3
 8002128:	4820      	ldr	r0, [pc, #128]	; (80021ac <MX_TIM15_Init+0x100>)
 800212a:	f007 fe6f 	bl	8009e0c <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002134:	f000 fb1e 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002138:	2360      	movs	r3, #96	; 0x60
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002144:	2300      	movs	r3, #0
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002158:	2200      	movs	r2, #0
 800215a:	4619      	mov	r1, r3
 800215c:	4813      	ldr	r0, [pc, #76]	; (80021ac <MX_TIM15_Init+0x100>)
 800215e:	f007 f8ab 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002168:	f000 fb04 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4807      	ldr	r0, [pc, #28]	; (80021ac <MX_TIM15_Init+0x100>)
 8002190:	f007 fec4 	bl	8009f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800219a:	f000 faeb 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800219e:	4803      	ldr	r0, [pc, #12]	; (80021ac <MX_TIM15_Init+0x100>)
 80021a0:	f001 fb32 	bl	8003808 <HAL_TIM_MspPostInit>

}
 80021a4:	bf00      	nop
 80021a6:	3758      	adds	r7, #88	; 0x58
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20004778 	.word	0x20004778
 80021b0:	40014000 	.word	0x40014000

080021b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b092      	sub	sp, #72	; 0x48
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ce:	463b      	mov	r3, r7
 80021d0:	222c      	movs	r2, #44	; 0x2c
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f00f fc69 	bl	8011aac <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <MX_TIM16_Init+0xe8>)
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <MX_TIM16_Init+0xec>)
 80021de:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <MX_TIM16_Init+0xe8>)
 80021e2:	2207      	movs	r2, #7
 80021e4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <MX_TIM16_Init+0xe8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <MX_TIM16_Init+0xe8>)
 80021ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <MX_TIM16_Init+0xe8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <MX_TIM16_Init+0xe8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <MX_TIM16_Init+0xe8>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002206:	4825      	ldr	r0, [pc, #148]	; (800229c <MX_TIM16_Init+0xe8>)
 8002208:	f006 f8e6 	bl	80083d8 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002212:	f000 faaf 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002216:	4821      	ldr	r0, [pc, #132]	; (800229c <MX_TIM16_Init+0xe8>)
 8002218:	f006 f9a6 	bl	8008568 <HAL_TIM_PWM_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002222:	f000 faa7 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002226:	2360      	movs	r3, #96	; 0x60
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222e:	2300      	movs	r3, #0
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002246:	2200      	movs	r2, #0
 8002248:	4619      	mov	r1, r3
 800224a:	4814      	ldr	r0, [pc, #80]	; (800229c <MX_TIM16_Init+0xe8>)
 800224c:	f007 f834 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002256:	f000 fa8d 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800226e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002272:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <MX_TIM16_Init+0xe8>)
 800227e:	f007 fe4d 	bl	8009f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8002288:	f000 fa74 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <MX_TIM16_Init+0xe8>)
 800228e:	f001 fabb 	bl	8003808 <HAL_TIM_MspPostInit>

}
 8002292:	bf00      	nop
 8002294:	3748      	adds	r7, #72	; 0x48
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000e3f4 	.word	0x2000e3f4
 80022a0:	40014400 	.word	0x40014400

080022a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b092      	sub	sp, #72	; 0x48
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022be:	463b      	mov	r3, r7
 80022c0:	222c      	movs	r2, #44	; 0x2c
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f00f fbf1 	bl	8011aac <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <MX_TIM17_Init+0xe8>)
 80022cc:	4a30      	ldr	r2, [pc, #192]	; (8002390 <MX_TIM17_Init+0xec>)
 80022ce:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <MX_TIM17_Init+0xe8>)
 80022d2:	2207      	movs	r2, #7
 80022d4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <MX_TIM17_Init+0xe8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <MX_TIM17_Init+0xe8>)
 80022de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_TIM17_Init+0xe8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <MX_TIM17_Init+0xe8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_TIM17_Init+0xe8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80022f6:	4825      	ldr	r0, [pc, #148]	; (800238c <MX_TIM17_Init+0xe8>)
 80022f8:	f006 f86e 	bl	80083d8 <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002302:	f000 fa37 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002306:	4821      	ldr	r0, [pc, #132]	; (800238c <MX_TIM17_Init+0xe8>)
 8002308:	f006 f92e 	bl	8008568 <HAL_TIM_PWM_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002312:	f000 fa2f 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002316:	2360      	movs	r3, #96	; 0x60
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002322:	2300      	movs	r3, #0
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <MX_TIM17_Init+0xe8>)
 800233c:	f006 ffbc 	bl	80092b8 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002346:	f000 fa15 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800235e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002362:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <MX_TIM17_Init+0xe8>)
 800236e:	f007 fdd5 	bl	8009f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8002378:	f000 f9fc 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <MX_TIM17_Init+0xe8>)
 800237e:	f001 fa43 	bl	8003808 <HAL_TIM_MspPostInit>

}
 8002382:	bf00      	nop
 8002384:	3748      	adds	r7, #72	; 0x48
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20004f48 	.word	0x20004f48
 8002390:	40014800 	.word	0x40014800

08002394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <MX_USART2_UART_Init+0x58>)
 800239a:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <MX_USART2_UART_Init+0x5c>)
 800239c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023ba:	220c      	movs	r2, #12
 80023bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023d8:	f007 fe3c 	bl	800a054 <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023e2:	f000 f9c7 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000d32c 	.word	0x2000d32c
 80023f0:	40004400 	.word	0x40004400

080023f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <MX_DMA_Init+0x90>)
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	4a21      	ldr	r2, [pc, #132]	; (8002484 <MX_DMA_Init+0x90>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6493      	str	r3, [r2, #72]	; 0x48
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_DMA_Init+0x90>)
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_DMA_Init+0x90>)
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <MX_DMA_Init+0x90>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6493      	str	r3, [r2, #72]	; 0x48
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_DMA_Init+0x90>)
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2105      	movs	r1, #5
 800242e:	200b      	movs	r0, #11
 8002430:	f003 f9c8 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002434:	200b      	movs	r0, #11
 8002436:	f003 f9e1 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2105      	movs	r1, #5
 800243e:	200c      	movs	r0, #12
 8002440:	f003 f9c0 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002444:	200c      	movs	r0, #12
 8002446:	f003 f9d9 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2105      	movs	r1, #5
 800244e:	200d      	movs	r0, #13
 8002450:	f003 f9b8 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002454:	200d      	movs	r0, #13
 8002456:	f003 f9d1 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2105      	movs	r1, #5
 800245e:	2010      	movs	r0, #16
 8002460:	f003 f9b0 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002464:	2010      	movs	r0, #16
 8002466:	f003 f9c9 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2105      	movs	r1, #5
 800246e:	2045      	movs	r0, #69	; 0x45
 8002470:	f003 f9a8 	bl	80057c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002474:	2045      	movs	r0, #69	; 0x45
 8002476:	f003 f9c1 	bl	80057fc <HAL_NVIC_EnableIRQ>

}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <MX_GPIO_Init+0xa4>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a22      	ldr	r2, [pc, #136]	; (800252c <MX_GPIO_Init+0xa4>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <MX_GPIO_Init+0xa4>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <MX_GPIO_Init+0xa4>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <MX_GPIO_Init+0xa4>)
 80024bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_GPIO_Init+0xa4>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_GPIO_Init+0xa4>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <MX_GPIO_Init+0xa4>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_GPIO_Init+0xa4>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_GPIO_Init+0xa4>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <MX_GPIO_Init+0xa4>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_GPIO_Init+0xa4>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	2140      	movs	r1, #64	; 0x40
 8002502:	480b      	ldr	r0, [pc, #44]	; (8002530 <MX_GPIO_Init+0xa8>)
 8002504:	f003 fd6a 	bl	8005fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002508:	2340      	movs	r3, #64	; 0x40
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	2301      	movs	r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002514:	2301      	movs	r3, #1
 8002516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4619      	mov	r1, r3
 800251e:	4804      	ldr	r0, [pc, #16]	; (8002530 <MX_GPIO_Init+0xa8>)
 8002520:	f003 fbb2 	bl	8005c88 <HAL_GPIO_Init>

}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	48000400 	.word	0x48000400

08002534 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 800253c:	4843      	ldr	r0, [pc, #268]	; (800264c <StartMainMenuTask+0x118>)
 800253e:	f00f fb43 	bl	8011bc8 <puts>





    printf("Reading song\r\n");
 8002542:	4843      	ldr	r0, [pc, #268]	; (8002650 <StartMainMenuTask+0x11c>)
 8002544:	f00f fb40 	bl	8011bc8 <puts>


    // Mount
		fres = f_mount(&fs, "", 0);
 8002548:	2200      	movs	r2, #0
 800254a:	4942      	ldr	r1, [pc, #264]	; (8002654 <StartMainMenuTask+0x120>)
 800254c:	4842      	ldr	r0, [pc, #264]	; (8002658 <StartMainMenuTask+0x124>)
 800254e:	f00a fce9 	bl	800cf24 <f_mount>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <StartMainMenuTask+0x128>)
 8002558:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 800255a:	4b40      	ldr	r3, [pc, #256]	; (800265c <StartMainMenuTask+0x128>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <StartMainMenuTask+0x36>
			transmit_uart("Micro SD card is mounted successfully!\n");
 8002562:	483f      	ldr	r0, [pc, #252]	; (8002660 <StartMainMenuTask+0x12c>)
 8002564:	f7ff f9d2 	bl	800190c <transmit_uart>
 8002568:	e006      	b.n	8002578 <StartMainMenuTask+0x44>
		} else if (fres != FR_OK) {
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <StartMainMenuTask+0x128>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <StartMainMenuTask+0x44>
			transmit_uart("Micro SD card's mount error!\n");
 8002572:	483c      	ldr	r0, [pc, #240]	; (8002664 <StartMainMenuTask+0x130>)
 8002574:	f7ff f9ca 	bl	800190c <transmit_uart>



		//fres = f_open(&fil, "glazunov_violin_concerto.piece", FA_READ);
		//fres = f_open(&fil, "glazunov.txt", FA_READ);
		fres = f_open(&fil, "test2.bin", FA_READ);
 8002578:	2201      	movs	r2, #1
 800257a:	493b      	ldr	r1, [pc, #236]	; (8002668 <StartMainMenuTask+0x134>)
 800257c:	483b      	ldr	r0, [pc, #236]	; (800266c <StartMainMenuTask+0x138>)
 800257e:	f00a fd35 	bl	800cfec <f_open>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <StartMainMenuTask+0x128>)
 8002588:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <StartMainMenuTask+0x128>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <StartMainMenuTask+0x66>
			transmit_uart("File opened for reading.\n");
 8002592:	4837      	ldr	r0, [pc, #220]	; (8002670 <StartMainMenuTask+0x13c>)
 8002594:	f7ff f9ba 	bl	800190c <transmit_uart>
 8002598:	e006      	b.n	80025a8 <StartMainMenuTask+0x74>
		} else if (fres != FR_OK) {
 800259a:	4b30      	ldr	r3, [pc, #192]	; (800265c <StartMainMenuTask+0x128>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <StartMainMenuTask+0x74>
			transmit_uart("File was not opened for reading!\n");
 80025a2:	4834      	ldr	r0, [pc, #208]	; (8002674 <StartMainMenuTask+0x140>)
 80025a4:	f7ff f9b2 	bl	800190c <transmit_uart>





		Piece_vInit(&xPiece, &fil);
 80025a8:	4930      	ldr	r1, [pc, #192]	; (800266c <StartMainMenuTask+0x138>)
 80025aa:	4833      	ldr	r0, [pc, #204]	; (8002678 <StartMainMenuTask+0x144>)
 80025ac:	f000 f8e8 	bl	8002780 <Piece_vInit>
		Piece_vSetComposition(&xPiece, &fil);
 80025b0:	492e      	ldr	r1, [pc, #184]	; (800266c <StartMainMenuTask+0x138>)
 80025b2:	4831      	ldr	r0, [pc, #196]	; (8002678 <StartMainMenuTask+0x144>)
 80025b4:	f000 f91a 	bl	80027ec <Piece_vSetComposition>


		// Close file
		fres = f_close(&fil);
 80025b8:	482c      	ldr	r0, [pc, #176]	; (800266c <StartMainMenuTask+0x138>)
 80025ba:	f00b f916 	bl	800d7ea <f_close>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <StartMainMenuTask+0x128>)
 80025c4:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <StartMainMenuTask+0x128>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <StartMainMenuTask+0xa2>
			transmit_uart("The file is closed.\n");
 80025ce:	482b      	ldr	r0, [pc, #172]	; (800267c <StartMainMenuTask+0x148>)
 80025d0:	f7ff f99c 	bl	800190c <transmit_uart>
 80025d4:	e006      	b.n	80025e4 <StartMainMenuTask+0xb0>
		} else if (fres != FR_OK) {
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <StartMainMenuTask+0x128>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <StartMainMenuTask+0xb0>
			transmit_uart("The file was not closed.\n");
 80025de:	4828      	ldr	r0, [pc, #160]	; (8002680 <StartMainMenuTask+0x14c>)
 80025e0:	f7ff f994 	bl	800190c <transmit_uart>
		}

		f_mount(NULL, "", 1);
 80025e4:	2201      	movs	r2, #1
 80025e6:	491b      	ldr	r1, [pc, #108]	; (8002654 <StartMainMenuTask+0x120>)
 80025e8:	2000      	movs	r0, #0
 80025ea:	f00a fc9b 	bl	800cf24 <f_mount>
		if (fres == FR_OK) {
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <StartMainMenuTask+0x128>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <StartMainMenuTask+0xca>
			transmit_uart("The Micro SD card is unmounted!\n");
 80025f6:	4823      	ldr	r0, [pc, #140]	; (8002684 <StartMainMenuTask+0x150>)
 80025f8:	f7ff f988 	bl	800190c <transmit_uart>
 80025fc:	e006      	b.n	800260c <StartMainMenuTask+0xd8>
		} else if (fres != FR_OK) {
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <StartMainMenuTask+0x128>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <StartMainMenuTask+0xd8>
			transmit_uart("The Micro SD was not unmounted!");
 8002606:	4820      	ldr	r0, [pc, #128]	; (8002688 <StartMainMenuTask+0x154>)
 8002608:	f7ff f980 	bl	800190c <transmit_uart>
		}



		// Initial Command
	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800260c:	2100      	movs	r1, #0
 800260e:	481f      	ldr	r0, [pc, #124]	; (800268c <StartMainMenuTask+0x158>)
 8002610:	f006 f802 	bl	8008618 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8002614:	2100      	movs	r1, #0
 8002616:	481e      	ldr	r0, [pc, #120]	; (8002690 <StartMainMenuTask+0x15c>)
 8002618:	f005 fffe 	bl	8008618 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim16, TIM_CHANNEL_1);
 800261c:	2100      	movs	r1, #0
 800261e:	481d      	ldr	r0, [pc, #116]	; (8002694 <StartMainMenuTask+0x160>)
 8002620:	f005 fffa 	bl	8008618 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
 8002624:	2100      	movs	r1, #0
 8002626:	481c      	ldr	r0, [pc, #112]	; (8002698 <StartMainMenuTask+0x164>)
 8002628:	f005 fff6 	bl	8008618 <HAL_TIM_PWM_Start_IT>

	  //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);


		xSynchWakeTime = xTaskGetTickCount();
 800262c:	f00d fc80 	bl	800ff30 <xTaskGetTickCount>
 8002630:	4603      	mov	r3, r0
 8002632:	4a1a      	ldr	r2, [pc, #104]	; (800269c <StartMainMenuTask+0x168>)
 8002634:	6013      	str	r3, [r2, #0]
		osEventFlagsSet(xEmbeddedViolinEventGroupHandle, (EB_PLAY_TICK | EB_PLAY_STATE));
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <StartMainMenuTask+0x16c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2106      	movs	r1, #6
 800263c:	4618      	mov	r0, r3
 800263e:	f00b fc3f 	bl	800dec0 <osEventFlagsSet>


		// WAIT EVENT SYNCHRONIZE?

    osDelay(7000000000);
 8002642:	4818      	ldr	r0, [pc, #96]	; (80026a4 <StartMainMenuTask+0x170>)
 8002644:	f00b fbb5 	bl	800ddb2 <osDelay>
  	printf("Main Menu\r\n");
 8002648:	e778      	b.n	800253c <StartMainMenuTask+0x8>
 800264a:	bf00      	nop
 800264c:	08013b84 	.word	0x08013b84
 8002650:	08013b90 	.word	0x08013b90
 8002654:	08013ba0 	.word	0x08013ba0
 8002658:	200036f0 	.word	0x200036f0
 800265c:	2000d3b0 	.word	0x2000d3b0
 8002660:	08013ba4 	.word	0x08013ba4
 8002664:	08013bcc 	.word	0x08013bcc
 8002668:	08013bec 	.word	0x08013bec
 800266c:	2000d3c4 	.word	0x2000d3c4
 8002670:	08013bf8 	.word	0x08013bf8
 8002674:	08013c14 	.word	0x08013c14
 8002678:	20005184 	.word	0x20005184
 800267c:	08013c38 	.word	0x08013c38
 8002680:	08013c50 	.word	0x08013c50
 8002684:	08013c6c 	.word	0x08013c6c
 8002688:	08013c90 	.word	0x08013c90
 800268c:	2000d228 	.word	0x2000d228
 8002690:	20004778 	.word	0x20004778
 8002694:	2000e3f4 	.word	0x2000e3f4
 8002698:	20004f48 	.word	0x20004f48
 800269c:	200047c4 	.word	0x200047c4
 80026a0:	200036ec 	.word	0x200036ec
 80026a4:	a13b8600 	.word	0xa13b8600

080026a8 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <StartPlayTickTask+0x4c>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <StartPlayTickTask+0x50>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	2200      	movs	r2, #0
 80026c0:	f00b fc42 	bl	800df48 <osEventFlagsWait>
 80026c4:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dbf1      	blt.n	80026b0 <StartPlayTickTask+0x8>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ec      	beq.n	80026b0 <StartPlayTickTask+0x8>
		{
			while (running)
 80026d6:	e008      	b.n	80026ea <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 80026d8:	4808      	ldr	r0, [pc, #32]	; (80026fc <StartPlayTickTask+0x54>)
 80026da:	f00f fa75 	bl	8011bc8 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <StartPlayTickTask+0x58>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <StartPlayTickTask+0x5c>)
 80026e6:	f00d fa5f 	bl	800fba8 <vTaskDelayUntil>
			while (running)
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <StartPlayTickTask+0x60>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f2      	bne.n	80026d8 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80026f2:	e7dd      	b.n	80026b0 <StartPlayTickTask+0x8>
 80026f4:	200036ec 	.word	0x200036ec
 80026f8:	08013f10 	.word	0x08013f10
 80026fc:	08013cb0 	.word	0x08013cb0
 8002700:	08013f14 	.word	0x08013f14
 8002704:	200047c4 	.word	0x200047c4
 8002708:	200001e4 	.word	0x200001e4

0800270c <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <StartPlayState+0x38>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <StartPlayState+0x3c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	2200      	movs	r2, #0
 8002724:	f00b fc10 	bl	800df48 <osEventFlagsWait>
 8002728:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	dbf1      	blt.n	8002714 <StartPlayState+0x8>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ec      	beq.n	8002714 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <StartPlayState+0x40>)
 800273c:	f000 f8a2 	bl	8002884 <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002740:	e7e8      	b.n	8002714 <StartPlayState+0x8>
 8002742:	bf00      	nop
 8002744:	200036ec 	.word	0x200036ec
 8002748:	08013f18 	.word	0x08013f18
 800274c:	20005184 	.word	0x20005184

08002750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002762:	f001 fd79 	bl	8004258 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40001000 	.word	0x40001000

08002774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800277c:	e7fe      	b.n	800277c <Error_Handler+0x8>
	...

08002780 <Piece_vInit>:




void Piece_vInit(PieceHandle_t *pxPiece, FIL *pFil)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xPieceInformation.pusName, sizeof(pxPiece->xPieceInformation.pusName), &ulNumBytesRead);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 0108 	add.w	r1, r3, #8
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f00a fe10 	bl	800d3bc <f_read>
	printf("Name: %s\r\n", pxPiece->xPieceInformation.pusName);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3308      	adds	r3, #8
 80027a0:	4619      	mov	r1, r3
 80027a2:	4803      	ldr	r0, [pc, #12]	; (80027b0 <Piece_vInit+0x30>)
 80027a4:	f00f f98a 	bl	8011abc <iprintf>
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	08013cc0 	.word	0x08013cc0

080027b4 <Piece_vSetCompositionByteSize>:


void Piece_vSetCompositionByteSize(PieceHandle_t *pxPiece, FIL *pFil)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, &(pxPiece->xComposition.ulCompositionByteSize), sizeof(pxPiece->xComposition.ulCompositionByteSize), &ulNumBytesRead);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	2204      	movs	r2, #4
 80027ca:	6838      	ldr	r0, [r7, #0]
 80027cc:	f00a fdf6 	bl	800d3bc <f_read>
	printf("Composition size: %u\r\n", pxPiece->xComposition.ulCompositionByteSize);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	4619      	mov	r1, r3
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <Piece_vSetCompositionByteSize+0x34>)
 80027da:	f00f f96f 	bl	8011abc <iprintf>
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	08013ccc 	.word	0x08013ccc

080027ec <Piece_vSetComposition>:


void Piece_vSetComposition(PieceHandle_t *pxPiece, FIL *pFil)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	Piece_vSetCompositionByteSize(pxPiece, pFil);
 80027f6:	6839      	ldr	r1, [r7, #0]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffdb 	bl	80027b4 <Piece_vSetCompositionByteSize>

	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xComposition.pusComposition,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f103 0194 	add.w	r1, r3, #148	; 0x94
			pxPiece->xComposition.ulCompositionByteSize < sizeof(pxPiece->xComposition.pusComposition) ? pxPiece->xComposition.ulCompositionByteSize : sizeof(pxPiece->xComposition.pusComposition),
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280e:	bf28      	it	cs
 8002810:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8002814:	461a      	mov	r2, r3
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f00a fdce 	bl	800d3bc <f_read>
			&ulNumBytesRead);


	printf("Number of bytes read: %lu\r\n", ulNumBytesRead);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4619      	mov	r1, r3
 8002824:	4808      	ldr	r0, [pc, #32]	; (8002848 <Piece_vSetComposition+0x5c>)
 8002826:	f00f f949 	bl	8011abc <iprintf>

	pxPiece->xPieceInstruction.ulInstructionCounter = 0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

	pxPiece->xCapture.ulTick = osKernelGetTickCount();
 8002830:	f00b fa18 	bl	800dc64 <osKernelGetTickCount>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800283c:	3394      	adds	r3, #148	; 0x94
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	08013ce4 	.word	0x08013ce4

0800284c <Piece_ucParseBeatValue>:


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3305      	adds	r3, #5
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	f102 0194 	add.w	r1, r2, #148	; 0x94
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	440a      	add	r2, r1
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	795b      	ldrb	r3, [r3, #5]
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 8002890:	e045      	b.n	800291e <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	f102 0194 	add.w	r1, r2, #148	; 0x94
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	440a      	add	r2, r1
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4827      	ldr	r0, [pc, #156]	; (8002954 <Piece_vParseCommand+0xd0>)
 80028b8:	f00f f900 	bl	8011abc <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	791b      	ldrb	r3, [r3, #4]
 80028c0:	4619      	mov	r1, r3
 80028c2:	4825      	ldr	r0, [pc, #148]	; (8002958 <Piece_vParseCommand+0xd4>)
 80028c4:	f00f f8fa 	bl	8011abc <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	791b      	ldrb	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <Piece_vParseCommand+0x52>
 80028d0:	2b7f      	cmp	r3, #127	; 0x7f
 80028d2:	d003      	beq.n	80028dc <Piece_vParseCommand+0x58>
 80028d4:	e006      	b.n	80028e4 <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
			break;
 80028da:	e020      	b.n	800291e <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f891 	bl	8002a04 <Piece_vConfigureAll>
			break;
 80028e2:	e01c      	b.n	800291e <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	791b      	ldrb	r3, [r3, #4]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fb4b 	bl	8002f84 <bIsPlayCommand>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d010      	beq.n	8002916 <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	791b      	ldrb	r3, [r3, #4]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa4 	bl	800284c <Piece_ucParseBeatValue>
 8002904:	4603      	mov	r3, r0
 8002906:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8002908:	7bba      	ldrb	r2, [r7, #14]
 800290a:	7b7b      	ldrb	r3, [r7, #13]
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9d8 	bl	8002cc4 <Piece_vPlayNotes>
 8002914:	e002      	b.n	800291c <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8002916:	4811      	ldr	r0, [pc, #68]	; (800295c <Piece_vParseCommand+0xd8>)
 8002918:	f00f f956 	bl	8011bc8 <puts>
			}
			break;
 800291c:	bf00      	nop
	while (!endCommand)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0b6      	beq.n	8002892 <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8002924:	480e      	ldr	r0, [pc, #56]	; (8002960 <Piece_vParseCommand+0xdc>)
 8002926:	f00f f94f 	bl	8011bc8 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 800292a:	2100      	movs	r1, #0
 800292c:	480d      	ldr	r0, [pc, #52]	; (8002964 <Piece_vParseCommand+0xe0>)
 800292e:	f005 ffbf 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8002932:	2100      	movs	r1, #0
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <Piece_vParseCommand+0xe4>)
 8002936:	f005 ffbb 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800293a:	2100      	movs	r1, #0
 800293c:	480b      	ldr	r0, [pc, #44]	; (800296c <Piece_vParseCommand+0xe8>)
 800293e:	f005 ffb7 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8002942:	2100      	movs	r1, #0
 8002944:	480a      	ldr	r0, [pc, #40]	; (8002970 <Piece_vParseCommand+0xec>)
 8002946:	f005 ffb3 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	08013d00 	.word	0x08013d00
 8002958:	08013d14 	.word	0x08013d14
 800295c:	08013d24 	.word	0x08013d24
 8002960:	08013d38 	.word	0x08013d38
 8002964:	2000d228 	.word	0x2000d228
 8002968:	20004778 	.word	0x20004778
 800296c:	2000e3f4 	.word	0x2000e3f4
 8002970:	20004f48 	.word	0x20004f48

08002974 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800298e:	4619      	mov	r1, r3
 8002990:	4803      	ldr	r0, [pc, #12]	; (80029a0 <Piece_vSetMovement+0x2c>)
 8002992:	f00f f893 	bl	8011abc <iprintf>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	08013d4c 	.word	0x08013d4c

080029a4 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80029be:	4619      	mov	r1, r3
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <Piece_vSetBPM+0x2c>)
 80029c2:	f00f f87b 	bl	8011abc <iprintf>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	08013d5c 	.word	0x08013d5c

080029d4 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80029ee:	4619      	mov	r1, r3
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <Piece_vSetDynamic+0x2c>)
 80029f2:	f00f f863 	bl	8011abc <iprintf>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08013d68 	.word	0x08013d68

08002a04 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8002a0c:	481e      	ldr	r0, [pc, #120]	; (8002a88 <Piece_vConfigureAll+0x84>)
 8002a0e:	f00f f8db 	bl	8011bc8 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff84 	bl	8002974 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8002a6c:	89bb      	ldrh	r3, [r7, #12]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff97 	bl	80029a4 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffaa 	bl	80029d4 <Piece_vSetDynamic>
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	08013d78 	.word	0x08013d78

08002a8c <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
	int count = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002a9a:	e01e      	b.n	8002ada <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002aa2:	3394      	adds	r3, #148	; 0x94
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ab0:	3394      	adds	r3, #148	; 0x94
 8002ab2:	601a      	str	r2, [r3, #0]
		count++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	3b32      	subs	r3, #50	; 0x32
 8002abe:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 8002ac0:	2232      	movs	r2, #50	; 0x32
 8002ac2:	68f9      	ldr	r1, [r7, #12]
 8002ac4:	4819      	ldr	r0, [pc, #100]	; (8002b2c <Piece_vCaptureFragment+0xa0>)
 8002ac6:	f00e fff9 	bl	8011abc <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ad0:	3394      	adds	r3, #148	; 0x94
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00b f987 	bl	800dde8 <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b31      	cmp	r3, #49	; 0x31
 8002ade:	dcdd      	bgt.n	8002a9c <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dd1b      	ble.n	8002b1e <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002aec:	3394      	adds	r3, #148	; 0x94
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002afa:	3394      	adds	r3, #148	; 0x94
 8002afc:	601a      	str	r2, [r3, #0]

		count++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3301      	adds	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	4808      	ldr	r0, [pc, #32]	; (8002b2c <Piece_vCaptureFragment+0xa0>)
 8002b0a:	f00e ffd7 	bl	8011abc <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b14:	3394      	adds	r3, #148	; 0x94
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f00b f965 	bl	800dde8 <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	603b      	str	r3, [r7, #0]
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08013d94 	.word	0x08013d94

08002b30 <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b3e:	3398      	adds	r3, #152	; 0x98
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b4a:	339b      	adds	r3, #155	; 0x9b
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b56:	339e      	adds	r3, #158	; 0x9e
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b62:	33a1      	adds	r3, #161	; 0xa1
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3306      	adds	r3, #6
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	8812      	ldrh	r2, [r2, #0]
 8002b8e:	b292      	uxth	r2, r2
 8002b90:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	88db      	ldrh	r3, [r3, #6]
 8002ba0:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	88db      	ldrh	r3, [r3, #6]
 8002ba6:	0b9b      	lsrs	r3, r3, #14
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	88db      	ldrh	r3, [r3, #6]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bba:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8002bbc:	7bbb      	ldrb	r3, [r7, #14]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d856      	bhi.n	8002c70 <Piece_vParseNoteGoal+0xfc>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <Piece_vParseNoteGoal+0x54>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002bff 	.word	0x08002bff
 8002bd0:	08002c25 	.word	0x08002c25
 8002bd4:	08002c4b 	.word	0x08002c4b
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002bde:	3398      	adds	r3, #152	; 0x98
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002bea:	3399      	adds	r3, #153	; 0x99
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002bf6:	339a      	adds	r3, #154	; 0x9a
 8002bf8:	7b7a      	ldrb	r2, [r7, #13]
 8002bfa:	701a      	strb	r2, [r3, #0]
		break;
 8002bfc:	e039      	b.n	8002c72 <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c04:	339b      	adds	r3, #155	; 0x9b
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c10:	339c      	adds	r3, #156	; 0x9c
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c1c:	339d      	adds	r3, #157	; 0x9d
 8002c1e:	7b7a      	ldrb	r2, [r7, #13]
 8002c20:	701a      	strb	r2, [r3, #0]
		break;
 8002c22:	e026      	b.n	8002c72 <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c2a:	339e      	adds	r3, #158	; 0x9e
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c36:	339f      	adds	r3, #159	; 0x9f
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c42:	33a0      	adds	r3, #160	; 0xa0
 8002c44:	7b7a      	ldrb	r2, [r7, #13]
 8002c46:	701a      	strb	r2, [r3, #0]
		break;
 8002c48:	e013      	b.n	8002c72 <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c50:	33a1      	adds	r3, #161	; 0xa1
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c5c:	33a2      	adds	r3, #162	; 0xa2
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c68:	33a3      	adds	r3, #163	; 0xa3
 8002c6a:	7b7a      	ldrb	r2, [r7, #13]
 8002c6c:	701a      	strb	r2, [r3, #0]
		break;
 8002c6e:	e000      	b.n	8002c72 <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 8002c70:	bf00      	nop
	}
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d901      	bls.n	8002c96 <Piece_vParseGoal+0x16>
 8002c92:	2304      	movs	r3, #4
 8002c94:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	81fb      	strh	r3, [r7, #14]
 8002c9a:	e008      	b.n	8002cae <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff69 	bl	8002b74 <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 8002ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	81fb      	strh	r3, [r7, #14]
 8002cae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	dbf1      	blt.n	8002c9c <Piece_vParseGoal+0x1c>
	}
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	70fb      	strb	r3, [r7, #3]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 8002cd4:	78bb      	ldrb	r3, [r7, #2]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	48a0      	ldr	r0, [pc, #640]	; (8002f5c <Piece_vPlayNotes+0x298>)
 8002cda:	f00e feef 	bl	8011abc <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	489f      	ldr	r0, [pc, #636]	; (8002f60 <Piece_vPlayNotes+0x29c>)
 8002ce4:	f00e feea 	bl	8011abc <iprintf>

	Piece_vResetGoal(pxPiece);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff21 	bl	8002b30 <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 8002cee:	78bb      	ldrb	r3, [r7, #2]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffc4 	bl	8002c80 <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f9d1 	bl	80030a0 <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d820      	bhi.n	8002d46 <Piece_vPlayNotes+0x82>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <Piece_vPlayNotes+0x48>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d21 	.word	0x08002d21
 8002d10:	08002d29 	.word	0x08002d29
 8002d14:	08002d2f 	.word	0x08002d2f
 8002d18:	08002d37 	.word	0x08002d37
 8002d1c:	08002d3f 	.word	0x08002d3f
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 8002d20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d24:	617b      	str	r3, [r7, #20]
		break;
 8002d26:	e012      	b.n	8002d4e <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8002d28:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <Piece_vPlayNotes+0x2a0>)
 8002d2a:	617b      	str	r3, [r7, #20]
		break;
 8002d2c:	e00f      	b.n	8002d4e <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 8002d2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d32:	617b      	str	r3, [r7, #20]
		break;
 8002d34:	e00b      	b.n	8002d4e <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8002d36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d3a:	617b      	str	r3, [r7, #20]
		break;
 8002d3c:	e007      	b.n	8002d4e <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 8002d3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d42:	617b      	str	r3, [r7, #20]
		break;
 8002d44:	e003      	b.n	8002d4e <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8002d46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d4a:	617b      	str	r3, [r7, #20]
		break;
 8002d4c:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d5c:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002f68 <Piece_vPlayNotes+0x2a4>
 8002d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d64:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002f6c <Piece_vPlayNotes+0x2a8>
 8002d68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6c:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	2b0b      	cmp	r3, #11
 8002d74:	f200 80d6 	bhi.w	8002f24 <Piece_vPlayNotes+0x260>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <Piece_vPlayNotes+0xbc>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002db1 	.word	0x08002db1
 8002d84:	08002dd1 	.word	0x08002dd1
 8002d88:	08002df1 	.word	0x08002df1
 8002d8c:	08002e11 	.word	0x08002e11
 8002d90:	08002e31 	.word	0x08002e31
 8002d94:	08002e4d 	.word	0x08002e4d
 8002d98:	08002e65 	.word	0x08002e65
 8002d9c:	08002e85 	.word	0x08002e85
 8002da0:	08002ea5 	.word	0x08002ea5
 8002da4:	08002ec5 	.word	0x08002ec5
 8002da8:	08002ee5 	.word	0x08002ee5
 8002dac:	08002f05 	.word	0x08002f05
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 8002db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002db4:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002f70 <Piece_vPlayNotes+0x2ac>
 8002db8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc8:	ee17 3a90 	vmov	r3, s15
 8002dcc:	613b      	str	r3, [r7, #16]
		break;
 8002dce:	e0b5      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 8002dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ddc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de8:	ee17 3a90 	vmov	r3, s15
 8002dec:	613b      	str	r3, [r7, #16]
		break;
 8002dee:	e0a5      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 8002df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e08:	ee17 3a90 	vmov	r3, s15
 8002e0c:	613b      	str	r3, [r7, #16]
		break;
 8002e0e:	e095      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 8002e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e14:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e28:	ee17 3a90 	vmov	r3, s15
 8002e2c:	613b      	str	r3, [r7, #16]
		break;
 8002e2e:	e085      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 8002e30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e34:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e44:	ee17 3a90 	vmov	r3, s15
 8002e48:	613b      	str	r3, [r7, #16]
		break;
 8002e4a:	e077      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002e4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e50:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e5c:	ee17 3a90 	vmov	r3, s15
 8002e60:	613b      	str	r3, [r7, #16]
		break;
 8002e62:	e06b      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 8002e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e70:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e7c:	ee17 3a90 	vmov	r3, s15
 8002e80:	613b      	str	r3, [r7, #16]
		break;
 8002e82:	e05b      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 8002e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e88:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002e8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9c:	ee17 3a90 	vmov	r3, s15
 8002ea0:	613b      	str	r3, [r7, #16]
		break;
 8002ea2:	e04b      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 8002ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea8:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002eac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ebc:	ee17 3a90 	vmov	r3, s15
 8002ec0:	613b      	str	r3, [r7, #16]
		break;
 8002ec2:	e03b      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002f74 <Piece_vPlayNotes+0x2b0>
 8002ecc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ed0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002edc:	ee17 3a90 	vmov	r3, s15
 8002ee0:	613b      	str	r3, [r7, #16]
		break;
 8002ee2:	e02b      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ee8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f78 <Piece_vPlayNotes+0x2b4>
 8002eec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002efc:	ee17 3a90 	vmov	r3, s15
 8002f00:	613b      	str	r3, [r7, #16]
		break;
 8002f02:	e01b      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002f04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f08:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f7c <Piece_vPlayNotes+0x2b8>
 8002f0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f10:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	ee17 3a90 	vmov	r3, s15
 8002f20:	613b      	str	r3, [r7, #16]
		break;
 8002f22:	e00b      	b.n	8002f3c <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002f24:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f34:	ee17 3a90 	vmov	r3, s15
 8002f38:	613b      	str	r3, [r7, #16]
		break;
 8002f3a:	bf00      	nop
	}


	if (ucNumNotes == 0)
 8002f3c:	78bb      	ldrb	r3, [r7, #2]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 8002f42:	480f      	ldr	r0, [pc, #60]	; (8002f80 <Piece_vPlayNotes+0x2bc>)
 8002f44:	f00e fe40 	bl	8011bc8 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fd9d 	bl	8002a8c <Piece_vCaptureFragment>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	08013dac 	.word	0x08013dac
 8002f60:	08013dc0 	.word	0x08013dc0
 8002f64:	3f2aaaab 	.word	0x3f2aaaab
 8002f68:	42700000 	.word	0x42700000
 8002f6c:	447a0000 	.word	0x447a0000
 8002f70:	42000000 	.word	0x42000000
 8002f74:	3d800000 	.word	0x3d800000
 8002f78:	3d000000 	.word	0x3d000000
 8002f7c:	3c800000 	.word	0x3c800000
 8002f80:	08013dd4 	.word	0x08013dd4

08002f84 <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	09db      	lsrs	r3, r3, #7
 8002f96:	b2db      	uxtb	r3, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	460a      	mov	r2, r1
 8002fae:	71fb      	strb	r3, [r7, #7]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d816      	bhi.n	8002fe8 <Piece_usGetPitchTick+0x44>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <Piece_usGetPitchTick+0x1c>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fd7 	.word	0x08002fd7
 8002fc8:	08002fdd 	.word	0x08002fdd
 8002fcc:	08002fe3 	.word	0x08002fe3
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
		break;
 8002fd4:	e00b      	b.n	8002fee <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 8002fd6:	230a      	movs	r3, #10
 8002fd8:	73fb      	strb	r3, [r7, #15]
		break;
 8002fda:	e008      	b.n	8002fee <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 8002fdc:	2314      	movs	r3, #20
 8002fde:	73fb      	strb	r3, [r7, #15]
		break;
 8002fe0:	e005      	b.n	8002fee <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 8002fe2:	231e      	movs	r3, #30
 8002fe4:	73fb      	strb	r3, [r7, #15]
		break;
 8002fe6:	e002      	b.n	8002fee <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	73fb      	strb	r3, [r7, #15]
		break;
 8002fec:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	79bb      	ldrb	r3, [r7, #6]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b47      	cmp	r3, #71	; 0x47
 8002ffa:	bf28      	it	cs
 8002ffc:	2347      	movcs	r3, #71	; 0x47
 8002ffe:	73fb      	strb	r3, [r7, #15]

	return pusNoteToPitchMap[ucPitchTickIndex];
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <Piece_usGetPitchTick+0x70>)
 8003004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	20000004 	.word	0x20000004

08003018 <Piece_ucGetFingeringIndex>:



uint8_t Piece_ucGetFingeringIndex(uint8_t ucString, uint8_t ucOffset)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	460a      	mov	r2, r1
 8003022:	71fb      	strb	r3, [r7, #7]
 8003024:	4613      	mov	r3, r2
 8003026:	71bb      	strb	r3, [r7, #6]
	uint8_t ucFingeringIndex;

	// [!] assert ucOffset [0, 29]

	switch (ucString)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d82b      	bhi.n	8003086 <Piece_ucGetFingeringIndex+0x6e>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <Piece_ucGetFingeringIndex+0x1c>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003045 	.word	0x08003045
 8003038:	08003055 	.word	0x08003055
 800303c:	08003065 	.word	0x08003065
 8003040:	08003077 	.word	0x08003077
	{
	case G_STRING:
		ucFingeringIndex = G_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucG;
 8003044:	79bb      	ldrb	r3, [r7, #6]
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <Piece_ucGetFingeringIndex+0x84>)
 8003048:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800304c:	f1c3 031d 	rsb	r3, r3, #29
 8003050:	73fb      	strb	r3, [r7, #15]
		break;
 8003052:	e01b      	b.n	800308c <Piece_ucGetFingeringIndex+0x74>
	case D_STRING:
		ucFingeringIndex = D_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucD;
 8003054:	79bb      	ldrb	r3, [r7, #6]
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <Piece_ucGetFingeringIndex+0x84>)
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	331e      	adds	r3, #30
 8003060:	73fb      	strb	r3, [r7, #15]
		break;
 8003062:	e013      	b.n	800308c <Piece_ucGetFingeringIndex+0x74>
	case A_STRING:
		ucFingeringIndex = A_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucA;
 8003064:	79bb      	ldrb	r3, [r7, #6]
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <Piece_ucGetFingeringIndex+0x84>)
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	789b      	ldrb	r3, [r3, #2]
 800306e:	f1c3 0359 	rsb	r3, r3, #89	; 0x59
 8003072:	73fb      	strb	r3, [r7, #15]
		break;
 8003074:	e00a      	b.n	800308c <Piece_ucGetFingeringIndex+0x74>
	case E_STRING:
		ucFingeringIndex = E_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucE;
 8003076:	79bb      	ldrb	r3, [r7, #6]
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <Piece_ucGetFingeringIndex+0x84>)
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	78db      	ldrb	r3, [r3, #3]
 8003080:	335a      	adds	r3, #90	; 0x5a
 8003082:	73fb      	strb	r3, [r7, #15]
		break;
 8003084:	e002      	b.n	800308c <Piece_ucGetFingeringIndex+0x74>
	default:
		// [!] error light
		ucFingeringIndex = G_STRING_FINGER_OFFSET;
 8003086:	231d      	movs	r3, #29
 8003088:	73fb      	strb	r3, [r7, #15]
		break;
 800308a:	bf00      	nop
	}

	return ucFingeringIndex;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000094 	.word	0x20000094

080030a0 <Piece_Debug_vPrintGoal>:

extern WS2812BHandle_t xWS2812B;


void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 80030a8:	4885      	ldr	r0, [pc, #532]	; (80032c0 <Piece_Debug_vPrintGoal+0x220>)
 80030aa:	f00e fd8d 	bl	8011bc8 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030b4:	3398      	adds	r3, #152	; 0x98
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d04b      	beq.n	8003154 <Piece_Debug_vPrintGoal+0xb4>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030c2:	339a      	adds	r3, #154	; 0x9a
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	461c      	mov	r4, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030ce:	339a      	adds	r3, #154	; 0x9a
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	4619      	mov	r1, r3
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7ff ff65 	bl	8002fa4 <Piece_usGetPitchTick>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	4621      	mov	r1, r4
 80030e0:	4878      	ldr	r0, [pc, #480]	; (80032c4 <Piece_Debug_vPrintGoal+0x224>)
 80030e2:	f00e fceb 	bl	8011abc <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030ec:	339a      	adds	r3, #154	; 0x9a
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4619      	mov	r1, r3
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7ff ff56 	bl	8002fa4 <Piece_usGetPitchTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b72      	ldr	r3, [pc, #456]	; (80032c8 <Piece_Debug_vPrintGoal+0x228>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 8003102:	4b71      	ldr	r3, [pc, #452]	; (80032c8 <Piece_Debug_vPrintGoal+0x228>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <Piece_Debug_vPrintGoal+0x228>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0852      	lsrs	r2, r2, #1
 800310e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8003110:	2100      	movs	r1, #0
 8003112:	486d      	ldr	r0, [pc, #436]	; (80032c8 <Piece_Debug_vPrintGoal+0x228>)
 8003114:	f005 fa80 	bl	8008618 <HAL_TIM_PWM_Start_IT>


		uint8_t ucGFingeringOffset = Piece_ucGetFingeringIndex(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800311e:	339a      	adds	r3, #154	; 0x9a
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4619      	mov	r1, r3
 8003124:	2000      	movs	r0, #0
 8003126:	f7ff ff77 	bl	8003018 <Piece_ucGetFingeringIndex>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]
		WS2812B_vSetLED(&xWS2812B, ucGFingeringOffset, 255, 0, 0);
 800312e:	7bf9      	ldrb	r1, [r7, #15]
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	4864      	ldr	r0, [pc, #400]	; (80032cc <Piece_Debug_vPrintGoal+0x22c>)
 800313a:	f000 fe86 	bl	8003e4a <WS2812B_vSetLED>
    WS2812B_vSetBrightness(&xWS2812B, 1);
 800313e:	2101      	movs	r1, #1
 8003140:	4862      	ldr	r0, [pc, #392]	; (80032cc <Piece_Debug_vPrintGoal+0x22c>)
 8003142:	f000 fefd 	bl	8003f40 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 8003146:	4861      	ldr	r0, [pc, #388]	; (80032cc <Piece_Debug_vPrintGoal+0x22c>)
 8003148:	f000 ffcc 	bl	80040e4 <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 800314c:	485f      	ldr	r0, [pc, #380]	; (80032cc <Piece_Debug_vPrintGoal+0x22c>)
 800314e:	f000 fedb 	bl	8003f08 <WS2812B_vResetLEDs>
 8003152:	e003      	b.n	800315c <Piece_Debug_vPrintGoal+0xbc>

	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8003154:	2100      	movs	r1, #0
 8003156:	485c      	ldr	r0, [pc, #368]	; (80032c8 <Piece_Debug_vPrintGoal+0x228>)
 8003158:	f005 fbaa 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003162:	339b      	adds	r3, #155	; 0x9b
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d02e      	beq.n	80031c8 <Piece_Debug_vPrintGoal+0x128>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003170:	339d      	adds	r3, #157	; 0x9d
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	461c      	mov	r4, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800317c:	339d      	adds	r3, #157	; 0x9d
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	2001      	movs	r0, #1
 8003184:	f7ff ff0e 	bl	8002fa4 <Piece_usGetPitchTick>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	4621      	mov	r1, r4
 800318e:	4850      	ldr	r0, [pc, #320]	; (80032d0 <Piece_Debug_vPrintGoal+0x230>)
 8003190:	f00e fc94 	bl	8011abc <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800319a:	339d      	adds	r3, #157	; 0x9d
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	4619      	mov	r1, r3
 80031a0:	2001      	movs	r0, #1
 80031a2:	f7ff feff 	bl	8002fa4 <Piece_usGetPitchTick>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <Piece_Debug_vPrintGoal+0x234>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 80031b0:	4b48      	ldr	r3, [pc, #288]	; (80032d4 <Piece_Debug_vPrintGoal+0x234>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <Piece_Debug_vPrintGoal+0x234>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0852      	lsrs	r2, r2, #1
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80031be:	2100      	movs	r1, #0
 80031c0:	4844      	ldr	r0, [pc, #272]	; (80032d4 <Piece_Debug_vPrintGoal+0x234>)
 80031c2:	f005 fa29 	bl	8008618 <HAL_TIM_PWM_Start_IT>
 80031c6:	e003      	b.n	80031d0 <Piece_Debug_vPrintGoal+0x130>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80031c8:	2100      	movs	r1, #0
 80031ca:	4842      	ldr	r0, [pc, #264]	; (80032d4 <Piece_Debug_vPrintGoal+0x234>)
 80031cc:	f005 fb70 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031d6:	339e      	adds	r3, #158	; 0x9e
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02e      	beq.n	800323c <Piece_Debug_vPrintGoal+0x19c>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031e4:	33a0      	adds	r3, #160	; 0xa0
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461c      	mov	r4, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031f0:	33a0      	adds	r3, #160	; 0xa0
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	2002      	movs	r0, #2
 80031f8:	f7ff fed4 	bl	8002fa4 <Piece_usGetPitchTick>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4621      	mov	r1, r4
 8003202:	4835      	ldr	r0, [pc, #212]	; (80032d8 <Piece_Debug_vPrintGoal+0x238>)
 8003204:	f00e fc5a 	bl	8011abc <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800320e:	33a0      	adds	r3, #160	; 0xa0
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	2002      	movs	r0, #2
 8003216:	f7ff fec5 	bl	8002fa4 <Piece_usGetPitchTick>
 800321a:	4603      	mov	r3, r0
 800321c:	461a      	mov	r2, r3
 800321e:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <Piece_Debug_vPrintGoal+0x23c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 8003224:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <Piece_Debug_vPrintGoal+0x23c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <Piece_Debug_vPrintGoal+0x23c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0852      	lsrs	r2, r2, #1
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8003232:	2100      	movs	r1, #0
 8003234:	4829      	ldr	r0, [pc, #164]	; (80032dc <Piece_Debug_vPrintGoal+0x23c>)
 8003236:	f005 f9ef 	bl	8008618 <HAL_TIM_PWM_Start_IT>
 800323a:	e003      	b.n	8003244 <Piece_Debug_vPrintGoal+0x1a4>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800323c:	2100      	movs	r1, #0
 800323e:	4827      	ldr	r0, [pc, #156]	; (80032dc <Piece_Debug_vPrintGoal+0x23c>)
 8003240:	f005 fb36 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800324a:	33a1      	adds	r3, #161	; 0xa1
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d02e      	beq.n	80032b0 <Piece_Debug_vPrintGoal+0x210>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003258:	33a3      	adds	r3, #163	; 0xa3
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461c      	mov	r4, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003264:	33a3      	adds	r3, #163	; 0xa3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	2003      	movs	r0, #3
 800326c:	f7ff fe9a 	bl	8002fa4 <Piece_usGetPitchTick>
 8003270:	4603      	mov	r3, r0
 8003272:	461a      	mov	r2, r3
 8003274:	4621      	mov	r1, r4
 8003276:	481a      	ldr	r0, [pc, #104]	; (80032e0 <Piece_Debug_vPrintGoal+0x240>)
 8003278:	f00e fc20 	bl	8011abc <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003282:	33a3      	adds	r3, #163	; 0xa3
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	2003      	movs	r0, #3
 800328a:	f7ff fe8b 	bl	8002fa4 <Piece_usGetPitchTick>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <Piece_Debug_vPrintGoal+0x244>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <Piece_Debug_vPrintGoal+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <Piece_Debug_vPrintGoal+0x244>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0852      	lsrs	r2, r2, #1
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80032a6:	2100      	movs	r1, #0
 80032a8:	480e      	ldr	r0, [pc, #56]	; (80032e4 <Piece_Debug_vPrintGoal+0x244>)
 80032aa:	f005 f9b5 	bl	8008618 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 80032ae:	e003      	b.n	80032b8 <Piece_Debug_vPrintGoal+0x218>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80032b0:	2100      	movs	r1, #0
 80032b2:	480c      	ldr	r0, [pc, #48]	; (80032e4 <Piece_Debug_vPrintGoal+0x244>)
 80032b4:	f005 fafc 	bl	80088b0 <HAL_TIM_PWM_Stop_IT>
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd90      	pop	{r4, r7, pc}
 80032c0:	08013dec 	.word	0x08013dec
 80032c4:	08013df4 	.word	0x08013df4
 80032c8:	2000d228 	.word	0x2000d228
 80032cc:	200047c8 	.word	0x200047c8
 80032d0:	08013e04 	.word	0x08013e04
 80032d4:	20004778 	.word	0x20004778
 80032d8:	08013e14 	.word	0x08013e14
 80032dc:	2000e3f4 	.word	0x2000e3f4
 80032e0:	08013e24 	.word	0x08013e24
 80032e4:	20004f48 	.word	0x20004f48

080032e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_MspInit+0x4c>)
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	4a10      	ldr	r2, [pc, #64]	; (8003334 <HAL_MspInit+0x4c>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6613      	str	r3, [r2, #96]	; 0x60
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_MspInit+0x4c>)
 80032fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_MspInit+0x4c>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_MspInit+0x4c>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6593      	str	r3, [r2, #88]	; 0x58
 8003312:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_MspInit+0x4c>)
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	210f      	movs	r1, #15
 8003322:	f06f 0001 	mvn.w	r0, #1
 8003326:	f002 fa4d 	bl	80057c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000

08003338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <HAL_ADC_MspInit+0xc8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d14e      	bne.n	80033f8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_ADC_MspInit+0xcc>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_ADC_MspInit+0xcc>)
 8003360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_ADC_MspInit+0xcc>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_ADC_MspInit+0xcc>)
 8003374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <HAL_ADC_MspInit+0xcc>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_ADC_MspInit+0xcc>)
 8003380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800338a:	230f      	movs	r3, #15
 800338c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800338e:	230b      	movs	r3, #11
 8003390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	4619      	mov	r1, r3
 800339c:	481a      	ldr	r0, [pc, #104]	; (8003408 <HAL_ADC_MspInit+0xd0>)
 800339e:	f002 fc73 	bl	8005c88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033a4:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <HAL_ADC_MspInit+0xd8>)
 80033a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80033a8:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b4:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033ba:	4b14      	ldr	r3, [pc, #80]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033d2:	2220      	movs	r2, #32
 80033d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033dc:	480b      	ldr	r0, [pc, #44]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033de:	f002 fa1b 	bl	8005818 <HAL_DMA_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80033e8:	f7ff f9c4 	bl	8002774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80033f2:	4a06      	ldr	r2, [pc, #24]	; (800340c <HAL_ADC_MspInit+0xd4>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033f8:	bf00      	nop
 80033fa:	3728      	adds	r7, #40	; 0x28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	50040000 	.word	0x50040000
 8003404:	40021000 	.word	0x40021000
 8003408:	48000800 	.word	0x48000800
 800340c:	200050f4 	.word	0x200050f4
 8003410:	40020008 	.word	0x40020008

08003414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	; 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_I2C_MspInit+0x7c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d128      	bne.n	8003488 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <HAL_I2C_MspInit+0x80>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343a:	4a16      	ldr	r2, [pc, #88]	; (8003494 <HAL_I2C_MspInit+0x80>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <HAL_I2C_MspInit+0x80>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800344e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003454:	2312      	movs	r3, #18
 8003456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003458:	2301      	movs	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003460:	2304      	movs	r3, #4
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4619      	mov	r1, r3
 800346a:	480b      	ldr	r0, [pc, #44]	; (8003498 <HAL_I2C_MspInit+0x84>)
 800346c:	f002 fc0c 	bl	8005c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_I2C_MspInit+0x80>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_I2C_MspInit+0x80>)
 8003476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800347a:	6593      	str	r3, [r2, #88]	; 0x58
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_I2C_MspInit+0x80>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003488:	bf00      	nop
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40005400 	.word	0x40005400
 8003494:	40021000 	.word	0x40021000
 8003498:	48000400 	.word	0x48000400

0800349c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_SPI_MspInit+0xb4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d144      	bne.n	8003548 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c2:	4a24      	ldr	r2, [pc, #144]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034c8:	6613      	str	r3, [r2, #96]	; 0x60
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	4a18      	ldr	r2, [pc, #96]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_SPI_MspInit+0xb8>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003506:	2320      	movs	r3, #32
 8003508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003512:	2303      	movs	r3, #3
 8003514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003516:	2305      	movs	r3, #5
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003524:	f002 fbb0 	bl	8005c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003528:	2330      	movs	r3, #48	; 0x30
 800352a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003538:	2305      	movs	r3, #5
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4619      	mov	r1, r3
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <HAL_SPI_MspInit+0xbc>)
 8003544:	f002 fba0 	bl	8005c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003548:	bf00      	nop
 800354a:	3728      	adds	r7, #40	; 0x28
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40013000 	.word	0x40013000
 8003554:	40021000 	.word	0x40021000
 8003558:	48000400 	.word	0x48000400

0800355c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_TIM_PWM_MspInit+0x210>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10c      	bne.n	8003588 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	4a7f      	ldr	r2, [pc, #508]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 8003574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003578:	6613      	str	r3, [r2, #96]	; 0x60
 800357a:	4b7d      	ldr	r3, [pc, #500]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 800357c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003586:	e0ed      	b.n	8003764 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a79      	ldr	r2, [pc, #484]	; (8003774 <HAL_TIM_PWM_MspInit+0x218>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f040 809a 	bne.w	80036c8 <HAL_TIM_PWM_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003594:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 8003596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003598:	4a75      	ldr	r2, [pc, #468]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	6593      	str	r3, [r2, #88]	; 0x58
 80035a0:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80035ac:	4b72      	ldr	r3, [pc, #456]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_TIM_PWM_MspInit+0x220>)
 80035b0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80035b2:	4b71      	ldr	r3, [pc, #452]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035b4:	2205      	movs	r2, #5
 80035b6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035b8:	4b6f      	ldr	r3, [pc, #444]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035ba:	2210      	movs	r2, #16
 80035bc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80035be:	4b6e      	ldr	r3, [pc, #440]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035ca:	4b6b      	ldr	r3, [pc, #428]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035d2:	4b69      	ldr	r3, [pc, #420]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80035e0:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80035e6:	4864      	ldr	r0, [pc, #400]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035e8:	f002 f916 	bl	8005818 <HAL_DMA_Init>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_TIM_PWM_MspInit+0x9a>
      Error_Handler();
 80035f2:	f7ff f8bf 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a5f      	ldr	r2, [pc, #380]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24
 80035fc:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a5c      	ldr	r2, [pc, #368]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
 8003608:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_TIM_PWM_MspInit+0x21c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800360e:	4b5c      	ldr	r3, [pc, #368]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 8003610:	4a5c      	ldr	r2, [pc, #368]	; (8003784 <HAL_TIM_PWM_MspInit+0x228>)
 8003612:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 8003614:	4b5a      	ldr	r3, [pc, #360]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 8003616:	2205      	movs	r2, #5
 8003618:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800361a:	4b59      	ldr	r3, [pc, #356]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 800361c:	2210      	movs	r2, #16
 800361e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800362c:	4b54      	ldr	r3, [pc, #336]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 800362e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003632:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003634:	4b52      	ldr	r3, [pc, #328]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 8003636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800363a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800363c:	4b50      	ldr	r3, [pc, #320]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003642:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 8003644:	2200      	movs	r2, #0
 8003646:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003648:	484d      	ldr	r0, [pc, #308]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 800364a:	f002 f8e5 	bl	8005818 <HAL_DMA_Init>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_TIM_PWM_MspInit+0xfc>
      Error_Handler();
 8003654:	f7ff f88e 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a49      	ldr	r2, [pc, #292]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
 800365e:	4a48      	ldr	r2, [pc, #288]	; (8003780 <HAL_TIM_PWM_MspInit+0x224>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8003664:	4b48      	ldr	r3, [pc, #288]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 8003666:	4a49      	ldr	r2, [pc, #292]	; (800378c <HAL_TIM_PWM_MspInit+0x230>)
 8003668:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 800366c:	2205      	movs	r2, #5
 800366e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003670:	4b45      	ldr	r3, [pc, #276]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 8003672:	2210      	movs	r2, #16
 8003674:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800367c:	4b42      	ldr	r3, [pc, #264]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 8003684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003688:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800368a:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 800368c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003690:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 8003694:	2200      	movs	r2, #0
 8003696:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003698:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800369e:	483a      	ldr	r0, [pc, #232]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 80036a0:	f002 f8ba 	bl	8005818 <HAL_DMA_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_MspInit+0x152>
      Error_Handler();
 80036aa:	f7ff f863 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a35      	ldr	r2, [pc, #212]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
 80036b4:	4a34      	ldr	r2, [pc, #208]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a32      	ldr	r2, [pc, #200]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 80036be:	621a      	str	r2, [r3, #32]
 80036c0:	4a31      	ldr	r2, [pc, #196]	; (8003788 <HAL_TIM_PWM_MspInit+0x22c>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80036c6:	e04d      	b.n	8003764 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a30      	ldr	r2, [pc, #192]	; (8003790 <HAL_TIM_PWM_MspInit+0x234>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d137      	bne.n	8003742 <HAL_TIM_PWM_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	4a26      	ldr	r2, [pc, #152]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 80036d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036dc:	6613      	str	r3, [r2, #96]	; 0x60
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 80036e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Channel7;
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 80036ec:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <HAL_TIM_PWM_MspInit+0x23c>)
 80036ee:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_7;
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 80036f2:	2207      	movs	r2, #7
 80036f4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036f6:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 80036f8:	2210      	movs	r2, #16
 80036fa:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 80036fe:	2200      	movs	r2, #0
 8003700:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 800370a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800370e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 8003712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003716:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 800371a:	2200      	movs	r2, #0
 800371c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 8003720:	2200      	movs	r2, #0
 8003722:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8003724:	481b      	ldr	r0, [pc, #108]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 8003726:	f002 f877 	bl	8005818 <HAL_DMA_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_TIM_PWM_MspInit+0x1d8>
      Error_Handler();
 8003730:	f7ff f820 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <HAL_TIM_PWM_MspInit+0x238>)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003740:	e010      	b.n	8003764 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM15)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a15      	ldr	r2, [pc, #84]	; (800379c <HAL_TIM_PWM_MspInit+0x240>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d10b      	bne.n	8003764 <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 800374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 8003752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003756:	6613      	str	r3, [r2, #96]	; 0x60
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <HAL_TIM_PWM_MspInit+0x214>)
 800375a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
}
 8003764:	bf00      	nop
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40021000 	.word	0x40021000
 8003774:	40000400 	.word	0x40000400
 8003778:	2000513c 	.word	0x2000513c
 800377c:	4002006c 	.word	0x4002006c
 8003780:	20004f94 	.word	0x20004f94
 8003784:	4002001c 	.word	0x4002001c
 8003788:	2000d278 	.word	0x2000d278
 800378c:	40020030 	.word	0x40020030
 8003790:	40013400 	.word	0x40013400
 8003794:	20003654 	.word	0x20003654
 8003798:	40020480 	.word	0x40020480
 800379c:	40014000 	.word	0x40014000

080037a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <HAL_TIM_Base_MspInit+0x5c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10c      	bne.n	80037cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_TIM_Base_MspInit+0x60>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <HAL_TIM_Base_MspInit+0x60>)
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037bc:	6613      	str	r3, [r2, #96]	; 0x60
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_TIM_Base_MspInit+0x60>)
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80037ca:	e010      	b.n	80037ee <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <HAL_TIM_Base_MspInit+0x64>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10b      	bne.n	80037ee <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_TIM_Base_MspInit+0x60>)
 80037d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037da:	4a09      	ldr	r2, [pc, #36]	; (8003800 <HAL_TIM_Base_MspInit+0x60>)
 80037dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e0:	6613      	str	r3, [r2, #96]	; 0x60
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_TIM_Base_MspInit+0x60>)
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40014400 	.word	0x40014400
 8003800:	40021000 	.word	0x40021000
 8003804:	40014800 	.word	0x40014800

08003808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	; 0x38
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a76      	ldr	r2, [pc, #472]	; (8003a00 <HAL_TIM_MspPostInit+0x1f8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d11e      	bne.n	8003868 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	4b76      	ldr	r3, [pc, #472]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	4a75      	ldr	r2, [pc, #468]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003836:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003854:	2301      	movs	r3, #1
 8003856:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385c:	4619      	mov	r1, r3
 800385e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003862:	f002 fa11 	bl	8005c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003866:	e0c7      	b.n	80039f8 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM3)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a66      	ldr	r2, [pc, #408]	; (8003a08 <HAL_TIM_MspPostInit+0x200>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d138      	bne.n	80038e4 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	4b64      	ldr	r3, [pc, #400]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	4a63      	ldr	r2, [pc, #396]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800387e:	4b61      	ldr	r3, [pc, #388]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800388a:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	4a5d      	ldr	r2, [pc, #372]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038a2:	2303      	movs	r3, #3
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038b2:	2302      	movs	r3, #2
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ba:	4619      	mov	r1, r3
 80038bc:	4853      	ldr	r0, [pc, #332]	; (8003a0c <HAL_TIM_MspPostInit+0x204>)
 80038be:	f002 f9e3 	bl	8005c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038c2:	2340      	movs	r3, #64	; 0x40
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c6:	2302      	movs	r3, #2
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ce:	2300      	movs	r3, #0
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038d2:	2302      	movs	r3, #2
 80038d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038da:	4619      	mov	r1, r3
 80038dc:	484c      	ldr	r0, [pc, #304]	; (8003a10 <HAL_TIM_MspPostInit+0x208>)
 80038de:	f002 f9d3 	bl	8005c88 <HAL_GPIO_Init>
}
 80038e2:	e089      	b.n	80039f8 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM8)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <HAL_TIM_MspPostInit+0x20c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d11c      	bne.n	8003928 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ee:	4b45      	ldr	r3, [pc, #276]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4a44      	ldr	r2, [pc, #272]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038fa:	4b42      	ldr	r3, [pc, #264]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003916:	2303      	movs	r3, #3
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391e:	4619      	mov	r1, r3
 8003920:	483b      	ldr	r0, [pc, #236]	; (8003a10 <HAL_TIM_MspPostInit+0x208>)
 8003922:	f002 f9b1 	bl	8005c88 <HAL_GPIO_Init>
}
 8003926:	e067      	b.n	80039f8 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM15)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <HAL_TIM_MspPostInit+0x210>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d11d      	bne.n	800396e <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003932:	4b34      	ldr	r3, [pc, #208]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	4a33      	ldr	r2, [pc, #204]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800394a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	2302      	movs	r3, #2
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003958:	2300      	movs	r3, #0
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800395c:	230e      	movs	r3, #14
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003964:	4619      	mov	r1, r3
 8003966:	4829      	ldr	r0, [pc, #164]	; (8003a0c <HAL_TIM_MspPostInit+0x204>)
 8003968:	f002 f98e 	bl	8005c88 <HAL_GPIO_Init>
}
 800396c:	e044      	b.n	80039f8 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM16)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_TIM_MspPostInit+0x214>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d11d      	bne.n	80039b4 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 800397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397c:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003984:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 8003986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003990:	2340      	movs	r3, #64	; 0x40
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003994:	2302      	movs	r3, #2
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80039a0:	230e      	movs	r3, #14
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a8:	4619      	mov	r1, r3
 80039aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ae:	f002 f96b 	bl	8005c88 <HAL_GPIO_Init>
}
 80039b2:	e021      	b.n	80039f8 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM17)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <HAL_TIM_MspPostInit+0x218>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d11c      	bne.n	80039f8 <HAL_TIM_MspPostInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_TIM_MspPostInit+0x1fc>)
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80039e6:	230e      	movs	r3, #14
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ee:	4619      	mov	r1, r3
 80039f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f4:	f002 f948 	bl	8005c88 <HAL_GPIO_Init>
}
 80039f8:	bf00      	nop
 80039fa:	3738      	adds	r7, #56	; 0x38
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	48000400 	.word	0x48000400
 8003a10:	48000800 	.word	0x48000800
 8003a14:	40013400 	.word	0x40013400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <HAL_UART_MspInit+0x7c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d128      	bne.n	8003a98 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a46:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_UART_MspInit+0x80>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_UART_MspInit+0x80>)
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	6593      	str	r3, [r2, #88]	; 0x58
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_UART_MspInit+0x80>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <HAL_UART_MspInit+0x80>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <HAL_UART_MspInit+0x80>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_UART_MspInit+0x80>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a76:	230c      	movs	r3, #12
 8003a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a86:	2307      	movs	r3, #7
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a94:	f002 f8f8 	bl	8005c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a98:	bf00      	nop
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	; 0x30
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	2036      	movs	r0, #54	; 0x36
 8003abe:	f001 fe81 	bl	80057c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ac2:	2036      	movs	r0, #54	; 0x36
 8003ac4:	f001 fe9a 	bl	80057fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <HAL_InitTick+0x9c>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_InitTick+0x9c>)
 8003ace:	f043 0310 	orr.w	r3, r3, #16
 8003ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_InitTick+0x9c>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ae0:	f107 0210 	add.w	r2, r7, #16
 8003ae4:	f107 0314 	add.w	r3, r7, #20
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 f9a2 	bl	8006e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003af0:	f003 f974 	bl	8006ddc <HAL_RCC_GetPCLK1Freq>
 8003af4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <HAL_InitTick+0xa0>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	0c9b      	lsrs	r3, r3, #18
 8003b00:	3b01      	subs	r3, #1
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_InitTick+0xa4>)
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <HAL_InitTick+0xa8>)
 8003b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_InitTick+0xa4>)
 8003b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_InitTick+0xa4>)
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b18:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_InitTick+0xa4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_InitTick+0xa4>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b24:	4809      	ldr	r0, [pc, #36]	; (8003b4c <HAL_InitTick+0xa4>)
 8003b26:	f004 fc57 	bl	80083d8 <HAL_TIM_Base_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b30:	4806      	ldr	r0, [pc, #24]	; (8003b4c <HAL_InitTick+0xa4>)
 8003b32:	f004 fca9 	bl	8008488 <HAL_TIM_Base_Start_IT>
 8003b36:	4603      	mov	r3, r0
 8003b38:	e000      	b.n	8003b3c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3730      	adds	r7, #48	; 0x30
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	2000e440 	.word	0x2000e440
 8003b50:	40001000 	.word	0x40001000

08003b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b58:	e7fe      	b.n	8003b58 <NMI_Handler+0x4>

08003b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5e:	e7fe      	b.n	8003b5e <HardFault_Handler+0x4>

08003b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b64:	e7fe      	b.n	8003b64 <MemManage_Handler+0x4>

08003b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <BusFault_Handler+0x4>

08003b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <UsageFault_Handler+0x4>

08003b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <DMA1_Channel1_IRQHandler+0x10>)
 8003b86:	f001 ffa0 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200050f4 	.word	0x200050f4

08003b94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <DMA1_Channel2_IRQHandler+0x10>)
 8003b9a:	f001 ff96 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20004f94 	.word	0x20004f94

08003ba8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <DMA1_Channel3_IRQHandler+0x10>)
 8003bae:	f001 ff8c 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	2000d278 	.word	0x2000d278

08003bbc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA1_Channel6_IRQHandler+0x10>)
 8003bc2:	f001 ff82 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000513c 	.word	0x2000513c

08003bd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <TIM6_DAC_IRQHandler+0x38>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <TIM6_DAC_IRQHandler+0x38>)
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <TIM6_DAC_IRQHandler+0x38>)
 8003be6:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <TIM6_DAC_IRQHandler+0x3c>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <TIM6_DAC_IRQHandler+0x3c>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <TIM6_DAC_IRQHandler+0x3c>)
 8003bfa:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bfc:	4804      	ldr	r0, [pc, #16]	; (8003c10 <TIM6_DAC_IRQHandler+0x40>)
 8003bfe:	f005 fa3b 	bl	8009078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2000364e 	.word	0x2000364e
 8003c0c:	2000364c 	.word	0x2000364c
 8003c10:	2000e440 	.word	0x2000e440

08003c14 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <DMA2_Channel7_IRQHandler+0x10>)
 8003c1a:	f001 ff56 	bl	8005aca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20003654 	.word	0x20003654

08003c28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e00a      	b.n	8003c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c3a:	f3af 8000 	nop.w
 8003c3e:	4601      	mov	r1, r0
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	60ba      	str	r2, [r7, #8]
 8003c46:	b2ca      	uxtb	r2, r1
 8003c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	dbf0      	blt.n	8003c3a <_read+0x12>
	}

return len;
 8003c58:	687b      	ldr	r3, [r7, #4]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	e009      	b.n	8003c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	60ba      	str	r2, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fd fe33 	bl	80018e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3301      	adds	r3, #1
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	dbf1      	blt.n	8003c74 <_write+0x12>
	}
	return len;
 8003c90:	687b      	ldr	r3, [r7, #4]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <_close>:

int _close(int file)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_isatty>:

int _isatty(int file)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <_sbrk+0x5c>)
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <_sbrk+0x60>)
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <_sbrk+0x64>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d20:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <_sbrk+0x64>)
 8003d22:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <_sbrk+0x68>)
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <_sbrk+0x64>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d207      	bcs.n	8003d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d34:	f00d fe82 	bl	8011a3c <__errno>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	220c      	movs	r2, #12
 8003d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d42:	e009      	b.n	8003d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <_sbrk+0x64>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <_sbrk+0x64>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	4a05      	ldr	r2, [pc, #20]	; (8003d68 <_sbrk+0x64>)
 8003d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20018000 	.word	0x20018000
 8003d64:	00000400 	.word	0x00000400
 8003d68:	200001e8 	.word	0x200001e8
 8003d6c:	20010558 	.word	0x20010558

08003d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <SystemInit+0x5c>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <SystemInit+0x5c>)
 8003d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <SystemInit+0x60>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <SystemInit+0x60>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <SystemInit+0x60>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <SystemInit+0x60>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <SystemInit+0x60>)
 8003d9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003da0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003da4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <SystemInit+0x60>)
 8003da8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <SystemInit+0x60>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <SystemInit+0x60>)
 8003db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <SystemInit+0x60>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	619a      	str	r2, [r3, #24]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	e000ed00 	.word	0xe000ed00
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
extern TIM_HandleTypeDef htim3;

volatile uint8_t ucDataSentFlag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8003de4:	2100      	movs	r1, #0
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f005 f856 	bl	8008e98 <HAL_TIM_PWM_Stop_DMA>
	}
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20004fdc 	.word	0x20004fdc

08003df8 <WS2812B_vInit>:
		DMA_HandleTypeDef *pxDMA1Channel1,
		DMA_HandleTypeDef *pxDMA1Channel2,
		DMA_HandleTypeDef *pxDMA1Channel3,
		DMA_HandleTypeDef *pxDMA2Channel1
	)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
	pxWS28182B->pxTimer1 = pxTimer1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	601a      	str	r2, [r3, #0]
	pxWS28182B->pxTimer2 = pxTimer2;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	605a      	str	r2, [r3, #4]
	pxWS28182B->pxTimer1->Instance->ARR = WS2812B_ARR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2264      	movs	r2, #100	; 0x64
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
	pxWS28182B->pxTimer2->Instance->ARR = WS2812B_ARR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2264      	movs	r2, #100	; 0x64
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c

	pxWS28182B->pxDMA1Channel1 = pxDMA1Channel1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	609a      	str	r2, [r3, #8]
	pxWS28182B->pxDMA1Channel2 = pxDMA1Channel2;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	60da      	str	r2, [r3, #12]
	pxWS28182B->pxDMA1Channel3 = pxDMA1Channel3;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	611a      	str	r2, [r3, #16]
	pxWS28182B->pxDMA2Channel1 = pxDMA2Channel1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	615a      	str	r2, [r3, #20]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <WS2812B_vSetLED>:



void WS2812B_vSetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex, uint8_t ucRed, uint8_t ucGreen, uint8_t ucBlue)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	4608      	mov	r0, r1
 8003e54:	4611      	mov	r1, r2
 8003e56:	461a      	mov	r2, r3
 8003e58:	4603      	mov	r3, r0
 8003e5a:	70fb      	strb	r3, [r7, #3]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70bb      	strb	r3, [r7, #2]
 8003e60:	4613      	mov	r3, r2
 8003e62:	707b      	strb	r3, [r7, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	711a      	strb	r2, [r3, #4]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = ucGreen;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	787a      	ldrb	r2, [r7, #1]
 8003e82:	715a      	strb	r2, [r3, #5]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = ucRed;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	78ba      	ldrb	r2, [r7, #2]
 8003e92:	719a      	strb	r2, [r3, #6]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = ucBlue;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	7c3a      	ldrb	r2, [r7, #16]
 8003ea2:	71da      	strb	r2, [r3, #7]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <WS2812B_vResetLED>:


void WS2812B_vResetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	78fa      	ldrb	r2, [r7, #3]
 8003eca:	711a      	strb	r2, [r3, #4]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = 0;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	2200      	movs	r2, #0
 8003eda:	715a      	strb	r2, [r3, #5]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = 0;
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	2200      	movs	r2, #0
 8003eea:	719a      	strb	r2, [r3, #6]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = 0;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	2200      	movs	r2, #0
 8003efa:	71da      	strb	r2, [r3, #7]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <WS2812B_vResetLEDs>:


void WS2812B_vResetLEDs(WS2812BHandle_t *pxWS28182B)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	// [!] faster way to reset with memclr
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e00a      	b.n	8003f2c <WS2812B_vResetLEDs+0x24>
	{
		WS2812B_vResetLED(pxWS28182B, i);
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffc8 	bl	8003eb0 <WS2812B_vResetLED>
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f30:	2b1f      	cmp	r3, #31
 8003f32:	ddf0      	ble.n	8003f16 <WS2812B_vResetLEDs+0xe>
	}
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <WS2812B_vSetBrightness>:


// Credits to Controllers Tech
void WS2812B_vSetBrightness(WS2812BHandle_t *pxWS28182B, int brightness)
{
 8003f40:	b5b0      	push	{r4, r5, r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b2d      	cmp	r3, #45	; 0x2d
 8003f4e:	dd01      	ble.n	8003f54 <WS2812B_vSetBrightness+0x14>
 8003f50:	232d      	movs	r3, #45	; 0x2d
 8003f52:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < LED_COUNT; i++)
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e0b4      	b.n	80040c4 <WS2812B_vSetBrightness+0x184>
	{
		pxWS28182B->pxLEDBrightness[i].ucIndex = pxWS28182B->pxLEDData[i].ucIndex;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	7919      	ldrb	r1, [r3, #4]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	460a      	mov	r2, r1
 8003f76:	711a      	strb	r2, [r3, #4]

		float angle = 90 - brightness;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f86:	edc7 7a02 	vstr	s15, [r7, #8]
		angle = angle*M_PI / 180;
 8003f8a:	68b8      	ldr	r0, [r7, #8]
 8003f8c:	f7fc fadc 	bl	8000548 <__aeabi_f2d>
 8003f90:	a352      	add	r3, pc, #328	; (adr r3, 80040dc <WS2812B_vSetBrightness+0x19c>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc fb2f 	bl	80005f8 <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <WS2812B_vSetBrightness+0x198>)
 8003fa8:	f7fc fc50 	bl	800084c <__aeabi_ddiv>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7fc fe02 	bl	8000bbc <__aeabi_d2f>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	60bb      	str	r3, [r7, #8]
		pxWS28182B->pxLEDBrightness[i].ucGreen = (pxWS28182B->pxLEDData[i].ucGreen)/(tan(angle));
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	795b      	ldrb	r3, [r3, #5]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc faaa 	bl	8000524 <__aeabi_i2d>
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	460d      	mov	r5, r1
 8003fd4:	68b8      	ldr	r0, [r7, #8]
 8003fd6:	f7fc fab7 	bl	8000548 <__aeabi_f2d>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	ec43 2b10 	vmov	d0, r2, r3
 8003fe2:	f00e fd39 	bl	8012a58 <tan>
 8003fe6:	ec53 2b10 	vmov	r2, r3, d0
 8003fea:	4620      	mov	r0, r4
 8003fec:	4629      	mov	r1, r5
 8003fee:	f7fc fc2d 	bl	800084c <__aeabi_ddiv>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fc fdbf 	bl	8000b7c <__aeabi_d2uiz>
 8003ffe:	4603      	mov	r3, r0
 8004000:	b2d9      	uxtb	r1, r3
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	460a      	mov	r2, r1
 8004010:	715a      	strb	r2, [r3, #5]
		pxWS28182B->pxLEDBrightness[i].ucRed = (pxWS28182B->pxLEDData[i].ucRed)/(tan(angle));
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	799b      	ldrb	r3, [r3, #6]
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc fa7f 	bl	8000524 <__aeabi_i2d>
 8004026:	4604      	mov	r4, r0
 8004028:	460d      	mov	r5, r1
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	f7fc fa8c 	bl	8000548 <__aeabi_f2d>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	ec43 2b10 	vmov	d0, r2, r3
 8004038:	f00e fd0e 	bl	8012a58 <tan>
 800403c:	ec53 2b10 	vmov	r2, r3, d0
 8004040:	4620      	mov	r0, r4
 8004042:	4629      	mov	r1, r5
 8004044:	f7fc fc02 	bl	800084c <__aeabi_ddiv>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	f7fc fd94 	bl	8000b7c <__aeabi_d2uiz>
 8004054:	4603      	mov	r3, r0
 8004056:	b2d9      	uxtb	r1, r3
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	460a      	mov	r2, r1
 8004066:	719a      	strb	r2, [r3, #6]
		pxWS28182B->pxLEDBrightness[i].ucBlue = (pxWS28182B->pxLEDData[i].ucBlue)/(tan(angle));
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	79db      	ldrb	r3, [r3, #7]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc fa54 	bl	8000524 <__aeabi_i2d>
 800407c:	4604      	mov	r4, r0
 800407e:	460d      	mov	r5, r1
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	f7fc fa61 	bl	8000548 <__aeabi_f2d>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	ec43 2b10 	vmov	d0, r2, r3
 800408e:	f00e fce3 	bl	8012a58 <tan>
 8004092:	ec53 2b10 	vmov	r2, r3, d0
 8004096:	4620      	mov	r0, r4
 8004098:	4629      	mov	r1, r5
 800409a:	f7fc fbd7 	bl	800084c <__aeabi_ddiv>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	4610      	mov	r0, r2
 80040a4:	4619      	mov	r1, r3
 80040a6:	f7fc fd69 	bl	8000b7c <__aeabi_d2uiz>
 80040aa:	4603      	mov	r3, r0
 80040ac:	b2d9      	uxtb	r1, r3
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	460a      	mov	r2, r1
 80040bc:	71da      	strb	r2, [r3, #7]
	for (int i = 0; i < LED_COUNT; i++)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3301      	adds	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b1f      	cmp	r3, #31
 80040c8:	f77f af47 	ble.w	8003f5a <WS2812B_vSetBrightness+0x1a>
	}
#endif
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bdb0      	pop	{r4, r5, r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40668000 	.word	0x40668000
 80040dc:	54442d18 	.word	0x54442d18
 80040e0:	400921fb 	.word	0x400921fb

080040e4 <WS2812B_vSend>:




void WS2812B_vSend(WS2812BHandle_t *pxWS28182B)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
	uint32_t color;

	for (int i = 0; i < LED_COUNT; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e03e      	b.n	8004174 <WS2812B_vSend+0x90>
	{
		color = ((pxWS28182B->pxLEDBrightness[i].ucGreen<<16) | (pxWS28182B->pxLEDBrightness[i].ucRed<<8) | (pxWS28182B->pxLEDBrightness[i].ucBlue));
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	795b      	ldrb	r3, [r3, #5]
 8004104:	041a      	lsls	r2, r3, #16
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	799b      	ldrb	r3, [r3, #6]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	431a      	orrs	r2, r3
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	79db      	ldrb	r3, [r3, #7]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--)
 800412a:	2317      	movs	r3, #23
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e01b      	b.n	8004168 <WS2812B_vSend+0x84>
		{
			if (color & (1 << i))
 8004130:	2201      	movs	r2, #1
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	461a      	mov	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <WS2812B_vSend+0x6c>
			{
				pxWS28182B->pwmData[indx] = WS2812B_T1H_TICKS;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	320c      	adds	r2, #12
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800414e:	e005      	b.n	800415c <WS2812B_vSend+0x78>
			}
			else
			{
				pxWS28182B->pwmData[indx] = WS2812B_T0H_TICKS;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	320c      	adds	r2, #12
 8004156:	2120      	movs	r1, #32
 8004158:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			indx++;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	3301      	adds	r3, #1
 8004160:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3b01      	subs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	dae0      	bge.n	8004130 <WS2812B_vSend+0x4c>
	for (int i = 0; i < LED_COUNT; i++)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	3301      	adds	r3, #1
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b1f      	cmp	r3, #31
 8004178:	ddbd      	ble.n	80040f6 <WS2812B_vSend+0x12>
		}
	}

	for (int i = 0; i < 50; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	e00b      	b.n	8004198 <WS2812B_vSend+0xb4>
	{
		pxWS28182B->pwmData[indx] = 0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	320c      	adds	r2, #12
 8004186:	2100      	movs	r1, #0
 8004188:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	3301      	adds	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 50; i++)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b31      	cmp	r3, #49	; 0x31
 800419c:	ddf0      	ble.n	8004180 <WS2812B_vSend+0x9c>
	}

	HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_1, (uint32_t *)pxWS28182B->pwmData, indx);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f103 0218 	add.w	r2, r3, #24
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2100      	movs	r1, #0
 80041ae:	f004 fc5b 	bl	8008a68 <HAL_TIM_PWM_Start_DMA>
	// [!] semaphore wait or osdelay
	//while (!ucDataSentFlag) {};
	ucDataSentFlag = 0;
 80041b2:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <WS2812B_vSend+0xdc>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
}
 80041b8:	bf00      	nop
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	200001ec 	.word	0x200001ec

080041c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80041c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80041c8:	f7ff fdd2 	bl	8003d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80041cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80041ce:	e003      	b.n	80041d8 <LoopCopyDataInit>

080041d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80041d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80041d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80041d6:	3104      	adds	r1, #4

080041d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80041d8:	480a      	ldr	r0, [pc, #40]	; (8004204 <LoopForever+0xa>)
	ldr	r3, =_edata
 80041da:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <LoopForever+0xe>)
	adds	r2, r0, r1
 80041dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80041de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80041e0:	d3f6      	bcc.n	80041d0 <CopyDataInit>
	ldr	r2, =_sbss
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <LoopForever+0x12>)
	b	LoopFillZerobss
 80041e4:	e002      	b.n	80041ec <LoopFillZerobss>

080041e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80041e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80041e8:	f842 3b04 	str.w	r3, [r2], #4

080041ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80041ec:	4b08      	ldr	r3, [pc, #32]	; (8004210 <LoopForever+0x16>)
	cmp	r2, r3
 80041ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80041f0:	d3f9      	bcc.n	80041e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041f2:	f00d fc29 	bl	8011a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041f6:	f7fd fb9f 	bl	8001938 <main>

080041fa <LoopForever>:

LoopForever:
    b LoopForever
 80041fa:	e7fe      	b.n	80041fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80041fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004200:	08014628 	.word	0x08014628
	ldr	r0, =_sdata
 8004204:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004208:	200001c4 	.word	0x200001c4
	ldr	r2, =_sbss
 800420c:	200001c4 	.word	0x200001c4
	ldr	r3, = _ebss
 8004210:	20010554 	.word	0x20010554

08004214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004214:	e7fe      	b.n	8004214 <ADC1_2_IRQHandler>
	...

08004218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <HAL_Init+0x3c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a0b      	ldr	r2, [pc, #44]	; (8004254 <HAL_Init+0x3c>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800422e:	2003      	movs	r0, #3
 8004230:	f001 fabd 	bl	80057ae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004234:	2000      	movs	r0, #0
 8004236:	f7ff fc37 	bl	8003aa8 <HAL_InitTick>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	71fb      	strb	r3, [r7, #7]
 8004244:	e001      	b.n	800424a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004246:	f7ff f84f 	bl	80032e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800424a:	79fb      	ldrb	r3, [r7, #7]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40022000 	.word	0x40022000

08004258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_IncTick+0x20>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_IncTick+0x24>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4413      	add	r3, r2
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_IncTick+0x24>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000144 	.word	0x20000144
 800427c:	2000e48c 	.word	0x2000e48c

08004280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return uwTick;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_GetTick+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	2000e48c 	.word	0x2000e48c

08004298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a0:	f7ff ffee 	bl	8004280 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b0:	d005      	beq.n	80042be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_Delay+0x44>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042be:	bf00      	nop
 80042c0:	f7ff ffde 	bl	8004280 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d8f7      	bhi.n	80042c0 <HAL_Delay+0x28>
  {
  }
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000144 	.word	0x20000144

080042e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	609a      	str	r2, [r3, #8]
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3360      	adds	r3, #96	; 0x60
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b08      	ldr	r3, [pc, #32]	; (800438c <LL_ADC_SetOffset+0x44>)
 800436a:	4013      	ands	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	03fff000 	.word	0x03fff000

08004390 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3360      	adds	r3, #96	; 0x60
 800439e:	461a      	mov	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3360      	adds	r3, #96	; 0x60
 80043cc:	461a      	mov	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3330      	adds	r3, #48	; 0x30
 8004428:	461a      	mov	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	4413      	add	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	211f      	movs	r1, #31
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	401a      	ands	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	0e9b      	lsrs	r3, r3, #26
 8004450:	f003 011f 	and.w	r1, r3, #31
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	431a      	orrs	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3314      	adds	r3, #20
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	0e5b      	lsrs	r3, r3, #25
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	4413      	add	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	0d1b      	lsrs	r3, r3, #20
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2107      	movs	r1, #7
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	401a      	ands	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	0d1b      	lsrs	r3, r3, #20
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	fa01 f303 	lsl.w	r3, r1, r3
 80044b4:	431a      	orrs	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0318 	and.w	r3, r3, #24
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <LL_ADC_SetChannelSingleDiff+0x44>)
 80044ec:	40d9      	lsrs	r1, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	400b      	ands	r3, r1
 80044f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f6:	431a      	orrs	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	0007ffff 	.word	0x0007ffff

08004510 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 031f 	and.w	r3, r3, #31
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800453c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6093      	str	r3, [r2, #8]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004564:	d101      	bne.n	800456a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800458c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b4:	d101      	bne.n	80045ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <LL_ADC_IsEnabled+0x18>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <LL_ADC_IsEnabled+0x1a>
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004626:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800462a:	f043 0204 	orr.w	r2, r3, #4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b04      	cmp	r3, #4
 8004650:	d101      	bne.n	8004656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b08      	cmp	r3, #8
 8004676:	d101      	bne.n	800467c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800468c:	b590      	push	{r4, r7, lr}
 800468e:	b089      	sub	sp, #36	; 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e136      	b.n	8004914 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fe fe3f 	bl	8003338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff3f 	bl	8004550 <LL_ADC_IsDeepPowerDownEnabled>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff25 	bl	800452c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff ff5a 	bl	80045a0 <LL_ADC_IsInternalRegulatorEnabled>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d115      	bne.n	800471e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff ff3e 	bl	8004578 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046fc:	4b87      	ldr	r3, [pc, #540]	; (800491c <HAL_ADC_Init+0x290>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	099b      	lsrs	r3, r3, #6
 8004702:	4a87      	ldr	r2, [pc, #540]	; (8004920 <HAL_ADC_Init+0x294>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	3301      	adds	r3, #1
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004710:	e002      	b.n	8004718 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3b01      	subs	r3, #1
 8004716:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f9      	bne.n	8004712 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff3c 	bl	80045a0 <LL_ADC_IsInternalRegulatorEnabled>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f043 0210 	orr.w	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff ff75 	bl	800463e <LL_ADC_REG_IsConversionOngoing>
 8004754:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 80cf 	bne.w	8004902 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 80cb 	bne.w	8004902 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004770:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004774:	f043 0202 	orr.w	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff35 	bl	80045f0 <LL_ADC_IsEnabled>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d115      	bne.n	80047b8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800478c:	4865      	ldr	r0, [pc, #404]	; (8004924 <HAL_ADC_Init+0x298>)
 800478e:	f7ff ff2f 	bl	80045f0 <LL_ADC_IsEnabled>
 8004792:	4604      	mov	r4, r0
 8004794:	4864      	ldr	r0, [pc, #400]	; (8004928 <HAL_ADC_Init+0x29c>)
 8004796:	f7ff ff2b 	bl	80045f0 <LL_ADC_IsEnabled>
 800479a:	4603      	mov	r3, r0
 800479c:	431c      	orrs	r4, r3
 800479e:	4863      	ldr	r0, [pc, #396]	; (800492c <HAL_ADC_Init+0x2a0>)
 80047a0:	f7ff ff26 	bl	80045f0 <LL_ADC_IsEnabled>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4323      	orrs	r3, r4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4619      	mov	r1, r3
 80047b2:	485f      	ldr	r0, [pc, #380]	; (8004930 <HAL_ADC_Init+0x2a4>)
 80047b4:	f7ff fd94 	bl	80042e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	7e5b      	ldrb	r3, [r3, #25]
 80047bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047c2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80047c8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80047ce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047d6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d106      	bne.n	80047f4 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	3b01      	subs	r3, #1
 80047ec:	045b      	lsls	r3, r3, #17
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_ADC_Init+0x2a8>)
 8004818:	4013      	ands	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	430b      	orrs	r3, r1
 8004822:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff08 	bl	800463e <LL_ADC_REG_IsConversionOngoing>
 800482e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff15 	bl	8004664 <LL_ADC_INJ_IsConversionOngoing>
 800483a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d13d      	bne.n	80048be <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d13a      	bne.n	80048be <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800484c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004854:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004864:	f023 0302 	bic.w	r3, r3, #2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	69b9      	ldr	r1, [r7, #24]
 800486e:	430b      	orrs	r3, r1
 8004870:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004878:	2b01      	cmp	r3, #1
 800487a:	d118      	bne.n	80048ae <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004886:	f023 0304 	bic.w	r3, r3, #4
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004892:	4311      	orrs	r1, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004898:	4311      	orrs	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800489e:	430a      	orrs	r2, r1
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	611a      	str	r2, [r3, #16]
 80048ac:	e007      	b.n	80048be <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d10c      	bne.n	80048e0 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	f023 010f 	bic.w	r1, r3, #15
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
 80048de:	e007      	b.n	80048f0 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 020f 	bic.w	r2, r2, #15
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f023 0303 	bic.w	r3, r3, #3
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
 8004900:	e007      	b.n	8004912 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	f043 0210 	orr.w	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004912:	7ffb      	ldrb	r3, [r7, #31]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3724      	adds	r7, #36	; 0x24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}
 800491c:	2000013c 	.word	0x2000013c
 8004920:	053e2d63 	.word	0x053e2d63
 8004924:	50040000 	.word	0x50040000
 8004928:	50040100 	.word	0x50040100
 800492c:	50040200 	.word	0x50040200
 8004930:	50040300 	.word	0x50040300
 8004934:	fff0c007 	.word	0xfff0c007

08004938 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004944:	4850      	ldr	r0, [pc, #320]	; (8004a88 <HAL_ADC_Start_DMA+0x150>)
 8004946:	f7ff fde3 	bl	8004510 <LL_ADC_GetMultimode>
 800494a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fe74 	bl	800463e <LL_ADC_REG_IsConversionOngoing>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 808e 	bne.w	8004a7a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_ADC_Start_DMA+0x34>
 8004968:	2302      	movs	r3, #2
 800496a:	e089      	b.n	8004a80 <HAL_ADC_Start_DMA+0x148>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b05      	cmp	r3, #5
 800497e:	d002      	beq.n	8004986 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b09      	cmp	r3, #9
 8004984:	d172      	bne.n	8004a6c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 fc98 	bl	80052bc <ADC_Enable>
 800498c:	4603      	mov	r3, r0
 800498e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d165      	bne.n	8004a62 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a37      	ldr	r2, [pc, #220]	; (8004a8c <HAL_ADC_Start_DMA+0x154>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d002      	beq.n	80049ba <HAL_ADC_Start_DMA+0x82>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	e000      	b.n	80049bc <HAL_ADC_Start_DMA+0x84>
 80049ba:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <HAL_ADC_Start_DMA+0x158>)
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d002      	beq.n	80049ca <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e6:	f023 0206 	bic.w	r2, r3, #6
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	659a      	str	r2, [r3, #88]	; 0x58
 80049ee:	e002      	b.n	80049f6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <HAL_ADC_Start_DMA+0x15c>)
 80049fc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <HAL_ADC_Start_DMA+0x160>)
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <HAL_ADC_Start_DMA+0x164>)
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	221c      	movs	r2, #28
 8004a14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0210 	orr.w	r2, r2, #16
 8004a2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3340      	adds	r3, #64	; 0x40
 8004a48:	4619      	mov	r1, r3
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f000 ff9b 	bl	8005988 <HAL_DMA_Start_IT>
 8004a52:	4603      	mov	r3, r0
 8004a54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fddb 	bl	8004616 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a60:	e00d      	b.n	8004a7e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004a6a:	e008      	b.n	8004a7e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a78:	e001      	b.n	8004a7e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	50040300 	.word	0x50040300
 8004a8c:	50040100 	.word	0x50040100
 8004a90:	50040000 	.word	0x50040000
 8004a94:	08005381 	.word	0x08005381
 8004a98:	08005459 	.word	0x08005459
 8004a9c:	08005475 	.word	0x08005475

08004aa0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b0b6      	sub	sp, #216	; 0xd8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x22>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e3c7      	b.n	800528e <HAL_ADC_ConfigChannel+0x7b2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fd97 	bl	800463e <LL_ADC_REG_IsConversionOngoing>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 83a8 	bne.w	8005268 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	d824      	bhi.n	8004b6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	3b02      	subs	r3, #2
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d81b      	bhi.n	8004b62 <HAL_ADC_ConfigChannel+0x86>
 8004b2a:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <HAL_ADC_ConfigChannel+0x54>)
 8004b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b30:	08004b41 	.word	0x08004b41
 8004b34:	08004b49 	.word	0x08004b49
 8004b38:	08004b51 	.word	0x08004b51
 8004b3c:	08004b59 	.word	0x08004b59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	220c      	movs	r2, #12
 8004b44:	605a      	str	r2, [r3, #4]
          break;
 8004b46:	e011      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2212      	movs	r2, #18
 8004b4c:	605a      	str	r2, [r3, #4]
          break;
 8004b4e:	e00d      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2218      	movs	r2, #24
 8004b54:	605a      	str	r2, [r3, #4]
          break;
 8004b56:	e009      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b5e:	605a      	str	r2, [r3, #4]
          break;
 8004b60:	e004      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2206      	movs	r2, #6
 8004b66:	605a      	str	r2, [r3, #4]
          break;
 8004b68:	e000      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f7ff fc4d 	bl	8004418 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fd5b 	bl	800463e <LL_ADC_REG_IsConversionOngoing>
 8004b88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fd67 	bl	8004664 <LL_ADC_INJ_IsConversionOngoing>
 8004b96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 81a6 	bne.w	8004ef0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 81a1 	bne.w	8004ef0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f7ff fc58 	bl	8004470 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	08db      	lsrs	r3, r3, #3
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d00a      	beq.n	8004bf8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bf2:	f7ff fba9 	bl	8004348 <LL_ADC_SetOffset>
 8004bf6:	e17b      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fbc6 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x148>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fbbb 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	0e9b      	lsrs	r3, r3, #26
 8004c1e:	f003 021f 	and.w	r2, r3, #31
 8004c22:	e01e      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x186>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fbb0 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c3a:	fa93 f3a3 	rbit	r3, r3
 8004c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004c52:	2320      	movs	r3, #32
 8004c54:	e004      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x19e>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	0e9b      	lsrs	r3, r3, #26
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	e018      	b.n	8004cac <HAL_ADC_ConfigChannel+0x1d0>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c86:	fa93 f3a3 	rbit	r3, r3
 8004c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004c9e:	2320      	movs	r3, #32
 8004ca0:	e004      	b.n	8004cac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d106      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fb7f 	bl	80043bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff fb63 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x20e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fb58 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	0e9b      	lsrs	r3, r3, #26
 8004ce4:	f003 021f 	and.w	r2, r3, #31
 8004ce8:	e01e      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x24c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fb4d 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d00:	fa93 f3a3 	rbit	r3, r3
 8004d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004d18:	2320      	movs	r3, #32
 8004d1a:	e004      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d20:	fab3 f383 	clz	r3, r3
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x264>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0e9b      	lsrs	r3, r3, #26
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	e018      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x296>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d64:	2320      	movs	r3, #32
 8004d66:	e004      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d6c:	fab3 f383 	clz	r3, r3
 8004d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d106      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fb1c 	bl	80043bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fb00 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x2d4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2102      	movs	r1, #2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff faf5 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004da6:	4603      	mov	r3, r0
 8004da8:	0e9b      	lsrs	r3, r3, #26
 8004daa:	f003 021f 	and.w	r2, r3, #31
 8004dae:	e01e      	b.n	8004dee <HAL_ADC_ConfigChannel+0x312>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2102      	movs	r1, #2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff faea 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dc6:	fa93 f3a3 	rbit	r3, r3
 8004dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004dde:	2320      	movs	r3, #32
 8004de0:	e004      	b.n	8004dec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004de6:	fab3 f383 	clz	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x32a>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	0e9b      	lsrs	r3, r3, #26
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	e016      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x358>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004e26:	2320      	movs	r3, #32
 8004e28:	e004      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d106      	bne.n	8004e46 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2102      	movs	r1, #2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fabb 	bl	80043bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2103      	movs	r1, #3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fa9f 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x396>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2103      	movs	r1, #3
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fa94 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	0e9b      	lsrs	r3, r3, #26
 8004e6c:	f003 021f 	and.w	r2, r3, #31
 8004e70:	e017      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x3c6>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2103      	movs	r1, #3
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fa89 	bl	8004390 <LL_ADC_GetOffsetChannel>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e84:	fa93 f3a3 	rbit	r3, r3
 8004e88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004e94:	2320      	movs	r3, #32
 8004e96:	e003      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x3de>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	0e9b      	lsrs	r3, r3, #26
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	e011      	b.n	8004ede <HAL_ADC_ConfigChannel+0x402>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec2:	fa93 f3a3 	rbit	r3, r3
 8004ec6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004ed2:	2320      	movs	r3, #32
 8004ed4:	e003      	b.n	8004ede <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	fab3 f383 	clz	r3, r3
 8004edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d106      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2103      	movs	r1, #3
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fa66 	bl	80043bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fb7b 	bl	80045f0 <LL_ADC_IsEnabled>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 813f 	bne.w	8005180 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7ff fada 	bl	80044c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a8e      	ldr	r2, [pc, #568]	; (8005154 <HAL_ADC_ConfigChannel+0x678>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f040 8130 	bne.w	8005180 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x46c>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	0e9b      	lsrs	r3, r3, #26
 8004f36:	3301      	adds	r3, #1
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	bf94      	ite	ls
 8004f40:	2301      	movls	r3, #1
 8004f42:	2300      	movhi	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e019      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x4a0>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f50:	fa93 f3a3 	rbit	r3, r3
 8004f54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f60:	2320      	movs	r3, #32
 8004f62:	e003      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f66:	fab3 f383 	clz	r3, r3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f003 031f 	and.w	r3, r3, #31
 8004f72:	2b09      	cmp	r3, #9
 8004f74:	bf94      	ite	ls
 8004f76:	2301      	movls	r3, #1
 8004f78:	2300      	movhi	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d079      	beq.n	8005074 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d107      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x4c0>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0e9b      	lsrs	r3, r3, #26
 8004f92:	3301      	adds	r3, #1
 8004f94:	069b      	lsls	r3, r3, #26
 8004f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f9a:	e015      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x4ec>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	e003      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	069b      	lsls	r3, r3, #26
 8004fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x50c>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	0e9b      	lsrs	r3, r3, #26
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe6:	e017      	b.n	8005018 <HAL_ADC_ConfigChannel+0x53c>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff0:	fa93 f3a3 	rbit	r3, r3
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005000:	2320      	movs	r3, #32
 8005002:	e003      	b.n	800500c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	3301      	adds	r3, #1
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2101      	movs	r1, #1
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	ea42 0103 	orr.w	r1, r2, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <HAL_ADC_ConfigChannel+0x562>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	0e9b      	lsrs	r3, r3, #26
 800502e:	3301      	adds	r3, #1
 8005030:	f003 021f 	and.w	r2, r3, #31
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	051b      	lsls	r3, r3, #20
 800503c:	e018      	b.n	8005070 <HAL_ADC_ConfigChannel+0x594>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	fa93 f3a3 	rbit	r3, r3
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005056:	2320      	movs	r3, #32
 8005058:	e003      	b.n	8005062 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800505a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505c:	fab3 f383 	clz	r3, r3
 8005060:	b2db      	uxtb	r3, r3
 8005062:	3301      	adds	r3, #1
 8005064:	f003 021f 	and.w	r2, r3, #31
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005070:	430b      	orrs	r3, r1
 8005072:	e080      	b.n	8005176 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x5b4>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	0e9b      	lsrs	r3, r3, #26
 8005086:	3301      	adds	r3, #1
 8005088:	069b      	lsls	r3, r3, #26
 800508a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800508e:	e015      	b.n	80050bc <HAL_ADC_ConfigChannel+0x5e0>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80050a8:	2320      	movs	r3, #32
 80050aa:	e003      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	fab3 f383 	clz	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3301      	adds	r3, #1
 80050b6:	069b      	lsls	r3, r3, #26
 80050b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x600>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	0e9b      	lsrs	r3, r3, #26
 80050ce:	3301      	adds	r3, #1
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	e017      	b.n	800510c <HAL_ADC_ConfigChannel+0x630>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	61fb      	str	r3, [r7, #28]
  return result;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80050f4:	2320      	movs	r3, #32
 80050f6:	e003      	b.n	8005100 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	3301      	adds	r3, #1
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	2101      	movs	r1, #1
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	ea42 0103 	orr.w	r1, r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x65c>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	0e9b      	lsrs	r3, r3, #26
 8005122:	3301      	adds	r3, #1
 8005124:	f003 021f 	and.w	r2, r3, #31
 8005128:	4613      	mov	r3, r2
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	3b1e      	subs	r3, #30
 8005130:	051b      	lsls	r3, r3, #20
 8005132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005136:	e01d      	b.n	8005174 <HAL_ADC_ConfigChannel+0x698>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	fa93 f3a3 	rbit	r3, r3
 8005144:	613b      	str	r3, [r7, #16]
  return result;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005150:	2320      	movs	r3, #32
 8005152:	e005      	b.n	8005160 <HAL_ADC_ConfigChannel+0x684>
 8005154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	fab3 f383 	clz	r3, r3
 800515e:	b2db      	uxtb	r3, r3
 8005160:	3301      	adds	r3, #1
 8005162:	f003 021f 	and.w	r2, r3, #31
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	3b1e      	subs	r3, #30
 800516e:	051b      	lsls	r3, r3, #20
 8005170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005174:	430b      	orrs	r3, r1
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	6892      	ldr	r2, [r2, #8]
 800517a:	4619      	mov	r1, r3
 800517c:	f7ff f978 	bl	8004470 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b44      	ldr	r3, [pc, #272]	; (8005298 <HAL_ADC_ConfigChannel+0x7bc>)
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d07a      	beq.n	8005282 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800518c:	4843      	ldr	r0, [pc, #268]	; (800529c <HAL_ADC_ConfigChannel+0x7c0>)
 800518e:	f7ff f8cd 	bl	800432c <LL_ADC_GetCommonPathInternalCh>
 8005192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a41      	ldr	r2, [pc, #260]	; (80052a0 <HAL_ADC_ConfigChannel+0x7c4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d12c      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d126      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3c      	ldr	r2, [pc, #240]	; (80052a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_ADC_ConfigChannel+0x6e4>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3b      	ldr	r2, [pc, #236]	; (80052a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d15d      	bne.n	800527c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051c8:	4619      	mov	r1, r3
 80051ca:	4834      	ldr	r0, [pc, #208]	; (800529c <HAL_ADC_ConfigChannel+0x7c0>)
 80051cc:	f7ff f89b 	bl	8004306 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <HAL_ADC_ConfigChannel+0x7d0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	4a36      	ldr	r2, [pc, #216]	; (80052b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	099b      	lsrs	r3, r3, #6
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051ea:	e002      	b.n	80051f2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f9      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051f8:	e040      	b.n	800527c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2d      	ldr	r2, [pc, #180]	; (80052b4 <HAL_ADC_ConfigChannel+0x7d8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d118      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x75a>
 8005204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d112      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a23      	ldr	r2, [pc, #140]	; (80052a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_ADC_ConfigChannel+0x748>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d12d      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522c:	4619      	mov	r1, r3
 800522e:	481b      	ldr	r0, [pc, #108]	; (800529c <HAL_ADC_ConfigChannel+0x7c0>)
 8005230:	f7ff f869 	bl	8004306 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005234:	e024      	b.n	8005280 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_ADC_ConfigChannel+0x7dc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d120      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d11a      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d115      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800525a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525e:	4619      	mov	r1, r3
 8005260:	480e      	ldr	r0, [pc, #56]	; (800529c <HAL_ADC_ConfigChannel+0x7c0>)
 8005262:	f7ff f850 	bl	8004306 <LL_ADC_SetCommonPathInternalCh>
 8005266:	e00c      	b.n	8005282 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800527a:	e002      	b.n	8005282 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800527c:	bf00      	nop
 800527e:	e000      	b.n	8005282 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005280:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800528a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800528e:	4618      	mov	r0, r3
 8005290:	37d8      	adds	r7, #216	; 0xd8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	80080000 	.word	0x80080000
 800529c:	50040300 	.word	0x50040300
 80052a0:	c7520000 	.word	0xc7520000
 80052a4:	50040000 	.word	0x50040000
 80052a8:	50040200 	.word	0x50040200
 80052ac:	2000013c 	.word	0x2000013c
 80052b0:	053e2d63 	.word	0x053e2d63
 80052b4:	cb840000 	.word	0xcb840000
 80052b8:	80000001 	.word	0x80000001

080052bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff f991 	bl	80045f0 <LL_ADC_IsEnabled>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d14d      	bne.n	8005370 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	4b28      	ldr	r3, [pc, #160]	; (800537c <ADC_Enable+0xc0>)
 80052dc:	4013      	ands	r3, r2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	f043 0210 	orr.w	r2, r3, #16
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f2:	f043 0201 	orr.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e039      	b.n	8005372 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff f960 	bl	80045c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005308:	f7fe ffba 	bl	8004280 <HAL_GetTick>
 800530c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800530e:	e028      	b.n	8005362 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff f96b 	bl	80045f0 <LL_ADC_IsEnabled>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f94f 	bl	80045c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800532a:	f7fe ffa9 	bl	8004280 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d914      	bls.n	8005362 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d00d      	beq.n	8005362 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f043 0210 	orr.w	r2, r3, #16
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	f043 0201 	orr.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e007      	b.n	8005372 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b01      	cmp	r3, #1
 800536e:	d1cf      	bne.n	8005310 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	8000003f 	.word	0x8000003f

08005380 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005396:	2b00      	cmp	r3, #0
 8005398:	d14b      	bne.n	8005432 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d021      	beq.n	80053f8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f81a 	bl	80043f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d032      	beq.n	800542a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d12b      	bne.n	800542a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d11f      	bne.n	800542a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54
 80053f6:	e018      	b.n	800542a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d111      	bne.n	800542a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d105      	bne.n	800542a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fb38 	bl	8004aa0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005430:	e00e      	b.n	8005450 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fb42 	bl	8004ac8 <HAL_ADC_ErrorCallback>
}
 8005444:	e004      	b.n	8005450 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7ff fb24 	bl	8004ab4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005492:	f043 0204 	orr.w	r2, r3, #4
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff fb14 	bl	8004ac8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <LL_ADC_IsEnabled>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <LL_ADC_IsEnabled+0x18>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <LL_ADC_IsEnabled+0x1a>
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <LL_ADC_REG_IsConversionOngoing>:
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d101      	bne.n	80054e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b09f      	sub	sp, #124	; 0x7c
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800550e:	2302      	movs	r3, #2
 8005510:	e093      	b.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800551a:	2300      	movs	r3, #0
 800551c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800551e:	2300      	movs	r3, #0
 8005520:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a47      	ldr	r2, [pc, #284]	; (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d102      	bne.n	8005532 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800552c:	4b46      	ldr	r3, [pc, #280]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	e001      	b.n	8005536 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10b      	bne.n	8005554 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e072      	b.n	800563a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff ffb9 	bl	80054ce <LL_ADC_REG_IsConversionOngoing>
 800555c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff ffb3 	bl	80054ce <LL_ADC_REG_IsConversionOngoing>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d154      	bne.n	8005618 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800556e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005570:	2b00      	cmp	r3, #0
 8005572:	d151      	bne.n	8005618 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005574:	4b35      	ldr	r3, [pc, #212]	; (800564c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005576:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d02c      	beq.n	80055da <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005592:	035b      	lsls	r3, r3, #13
 8005594:	430b      	orrs	r3, r1
 8005596:	431a      	orrs	r2, r3
 8005598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800559c:	4829      	ldr	r0, [pc, #164]	; (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800559e:	f7ff ff83 	bl	80054a8 <LL_ADC_IsEnabled>
 80055a2:	4604      	mov	r4, r0
 80055a4:	4828      	ldr	r0, [pc, #160]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055a6:	f7ff ff7f 	bl	80054a8 <LL_ADC_IsEnabled>
 80055aa:	4603      	mov	r3, r0
 80055ac:	431c      	orrs	r4, r3
 80055ae:	4828      	ldr	r0, [pc, #160]	; (8005650 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055b0:	f7ff ff7a 	bl	80054a8 <LL_ADC_IsEnabled>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4323      	orrs	r3, r4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d137      	bne.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055c4:	f023 030f 	bic.w	r3, r3, #15
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	6811      	ldr	r1, [r2, #0]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055d8:	e028      	b.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80055da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055e6:	4817      	ldr	r0, [pc, #92]	; (8005644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80055e8:	f7ff ff5e 	bl	80054a8 <LL_ADC_IsEnabled>
 80055ec:	4604      	mov	r4, r0
 80055ee:	4816      	ldr	r0, [pc, #88]	; (8005648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055f0:	f7ff ff5a 	bl	80054a8 <LL_ADC_IsEnabled>
 80055f4:	4603      	mov	r3, r0
 80055f6:	431c      	orrs	r4, r3
 80055f8:	4815      	ldr	r0, [pc, #84]	; (8005650 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055fa:	f7ff ff55 	bl	80054a8 <LL_ADC_IsEnabled>
 80055fe:	4603      	mov	r3, r0
 8005600:	4323      	orrs	r3, r4
 8005602:	2b00      	cmp	r3, #0
 8005604:	d112      	bne.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800560e:	f023 030f 	bic.w	r3, r3, #15
 8005612:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005614:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005616:	e009      	b.n	800562c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800562a:	e000      	b.n	800562e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800562c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005636:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800563a:	4618      	mov	r0, r3
 800563c:	377c      	adds	r7, #124	; 0x7c
 800563e:	46bd      	mov	sp, r7
 8005640:	bd90      	pop	{r4, r7, pc}
 8005642:	bf00      	nop
 8005644:	50040000 	.word	0x50040000
 8005648:	50040100 	.word	0x50040100
 800564c:	50040300 	.word	0x50040300
 8005650:	50040200 	.word	0x50040200

08005654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <__NVIC_SetPriorityGrouping+0x44>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005670:	4013      	ands	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800567c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <__NVIC_SetPriorityGrouping+0x44>)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	60d3      	str	r3, [r2, #12]
}
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a0:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <__NVIC_GetPriorityGrouping+0x18>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	f003 0307 	and.w	r3, r3, #7
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	e000ed00 	.word	0xe000ed00

080056b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	db0b      	blt.n	80056e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	f003 021f 	and.w	r2, r3, #31
 80056d0:	4907      	ldr	r1, [pc, #28]	; (80056f0 <__NVIC_EnableIRQ+0x38>)
 80056d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2001      	movs	r0, #1
 80056da:	fa00 f202 	lsl.w	r2, r0, r2
 80056de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	e000e100 	.word	0xe000e100

080056f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	6039      	str	r1, [r7, #0]
 80056fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	2b00      	cmp	r3, #0
 8005706:	db0a      	blt.n	800571e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	490c      	ldr	r1, [pc, #48]	; (8005740 <__NVIC_SetPriority+0x4c>)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	0112      	lsls	r2, r2, #4
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	440b      	add	r3, r1
 8005718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800571c:	e00a      	b.n	8005734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4908      	ldr	r1, [pc, #32]	; (8005744 <__NVIC_SetPriority+0x50>)
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	3b04      	subs	r3, #4
 800572c:	0112      	lsls	r2, r2, #4
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	440b      	add	r3, r1
 8005732:	761a      	strb	r2, [r3, #24]
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e000e100 	.word	0xe000e100
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f1c3 0307 	rsb	r3, r3, #7
 8005762:	2b04      	cmp	r3, #4
 8005764:	bf28      	it	cs
 8005766:	2304      	movcs	r3, #4
 8005768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3304      	adds	r3, #4
 800576e:	2b06      	cmp	r3, #6
 8005770:	d902      	bls.n	8005778 <NVIC_EncodePriority+0x30>
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3b03      	subs	r3, #3
 8005776:	e000      	b.n	800577a <NVIC_EncodePriority+0x32>
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800577c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	401a      	ands	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	43d9      	mvns	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a0:	4313      	orrs	r3, r2
         );
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3724      	adds	r7, #36	; 0x24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ff4c 	bl	8005654 <__NVIC_SetPriorityGrouping>
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057d6:	f7ff ff61 	bl	800569c <__NVIC_GetPriorityGrouping>
 80057da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	6978      	ldr	r0, [r7, #20]
 80057e2:	f7ff ffb1 	bl	8005748 <NVIC_EncodePriority>
 80057e6:	4602      	mov	r2, r0
 80057e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff ff80 	bl	80056f4 <__NVIC_SetPriority>
}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff ff54 	bl	80056b8 <__NVIC_EnableIRQ>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e098      	b.n	800595c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	4b4d      	ldr	r3, [pc, #308]	; (8005968 <HAL_DMA_Init+0x150>)
 8005832:	429a      	cmp	r2, r3
 8005834:	d80f      	bhi.n	8005856 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	4b4b      	ldr	r3, [pc, #300]	; (800596c <HAL_DMA_Init+0x154>)
 800583e:	4413      	add	r3, r2
 8005840:	4a4b      	ldr	r2, [pc, #300]	; (8005970 <HAL_DMA_Init+0x158>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	009a      	lsls	r2, r3, #2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a48      	ldr	r2, [pc, #288]	; (8005974 <HAL_DMA_Init+0x15c>)
 8005852:	641a      	str	r2, [r3, #64]	; 0x40
 8005854:	e00e      	b.n	8005874 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	4b46      	ldr	r3, [pc, #280]	; (8005978 <HAL_DMA_Init+0x160>)
 800585e:	4413      	add	r3, r2
 8005860:	4a43      	ldr	r2, [pc, #268]	; (8005970 <HAL_DMA_Init+0x158>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	009a      	lsls	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a42      	ldr	r2, [pc, #264]	; (800597c <HAL_DMA_Init+0x164>)
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058ce:	d039      	beq.n	8005944 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	4a27      	ldr	r2, [pc, #156]	; (8005974 <HAL_DMA_Init+0x15c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d11a      	bne.n	8005910 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058da:	4b29      	ldr	r3, [pc, #164]	; (8005980 <HAL_DMA_Init+0x168>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f003 031c 	and.w	r3, r3, #28
 80058e6:	210f      	movs	r1, #15
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	4924      	ldr	r1, [pc, #144]	; (8005980 <HAL_DMA_Init+0x168>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_DMA_Init+0x168>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6859      	ldr	r1, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005900:	f003 031c 	and.w	r3, r3, #28
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	491d      	ldr	r1, [pc, #116]	; (8005980 <HAL_DMA_Init+0x168>)
 800590a:	4313      	orrs	r3, r2
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	e019      	b.n	8005944 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <HAL_DMA_Init+0x16c>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	f003 031c 	and.w	r3, r3, #28
 800591c:	210f      	movs	r1, #15
 800591e:	fa01 f303 	lsl.w	r3, r1, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	4917      	ldr	r1, [pc, #92]	; (8005984 <HAL_DMA_Init+0x16c>)
 8005926:	4013      	ands	r3, r2
 8005928:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800592a:	4b16      	ldr	r3, [pc, #88]	; (8005984 <HAL_DMA_Init+0x16c>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6859      	ldr	r1, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	f003 031c 	and.w	r3, r3, #28
 800593a:	fa01 f303 	lsl.w	r3, r1, r3
 800593e:	4911      	ldr	r1, [pc, #68]	; (8005984 <HAL_DMA_Init+0x16c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40020407 	.word	0x40020407
 800596c:	bffdfff8 	.word	0xbffdfff8
 8005970:	cccccccd 	.word	0xcccccccd
 8005974:	40020000 	.word	0x40020000
 8005978:	bffdfbf8 	.word	0xbffdfbf8
 800597c:	40020400 	.word	0x40020400
 8005980:	400200a8 	.word	0x400200a8
 8005984:	400204a8 	.word	0x400204a8

08005988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_DMA_Start_IT+0x20>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e04b      	b.n	8005a40 <HAL_DMA_Start_IT+0xb8>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d13a      	bne.n	8005a32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f921 	bl	8005c28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 020e 	orr.w	r2, r2, #14
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e00f      	b.n	8005a20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0204 	bic.w	r2, r2, #4
 8005a0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 020a 	orr.w	r2, r2, #10
 8005a1e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e005      	b.n	8005a3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d005      	beq.n	8005a6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2204      	movs	r2, #4
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	e029      	b.n	8005ac0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 020e 	bic.w	r2, r2, #14
 8005a7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a90:	f003 021c 	and.w	r2, r3, #28
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	2101      	movs	r1, #1
 8005a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
    }
  }
  return status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	f003 031c 	and.w	r3, r3, #28
 8005aea:	2204      	movs	r2, #4
 8005aec:	409a      	lsls	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d026      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x7a>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d021      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d107      	bne.n	8005b1e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0204 	bic.w	r2, r2, #4
 8005b1c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 021c 	and.w	r2, r3, #28
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b30:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d071      	beq.n	8005c1e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005b42:	e06c      	b.n	8005c1e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	f003 031c 	and.w	r3, r3, #28
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	409a      	lsls	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02e      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xec>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d029      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 020a 	bic.w	r2, r2, #10
 8005b7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f003 021c 	and.w	r2, r3, #28
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	2102      	movs	r1, #2
 8005b96:	fa01 f202 	lsl.w	r2, r1, r2
 8005b9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d038      	beq.n	8005c1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005bb4:	e033      	b.n	8005c1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bba:	f003 031c 	and.w	r3, r3, #28
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d02a      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x156>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d025      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 020e 	bic.w	r2, r2, #14
 8005be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	f003 021c 	and.w	r2, r3, #28
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
}
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f003 021c 	and.w	r2, r3, #28
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2101      	movs	r1, #1
 8005c44:	fa01 f202 	lsl.w	r2, r1, r2
 8005c48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	2b10      	cmp	r3, #16
 8005c58:	d108      	bne.n	8005c6c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c6a:	e007      	b.n	8005c7c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c96:	e17f      	b.n	8005f98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8171 	beq.w	8005f92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d00b      	beq.n	8005cd0 <HAL_GPIO_Init+0x48>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d007      	beq.n	8005cd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cc4:	2b11      	cmp	r3, #17
 8005cc6:	d003      	beq.n	8005cd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b12      	cmp	r3, #18
 8005cce:	d130      	bne.n	8005d32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d06:	2201      	movs	r2, #1
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	091b      	lsrs	r3, r3, #4
 8005d1c:	f003 0201 	and.w	r2, r3, #1
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d118      	bne.n	8005d70 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d44:	2201      	movs	r2, #1
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4013      	ands	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	08db      	lsrs	r3, r3, #3
 8005d5a:	f003 0201 	and.w	r2, r3, #1
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4013      	ands	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d003      	beq.n	8005db0 <HAL_GPIO_Init+0x128>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b12      	cmp	r3, #18
 8005dae:	d123      	bne.n	8005df8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	08da      	lsrs	r2, r3, #3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3208      	adds	r2, #8
 8005db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	220f      	movs	r2, #15
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	08da      	lsrs	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3208      	adds	r2, #8
 8005df2:	6939      	ldr	r1, [r7, #16]
 8005df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	2203      	movs	r2, #3
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f003 0203 	and.w	r2, r3, #3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80ac 	beq.w	8005f92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e3a:	4b5f      	ldr	r3, [pc, #380]	; (8005fb8 <HAL_GPIO_Init+0x330>)
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3e:	4a5e      	ldr	r2, [pc, #376]	; (8005fb8 <HAL_GPIO_Init+0x330>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6613      	str	r3, [r2, #96]	; 0x60
 8005e46:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <HAL_GPIO_Init+0x330>)
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e52:	4a5a      	ldr	r2, [pc, #360]	; (8005fbc <HAL_GPIO_Init+0x334>)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	3302      	adds	r3, #2
 8005e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	220f      	movs	r2, #15
 8005e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6e:	43db      	mvns	r3, r3
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4013      	ands	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e7c:	d025      	beq.n	8005eca <HAL_GPIO_Init+0x242>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a4f      	ldr	r2, [pc, #316]	; (8005fc0 <HAL_GPIO_Init+0x338>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01f      	beq.n	8005ec6 <HAL_GPIO_Init+0x23e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a4e      	ldr	r2, [pc, #312]	; (8005fc4 <HAL_GPIO_Init+0x33c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d019      	beq.n	8005ec2 <HAL_GPIO_Init+0x23a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a4d      	ldr	r2, [pc, #308]	; (8005fc8 <HAL_GPIO_Init+0x340>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <HAL_GPIO_Init+0x236>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a4c      	ldr	r2, [pc, #304]	; (8005fcc <HAL_GPIO_Init+0x344>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00d      	beq.n	8005eba <HAL_GPIO_Init+0x232>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a4b      	ldr	r2, [pc, #300]	; (8005fd0 <HAL_GPIO_Init+0x348>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <HAL_GPIO_Init+0x22e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a4a      	ldr	r2, [pc, #296]	; (8005fd4 <HAL_GPIO_Init+0x34c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d101      	bne.n	8005eb2 <HAL_GPIO_Init+0x22a>
 8005eae:	2306      	movs	r3, #6
 8005eb0:	e00c      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eb2:	2307      	movs	r3, #7
 8005eb4:	e00a      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eb6:	2305      	movs	r3, #5
 8005eb8:	e008      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eba:	2304      	movs	r3, #4
 8005ebc:	e006      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e004      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e002      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e000      	b.n	8005ecc <HAL_GPIO_Init+0x244>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	f002 0203 	and.w	r2, r2, #3
 8005ed2:	0092      	lsls	r2, r2, #2
 8005ed4:	4093      	lsls	r3, r2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005edc:	4937      	ldr	r1, [pc, #220]	; (8005fbc <HAL_GPIO_Init+0x334>)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005eea:	4b3b      	ldr	r3, [pc, #236]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f0e:	4a32      	ldr	r2, [pc, #200]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005f14:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4013      	ands	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f3e:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	43db      	mvns	r3, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f62:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f68:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4013      	ands	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f8c:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <HAL_GPIO_Init+0x350>)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	3301      	adds	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f47f ae78 	bne.w	8005c98 <HAL_GPIO_Init+0x10>
  }
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	48000400 	.word	0x48000400
 8005fc4:	48000800 	.word	0x48000800
 8005fc8:	48000c00 	.word	0x48000c00
 8005fcc:	48001000 	.word	0x48001000
 8005fd0:	48001400 	.word	0x48001400
 8005fd4:	48001800 	.word	0x48001800
 8005fd8:	40010400 	.word	0x40010400

08005fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	807b      	strh	r3, [r7, #2]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fec:	787b      	ldrb	r3, [r7, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ff2:	887a      	ldrh	r2, [r7, #2]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ff8:	e002      	b.n	8006000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ffa:	887a      	ldrh	r2, [r7, #2]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e081      	b.n	8006122 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fd f9ee 	bl	8003414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2224      	movs	r2, #36	; 0x24
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0201 	bic.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800605c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800606c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d107      	bne.n	8006086 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	e006      	b.n	8006094 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006092:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d104      	bne.n	80060a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	ea42 0103 	orr.w	r1, r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	021a      	lsls	r2, r3, #8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69d9      	ldr	r1, [r3, #28]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b20      	cmp	r3, #32
 800613e:	d138      	bne.n	80061b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800614a:	2302      	movs	r3, #2
 800614c:	e032      	b.n	80061b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2224      	movs	r2, #36	; 0x24
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800617c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d139      	bne.n	800624a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e033      	b.n	800624c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2224      	movs	r2, #36	; 0x24
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006212:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e000      	b.n	800624c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800625c:	4b04      	ldr	r3, [pc, #16]	; (8006270 <HAL_PWREx_GetVoltageRange+0x18>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006264:	4618      	mov	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40007000 	.word	0x40007000

08006274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006282:	d130      	bne.n	80062e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006284:	4b23      	ldr	r3, [pc, #140]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800628c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006290:	d038      	beq.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800629a:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800629c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2232      	movs	r2, #50	; 0x32
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	4a1b      	ldr	r2, [pc, #108]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	0c9b      	lsrs	r3, r3, #18
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062b8:	e002      	b.n	80062c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3b01      	subs	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062c0:	4b14      	ldr	r3, [pc, #80]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d102      	bne.n	80062d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f2      	bne.n	80062ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062d4:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e0:	d110      	bne.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e00f      	b.n	8006306 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f2:	d007      	beq.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062f4:	4b07      	ldr	r3, [pc, #28]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062fc:	4a05      	ldr	r2, [pc, #20]	; (8006314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006302:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40007000 	.word	0x40007000
 8006318:	2000013c 	.word	0x2000013c
 800631c:	431bde83 	.word	0x431bde83

08006320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e3d4      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006332:	4ba1      	ldr	r3, [pc, #644]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800633c:	4b9e      	ldr	r3, [pc, #632]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80e4 	beq.w	800651c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <HAL_RCC_OscConfig+0x4a>
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	f040 808b 	bne.w	8006478 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 8087 	bne.w	8006478 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800636a:	4b93      	ldr	r3, [pc, #588]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_RCC_OscConfig+0x62>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e3ac      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	4b8c      	ldr	r3, [pc, #560]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_RCC_OscConfig+0x7c>
 8006392:	4b89      	ldr	r3, [pc, #548]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639a:	e005      	b.n	80063a8 <HAL_RCC_OscConfig+0x88>
 800639c:	4b86      	ldr	r3, [pc, #536]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800639e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063a2:	091b      	lsrs	r3, r3, #4
 80063a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d223      	bcs.n	80063f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fd71 	bl	8006e98 <RCC_SetFlashLatencyFromMSIRange>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e38d      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063c0:	4b7d      	ldr	r3, [pc, #500]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a7c      	ldr	r2, [pc, #496]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063c6:	f043 0308 	orr.w	r3, r3, #8
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	4b7a      	ldr	r3, [pc, #488]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	4977      	ldr	r1, [pc, #476]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063de:	4b76      	ldr	r3, [pc, #472]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	4972      	ldr	r1, [pc, #456]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	604b      	str	r3, [r1, #4]
 80063f2:	e025      	b.n	8006440 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063f4:	4b70      	ldr	r3, [pc, #448]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6f      	ldr	r2, [pc, #444]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80063fa:	f043 0308 	orr.w	r3, r3, #8
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b6d      	ldr	r3, [pc, #436]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	496a      	ldr	r1, [pc, #424]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800640e:	4313      	orrs	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006412:	4b69      	ldr	r3, [pc, #420]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	4965      	ldr	r1, [pc, #404]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006422:	4313      	orrs	r3, r2
 8006424:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fd31 	bl	8006e98 <RCC_SetFlashLatencyFromMSIRange>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e34d      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006440:	f000 fc36 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006444:	4602      	mov	r2, r0
 8006446:	4b5c      	ldr	r3, [pc, #368]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	495a      	ldr	r1, [pc, #360]	; (80065bc <HAL_RCC_OscConfig+0x29c>)
 8006452:	5ccb      	ldrb	r3, [r1, r3]
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <HAL_RCC_OscConfig+0x2a0>)
 800645e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006460:	4b58      	ldr	r3, [pc, #352]	; (80065c4 <HAL_RCC_OscConfig+0x2a4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f7fd fb1f 	bl	8003aa8 <HAL_InitTick>
 800646a:	4603      	mov	r3, r0
 800646c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d052      	beq.n	800651a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	e331      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d032      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006480:	4b4d      	ldr	r3, [pc, #308]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a4c      	ldr	r2, [pc, #304]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800648c:	f7fd fef8 	bl	8004280 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006494:	f7fd fef4 	bl	8004280 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e31a      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064a6:	4b44      	ldr	r3, [pc, #272]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064b2:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064b8:	f043 0308 	orr.w	r3, r3, #8
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	493b      	ldr	r1, [pc, #236]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064d0:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	4936      	ldr	r1, [pc, #216]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	604b      	str	r3, [r1, #4]
 80064e4:	e01a      	b.n	800651c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064e6:	4b34      	ldr	r3, [pc, #208]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a33      	ldr	r2, [pc, #204]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064f2:	f7fd fec5 	bl	8004280 <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064fa:	f7fd fec1 	bl	8004280 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e2e7      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800650c:	4b2a      	ldr	r3, [pc, #168]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <HAL_RCC_OscConfig+0x1da>
 8006518:	e000      	b.n	800651c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800651a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d074      	beq.n	8006612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d005      	beq.n	800653a <HAL_RCC_OscConfig+0x21a>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	d10e      	bne.n	8006552 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b03      	cmp	r3, #3
 8006538:	d10b      	bne.n	8006552 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800653a:	4b1f      	ldr	r3, [pc, #124]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d064      	beq.n	8006610 <HAL_RCC_OscConfig+0x2f0>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d160      	bne.n	8006610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e2c4      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d106      	bne.n	800656a <HAL_RCC_OscConfig+0x24a>
 800655c:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e01d      	b.n	80065a6 <HAL_RCC_OscConfig+0x286>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006572:	d10c      	bne.n	800658e <HAL_RCC_OscConfig+0x26e>
 8006574:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800657a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	e00b      	b.n	80065a6 <HAL_RCC_OscConfig+0x286>
 800658e:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 8006594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a06      	ldr	r2, [pc, #24]	; (80065b8 <HAL_RCC_OscConfig+0x298>)
 80065a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01c      	beq.n	80065e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ae:	f7fd fe67 	bl	8004280 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065b4:	e011      	b.n	80065da <HAL_RCC_OscConfig+0x2ba>
 80065b6:	bf00      	nop
 80065b8:	40021000 	.word	0x40021000
 80065bc:	08013f1c 	.word	0x08013f1c
 80065c0:	2000013c 	.word	0x2000013c
 80065c4:	20000140 	.word	0x20000140
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c8:	f7fd fe5a 	bl	8004280 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b64      	cmp	r3, #100	; 0x64
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e280      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065da:	4baf      	ldr	r3, [pc, #700]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x2a8>
 80065e6:	e014      	b.n	8006612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fd fe4a 	bl	8004280 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f0:	f7fd fe46 	bl	8004280 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b64      	cmp	r3, #100	; 0x64
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e26c      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006602:	4ba5      	ldr	r3, [pc, #660]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0x2d0>
 800660e:	e000      	b.n	8006612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d060      	beq.n	80066e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d005      	beq.n	8006630 <HAL_RCC_OscConfig+0x310>
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b0c      	cmp	r3, #12
 8006628:	d119      	bne.n	800665e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d116      	bne.n	800665e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006630:	4b99      	ldr	r3, [pc, #612]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_RCC_OscConfig+0x328>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e249      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006648:	4b93      	ldr	r3, [pc, #588]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	4990      	ldr	r1, [pc, #576]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006658:	4313      	orrs	r3, r2
 800665a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800665c:	e040      	b.n	80066e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d023      	beq.n	80066ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006666:	4b8c      	ldr	r3, [pc, #560]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a8b      	ldr	r2, [pc, #556]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800666c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006672:	f7fd fe05 	bl	8004280 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800667a:	f7fd fe01 	bl	8004280 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e227      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800668c:	4b82      	ldr	r3, [pc, #520]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0f0      	beq.n	800667a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006698:	4b7f      	ldr	r3, [pc, #508]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	061b      	lsls	r3, r3, #24
 80066a6:	497c      	ldr	r1, [pc, #496]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	604b      	str	r3, [r1, #4]
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ae:	4b7a      	ldr	r3, [pc, #488]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a79      	ldr	r2, [pc, #484]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fd fde1 	bl	8004280 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c2:	f7fd fddd 	bl	8004280 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e203      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066d4:	4b70      	ldr	r3, [pc, #448]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f0      	bne.n	80066c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d03c      	beq.n	8006766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01c      	beq.n	800672e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f4:	4b68      	ldr	r3, [pc, #416]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066fa:	4a67      	ldr	r2, [pc, #412]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fd fdbc 	bl	8004280 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800670c:	f7fd fdb8 	bl	8004280 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e1de      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800671e:	4b5e      	ldr	r3, [pc, #376]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ef      	beq.n	800670c <HAL_RCC_OscConfig+0x3ec>
 800672c:	e01b      	b.n	8006766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800672e:	4b5a      	ldr	r3, [pc, #360]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006734:	4a58      	ldr	r2, [pc, #352]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673e:	f7fd fd9f 	bl	8004280 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006746:	f7fd fd9b 	bl	8004280 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e1c1      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006758:	4b4f      	ldr	r3, [pc, #316]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800675a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ef      	bne.n	8006746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80a6 	beq.w	80068c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006774:	2300      	movs	r3, #0
 8006776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006778:	4b47      	ldr	r3, [pc, #284]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800677a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006784:	4b44      	ldr	r3, [pc, #272]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006788:	4a43      	ldr	r2, [pc, #268]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800678a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678e:	6593      	str	r3, [r2, #88]	; 0x58
 8006790:	4b41      	ldr	r3, [pc, #260]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006798:	60bb      	str	r3, [r7, #8]
 800679a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800679c:	2301      	movs	r3, #1
 800679e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a0:	4b3e      	ldr	r3, [pc, #248]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d118      	bne.n	80067de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ac:	4b3b      	ldr	r3, [pc, #236]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a3a      	ldr	r2, [pc, #232]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b8:	f7fd fd62 	bl	8004280 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c0:	f7fd fd5e 	bl	8004280 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e184      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d2:	4b32      	ldr	r3, [pc, #200]	; (800689c <HAL_RCC_OscConfig+0x57c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0f0      	beq.n	80067c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d108      	bne.n	80067f8 <HAL_RCC_OscConfig+0x4d8>
 80067e6:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ec:	4a2a      	ldr	r2, [pc, #168]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067f6:	e024      	b.n	8006842 <HAL_RCC_OscConfig+0x522>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b05      	cmp	r3, #5
 80067fe:	d110      	bne.n	8006822 <HAL_RCC_OscConfig+0x502>
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006806:	4a24      	ldr	r2, [pc, #144]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006808:	f043 0304 	orr.w	r3, r3, #4
 800680c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006810:	4b21      	ldr	r3, [pc, #132]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	4a20      	ldr	r2, [pc, #128]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006820:	e00f      	b.n	8006842 <HAL_RCC_OscConfig+0x522>
 8006822:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006828:	4a1b      	ldr	r2, [pc, #108]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006838:	4a17      	ldr	r2, [pc, #92]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800683a:	f023 0304 	bic.w	r3, r3, #4
 800683e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fd fd19 	bl	8004280 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006850:	e00a      	b.n	8006868 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fd fd15 	bl	8004280 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e139      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006868:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <HAL_RCC_OscConfig+0x578>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0ed      	beq.n	8006852 <HAL_RCC_OscConfig+0x532>
 8006876:	e01a      	b.n	80068ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006878:	f7fd fd02 	bl	8004280 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800687e:	e00f      	b.n	80068a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006880:	f7fd fcfe 	bl	8004280 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	; 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d906      	bls.n	80068a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e122      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
 8006896:	bf00      	nop
 8006898:	40021000 	.word	0x40021000
 800689c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068a0:	4b90      	ldr	r3, [pc, #576]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e8      	bne.n	8006880 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068ae:	7ffb      	ldrb	r3, [r7, #31]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d105      	bne.n	80068c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b4:	4b8b      	ldr	r3, [pc, #556]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	4a8a      	ldr	r2, [pc, #552]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8108 	beq.w	8006ada <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	f040 80d0 	bne.w	8006a74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068d4:	4b83      	ldr	r3, [pc, #524]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f003 0203 	and.w	r2, r3, #3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d130      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	3b01      	subs	r3, #1
 80068f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d127      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006904:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006906:	429a      	cmp	r2, r3
 8006908:	d11f      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006914:	2a07      	cmp	r2, #7
 8006916:	bf14      	ite	ne
 8006918:	2201      	movne	r2, #1
 800691a:	2200      	moveq	r2, #0
 800691c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800691e:	4293      	cmp	r3, r2
 8006920:	d113      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	3b01      	subs	r3, #1
 8006930:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006932:	429a      	cmp	r2, r3
 8006934:	d109      	bne.n	800694a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	3b01      	subs	r3, #1
 8006944:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006946:	429a      	cmp	r2, r3
 8006948:	d06e      	beq.n	8006a28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d069      	beq.n	8006a24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006950:	4b64      	ldr	r3, [pc, #400]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800695c:	4b61      	ldr	r3, [pc, #388]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0b7      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800696c:	4b5d      	ldr	r3, [pc, #372]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5c      	ldr	r2, [pc, #368]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006976:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006978:	f7fd fc82 	bl	8004280 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006980:	f7fd fc7e 	bl	8004280 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e0a4      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006992:	4b54      	ldr	r3, [pc, #336]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800699e:	4b51      	ldr	r3, [pc, #324]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	4b51      	ldr	r3, [pc, #324]	; (8006ae8 <HAL_RCC_OscConfig+0x7c8>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069ae:	3a01      	subs	r2, #1
 80069b0:	0112      	lsls	r2, r2, #4
 80069b2:	4311      	orrs	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069b8:	0212      	lsls	r2, r2, #8
 80069ba:	4311      	orrs	r1, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069c0:	0852      	lsrs	r2, r2, #1
 80069c2:	3a01      	subs	r2, #1
 80069c4:	0552      	lsls	r2, r2, #21
 80069c6:	4311      	orrs	r1, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069cc:	0852      	lsrs	r2, r2, #1
 80069ce:	3a01      	subs	r2, #1
 80069d0:	0652      	lsls	r2, r2, #25
 80069d2:	4311      	orrs	r1, r2
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069d8:	0912      	lsrs	r2, r2, #4
 80069da:	0452      	lsls	r2, r2, #17
 80069dc:	430a      	orrs	r2, r1
 80069de:	4941      	ldr	r1, [pc, #260]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069e4:	4b3f      	ldr	r3, [pc, #252]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3e      	ldr	r2, [pc, #248]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069f0:	4b3c      	ldr	r3, [pc, #240]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 80069f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069fc:	f7fd fc40 	bl	8004280 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a04:	f7fd fc3c 	bl	8004280 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e062      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a16:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a22:	e05a      	b.n	8006ada <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e059      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a28:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d152      	bne.n	8006ada <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a34:	4b2b      	ldr	r3, [pc, #172]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a40:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4a27      	ldr	r2, [pc, #156]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a4c:	f7fd fc18 	bl	8004280 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fd fc14 	bl	8004280 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e03a      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a66:	4b1f      	ldr	r3, [pc, #124]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0x734>
 8006a72:	e032      	b.n	8006ada <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d02d      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a84:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006a86:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006a98:	f023 0303 	bic.w	r3, r3, #3
 8006a9c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006a9e:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006aa4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aae:	f7fd fbe7 	bl	8004280 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab6:	f7fd fbe3 	bl	8004280 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e009      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <HAL_RCC_OscConfig+0x7c4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f0      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x796>
 8006ad4:	e001      	b.n	8006ada <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	f99d808c 	.word	0xf99d808c

08006aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0c8      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b00:	4b66      	ldr	r3, [pc, #408]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d910      	bls.n	8006b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0e:	4b63      	ldr	r3, [pc, #396]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 0207 	bic.w	r2, r3, #7
 8006b16:	4961      	ldr	r1, [pc, #388]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1e:	4b5f      	ldr	r3, [pc, #380]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d001      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0b0      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d04c      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d107      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b44:	4b56      	ldr	r3, [pc, #344]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d121      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e09e      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d107      	bne.n	8006b6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b5c:	4b50      	ldr	r3, [pc, #320]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d115      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e092      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b74:	4b4a      	ldr	r3, [pc, #296]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e086      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b84:	4b46      	ldr	r3, [pc, #280]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e07e      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b94:	4b42      	ldr	r3, [pc, #264]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f023 0203 	bic.w	r2, r3, #3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	493f      	ldr	r1, [pc, #252]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba6:	f7fd fb6b 	bl	8004280 <HAL_GetTick>
 8006baa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bac:	e00a      	b.n	8006bc4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bae:	f7fd fb67 	bl	8004280 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e066      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc4:	4b36      	ldr	r3, [pc, #216]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 020c 	and.w	r2, r3, #12
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d1eb      	bne.n	8006bae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be2:	4b2f      	ldr	r3, [pc, #188]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	492c      	ldr	r1, [pc, #176]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d210      	bcs.n	8006c24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f023 0207 	bic.w	r2, r3, #7
 8006c0a:	4924      	ldr	r1, [pc, #144]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c12:	4b22      	ldr	r3, [pc, #136]	; (8006c9c <HAL_RCC_ClockConfig+0x1b0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e036      	b.n	8006c92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c30:	4b1b      	ldr	r3, [pc, #108]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4918      	ldr	r1, [pc, #96]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4910      	ldr	r1, [pc, #64]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c62:	f000 f825 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	490c      	ldr	r1, [pc, #48]	; (8006ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c74:	5ccb      	ldrb	r3, [r1, r3]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c82:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fc ff0e 	bl	8003aa8 <HAL_InitTick>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006c90:	7afb      	ldrb	r3, [r7, #11]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40022000 	.word	0x40022000
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	08013f1c 	.word	0x08013f1c
 8006ca8:	2000013c 	.word	0x2000013c
 8006cac:	20000140 	.word	0x20000140

08006cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cbe:	4b3e      	ldr	r3, [pc, #248]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cc8:	4b3b      	ldr	r3, [pc, #236]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0303 	and.w	r3, r3, #3
 8006cd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b0c      	cmp	r3, #12
 8006cdc:	d121      	bne.n	8006d22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d11e      	bne.n	8006d22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ce4:	4b34      	ldr	r3, [pc, #208]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006cf0:	4b31      	ldr	r3, [pc, #196]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	e005      	b.n	8006d0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d00:	4b2d      	ldr	r3, [pc, #180]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	091b      	lsrs	r3, r3, #4
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d20:	e00a      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d102      	bne.n	8006d2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	e004      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d34:	4b22      	ldr	r3, [pc, #136]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d134      	bne.n	8006da8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d3e:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d003      	beq.n	8006d56 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d003      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0xac>
 8006d54:	e005      	b.n	8006d62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d58:	617b      	str	r3, [r7, #20]
      break;
 8006d5a:	e005      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d5c:	4b18      	ldr	r3, [pc, #96]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d5e:	617b      	str	r3, [r7, #20]
      break;
 8006d60:	e002      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	617b      	str	r3, [r7, #20]
      break;
 8006d66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d68:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	091b      	lsrs	r3, r3, #4
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	3301      	adds	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d76:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	fb02 f203 	mul.w	r2, r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	0e5b      	lsrs	r3, r3, #25
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	3301      	adds	r3, #1
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006da8:	69bb      	ldr	r3, [r7, #24]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3724      	adds	r7, #36	; 0x24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	08013f34 	.word	0x08013f34
 8006dc0:	00f42400 	.word	0x00f42400

08006dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dca:	681b      	ldr	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	2000013c 	.word	0x2000013c

08006ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006de0:	f7ff fff0 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006de4:	4602      	mov	r2, r0
 8006de6:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	4904      	ldr	r1, [pc, #16]	; (8006e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006df2:	5ccb      	ldrb	r3, [r1, r3]
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40021000 	.word	0x40021000
 8006e04:	08013f2c 	.word	0x08013f2c

08006e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e0c:	f7ff ffda 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	0adb      	lsrs	r3, r3, #11
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4904      	ldr	r1, [pc, #16]	; (8006e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	08013f2c 	.word	0x08013f2c

08006e34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	220f      	movs	r2, #15
 8006e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006e44:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <HAL_RCC_GetClockConfig+0x5c>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 0203 	and.w	r2, r3, #3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <HAL_RCC_GetClockConfig+0x5c>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <HAL_RCC_GetClockConfig+0x5c>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <HAL_RCC_GetClockConfig+0x5c>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	08db      	lsrs	r3, r3, #3
 8006e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006e76:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <HAL_RCC_GetClockConfig+0x60>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0207 	and.w	r2, r3, #7
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	601a      	str	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40021000 	.word	0x40021000
 8006e94:	40022000 	.word	0x40022000

08006e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ea4:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006eb0:	f7ff f9d2 	bl	8006258 <HAL_PWREx_GetVoltageRange>
 8006eb4:	6178      	str	r0, [r7, #20]
 8006eb6:	e014      	b.n	8006ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006eb8:	4b25      	ldr	r3, [pc, #148]	; (8006f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebc:	4a24      	ldr	r2, [pc, #144]	; (8006f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ec4:	4b22      	ldr	r3, [pc, #136]	; (8006f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ed0:	f7ff f9c2 	bl	8006258 <HAL_PWREx_GetVoltageRange>
 8006ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ed6:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eda:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee8:	d10b      	bne.n	8006f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b80      	cmp	r3, #128	; 0x80
 8006eee:	d919      	bls.n	8006f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8006ef4:	d902      	bls.n	8006efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	e013      	b.n	8006f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006efc:	2301      	movs	r3, #1
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	e010      	b.n	8006f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b80      	cmp	r3, #128	; 0x80
 8006f06:	d902      	bls.n	8006f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f08:	2303      	movs	r3, #3
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	e00a      	b.n	8006f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d102      	bne.n	8006f1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f14:	2302      	movs	r3, #2
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e004      	b.n	8006f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b70      	cmp	r3, #112	; 0x70
 8006f1e:	d101      	bne.n	8006f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f20:	2301      	movs	r3, #1
 8006f22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f023 0207 	bic.w	r2, r3, #7
 8006f2c:	4909      	ldr	r1, [pc, #36]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d001      	beq.n	8006f46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40021000 	.word	0x40021000
 8006f54:	40022000 	.word	0x40022000

08006f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f60:	2300      	movs	r3, #0
 8006f62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f64:	2300      	movs	r3, #0
 8006f66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d041      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f7c:	d02a      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f82:	d824      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f88:	d008      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f8e:	d81e      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f98:	d010      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f9a:	e018      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f9c:	4b86      	ldr	r3, [pc, #536]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	4a85      	ldr	r2, [pc, #532]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fa8:	e015      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3304      	adds	r3, #4
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fabb 	bl	800752c <RCCEx_PLLSAI1_Config>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fba:	e00c      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3320      	adds	r3, #32
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fba6 	bl	8007714 <RCCEx_PLLSAI2_Config>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fcc:	e003      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8006fd2:	e000      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd6:	7cfb      	ldrb	r3, [r7, #19]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fdc:	4b76      	ldr	r3, [pc, #472]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fea:	4973      	ldr	r1, [pc, #460]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006ff2:	e001      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff4:	7cfb      	ldrb	r3, [r7, #19]
 8006ff6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d041      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007008:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800700c:	d02a      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800700e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007012:	d824      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007014:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007018:	d008      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800701a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701e:	d81e      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007028:	d010      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800702a:	e018      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800702c:	4b62      	ldr	r3, [pc, #392]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4a61      	ldr	r2, [pc, #388]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007036:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007038:	e015      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3304      	adds	r3, #4
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fa73 	bl	800752c <RCCEx_PLLSAI1_Config>
 8007046:	4603      	mov	r3, r0
 8007048:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800704a:	e00c      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3320      	adds	r3, #32
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fb5e 	bl	8007714 <RCCEx_PLLSAI2_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800705c:	e003      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	74fb      	strb	r3, [r7, #19]
      break;
 8007062:	e000      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10b      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800706c:	4b52      	ldr	r3, [pc, #328]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800706e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007072:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800707a:	494f      	ldr	r1, [pc, #316]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007082:	e001      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007084:	7cfb      	ldrb	r3, [r7, #19]
 8007086:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80a0 	beq.w	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007096:	2300      	movs	r3, #0
 8007098:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800709a:	4b47      	ldr	r3, [pc, #284]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800709c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00d      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070b0:	4b41      	ldr	r3, [pc, #260]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b4:	4a40      	ldr	r2, [pc, #256]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ba:	6593      	str	r3, [r2, #88]	; 0x58
 80070bc:	4b3e      	ldr	r3, [pc, #248]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c8:	2301      	movs	r3, #1
 80070ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070cc:	4b3b      	ldr	r3, [pc, #236]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a3a      	ldr	r2, [pc, #232]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070d8:	f7fd f8d2 	bl	8004280 <HAL_GetTick>
 80070dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070de:	e009      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e0:	f7fd f8ce 	bl	8004280 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d902      	bls.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	74fb      	strb	r3, [r7, #19]
        break;
 80070f2:	e005      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070f4:	4b31      	ldr	r3, [pc, #196]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0ef      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007100:	7cfb      	ldrb	r3, [r7, #19]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d15c      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007106:	4b2c      	ldr	r3, [pc, #176]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007110:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01f      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	429a      	cmp	r2, r3
 8007122:	d019      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007124:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007130:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007136:	4a20      	ldr	r2, [pc, #128]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800713c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007140:	4b1d      	ldr	r3, [pc, #116]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007146:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800714c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007150:	4a19      	ldr	r2, [pc, #100]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d016      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007162:	f7fd f88d 	bl	8004280 <HAL_GetTick>
 8007166:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007168:	e00b      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800716a:	f7fd f889 	bl	8004280 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f241 3288 	movw	r2, #5000	; 0x1388
 8007178:	4293      	cmp	r3, r2
 800717a:	d902      	bls.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	74fb      	strb	r3, [r7, #19]
            break;
 8007180:	e006      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007182:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ec      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007190:	7cfb      	ldrb	r3, [r7, #19]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10c      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a6:	4904      	ldr	r1, [pc, #16]	; (80071b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071ae:	e009      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071b0:	7cfb      	ldrb	r3, [r7, #19]
 80071b2:	74bb      	strb	r3, [r7, #18]
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80071b6:	bf00      	nop
 80071b8:	40021000 	.word	0x40021000
 80071bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071c4:	7c7b      	ldrb	r3, [r7, #17]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d105      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071ca:	4b9e      	ldr	r3, [pc, #632]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ce:	4a9d      	ldr	r2, [pc, #628]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071e2:	4b98      	ldr	r3, [pc, #608]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	f023 0203 	bic.w	r2, r3, #3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	4994      	ldr	r1, [pc, #592]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007204:	4b8f      	ldr	r3, [pc, #572]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720a:	f023 020c 	bic.w	r2, r3, #12
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	498c      	ldr	r1, [pc, #560]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007226:	4b87      	ldr	r3, [pc, #540]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	4983      	ldr	r1, [pc, #524]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007248:	4b7e      	ldr	r3, [pc, #504]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	497b      	ldr	r1, [pc, #492]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007258:	4313      	orrs	r3, r2
 800725a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800726a:	4b76      	ldr	r3, [pc, #472]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007278:	4972      	ldr	r1, [pc, #456]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0320 	and.w	r3, r3, #32
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800728c:	4b6d      	ldr	r3, [pc, #436]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729a:	496a      	ldr	r1, [pc, #424]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800729c:	4313      	orrs	r3, r2
 800729e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ae:	4b65      	ldr	r3, [pc, #404]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	4961      	ldr	r1, [pc, #388]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072d0:	4b5c      	ldr	r3, [pc, #368]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072de:	4959      	ldr	r1, [pc, #356]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072f2:	4b54      	ldr	r3, [pc, #336]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007300:	4950      	ldr	r1, [pc, #320]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007314:	4b4b      	ldr	r3, [pc, #300]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	4948      	ldr	r1, [pc, #288]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007324:	4313      	orrs	r3, r2
 8007326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007336:	4b43      	ldr	r3, [pc, #268]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007344:	493f      	ldr	r1, [pc, #252]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d028      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007358:	4b3a      	ldr	r3, [pc, #232]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800735a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007366:	4937      	ldr	r1, [pc, #220]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007376:	d106      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007378:	4b32      	ldr	r3, [pc, #200]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4a31      	ldr	r2, [pc, #196]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800737e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007382:	60d3      	str	r3, [r2, #12]
 8007384:	e011      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800738a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800738e:	d10c      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3304      	adds	r3, #4
 8007394:	2101      	movs	r1, #1
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f8c8 	bl	800752c <RCCEx_PLLSAI1_Config>
 800739c:	4603      	mov	r3, r0
 800739e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073a0:	7cfb      	ldrb	r3, [r7, #19]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80073a6:	7cfb      	ldrb	r3, [r7, #19]
 80073a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d028      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073b6:	4b23      	ldr	r3, [pc, #140]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	491f      	ldr	r1, [pc, #124]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d4:	d106      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073d6:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073e0:	60d3      	str	r3, [r2, #12]
 80073e2:	e011      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ec:	d10c      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3304      	adds	r3, #4
 80073f2:	2101      	movs	r1, #1
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 f899 	bl	800752c <RCCEx_PLLSAI1_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073fe:	7cfb      	ldrb	r3, [r7, #19]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007404:	7cfb      	ldrb	r3, [r7, #19]
 8007406:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d02b      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007422:	4908      	ldr	r1, [pc, #32]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007432:	d109      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007434:	4b03      	ldr	r3, [pc, #12]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	4a02      	ldr	r2, [pc, #8]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800743a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800743e:	60d3      	str	r3, [r2, #12]
 8007440:	e014      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007442:	bf00      	nop
 8007444:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007450:	d10c      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	2101      	movs	r1, #1
 8007458:	4618      	mov	r0, r3
 800745a:	f000 f867 	bl	800752c <RCCEx_PLLSAI1_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007462:	7cfb      	ldrb	r3, [r7, #19]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007468:	7cfb      	ldrb	r3, [r7, #19]
 800746a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d02f      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007478:	4b2b      	ldr	r3, [pc, #172]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007486:	4928      	ldr	r1, [pc, #160]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007496:	d10d      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	2102      	movs	r1, #2
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f844 	bl	800752c <RCCEx_PLLSAI1_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d014      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074ae:	7cfb      	ldrb	r3, [r7, #19]
 80074b0:	74bb      	strb	r3, [r7, #18]
 80074b2:	e011      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3320      	adds	r3, #32
 80074c2:	2102      	movs	r1, #2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f925 	bl	8007714 <RCCEx_PLLSAI2_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074e4:	4b10      	ldr	r3, [pc, #64]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f2:	490d      	ldr	r1, [pc, #52]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007516:	4904      	ldr	r1, [pc, #16]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007518:	4313      	orrs	r3, r2
 800751a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800751e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40021000 	.word	0x40021000

0800752c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800753a:	4b75      	ldr	r3, [pc, #468]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007546:	4b72      	ldr	r3, [pc, #456]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0203 	and.w	r2, r3, #3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d10d      	bne.n	8007572 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
       ||
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800755e:	4b6c      	ldr	r3, [pc, #432]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	091b      	lsrs	r3, r3, #4
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
       ||
 800756e:	429a      	cmp	r2, r3
 8007570:	d047      	beq.n	8007602 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	73fb      	strb	r3, [r7, #15]
 8007576:	e044      	b.n	8007602 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b03      	cmp	r3, #3
 800757e:	d018      	beq.n	80075b2 <RCCEx_PLLSAI1_Config+0x86>
 8007580:	2b03      	cmp	r3, #3
 8007582:	d825      	bhi.n	80075d0 <RCCEx_PLLSAI1_Config+0xa4>
 8007584:	2b01      	cmp	r3, #1
 8007586:	d002      	beq.n	800758e <RCCEx_PLLSAI1_Config+0x62>
 8007588:	2b02      	cmp	r3, #2
 800758a:	d009      	beq.n	80075a0 <RCCEx_PLLSAI1_Config+0x74>
 800758c:	e020      	b.n	80075d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800758e:	4b60      	ldr	r3, [pc, #384]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d11d      	bne.n	80075d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800759e:	e01a      	b.n	80075d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075a0:	4b5b      	ldr	r3, [pc, #364]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d116      	bne.n	80075da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b0:	e013      	b.n	80075da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075b2:	4b57      	ldr	r3, [pc, #348]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075be:	4b54      	ldr	r3, [pc, #336]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075ce:	e006      	b.n	80075de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
      break;
 80075d4:	e004      	b.n	80075e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075d6:	bf00      	nop
 80075d8:	e002      	b.n	80075e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075da:	bf00      	nop
 80075dc:	e000      	b.n	80075e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075de:	bf00      	nop
    }

    if(status == HAL_OK)
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10d      	bne.n	8007602 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80075e6:	4b4a      	ldr	r3, [pc, #296]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6819      	ldr	r1, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	430b      	orrs	r3, r1
 80075fc:	4944      	ldr	r1, [pc, #272]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d17d      	bne.n	8007704 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007608:	4b41      	ldr	r3, [pc, #260]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a40      	ldr	r2, [pc, #256]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800760e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007614:	f7fc fe34 	bl	8004280 <HAL_GetTick>
 8007618:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800761a:	e009      	b.n	8007630 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800761c:	f7fc fe30 	bl	8004280 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d902      	bls.n	8007630 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	73fb      	strb	r3, [r7, #15]
        break;
 800762e:	e005      	b.n	800763c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007630:	4b37      	ldr	r3, [pc, #220]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1ef      	bne.n	800761c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d160      	bne.n	8007704 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d111      	bne.n	800766c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007648:	4b31      	ldr	r3, [pc, #196]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6892      	ldr	r2, [r2, #8]
 8007658:	0211      	lsls	r1, r2, #8
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	68d2      	ldr	r2, [r2, #12]
 800765e:	0912      	lsrs	r2, r2, #4
 8007660:	0452      	lsls	r2, r2, #17
 8007662:	430a      	orrs	r2, r1
 8007664:	492a      	ldr	r1, [pc, #168]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007666:	4313      	orrs	r3, r2
 8007668:	610b      	str	r3, [r1, #16]
 800766a:	e027      	b.n	80076bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d112      	bne.n	8007698 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007672:	4b27      	ldr	r3, [pc, #156]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800767a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6892      	ldr	r2, [r2, #8]
 8007682:	0211      	lsls	r1, r2, #8
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6912      	ldr	r2, [r2, #16]
 8007688:	0852      	lsrs	r2, r2, #1
 800768a:	3a01      	subs	r2, #1
 800768c:	0552      	lsls	r2, r2, #21
 800768e:	430a      	orrs	r2, r1
 8007690:	491f      	ldr	r1, [pc, #124]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007692:	4313      	orrs	r3, r2
 8007694:	610b      	str	r3, [r1, #16]
 8007696:	e011      	b.n	80076bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007698:	4b1d      	ldr	r3, [pc, #116]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6892      	ldr	r2, [r2, #8]
 80076a8:	0211      	lsls	r1, r2, #8
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6952      	ldr	r2, [r2, #20]
 80076ae:	0852      	lsrs	r2, r2, #1
 80076b0:	3a01      	subs	r2, #1
 80076b2:	0652      	lsls	r2, r2, #25
 80076b4:	430a      	orrs	r2, r1
 80076b6:	4916      	ldr	r1, [pc, #88]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076bc:	4b14      	ldr	r3, [pc, #80]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a13      	ldr	r2, [pc, #76]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c8:	f7fc fdda 	bl	8004280 <HAL_GetTick>
 80076cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076ce:	e009      	b.n	80076e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076d0:	f7fc fdd6 	bl	8004280 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d902      	bls.n	80076e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	73fb      	strb	r3, [r7, #15]
          break;
 80076e2:	e005      	b.n	80076f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0ef      	beq.n	80076d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80076f6:	4b06      	ldr	r3, [pc, #24]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	4904      	ldr	r1, [pc, #16]	; (8007710 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007700:	4313      	orrs	r3, r2
 8007702:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007704:	7bfb      	ldrb	r3, [r7, #15]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40021000 	.word	0x40021000

08007714 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007722:	4b6a      	ldr	r3, [pc, #424]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d018      	beq.n	8007760 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800772e:	4b67      	ldr	r3, [pc, #412]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0203 	and.w	r2, r3, #3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d10d      	bne.n	800775a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
       ||
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007746:	4b61      	ldr	r3, [pc, #388]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
       ||
 8007756:	429a      	cmp	r2, r3
 8007758:	d047      	beq.n	80077ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	e044      	b.n	80077ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d018      	beq.n	800779a <RCCEx_PLLSAI2_Config+0x86>
 8007768:	2b03      	cmp	r3, #3
 800776a:	d825      	bhi.n	80077b8 <RCCEx_PLLSAI2_Config+0xa4>
 800776c:	2b01      	cmp	r3, #1
 800776e:	d002      	beq.n	8007776 <RCCEx_PLLSAI2_Config+0x62>
 8007770:	2b02      	cmp	r3, #2
 8007772:	d009      	beq.n	8007788 <RCCEx_PLLSAI2_Config+0x74>
 8007774:	e020      	b.n	80077b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007776:	4b55      	ldr	r3, [pc, #340]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d11d      	bne.n	80077be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007786:	e01a      	b.n	80077be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007788:	4b50      	ldr	r3, [pc, #320]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007790:	2b00      	cmp	r3, #0
 8007792:	d116      	bne.n	80077c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007798:	e013      	b.n	80077c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800779a:	4b4c      	ldr	r3, [pc, #304]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10f      	bne.n	80077c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077a6:	4b49      	ldr	r3, [pc, #292]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077b6:	e006      	b.n	80077c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]
      break;
 80077bc:	e004      	b.n	80077c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077be:	bf00      	nop
 80077c0:	e002      	b.n	80077c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077c2:	bf00      	nop
 80077c4:	e000      	b.n	80077c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10d      	bne.n	80077ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077ce:	4b3f      	ldr	r3, [pc, #252]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6819      	ldr	r1, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	3b01      	subs	r3, #1
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	430b      	orrs	r3, r1
 80077e4:	4939      	ldr	r1, [pc, #228]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d167      	bne.n	80078c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80077f0:	4b36      	ldr	r3, [pc, #216]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a35      	ldr	r2, [pc, #212]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077fc:	f7fc fd40 	bl	8004280 <HAL_GetTick>
 8007800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007802:	e009      	b.n	8007818 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007804:	f7fc fd3c 	bl	8004280 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d902      	bls.n	8007818 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	73fb      	strb	r3, [r7, #15]
        break;
 8007816:	e005      	b.n	8007824 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007818:	4b2c      	ldr	r3, [pc, #176]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1ef      	bne.n	8007804 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d14a      	bne.n	80078c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d111      	bne.n	8007854 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007830:	4b26      	ldr	r3, [pc, #152]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6892      	ldr	r2, [r2, #8]
 8007840:	0211      	lsls	r1, r2, #8
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	68d2      	ldr	r2, [r2, #12]
 8007846:	0912      	lsrs	r2, r2, #4
 8007848:	0452      	lsls	r2, r2, #17
 800784a:	430a      	orrs	r2, r1
 800784c:	491f      	ldr	r1, [pc, #124]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800784e:	4313      	orrs	r3, r2
 8007850:	614b      	str	r3, [r1, #20]
 8007852:	e011      	b.n	8007878 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007854:	4b1d      	ldr	r3, [pc, #116]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800785c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6892      	ldr	r2, [r2, #8]
 8007864:	0211      	lsls	r1, r2, #8
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6912      	ldr	r2, [r2, #16]
 800786a:	0852      	lsrs	r2, r2, #1
 800786c:	3a01      	subs	r2, #1
 800786e:	0652      	lsls	r2, r2, #25
 8007870:	430a      	orrs	r2, r1
 8007872:	4916      	ldr	r1, [pc, #88]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007874:	4313      	orrs	r3, r2
 8007876:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007878:	4b14      	ldr	r3, [pc, #80]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a13      	ldr	r2, [pc, #76]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800787e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007882:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007884:	f7fc fcfc 	bl	8004280 <HAL_GetTick>
 8007888:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800788a:	e009      	b.n	80078a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800788c:	f7fc fcf8 	bl	8004280 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d902      	bls.n	80078a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	73fb      	strb	r3, [r7, #15]
          break;
 800789e:	e005      	b.n	80078ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0ef      	beq.n	800788c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078b2:	4b06      	ldr	r3, [pc, #24]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078b4:	695a      	ldr	r2, [r3, #20]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	4904      	ldr	r1, [pc, #16]	; (80078cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40021000 	.word	0x40021000

080078d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e095      	b.n	8007a0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d108      	bne.n	80078fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f2:	d009      	beq.n	8007908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	61da      	str	r2, [r3, #28]
 80078fa:	e005      	b.n	8007908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7fb fdba 	bl	800349c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007948:	d902      	bls.n	8007950 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e002      	b.n	8007956 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007954:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800795e:	d007      	beq.n	8007970 <HAL_SPI_Init+0xa0>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007968:	d002      	beq.n	8007970 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	ea42 0103 	orr.w	r1, r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	0c1b      	lsrs	r3, r3, #16
 80079cc:	f003 0204 	and.w	r2, r3, #4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	f003 0308 	and.w	r3, r3, #8
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80079ec:	ea42 0103 	orr.w	r1, r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b088      	sub	sp, #32
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	603b      	str	r3, [r7, #0]
 8007a22:	4613      	mov	r3, r2
 8007a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_SPI_Transmit+0x22>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e158      	b.n	8007cea <HAL_SPI_Transmit+0x2d4>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a40:	f7fc fc1e 	bl	8004280 <HAL_GetTick>
 8007a44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a46:	88fb      	ldrh	r3, [r7, #6]
 8007a48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d002      	beq.n	8007a5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a56:	2302      	movs	r3, #2
 8007a58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a5a:	e13d      	b.n	8007cd8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d002      	beq.n	8007a68 <HAL_SPI_Transmit+0x52>
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a6c:	e134      	b.n	8007cd8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2203      	movs	r2, #3
 8007a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	88fa      	ldrh	r2, [r7, #6]
 8007a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	88fa      	ldrh	r2, [r7, #6]
 8007a8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab8:	d10f      	bne.n	8007ada <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ad8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	d007      	beq.n	8007af8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b00:	d94b      	bls.n	8007b9a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_SPI_Transmit+0xfa>
 8007b0a:	8afb      	ldrh	r3, [r7, #22]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d13e      	bne.n	8007b8e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	881a      	ldrh	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	1c9a      	adds	r2, r3, #2
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b34:	e02b      	b.n	8007b8e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d112      	bne.n	8007b6a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	881a      	ldrh	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	1c9a      	adds	r2, r3, #2
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b68:	e011      	b.n	8007b8e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b6a:	f7fc fb89 	bl	8004280 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d803      	bhi.n	8007b82 <HAL_SPI_Transmit+0x16c>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b80:	d102      	bne.n	8007b88 <HAL_SPI_Transmit+0x172>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b8c:	e0a4      	b.n	8007cd8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1ce      	bne.n	8007b36 <HAL_SPI_Transmit+0x120>
 8007b98:	e07c      	b.n	8007c94 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_SPI_Transmit+0x192>
 8007ba2:	8afb      	ldrh	r3, [r7, #22]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d170      	bne.n	8007c8a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d912      	bls.n	8007bd8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	881a      	ldrh	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	1c9a      	adds	r2, r3, #2
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b02      	subs	r3, #2
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bd6:	e058      	b.n	8007c8a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	330c      	adds	r3, #12
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007bfe:	e044      	b.n	8007c8a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d12b      	bne.n	8007c66 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d912      	bls.n	8007c3e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	881a      	ldrh	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	1c9a      	adds	r2, r3, #2
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	3b02      	subs	r3, #2
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c3c:	e025      	b.n	8007c8a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	330c      	adds	r3, #12
 8007c48:	7812      	ldrb	r2, [r2, #0]
 8007c4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c64:	e011      	b.n	8007c8a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c66:	f7fc fb0b 	bl	8004280 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d803      	bhi.n	8007c7e <HAL_SPI_Transmit+0x268>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c7c:	d102      	bne.n	8007c84 <HAL_SPI_Transmit+0x26e>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c88:	e026      	b.n	8007cd8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1b5      	bne.n	8007c00 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 fb57 	bl	800834c <SPI_EndRxTxTransaction>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	613b      	str	r3, [r7, #16]
 8007cc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	e000      	b.n	8007cd8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007cd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3720      	adds	r7, #32
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b08a      	sub	sp, #40	; 0x28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
 8007cfe:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d00:	2301      	movs	r3, #1
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_SPI_TransmitReceive+0x26>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e1fb      	b.n	8008110 <HAL_SPI_TransmitReceive+0x41e>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d20:	f7fc faae 	bl	8004280 <HAL_GetTick>
 8007d24:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d2c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d34:	887b      	ldrh	r3, [r7, #2]
 8007d36:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d38:	887b      	ldrh	r3, [r7, #2]
 8007d3a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d3c:	7efb      	ldrb	r3, [r7, #27]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d00e      	beq.n	8007d60 <HAL_SPI_TransmitReceive+0x6e>
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d48:	d106      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x66>
 8007d52:	7efb      	ldrb	r3, [r7, #27]
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d003      	beq.n	8007d60 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d5e:	e1cd      	b.n	80080fc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <HAL_SPI_TransmitReceive+0x80>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <HAL_SPI_TransmitReceive+0x80>
 8007d6c:	887b      	ldrh	r3, [r7, #2]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d103      	bne.n	8007d7a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d78:	e1c0      	b.n	80080fc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d003      	beq.n	8007d8e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2205      	movs	r2, #5
 8007d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	887a      	ldrh	r2, [r7, #2]
 8007d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	887a      	ldrh	r2, [r7, #2]
 8007da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	887a      	ldrh	r2, [r7, #2]
 8007db4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	887a      	ldrh	r2, [r7, #2]
 8007dba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dd0:	d802      	bhi.n	8007dd8 <HAL_SPI_TransmitReceive+0xe6>
 8007dd2:	8a3b      	ldrh	r3, [r7, #16]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d908      	bls.n	8007dea <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007de6:	605a      	str	r2, [r3, #4]
 8007de8:	e007      	b.n	8007dfa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007df8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e04:	2b40      	cmp	r3, #64	; 0x40
 8007e06:	d007      	beq.n	8007e18 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e20:	d97c      	bls.n	8007f1c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_SPI_TransmitReceive+0x13e>
 8007e2a:	8a7b      	ldrh	r3, [r7, #18]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d169      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	881a      	ldrh	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	1c9a      	adds	r2, r3, #2
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e54:	e056      	b.n	8007f04 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d11b      	bne.n	8007e9c <HAL_SPI_TransmitReceive+0x1aa>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <HAL_SPI_TransmitReceive+0x1aa>
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d113      	bne.n	8007e9c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	881a      	ldrh	r2, [r3, #0]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	1c9a      	adds	r2, r3, #2
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d11c      	bne.n	8007ee4 <HAL_SPI_TransmitReceive+0x1f2>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d016      	beq.n	8007ee4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec0:	b292      	uxth	r2, r2
 8007ec2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	1c9a      	adds	r2, r3, #2
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ee4:	f7fc f9cc 	bl	8004280 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d807      	bhi.n	8007f04 <HAL_SPI_TransmitReceive+0x212>
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efa:	d003      	beq.n	8007f04 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f02:	e0fb      	b.n	80080fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1a3      	bne.n	8007e56 <HAL_SPI_TransmitReceive+0x164>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d19d      	bne.n	8007e56 <HAL_SPI_TransmitReceive+0x164>
 8007f1a:	e0df      	b.n	80080dc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_SPI_TransmitReceive+0x23a>
 8007f24:	8a7b      	ldrh	r3, [r7, #18]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	f040 80cb 	bne.w	80080c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d912      	bls.n	8007f5c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	881a      	ldrh	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	1c9a      	adds	r2, r3, #2
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b02      	subs	r3, #2
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f5a:	e0b2      	b.n	80080c2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	7812      	ldrb	r2, [r2, #0]
 8007f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f82:	e09e      	b.n	80080c2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d134      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x30a>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d02f      	beq.n	8007ffc <HAL_SPI_TransmitReceive+0x30a>
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d12c      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d912      	bls.n	8007fd2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	881a      	ldrh	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	1c9a      	adds	r2, r3, #2
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b02      	subs	r3, #2
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fd0:	e012      	b.n	8007ff8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b01      	cmp	r3, #1
 8008008:	d148      	bne.n	800809c <HAL_SPI_TransmitReceive+0x3aa>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d042      	beq.n	800809c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b01      	cmp	r3, #1
 8008020:	d923      	bls.n	800806a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	b292      	uxth	r2, r2
 800802e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b02      	subs	r3, #2
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b01      	cmp	r3, #1
 8008056:	d81f      	bhi.n	8008098 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008066:	605a      	str	r2, [r3, #4]
 8008068:	e016      	b.n	8008098 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f103 020c 	add.w	r2, r3, #12
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008098:	2301      	movs	r3, #1
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800809c:	f7fc f8f0 	bl	8004280 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d803      	bhi.n	80080b4 <HAL_SPI_TransmitReceive+0x3c2>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b2:	d102      	bne.n	80080ba <HAL_SPI_TransmitReceive+0x3c8>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080c0:	e01c      	b.n	80080fc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f47f af5b 	bne.w	8007f84 <HAL_SPI_TransmitReceive+0x292>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f47f af54 	bne.w	8007f84 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f933 	bl	800834c <SPI_EndRxTxTransaction>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	661a      	str	r2, [r3, #96]	; 0x60
 80080f8:	e000      	b.n	80080fc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80080fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800810c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008110:	4618      	mov	r0, r3
 8008112:	3728      	adds	r7, #40	; 0x28
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	603b      	str	r3, [r7, #0]
 8008124:	4613      	mov	r3, r2
 8008126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008128:	f7fc f8aa 	bl	8004280 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	4413      	add	r3, r2
 8008136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008138:	f7fc f8a2 	bl	8004280 <HAL_GetTick>
 800813c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800813e:	4b39      	ldr	r3, [pc, #228]	; (8008224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	015b      	lsls	r3, r3, #5
 8008144:	0d1b      	lsrs	r3, r3, #20
 8008146:	69fa      	ldr	r2, [r7, #28]
 8008148:	fb02 f303 	mul.w	r3, r2, r3
 800814c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800814e:	e054      	b.n	80081fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008156:	d050      	beq.n	80081fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008158:	f7fc f892 	bl	8004280 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	69fa      	ldr	r2, [r7, #28]
 8008164:	429a      	cmp	r2, r3
 8008166:	d902      	bls.n	800816e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d13d      	bne.n	80081ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800817c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008186:	d111      	bne.n	80081ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008190:	d004      	beq.n	800819c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819a:	d107      	bne.n	80081ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b4:	d10f      	bne.n	80081d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e017      	b.n	800821a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4013      	ands	r3, r2
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	bf0c      	ite	eq
 800820a:	2301      	moveq	r3, #1
 800820c:	2300      	movne	r3, #0
 800820e:	b2db      	uxtb	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	429a      	cmp	r2, r3
 8008216:	d19b      	bne.n	8008150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3720      	adds	r7, #32
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	2000013c 	.word	0x2000013c

08008228 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008236:	f7fc f823 	bl	8004280 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	4413      	add	r3, r2
 8008244:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008246:	f7fc f81b 	bl	8004280 <HAL_GetTick>
 800824a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800824c:	4b3e      	ldr	r3, [pc, #248]	; (8008348 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	00da      	lsls	r2, r3, #3
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	0d1b      	lsrs	r3, r3, #20
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008264:	e062      	b.n	800832c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800826c:	d109      	bne.n	8008282 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	330c      	adds	r3, #12
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008280:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008288:	d050      	beq.n	800832c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800828a:	f7fb fff9 	bl	8004280 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	429a      	cmp	r2, r3
 8008298:	d902      	bls.n	80082a0 <SPI_WaitFifoStateUntilTimeout+0x78>
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d13d      	bne.n	800831c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082b8:	d111      	bne.n	80082de <SPI_WaitFifoStateUntilTimeout+0xb6>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c2:	d004      	beq.n	80082ce <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082cc:	d107      	bne.n	80082de <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e6:	d10f      	bne.n	8008308 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008306:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e010      	b.n	800833e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3b01      	subs	r3, #1
 800832a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4013      	ands	r3, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	429a      	cmp	r2, r3
 800833a:	d194      	bne.n	8008266 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3720      	adds	r7, #32
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	2000013c 	.word	0x2000013c

0800834c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7ff ff5f 	bl	8008228 <SPI_WaitFifoStateUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008374:	f043 0220 	orr.w	r2, r3, #32
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e027      	b.n	80083d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	2180      	movs	r1, #128	; 0x80
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff fec4 	bl	8008118 <SPI_WaitFlagStateUntilTimeout>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839a:	f043 0220 	orr.w	r2, r3, #32
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e014      	b.n	80083d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7ff ff38 	bl	8008228 <SPI_WaitFifoStateUntilTimeout>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c2:	f043 0220 	orr.w	r2, r3, #32
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e000      	b.n	80083d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e049      	b.n	800847e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7fb f9ce 	bl	80037a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3304      	adds	r3, #4
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f001 f962 	bl	80096e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b01      	cmp	r3, #1
 800849a:	d001      	beq.n	80084a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e04f      	b.n	8008540 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68da      	ldr	r2, [r3, #12]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a23      	ldr	r2, [pc, #140]	; (800854c <HAL_TIM_Base_Start_IT+0xc4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d01d      	beq.n	80084fe <HAL_TIM_Base_Start_IT+0x76>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ca:	d018      	beq.n	80084fe <HAL_TIM_Base_Start_IT+0x76>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <HAL_TIM_Base_Start_IT+0xc8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d013      	beq.n	80084fe <HAL_TIM_Base_Start_IT+0x76>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1e      	ldr	r2, [pc, #120]	; (8008554 <HAL_TIM_Base_Start_IT+0xcc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00e      	beq.n	80084fe <HAL_TIM_Base_Start_IT+0x76>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <HAL_TIM_Base_Start_IT+0xd0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d009      	beq.n	80084fe <HAL_TIM_Base_Start_IT+0x76>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1b      	ldr	r2, [pc, #108]	; (800855c <HAL_TIM_Base_Start_IT+0xd4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d004      	beq.n	80084fe <HAL_TIM_Base_Start_IT+0x76>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a19      	ldr	r2, [pc, #100]	; (8008560 <HAL_TIM_Base_Start_IT+0xd8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d115      	bne.n	800852a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	4b17      	ldr	r3, [pc, #92]	; (8008564 <HAL_TIM_Base_Start_IT+0xdc>)
 8008506:	4013      	ands	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b06      	cmp	r3, #6
 800850e:	d015      	beq.n	800853c <HAL_TIM_Base_Start_IT+0xb4>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008516:	d011      	beq.n	800853c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008528:	e008      	b.n	800853c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f042 0201 	orr.w	r2, r2, #1
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	e000      	b.n	800853e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40000400 	.word	0x40000400
 8008554:	40000800 	.word	0x40000800
 8008558:	40000c00 	.word	0x40000c00
 800855c:	40013400 	.word	0x40013400
 8008560:	40014000 	.word	0x40014000
 8008564:	00010007 	.word	0x00010007

08008568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e049      	b.n	800860e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d106      	bne.n	8008594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fa ffe4 	bl	800355c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f001 f89a 	bl	80096e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d109      	bne.n	800863c <HAL_TIM_PWM_Start_IT+0x24>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b01      	cmp	r3, #1
 8008632:	bf14      	ite	ne
 8008634:	2301      	movne	r3, #1
 8008636:	2300      	moveq	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	e03c      	b.n	80086b6 <HAL_TIM_PWM_Start_IT+0x9e>
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b04      	cmp	r3, #4
 8008640:	d109      	bne.n	8008656 <HAL_TIM_PWM_Start_IT+0x3e>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b01      	cmp	r3, #1
 800864c:	bf14      	ite	ne
 800864e:	2301      	movne	r3, #1
 8008650:	2300      	moveq	r3, #0
 8008652:	b2db      	uxtb	r3, r3
 8008654:	e02f      	b.n	80086b6 <HAL_TIM_PWM_Start_IT+0x9e>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b08      	cmp	r3, #8
 800865a:	d109      	bne.n	8008670 <HAL_TIM_PWM_Start_IT+0x58>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	bf14      	ite	ne
 8008668:	2301      	movne	r3, #1
 800866a:	2300      	moveq	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	e022      	b.n	80086b6 <HAL_TIM_PWM_Start_IT+0x9e>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b0c      	cmp	r3, #12
 8008674:	d109      	bne.n	800868a <HAL_TIM_PWM_Start_IT+0x72>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b01      	cmp	r3, #1
 8008680:	bf14      	ite	ne
 8008682:	2301      	movne	r3, #1
 8008684:	2300      	moveq	r3, #0
 8008686:	b2db      	uxtb	r3, r3
 8008688:	e015      	b.n	80086b6 <HAL_TIM_PWM_Start_IT+0x9e>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b10      	cmp	r3, #16
 800868e:	d109      	bne.n	80086a4 <HAL_TIM_PWM_Start_IT+0x8c>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	bf14      	ite	ne
 800869c:	2301      	movne	r3, #1
 800869e:	2300      	moveq	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	e008      	b.n	80086b6 <HAL_TIM_PWM_Start_IT+0x9e>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	bf14      	ite	ne
 80086b0:	2301      	movne	r3, #1
 80086b2:	2300      	moveq	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e0e2      	b.n	8008884 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <HAL_TIM_PWM_Start_IT+0xb6>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086cc:	e023      	b.n	8008716 <HAL_TIM_PWM_Start_IT+0xfe>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d104      	bne.n	80086de <HAL_TIM_PWM_Start_IT+0xc6>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086dc:	e01b      	b.n	8008716 <HAL_TIM_PWM_Start_IT+0xfe>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d104      	bne.n	80086ee <HAL_TIM_PWM_Start_IT+0xd6>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ec:	e013      	b.n	8008716 <HAL_TIM_PWM_Start_IT+0xfe>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d104      	bne.n	80086fe <HAL_TIM_PWM_Start_IT+0xe6>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086fc:	e00b      	b.n	8008716 <HAL_TIM_PWM_Start_IT+0xfe>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b10      	cmp	r3, #16
 8008702:	d104      	bne.n	800870e <HAL_TIM_PWM_Start_IT+0xf6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800870c:	e003      	b.n	8008716 <HAL_TIM_PWM_Start_IT+0xfe>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2202      	movs	r2, #2
 8008712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b0c      	cmp	r3, #12
 800871a:	d841      	bhi.n	80087a0 <HAL_TIM_PWM_Start_IT+0x188>
 800871c:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <HAL_TIM_PWM_Start_IT+0x10c>)
 800871e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008722:	bf00      	nop
 8008724:	08008759 	.word	0x08008759
 8008728:	080087a1 	.word	0x080087a1
 800872c:	080087a1 	.word	0x080087a1
 8008730:	080087a1 	.word	0x080087a1
 8008734:	0800876b 	.word	0x0800876b
 8008738:	080087a1 	.word	0x080087a1
 800873c:	080087a1 	.word	0x080087a1
 8008740:	080087a1 	.word	0x080087a1
 8008744:	0800877d 	.word	0x0800877d
 8008748:	080087a1 	.word	0x080087a1
 800874c:	080087a1 	.word	0x080087a1
 8008750:	080087a1 	.word	0x080087a1
 8008754:	0800878f 	.word	0x0800878f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0202 	orr.w	r2, r2, #2
 8008766:	60da      	str	r2, [r3, #12]
      break;
 8008768:	e01b      	b.n	80087a2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0204 	orr.w	r2, r2, #4
 8008778:	60da      	str	r2, [r3, #12]
      break;
 800877a:	e012      	b.n	80087a2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0208 	orr.w	r2, r2, #8
 800878a:	60da      	str	r2, [r3, #12]
      break;
 800878c:	e009      	b.n	80087a2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0210 	orr.w	r2, r2, #16
 800879c:	60da      	str	r2, [r3, #12]
      break;
 800879e:	e000      	b.n	80087a2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80087a0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2201      	movs	r2, #1
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 fb08 	bl	8009dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a35      	ldr	r2, [pc, #212]	; (800888c <HAL_TIM_PWM_Start_IT+0x274>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d013      	beq.n	80087e2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a34      	ldr	r2, [pc, #208]	; (8008890 <HAL_TIM_PWM_Start_IT+0x278>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00e      	beq.n	80087e2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a32      	ldr	r2, [pc, #200]	; (8008894 <HAL_TIM_PWM_Start_IT+0x27c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d009      	beq.n	80087e2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a31      	ldr	r2, [pc, #196]	; (8008898 <HAL_TIM_PWM_Start_IT+0x280>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d004      	beq.n	80087e2 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a2f      	ldr	r2, [pc, #188]	; (800889c <HAL_TIM_PWM_Start_IT+0x284>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d101      	bne.n	80087e6 <HAL_TIM_PWM_Start_IT+0x1ce>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a22      	ldr	r2, [pc, #136]	; (800888c <HAL_TIM_PWM_Start_IT+0x274>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d01d      	beq.n	8008842 <HAL_TIM_PWM_Start_IT+0x22a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880e:	d018      	beq.n	8008842 <HAL_TIM_PWM_Start_IT+0x22a>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a22      	ldr	r2, [pc, #136]	; (80088a0 <HAL_TIM_PWM_Start_IT+0x288>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <HAL_TIM_PWM_Start_IT+0x22a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a21      	ldr	r2, [pc, #132]	; (80088a4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00e      	beq.n	8008842 <HAL_TIM_PWM_Start_IT+0x22a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a1f      	ldr	r2, [pc, #124]	; (80088a8 <HAL_TIM_PWM_Start_IT+0x290>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d009      	beq.n	8008842 <HAL_TIM_PWM_Start_IT+0x22a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a17      	ldr	r2, [pc, #92]	; (8008890 <HAL_TIM_PWM_Start_IT+0x278>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d004      	beq.n	8008842 <HAL_TIM_PWM_Start_IT+0x22a>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <HAL_TIM_PWM_Start_IT+0x27c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d115      	bne.n	800886e <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	4b18      	ldr	r3, [pc, #96]	; (80088ac <HAL_TIM_PWM_Start_IT+0x294>)
 800884a:	4013      	ands	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b06      	cmp	r3, #6
 8008852:	d015      	beq.n	8008880 <HAL_TIM_PWM_Start_IT+0x268>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885a:	d011      	beq.n	8008880 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0201 	orr.w	r2, r2, #1
 800886a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886c:	e008      	b.n	8008880 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0201 	orr.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e000      	b.n	8008882 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008880:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40013400 	.word	0x40013400
 8008894:	40014000 	.word	0x40014000
 8008898:	40014400 	.word	0x40014400
 800889c:	40014800 	.word	0x40014800
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	00010007 	.word	0x00010007

080088b0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2b0c      	cmp	r3, #12
 80088be:	d841      	bhi.n	8008944 <HAL_TIM_PWM_Stop_IT+0x94>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <HAL_TIM_PWM_Stop_IT+0x18>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088fd 	.word	0x080088fd
 80088cc:	08008945 	.word	0x08008945
 80088d0:	08008945 	.word	0x08008945
 80088d4:	08008945 	.word	0x08008945
 80088d8:	0800890f 	.word	0x0800890f
 80088dc:	08008945 	.word	0x08008945
 80088e0:	08008945 	.word	0x08008945
 80088e4:	08008945 	.word	0x08008945
 80088e8:	08008921 	.word	0x08008921
 80088ec:	08008945 	.word	0x08008945
 80088f0:	08008945 	.word	0x08008945
 80088f4:	08008945 	.word	0x08008945
 80088f8:	08008933 	.word	0x08008933
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0202 	bic.w	r2, r2, #2
 800890a:	60da      	str	r2, [r3, #12]
      break;
 800890c:	e01b      	b.n	8008946 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0204 	bic.w	r2, r2, #4
 800891c:	60da      	str	r2, [r3, #12]
      break;
 800891e:	e012      	b.n	8008946 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0208 	bic.w	r2, r2, #8
 800892e:	60da      	str	r2, [r3, #12]
      break;
 8008930:	e009      	b.n	8008946 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0210 	bic.w	r2, r2, #16
 8008940:	60da      	str	r2, [r3, #12]
      break;
 8008942:	e000      	b.n	8008946 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8008944:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f001 fa36 	bl	8009dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a3e      	ldr	r2, [pc, #248]	; (8008a54 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d013      	beq.n	8008986 <HAL_TIM_PWM_Stop_IT+0xd6>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a3d      	ldr	r2, [pc, #244]	; (8008a58 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00e      	beq.n	8008986 <HAL_TIM_PWM_Stop_IT+0xd6>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a3b      	ldr	r2, [pc, #236]	; (8008a5c <HAL_TIM_PWM_Stop_IT+0x1ac>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d009      	beq.n	8008986 <HAL_TIM_PWM_Stop_IT+0xd6>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a3a      	ldr	r2, [pc, #232]	; (8008a60 <HAL_TIM_PWM_Stop_IT+0x1b0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d004      	beq.n	8008986 <HAL_TIM_PWM_Stop_IT+0xd6>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a38      	ldr	r2, [pc, #224]	; (8008a64 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d101      	bne.n	800898a <HAL_TIM_PWM_Stop_IT+0xda>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <HAL_TIM_PWM_Stop_IT+0xdc>
 800898a:	2300      	movs	r3, #0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d017      	beq.n	80089c0 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	f241 1311 	movw	r3, #4369	; 0x1111
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10f      	bne.n	80089c0 <HAL_TIM_PWM_Stop_IT+0x110>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	f240 4344 	movw	r3, #1092	; 0x444
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d107      	bne.n	80089c0 <HAL_TIM_PWM_Stop_IT+0x110>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6a1a      	ldr	r2, [r3, #32]
 80089c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10f      	bne.n	80089f0 <HAL_TIM_PWM_Stop_IT+0x140>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6a1a      	ldr	r2, [r3, #32]
 80089d6:	f240 4344 	movw	r3, #1092	; 0x444
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d107      	bne.n	80089f0 <HAL_TIM_PWM_Stop_IT+0x140>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0201 	bic.w	r2, r2, #1
 80089ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d104      	bne.n	8008a00 <HAL_TIM_PWM_Stop_IT+0x150>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089fe:	e023      	b.n	8008a48 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d104      	bne.n	8008a10 <HAL_TIM_PWM_Stop_IT+0x160>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a0e:	e01b      	b.n	8008a48 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d104      	bne.n	8008a20 <HAL_TIM_PWM_Stop_IT+0x170>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a1e:	e013      	b.n	8008a48 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b0c      	cmp	r3, #12
 8008a24:	d104      	bne.n	8008a30 <HAL_TIM_PWM_Stop_IT+0x180>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a2e:	e00b      	b.n	8008a48 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b10      	cmp	r3, #16
 8008a34:	d104      	bne.n	8008a40 <HAL_TIM_PWM_Stop_IT+0x190>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a3e:	e003      	b.n	8008a48 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40012c00 	.word	0x40012c00
 8008a58:	40013400 	.word	0x40013400
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40014400 	.word	0x40014400
 8008a64:	40014800 	.word	0x40014800

08008a68 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d109      	bne.n	8008a90 <HAL_TIM_PWM_Start_DMA+0x28>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	bf0c      	ite	eq
 8008a88:	2301      	moveq	r3, #1
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	e03c      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b04      	cmp	r3, #4
 8008a94:	d109      	bne.n	8008aaa <HAL_TIM_PWM_Start_DMA+0x42>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	bf0c      	ite	eq
 8008aa2:	2301      	moveq	r3, #1
 8008aa4:	2300      	movne	r3, #0
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	e02f      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d109      	bne.n	8008ac4 <HAL_TIM_PWM_Start_DMA+0x5c>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	bf0c      	ite	eq
 8008abc:	2301      	moveq	r3, #1
 8008abe:	2300      	movne	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	e022      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b0c      	cmp	r3, #12
 8008ac8:	d109      	bne.n	8008ade <HAL_TIM_PWM_Start_DMA+0x76>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2301      	moveq	r3, #1
 8008ad8:	2300      	movne	r3, #0
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	e015      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2b10      	cmp	r3, #16
 8008ae2:	d109      	bne.n	8008af8 <HAL_TIM_PWM_Start_DMA+0x90>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	bf0c      	ite	eq
 8008af0:	2301      	moveq	r3, #1
 8008af2:	2300      	movne	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	e008      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	bf0c      	ite	eq
 8008b04:	2301      	moveq	r3, #1
 8008b06:	2300      	movne	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8008b0e:	2302      	movs	r3, #2
 8008b10:	e1a6      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <HAL_TIM_PWM_Start_DMA+0xc4>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	e03c      	b.n	8008ba6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d109      	bne.n	8008b46 <HAL_TIM_PWM_Start_DMA+0xde>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	bf0c      	ite	eq
 8008b3e:	2301      	moveq	r3, #1
 8008b40:	2300      	movne	r3, #0
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	e02f      	b.n	8008ba6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b08      	cmp	r3, #8
 8008b4a:	d109      	bne.n	8008b60 <HAL_TIM_PWM_Start_DMA+0xf8>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	bf0c      	ite	eq
 8008b58:	2301      	moveq	r3, #1
 8008b5a:	2300      	movne	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	e022      	b.n	8008ba6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b0c      	cmp	r3, #12
 8008b64:	d109      	bne.n	8008b7a <HAL_TIM_PWM_Start_DMA+0x112>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	bf0c      	ite	eq
 8008b72:	2301      	moveq	r3, #1
 8008b74:	2300      	movne	r3, #0
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	e015      	b.n	8008ba6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b10      	cmp	r3, #16
 8008b7e:	d109      	bne.n	8008b94 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	bf0c      	ite	eq
 8008b8c:	2301      	moveq	r3, #1
 8008b8e:	2300      	movne	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	e008      	b.n	8008ba6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d034      	beq.n	8008c14 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <HAL_TIM_PWM_Start_DMA+0x152>
 8008bb0:	887b      	ldrh	r3, [r7, #2]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e152      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <HAL_TIM_PWM_Start_DMA+0x162>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc8:	e026      	b.n	8008c18 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d104      	bne.n	8008bda <HAL_TIM_PWM_Start_DMA+0x172>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd8:	e01e      	b.n	8008c18 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_PWM_Start_DMA+0x182>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008be8:	e016      	b.n	8008c18 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b0c      	cmp	r3, #12
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Start_DMA+0x192>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bf8:	e00e      	b.n	8008c18 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c08:	e006      	b.n	8008c18 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c12:	e001      	b.n	8008c18 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e123      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b0c      	cmp	r3, #12
 8008c1c:	f200 80ae 	bhi.w	8008d7c <HAL_TIM_PWM_Start_DMA+0x314>
 8008c20:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c5d 	.word	0x08008c5d
 8008c2c:	08008d7d 	.word	0x08008d7d
 8008c30:	08008d7d 	.word	0x08008d7d
 8008c34:	08008d7d 	.word	0x08008d7d
 8008c38:	08008ca5 	.word	0x08008ca5
 8008c3c:	08008d7d 	.word	0x08008d7d
 8008c40:	08008d7d 	.word	0x08008d7d
 8008c44:	08008d7d 	.word	0x08008d7d
 8008c48:	08008ced 	.word	0x08008ced
 8008c4c:	08008d7d 	.word	0x08008d7d
 8008c50:	08008d7d 	.word	0x08008d7d
 8008c54:	08008d7d 	.word	0x08008d7d
 8008c58:	08008d35 	.word	0x08008d35
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c60:	4a81      	ldr	r2, [pc, #516]	; (8008e68 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008c62:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	4a80      	ldr	r2, [pc, #512]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	4a7f      	ldr	r2, [pc, #508]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008c72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008c78:	6879      	ldr	r1, [r7, #4]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3334      	adds	r3, #52	; 0x34
 8008c80:	461a      	mov	r2, r3
 8008c82:	887b      	ldrh	r3, [r7, #2]
 8008c84:	f7fc fe80 	bl	8005988 <HAL_DMA_Start_IT>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e0e6      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68da      	ldr	r2, [r3, #12]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ca0:	60da      	str	r2, [r3, #12]
      break;
 8008ca2:	e06c      	b.n	8008d7e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	4a6f      	ldr	r2, [pc, #444]	; (8008e68 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008caa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb0:	4a6e      	ldr	r2, [pc, #440]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008cb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	4a6d      	ldr	r2, [pc, #436]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3338      	adds	r3, #56	; 0x38
 8008cc8:	461a      	mov	r2, r3
 8008cca:	887b      	ldrh	r3, [r7, #2]
 8008ccc:	f7fc fe5c 	bl	8005988 <HAL_DMA_Start_IT>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e0c2      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ce8:	60da      	str	r2, [r3, #12]
      break;
 8008cea:	e048      	b.n	8008d7e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	4a5d      	ldr	r2, [pc, #372]	; (8008e68 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	4a5c      	ldr	r2, [pc, #368]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4a5b      	ldr	r2, [pc, #364]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	333c      	adds	r3, #60	; 0x3c
 8008d10:	461a      	mov	r2, r3
 8008d12:	887b      	ldrh	r3, [r7, #2]
 8008d14:	f7fc fe38 	bl	8005988 <HAL_DMA_Start_IT>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e09e      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d30:	60da      	str	r2, [r3, #12]
      break;
 8008d32:	e024      	b.n	8008d7e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	4a4b      	ldr	r2, [pc, #300]	; (8008e68 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008d3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	4a4a      	ldr	r2, [pc, #296]	; (8008e6c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d48:	4a49      	ldr	r2, [pc, #292]	; (8008e70 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3340      	adds	r3, #64	; 0x40
 8008d58:	461a      	mov	r2, r3
 8008d5a:	887b      	ldrh	r3, [r7, #2]
 8008d5c:	f7fc fe14 	bl	8005988 <HAL_DMA_Start_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e07a      	b.n	8008e60 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d78:	60da      	str	r2, [r3, #12]
      break;
 8008d7a:	e000      	b.n	8008d7e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8008d7c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2201      	movs	r2, #1
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 f81a 	bl	8009dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a38      	ldr	r2, [pc, #224]	; (8008e74 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d013      	beq.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x356>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a37      	ldr	r2, [pc, #220]	; (8008e78 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00e      	beq.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x356>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a35      	ldr	r2, [pc, #212]	; (8008e7c <HAL_TIM_PWM_Start_DMA+0x414>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d009      	beq.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x356>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a34      	ldr	r2, [pc, #208]	; (8008e80 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d004      	beq.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x356>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a32      	ldr	r2, [pc, #200]	; (8008e84 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d101      	bne.n	8008dc2 <HAL_TIM_PWM_Start_DMA+0x35a>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <HAL_TIM_PWM_Start_DMA+0x35c>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a25      	ldr	r2, [pc, #148]	; (8008e74 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d01d      	beq.n	8008e1e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dea:	d018      	beq.n	8008e1e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a25      	ldr	r2, [pc, #148]	; (8008e88 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d013      	beq.n	8008e1e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a24      	ldr	r2, [pc, #144]	; (8008e8c <HAL_TIM_PWM_Start_DMA+0x424>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00e      	beq.n	8008e1e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a22      	ldr	r2, [pc, #136]	; (8008e90 <HAL_TIM_PWM_Start_DMA+0x428>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d009      	beq.n	8008e1e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1a      	ldr	r2, [pc, #104]	; (8008e78 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d004      	beq.n	8008e1e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <HAL_TIM_PWM_Start_DMA+0x414>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d115      	bne.n	8008e4a <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b06      	cmp	r3, #6
 8008e2e:	d015      	beq.n	8008e5c <HAL_TIM_PWM_Start_DMA+0x3f4>
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e36:	d011      	beq.n	8008e5c <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0201 	orr.w	r2, r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e48:	e008      	b.n	8008e5c <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0201 	orr.w	r2, r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e000      	b.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	080095cf 	.word	0x080095cf
 8008e6c:	08009677 	.word	0x08009677
 8008e70:	0800953d 	.word	0x0800953d
 8008e74:	40012c00 	.word	0x40012c00
 8008e78:	40013400 	.word	0x40013400
 8008e7c:	40014000 	.word	0x40014000
 8008e80:	40014400 	.word	0x40014400
 8008e84:	40014800 	.word	0x40014800
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000c00 	.word	0x40000c00
 8008e94:	00010007 	.word	0x00010007

08008e98 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b0c      	cmp	r3, #12
 8008ea6:	d855      	bhi.n	8008f54 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8008ea8:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ee5 	.word	0x08008ee5
 8008eb4:	08008f55 	.word	0x08008f55
 8008eb8:	08008f55 	.word	0x08008f55
 8008ebc:	08008f55 	.word	0x08008f55
 8008ec0:	08008f01 	.word	0x08008f01
 8008ec4:	08008f55 	.word	0x08008f55
 8008ec8:	08008f55 	.word	0x08008f55
 8008ecc:	08008f55 	.word	0x08008f55
 8008ed0:	08008f1d 	.word	0x08008f1d
 8008ed4:	08008f55 	.word	0x08008f55
 8008ed8:	08008f55 	.word	0x08008f55
 8008edc:	08008f55 	.word	0x08008f55
 8008ee0:	08008f39 	.word	0x08008f39
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ef2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fc fda5 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008efe:	e02a      	b.n	8008f56 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fc fd97 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008f1a:	e01c      	b.n	8008f56 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fc fd89 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008f36:	e00e      	b.n	8008f56 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fc fd7b 	bl	8005a48 <HAL_DMA_Abort_IT>
      break;
 8008f52:	e000      	b.n	8008f56 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8008f54:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 ff2e 	bl	8009dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a3e      	ldr	r2, [pc, #248]	; (8009064 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d013      	beq.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a3d      	ldr	r2, [pc, #244]	; (8009068 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00e      	beq.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a3b      	ldr	r2, [pc, #236]	; (800906c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d009      	beq.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a3a      	ldr	r2, [pc, #232]	; (8009070 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d004      	beq.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a38      	ldr	r2, [pc, #224]	; (8009074 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d101      	bne.n	8008f9a <HAL_TIM_PWM_Stop_DMA+0x102>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e000      	b.n	8008f9c <HAL_TIM_PWM_Stop_DMA+0x104>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d017      	beq.n	8008fd0 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a1a      	ldr	r2, [r3, #32]
 8008fa6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008faa:	4013      	ands	r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10f      	bne.n	8008fd0 <HAL_TIM_PWM_Stop_DMA+0x138>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	f240 4344 	movw	r3, #1092	; 0x444
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d107      	bne.n	8008fd0 <HAL_TIM_PWM_Stop_DMA+0x138>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6a1a      	ldr	r2, [r3, #32]
 8008fd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10f      	bne.n	8009000 <HAL_TIM_PWM_Stop_DMA+0x168>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6a1a      	ldr	r2, [r3, #32]
 8008fe6:	f240 4344 	movw	r3, #1092	; 0x444
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d107      	bne.n	8009000 <HAL_TIM_PWM_Stop_DMA+0x168>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0201 	bic.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d104      	bne.n	8009010 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800900e:	e023      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b04      	cmp	r3, #4
 8009014:	d104      	bne.n	8009020 <HAL_TIM_PWM_Stop_DMA+0x188>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800901e:	e01b      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b08      	cmp	r3, #8
 8009024:	d104      	bne.n	8009030 <HAL_TIM_PWM_Stop_DMA+0x198>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800902e:	e013      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b0c      	cmp	r3, #12
 8009034:	d104      	bne.n	8009040 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800903e:	e00b      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b10      	cmp	r3, #16
 8009044:	d104      	bne.n	8009050 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800904e:	e003      	b.n	8009058 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40012c00 	.word	0x40012c00
 8009068:	40013400 	.word	0x40013400
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800

08009078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0302 	and.w	r3, r3, #2
 800908a:	2b02      	cmp	r3, #2
 800908c:	d122      	bne.n	80090d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b02      	cmp	r3, #2
 800909a:	d11b      	bne.n	80090d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f06f 0202 	mvn.w	r2, #2
 80090a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa16 	bl	80094ec <HAL_TIM_IC_CaptureCallback>
 80090c0:	e005      	b.n	80090ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa08 	bl	80094d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7fa fe83 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	f003 0304 	and.w	r3, r3, #4
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d122      	bne.n	8009128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d11b      	bne.n	8009128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f06f 0204 	mvn.w	r2, #4
 80090f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2202      	movs	r2, #2
 80090fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9ec 	bl	80094ec <HAL_TIM_IC_CaptureCallback>
 8009114:	e005      	b.n	8009122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9de 	bl	80094d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7fa fe59 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f003 0308 	and.w	r3, r3, #8
 8009132:	2b08      	cmp	r3, #8
 8009134:	d122      	bne.n	800917c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b08      	cmp	r3, #8
 8009142:	d11b      	bne.n	800917c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f06f 0208 	mvn.w	r2, #8
 800914c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2204      	movs	r2, #4
 8009152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9c2 	bl	80094ec <HAL_TIM_IC_CaptureCallback>
 8009168:	e005      	b.n	8009176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9b4 	bl	80094d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fa fe2f 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	f003 0310 	and.w	r3, r3, #16
 8009186:	2b10      	cmp	r3, #16
 8009188:	d122      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b10      	cmp	r3, #16
 8009196:	d11b      	bne.n	80091d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f06f 0210 	mvn.w	r2, #16
 80091a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2208      	movs	r2, #8
 80091a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f998 	bl	80094ec <HAL_TIM_IC_CaptureCallback>
 80091bc:	e005      	b.n	80091ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f98a 	bl	80094d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7fa fe05 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d10e      	bne.n	80091fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d107      	bne.n	80091fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f06f 0201 	mvn.w	r2, #1
 80091f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7f9 faaa 	bl	8002750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009206:	2b80      	cmp	r3, #128	; 0x80
 8009208:	d10e      	bne.n	8009228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009214:	2b80      	cmp	r3, #128	; 0x80
 8009216:	d107      	bne.n	8009228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 ff02 	bl	800a02c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009236:	d10e      	bne.n	8009256 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009242:	2b80      	cmp	r3, #128	; 0x80
 8009244:	d107      	bne.n	8009256 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800924e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fef5 	bl	800a040 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009260:	2b40      	cmp	r3, #64	; 0x40
 8009262:	d10e      	bne.n	8009282 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	d107      	bne.n	8009282 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800927a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f949 	bl	8009514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b20      	cmp	r3, #32
 800928e:	d10e      	bne.n	80092ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b20      	cmp	r3, #32
 800929c:	d107      	bne.n	80092ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f06f 0220 	mvn.w	r2, #32
 80092a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 feb5 	bl	800a018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e0fd      	b.n	80094ce <HAL_TIM_PWM_ConfigChannel+0x216>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b14      	cmp	r3, #20
 80092de:	f200 80f0 	bhi.w	80094c2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80092e2:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	0800933d 	.word	0x0800933d
 80092ec:	080094c3 	.word	0x080094c3
 80092f0:	080094c3 	.word	0x080094c3
 80092f4:	080094c3 	.word	0x080094c3
 80092f8:	0800937d 	.word	0x0800937d
 80092fc:	080094c3 	.word	0x080094c3
 8009300:	080094c3 	.word	0x080094c3
 8009304:	080094c3 	.word	0x080094c3
 8009308:	080093bf 	.word	0x080093bf
 800930c:	080094c3 	.word	0x080094c3
 8009310:	080094c3 	.word	0x080094c3
 8009314:	080094c3 	.word	0x080094c3
 8009318:	080093ff 	.word	0x080093ff
 800931c:	080094c3 	.word	0x080094c3
 8009320:	080094c3 	.word	0x080094c3
 8009324:	080094c3 	.word	0x080094c3
 8009328:	08009441 	.word	0x08009441
 800932c:	080094c3 	.word	0x080094c3
 8009330:	080094c3 	.word	0x080094c3
 8009334:	080094c3 	.word	0x080094c3
 8009338:	08009481 	.word	0x08009481
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fa66 	bl	8009814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699a      	ldr	r2, [r3, #24]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0208 	orr.w	r2, r2, #8
 8009356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	699a      	ldr	r2, [r3, #24]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0204 	bic.w	r2, r2, #4
 8009366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6999      	ldr	r1, [r3, #24]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691a      	ldr	r2, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	619a      	str	r2, [r3, #24]
      break;
 800937a:	e0a3      	b.n	80094c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fad6 	bl	8009934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6999      	ldr	r1, [r3, #24]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	021a      	lsls	r2, r3, #8
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	619a      	str	r2, [r3, #24]
      break;
 80093bc:	e082      	b.n	80094c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb3f 	bl	8009a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	69da      	ldr	r2, [r3, #28]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0208 	orr.w	r2, r2, #8
 80093d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	69da      	ldr	r2, [r3, #28]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0204 	bic.w	r2, r2, #4
 80093e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69d9      	ldr	r1, [r3, #28]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	61da      	str	r2, [r3, #28]
      break;
 80093fc:	e062      	b.n	80094c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fba7 	bl	8009b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69da      	ldr	r2, [r3, #28]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69d9      	ldr	r1, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	021a      	lsls	r2, r3, #8
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	61da      	str	r2, [r3, #28]
      break;
 800943e:	e041      	b.n	80094c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68b9      	ldr	r1, [r7, #8]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fbf0 	bl	8009c2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0208 	orr.w	r2, r2, #8
 800945a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0204 	bic.w	r2, r2, #4
 800946a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	691a      	ldr	r2, [r3, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800947e:	e021      	b.n	80094c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fc34 	bl	8009cf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800949a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	021a      	lsls	r2, r3, #8
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094c0:	e000      	b.n	80094c4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80094c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop

080094d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	429a      	cmp	r2, r3
 8009552:	d107      	bne.n	8009564 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009562:	e02a      	b.n	80095ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	429a      	cmp	r2, r3
 800956c:	d107      	bne.n	800957e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2202      	movs	r2, #2
 8009572:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800957c:	e01d      	b.n	80095ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d107      	bne.n	8009598 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2204      	movs	r2, #4
 800958c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009596:	e010      	b.n	80095ba <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d107      	bne.n	80095b2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2208      	movs	r2, #8
 80095a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095b0:	e003      	b.n	80095ba <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff ffb4 	bl	8009528 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	771a      	strb	r2, [r3, #28]
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d10b      	bne.n	80095fe <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d136      	bne.n	8009662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095fc:	e031      	b.n	8009662 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	429a      	cmp	r2, r3
 8009606:	d10b      	bne.n	8009620 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2202      	movs	r2, #2
 800960c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d125      	bne.n	8009662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800961e:	e020      	b.n	8009662 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	429a      	cmp	r2, r3
 8009628:	d10b      	bne.n	8009642 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2204      	movs	r2, #4
 800962e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d114      	bne.n	8009662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009640:	e00f      	b.n	8009662 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d10a      	bne.n	8009662 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2208      	movs	r2, #8
 8009650:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d103      	bne.n	8009662 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7fa fbb6 	bl	8003dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	771a      	strb	r2, [r3, #28]
}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	429a      	cmp	r2, r3
 800968c:	d103      	bne.n	8009696 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	771a      	strb	r2, [r3, #28]
 8009694:	e019      	b.n	80096ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d103      	bne.n	80096a8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2202      	movs	r2, #2
 80096a4:	771a      	strb	r2, [r3, #28]
 80096a6:	e010      	b.n	80096ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d103      	bne.n	80096ba <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2204      	movs	r2, #4
 80096b6:	771a      	strb	r2, [r3, #28]
 80096b8:	e007      	b.n	80096ca <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d102      	bne.n	80096ca <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2208      	movs	r2, #8
 80096c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff ff18 	bl	8009500 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	771a      	strb	r2, [r3, #28]
}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a40      	ldr	r2, [pc, #256]	; (80097f4 <TIM_Base_SetConfig+0x114>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d013      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fe:	d00f      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a3d      	ldr	r2, [pc, #244]	; (80097f8 <TIM_Base_SetConfig+0x118>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00b      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a3c      	ldr	r2, [pc, #240]	; (80097fc <TIM_Base_SetConfig+0x11c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d007      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a3b      	ldr	r2, [pc, #236]	; (8009800 <TIM_Base_SetConfig+0x120>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d003      	beq.n	8009720 <TIM_Base_SetConfig+0x40>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a3a      	ldr	r2, [pc, #232]	; (8009804 <TIM_Base_SetConfig+0x124>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d108      	bne.n	8009732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4313      	orrs	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a2f      	ldr	r2, [pc, #188]	; (80097f4 <TIM_Base_SetConfig+0x114>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01f      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009740:	d01b      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a2c      	ldr	r2, [pc, #176]	; (80097f8 <TIM_Base_SetConfig+0x118>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d017      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a2b      	ldr	r2, [pc, #172]	; (80097fc <TIM_Base_SetConfig+0x11c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d013      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2a      	ldr	r2, [pc, #168]	; (8009800 <TIM_Base_SetConfig+0x120>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00f      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a29      	ldr	r2, [pc, #164]	; (8009804 <TIM_Base_SetConfig+0x124>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00b      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a28      	ldr	r2, [pc, #160]	; (8009808 <TIM_Base_SetConfig+0x128>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d007      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a27      	ldr	r2, [pc, #156]	; (800980c <TIM_Base_SetConfig+0x12c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d003      	beq.n	800977a <TIM_Base_SetConfig+0x9a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a26      	ldr	r2, [pc, #152]	; (8009810 <TIM_Base_SetConfig+0x130>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d108      	bne.n	800978c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a10      	ldr	r2, [pc, #64]	; (80097f4 <TIM_Base_SetConfig+0x114>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00f      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a12      	ldr	r2, [pc, #72]	; (8009804 <TIM_Base_SetConfig+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00b      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a11      	ldr	r2, [pc, #68]	; (8009808 <TIM_Base_SetConfig+0x128>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d007      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a10      	ldr	r2, [pc, #64]	; (800980c <TIM_Base_SetConfig+0x12c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d003      	beq.n	80097d8 <TIM_Base_SetConfig+0xf8>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a0f      	ldr	r2, [pc, #60]	; (8009810 <TIM_Base_SetConfig+0x130>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d103      	bne.n	80097e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	615a      	str	r2, [r3, #20]
}
 80097e6:	bf00      	nop
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40012c00 	.word	0x40012c00
 80097f8:	40000400 	.word	0x40000400
 80097fc:	40000800 	.word	0x40000800
 8009800:	40000c00 	.word	0x40000c00
 8009804:	40013400 	.word	0x40013400
 8009808:	40014000 	.word	0x40014000
 800980c:	40014400 	.word	0x40014400
 8009810:	40014800 	.word	0x40014800

08009814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	f023 0201 	bic.w	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0303 	bic.w	r3, r3, #3
 800984e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f023 0302 	bic.w	r3, r3, #2
 8009860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	4313      	orrs	r3, r2
 800986a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a2c      	ldr	r2, [pc, #176]	; (8009920 <TIM_OC1_SetConfig+0x10c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00f      	beq.n	8009894 <TIM_OC1_SetConfig+0x80>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a2b      	ldr	r2, [pc, #172]	; (8009924 <TIM_OC1_SetConfig+0x110>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d00b      	beq.n	8009894 <TIM_OC1_SetConfig+0x80>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <TIM_OC1_SetConfig+0x114>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d007      	beq.n	8009894 <TIM_OC1_SetConfig+0x80>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a29      	ldr	r2, [pc, #164]	; (800992c <TIM_OC1_SetConfig+0x118>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d003      	beq.n	8009894 <TIM_OC1_SetConfig+0x80>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a28      	ldr	r2, [pc, #160]	; (8009930 <TIM_OC1_SetConfig+0x11c>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d10c      	bne.n	80098ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f023 0308 	bic.w	r3, r3, #8
 800989a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 0304 	bic.w	r3, r3, #4
 80098ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <TIM_OC1_SetConfig+0x10c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00f      	beq.n	80098d6 <TIM_OC1_SetConfig+0xc2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a1a      	ldr	r2, [pc, #104]	; (8009924 <TIM_OC1_SetConfig+0x110>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00b      	beq.n	80098d6 <TIM_OC1_SetConfig+0xc2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a19      	ldr	r2, [pc, #100]	; (8009928 <TIM_OC1_SetConfig+0x114>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d007      	beq.n	80098d6 <TIM_OC1_SetConfig+0xc2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a18      	ldr	r2, [pc, #96]	; (800992c <TIM_OC1_SetConfig+0x118>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d003      	beq.n	80098d6 <TIM_OC1_SetConfig+0xc2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a17      	ldr	r2, [pc, #92]	; (8009930 <TIM_OC1_SetConfig+0x11c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d111      	bne.n	80098fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	621a      	str	r2, [r3, #32]
}
 8009914:	bf00      	nop
 8009916:	371c      	adds	r7, #28
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	40012c00 	.word	0x40012c00
 8009924:	40013400 	.word	0x40013400
 8009928:	40014000 	.word	0x40014000
 800992c:	40014400 	.word	0x40014400
 8009930:	40014800 	.word	0x40014800

08009934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	f023 0210 	bic.w	r2, r3, #16
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800996e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	021b      	lsls	r3, r3, #8
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4313      	orrs	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f023 0320 	bic.w	r3, r3, #32
 8009982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	4313      	orrs	r3, r2
 800998e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a28      	ldr	r2, [pc, #160]	; (8009a34 <TIM_OC2_SetConfig+0x100>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <TIM_OC2_SetConfig+0x6c>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a27      	ldr	r2, [pc, #156]	; (8009a38 <TIM_OC2_SetConfig+0x104>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d10d      	bne.n	80099bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	011b      	lsls	r3, r3, #4
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a1d      	ldr	r2, [pc, #116]	; (8009a34 <TIM_OC2_SetConfig+0x100>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00f      	beq.n	80099e4 <TIM_OC2_SetConfig+0xb0>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a1c      	ldr	r2, [pc, #112]	; (8009a38 <TIM_OC2_SetConfig+0x104>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d00b      	beq.n	80099e4 <TIM_OC2_SetConfig+0xb0>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a1b      	ldr	r2, [pc, #108]	; (8009a3c <TIM_OC2_SetConfig+0x108>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d007      	beq.n	80099e4 <TIM_OC2_SetConfig+0xb0>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a1a      	ldr	r2, [pc, #104]	; (8009a40 <TIM_OC2_SetConfig+0x10c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d003      	beq.n	80099e4 <TIM_OC2_SetConfig+0xb0>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <TIM_OC2_SetConfig+0x110>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d113      	bne.n	8009a0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	621a      	str	r2, [r3, #32]
}
 8009a26:	bf00      	nop
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	40012c00 	.word	0x40012c00
 8009a38:	40013400 	.word	0x40013400
 8009a3c:	40014000 	.word	0x40014000
 8009a40:	40014400 	.word	0x40014400
 8009a44:	40014800 	.word	0x40014800

08009a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a1b      	ldr	r3, [r3, #32]
 8009a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 0303 	bic.w	r3, r3, #3
 8009a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a27      	ldr	r2, [pc, #156]	; (8009b44 <TIM_OC3_SetConfig+0xfc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d003      	beq.n	8009ab2 <TIM_OC3_SetConfig+0x6a>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a26      	ldr	r2, [pc, #152]	; (8009b48 <TIM_OC3_SetConfig+0x100>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d10d      	bne.n	8009ace <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	021b      	lsls	r3, r3, #8
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a1c      	ldr	r2, [pc, #112]	; (8009b44 <TIM_OC3_SetConfig+0xfc>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00f      	beq.n	8009af6 <TIM_OC3_SetConfig+0xae>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a1b      	ldr	r2, [pc, #108]	; (8009b48 <TIM_OC3_SetConfig+0x100>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d00b      	beq.n	8009af6 <TIM_OC3_SetConfig+0xae>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a1a      	ldr	r2, [pc, #104]	; (8009b4c <TIM_OC3_SetConfig+0x104>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d007      	beq.n	8009af6 <TIM_OC3_SetConfig+0xae>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a19      	ldr	r2, [pc, #100]	; (8009b50 <TIM_OC3_SetConfig+0x108>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d003      	beq.n	8009af6 <TIM_OC3_SetConfig+0xae>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a18      	ldr	r2, [pc, #96]	; (8009b54 <TIM_OC3_SetConfig+0x10c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d113      	bne.n	8009b1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	011b      	lsls	r3, r3, #4
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	621a      	str	r2, [r3, #32]
}
 8009b38:	bf00      	nop
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	40012c00 	.word	0x40012c00
 8009b48:	40013400 	.word	0x40013400
 8009b4c:	40014000 	.word	0x40014000
 8009b50:	40014400 	.word	0x40014400
 8009b54:	40014800 	.word	0x40014800

08009b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	031b      	lsls	r3, r3, #12
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a18      	ldr	r2, [pc, #96]	; (8009c18 <TIM_OC4_SetConfig+0xc0>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00f      	beq.n	8009bdc <TIM_OC4_SetConfig+0x84>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a17      	ldr	r2, [pc, #92]	; (8009c1c <TIM_OC4_SetConfig+0xc4>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d00b      	beq.n	8009bdc <TIM_OC4_SetConfig+0x84>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a16      	ldr	r2, [pc, #88]	; (8009c20 <TIM_OC4_SetConfig+0xc8>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d007      	beq.n	8009bdc <TIM_OC4_SetConfig+0x84>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a15      	ldr	r2, [pc, #84]	; (8009c24 <TIM_OC4_SetConfig+0xcc>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d003      	beq.n	8009bdc <TIM_OC4_SetConfig+0x84>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a14      	ldr	r2, [pc, #80]	; (8009c28 <TIM_OC4_SetConfig+0xd0>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d109      	bne.n	8009bf0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	019b      	lsls	r3, r3, #6
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	621a      	str	r2, [r3, #32]
}
 8009c0a:	bf00      	nop
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	40012c00 	.word	0x40012c00
 8009c1c:	40013400 	.word	0x40013400
 8009c20:	40014000 	.word	0x40014000
 8009c24:	40014400 	.word	0x40014400
 8009c28:	40014800 	.word	0x40014800

08009c2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009c70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	041b      	lsls	r3, r3, #16
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a17      	ldr	r2, [pc, #92]	; (8009ce0 <TIM_OC5_SetConfig+0xb4>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d00f      	beq.n	8009ca6 <TIM_OC5_SetConfig+0x7a>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a16      	ldr	r2, [pc, #88]	; (8009ce4 <TIM_OC5_SetConfig+0xb8>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00b      	beq.n	8009ca6 <TIM_OC5_SetConfig+0x7a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a15      	ldr	r2, [pc, #84]	; (8009ce8 <TIM_OC5_SetConfig+0xbc>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d007      	beq.n	8009ca6 <TIM_OC5_SetConfig+0x7a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a14      	ldr	r2, [pc, #80]	; (8009cec <TIM_OC5_SetConfig+0xc0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d003      	beq.n	8009ca6 <TIM_OC5_SetConfig+0x7a>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a13      	ldr	r2, [pc, #76]	; (8009cf0 <TIM_OC5_SetConfig+0xc4>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d109      	bne.n	8009cba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	621a      	str	r2, [r3, #32]
}
 8009cd4:	bf00      	nop
 8009cd6:	371c      	adds	r7, #28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	40012c00 	.word	0x40012c00
 8009ce4:	40013400 	.word	0x40013400
 8009ce8:	40014000 	.word	0x40014000
 8009cec:	40014400 	.word	0x40014400
 8009cf0:	40014800 	.word	0x40014800

08009cf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	051b      	lsls	r3, r3, #20
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a18      	ldr	r2, [pc, #96]	; (8009dac <TIM_OC6_SetConfig+0xb8>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00f      	beq.n	8009d70 <TIM_OC6_SetConfig+0x7c>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a17      	ldr	r2, [pc, #92]	; (8009db0 <TIM_OC6_SetConfig+0xbc>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00b      	beq.n	8009d70 <TIM_OC6_SetConfig+0x7c>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a16      	ldr	r2, [pc, #88]	; (8009db4 <TIM_OC6_SetConfig+0xc0>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d007      	beq.n	8009d70 <TIM_OC6_SetConfig+0x7c>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <TIM_OC6_SetConfig+0xc4>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d003      	beq.n	8009d70 <TIM_OC6_SetConfig+0x7c>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a14      	ldr	r2, [pc, #80]	; (8009dbc <TIM_OC6_SetConfig+0xc8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d109      	bne.n	8009d84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	029b      	lsls	r3, r3, #10
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685a      	ldr	r2, [r3, #4]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	621a      	str	r2, [r3, #32]
}
 8009d9e:	bf00      	nop
 8009da0:	371c      	adds	r7, #28
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	40012c00 	.word	0x40012c00
 8009db0:	40013400 	.word	0x40013400
 8009db4:	40014000 	.word	0x40014000
 8009db8:	40014400 	.word	0x40014400
 8009dbc:	40014800 	.word	0x40014800

08009dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f003 031f 	and.w	r3, r3, #31
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1a      	ldr	r2, [r3, #32]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	43db      	mvns	r3, r3
 8009de2:	401a      	ands	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a1a      	ldr	r2, [r3, #32]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f003 031f 	and.w	r3, r3, #31
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	fa01 f303 	lsl.w	r3, r1, r3
 8009df8:	431a      	orrs	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
	...

08009e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e20:	2302      	movs	r3, #2
 8009e22:	e068      	b.n	8009ef6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a2e      	ldr	r2, [pc, #184]	; (8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d004      	beq.n	8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a2d      	ldr	r2, [pc, #180]	; (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d108      	bne.n	8009e6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a1e      	ldr	r2, [pc, #120]	; (8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d01d      	beq.n	8009eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e96:	d018      	beq.n	8009eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a1b      	ldr	r2, [pc, #108]	; (8009f0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d013      	beq.n	8009eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a1a      	ldr	r2, [pc, #104]	; (8009f10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d00e      	beq.n	8009eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a18      	ldr	r2, [pc, #96]	; (8009f14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d009      	beq.n	8009eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a13      	ldr	r2, [pc, #76]	; (8009f08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d004      	beq.n	8009eca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a14      	ldr	r2, [pc, #80]	; (8009f18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d10c      	bne.n	8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40012c00 	.word	0x40012c00
 8009f08:	40013400 	.word	0x40013400
 8009f0c:	40000400 	.word	0x40000400
 8009f10:	40000800 	.word	0x40000800
 8009f14:	40000c00 	.word	0x40000c00
 8009f18:	40014000 	.word	0x40014000

08009f1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d101      	bne.n	8009f38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f34:	2302      	movs	r3, #2
 8009f36:	e065      	b.n	800a004 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	041b      	lsls	r3, r3, #16
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a16      	ldr	r2, [pc, #88]	; (800a010 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d004      	beq.n	8009fc6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a14      	ldr	r2, [pc, #80]	; (800a014 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d115      	bne.n	8009ff2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd0:	051b      	lsls	r3, r3, #20
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	40012c00 	.word	0x40012c00
 800a014:	40013400 	.word	0x40013400

0800a018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e040      	b.n	800a0e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7f9 fcd4 	bl	8003a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2224      	movs	r2, #36	; 0x24
 800a080:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f8c0 	bl	800a218 <UART_SetConfig>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d101      	bne.n	800a0a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e022      	b.n	800a0e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fb3e 	bl	800a72c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0201 	orr.w	r2, r2, #1
 800a0de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fbc5 	bl	800a870 <UART_CheckIdleState>
 800a0e6:	4603      	mov	r3, r0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08a      	sub	sp, #40	; 0x28
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a104:	2b20      	cmp	r3, #32
 800a106:	f040 8082 	bne.w	800a20e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <HAL_UART_Transmit+0x26>
 800a110:	88fb      	ldrh	r3, [r7, #6]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e07a      	b.n	800a210 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a120:	2b01      	cmp	r3, #1
 800a122:	d101      	bne.n	800a128 <HAL_UART_Transmit+0x38>
 800a124:	2302      	movs	r3, #2
 800a126:	e073      	b.n	800a210 <HAL_UART_Transmit+0x120>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2221      	movs	r2, #33	; 0x21
 800a13c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a13e:	f7fa f89f 	bl	8004280 <HAL_GetTick>
 800a142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	88fa      	ldrh	r2, [r7, #6]
 800a148:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	88fa      	ldrh	r2, [r7, #6]
 800a150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a15c:	d108      	bne.n	800a170 <HAL_UART_Transmit+0x80>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d104      	bne.n	800a170 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a166:	2300      	movs	r3, #0
 800a168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	61bb      	str	r3, [r7, #24]
 800a16e:	e003      	b.n	800a178 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a180:	e02d      	b.n	800a1de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	2200      	movs	r2, #0
 800a18a:	2180      	movs	r1, #128	; 0x80
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 fbb8 	bl	800a902 <UART_WaitOnFlagUntilTimeout>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d001      	beq.n	800a19c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e039      	b.n	800a210 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10b      	bne.n	800a1ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	881a      	ldrh	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1ae:	b292      	uxth	r2, r2
 800a1b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	3302      	adds	r3, #2
 800a1b6:	61bb      	str	r3, [r7, #24]
 800a1b8:	e008      	b.n	800a1cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	781a      	ldrb	r2, [r3, #0]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1cb      	bne.n	800a182 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2140      	movs	r1, #64	; 0x40
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f000 fb84 	bl	800a902 <UART_WaitOnFlagUntilTimeout>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e005      	b.n	800a210 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2220      	movs	r2, #32
 800a208:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	e000      	b.n	800a210 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a20e:	2302      	movs	r3, #2
  }
}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a218:	b5b0      	push	{r4, r5, r7, lr}
 800a21a:	b088      	sub	sp, #32
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	4313      	orrs	r3, r2
 800a23a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4bad      	ldr	r3, [pc, #692]	; (800a4f8 <UART_SetConfig+0x2e0>)
 800a244:	4013      	ands	r3, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6812      	ldr	r2, [r2, #0]
 800a24a:	69f9      	ldr	r1, [r7, #28]
 800a24c:	430b      	orrs	r3, r1
 800a24e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4aa2      	ldr	r2, [pc, #648]	; (800a4fc <UART_SetConfig+0x2e4>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d004      	beq.n	800a280 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	69fa      	ldr	r2, [r7, #28]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	430a      	orrs	r2, r1
 800a292:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a99      	ldr	r2, [pc, #612]	; (800a500 <UART_SetConfig+0x2e8>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d121      	bne.n	800a2e2 <UART_SetConfig+0xca>
 800a29e:	4b99      	ldr	r3, [pc, #612]	; (800a504 <UART_SetConfig+0x2ec>)
 800a2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a4:	f003 0303 	and.w	r3, r3, #3
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d817      	bhi.n	800a2dc <UART_SetConfig+0xc4>
 800a2ac:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <UART_SetConfig+0x9c>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a2c5 	.word	0x0800a2c5
 800a2b8:	0800a2d1 	.word	0x0800a2d1
 800a2bc:	0800a2cb 	.word	0x0800a2cb
 800a2c0:	0800a2d7 	.word	0x0800a2d7
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	76fb      	strb	r3, [r7, #27]
 800a2c8:	e0e7      	b.n	800a49a <UART_SetConfig+0x282>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	76fb      	strb	r3, [r7, #27]
 800a2ce:	e0e4      	b.n	800a49a <UART_SetConfig+0x282>
 800a2d0:	2304      	movs	r3, #4
 800a2d2:	76fb      	strb	r3, [r7, #27]
 800a2d4:	e0e1      	b.n	800a49a <UART_SetConfig+0x282>
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	76fb      	strb	r3, [r7, #27]
 800a2da:	e0de      	b.n	800a49a <UART_SetConfig+0x282>
 800a2dc:	2310      	movs	r3, #16
 800a2de:	76fb      	strb	r3, [r7, #27]
 800a2e0:	e0db      	b.n	800a49a <UART_SetConfig+0x282>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a88      	ldr	r2, [pc, #544]	; (800a508 <UART_SetConfig+0x2f0>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d132      	bne.n	800a352 <UART_SetConfig+0x13a>
 800a2ec:	4b85      	ldr	r3, [pc, #532]	; (800a504 <UART_SetConfig+0x2ec>)
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	f003 030c 	and.w	r3, r3, #12
 800a2f6:	2b0c      	cmp	r3, #12
 800a2f8:	d828      	bhi.n	800a34c <UART_SetConfig+0x134>
 800a2fa:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <UART_SetConfig+0xe8>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a335 	.word	0x0800a335
 800a304:	0800a34d 	.word	0x0800a34d
 800a308:	0800a34d 	.word	0x0800a34d
 800a30c:	0800a34d 	.word	0x0800a34d
 800a310:	0800a341 	.word	0x0800a341
 800a314:	0800a34d 	.word	0x0800a34d
 800a318:	0800a34d 	.word	0x0800a34d
 800a31c:	0800a34d 	.word	0x0800a34d
 800a320:	0800a33b 	.word	0x0800a33b
 800a324:	0800a34d 	.word	0x0800a34d
 800a328:	0800a34d 	.word	0x0800a34d
 800a32c:	0800a34d 	.word	0x0800a34d
 800a330:	0800a347 	.word	0x0800a347
 800a334:	2300      	movs	r3, #0
 800a336:	76fb      	strb	r3, [r7, #27]
 800a338:	e0af      	b.n	800a49a <UART_SetConfig+0x282>
 800a33a:	2302      	movs	r3, #2
 800a33c:	76fb      	strb	r3, [r7, #27]
 800a33e:	e0ac      	b.n	800a49a <UART_SetConfig+0x282>
 800a340:	2304      	movs	r3, #4
 800a342:	76fb      	strb	r3, [r7, #27]
 800a344:	e0a9      	b.n	800a49a <UART_SetConfig+0x282>
 800a346:	2308      	movs	r3, #8
 800a348:	76fb      	strb	r3, [r7, #27]
 800a34a:	e0a6      	b.n	800a49a <UART_SetConfig+0x282>
 800a34c:	2310      	movs	r3, #16
 800a34e:	76fb      	strb	r3, [r7, #27]
 800a350:	e0a3      	b.n	800a49a <UART_SetConfig+0x282>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a6d      	ldr	r2, [pc, #436]	; (800a50c <UART_SetConfig+0x2f4>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d120      	bne.n	800a39e <UART_SetConfig+0x186>
 800a35c:	4b69      	ldr	r3, [pc, #420]	; (800a504 <UART_SetConfig+0x2ec>)
 800a35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a362:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a366:	2b30      	cmp	r3, #48	; 0x30
 800a368:	d013      	beq.n	800a392 <UART_SetConfig+0x17a>
 800a36a:	2b30      	cmp	r3, #48	; 0x30
 800a36c:	d814      	bhi.n	800a398 <UART_SetConfig+0x180>
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d009      	beq.n	800a386 <UART_SetConfig+0x16e>
 800a372:	2b20      	cmp	r3, #32
 800a374:	d810      	bhi.n	800a398 <UART_SetConfig+0x180>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <UART_SetConfig+0x168>
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d006      	beq.n	800a38c <UART_SetConfig+0x174>
 800a37e:	e00b      	b.n	800a398 <UART_SetConfig+0x180>
 800a380:	2300      	movs	r3, #0
 800a382:	76fb      	strb	r3, [r7, #27]
 800a384:	e089      	b.n	800a49a <UART_SetConfig+0x282>
 800a386:	2302      	movs	r3, #2
 800a388:	76fb      	strb	r3, [r7, #27]
 800a38a:	e086      	b.n	800a49a <UART_SetConfig+0x282>
 800a38c:	2304      	movs	r3, #4
 800a38e:	76fb      	strb	r3, [r7, #27]
 800a390:	e083      	b.n	800a49a <UART_SetConfig+0x282>
 800a392:	2308      	movs	r3, #8
 800a394:	76fb      	strb	r3, [r7, #27]
 800a396:	e080      	b.n	800a49a <UART_SetConfig+0x282>
 800a398:	2310      	movs	r3, #16
 800a39a:	76fb      	strb	r3, [r7, #27]
 800a39c:	e07d      	b.n	800a49a <UART_SetConfig+0x282>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a5b      	ldr	r2, [pc, #364]	; (800a510 <UART_SetConfig+0x2f8>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d120      	bne.n	800a3ea <UART_SetConfig+0x1d2>
 800a3a8:	4b56      	ldr	r3, [pc, #344]	; (800a504 <UART_SetConfig+0x2ec>)
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a3b4:	d013      	beq.n	800a3de <UART_SetConfig+0x1c6>
 800a3b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a3b8:	d814      	bhi.n	800a3e4 <UART_SetConfig+0x1cc>
 800a3ba:	2b80      	cmp	r3, #128	; 0x80
 800a3bc:	d009      	beq.n	800a3d2 <UART_SetConfig+0x1ba>
 800a3be:	2b80      	cmp	r3, #128	; 0x80
 800a3c0:	d810      	bhi.n	800a3e4 <UART_SetConfig+0x1cc>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <UART_SetConfig+0x1b4>
 800a3c6:	2b40      	cmp	r3, #64	; 0x40
 800a3c8:	d006      	beq.n	800a3d8 <UART_SetConfig+0x1c0>
 800a3ca:	e00b      	b.n	800a3e4 <UART_SetConfig+0x1cc>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	76fb      	strb	r3, [r7, #27]
 800a3d0:	e063      	b.n	800a49a <UART_SetConfig+0x282>
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	76fb      	strb	r3, [r7, #27]
 800a3d6:	e060      	b.n	800a49a <UART_SetConfig+0x282>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	76fb      	strb	r3, [r7, #27]
 800a3dc:	e05d      	b.n	800a49a <UART_SetConfig+0x282>
 800a3de:	2308      	movs	r3, #8
 800a3e0:	76fb      	strb	r3, [r7, #27]
 800a3e2:	e05a      	b.n	800a49a <UART_SetConfig+0x282>
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	76fb      	strb	r3, [r7, #27]
 800a3e8:	e057      	b.n	800a49a <UART_SetConfig+0x282>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a49      	ldr	r2, [pc, #292]	; (800a514 <UART_SetConfig+0x2fc>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d125      	bne.n	800a440 <UART_SetConfig+0x228>
 800a3f4:	4b43      	ldr	r3, [pc, #268]	; (800a504 <UART_SetConfig+0x2ec>)
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a402:	d017      	beq.n	800a434 <UART_SetConfig+0x21c>
 800a404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a408:	d817      	bhi.n	800a43a <UART_SetConfig+0x222>
 800a40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40e:	d00b      	beq.n	800a428 <UART_SetConfig+0x210>
 800a410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a414:	d811      	bhi.n	800a43a <UART_SetConfig+0x222>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <UART_SetConfig+0x20a>
 800a41a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a41e:	d006      	beq.n	800a42e <UART_SetConfig+0x216>
 800a420:	e00b      	b.n	800a43a <UART_SetConfig+0x222>
 800a422:	2300      	movs	r3, #0
 800a424:	76fb      	strb	r3, [r7, #27]
 800a426:	e038      	b.n	800a49a <UART_SetConfig+0x282>
 800a428:	2302      	movs	r3, #2
 800a42a:	76fb      	strb	r3, [r7, #27]
 800a42c:	e035      	b.n	800a49a <UART_SetConfig+0x282>
 800a42e:	2304      	movs	r3, #4
 800a430:	76fb      	strb	r3, [r7, #27]
 800a432:	e032      	b.n	800a49a <UART_SetConfig+0x282>
 800a434:	2308      	movs	r3, #8
 800a436:	76fb      	strb	r3, [r7, #27]
 800a438:	e02f      	b.n	800a49a <UART_SetConfig+0x282>
 800a43a:	2310      	movs	r3, #16
 800a43c:	76fb      	strb	r3, [r7, #27]
 800a43e:	e02c      	b.n	800a49a <UART_SetConfig+0x282>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a2d      	ldr	r2, [pc, #180]	; (800a4fc <UART_SetConfig+0x2e4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d125      	bne.n	800a496 <UART_SetConfig+0x27e>
 800a44a:	4b2e      	ldr	r3, [pc, #184]	; (800a504 <UART_SetConfig+0x2ec>)
 800a44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a458:	d017      	beq.n	800a48a <UART_SetConfig+0x272>
 800a45a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a45e:	d817      	bhi.n	800a490 <UART_SetConfig+0x278>
 800a460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a464:	d00b      	beq.n	800a47e <UART_SetConfig+0x266>
 800a466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a46a:	d811      	bhi.n	800a490 <UART_SetConfig+0x278>
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d003      	beq.n	800a478 <UART_SetConfig+0x260>
 800a470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a474:	d006      	beq.n	800a484 <UART_SetConfig+0x26c>
 800a476:	e00b      	b.n	800a490 <UART_SetConfig+0x278>
 800a478:	2300      	movs	r3, #0
 800a47a:	76fb      	strb	r3, [r7, #27]
 800a47c:	e00d      	b.n	800a49a <UART_SetConfig+0x282>
 800a47e:	2302      	movs	r3, #2
 800a480:	76fb      	strb	r3, [r7, #27]
 800a482:	e00a      	b.n	800a49a <UART_SetConfig+0x282>
 800a484:	2304      	movs	r3, #4
 800a486:	76fb      	strb	r3, [r7, #27]
 800a488:	e007      	b.n	800a49a <UART_SetConfig+0x282>
 800a48a:	2308      	movs	r3, #8
 800a48c:	76fb      	strb	r3, [r7, #27]
 800a48e:	e004      	b.n	800a49a <UART_SetConfig+0x282>
 800a490:	2310      	movs	r3, #16
 800a492:	76fb      	strb	r3, [r7, #27]
 800a494:	e001      	b.n	800a49a <UART_SetConfig+0x282>
 800a496:	2310      	movs	r3, #16
 800a498:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a17      	ldr	r2, [pc, #92]	; (800a4fc <UART_SetConfig+0x2e4>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	f040 8087 	bne.w	800a5b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4a6:	7efb      	ldrb	r3, [r7, #27]
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d837      	bhi.n	800a51c <UART_SetConfig+0x304>
 800a4ac:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <UART_SetConfig+0x29c>)
 800a4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b2:	bf00      	nop
 800a4b4:	0800a4d9 	.word	0x0800a4d9
 800a4b8:	0800a51d 	.word	0x0800a51d
 800a4bc:	0800a4e1 	.word	0x0800a4e1
 800a4c0:	0800a51d 	.word	0x0800a51d
 800a4c4:	0800a4e7 	.word	0x0800a4e7
 800a4c8:	0800a51d 	.word	0x0800a51d
 800a4cc:	0800a51d 	.word	0x0800a51d
 800a4d0:	0800a51d 	.word	0x0800a51d
 800a4d4:	0800a4ef 	.word	0x0800a4ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4d8:	f7fc fc80 	bl	8006ddc <HAL_RCC_GetPCLK1Freq>
 800a4dc:	6178      	str	r0, [r7, #20]
        break;
 800a4de:	e022      	b.n	800a526 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4e0:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <UART_SetConfig+0x300>)
 800a4e2:	617b      	str	r3, [r7, #20]
        break;
 800a4e4:	e01f      	b.n	800a526 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4e6:	f7fc fbe3 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 800a4ea:	6178      	str	r0, [r7, #20]
        break;
 800a4ec:	e01b      	b.n	800a526 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4f2:	617b      	str	r3, [r7, #20]
        break;
 800a4f4:	e017      	b.n	800a526 <UART_SetConfig+0x30e>
 800a4f6:	bf00      	nop
 800a4f8:	efff69f3 	.word	0xefff69f3
 800a4fc:	40008000 	.word	0x40008000
 800a500:	40013800 	.word	0x40013800
 800a504:	40021000 	.word	0x40021000
 800a508:	40004400 	.word	0x40004400
 800a50c:	40004800 	.word	0x40004800
 800a510:	40004c00 	.word	0x40004c00
 800a514:	40005000 	.word	0x40005000
 800a518:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	76bb      	strb	r3, [r7, #26]
        break;
 800a524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 80f1 	beq.w	800a710 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	4613      	mov	r3, r2
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	4413      	add	r3, r2
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d305      	bcc.n	800a54a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	429a      	cmp	r2, r3
 800a548:	d902      	bls.n	800a550 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	76bb      	strb	r3, [r7, #26]
 800a54e:	e0df      	b.n	800a710 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	4618      	mov	r0, r3
 800a554:	f04f 0100 	mov.w	r1, #0
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	f04f 0300 	mov.w	r3, #0
 800a560:	020b      	lsls	r3, r1, #8
 800a562:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a566:	0202      	lsls	r2, r0, #8
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	6849      	ldr	r1, [r1, #4]
 800a56c:	0849      	lsrs	r1, r1, #1
 800a56e:	4608      	mov	r0, r1
 800a570:	f04f 0100 	mov.w	r1, #0
 800a574:	1814      	adds	r4, r2, r0
 800a576:	eb43 0501 	adc.w	r5, r3, r1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	461a      	mov	r2, r3
 800a580:	f04f 0300 	mov.w	r3, #0
 800a584:	4620      	mov	r0, r4
 800a586:	4629      	mov	r1, r5
 800a588:	f7f6 fb68 	bl	8000c5c <__aeabi_uldivmod>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4613      	mov	r3, r2
 800a592:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a59a:	d308      	bcc.n	800a5ae <UART_SetConfig+0x396>
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5a2:	d204      	bcs.n	800a5ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	60da      	str	r2, [r3, #12]
 800a5ac:	e0b0      	b.n	800a710 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	76bb      	strb	r3, [r7, #26]
 800a5b2:	e0ad      	b.n	800a710 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5bc:	d15c      	bne.n	800a678 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a5be:	7efb      	ldrb	r3, [r7, #27]
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d828      	bhi.n	800a616 <UART_SetConfig+0x3fe>
 800a5c4:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <UART_SetConfig+0x3b4>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	0800a617 	.word	0x0800a617
 800a5dc:	0800a607 	.word	0x0800a607
 800a5e0:	0800a617 	.word	0x0800a617
 800a5e4:	0800a617 	.word	0x0800a617
 800a5e8:	0800a617 	.word	0x0800a617
 800a5ec:	0800a60f 	.word	0x0800a60f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f0:	f7fc fbf4 	bl	8006ddc <HAL_RCC_GetPCLK1Freq>
 800a5f4:	6178      	str	r0, [r7, #20]
        break;
 800a5f6:	e013      	b.n	800a620 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5f8:	f7fc fc06 	bl	8006e08 <HAL_RCC_GetPCLK2Freq>
 800a5fc:	6178      	str	r0, [r7, #20]
        break;
 800a5fe:	e00f      	b.n	800a620 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a600:	4b49      	ldr	r3, [pc, #292]	; (800a728 <UART_SetConfig+0x510>)
 800a602:	617b      	str	r3, [r7, #20]
        break;
 800a604:	e00c      	b.n	800a620 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a606:	f7fc fb53 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 800a60a:	6178      	str	r0, [r7, #20]
        break;
 800a60c:	e008      	b.n	800a620 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a612:	617b      	str	r3, [r7, #20]
        break;
 800a614:	e004      	b.n	800a620 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	76bb      	strb	r3, [r7, #26]
        break;
 800a61e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d074      	beq.n	800a710 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	005a      	lsls	r2, r3, #1
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	085b      	lsrs	r3, r3, #1
 800a630:	441a      	add	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	2b0f      	cmp	r3, #15
 800a642:	d916      	bls.n	800a672 <UART_SetConfig+0x45a>
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a64a:	d212      	bcs.n	800a672 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f023 030f 	bic.w	r3, r3, #15
 800a654:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	085b      	lsrs	r3, r3, #1
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	b29a      	uxth	r2, r3
 800a662:	89fb      	ldrh	r3, [r7, #14]
 800a664:	4313      	orrs	r3, r2
 800a666:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	89fa      	ldrh	r2, [r7, #14]
 800a66e:	60da      	str	r2, [r3, #12]
 800a670:	e04e      	b.n	800a710 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	76bb      	strb	r3, [r7, #26]
 800a676:	e04b      	b.n	800a710 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a678:	7efb      	ldrb	r3, [r7, #27]
 800a67a:	2b08      	cmp	r3, #8
 800a67c:	d827      	bhi.n	800a6ce <UART_SetConfig+0x4b6>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <UART_SetConfig+0x46c>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a6a9 	.word	0x0800a6a9
 800a688:	0800a6b1 	.word	0x0800a6b1
 800a68c:	0800a6b9 	.word	0x0800a6b9
 800a690:	0800a6cf 	.word	0x0800a6cf
 800a694:	0800a6bf 	.word	0x0800a6bf
 800a698:	0800a6cf 	.word	0x0800a6cf
 800a69c:	0800a6cf 	.word	0x0800a6cf
 800a6a0:	0800a6cf 	.word	0x0800a6cf
 800a6a4:	0800a6c7 	.word	0x0800a6c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6a8:	f7fc fb98 	bl	8006ddc <HAL_RCC_GetPCLK1Freq>
 800a6ac:	6178      	str	r0, [r7, #20]
        break;
 800a6ae:	e013      	b.n	800a6d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6b0:	f7fc fbaa 	bl	8006e08 <HAL_RCC_GetPCLK2Freq>
 800a6b4:	6178      	str	r0, [r7, #20]
        break;
 800a6b6:	e00f      	b.n	800a6d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6b8:	4b1b      	ldr	r3, [pc, #108]	; (800a728 <UART_SetConfig+0x510>)
 800a6ba:	617b      	str	r3, [r7, #20]
        break;
 800a6bc:	e00c      	b.n	800a6d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6be:	f7fc faf7 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 800a6c2:	6178      	str	r0, [r7, #20]
        break;
 800a6c4:	e008      	b.n	800a6d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ca:	617b      	str	r3, [r7, #20]
        break;
 800a6cc:	e004      	b.n	800a6d8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	76bb      	strb	r3, [r7, #26]
        break;
 800a6d6:	bf00      	nop
    }

    if (pclk != 0U)
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d018      	beq.n	800a710 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	085a      	lsrs	r2, r3, #1
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	441a      	add	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	2b0f      	cmp	r3, #15
 800a6f8:	d908      	bls.n	800a70c <UART_SetConfig+0x4f4>
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a700:	d204      	bcs.n	800a70c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	60da      	str	r2, [r3, #12]
 800a70a:	e001      	b.n	800a710 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a71c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bdb0      	pop	{r4, r5, r7, pc}
 800a726:	bf00      	nop
 800a728:	00f42400 	.word	0x00f42400

0800a72c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00a      	beq.n	800a756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00a      	beq.n	800a79a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79e:	f003 0308 	and.w	r3, r3, #8
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c0:	f003 0310 	and.w	r3, r3, #16
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00a      	beq.n	800a7de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	f003 0320 	and.w	r3, r3, #32
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00a      	beq.n	800a800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	430a      	orrs	r2, r1
 800a7fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d01a      	beq.n	800a842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a82a:	d10a      	bne.n	800a842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	430a      	orrs	r2, r1
 800a840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00a      	beq.n	800a864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	605a      	str	r2, [r3, #4]
  }
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af02      	add	r7, sp, #8
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a880:	f7f9 fcfe 	bl	8004280 <HAL_GetTick>
 800a884:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0308 	and.w	r3, r3, #8
 800a890:	2b08      	cmp	r3, #8
 800a892:	d10e      	bne.n	800a8b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f82d 	bl	800a902 <UART_WaitOnFlagUntilTimeout>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e023      	b.n	800a8fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d10e      	bne.n	800a8de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f817 	bl	800a902 <UART_WaitOnFlagUntilTimeout>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e00d      	b.n	800a8fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	603b      	str	r3, [r7, #0]
 800a90e:	4613      	mov	r3, r2
 800a910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a912:	e05e      	b.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a91a:	d05a      	beq.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a91c:	f7f9 fcb0 	bl	8004280 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d302      	bcc.n	800a932 <UART_WaitOnFlagUntilTimeout+0x30>
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d11b      	bne.n	800a96a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a940:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689a      	ldr	r2, [r3, #8]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f022 0201 	bic.w	r2, r2, #1
 800a950:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2220      	movs	r2, #32
 800a956:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2220      	movs	r2, #32
 800a95c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	e043      	b.n	800a9f2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d02c      	beq.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a986:	d124      	bne.n	800a9d2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a990:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9a0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689a      	ldr	r2, [r3, #8]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0201 	bic.w	r2, r2, #1
 800a9b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e00f      	b.n	800a9f2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69da      	ldr	r2, [r3, #28]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	bf0c      	ite	eq
 800a9e2:	2301      	moveq	r3, #1
 800a9e4:	2300      	movne	r3, #0
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d091      	beq.n	800a914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa00:	4904      	ldr	r1, [pc, #16]	; (800aa14 <MX_FATFS_Init+0x18>)
 800aa02:	4805      	ldr	r0, [pc, #20]	; (800aa18 <MX_FATFS_Init+0x1c>)
 800aa04:	f002 ff6c 	bl	800d8e0 <FATFS_LinkDriver>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <MX_FATFS_Init+0x20>)
 800aa0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa10:	bf00      	nop
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	2000e490 	.word	0x2000e490
 800aa18:	20000148 	.word	0x20000148
 800aa1c:	2000e494 	.word	0x2000e494

0800aa20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa20:	b480      	push	{r7}
 800aa22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7f6 fc3d 	bl	80012bc <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800aa42:	bf00      	nop
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f6 fd15 	bl	8001488 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800aa5e:	bf00      	nop
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 800aa78:	7bf8      	ldrb	r0, [r7, #15]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	68b9      	ldr	r1, [r7, #8]
 800aa80:	f7f6 fd18 	bl	80014b4 <SD_disk_read>
  /* USER CODE END READ */
}
 800aa84:	bf00      	nop
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	603b      	str	r3, [r7, #0]
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 800aa9e:	7bf8      	ldrb	r0, [r7, #15]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	68b9      	ldr	r1, [r7, #8]
 800aaa6:	f7f6 fd6f 	bl	8001588 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800aaaa:	bf00      	nop
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	603a      	str	r2, [r7, #0]
 800aabe:	71fb      	strb	r3, [r7, #7]
 800aac0:	460b      	mov	r3, r1
 800aac2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	79b9      	ldrb	r1, [r7, #6]
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7f6 fde0 	bl	8001690 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800aad0:	bf00      	nop
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
	...

0800aadc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	4a08      	ldr	r2, [pc, #32]	; (800ab0c <disk_status+0x30>)
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	79fa      	ldrb	r2, [r7, #7]
 800aaf4:	4905      	ldr	r1, [pc, #20]	; (800ab0c <disk_status+0x30>)
 800aaf6:	440a      	add	r2, r1
 800aaf8:	7a12      	ldrb	r2, [r2, #8]
 800aafa:	4610      	mov	r0, r2
 800aafc:	4798      	blx	r3
 800aafe:	4603      	mov	r3, r0
 800ab00:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}
 800ab0c:	20000218 	.word	0x20000218

0800ab10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	4a0d      	ldr	r2, [pc, #52]	; (800ab58 <disk_initialize+0x48>)
 800ab22:	5cd3      	ldrb	r3, [r2, r3]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d111      	bne.n	800ab4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	4a0b      	ldr	r2, [pc, #44]	; (800ab58 <disk_initialize+0x48>)
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	4a09      	ldr	r2, [pc, #36]	; (800ab58 <disk_initialize+0x48>)
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	79fa      	ldrb	r2, [r7, #7]
 800ab3e:	4906      	ldr	r1, [pc, #24]	; (800ab58 <disk_initialize+0x48>)
 800ab40:	440a      	add	r2, r1
 800ab42:	7a12      	ldrb	r2, [r2, #8]
 800ab44:	4610      	mov	r0, r2
 800ab46:	4798      	blx	r3
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20000218 	.word	0x20000218

0800ab5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ab5c:	b590      	push	{r4, r7, lr}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	607a      	str	r2, [r7, #4]
 800ab66:	603b      	str	r3, [r7, #0]
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	4a0a      	ldr	r2, [pc, #40]	; (800ab98 <disk_read+0x3c>)
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	689c      	ldr	r4, [r3, #8]
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
 800ab7a:	4a07      	ldr	r2, [pc, #28]	; (800ab98 <disk_read+0x3c>)
 800ab7c:	4413      	add	r3, r2
 800ab7e:	7a18      	ldrb	r0, [r3, #8]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	68b9      	ldr	r1, [r7, #8]
 800ab86:	47a0      	blx	r4
 800ab88:	4603      	mov	r3, r0
 800ab8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	371c      	adds	r7, #28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd90      	pop	{r4, r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000218 	.word	0x20000218

0800ab9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ab9c:	b590      	push	{r4, r7, lr}
 800ab9e:	b087      	sub	sp, #28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	4a0a      	ldr	r2, [pc, #40]	; (800abd8 <disk_write+0x3c>)
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	68dc      	ldr	r4, [r3, #12]
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4a07      	ldr	r2, [pc, #28]	; (800abd8 <disk_write+0x3c>)
 800abbc:	4413      	add	r3, r2
 800abbe:	7a18      	ldrb	r0, [r3, #8]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	68b9      	ldr	r1, [r7, #8]
 800abc6:	47a0      	blx	r4
 800abc8:	4603      	mov	r3, r0
 800abca:	75fb      	strb	r3, [r7, #23]
  return res;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	371c      	adds	r7, #28
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd90      	pop	{r4, r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000218 	.word	0x20000218

0800abdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	603a      	str	r2, [r7, #0]
 800abe6:	71fb      	strb	r3, [r7, #7]
 800abe8:	460b      	mov	r3, r1
 800abea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	4a09      	ldr	r2, [pc, #36]	; (800ac14 <disk_ioctl+0x38>)
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	79fa      	ldrb	r2, [r7, #7]
 800abfa:	4906      	ldr	r1, [pc, #24]	; (800ac14 <disk_ioctl+0x38>)
 800abfc:	440a      	add	r2, r1
 800abfe:	7a10      	ldrb	r0, [r2, #8]
 800ac00:	79b9      	ldrb	r1, [r7, #6]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	4798      	blx	r3
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000218 	.word	0x20000218

0800ac18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3301      	adds	r3, #1
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac28:	89fb      	ldrh	r3, [r7, #14]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	b21a      	sxth	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	b21b      	sxth	r3, r3
 800ac34:	4313      	orrs	r3, r2
 800ac36:	b21b      	sxth	r3, r3
 800ac38:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3303      	adds	r3, #3
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	3202      	adds	r2, #2
 800ac60:	7812      	ldrb	r2, [r2, #0]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	021b      	lsls	r3, r3, #8
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	3201      	adds	r2, #1
 800ac6e:	7812      	ldrb	r2, [r2, #0]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	021b      	lsls	r3, r3, #8
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	7812      	ldrb	r2, [r2, #0]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b083      	sub	sp, #12
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	460b      	mov	r3, r1
 800ac98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	1c5a      	adds	r2, r3, #1
 800ac9e:	607a      	str	r2, [r7, #4]
 800aca0:	887a      	ldrh	r2, [r7, #2]
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	701a      	strb	r2, [r3, #0]
 800aca6:	887b      	ldrh	r3, [r7, #2]
 800aca8:	0a1b      	lsrs	r3, r3, #8
 800acaa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	607a      	str	r2, [r7, #4]
 800acb2:	887a      	ldrh	r2, [r7, #2]
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	701a      	strb	r2, [r3, #0]
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	b2d2      	uxtb	r2, r2
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	0a1b      	lsrs	r3, r3, #8
 800acde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	607a      	str	r2, [r7, #4]
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	b2d2      	uxtb	r2, r2
 800acea:	701a      	strb	r2, [r3, #0]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	0a1b      	lsrs	r3, r3, #8
 800acf0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	b2d2      	uxtb	r2, r2
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	0a1b      	lsrs	r3, r3, #8
 800ad02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	607a      	str	r2, [r7, #4]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	b2d2      	uxtb	r2, r2
 800ad0e:	701a      	strb	r2, [r3, #0]
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad1c:	b480      	push	{r7}
 800ad1e:	b087      	sub	sp, #28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00d      	beq.n	800ad52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	1c53      	adds	r3, r2, #1
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	1c59      	adds	r1, r3, #1
 800ad40:	6179      	str	r1, [r7, #20]
 800ad42:	7812      	ldrb	r2, [r2, #0]
 800ad44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	607b      	str	r3, [r7, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1f1      	bne.n	800ad36 <mem_cpy+0x1a>
	}
}
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad5e:	b480      	push	{r7}
 800ad60:	b087      	sub	sp, #28
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	1c5a      	adds	r2, r3, #1
 800ad72:	617a      	str	r2, [r7, #20]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1f3      	bne.n	800ad6e <mem_set+0x10>
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	371c      	adds	r7, #28
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ad94:	b480      	push	{r7}
 800ad96:	b089      	sub	sp, #36	; 0x24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	61fa      	str	r2, [r7, #28]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	4619      	mov	r1, r3
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	61ba      	str	r2, [r7, #24]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	1acb      	subs	r3, r1, r3
 800adc0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	607b      	str	r3, [r7, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <mem_cmp+0x40>
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0eb      	beq.n	800adac <mem_cmp+0x18>

	return r;
 800add4:	697b      	ldr	r3, [r7, #20]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3724      	adds	r7, #36	; 0x24
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800adec:	e002      	b.n	800adf4 <chk_chr+0x12>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	3301      	adds	r3, #1
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d005      	beq.n	800ae08 <chk_chr+0x26>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	461a      	mov	r2, r3
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d1f2      	bne.n	800adee <chk_chr+0xc>
	return *str;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <lock_fs+0x22>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f002 fe55 	bl	800dada <ff_req_grant>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <lock_fs+0x22>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <lock_fs+0x24>
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00d      	beq.n	800ae72 <unlock_fs+0x2e>
 800ae56:	78fb      	ldrb	r3, [r7, #3]
 800ae58:	2b0c      	cmp	r3, #12
 800ae5a:	d00a      	beq.n	800ae72 <unlock_fs+0x2e>
 800ae5c:	78fb      	ldrb	r3, [r7, #3]
 800ae5e:	2b0b      	cmp	r3, #11
 800ae60:	d007      	beq.n	800ae72 <unlock_fs+0x2e>
 800ae62:	78fb      	ldrb	r3, [r7, #3]
 800ae64:	2b0f      	cmp	r3, #15
 800ae66:	d004      	beq.n	800ae72 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f002 fe49 	bl	800db04 <ff_rel_grant>
	}
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae86:	2300      	movs	r3, #0
 800ae88:	60bb      	str	r3, [r7, #8]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	e029      	b.n	800aee4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae90:	4a27      	ldr	r2, [pc, #156]	; (800af30 <chk_lock+0xb4>)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	011b      	lsls	r3, r3, #4
 800ae96:	4413      	add	r3, r2
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d01d      	beq.n	800aeda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae9e:	4a24      	ldr	r2, [pc, #144]	; (800af30 <chk_lock+0xb4>)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	011b      	lsls	r3, r3, #4
 800aea4:	4413      	add	r3, r2
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d116      	bne.n	800aede <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aeb0:	4a1f      	ldr	r2, [pc, #124]	; (800af30 <chk_lock+0xb4>)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	011b      	lsls	r3, r3, #4
 800aeb6:	4413      	add	r3, r2
 800aeb8:	3304      	adds	r3, #4
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d10c      	bne.n	800aede <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aec4:	4a1a      	ldr	r2, [pc, #104]	; (800af30 <chk_lock+0xb4>)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	011b      	lsls	r3, r3, #4
 800aeca:	4413      	add	r3, r2
 800aecc:	3308      	adds	r3, #8
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d102      	bne.n	800aede <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aed8:	e007      	b.n	800aeea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aeda:	2301      	movs	r3, #1
 800aedc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3301      	adds	r3, #1
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d9d2      	bls.n	800ae90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d109      	bne.n	800af04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d102      	bne.n	800aefc <chk_lock+0x80>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d101      	bne.n	800af00 <chk_lock+0x84>
 800aefc:	2300      	movs	r3, #0
 800aefe:	e010      	b.n	800af22 <chk_lock+0xa6>
 800af00:	2312      	movs	r3, #18
 800af02:	e00e      	b.n	800af22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d108      	bne.n	800af1c <chk_lock+0xa0>
 800af0a:	4a09      	ldr	r2, [pc, #36]	; (800af30 <chk_lock+0xb4>)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	4413      	add	r3, r2
 800af12:	330c      	adds	r3, #12
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af1a:	d101      	bne.n	800af20 <chk_lock+0xa4>
 800af1c:	2310      	movs	r3, #16
 800af1e:	e000      	b.n	800af22 <chk_lock+0xa6>
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	200001f8 	.word	0x200001f8

0800af34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af3a:	2300      	movs	r3, #0
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	e002      	b.n	800af46 <enq_lock+0x12>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3301      	adds	r3, #1
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d806      	bhi.n	800af5a <enq_lock+0x26>
 800af4c:	4a09      	ldr	r2, [pc, #36]	; (800af74 <enq_lock+0x40>)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	4413      	add	r3, r2
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1f2      	bne.n	800af40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	bf14      	ite	ne
 800af60:	2301      	movne	r3, #1
 800af62:	2300      	moveq	r3, #0
 800af64:	b2db      	uxtb	r3, r3
}
 800af66:	4618      	mov	r0, r3
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	200001f8 	.word	0x200001f8

0800af78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	e01f      	b.n	800afc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af88:	4a41      	ldr	r2, [pc, #260]	; (800b090 <inc_lock+0x118>)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	4413      	add	r3, r2
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d113      	bne.n	800afc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af9a:	4a3d      	ldr	r2, [pc, #244]	; (800b090 <inc_lock+0x118>)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	4413      	add	r3, r2
 800afa2:	3304      	adds	r3, #4
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afaa:	429a      	cmp	r2, r3
 800afac:	d109      	bne.n	800afc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afae:	4a38      	ldr	r2, [pc, #224]	; (800b090 <inc_lock+0x118>)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	4413      	add	r3, r2
 800afb6:	3308      	adds	r3, #8
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d006      	beq.n	800afd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3301      	adds	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d9dc      	bls.n	800af88 <inc_lock+0x10>
 800afce:	e000      	b.n	800afd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d132      	bne.n	800b03e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	e002      	b.n	800afe4 <inc_lock+0x6c>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3301      	adds	r3, #1
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d806      	bhi.n	800aff8 <inc_lock+0x80>
 800afea:	4a29      	ldr	r2, [pc, #164]	; (800b090 <inc_lock+0x118>)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	011b      	lsls	r3, r3, #4
 800aff0:	4413      	add	r3, r2
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1f2      	bne.n	800afde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b02      	cmp	r3, #2
 800affc:	d101      	bne.n	800b002 <inc_lock+0x8a>
 800affe:	2300      	movs	r3, #0
 800b000:	e040      	b.n	800b084 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	4922      	ldr	r1, [pc, #136]	; (800b090 <inc_lock+0x118>)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	440b      	add	r3, r1
 800b00e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689a      	ldr	r2, [r3, #8]
 800b014:	491e      	ldr	r1, [pc, #120]	; (800b090 <inc_lock+0x118>)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	440b      	add	r3, r1
 800b01c:	3304      	adds	r3, #4
 800b01e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	695a      	ldr	r2, [r3, #20]
 800b024:	491a      	ldr	r1, [pc, #104]	; (800b090 <inc_lock+0x118>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	011b      	lsls	r3, r3, #4
 800b02a:	440b      	add	r3, r1
 800b02c:	3308      	adds	r3, #8
 800b02e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b030:	4a17      	ldr	r2, [pc, #92]	; (800b090 <inc_lock+0x118>)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	011b      	lsls	r3, r3, #4
 800b036:	4413      	add	r3, r2
 800b038:	330c      	adds	r3, #12
 800b03a:	2200      	movs	r2, #0
 800b03c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d009      	beq.n	800b058 <inc_lock+0xe0>
 800b044:	4a12      	ldr	r2, [pc, #72]	; (800b090 <inc_lock+0x118>)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	011b      	lsls	r3, r3, #4
 800b04a:	4413      	add	r3, r2
 800b04c:	330c      	adds	r3, #12
 800b04e:	881b      	ldrh	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <inc_lock+0xe0>
 800b054:	2300      	movs	r3, #0
 800b056:	e015      	b.n	800b084 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d108      	bne.n	800b070 <inc_lock+0xf8>
 800b05e:	4a0c      	ldr	r2, [pc, #48]	; (800b090 <inc_lock+0x118>)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	4413      	add	r3, r2
 800b066:	330c      	adds	r3, #12
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	3301      	adds	r3, #1
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	e001      	b.n	800b074 <inc_lock+0xfc>
 800b070:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b074:	4906      	ldr	r1, [pc, #24]	; (800b090 <inc_lock+0x118>)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	011b      	lsls	r3, r3, #4
 800b07a:	440b      	add	r3, r1
 800b07c:	330c      	adds	r3, #12
 800b07e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	3301      	adds	r3, #1
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	200001f8 	.word	0x200001f8

0800b094 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	607b      	str	r3, [r7, #4]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d825      	bhi.n	800b0f4 <dec_lock+0x60>
		n = Files[i].ctr;
 800b0a8:	4a17      	ldr	r2, [pc, #92]	; (800b108 <dec_lock+0x74>)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	4413      	add	r3, r2
 800b0b0:	330c      	adds	r3, #12
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0b6:	89fb      	ldrh	r3, [r7, #14]
 800b0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0bc:	d101      	bne.n	800b0c2 <dec_lock+0x2e>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0c2:	89fb      	ldrh	r3, [r7, #14]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <dec_lock+0x3a>
 800b0c8:	89fb      	ldrh	r3, [r7, #14]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0ce:	4a0e      	ldr	r2, [pc, #56]	; (800b108 <dec_lock+0x74>)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	011b      	lsls	r3, r3, #4
 800b0d4:	4413      	add	r3, r2
 800b0d6:	330c      	adds	r3, #12
 800b0d8:	89fa      	ldrh	r2, [r7, #14]
 800b0da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0dc:	89fb      	ldrh	r3, [r7, #14]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d105      	bne.n	800b0ee <dec_lock+0x5a>
 800b0e2:	4a09      	ldr	r2, [pc, #36]	; (800b108 <dec_lock+0x74>)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	011b      	lsls	r3, r3, #4
 800b0e8:	4413      	add	r3, r2
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	737b      	strb	r3, [r7, #13]
 800b0f2:	e001      	b.n	800b0f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b0f8:	7b7b      	ldrb	r3, [r7, #13]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	200001f8 	.word	0x200001f8

0800b10c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	e010      	b.n	800b13c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b11a:	4a0d      	ldr	r2, [pc, #52]	; (800b150 <clear_lock+0x44>)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	4413      	add	r3, r2
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	429a      	cmp	r2, r3
 800b128:	d105      	bne.n	800b136 <clear_lock+0x2a>
 800b12a:	4a09      	ldr	r2, [pc, #36]	; (800b150 <clear_lock+0x44>)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	011b      	lsls	r3, r3, #4
 800b130:	4413      	add	r3, r2
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d9eb      	bls.n	800b11a <clear_lock+0xe>
	}
}
 800b142:	bf00      	nop
 800b144:	bf00      	nop
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	200001f8 	.word	0x200001f8

0800b154 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	78db      	ldrb	r3, [r3, #3]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d034      	beq.n	800b1d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7858      	ldrb	r0, [r3, #1]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b178:	2301      	movs	r3, #1
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	f7ff fd0e 	bl	800ab9c <disk_write>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b186:	2301      	movs	r3, #1
 800b188:	73fb      	strb	r3, [r7, #15]
 800b18a:	e022      	b.n	800b1d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	1ad2      	subs	r2, r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d217      	bcs.n	800b1d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	789b      	ldrb	r3, [r3, #2]
 800b1a6:	613b      	str	r3, [r7, #16]
 800b1a8:	e010      	b.n	800b1cc <sync_window+0x78>
					wsect += fs->fsize;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7858      	ldrb	r0, [r3, #1]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b1be:	2301      	movs	r3, #1
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	f7ff fceb 	bl	800ab9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	613b      	str	r3, [r7, #16]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d8eb      	bhi.n	800b1aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d01b      	beq.n	800b22c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff ffad 	bl	800b154 <sync_window>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d113      	bne.n	800b22c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	7858      	ldrb	r0, [r3, #1]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b20e:	2301      	movs	r3, #1
 800b210:	683a      	ldr	r2, [r7, #0]
 800b212:	f7ff fca3 	bl	800ab5c <disk_read>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b21c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b220:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b222:	2301      	movs	r3, #1
 800b224:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff ff87 	bl	800b154 <sync_window>
 800b246:	4603      	mov	r3, r0
 800b248:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d159      	bne.n	800b304 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	2b03      	cmp	r3, #3
 800b256:	d149      	bne.n	800b2ec <sync_fs+0xb4>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	791b      	ldrb	r3, [r3, #4]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d145      	bne.n	800b2ec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	899b      	ldrh	r3, [r3, #12]
 800b26a:	461a      	mov	r2, r3
 800b26c:	2100      	movs	r1, #0
 800b26e:	f7ff fd76 	bl	800ad5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	333c      	adds	r3, #60	; 0x3c
 800b276:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b27a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b27e:	4618      	mov	r0, r3
 800b280:	f7ff fd05 	bl	800ac8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	333c      	adds	r3, #60	; 0x3c
 800b288:	4921      	ldr	r1, [pc, #132]	; (800b310 <sync_fs+0xd8>)
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fd1a 	bl	800acc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	333c      	adds	r3, #60	; 0x3c
 800b294:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b298:	491e      	ldr	r1, [pc, #120]	; (800b314 <sync_fs+0xdc>)
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff fd12 	bl	800acc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	333c      	adds	r3, #60	; 0x3c
 800b2a4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	f7ff fd08 	bl	800acc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	333c      	adds	r3, #60	; 0x3c
 800b2b8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	f7ff fcfe 	bl	800acc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	7858      	ldrb	r0, [r3, #1]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f7ff fc5b 	bl	800ab9c <disk_write>
			fs->fsi_flag = 0;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	785b      	ldrb	r3, [r3, #1]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fc71 	bl	800abdc <disk_ioctl>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <sync_fs+0xcc>
 800b300:	2301      	movs	r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	41615252 	.word	0x41615252
 800b314:	61417272 	.word	0x61417272

0800b318 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	3b02      	subs	r3, #2
 800b326:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a1b      	ldr	r3, [r3, #32]
 800b32c:	3b02      	subs	r3, #2
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d301      	bcc.n	800b338 <clust2sect+0x20>
 800b334:	2300      	movs	r3, #0
 800b336:	e008      	b.n	800b34a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	895b      	ldrh	r3, [r3, #10]
 800b33c:	461a      	mov	r2, r3
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	fb03 f202 	mul.w	r2, r3, r2
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b348:	4413      	add	r3, r2
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b086      	sub	sp, #24
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d904      	bls.n	800b376 <get_fat+0x20>
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d302      	bcc.n	800b37c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b376:	2301      	movs	r3, #1
 800b378:	617b      	str	r3, [r7, #20]
 800b37a:	e0bb      	b.n	800b4f4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b37c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b380:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b03      	cmp	r3, #3
 800b388:	f000 8083 	beq.w	800b492 <get_fat+0x13c>
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	f300 80a7 	bgt.w	800b4e0 <get_fat+0x18a>
 800b392:	2b01      	cmp	r3, #1
 800b394:	d002      	beq.n	800b39c <get_fat+0x46>
 800b396:	2b02      	cmp	r3, #2
 800b398:	d056      	beq.n	800b448 <get_fat+0xf2>
 800b39a:	e0a1      	b.n	800b4e0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	085b      	lsrs	r3, r3, #1
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	899b      	ldrh	r3, [r3, #12]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3ba:	4413      	add	r3, r2
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6938      	ldr	r0, [r7, #16]
 800b3c0:	f7ff ff0c 	bl	800b1dc <move_window>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f040 808d 	bne.w	800b4e6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	60fa      	str	r2, [r7, #12]
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	8992      	ldrh	r2, [r2, #12]
 800b3d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3da:	fb02 f201 	mul.w	r2, r2, r1
 800b3de:	1a9b      	subs	r3, r3, r2
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	899b      	ldrh	r3, [r3, #12]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3fa:	4413      	add	r3, r2
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6938      	ldr	r0, [r7, #16]
 800b400:	f7ff feec 	bl	800b1dc <move_window>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d16f      	bne.n	800b4ea <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	899b      	ldrh	r3, [r3, #12]
 800b40e:	461a      	mov	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	fbb3 f1f2 	udiv	r1, r3, r2
 800b416:	fb02 f201 	mul.w	r2, r2, r1
 800b41a:	1a9b      	subs	r3, r3, r2
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	4413      	add	r3, r2
 800b420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	461a      	mov	r2, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <get_fat+0xe8>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	091b      	lsrs	r3, r3, #4
 800b43c:	e002      	b.n	800b444 <get_fat+0xee>
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b444:	617b      	str	r3, [r7, #20]
			break;
 800b446:	e055      	b.n	800b4f4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	899b      	ldrh	r3, [r3, #12]
 800b450:	085b      	lsrs	r3, r3, #1
 800b452:	b29b      	uxth	r3, r3
 800b454:	4619      	mov	r1, r3
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	fbb3 f3f1 	udiv	r3, r3, r1
 800b45c:	4413      	add	r3, r2
 800b45e:	4619      	mov	r1, r3
 800b460:	6938      	ldr	r0, [r7, #16]
 800b462:	f7ff febb 	bl	800b1dc <move_window>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d140      	bne.n	800b4ee <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	8992      	ldrh	r2, [r2, #12]
 800b47a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b47e:	fb02 f200 	mul.w	r2, r2, r0
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	440b      	add	r3, r1
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff fbc6 	bl	800ac18 <ld_word>
 800b48c:	4603      	mov	r3, r0
 800b48e:	617b      	str	r3, [r7, #20]
			break;
 800b490:	e030      	b.n	800b4f4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	899b      	ldrh	r3, [r3, #12]
 800b49a:	089b      	lsrs	r3, r3, #2
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	4619      	mov	r1, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4a6:	4413      	add	r3, r2
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	6938      	ldr	r0, [r7, #16]
 800b4ac:	f7ff fe96 	bl	800b1dc <move_window>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d11d      	bne.n	800b4f2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	8992      	ldrh	r2, [r2, #12]
 800b4c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4c8:	fb02 f200 	mul.w	r2, r2, r0
 800b4cc:	1a9b      	subs	r3, r3, r2
 800b4ce:	440b      	add	r3, r1
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fbb9 	bl	800ac48 <ld_dword>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b4dc:	617b      	str	r3, [r7, #20]
			break;
 800b4de:	e009      	b.n	800b4f4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	e006      	b.n	800b4f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4e6:	bf00      	nop
 800b4e8:	e004      	b.n	800b4f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4ea:	bf00      	nop
 800b4ec:	e002      	b.n	800b4f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4ee:	bf00      	nop
 800b4f0:	e000      	b.n	800b4f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4f2:	bf00      	nop
		}
	}

	return val;
 800b4f4:	697b      	ldr	r3, [r7, #20]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b4fe:	b590      	push	{r4, r7, lr}
 800b500:	b089      	sub	sp, #36	; 0x24
 800b502:	af00      	add	r7, sp, #0
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b50a:	2302      	movs	r3, #2
 800b50c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	2b01      	cmp	r3, #1
 800b512:	f240 8102 	bls.w	800b71a <put_fat+0x21c>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	f080 80fc 	bcs.w	800b71a <put_fat+0x21c>
		switch (fs->fs_type) {
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	2b03      	cmp	r3, #3
 800b528:	f000 80b6 	beq.w	800b698 <put_fat+0x19a>
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	f300 80fd 	bgt.w	800b72c <put_fat+0x22e>
 800b532:	2b01      	cmp	r3, #1
 800b534:	d003      	beq.n	800b53e <put_fat+0x40>
 800b536:	2b02      	cmp	r3, #2
 800b538:	f000 8083 	beq.w	800b642 <put_fat+0x144>
 800b53c:	e0f6      	b.n	800b72c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	61bb      	str	r3, [r7, #24]
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	4413      	add	r3, r2
 800b54a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	899b      	ldrh	r3, [r3, #12]
 800b554:	4619      	mov	r1, r3
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	fbb3 f3f1 	udiv	r3, r3, r1
 800b55c:	4413      	add	r3, r2
 800b55e:	4619      	mov	r1, r3
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f7ff fe3b 	bl	800b1dc <move_window>
 800b566:	4603      	mov	r3, r0
 800b568:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b56a:	7ffb      	ldrb	r3, [r7, #31]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f040 80d6 	bne.w	800b71e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	61ba      	str	r2, [r7, #24]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	8992      	ldrh	r2, [r2, #12]
 800b582:	fbb3 f0f2 	udiv	r0, r3, r2
 800b586:	fb02 f200 	mul.w	r2, r2, r0
 800b58a:	1a9b      	subs	r3, r3, r2
 800b58c:	440b      	add	r3, r1
 800b58e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00d      	beq.n	800b5b6 <put_fat+0xb8>
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	b25b      	sxtb	r3, r3
 800b5a0:	f003 030f 	and.w	r3, r3, #15
 800b5a4:	b25a      	sxtb	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	011b      	lsls	r3, r3, #4
 800b5ac:	b25b      	sxtb	r3, r3
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	b25b      	sxtb	r3, r3
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	e001      	b.n	800b5ba <put_fat+0xbc>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	899b      	ldrh	r3, [r3, #12]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5d4:	4413      	add	r3, r2
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f7ff fdff 	bl	800b1dc <move_window>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5e2:	7ffb      	ldrb	r3, [r7, #31]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f040 809c 	bne.w	800b722 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	899b      	ldrh	r3, [r3, #12]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5fc:	fb02 f200 	mul.w	r2, r2, r0
 800b600:	1a9b      	subs	r3, r3, r2
 800b602:	440b      	add	r3, r1
 800b604:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d003      	beq.n	800b618 <put_fat+0x11a>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	091b      	lsrs	r3, r3, #4
 800b614:	b2db      	uxtb	r3, r3
 800b616:	e00e      	b.n	800b636 <put_fat+0x138>
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	b25b      	sxtb	r3, r3
 800b61e:	f023 030f 	bic.w	r3, r3, #15
 800b622:	b25a      	sxtb	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	0a1b      	lsrs	r3, r3, #8
 800b628:	b25b      	sxtb	r3, r3
 800b62a:	f003 030f 	and.w	r3, r3, #15
 800b62e:	b25b      	sxtb	r3, r3
 800b630:	4313      	orrs	r3, r2
 800b632:	b25b      	sxtb	r3, r3
 800b634:	b2db      	uxtb	r3, r3
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2201      	movs	r2, #1
 800b63e:	70da      	strb	r2, [r3, #3]
			break;
 800b640:	e074      	b.n	800b72c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	899b      	ldrh	r3, [r3, #12]
 800b64a:	085b      	lsrs	r3, r3, #1
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	4619      	mov	r1, r3
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	fbb3 f3f1 	udiv	r3, r3, r1
 800b656:	4413      	add	r3, r2
 800b658:	4619      	mov	r1, r3
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fdbe 	bl	800b1dc <move_window>
 800b660:	4603      	mov	r3, r0
 800b662:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b664:	7ffb      	ldrb	r3, [r7, #31]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d15d      	bne.n	800b726 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	8992      	ldrh	r2, [r2, #12]
 800b678:	fbb3 f0f2 	udiv	r0, r3, r2
 800b67c:	fb02 f200 	mul.w	r2, r2, r0
 800b680:	1a9b      	subs	r3, r3, r2
 800b682:	440b      	add	r3, r1
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	b292      	uxth	r2, r2
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff faff 	bl	800ac8e <st_word>
			fs->wflag = 1;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2201      	movs	r2, #1
 800b694:	70da      	strb	r2, [r3, #3]
			break;
 800b696:	e049      	b.n	800b72c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	899b      	ldrh	r3, [r3, #12]
 800b6a0:	089b      	lsrs	r3, r3, #2
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff fd93 	bl	800b1dc <move_window>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6ba:	7ffb      	ldrb	r3, [r7, #31]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d134      	bne.n	800b72a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	8992      	ldrh	r2, [r2, #12]
 800b6d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6d8:	fb02 f200 	mul.w	r2, r2, r0
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	440b      	add	r3, r1
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7ff fab1 	bl	800ac48 <ld_dword>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6ec:	4323      	orrs	r3, r4
 800b6ee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	8992      	ldrh	r2, [r2, #12]
 800b6fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800b702:	fb02 f200 	mul.w	r2, r2, r0
 800b706:	1a9b      	subs	r3, r3, r2
 800b708:	440b      	add	r3, r1
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff fad9 	bl	800acc4 <st_dword>
			fs->wflag = 1;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2201      	movs	r2, #1
 800b716:	70da      	strb	r2, [r3, #3]
			break;
 800b718:	e008      	b.n	800b72c <put_fat+0x22e>
		}
	}
 800b71a:	bf00      	nop
 800b71c:	e006      	b.n	800b72c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b71e:	bf00      	nop
 800b720:	e004      	b.n	800b72c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b722:	bf00      	nop
 800b724:	e002      	b.n	800b72c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b726:	bf00      	nop
 800b728:	e000      	b.n	800b72c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b72a:	bf00      	nop
	return res;
 800b72c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3724      	adds	r7, #36	; 0x24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd90      	pop	{r4, r7, pc}

0800b736 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d904      	bls.n	800b75c <remove_chain+0x26>
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d301      	bcc.n	800b760 <remove_chain+0x2a>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e04b      	b.n	800b7f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00c      	beq.n	800b780 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	69b8      	ldr	r0, [r7, #24]
 800b76e:	f7ff fec6 	bl	800b4fe <put_fat>
 800b772:	4603      	mov	r3, r0
 800b774:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b776:	7ffb      	ldrb	r3, [r7, #31]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <remove_chain+0x4a>
 800b77c:	7ffb      	ldrb	r3, [r7, #31]
 800b77e:	e03b      	b.n	800b7f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b780:	68b9      	ldr	r1, [r7, #8]
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f7ff fde7 	bl	800b356 <get_fat>
 800b788:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d031      	beq.n	800b7f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <remove_chain+0x64>
 800b796:	2302      	movs	r3, #2
 800b798:	e02e      	b.n	800b7f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7a0:	d101      	bne.n	800b7a6 <remove_chain+0x70>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e028      	b.n	800b7f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	69b8      	ldr	r0, [r7, #24]
 800b7ac:	f7ff fea7 	bl	800b4fe <put_fat>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b7b4:	7ffb      	ldrb	r3, [r7, #31]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <remove_chain+0x88>
 800b7ba:	7ffb      	ldrb	r3, [r7, #31]
 800b7bc:	e01c      	b.n	800b7f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	69da      	ldr	r2, [r3, #28]
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	3b02      	subs	r3, #2
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d20b      	bcs.n	800b7e4 <remove_chain+0xae>
			fs->free_clst++;
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	69db      	ldr	r3, [r3, #28]
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	791b      	ldrb	r3, [r3, #4]
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d3c6      	bcc.n	800b780 <remove_chain+0x4a>
 800b7f2:	e000      	b.n	800b7f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b7f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3720      	adds	r7, #32
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b088      	sub	sp, #32
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10d      	bne.n	800b832 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d004      	beq.n	800b82c <create_chain+0x2c>
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d31b      	bcc.n	800b864 <create_chain+0x64>
 800b82c:	2301      	movs	r3, #1
 800b82e:	61bb      	str	r3, [r7, #24]
 800b830:	e018      	b.n	800b864 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f7ff fd8e 	bl	800b356 <get_fat>
 800b83a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d801      	bhi.n	800b846 <create_chain+0x46>
 800b842:	2301      	movs	r3, #1
 800b844:	e070      	b.n	800b928 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b84c:	d101      	bne.n	800b852 <create_chain+0x52>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	e06a      	b.n	800b928 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d201      	bcs.n	800b860 <create_chain+0x60>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	e063      	b.n	800b928 <create_chain+0x128>
		scl = clst;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	3301      	adds	r3, #1
 800b86c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	69fa      	ldr	r2, [r7, #28]
 800b874:	429a      	cmp	r2, r3
 800b876:	d307      	bcc.n	800b888 <create_chain+0x88>
				ncl = 2;
 800b878:	2302      	movs	r3, #2
 800b87a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b87c:	69fa      	ldr	r2, [r7, #28]
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	429a      	cmp	r2, r3
 800b882:	d901      	bls.n	800b888 <create_chain+0x88>
 800b884:	2300      	movs	r3, #0
 800b886:	e04f      	b.n	800b928 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b888:	69f9      	ldr	r1, [r7, #28]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff fd63 	bl	800b356 <get_fat>
 800b890:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00e      	beq.n	800b8b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d003      	beq.n	800b8a6 <create_chain+0xa6>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8a4:	d101      	bne.n	800b8aa <create_chain+0xaa>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	e03e      	b.n	800b928 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d1da      	bne.n	800b868 <create_chain+0x68>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	e038      	b.n	800b928 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b8b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b8b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8bc:	69f9      	ldr	r1, [r7, #28]
 800b8be:	6938      	ldr	r0, [r7, #16]
 800b8c0:	f7ff fe1d 	bl	800b4fe <put_fat>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d109      	bne.n	800b8e2 <create_chain+0xe2>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d006      	beq.n	800b8e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b8d4:	69fa      	ldr	r2, [r7, #28]
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6938      	ldr	r0, [r7, #16]
 800b8da:	f7ff fe10 	bl	800b4fe <put_fat>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d116      	bne.n	800b916 <create_chain+0x116>
		fs->last_clst = ncl;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	69fa      	ldr	r2, [r7, #28]
 800b8ec:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	69da      	ldr	r2, [r3, #28]
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	3b02      	subs	r3, #2
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d804      	bhi.n	800b906 <create_chain+0x106>
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	1e5a      	subs	r2, r3, #1
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	791b      	ldrb	r3, [r3, #4]
 800b90a:	f043 0301 	orr.w	r3, r3, #1
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	711a      	strb	r2, [r3, #4]
 800b914:	e007      	b.n	800b926 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d102      	bne.n	800b922 <create_chain+0x122>
 800b91c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b920:	e000      	b.n	800b924 <create_chain+0x124>
 800b922:	2301      	movs	r3, #1
 800b924:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b926:	69fb      	ldr	r3, [r7, #28]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3720      	adds	r7, #32
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b930:	b480      	push	{r7}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	3304      	adds	r3, #4
 800b946:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	899b      	ldrh	r3, [r3, #12]
 800b94c:	461a      	mov	r2, r3
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	fbb3 f3f2 	udiv	r3, r3, r2
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	8952      	ldrh	r2, [r2, #10]
 800b958:	fbb3 f3f2 	udiv	r3, r3, r2
 800b95c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	1d1a      	adds	r2, r3, #4
 800b962:	613a      	str	r2, [r7, #16]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <clmt_clust+0x42>
 800b96e:	2300      	movs	r3, #0
 800b970:	e010      	b.n	800b994 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	429a      	cmp	r2, r3
 800b978:	d307      	bcc.n	800b98a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	617b      	str	r3, [r7, #20]
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	3304      	adds	r3, #4
 800b986:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b988:	e7e9      	b.n	800b95e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b98a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	4413      	add	r3, r2
}
 800b994:	4618      	mov	r0, r3
 800b996:	371c      	adds	r7, #28
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9b6:	d204      	bcs.n	800b9c2 <dir_sdi+0x22>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f003 031f 	and.w	r3, r3, #31
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	e071      	b.n	800baaa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <dir_sdi+0x46>
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d902      	bls.n	800b9e6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10c      	bne.n	800ba06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	095b      	lsrs	r3, r3, #5
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	8912      	ldrh	r2, [r2, #8]
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d301      	bcc.n	800b9fc <dir_sdi+0x5c>
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	e056      	b.n	800baaa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	61da      	str	r2, [r3, #28]
 800ba04:	e02d      	b.n	800ba62 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	895b      	ldrh	r3, [r3, #10]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	899b      	ldrh	r3, [r3, #12]
 800ba10:	fb03 f302 	mul.w	r3, r3, r2
 800ba14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba16:	e019      	b.n	800ba4c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6979      	ldr	r1, [r7, #20]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7ff fc9a 	bl	800b356 <get_fat>
 800ba22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba2a:	d101      	bne.n	800ba30 <dir_sdi+0x90>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e03c      	b.n	800baaa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d904      	bls.n	800ba40 <dir_sdi+0xa0>
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d301      	bcc.n	800ba44 <dir_sdi+0xa4>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e032      	b.n	800baaa <dir_sdi+0x10a>
			ofs -= csz;
 800ba44:	683a      	ldr	r2, [r7, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d2e1      	bcs.n	800ba18 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ba54:	6979      	ldr	r1, [r7, #20]
 800ba56:	6938      	ldr	r0, [r7, #16]
 800ba58:	f7ff fc5e 	bl	800b318 <clust2sect>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	69db      	ldr	r3, [r3, #28]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <dir_sdi+0xd4>
 800ba70:	2302      	movs	r3, #2
 800ba72:	e01a      	b.n	800baaa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	69da      	ldr	r2, [r3, #28]
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	899b      	ldrh	r3, [r3, #12]
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba84:	441a      	add	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	899b      	ldrh	r3, [r3, #12]
 800ba94:	461a      	mov	r2, r3
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba9c:	fb02 f200 	mul.w	r2, r2, r0
 800baa0:	1a9b      	subs	r3, r3, r2
 800baa2:	18ca      	adds	r2, r1, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b086      	sub	sp, #24
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	3320      	adds	r3, #32
 800bac8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <dir_next+0x28>
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bad8:	d301      	bcc.n	800bade <dir_next+0x2c>
 800bada:	2304      	movs	r3, #4
 800badc:	e0bb      	b.n	800bc56 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	899b      	ldrh	r3, [r3, #12]
 800bae2:	461a      	mov	r2, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	fbb3 f1f2 	udiv	r1, r3, r2
 800baea:	fb02 f201 	mul.w	r2, r2, r1
 800baee:	1a9b      	subs	r3, r3, r2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f040 809d 	bne.w	800bc30 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	69db      	ldr	r3, [r3, #28]
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10b      	bne.n	800bb20 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	095b      	lsrs	r3, r3, #5
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	8912      	ldrh	r2, [r2, #8]
 800bb10:	4293      	cmp	r3, r2
 800bb12:	f0c0 808d 	bcc.w	800bc30 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	61da      	str	r2, [r3, #28]
 800bb1c:	2304      	movs	r3, #4
 800bb1e:	e09a      	b.n	800bc56 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	899b      	ldrh	r3, [r3, #12]
 800bb24:	461a      	mov	r2, r3
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	8952      	ldrh	r2, [r2, #10]
 800bb30:	3a01      	subs	r2, #1
 800bb32:	4013      	ands	r3, r2
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d17b      	bne.n	800bc30 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4610      	mov	r0, r2
 800bb42:	f7ff fc08 	bl	800b356 <get_fat>
 800bb46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d801      	bhi.n	800bb52 <dir_next+0xa0>
 800bb4e:	2302      	movs	r3, #2
 800bb50:	e081      	b.n	800bc56 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb58:	d101      	bne.n	800bb5e <dir_next+0xac>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e07b      	b.n	800bc56 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d359      	bcc.n	800bc1c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d104      	bne.n	800bb78 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	61da      	str	r2, [r3, #28]
 800bb74:	2304      	movs	r3, #4
 800bb76:	e06e      	b.n	800bc56 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4610      	mov	r0, r2
 800bb82:	f7ff fe3d 	bl	800b800 <create_chain>
 800bb86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <dir_next+0xe0>
 800bb8e:	2307      	movs	r3, #7
 800bb90:	e061      	b.n	800bc56 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d101      	bne.n	800bb9c <dir_next+0xea>
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e05c      	b.n	800bc56 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bba2:	d101      	bne.n	800bba8 <dir_next+0xf6>
 800bba4:	2301      	movs	r3, #1
 800bba6:	e056      	b.n	800bc56 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7ff fad3 	bl	800b154 <sync_window>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <dir_next+0x106>
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e04e      	b.n	800bc56 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	899b      	ldrh	r3, [r3, #12]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	f7ff f8ca 	bl	800ad5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbca:	2300      	movs	r3, #0
 800bbcc:	613b      	str	r3, [r7, #16]
 800bbce:	6979      	ldr	r1, [r7, #20]
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f7ff fba1 	bl	800b318 <clust2sect>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	639a      	str	r2, [r3, #56]	; 0x38
 800bbdc:	e012      	b.n	800bc04 <dir_next+0x152>
						fs->wflag = 1;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff fab5 	bl	800b154 <sync_window>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <dir_next+0x142>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e030      	b.n	800bc56 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	613b      	str	r3, [r7, #16]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	1c5a      	adds	r2, r3, #1
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	639a      	str	r2, [r3, #56]	; 0x38
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	895b      	ldrh	r3, [r3, #10]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d3e6      	bcc.n	800bbde <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	1ad2      	subs	r2, r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bc22:	6979      	ldr	r1, [r7, #20]
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f7ff fb77 	bl	800b318 <clust2sect>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	899b      	ldrh	r3, [r3, #12]
 800bc40:	461a      	mov	r2, r3
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc48:	fb02 f200 	mul.w	r2, r2, r0
 800bc4c:	1a9b      	subs	r3, r3, r2
 800bc4e:	18ca      	adds	r2, r1, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b086      	sub	sp, #24
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f7ff fe95 	bl	800b9a0 <dir_sdi>
 800bc76:	4603      	mov	r3, r0
 800bc78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d12b      	bne.n	800bcd8 <dir_alloc+0x7a>
		n = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	69db      	ldr	r3, [r3, #28]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f7ff faa6 	bl	800b1dc <move_window>
 800bc90:	4603      	mov	r3, r0
 800bc92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d11d      	bne.n	800bcd6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2be5      	cmp	r3, #229	; 0xe5
 800bca2:	d004      	beq.n	800bcae <dir_alloc+0x50>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a1b      	ldr	r3, [r3, #32]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d107      	bne.n	800bcbe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d102      	bne.n	800bcc2 <dir_alloc+0x64>
 800bcbc:	e00c      	b.n	800bcd8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff fef4 	bl	800bab2 <dir_next>
 800bcca:	4603      	mov	r3, r0
 800bccc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bcce:	7dfb      	ldrb	r3, [r7, #23]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d0d7      	beq.n	800bc84 <dir_alloc+0x26>
 800bcd4:	e000      	b.n	800bcd8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bcd6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
 800bcda:	2b04      	cmp	r3, #4
 800bcdc:	d101      	bne.n	800bce2 <dir_alloc+0x84>
 800bcde:	2307      	movs	r3, #7
 800bce0:	75fb      	strb	r3, [r7, #23]
	return res;
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	331a      	adds	r3, #26
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe ff8c 	bl	800ac18 <ld_word>
 800bd00:	4603      	mov	r3, r0
 800bd02:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d109      	bne.n	800bd20 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	3314      	adds	r3, #20
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe ff81 	bl	800ac18 <ld_word>
 800bd16:	4603      	mov	r3, r0
 800bd18:	041b      	lsls	r3, r3, #16
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bd20:	68fb      	ldr	r3, [r7, #12]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	60f8      	str	r0, [r7, #12]
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	331a      	adds	r3, #26
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	b292      	uxth	r2, r2
 800bd3e:	4611      	mov	r1, r2
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fe ffa4 	bl	800ac8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	d109      	bne.n	800bd62 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	f103 0214 	add.w	r2, r3, #20
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	0c1b      	lsrs	r3, r3, #16
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	f7fe ff96 	bl	800ac8e <st_word>
	}
}
 800bd62:	bf00      	nop
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bd6c:	b590      	push	{r4, r7, lr}
 800bd6e:	b087      	sub	sp, #28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	331a      	adds	r3, #26
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe ff4c 	bl	800ac18 <ld_word>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d001      	beq.n	800bd8a <cmp_lfn+0x1e>
 800bd86:	2300      	movs	r3, #0
 800bd88:	e059      	b.n	800be3e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd92:	1e5a      	subs	r2, r3, #1
 800bd94:	4613      	mov	r3, r2
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bda0:	2301      	movs	r3, #1
 800bda2:	81fb      	strh	r3, [r7, #14]
 800bda4:	2300      	movs	r3, #0
 800bda6:	613b      	str	r3, [r7, #16]
 800bda8:	e033      	b.n	800be12 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bdaa:	4a27      	ldr	r2, [pc, #156]	; (800be48 <cmp_lfn+0xdc>)
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	4413      	add	r3, r2
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fe ff2d 	bl	800ac18 <ld_word>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bdc2:	89fb      	ldrh	r3, [r7, #14]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01a      	beq.n	800bdfe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	2bfe      	cmp	r3, #254	; 0xfe
 800bdcc:	d812      	bhi.n	800bdf4 <cmp_lfn+0x88>
 800bdce:	89bb      	ldrh	r3, [r7, #12]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f001 fdd1 	bl	800d978 <ff_wtoupper>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	461c      	mov	r4, r3
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	617a      	str	r2, [r7, #20]
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	4413      	add	r3, r2
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f001 fdc5 	bl	800d978 <ff_wtoupper>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	429c      	cmp	r4, r3
 800bdf2:	d001      	beq.n	800bdf8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	e022      	b.n	800be3e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bdf8:	89bb      	ldrh	r3, [r7, #12]
 800bdfa:	81fb      	strh	r3, [r7, #14]
 800bdfc:	e006      	b.n	800be0c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdfe:	89bb      	ldrh	r3, [r7, #12]
 800be00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be04:	4293      	cmp	r3, r2
 800be06:	d001      	beq.n	800be0c <cmp_lfn+0xa0>
 800be08:	2300      	movs	r3, #0
 800be0a:	e018      	b.n	800be3e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	3301      	adds	r3, #1
 800be10:	613b      	str	r3, [r7, #16]
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	2b0c      	cmp	r3, #12
 800be16:	d9c8      	bls.n	800bdaa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <cmp_lfn+0xd0>
 800be24:	89fb      	ldrh	r3, [r7, #14]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d008      	beq.n	800be3c <cmp_lfn+0xd0>
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	4413      	add	r3, r2
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <cmp_lfn+0xd0>
 800be38:	2300      	movs	r3, #0
 800be3a:	e000      	b.n	800be3e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800be3c:	2301      	movs	r3, #1
}
 800be3e:	4618      	mov	r0, r3
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	bd90      	pop	{r4, r7, pc}
 800be46:	bf00      	nop
 800be48:	08013fe4 	.word	0x08013fe4

0800be4c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	4611      	mov	r1, r2
 800be58:	461a      	mov	r2, r3
 800be5a:	460b      	mov	r3, r1
 800be5c:	71fb      	strb	r3, [r7, #7]
 800be5e:	4613      	mov	r3, r2
 800be60:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	330d      	adds	r3, #13
 800be66:	79ba      	ldrb	r2, [r7, #6]
 800be68:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	330b      	adds	r3, #11
 800be6e:	220f      	movs	r2, #15
 800be70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	330c      	adds	r3, #12
 800be76:	2200      	movs	r2, #0
 800be78:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	331a      	adds	r3, #26
 800be7e:	2100      	movs	r1, #0
 800be80:	4618      	mov	r0, r3
 800be82:	f7fe ff04 	bl	800ac8e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	1e5a      	subs	r2, r3, #1
 800be8a:	4613      	mov	r3, r2
 800be8c:	005b      	lsls	r3, r3, #1
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	82fb      	strh	r3, [r7, #22]
 800be9a:	2300      	movs	r3, #0
 800be9c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800be9e:	8afb      	ldrh	r3, [r7, #22]
 800bea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d007      	beq.n	800beb8 <put_lfn+0x6c>
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	61fa      	str	r2, [r7, #28]
 800beae:	005b      	lsls	r3, r3, #1
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	4413      	add	r3, r2
 800beb4:	881b      	ldrh	r3, [r3, #0]
 800beb6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800beb8:	4a17      	ldr	r2, [pc, #92]	; (800bf18 <put_lfn+0xcc>)
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	4413      	add	r3, r2
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	461a      	mov	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	4413      	add	r3, r2
 800bec6:	8afa      	ldrh	r2, [r7, #22]
 800bec8:	4611      	mov	r1, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fedf 	bl	800ac8e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bed0:	8afb      	ldrh	r3, [r7, #22]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d102      	bne.n	800bedc <put_lfn+0x90>
 800bed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800beda:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	3301      	adds	r3, #1
 800bee0:	61bb      	str	r3, [r7, #24]
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	2b0c      	cmp	r3, #12
 800bee6:	d9da      	bls.n	800be9e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bee8:	8afb      	ldrh	r3, [r7, #22]
 800beea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beee:	4293      	cmp	r3, r2
 800bef0:	d006      	beq.n	800bf00 <put_lfn+0xb4>
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	4413      	add	r3, r2
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d103      	bne.n	800bf08 <put_lfn+0xbc>
 800bf00:	79fb      	ldrb	r3, [r7, #7]
 800bf02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf06:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	79fa      	ldrb	r2, [r7, #7]
 800bf0c:	701a      	strb	r2, [r3, #0]
}
 800bf0e:	bf00      	nop
 800bf10:	3720      	adds	r7, #32
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	08013fe4 	.word	0x08013fe4

0800bf1c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08c      	sub	sp, #48	; 0x30
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bf2a:	220b      	movs	r2, #11
 800bf2c:	68b9      	ldr	r1, [r7, #8]
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7fe fef4 	bl	800ad1c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	2b05      	cmp	r3, #5
 800bf38:	d92b      	bls.n	800bf92 <gen_numname+0x76>
		sr = seq;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bf3e:	e022      	b.n	800bf86 <gen_numname+0x6a>
			wc = *lfn++;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	1c9a      	adds	r2, r3, #2
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf4e:	e017      	b.n	800bf80 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	005a      	lsls	r2, r3, #1
 800bf54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	4413      	add	r3, r2
 800bf5c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bf5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf60:	085b      	lsrs	r3, r3, #1
 800bf62:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d005      	beq.n	800bf7a <gen_numname+0x5e>
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bf74:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bf78:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	2b0f      	cmp	r3, #15
 800bf84:	d9e4      	bls.n	800bf50 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1d8      	bne.n	800bf40 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bf92:	2307      	movs	r3, #7
 800bf94:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	f003 030f 	and.w	r3, r3, #15
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	3330      	adds	r3, #48	; 0x30
 800bfa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bfa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfaa:	2b39      	cmp	r3, #57	; 0x39
 800bfac:	d904      	bls.n	800bfb8 <gen_numname+0x9c>
 800bfae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfb2:	3307      	adds	r3, #7
 800bfb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	1e5a      	subs	r2, r3, #1
 800bfbc:	62ba      	str	r2, [r7, #40]	; 0x28
 800bfbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bfc8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	091b      	lsrs	r3, r3, #4
 800bfd0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1de      	bne.n	800bf96 <gen_numname+0x7a>
	ns[i] = '~';
 800bfd8:	f107 0214 	add.w	r2, r7, #20
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	4413      	add	r3, r2
 800bfe0:	227e      	movs	r2, #126	; 0x7e
 800bfe2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe8:	e002      	b.n	800bff0 <gen_numname+0xd4>
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	3301      	adds	r3, #1
 800bfee:	627b      	str	r3, [r7, #36]	; 0x24
 800bff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d205      	bcs.n	800c004 <gen_numname+0xe8>
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffc:	4413      	add	r3, r2
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	2b20      	cmp	r3, #32
 800c002:	d1f2      	bne.n	800bfea <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	2b07      	cmp	r3, #7
 800c008:	d808      	bhi.n	800c01c <gen_numname+0x100>
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	62ba      	str	r2, [r7, #40]	; 0x28
 800c010:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c014:	4413      	add	r3, r2
 800c016:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c01a:	e000      	b.n	800c01e <gen_numname+0x102>
 800c01c:	2120      	movs	r1, #32
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	627a      	str	r2, [r7, #36]	; 0x24
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	4413      	add	r3, r2
 800c028:	460a      	mov	r2, r1
 800c02a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	2b07      	cmp	r3, #7
 800c030:	d9e8      	bls.n	800c004 <gen_numname+0xe8>
}
 800c032:	bf00      	nop
 800c034:	bf00      	nop
 800c036:	3730      	adds	r7, #48	; 0x30
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c048:	230b      	movs	r3, #11
 800c04a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	0852      	lsrs	r2, r2, #1
 800c052:	01db      	lsls	r3, r3, #7
 800c054:	4313      	orrs	r3, r2
 800c056:	b2da      	uxtb	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	1c59      	adds	r1, r3, #1
 800c05c:	6079      	str	r1, [r7, #4]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	4413      	add	r3, r2
 800c062:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	3b01      	subs	r3, #1
 800c068:	60bb      	str	r3, [r7, #8]
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1ed      	bne.n	800c04c <sum_sfn+0x10>
	return sum;
 800c070:	7bfb      	ldrb	r3, [r7, #15]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr

0800c07e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b086      	sub	sp, #24
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c08c:	2100      	movs	r1, #0
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff fc86 	bl	800b9a0 <dir_sdi>
 800c094:	4603      	mov	r3, r0
 800c096:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c098:	7dfb      	ldrb	r3, [r7, #23]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <dir_find+0x24>
 800c09e:	7dfb      	ldrb	r3, [r7, #23]
 800c0a0:	e0a9      	b.n	800c1f6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0a2:	23ff      	movs	r3, #255	; 0xff
 800c0a4:	753b      	strb	r3, [r7, #20]
 800c0a6:	7d3b      	ldrb	r3, [r7, #20]
 800c0a8:	757b      	strb	r3, [r7, #21]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0b0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	6938      	ldr	r0, [r7, #16]
 800c0ba:	f7ff f88f 	bl	800b1dc <move_window>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f040 8090 	bne.w	800c1ea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a1b      	ldr	r3, [r3, #32]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c0d2:	7dbb      	ldrb	r3, [r7, #22]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <dir_find+0x60>
 800c0d8:	2304      	movs	r3, #4
 800c0da:	75fb      	strb	r3, [r7, #23]
 800c0dc:	e08a      	b.n	800c1f4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	330b      	adds	r3, #11
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0ea:	73fb      	strb	r3, [r7, #15]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7bfa      	ldrb	r2, [r7, #15]
 800c0f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c0f2:	7dbb      	ldrb	r3, [r7, #22]
 800c0f4:	2be5      	cmp	r3, #229	; 0xe5
 800c0f6:	d007      	beq.n	800c108 <dir_find+0x8a>
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
 800c0fa:	f003 0308 	and.w	r3, r3, #8
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d009      	beq.n	800c116 <dir_find+0x98>
 800c102:	7bfb      	ldrb	r3, [r7, #15]
 800c104:	2b0f      	cmp	r3, #15
 800c106:	d006      	beq.n	800c116 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c108:	23ff      	movs	r3, #255	; 0xff
 800c10a:	757b      	strb	r3, [r7, #21]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c112:	631a      	str	r2, [r3, #48]	; 0x30
 800c114:	e05e      	b.n	800c1d4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	2b0f      	cmp	r3, #15
 800c11a:	d136      	bne.n	800c18a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c126:	2b00      	cmp	r3, #0
 800c128:	d154      	bne.n	800c1d4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c12a:	7dbb      	ldrb	r3, [r7, #22]
 800c12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00d      	beq.n	800c150 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	7b5b      	ldrb	r3, [r3, #13]
 800c13a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c13c:	7dbb      	ldrb	r3, [r7, #22]
 800c13e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c142:	75bb      	strb	r3, [r7, #22]
 800c144:	7dbb      	ldrb	r3, [r7, #22]
 800c146:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	695a      	ldr	r2, [r3, #20]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c150:	7dba      	ldrb	r2, [r7, #22]
 800c152:	7d7b      	ldrb	r3, [r7, #21]
 800c154:	429a      	cmp	r2, r3
 800c156:	d115      	bne.n	800c184 <dir_find+0x106>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6a1b      	ldr	r3, [r3, #32]
 800c15c:	330d      	adds	r3, #13
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	7d3a      	ldrb	r2, [r7, #20]
 800c162:	429a      	cmp	r2, r3
 800c164:	d10e      	bne.n	800c184 <dir_find+0x106>
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	691a      	ldr	r2, [r3, #16]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7ff fdfb 	bl	800bd6c <cmp_lfn>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d003      	beq.n	800c184 <dir_find+0x106>
 800c17c:	7d7b      	ldrb	r3, [r7, #21]
 800c17e:	3b01      	subs	r3, #1
 800c180:	b2db      	uxtb	r3, r3
 800c182:	e000      	b.n	800c186 <dir_find+0x108>
 800c184:	23ff      	movs	r3, #255	; 0xff
 800c186:	757b      	strb	r3, [r7, #21]
 800c188:	e024      	b.n	800c1d4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c18a:	7d7b      	ldrb	r3, [r7, #21]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <dir_find+0x126>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	4618      	mov	r0, r3
 800c196:	f7ff ff51 	bl	800c03c <sum_sfn>
 800c19a:	4603      	mov	r3, r0
 800c19c:	461a      	mov	r2, r3
 800c19e:	7d3b      	ldrb	r3, [r7, #20]
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d024      	beq.n	800c1ee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1aa:	f003 0301 	and.w	r3, r3, #1
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <dir_find+0x14a>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a18      	ldr	r0, [r3, #32]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3324      	adds	r3, #36	; 0x24
 800c1ba:	220b      	movs	r2, #11
 800c1bc:	4619      	mov	r1, r3
 800c1be:	f7fe fde9 	bl	800ad94 <mem_cmp>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d014      	beq.n	800c1f2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1c8:	23ff      	movs	r3, #255	; 0xff
 800c1ca:	757b      	strb	r3, [r7, #21]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fc6b 	bl	800bab2 <dir_next>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f43f af65 	beq.w	800c0b2 <dir_find+0x34>
 800c1e8:	e004      	b.n	800c1f4 <dir_find+0x176>
		if (res != FR_OK) break;
 800c1ea:	bf00      	nop
 800c1ec:	e002      	b.n	800c1f4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c1ee:	bf00      	nop
 800c1f0:	e000      	b.n	800c1f4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1f2:	bf00      	nop

	return res;
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08c      	sub	sp, #48	; 0x30
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c214:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <dir_register+0x20>
 800c21c:	2306      	movs	r3, #6
 800c21e:	e0e0      	b.n	800c3e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c220:	2300      	movs	r3, #0
 800c222:	627b      	str	r3, [r7, #36]	; 0x24
 800c224:	e002      	b.n	800c22c <dir_register+0x2c>
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	3301      	adds	r3, #1
 800c22a:	627b      	str	r3, [r7, #36]	; 0x24
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	691a      	ldr	r2, [r3, #16]
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	4413      	add	r3, r2
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1f4      	bne.n	800c226 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c242:	f107 030c 	add.w	r3, r7, #12
 800c246:	220c      	movs	r2, #12
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fe fd67 	bl	800ad1c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b00      	cmp	r3, #0
 800c256:	d032      	beq.n	800c2be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2240      	movs	r2, #64	; 0x40
 800c25c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c260:	2301      	movs	r3, #1
 800c262:	62bb      	str	r3, [r7, #40]	; 0x28
 800c264:	e016      	b.n	800c294 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	691a      	ldr	r2, [r3, #16]
 800c270:	f107 010c 	add.w	r1, r7, #12
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	f7ff fe51 	bl	800bf1c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff feff 	bl	800c07e <dir_find>
 800c280:	4603      	mov	r3, r0
 800c282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d106      	bne.n	800c29c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	3301      	adds	r3, #1
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	2b63      	cmp	r3, #99	; 0x63
 800c298:	d9e5      	bls.n	800c266 <dir_register+0x66>
 800c29a:	e000      	b.n	800c29e <dir_register+0x9e>
			if (res != FR_OK) break;
 800c29c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	2b64      	cmp	r3, #100	; 0x64
 800c2a2:	d101      	bne.n	800c2a8 <dir_register+0xa8>
 800c2a4:	2307      	movs	r3, #7
 800c2a6:	e09c      	b.n	800c3e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c2a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d002      	beq.n	800c2b6 <dir_register+0xb6>
 800c2b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2b4:	e095      	b.n	800c3e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c2b6:	7dfa      	ldrb	r2, [r7, #23]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	f003 0302 	and.w	r3, r3, #2
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d007      	beq.n	800c2d8 <dir_register+0xd8>
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	330c      	adds	r3, #12
 800c2cc:	4a47      	ldr	r2, [pc, #284]	; (800c3ec <dir_register+0x1ec>)
 800c2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d2:	089b      	lsrs	r3, r3, #2
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	e000      	b.n	800c2da <dir_register+0xda>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c2dc:	6a39      	ldr	r1, [r7, #32]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fcbd 	bl	800bc5e <dir_alloc>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c2ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d148      	bne.n	800c384 <dir_register+0x184>
 800c2f2:	6a3b      	ldr	r3, [r7, #32]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	623b      	str	r3, [r7, #32]
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d042      	beq.n	800c384 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	695a      	ldr	r2, [r3, #20]
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	015b      	lsls	r3, r3, #5
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	4619      	mov	r1, r3
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff fb48 	bl	800b9a0 <dir_sdi>
 800c310:	4603      	mov	r3, r0
 800c312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d132      	bne.n	800c384 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	3324      	adds	r3, #36	; 0x24
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff fe8a 	bl	800c03c <sum_sfn>
 800c328:	4603      	mov	r3, r0
 800c32a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	69db      	ldr	r3, [r3, #28]
 800c330:	4619      	mov	r1, r3
 800c332:	69f8      	ldr	r0, [r7, #28]
 800c334:	f7fe ff52 	bl	800b1dc <move_window>
 800c338:	4603      	mov	r3, r0
 800c33a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c33e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c342:	2b00      	cmp	r3, #0
 800c344:	d11d      	bne.n	800c382 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	6918      	ldr	r0, [r3, #16]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a19      	ldr	r1, [r3, #32]
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	b2da      	uxtb	r2, r3
 800c352:	7efb      	ldrb	r3, [r7, #27]
 800c354:	f7ff fd7a 	bl	800be4c <put_lfn>
				fs->wflag = 1;
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	2201      	movs	r2, #1
 800c35c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c35e:	2100      	movs	r1, #0
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7ff fba6 	bl	800bab2 <dir_next>
 800c366:	4603      	mov	r3, r0
 800c368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c36c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c370:	2b00      	cmp	r3, #0
 800c372:	d107      	bne.n	800c384 <dir_register+0x184>
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	3b01      	subs	r3, #1
 800c378:	623b      	str	r3, [r7, #32]
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1d5      	bne.n	800c32c <dir_register+0x12c>
 800c380:	e000      	b.n	800c384 <dir_register+0x184>
				if (res != FR_OK) break;
 800c382:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c384:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d128      	bne.n	800c3de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	69db      	ldr	r3, [r3, #28]
 800c390:	4619      	mov	r1, r3
 800c392:	69f8      	ldr	r0, [r7, #28]
 800c394:	f7fe ff22 	bl	800b1dc <move_window>
 800c398:	4603      	mov	r3, r0
 800c39a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c39e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d11b      	bne.n	800c3de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	2220      	movs	r2, #32
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe fcd5 	bl	800ad5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6a18      	ldr	r0, [r3, #32]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3324      	adds	r3, #36	; 0x24
 800c3bc:	220b      	movs	r2, #11
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f7fe fcac 	bl	800ad1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	330c      	adds	r3, #12
 800c3d0:	f002 0218 	and.w	r2, r2, #24
 800c3d4:	b2d2      	uxtb	r2, r2
 800c3d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3730      	adds	r7, #48	; 0x30
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	4ec4ec4f 	.word	0x4ec4ec4f

0800c3f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b08a      	sub	sp, #40	; 0x28
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	2300      	movs	r3, #0
 800c40a:	617b      	str	r3, [r7, #20]
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	1c5a      	adds	r2, r3, #1
 800c414:	61ba      	str	r2, [r7, #24]
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4413      	add	r3, r2
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c420:	2b1f      	cmp	r3, #31
 800c422:	d940      	bls.n	800c4a6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c426:	2b2f      	cmp	r3, #47	; 0x2f
 800c428:	d006      	beq.n	800c438 <create_name+0x48>
 800c42a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c42c:	2b5c      	cmp	r3, #92	; 0x5c
 800c42e:	d110      	bne.n	800c452 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c430:	e002      	b.n	800c438 <create_name+0x48>
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	3301      	adds	r3, #1
 800c436:	61bb      	str	r3, [r7, #24]
 800c438:	693a      	ldr	r2, [r7, #16]
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	4413      	add	r3, r2
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b2f      	cmp	r3, #47	; 0x2f
 800c442:	d0f6      	beq.n	800c432 <create_name+0x42>
 800c444:	693a      	ldr	r2, [r7, #16]
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	4413      	add	r3, r2
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b5c      	cmp	r3, #92	; 0x5c
 800c44e:	d0f0      	beq.n	800c432 <create_name+0x42>
			break;
 800c450:	e02a      	b.n	800c4a8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	2bfe      	cmp	r3, #254	; 0xfe
 800c456:	d901      	bls.n	800c45c <create_name+0x6c>
 800c458:	2306      	movs	r3, #6
 800c45a:	e177      	b.n	800c74c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c464:	2101      	movs	r1, #1
 800c466:	4618      	mov	r0, r3
 800c468:	f001 fa4a 	bl	800d900 <ff_convert>
 800c46c:	4603      	mov	r3, r0
 800c46e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <create_name+0x8a>
 800c476:	2306      	movs	r3, #6
 800c478:	e168      	b.n	800c74c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c47a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c47c:	2b7f      	cmp	r3, #127	; 0x7f
 800c47e:	d809      	bhi.n	800c494 <create_name+0xa4>
 800c480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c482:	4619      	mov	r1, r3
 800c484:	48b3      	ldr	r0, [pc, #716]	; (800c754 <create_name+0x364>)
 800c486:	f7fe fcac 	bl	800ade2 <chk_chr>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <create_name+0xa4>
 800c490:	2306      	movs	r3, #6
 800c492:	e15b      	b.n	800c74c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	1c5a      	adds	r2, r3, #1
 800c498:	617a      	str	r2, [r7, #20]
 800c49a:	005b      	lsls	r3, r3, #1
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	4413      	add	r3, r2
 800c4a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4a2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c4a4:	e7b4      	b.n	800c410 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c4a6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	441a      	add	r2, r3
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c4b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b4:	2b1f      	cmp	r3, #31
 800c4b6:	d801      	bhi.n	800c4bc <create_name+0xcc>
 800c4b8:	2304      	movs	r3, #4
 800c4ba:	e000      	b.n	800c4be <create_name+0xce>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c4c2:	e011      	b.n	800c4e8 <create_name+0xf8>
		w = lfn[di - 1];
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	005b      	lsls	r3, r3, #1
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d8:	2b20      	cmp	r3, #32
 800c4da:	d002      	beq.n	800c4e2 <create_name+0xf2>
 800c4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4de:	2b2e      	cmp	r3, #46	; 0x2e
 800c4e0:	d106      	bne.n	800c4f0 <create_name+0x100>
		di--;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1ea      	bne.n	800c4c4 <create_name+0xd4>
 800c4ee:	e000      	b.n	800c4f2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c4f0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <create_name+0x118>
 800c504:	2306      	movs	r3, #6
 800c506:	e121      	b.n	800c74c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3324      	adds	r3, #36	; 0x24
 800c50c:	220b      	movs	r2, #11
 800c50e:	2120      	movs	r1, #32
 800c510:	4618      	mov	r0, r3
 800c512:	f7fe fc24 	bl	800ad5e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c516:	2300      	movs	r3, #0
 800c518:	61bb      	str	r3, [r7, #24]
 800c51a:	e002      	b.n	800c522 <create_name+0x132>
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	3301      	adds	r3, #1
 800c520:	61bb      	str	r3, [r7, #24]
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	4413      	add	r3, r2
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	2b20      	cmp	r3, #32
 800c52e:	d0f5      	beq.n	800c51c <create_name+0x12c>
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	4413      	add	r3, r2
 800c538:	881b      	ldrh	r3, [r3, #0]
 800c53a:	2b2e      	cmp	r3, #46	; 0x2e
 800c53c:	d0ee      	beq.n	800c51c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c53e:	69bb      	ldr	r3, [r7, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d009      	beq.n	800c558 <create_name+0x168>
 800c544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c548:	f043 0303 	orr.w	r3, r3, #3
 800c54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c550:	e002      	b.n	800c558 <create_name+0x168>
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	3b01      	subs	r3, #1
 800c556:	617b      	str	r3, [r7, #20]
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d009      	beq.n	800c572 <create_name+0x182>
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c564:	3b01      	subs	r3, #1
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4413      	add	r3, r2
 800c56c:	881b      	ldrh	r3, [r3, #0]
 800c56e:	2b2e      	cmp	r3, #46	; 0x2e
 800c570:	d1ef      	bne.n	800c552 <create_name+0x162>

	i = b = 0; ni = 8;
 800c572:	2300      	movs	r3, #0
 800c574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c578:	2300      	movs	r3, #0
 800c57a:	623b      	str	r3, [r7, #32]
 800c57c:	2308      	movs	r3, #8
 800c57e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	1c5a      	adds	r2, r3, #1
 800c584:	61ba      	str	r2, [r7, #24]
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	4413      	add	r3, r2
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 8090 	beq.w	800c6b8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c59a:	2b20      	cmp	r3, #32
 800c59c:	d006      	beq.n	800c5ac <create_name+0x1bc>
 800c59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a2:	d10a      	bne.n	800c5ba <create_name+0x1ca>
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d006      	beq.n	800c5ba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b0:	f043 0303 	orr.w	r3, r3, #3
 800c5b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5b8:	e07d      	b.n	800c6b6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c5ba:	6a3a      	ldr	r2, [r7, #32]
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d203      	bcs.n	800c5ca <create_name+0x1da>
 800c5c2:	69ba      	ldr	r2, [r7, #24]
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d123      	bne.n	800c612 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b0b      	cmp	r3, #11
 800c5ce:	d106      	bne.n	800c5de <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d4:	f043 0303 	orr.w	r3, r3, #3
 800c5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5dc:	e06f      	b.n	800c6be <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c5de:	69ba      	ldr	r2, [r7, #24]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d005      	beq.n	800c5f2 <create_name+0x202>
 800c5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ea:	f043 0303 	orr.w	r3, r3, #3
 800c5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c5f2:	69ba      	ldr	r2, [r7, #24]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d860      	bhi.n	800c6bc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	61bb      	str	r3, [r7, #24]
 800c5fe:	2308      	movs	r3, #8
 800c600:	623b      	str	r3, [r7, #32]
 800c602:	230b      	movs	r3, #11
 800c604:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c610:	e051      	b.n	800c6b6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c614:	2b7f      	cmp	r3, #127	; 0x7f
 800c616:	d914      	bls.n	800c642 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c61a:	2100      	movs	r1, #0
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 f96f 	bl	800d900 <ff_convert>
 800c622:	4603      	mov	r3, r0
 800c624:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <create_name+0x246>
 800c62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c62e:	3b80      	subs	r3, #128	; 0x80
 800c630:	4a49      	ldr	r2, [pc, #292]	; (800c758 <create_name+0x368>)
 800c632:	5cd3      	ldrb	r3, [r2, r3]
 800c634:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c63a:	f043 0302 	orr.w	r3, r3, #2
 800c63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c644:	2b00      	cmp	r3, #0
 800c646:	d007      	beq.n	800c658 <create_name+0x268>
 800c648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c64a:	4619      	mov	r1, r3
 800c64c:	4843      	ldr	r0, [pc, #268]	; (800c75c <create_name+0x36c>)
 800c64e:	f7fe fbc8 	bl	800ade2 <chk_chr>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d008      	beq.n	800c66a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c658:	235f      	movs	r3, #95	; 0x5f
 800c65a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c660:	f043 0303 	orr.w	r3, r3, #3
 800c664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c668:	e01b      	b.n	800c6a2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c66c:	2b40      	cmp	r3, #64	; 0x40
 800c66e:	d909      	bls.n	800c684 <create_name+0x294>
 800c670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c672:	2b5a      	cmp	r3, #90	; 0x5a
 800c674:	d806      	bhi.n	800c684 <create_name+0x294>
					b |= 2;
 800c676:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c67a:	f043 0302 	orr.w	r3, r3, #2
 800c67e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c682:	e00e      	b.n	800c6a2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c686:	2b60      	cmp	r3, #96	; 0x60
 800c688:	d90b      	bls.n	800c6a2 <create_name+0x2b2>
 800c68a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c68c:	2b7a      	cmp	r3, #122	; 0x7a
 800c68e:	d808      	bhi.n	800c6a2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c690:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c694:	f043 0301 	orr.w	r3, r3, #1
 800c698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c69c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c69e:	3b20      	subs	r3, #32
 800c6a0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	623a      	str	r2, [r7, #32]
 800c6a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c6aa:	b2d1      	uxtb	r1, r2
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	460a      	mov	r2, r1
 800c6b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c6b6:	e763      	b.n	800c580 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c6b8:	bf00      	nop
 800c6ba:	e000      	b.n	800c6be <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c6bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6c4:	2be5      	cmp	r3, #229	; 0xe5
 800c6c6:	d103      	bne.n	800c6d0 <create_name+0x2e0>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2205      	movs	r2, #5
 800c6cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d104      	bne.n	800c6e0 <create_name+0x2f0>
 800c6d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c6e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6e4:	f003 030c 	and.w	r3, r3, #12
 800c6e8:	2b0c      	cmp	r3, #12
 800c6ea:	d005      	beq.n	800c6f8 <create_name+0x308>
 800c6ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6f0:	f003 0303 	and.w	r3, r3, #3
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d105      	bne.n	800c704 <create_name+0x314>
 800c6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6fc:	f043 0302 	orr.w	r3, r3, #2
 800c700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d117      	bne.n	800c740 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c710:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c714:	f003 0303 	and.w	r3, r3, #3
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d105      	bne.n	800c728 <create_name+0x338>
 800c71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c720:	f043 0310 	orr.w	r3, r3, #16
 800c724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c728:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c72c:	f003 030c 	and.w	r3, r3, #12
 800c730:	2b04      	cmp	r3, #4
 800c732:	d105      	bne.n	800c740 <create_name+0x350>
 800c734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c738:	f043 0308 	orr.w	r3, r3, #8
 800c73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c746:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c74a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3728      	adds	r7, #40	; 0x28
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	08013e34 	.word	0x08013e34
 800c758:	08013f64 	.word	0x08013f64
 800c75c:	08013e40 	.word	0x08013e40

0800c760 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c774:	e002      	b.n	800c77c <follow_path+0x1c>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	3301      	adds	r3, #1
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2b2f      	cmp	r3, #47	; 0x2f
 800c782:	d0f8      	beq.n	800c776 <follow_path+0x16>
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b5c      	cmp	r3, #92	; 0x5c
 800c78a:	d0f4      	beq.n	800c776 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	2200      	movs	r2, #0
 800c790:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	2b1f      	cmp	r3, #31
 800c798:	d80a      	bhi.n	800c7b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2280      	movs	r2, #128	; 0x80
 800c79e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff f8fb 	bl	800b9a0 <dir_sdi>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	75fb      	strb	r3, [r7, #23]
 800c7ae:	e048      	b.n	800c842 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7b0:	463b      	mov	r3, r7
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff fe1b 	bl	800c3f0 <create_name>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7be:	7dfb      	ldrb	r3, [r7, #23]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d139      	bne.n	800c838 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff fc5a 	bl	800c07e <dir_find>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c7d6:	7dfb      	ldrb	r3, [r7, #23]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00a      	beq.n	800c7f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
 800c7de:	2b04      	cmp	r3, #4
 800c7e0:	d12c      	bne.n	800c83c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7e2:	7afb      	ldrb	r3, [r7, #11]
 800c7e4:	f003 0304 	and.w	r3, r3, #4
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d127      	bne.n	800c83c <follow_path+0xdc>
 800c7ec:	2305      	movs	r3, #5
 800c7ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7f0:	e024      	b.n	800c83c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	f003 0304 	and.w	r3, r3, #4
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d121      	bne.n	800c840 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	799b      	ldrb	r3, [r3, #6]
 800c800:	f003 0310 	and.w	r3, r3, #16
 800c804:	2b00      	cmp	r3, #0
 800c806:	d102      	bne.n	800c80e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c808:	2305      	movs	r3, #5
 800c80a:	75fb      	strb	r3, [r7, #23]
 800c80c:	e019      	b.n	800c842 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	695b      	ldr	r3, [r3, #20]
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	8992      	ldrh	r2, [r2, #12]
 800c81c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c820:	fb02 f200 	mul.w	r2, r2, r0
 800c824:	1a9b      	subs	r3, r3, r2
 800c826:	440b      	add	r3, r1
 800c828:	4619      	mov	r1, r3
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7ff fa5e 	bl	800bcec <ld_clust>
 800c830:	4602      	mov	r2, r0
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c836:	e7bb      	b.n	800c7b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c838:	bf00      	nop
 800c83a:	e002      	b.n	800c842 <follow_path+0xe2>
				break;
 800c83c:	bf00      	nop
 800c83e:	e000      	b.n	800c842 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c840:	bf00      	nop
			}
		}
	}

	return res;
 800c842:	7dfb      	ldrb	r3, [r7, #23]
}
 800c844:	4618      	mov	r0, r3
 800c846:	3718      	adds	r7, #24
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c858:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d031      	beq.n	800c8c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	617b      	str	r3, [r7, #20]
 800c868:	e002      	b.n	800c870 <get_ldnumber+0x24>
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	3301      	adds	r3, #1
 800c86e:	617b      	str	r3, [r7, #20]
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	2b1f      	cmp	r3, #31
 800c876:	d903      	bls.n	800c880 <get_ldnumber+0x34>
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b3a      	cmp	r3, #58	; 0x3a
 800c87e:	d1f4      	bne.n	800c86a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2b3a      	cmp	r3, #58	; 0x3a
 800c886:	d11c      	bne.n	800c8c2 <get_ldnumber+0x76>
			tp = *path;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	60fa      	str	r2, [r7, #12]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	3b30      	subs	r3, #48	; 0x30
 800c898:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	2b09      	cmp	r3, #9
 800c89e:	d80e      	bhi.n	800c8be <get_ldnumber+0x72>
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d10a      	bne.n	800c8be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d107      	bne.n	800c8be <get_ldnumber+0x72>
					vol = (int)i;
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	e002      	b.n	800c8c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8c6:	693b      	ldr	r3, [r7, #16]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	371c      	adds	r7, #28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	70da      	strb	r2, [r3, #3]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8ea:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7fe fc74 	bl	800b1dc <move_window>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d001      	beq.n	800c8fe <check_fs+0x2a>
 800c8fa:	2304      	movs	r3, #4
 800c8fc:	e038      	b.n	800c970 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	333c      	adds	r3, #60	; 0x3c
 800c902:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe f986 	bl	800ac18 <ld_word>
 800c90c:	4603      	mov	r3, r0
 800c90e:	461a      	mov	r2, r3
 800c910:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c914:	429a      	cmp	r2, r3
 800c916:	d001      	beq.n	800c91c <check_fs+0x48>
 800c918:	2303      	movs	r3, #3
 800c91a:	e029      	b.n	800c970 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c922:	2be9      	cmp	r3, #233	; 0xe9
 800c924:	d009      	beq.n	800c93a <check_fs+0x66>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c92c:	2beb      	cmp	r3, #235	; 0xeb
 800c92e:	d11e      	bne.n	800c96e <check_fs+0x9a>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c936:	2b90      	cmp	r3, #144	; 0x90
 800c938:	d119      	bne.n	800c96e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	333c      	adds	r3, #60	; 0x3c
 800c93e:	3336      	adds	r3, #54	; 0x36
 800c940:	4618      	mov	r0, r3
 800c942:	f7fe f981 	bl	800ac48 <ld_dword>
 800c946:	4603      	mov	r3, r0
 800c948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c94c:	4a0a      	ldr	r2, [pc, #40]	; (800c978 <check_fs+0xa4>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d101      	bne.n	800c956 <check_fs+0x82>
 800c952:	2300      	movs	r3, #0
 800c954:	e00c      	b.n	800c970 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	333c      	adds	r3, #60	; 0x3c
 800c95a:	3352      	adds	r3, #82	; 0x52
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe f973 	bl	800ac48 <ld_dword>
 800c962:	4603      	mov	r3, r0
 800c964:	4a05      	ldr	r2, [pc, #20]	; (800c97c <check_fs+0xa8>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d101      	bne.n	800c96e <check_fs+0x9a>
 800c96a:	2300      	movs	r3, #0
 800c96c:	e000      	b.n	800c970 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c96e:	2302      	movs	r3, #2
}
 800c970:	4618      	mov	r0, r3
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	00544146 	.word	0x00544146
 800c97c:	33544146 	.word	0x33544146

0800c980 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b096      	sub	sp, #88	; 0x58
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	4613      	mov	r3, r2
 800c98c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2200      	movs	r2, #0
 800c992:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f7ff ff59 	bl	800c84c <get_ldnumber>
 800c99a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	da01      	bge.n	800c9a6 <find_volume+0x26>
 800c9a2:	230b      	movs	r3, #11
 800c9a4:	e26c      	b.n	800ce80 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c9a6:	4aa4      	ldr	r2, [pc, #656]	; (800cc38 <find_volume+0x2b8>)
 800c9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <find_volume+0x3a>
 800c9b6:	230c      	movs	r3, #12
 800c9b8:	e262      	b.n	800ce80 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800c9ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9bc:	f7fe fa2c 	bl	800ae18 <lock_fs>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d101      	bne.n	800c9ca <find_volume+0x4a>
 800c9c6:	230f      	movs	r3, #15
 800c9c8:	e25a      	b.n	800ce80 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c9d0:	79fb      	ldrb	r3, [r7, #7]
 800c9d2:	f023 0301 	bic.w	r3, r3, #1
 800c9d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d01a      	beq.n	800ca16 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	785b      	ldrb	r3, [r3, #1]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe f879 	bl	800aadc <disk_status>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10c      	bne.n	800ca16 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d007      	beq.n	800ca12 <find_volume+0x92>
 800ca02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca06:	f003 0304 	and.w	r3, r3, #4
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d001      	beq.n	800ca12 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ca0e:	230a      	movs	r3, #10
 800ca10:	e236      	b.n	800ce80 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800ca12:	2300      	movs	r3, #0
 800ca14:	e234      	b.n	800ce80 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca18:	2200      	movs	r2, #0
 800ca1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	785b      	ldrb	r3, [r3, #1]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe f871 	bl	800ab10 <disk_initialize>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca40:	2303      	movs	r3, #3
 800ca42:	e21d      	b.n	800ce80 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d007      	beq.n	800ca5a <find_volume+0xda>
 800ca4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca4e:	f003 0304 	and.w	r3, r3, #4
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ca56:	230a      	movs	r3, #10
 800ca58:	e212      	b.n	800ce80 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	7858      	ldrb	r0, [r3, #1]
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca60:	330c      	adds	r3, #12
 800ca62:	461a      	mov	r2, r3
 800ca64:	2102      	movs	r1, #2
 800ca66:	f7fe f8b9 	bl	800abdc <disk_ioctl>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <find_volume+0xf4>
 800ca70:	2301      	movs	r3, #1
 800ca72:	e205      	b.n	800ce80 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	899b      	ldrh	r3, [r3, #12]
 800ca78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca7c:	d80d      	bhi.n	800ca9a <find_volume+0x11a>
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca80:	899b      	ldrh	r3, [r3, #12]
 800ca82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca86:	d308      	bcc.n	800ca9a <find_volume+0x11a>
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	899b      	ldrh	r3, [r3, #12]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	899b      	ldrh	r3, [r3, #12]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	4013      	ands	r3, r2
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <find_volume+0x11e>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e1f0      	b.n	800ce80 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800caa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800caa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800caa6:	f7ff ff15 	bl	800c8d4 <check_fs>
 800caaa:	4603      	mov	r3, r0
 800caac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d14b      	bne.n	800cb50 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cab8:	2300      	movs	r3, #0
 800caba:	643b      	str	r3, [r7, #64]	; 0x40
 800cabc:	e01f      	b.n	800cafe <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800cac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cac6:	011b      	lsls	r3, r3, #4
 800cac8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cacc:	4413      	add	r3, r2
 800cace:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	3304      	adds	r3, #4
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d006      	beq.n	800cae8 <find_volume+0x168>
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	3308      	adds	r3, #8
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe f8b2 	bl	800ac48 <ld_dword>
 800cae4:	4602      	mov	r2, r0
 800cae6:	e000      	b.n	800caea <find_volume+0x16a>
 800cae8:	2200      	movs	r2, #0
 800caea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800caf2:	440b      	add	r3, r1
 800caf4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800caf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cafa:	3301      	adds	r3, #1
 800cafc:	643b      	str	r3, [r7, #64]	; 0x40
 800cafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d9dc      	bls.n	800cabe <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb04:	2300      	movs	r3, #0
 800cb06:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cb08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d002      	beq.n	800cb14 <find_volume+0x194>
 800cb0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb10:	3b01      	subs	r3, #1
 800cb12:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cb1c:	4413      	add	r3, r2
 800cb1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb22:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d005      	beq.n	800cb36 <find_volume+0x1b6>
 800cb2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb2e:	f7ff fed1 	bl	800c8d4 <check_fs>
 800cb32:	4603      	mov	r3, r0
 800cb34:	e000      	b.n	800cb38 <find_volume+0x1b8>
 800cb36:	2303      	movs	r3, #3
 800cb38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d905      	bls.n	800cb50 <find_volume+0x1d0>
 800cb44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb46:	3301      	adds	r3, #1
 800cb48:	643b      	str	r3, [r7, #64]	; 0x40
 800cb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d9e1      	bls.n	800cb14 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	d101      	bne.n	800cb5c <find_volume+0x1dc>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e191      	b.n	800ce80 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d901      	bls.n	800cb68 <find_volume+0x1e8>
 800cb64:	230d      	movs	r3, #13
 800cb66:	e18b      	b.n	800ce80 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	333c      	adds	r3, #60	; 0x3c
 800cb6c:	330b      	adds	r3, #11
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fe f852 	bl	800ac18 <ld_word>
 800cb74:	4603      	mov	r3, r0
 800cb76:	461a      	mov	r2, r3
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	899b      	ldrh	r3, [r3, #12]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d001      	beq.n	800cb84 <find_volume+0x204>
 800cb80:	230d      	movs	r3, #13
 800cb82:	e17d      	b.n	800ce80 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	333c      	adds	r3, #60	; 0x3c
 800cb88:	3316      	adds	r3, #22
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fe f844 	bl	800ac18 <ld_word>
 800cb90:	4603      	mov	r3, r0
 800cb92:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d106      	bne.n	800cba8 <find_volume+0x228>
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	333c      	adds	r3, #60	; 0x3c
 800cb9e:	3324      	adds	r3, #36	; 0x24
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7fe f851 	bl	800ac48 <ld_dword>
 800cba6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbac:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	789b      	ldrb	r3, [r3, #2]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d005      	beq.n	800cbcc <find_volume+0x24c>
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	789b      	ldrb	r3, [r3, #2]
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d001      	beq.n	800cbcc <find_volume+0x24c>
 800cbc8:	230d      	movs	r3, #13
 800cbca:	e159      	b.n	800ce80 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	789b      	ldrb	r3, [r3, #2]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd4:	fb02 f303 	mul.w	r3, r2, r3
 800cbd8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	895b      	ldrh	r3, [r3, #10]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d008      	beq.n	800cc00 <find_volume+0x280>
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	895b      	ldrh	r3, [r3, #10]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	895b      	ldrh	r3, [r3, #10]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d001      	beq.n	800cc04 <find_volume+0x284>
 800cc00:	230d      	movs	r3, #13
 800cc02:	e13d      	b.n	800ce80 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	333c      	adds	r3, #60	; 0x3c
 800cc08:	3311      	adds	r3, #17
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe f804 	bl	800ac18 <ld_word>
 800cc10:	4603      	mov	r3, r0
 800cc12:	461a      	mov	r2, r3
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	891b      	ldrh	r3, [r3, #8]
 800cc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc1e:	8992      	ldrh	r2, [r2, #12]
 800cc20:	0952      	lsrs	r2, r2, #5
 800cc22:	b292      	uxth	r2, r2
 800cc24:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc28:	fb02 f201 	mul.w	r2, r2, r1
 800cc2c:	1a9b      	subs	r3, r3, r2
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d003      	beq.n	800cc3c <find_volume+0x2bc>
 800cc34:	230d      	movs	r3, #13
 800cc36:	e123      	b.n	800ce80 <find_volume+0x500>
 800cc38:	200001f0 	.word	0x200001f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	333c      	adds	r3, #60	; 0x3c
 800cc40:	3313      	adds	r3, #19
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fd ffe8 	bl	800ac18 <ld_word>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d106      	bne.n	800cc60 <find_volume+0x2e0>
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	333c      	adds	r3, #60	; 0x3c
 800cc56:	3320      	adds	r3, #32
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fd fff5 	bl	800ac48 <ld_dword>
 800cc5e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	333c      	adds	r3, #60	; 0x3c
 800cc64:	330e      	adds	r3, #14
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fd ffd6 	bl	800ac18 <ld_word>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d101      	bne.n	800cc7a <find_volume+0x2fa>
 800cc76:	230d      	movs	r3, #13
 800cc78:	e102      	b.n	800ce80 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc7e:	4413      	add	r3, r2
 800cc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc82:	8911      	ldrh	r1, [r2, #8]
 800cc84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc86:	8992      	ldrh	r2, [r2, #12]
 800cc88:	0952      	lsrs	r2, r2, #5
 800cc8a:	b292      	uxth	r2, r2
 800cc8c:	fbb1 f2f2 	udiv	r2, r1, r2
 800cc90:	b292      	uxth	r2, r2
 800cc92:	4413      	add	r3, r2
 800cc94:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cc96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d201      	bcs.n	800cca2 <find_volume+0x322>
 800cc9e:	230d      	movs	r3, #13
 800cca0:	e0ee      	b.n	800ce80 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccaa:	8952      	ldrh	r2, [r2, #10]
 800ccac:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <find_volume+0x33c>
 800ccb8:	230d      	movs	r3, #13
 800ccba:	e0e1      	b.n	800ce80 <find_volume+0x500>
		fmt = FS_FAT32;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d802      	bhi.n	800ccd2 <find_volume+0x352>
 800cccc:	2302      	movs	r3, #2
 800ccce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d802      	bhi.n	800cce2 <find_volume+0x362>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	1c9a      	adds	r2, r3, #2
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccee:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ccf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf4:	441a      	add	r2, r3
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800ccfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	441a      	add	r2, r3
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800cd04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd08:	2b03      	cmp	r3, #3
 800cd0a:	d11e      	bne.n	800cd4a <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	333c      	adds	r3, #60	; 0x3c
 800cd10:	332a      	adds	r3, #42	; 0x2a
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fd ff80 	bl	800ac18 <ld_word>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <find_volume+0x3a2>
 800cd1e:	230d      	movs	r3, #13
 800cd20:	e0ae      	b.n	800ce80 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd24:	891b      	ldrh	r3, [r3, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d001      	beq.n	800cd2e <find_volume+0x3ae>
 800cd2a:	230d      	movs	r3, #13
 800cd2c:	e0a8      	b.n	800ce80 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	333c      	adds	r3, #60	; 0x3c
 800cd32:	332c      	adds	r3, #44	; 0x2c
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fd ff87 	bl	800ac48 <ld_dword>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	647b      	str	r3, [r7, #68]	; 0x44
 800cd48:	e01f      	b.n	800cd8a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	891b      	ldrh	r3, [r3, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d101      	bne.n	800cd56 <find_volume+0x3d6>
 800cd52:	230d      	movs	r3, #13
 800cd54:	e094      	b.n	800ce80 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd5c:	441a      	add	r2, r3
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d103      	bne.n	800cd72 <find_volume+0x3f2>
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	e00a      	b.n	800cd88 <find_volume+0x408>
 800cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd74:	6a1a      	ldr	r2, [r3, #32]
 800cd76:	4613      	mov	r3, r2
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	4413      	add	r3, r2
 800cd7c:	085a      	lsrs	r2, r3, #1
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd88:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	899b      	ldrh	r3, [r3, #12]
 800cd92:	4619      	mov	r1, r3
 800cd94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd96:	440b      	add	r3, r1
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd9c:	8989      	ldrh	r1, [r1, #12]
 800cd9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d201      	bcs.n	800cdaa <find_volume+0x42a>
 800cda6:	230d      	movs	r3, #13
 800cda8:	e06a      	b.n	800ce80 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdb0:	61da      	str	r2, [r3, #28]
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	69da      	ldr	r2, [r3, #28]
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800cdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbc:	2280      	movs	r2, #128	; 0x80
 800cdbe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cdc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d149      	bne.n	800ce5c <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	333c      	adds	r3, #60	; 0x3c
 800cdcc:	3330      	adds	r3, #48	; 0x30
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fd ff22 	bl	800ac18 <ld_word>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d140      	bne.n	800ce5c <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cdda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cddc:	3301      	adds	r3, #1
 800cdde:	4619      	mov	r1, r3
 800cde0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cde2:	f7fe f9fb 	bl	800b1dc <move_window>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d137      	bne.n	800ce5c <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	2200      	movs	r2, #0
 800cdf0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf4:	333c      	adds	r3, #60	; 0x3c
 800cdf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fd ff0c 	bl	800ac18 <ld_word>
 800ce00:	4603      	mov	r3, r0
 800ce02:	461a      	mov	r2, r3
 800ce04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d127      	bne.n	800ce5c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	333c      	adds	r3, #60	; 0x3c
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fd ff19 	bl	800ac48 <ld_dword>
 800ce16:	4603      	mov	r3, r0
 800ce18:	4a1b      	ldr	r2, [pc, #108]	; (800ce88 <find_volume+0x508>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d11e      	bne.n	800ce5c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce20:	333c      	adds	r3, #60	; 0x3c
 800ce22:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fd ff0e 	bl	800ac48 <ld_dword>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	4a17      	ldr	r2, [pc, #92]	; (800ce8c <find_volume+0x50c>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d113      	bne.n	800ce5c <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	333c      	adds	r3, #60	; 0x3c
 800ce38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7fd ff03 	bl	800ac48 <ld_dword>
 800ce42:	4602      	mov	r2, r0
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	333c      	adds	r3, #60	; 0x3c
 800ce4c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fd fef9 	bl	800ac48 <ld_dword>
 800ce56:	4602      	mov	r2, r0
 800ce58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ce62:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce64:	4b0a      	ldr	r3, [pc, #40]	; (800ce90 <find_volume+0x510>)
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	4b08      	ldr	r3, [pc, #32]	; (800ce90 <find_volume+0x510>)
 800ce6e:	801a      	strh	r2, [r3, #0]
 800ce70:	4b07      	ldr	r3, [pc, #28]	; (800ce90 <find_volume+0x510>)
 800ce72:	881a      	ldrh	r2, [r3, #0]
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce7a:	f7fe f947 	bl	800b10c <clear_lock>
#endif
	return FR_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3758      	adds	r7, #88	; 0x58
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	41615252 	.word	0x41615252
 800ce8c:	61417272 	.word	0x61417272
 800ce90:	200001f4 	.word	0x200001f4

0800ce94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ce9e:	2309      	movs	r3, #9
 800cea0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d02e      	beq.n	800cf06 <validate+0x72>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d02a      	beq.n	800cf06 <validate+0x72>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d025      	beq.n	800cf06 <validate+0x72>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	889a      	ldrh	r2, [r3, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	88db      	ldrh	r3, [r3, #6]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d11e      	bne.n	800cf06 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fd ffa3 	bl	800ae18 <lock_fs>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d014      	beq.n	800cf02 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	785b      	ldrb	r3, [r3, #1]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fd fdfc 	bl	800aadc <disk_status>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d102      	bne.n	800cef4 <validate+0x60>
				res = FR_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	73fb      	strb	r3, [r7, #15]
 800cef2:	e008      	b.n	800cf06 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2100      	movs	r1, #0
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd ffa2 	bl	800ae44 <unlock_fs>
 800cf00:	e001      	b.n	800cf06 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800cf02:	230f      	movs	r3, #15
 800cf04:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf06:	7bfb      	ldrb	r3, [r7, #15]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d102      	bne.n	800cf12 <validate+0x7e>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	e000      	b.n	800cf14 <validate+0x80>
 800cf12:	2300      	movs	r3, #0
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	6013      	str	r3, [r2, #0]
	return res;
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf36:	f107 0310 	add.w	r3, r7, #16
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff fc86 	bl	800c84c <get_ldnumber>
 800cf40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	da01      	bge.n	800cf4c <f_mount+0x28>
 800cf48:	230b      	movs	r3, #11
 800cf4a:	e048      	b.n	800cfde <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf4c:	4a26      	ldr	r2, [pc, #152]	; (800cfe8 <f_mount+0xc4>)
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00f      	beq.n	800cf7c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf5c:	69b8      	ldr	r0, [r7, #24]
 800cf5e:	f7fe f8d5 	bl	800b10c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fdab 	bl	800dac2 <ff_del_syncobj>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <f_mount+0x52>
 800cf72:	2302      	movs	r3, #2
 800cf74:	e033      	b.n	800cfde <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00f      	beq.n	800cfa2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	b2da      	uxtb	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	3314      	adds	r3, #20
 800cf90:	4619      	mov	r1, r3
 800cf92:	4610      	mov	r0, r2
 800cf94:	f000 fd7a 	bl	800da8c <ff_cre_syncobj>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <f_mount+0x7e>
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	e01d      	b.n	800cfde <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	4910      	ldr	r1, [pc, #64]	; (800cfe8 <f_mount+0xc4>)
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d002      	beq.n	800cfb8 <f_mount+0x94>
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d001      	beq.n	800cfbc <f_mount+0x98>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	e010      	b.n	800cfde <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cfbc:	f107 010c 	add.w	r1, r7, #12
 800cfc0:	f107 0308 	add.w	r3, r7, #8
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7ff fcda 	bl	800c980 <find_volume>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	7dfa      	ldrb	r2, [r7, #23]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fd ff34 	bl	800ae44 <unlock_fs>
 800cfdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	200001f0 	.word	0x200001f0

0800cfec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b09a      	sub	sp, #104	; 0x68
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <f_open+0x18>
 800d000:	2309      	movs	r3, #9
 800d002:	e1d7      	b.n	800d3b4 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d00a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d00c:	79fa      	ldrb	r2, [r7, #7]
 800d00e:	f107 0110 	add.w	r1, r7, #16
 800d012:	f107 0308 	add.w	r3, r7, #8
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff fcb2 	bl	800c980 <find_volume>
 800d01c:	4603      	mov	r3, r0
 800d01e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d022:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d026:	2b00      	cmp	r3, #0
 800d028:	f040 81b4 	bne.w	800d394 <f_open+0x3a8>
		dj.obj.fs = fs;
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d030:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d034:	f000 fd71 	bl	800db1a <ff_memalloc>
 800d038:	65b8      	str	r0, [r7, #88]	; 0x58
 800d03a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d106      	bne.n	800d04e <f_open+0x62>
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	2111      	movs	r1, #17
 800d044:	4618      	mov	r0, r3
 800d046:	f7fd fefd 	bl	800ae44 <unlock_fs>
 800d04a:	2311      	movs	r3, #17
 800d04c:	e1b2      	b.n	800d3b4 <f_open+0x3c8>
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d052:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	f107 0314 	add.w	r3, r7, #20
 800d05a:	4611      	mov	r1, r2
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff fb7f 	bl	800c760 <follow_path>
 800d062:	4603      	mov	r3, r0
 800d064:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d068:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d11a      	bne.n	800d0a6 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d070:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d074:	b25b      	sxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	da03      	bge.n	800d082 <f_open+0x96>
				res = FR_INVALID_NAME;
 800d07a:	2306      	movs	r3, #6
 800d07c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d080:	e011      	b.n	800d0a6 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	f023 0301 	bic.w	r3, r3, #1
 800d088:	2b00      	cmp	r3, #0
 800d08a:	bf14      	ite	ne
 800d08c:	2301      	movne	r3, #1
 800d08e:	2300      	moveq	r3, #0
 800d090:	b2db      	uxtb	r3, r3
 800d092:	461a      	mov	r2, r3
 800d094:	f107 0314 	add.w	r3, r7, #20
 800d098:	4611      	mov	r1, r2
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fd feee 	bl	800ae7c <chk_lock>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	f003 031c 	and.w	r3, r3, #28
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d07f      	beq.n	800d1b0 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800d0b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d017      	beq.n	800d0e8 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d0b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0bc:	2b04      	cmp	r3, #4
 800d0be:	d10e      	bne.n	800d0de <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d0c0:	f7fd ff38 	bl	800af34 <enq_lock>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d006      	beq.n	800d0d8 <f_open+0xec>
 800d0ca:	f107 0314 	add.w	r3, r7, #20
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7ff f896 	bl	800c200 <dir_register>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	e000      	b.n	800d0da <f_open+0xee>
 800d0d8:	2312      	movs	r3, #18
 800d0da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	f043 0308 	orr.w	r3, r3, #8
 800d0e4:	71fb      	strb	r3, [r7, #7]
 800d0e6:	e010      	b.n	800d10a <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d0e8:	7ebb      	ldrb	r3, [r7, #26]
 800d0ea:	f003 0311 	and.w	r3, r3, #17
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d003      	beq.n	800d0fa <f_open+0x10e>
					res = FR_DENIED;
 800d0f2:	2307      	movs	r3, #7
 800d0f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0f8:	e007      	b.n	800d10a <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	f003 0304 	and.w	r3, r3, #4
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <f_open+0x11e>
 800d104:	2308      	movs	r3, #8
 800d106:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d10a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d168      	bne.n	800d1e4 <f_open+0x1f8>
 800d112:	79fb      	ldrb	r3, [r7, #7]
 800d114:	f003 0308 	and.w	r3, r3, #8
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d063      	beq.n	800d1e4 <f_open+0x1f8>
				dw = GET_FATTIME();
 800d11c:	f7fd fc80 	bl	800aa20 <get_fattime>
 800d120:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d124:	330e      	adds	r3, #14
 800d126:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fd fdcb 	bl	800acc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d130:	3316      	adds	r3, #22
 800d132:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d134:	4618      	mov	r0, r3
 800d136:	f7fd fdc5 	bl	800acc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13c:	330b      	adds	r3, #11
 800d13e:	2220      	movs	r2, #32
 800d140:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d146:	4611      	mov	r1, r2
 800d148:	4618      	mov	r0, r3
 800d14a:	f7fe fdcf 	bl	800bcec <ld_clust>
 800d14e:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d154:	2200      	movs	r2, #0
 800d156:	4618      	mov	r0, r3
 800d158:	f7fe fde7 	bl	800bd2a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15e:	331c      	adds	r3, #28
 800d160:	2100      	movs	r1, #0
 800d162:	4618      	mov	r0, r3
 800d164:	f7fd fdae 	bl	800acc4 <st_dword>
					fs->wflag = 1;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	2201      	movs	r2, #1
 800d16c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d170:	2b00      	cmp	r3, #0
 800d172:	d037      	beq.n	800d1e4 <f_open+0x1f8>
						dw = fs->winsect;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d178:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800d17a:	f107 0314 	add.w	r3, r7, #20
 800d17e:	2200      	movs	r2, #0
 800d180:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe fad7 	bl	800b736 <remove_chain>
 800d188:	4603      	mov	r3, r0
 800d18a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d18e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d192:	2b00      	cmp	r3, #0
 800d194:	d126      	bne.n	800d1e4 <f_open+0x1f8>
							res = move_window(fs, dw);
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe f81e 	bl	800b1dc <move_window>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1aa:	3a01      	subs	r2, #1
 800d1ac:	619a      	str	r2, [r3, #24]
 800d1ae:	e019      	b.n	800d1e4 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d1b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d115      	bne.n	800d1e4 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d1b8:	7ebb      	ldrb	r3, [r7, #26]
 800d1ba:	f003 0310 	and.w	r3, r3, #16
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <f_open+0x1de>
					res = FR_NO_FILE;
 800d1c2:	2304      	movs	r3, #4
 800d1c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d1c8:	e00c      	b.n	800d1e4 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d1ca:	79fb      	ldrb	r3, [r7, #7]
 800d1cc:	f003 0302 	and.w	r3, r3, #2
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d007      	beq.n	800d1e4 <f_open+0x1f8>
 800d1d4:	7ebb      	ldrb	r3, [r7, #26]
 800d1d6:	f003 0301 	and.w	r3, r3, #1
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <f_open+0x1f8>
						res = FR_DENIED;
 800d1de:	2307      	movs	r3, #7
 800d1e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d1e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d128      	bne.n	800d23e <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	f003 0308 	and.w	r3, r3, #8
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d003      	beq.n	800d1fe <f_open+0x212>
				mode |= FA_MODIFIED;
 800d1f6:	79fb      	ldrb	r3, [r7, #7]
 800d1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	f023 0301 	bic.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	bf14      	ite	ne
 800d216:	2301      	movne	r3, #1
 800d218:	2300      	moveq	r3, #0
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	461a      	mov	r2, r3
 800d21e:	f107 0314 	add.w	r3, r7, #20
 800d222:	4611      	mov	r1, r2
 800d224:	4618      	mov	r0, r3
 800d226:	f7fd fea7 	bl	800af78 <inc_lock>
 800d22a:	4602      	mov	r2, r0
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d102      	bne.n	800d23e <f_open+0x252>
 800d238:	2302      	movs	r3, #2
 800d23a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d23e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 80a3 	bne.w	800d38e <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe fd4c 	bl	800bcec <ld_clust>
 800d254:	4602      	mov	r2, r0
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d25c:	331c      	adds	r3, #28
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fd fcf2 	bl	800ac48 <ld_dword>
 800d264:	4602      	mov	r2, r0
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	88da      	ldrh	r2, [r3, #6]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	79fa      	ldrb	r2, [r7, #7]
 800d282:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2200      	movs	r2, #0
 800d294:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	3330      	adds	r3, #48	; 0x30
 800d29a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d29e:	2100      	movs	r1, #0
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fd fd5c 	bl	800ad5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d2a6:	79fb      	ldrb	r3, [r7, #7]
 800d2a8:	f003 0320 	and.w	r3, r3, #32
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d06e      	beq.n	800d38e <f_open+0x3a2>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d06a      	beq.n	800d38e <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	68da      	ldr	r2, [r3, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	895b      	ldrh	r3, [r3, #10]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	899b      	ldrh	r3, [r3, #12]
 800d2ca:	fb03 f302 	mul.w	r3, r3, r2
 800d2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2dc:	e016      	b.n	800d30c <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fe f837 	bl	800b356 <get_fat>
 800d2e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d2ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d802      	bhi.n	800d2f6 <f_open+0x30a>
 800d2f0:	2302      	movs	r3, #2
 800d2f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2fc:	d102      	bne.n	800d304 <f_open+0x318>
 800d2fe:	2301      	movs	r3, #1
 800d300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d308:	1ad3      	subs	r3, r2, r3
 800d30a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d30c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d310:	2b00      	cmp	r3, #0
 800d312:	d103      	bne.n	800d31c <f_open+0x330>
 800d314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d318:	429a      	cmp	r2, r3
 800d31a:	d8e0      	bhi.n	800d2de <f_open+0x2f2>
				}
				fp->clust = clst;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d320:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d326:	2b00      	cmp	r3, #0
 800d328:	d131      	bne.n	800d38e <f_open+0x3a2>
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	899b      	ldrh	r3, [r3, #12]
 800d32e:	461a      	mov	r2, r3
 800d330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d332:	fbb3 f1f2 	udiv	r1, r3, r2
 800d336:	fb02 f201 	mul.w	r2, r2, r1
 800d33a:	1a9b      	subs	r3, r3, r2
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d026      	beq.n	800d38e <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d344:	4618      	mov	r0, r3
 800d346:	f7fd ffe7 	bl	800b318 <clust2sect>
 800d34a:	64b8      	str	r0, [r7, #72]	; 0x48
 800d34c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d103      	bne.n	800d35a <f_open+0x36e>
						res = FR_INT_ERR;
 800d352:	2302      	movs	r3, #2
 800d354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d358:	e019      	b.n	800d38e <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	899b      	ldrh	r3, [r3, #12]
 800d35e:	461a      	mov	r2, r3
 800d360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d362:	fbb3 f2f2 	udiv	r2, r3, r2
 800d366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d368:	441a      	add	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	7858      	ldrb	r0, [r3, #1]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6a1a      	ldr	r2, [r3, #32]
 800d37c:	2301      	movs	r3, #1
 800d37e:	f7fd fbed 	bl	800ab5c <disk_read>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d002      	beq.n	800d38e <f_open+0x3a2>
 800d388:	2301      	movs	r3, #1
 800d38a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d38e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d390:	f000 fbcf 	bl	800db32 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <f_open+0x3b6>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fd fd4a 	bl	800ae44 <unlock_fs>
 800d3b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3768      	adds	r7, #104	; 0x68
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b08e      	sub	sp, #56	; 0x38
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
 800d3c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f107 0214 	add.w	r2, r7, #20
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff fd59 	bl	800ce94 <validate>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d3e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d107      	bne.n	800d400 <f_read+0x44>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	7d5b      	ldrb	r3, [r3, #21]
 800d3f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d3f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d009      	beq.n	800d414 <f_read+0x58>
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fd fd1b 	bl	800ae44 <unlock_fs>
 800d40e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d412:	e15d      	b.n	800d6d0 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	7d1b      	ldrb	r3, [r3, #20]
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d106      	bne.n	800d42e <f_read+0x72>
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2107      	movs	r1, #7
 800d424:	4618      	mov	r0, r3
 800d426:	f7fd fd0d 	bl	800ae44 <unlock_fs>
 800d42a:	2307      	movs	r3, #7
 800d42c:	e150      	b.n	800d6d0 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	429a      	cmp	r2, r3
 800d440:	f240 813c 	bls.w	800d6bc <f_read+0x300>
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d448:	e138      	b.n	800d6bc <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	8992      	ldrh	r2, [r2, #12]
 800d452:	fbb3 f1f2 	udiv	r1, r3, r2
 800d456:	fb02 f201 	mul.w	r2, r2, r1
 800d45a:	1a9b      	subs	r3, r3, r2
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f040 80f3 	bne.w	800d648 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	8992      	ldrh	r2, [r2, #12]
 800d46a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	8952      	ldrh	r2, [r2, #10]
 800d472:	3a01      	subs	r2, #1
 800d474:	4013      	ands	r3, r2
 800d476:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d139      	bne.n	800d4f2 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d103      	bne.n	800d48e <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	633b      	str	r3, [r7, #48]	; 0x30
 800d48c:	e013      	b.n	800d4b6 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d492:	2b00      	cmp	r3, #0
 800d494:	d007      	beq.n	800d4a6 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	4619      	mov	r1, r3
 800d49c:	68f8      	ldr	r0, [r7, #12]
 800d49e:	f7fe fa47 	bl	800b930 <clmt_clust>
 800d4a2:	6338      	str	r0, [r7, #48]	; 0x30
 800d4a4:	e007      	b.n	800d4b6 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d4a6:	68fa      	ldr	r2, [r7, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	69db      	ldr	r3, [r3, #28]
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	f7fd ff51 	bl	800b356 <get_fat>
 800d4b4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d809      	bhi.n	800d4d0 <f_read+0x114>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2202      	movs	r2, #2
 800d4c0:	755a      	strb	r2, [r3, #21]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2102      	movs	r1, #2
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fd fcbc 	bl	800ae44 <unlock_fs>
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	e0ff      	b.n	800d6d0 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4d6:	d109      	bne.n	800d4ec <f_read+0x130>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	755a      	strb	r2, [r3, #21]
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fd fcae 	bl	800ae44 <unlock_fs>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e0f1      	b.n	800d6d0 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4f2:	697a      	ldr	r2, [r7, #20]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	69db      	ldr	r3, [r3, #28]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	f7fd ff0c 	bl	800b318 <clust2sect>
 800d500:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d109      	bne.n	800d51c <f_read+0x160>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2202      	movs	r2, #2
 800d50c:	755a      	strb	r2, [r3, #21]
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	2102      	movs	r1, #2
 800d512:	4618      	mov	r0, r3
 800d514:	f7fd fc96 	bl	800ae44 <unlock_fs>
 800d518:	2302      	movs	r3, #2
 800d51a:	e0d9      	b.n	800d6d0 <f_read+0x314>
			sect += csect;
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	4413      	add	r3, r2
 800d522:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	899b      	ldrh	r3, [r3, #12]
 800d528:	461a      	mov	r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d530:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d534:	2b00      	cmp	r3, #0
 800d536:	d046      	beq.n	800d5c6 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d538:	69fa      	ldr	r2, [r7, #28]
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	4413      	add	r3, r2
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	8952      	ldrh	r2, [r2, #10]
 800d542:	4293      	cmp	r3, r2
 800d544:	d905      	bls.n	800d552 <f_read+0x196>
					cc = fs->csize - csect;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	895b      	ldrh	r3, [r3, #10]
 800d54a:	461a      	mov	r2, r3
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	7858      	ldrb	r0, [r3, #1]
 800d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d558:	69ba      	ldr	r2, [r7, #24]
 800d55a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d55c:	f7fd fafe 	bl	800ab5c <disk_read>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d009      	beq.n	800d57a <f_read+0x1be>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2201      	movs	r2, #1
 800d56a:	755a      	strb	r2, [r3, #21]
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	2101      	movs	r1, #1
 800d570:	4618      	mov	r0, r3
 800d572:	f7fd fc67 	bl	800ae44 <unlock_fs>
 800d576:	2301      	movs	r3, #1
 800d578:	e0aa      	b.n	800d6d0 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	7d1b      	ldrb	r3, [r3, #20]
 800d57e:	b25b      	sxtb	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	da18      	bge.n	800d5b6 <f_read+0x1fa>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6a1a      	ldr	r2, [r3, #32]
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d58e:	429a      	cmp	r2, r3
 800d590:	d911      	bls.n	800d5b6 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6a1a      	ldr	r2, [r3, #32]
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	8992      	ldrh	r2, [r2, #12]
 800d59e:	fb02 f303 	mul.w	r3, r2, r3
 800d5a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5a4:	18d0      	adds	r0, r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	899b      	ldrh	r3, [r3, #12]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	f7fd fbb3 	bl	800ad1c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	899b      	ldrh	r3, [r3, #12]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	fb02 f303 	mul.w	r3, r2, r3
 800d5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d5c4:	e066      	b.n	800d694 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	69ba      	ldr	r2, [r7, #24]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d038      	beq.n	800d642 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	7d1b      	ldrb	r3, [r3, #20]
 800d5d4:	b25b      	sxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	da1d      	bge.n	800d616 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	7858      	ldrb	r0, [r3, #1]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6a1a      	ldr	r2, [r3, #32]
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	f7fd fad7 	bl	800ab9c <disk_write>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d009      	beq.n	800d608 <f_read+0x24c>
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	755a      	strb	r2, [r3, #21]
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2101      	movs	r1, #1
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fd fc20 	bl	800ae44 <unlock_fs>
 800d604:	2301      	movs	r3, #1
 800d606:	e063      	b.n	800d6d0 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	7d1b      	ldrb	r3, [r3, #20]
 800d60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d610:	b2da      	uxtb	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	7858      	ldrb	r0, [r3, #1]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d620:	2301      	movs	r3, #1
 800d622:	69ba      	ldr	r2, [r7, #24]
 800d624:	f7fd fa9a 	bl	800ab5c <disk_read>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d009      	beq.n	800d642 <f_read+0x286>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	755a      	strb	r2, [r3, #21]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2101      	movs	r1, #1
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fd fc03 	bl	800ae44 <unlock_fs>
 800d63e:	2301      	movs	r3, #1
 800d640:	e046      	b.n	800d6d0 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	69ba      	ldr	r2, [r7, #24]
 800d646:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	899b      	ldrh	r3, [r3, #12]
 800d64c:	4618      	mov	r0, r3
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	8992      	ldrh	r2, [r2, #12]
 800d656:	fbb3 f1f2 	udiv	r1, r3, r2
 800d65a:	fb02 f201 	mul.w	r2, r2, r1
 800d65e:	1a9b      	subs	r3, r3, r2
 800d660:	1ac3      	subs	r3, r0, r3
 800d662:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d901      	bls.n	800d670 <f_read+0x2b4>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	697a      	ldr	r2, [r7, #20]
 800d67c:	8992      	ldrh	r2, [r2, #12]
 800d67e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d682:	fb02 f200 	mul.w	r2, r2, r0
 800d686:	1a9b      	subs	r3, r3, r2
 800d688:	440b      	add	r3, r1
 800d68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d68c:	4619      	mov	r1, r3
 800d68e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d690:	f7fd fb44 	bl	800ad1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d698:	4413      	add	r3, r2
 800d69a:	627b      	str	r3, [r7, #36]	; 0x24
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	699a      	ldr	r2, [r3, #24]
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	441a      	add	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	619a      	str	r2, [r3, #24]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	441a      	add	r2, r3
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f47f aec3 	bne.w	800d44a <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fd fbbb 	bl	800ae44 <unlock_fs>
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3738      	adds	r7, #56	; 0x38
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f107 0208 	add.w	r2, r7, #8
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7ff fbd3 	bl	800ce94 <validate>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d16d      	bne.n	800d7d4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d700:	2b00      	cmp	r3, #0
 800d702:	d067      	beq.n	800d7d4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	7d1b      	ldrb	r3, [r3, #20]
 800d708:	b25b      	sxtb	r3, r3
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	da1a      	bge.n	800d744 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	7858      	ldrb	r0, [r3, #1]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a1a      	ldr	r2, [r3, #32]
 800d71c:	2301      	movs	r3, #1
 800d71e:	f7fd fa3d 	bl	800ab9c <disk_write>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d006      	beq.n	800d736 <f_sync+0x5e>
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	2101      	movs	r1, #1
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7fd fb89 	bl	800ae44 <unlock_fs>
 800d732:	2301      	movs	r3, #1
 800d734:	e055      	b.n	800d7e2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7d1b      	ldrb	r3, [r3, #20]
 800d73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d744:	f7fd f96c 	bl	800aa20 <get_fattime>
 800d748:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d750:	4619      	mov	r1, r3
 800d752:	4610      	mov	r0, r2
 800d754:	f7fd fd42 	bl	800b1dc <move_window>
 800d758:	4603      	mov	r3, r0
 800d75a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d75c:	7dfb      	ldrb	r3, [r7, #23]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d138      	bne.n	800d7d4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d766:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	330b      	adds	r3, #11
 800d76c:	781a      	ldrb	r2, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	330b      	adds	r3, #11
 800d772:	f042 0220 	orr.w	r2, r2, #32
 800d776:	b2d2      	uxtb	r2, r2
 800d778:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6818      	ldr	r0, [r3, #0]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	461a      	mov	r2, r3
 800d784:	68f9      	ldr	r1, [r7, #12]
 800d786:	f7fe fad0 	bl	800bd2a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f103 021c 	add.w	r2, r3, #28
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	4619      	mov	r1, r3
 800d796:	4610      	mov	r0, r2
 800d798:	f7fd fa94 	bl	800acc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3316      	adds	r3, #22
 800d7a0:	6939      	ldr	r1, [r7, #16]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fd fa8e 	bl	800acc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	3312      	adds	r3, #18
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fd fa6d 	bl	800ac8e <st_word>
					fs->wflag = 1;
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fd fd3b 	bl	800b238 <sync_fs>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	7dfa      	ldrb	r2, [r7, #23]
 800d7d8:	4611      	mov	r1, r2
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fd fb32 	bl	800ae44 <unlock_fs>
 800d7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3718      	adds	r7, #24
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff ff70 	bl	800d6d8 <f_sync>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d11d      	bne.n	800d83e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f107 0208 	add.w	r2, r7, #8
 800d808:	4611      	mov	r1, r2
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7ff fb42 	bl	800ce94 <validate>
 800d810:	4603      	mov	r3, r0
 800d812:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d814:	7bfb      	ldrb	r3, [r7, #15]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d111      	bne.n	800d83e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd fc38 	bl	800b094 <dec_lock>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d102      	bne.n	800d834 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2100      	movs	r1, #0
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fd fb03 	bl	800ae44 <unlock_fs>
#endif
		}
	}
	return res;
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d856:	2301      	movs	r3, #1
 800d858:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d85e:	4b1f      	ldr	r3, [pc, #124]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d860:	7a5b      	ldrb	r3, [r3, #9]
 800d862:	b2db      	uxtb	r3, r3
 800d864:	2b00      	cmp	r3, #0
 800d866:	d131      	bne.n	800d8cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d868:	4b1c      	ldr	r3, [pc, #112]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d86a:	7a5b      	ldrb	r3, [r3, #9]
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	461a      	mov	r2, r3
 800d870:	4b1a      	ldr	r3, [pc, #104]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d872:	2100      	movs	r1, #0
 800d874:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d876:	4b19      	ldr	r3, [pc, #100]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d878:	7a5b      	ldrb	r3, [r3, #9]
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	4a17      	ldr	r2, [pc, #92]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4413      	add	r3, r2
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d886:	4b15      	ldr	r3, [pc, #84]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d888:	7a5b      	ldrb	r3, [r3, #9]
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	461a      	mov	r2, r3
 800d88e:	4b13      	ldr	r3, [pc, #76]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d890:	4413      	add	r3, r2
 800d892:	79fa      	ldrb	r2, [r7, #7]
 800d894:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d896:	4b11      	ldr	r3, [pc, #68]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d898:	7a5b      	ldrb	r3, [r3, #9]
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	1c5a      	adds	r2, r3, #1
 800d89e:	b2d1      	uxtb	r1, r2
 800d8a0:	4a0e      	ldr	r2, [pc, #56]	; (800d8dc <FATFS_LinkDriverEx+0x94>)
 800d8a2:	7251      	strb	r1, [r2, #9]
 800d8a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8a6:	7dbb      	ldrb	r3, [r7, #22]
 800d8a8:	3330      	adds	r3, #48	; 0x30
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	223a      	movs	r2, #58	; 0x3a
 800d8b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	3302      	adds	r3, #2
 800d8bc:	222f      	movs	r2, #47	; 0x2f
 800d8be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	3303      	adds	r3, #3
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	371c      	adds	r7, #28
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	20000218 	.word	0x20000218

0800d8e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	6839      	ldr	r1, [r7, #0]
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff ffaa 	bl	800d848 <FATFS_LinkDriverEx>
 800d8f4:	4603      	mov	r3, r0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	6039      	str	r1, [r7, #0]
 800d90a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d90c:	88fb      	ldrh	r3, [r7, #6]
 800d90e:	2b7f      	cmp	r3, #127	; 0x7f
 800d910:	d802      	bhi.n	800d918 <ff_convert+0x18>
		c = chr;
 800d912:	88fb      	ldrh	r3, [r7, #6]
 800d914:	81fb      	strh	r3, [r7, #14]
 800d916:	e025      	b.n	800d964 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00b      	beq.n	800d936 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d91e:	88fb      	ldrh	r3, [r7, #6]
 800d920:	2bff      	cmp	r3, #255	; 0xff
 800d922:	d805      	bhi.n	800d930 <ff_convert+0x30>
 800d924:	88fb      	ldrh	r3, [r7, #6]
 800d926:	3b80      	subs	r3, #128	; 0x80
 800d928:	4a12      	ldr	r2, [pc, #72]	; (800d974 <ff_convert+0x74>)
 800d92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d92e:	e000      	b.n	800d932 <ff_convert+0x32>
 800d930:	2300      	movs	r3, #0
 800d932:	81fb      	strh	r3, [r7, #14]
 800d934:	e016      	b.n	800d964 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d936:	2300      	movs	r3, #0
 800d938:	81fb      	strh	r3, [r7, #14]
 800d93a:	e009      	b.n	800d950 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d93c:	89fb      	ldrh	r3, [r7, #14]
 800d93e:	4a0d      	ldr	r2, [pc, #52]	; (800d974 <ff_convert+0x74>)
 800d940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d944:	88fa      	ldrh	r2, [r7, #6]
 800d946:	429a      	cmp	r2, r3
 800d948:	d006      	beq.n	800d958 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d94a:	89fb      	ldrh	r3, [r7, #14]
 800d94c:	3301      	adds	r3, #1
 800d94e:	81fb      	strh	r3, [r7, #14]
 800d950:	89fb      	ldrh	r3, [r7, #14]
 800d952:	2b7f      	cmp	r3, #127	; 0x7f
 800d954:	d9f2      	bls.n	800d93c <ff_convert+0x3c>
 800d956:	e000      	b.n	800d95a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d958:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d95a:	89fb      	ldrh	r3, [r7, #14]
 800d95c:	3380      	adds	r3, #128	; 0x80
 800d95e:	b29b      	uxth	r3, r3
 800d960:	b2db      	uxtb	r3, r3
 800d962:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d964:	89fb      	ldrh	r3, [r7, #14]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	08013ff4 	.word	0x08013ff4

0800d978 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d978:	b480      	push	{r7}
 800d97a:	b087      	sub	sp, #28
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d982:	88fb      	ldrh	r3, [r7, #6]
 800d984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d988:	d201      	bcs.n	800d98e <ff_wtoupper+0x16>
 800d98a:	4b3e      	ldr	r3, [pc, #248]	; (800da84 <ff_wtoupper+0x10c>)
 800d98c:	e000      	b.n	800d990 <ff_wtoupper+0x18>
 800d98e:	4b3e      	ldr	r3, [pc, #248]	; (800da88 <ff_wtoupper+0x110>)
 800d990:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	1c9a      	adds	r2, r3, #2
 800d996:	617a      	str	r2, [r7, #20]
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d99c:	8a7b      	ldrh	r3, [r7, #18]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d068      	beq.n	800da74 <ff_wtoupper+0xfc>
 800d9a2:	88fa      	ldrh	r2, [r7, #6]
 800d9a4:	8a7b      	ldrh	r3, [r7, #18]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d364      	bcc.n	800da74 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	1c9a      	adds	r2, r3, #2
 800d9ae:	617a      	str	r2, [r7, #20]
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	823b      	strh	r3, [r7, #16]
 800d9b4:	8a3b      	ldrh	r3, [r7, #16]
 800d9b6:	0a1b      	lsrs	r3, r3, #8
 800d9b8:	81fb      	strh	r3, [r7, #14]
 800d9ba:	8a3b      	ldrh	r3, [r7, #16]
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d9c0:	88fa      	ldrh	r2, [r7, #6]
 800d9c2:	8a79      	ldrh	r1, [r7, #18]
 800d9c4:	8a3b      	ldrh	r3, [r7, #16]
 800d9c6:	440b      	add	r3, r1
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	da49      	bge.n	800da60 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d9cc:	89fb      	ldrh	r3, [r7, #14]
 800d9ce:	2b08      	cmp	r3, #8
 800d9d0:	d84f      	bhi.n	800da72 <ff_wtoupper+0xfa>
 800d9d2:	a201      	add	r2, pc, #4	; (adr r2, 800d9d8 <ff_wtoupper+0x60>)
 800d9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d8:	0800d9fd 	.word	0x0800d9fd
 800d9dc:	0800da0f 	.word	0x0800da0f
 800d9e0:	0800da25 	.word	0x0800da25
 800d9e4:	0800da2d 	.word	0x0800da2d
 800d9e8:	0800da35 	.word	0x0800da35
 800d9ec:	0800da3d 	.word	0x0800da3d
 800d9f0:	0800da45 	.word	0x0800da45
 800d9f4:	0800da4d 	.word	0x0800da4d
 800d9f8:	0800da55 	.word	0x0800da55
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d9fc:	88fa      	ldrh	r2, [r7, #6]
 800d9fe:	8a7b      	ldrh	r3, [r7, #18]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	4413      	add	r3, r2
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	80fb      	strh	r3, [r7, #6]
 800da0c:	e027      	b.n	800da5e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800da0e:	88fa      	ldrh	r2, [r7, #6]
 800da10:	8a7b      	ldrh	r3, [r7, #18]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	b29b      	uxth	r3, r3
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	88fa      	ldrh	r2, [r7, #6]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	80fb      	strh	r3, [r7, #6]
 800da22:	e01c      	b.n	800da5e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800da24:	88fb      	ldrh	r3, [r7, #6]
 800da26:	3b10      	subs	r3, #16
 800da28:	80fb      	strh	r3, [r7, #6]
 800da2a:	e018      	b.n	800da5e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800da2c:	88fb      	ldrh	r3, [r7, #6]
 800da2e:	3b20      	subs	r3, #32
 800da30:	80fb      	strh	r3, [r7, #6]
 800da32:	e014      	b.n	800da5e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800da34:	88fb      	ldrh	r3, [r7, #6]
 800da36:	3b30      	subs	r3, #48	; 0x30
 800da38:	80fb      	strh	r3, [r7, #6]
 800da3a:	e010      	b.n	800da5e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800da3c:	88fb      	ldrh	r3, [r7, #6]
 800da3e:	3b1a      	subs	r3, #26
 800da40:	80fb      	strh	r3, [r7, #6]
 800da42:	e00c      	b.n	800da5e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800da44:	88fb      	ldrh	r3, [r7, #6]
 800da46:	3308      	adds	r3, #8
 800da48:	80fb      	strh	r3, [r7, #6]
 800da4a:	e008      	b.n	800da5e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800da4c:	88fb      	ldrh	r3, [r7, #6]
 800da4e:	3b50      	subs	r3, #80	; 0x50
 800da50:	80fb      	strh	r3, [r7, #6]
 800da52:	e004      	b.n	800da5e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800da54:	88fb      	ldrh	r3, [r7, #6]
 800da56:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800da5a:	80fb      	strh	r3, [r7, #6]
 800da5c:	bf00      	nop
			}
			break;
 800da5e:	e008      	b.n	800da72 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800da60:	89fb      	ldrh	r3, [r7, #14]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d195      	bne.n	800d992 <ff_wtoupper+0x1a>
 800da66:	8a3b      	ldrh	r3, [r7, #16]
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	4413      	add	r3, r2
 800da6e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800da70:	e78f      	b.n	800d992 <ff_wtoupper+0x1a>
			break;
 800da72:	bf00      	nop
	}

	return chr;
 800da74:	88fb      	ldrh	r3, [r7, #6]
}
 800da76:	4618      	mov	r0, r3
 800da78:	371c      	adds	r7, #28
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	080140f4 	.word	0x080140f4
 800da88:	080142e8 	.word	0x080142e8

0800da8c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	4603      	mov	r3, r0
 800da94:	6039      	str	r1, [r7, #0]
 800da96:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800da98:	2200      	movs	r2, #0
 800da9a:	2101      	movs	r1, #1
 800da9c:	2001      	movs	r0, #1
 800da9e:	f000 fab9 	bl	800e014 <osSemaphoreNew>
 800daa2:	4602      	mov	r2, r0
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	bf14      	ite	ne
 800dab0:	2301      	movne	r3, #1
 800dab2:	2300      	moveq	r3, #0
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	60fb      	str	r3, [r7, #12]

    return ret;
 800dab8:	68fb      	ldr	r3, [r7, #12]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b082      	sub	sp, #8
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fbc2 	bl	800e254 <osSemaphoreDelete>
#endif
    return 1;
 800dad0:	2301      	movs	r3, #1
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800dae6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 fb1c 	bl	800e128 <osSemaphoreAcquire>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d101      	bne.n	800dafa <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800daf6:	2301      	movs	r3, #1
 800daf8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800dafa:	68fb      	ldr	r3, [r7, #12]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fb5d 	bl	800e1cc <osSemaphoreRelease>
#endif
}
 800db12:	bf00      	nop
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b082      	sub	sp, #8
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f003 fda0 	bl	8011668 <pvPortMalloc>
 800db28:	4603      	mov	r3, r0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3708      	adds	r7, #8
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b082      	sub	sp, #8
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f003 fe60 	bl	8011800 <vPortFree>
}
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <__NVIC_SetPriority>:
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	4603      	mov	r3, r0
 800db50:	6039      	str	r1, [r7, #0]
 800db52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	db0a      	blt.n	800db72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	490c      	ldr	r1, [pc, #48]	; (800db94 <__NVIC_SetPriority+0x4c>)
 800db62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db66:	0112      	lsls	r2, r2, #4
 800db68:	b2d2      	uxtb	r2, r2
 800db6a:	440b      	add	r3, r1
 800db6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800db70:	e00a      	b.n	800db88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	b2da      	uxtb	r2, r3
 800db76:	4908      	ldr	r1, [pc, #32]	; (800db98 <__NVIC_SetPriority+0x50>)
 800db78:	79fb      	ldrb	r3, [r7, #7]
 800db7a:	f003 030f 	and.w	r3, r3, #15
 800db7e:	3b04      	subs	r3, #4
 800db80:	0112      	lsls	r2, r2, #4
 800db82:	b2d2      	uxtb	r2, r2
 800db84:	440b      	add	r3, r1
 800db86:	761a      	strb	r2, [r3, #24]
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	e000e100 	.word	0xe000e100
 800db98:	e000ed00 	.word	0xe000ed00

0800db9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dba0:	4b05      	ldr	r3, [pc, #20]	; (800dbb8 <SysTick_Handler+0x1c>)
 800dba2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dba4:	f002 fdaa 	bl	80106fc <xTaskGetSchedulerState>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d001      	beq.n	800dbb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dbae:	f003 fccb 	bl	8011548 <xPortSysTickHandler>
  }
}
 800dbb2:	bf00      	nop
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	e000e010 	.word	0xe000e010

0800dbbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	f06f 0004 	mvn.w	r0, #4
 800dbc6:	f7ff ffbf 	bl	800db48 <__NVIC_SetPriority>
#endif
}
 800dbca:	bf00      	nop
 800dbcc:	bd80      	pop	{r7, pc}
	...

0800dbd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbd6:	f3ef 8305 	mrs	r3, IPSR
 800dbda:	603b      	str	r3, [r7, #0]
  return(result);
 800dbdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dbe2:	f06f 0305 	mvn.w	r3, #5
 800dbe6:	607b      	str	r3, [r7, #4]
 800dbe8:	e00c      	b.n	800dc04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dbea:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <osKernelInitialize+0x44>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d105      	bne.n	800dbfe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dbf2:	4b08      	ldr	r3, [pc, #32]	; (800dc14 <osKernelInitialize+0x44>)
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	607b      	str	r3, [r7, #4]
 800dbfc:	e002      	b.n	800dc04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dbfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc04:	687b      	ldr	r3, [r7, #4]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	20000224 	.word	0x20000224

0800dc18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc1e:	f3ef 8305 	mrs	r3, IPSR
 800dc22:	603b      	str	r3, [r7, #0]
  return(result);
 800dc24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc2a:	f06f 0305 	mvn.w	r3, #5
 800dc2e:	607b      	str	r3, [r7, #4]
 800dc30:	e010      	b.n	800dc54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc32:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <osKernelStart+0x48>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d109      	bne.n	800dc4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc3a:	f7ff ffbf 	bl	800dbbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc3e:	4b08      	ldr	r3, [pc, #32]	; (800dc60 <osKernelStart+0x48>)
 800dc40:	2202      	movs	r2, #2
 800dc42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc44:	f002 f862 	bl	800fd0c <vTaskStartScheduler>
      stat = osOK;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	607b      	str	r3, [r7, #4]
 800dc4c:	e002      	b.n	800dc54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc54:	687b      	ldr	r3, [r7, #4]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	20000224 	.word	0x20000224

0800dc64 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc6a:	f3ef 8305 	mrs	r3, IPSR
 800dc6e:	603b      	str	r3, [r7, #0]
  return(result);
 800dc70:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d003      	beq.n	800dc7e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800dc76:	f002 f96b 	bl	800ff50 <xTaskGetTickCountFromISR>
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	e002      	b.n	800dc84 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800dc7e:	f002 f957 	bl	800ff30 <xTaskGetTickCount>
 800dc82:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800dc84:	687b      	ldr	r3, [r7, #4]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b08e      	sub	sp, #56	; 0x38
 800dc92:	af04      	add	r7, sp, #16
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc9e:	f3ef 8305 	mrs	r3, IPSR
 800dca2:	617b      	str	r3, [r7, #20]
  return(result);
 800dca4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d17e      	bne.n	800dda8 <osThreadNew+0x11a>
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d07b      	beq.n	800dda8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dcb0:	2380      	movs	r3, #128	; 0x80
 800dcb2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dcb4:	2318      	movs	r3, #24
 800dcb6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dcbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcc0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d045      	beq.n	800dd54 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <osThreadNew+0x48>
        name = attr->name;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d002      	beq.n	800dce4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	699b      	ldr	r3, [r3, #24]
 800dce2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d008      	beq.n	800dcfc <osThreadNew+0x6e>
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	2b38      	cmp	r3, #56	; 0x38
 800dcee:	d805      	bhi.n	800dcfc <osThreadNew+0x6e>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	f003 0301 	and.w	r3, r3, #1
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d001      	beq.n	800dd00 <osThreadNew+0x72>
        return (NULL);
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e054      	b.n	800ddaa <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	695b      	ldr	r3, [r3, #20]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d003      	beq.n	800dd10 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	089b      	lsrs	r3, r3, #2
 800dd0e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00e      	beq.n	800dd36 <osThreadNew+0xa8>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	2b5b      	cmp	r3, #91	; 0x5b
 800dd1e:	d90a      	bls.n	800dd36 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d006      	beq.n	800dd36 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d002      	beq.n	800dd36 <osThreadNew+0xa8>
        mem = 1;
 800dd30:	2301      	movs	r3, #1
 800dd32:	61bb      	str	r3, [r7, #24]
 800dd34:	e010      	b.n	800dd58 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	689b      	ldr	r3, [r3, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10c      	bne.n	800dd58 <osThreadNew+0xca>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	68db      	ldr	r3, [r3, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d108      	bne.n	800dd58 <osThreadNew+0xca>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d104      	bne.n	800dd58 <osThreadNew+0xca>
          mem = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61bb      	str	r3, [r7, #24]
 800dd52:	e001      	b.n	800dd58 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d110      	bne.n	800dd80 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd66:	9202      	str	r2, [sp, #8]
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	6a3a      	ldr	r2, [r7, #32]
 800dd72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f001 fd75 	bl	800f864 <xTaskCreateStatic>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	613b      	str	r3, [r7, #16]
 800dd7e:	e013      	b.n	800dda8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d110      	bne.n	800dda8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	f107 0310 	add.w	r3, r7, #16
 800dd8e:	9301      	str	r3, [sp, #4]
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f001 fdc0 	bl	800f91e <xTaskCreate>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d001      	beq.n	800dda8 <osThreadNew+0x11a>
            hTask = NULL;
 800dda4:	2300      	movs	r3, #0
 800dda6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dda8:	693b      	ldr	r3, [r7, #16]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3728      	adds	r7, #40	; 0x28
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddba:	f3ef 8305 	mrs	r3, IPSR
 800ddbe:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <osDelay+0x1c>
    stat = osErrorISR;
 800ddc6:	f06f 0305 	mvn.w	r3, #5
 800ddca:	60fb      	str	r3, [r7, #12]
 800ddcc:	e007      	b.n	800ddde <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <osDelay+0x2c>
      vTaskDelay(ticks);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f001 ff63 	bl	800fca4 <vTaskDelay>
    }
  }

  return (stat);
 800ddde:	68fb      	ldr	r3, [r7, #12]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddf0:	f3ef 8305 	mrs	r3, IPSR
 800ddf4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d003      	beq.n	800de04 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ddfc:	f06f 0305 	mvn.w	r3, #5
 800de00:	617b      	str	r3, [r7, #20]
 800de02:	e019      	b.n	800de38 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800de04:	2300      	movs	r3, #0
 800de06:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800de08:	f002 f892 	bl	800ff30 <xTaskGetTickCount>
 800de0c:	4603      	mov	r3, r0
 800de0e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d009      	beq.n	800de32 <osDelayUntil+0x4a>
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	2b00      	cmp	r3, #0
 800de22:	db06      	blt.n	800de32 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800de24:	f107 0308 	add.w	r3, r7, #8
 800de28:	6939      	ldr	r1, [r7, #16]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f001 febc 	bl	800fba8 <vTaskDelayUntil>
 800de30:	e002      	b.n	800de38 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800de32:	f06f 0303 	mvn.w	r3, #3
 800de36:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800de38:	697b      	ldr	r3, [r7, #20]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800de42:	b580      	push	{r7, lr}
 800de44:	b086      	sub	sp, #24
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de4e:	f3ef 8305 	mrs	r3, IPSR
 800de52:	60fb      	str	r3, [r7, #12]
  return(result);
 800de54:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800de56:	2b00      	cmp	r3, #0
 800de58:	d12d      	bne.n	800deb6 <osEventFlagsNew+0x74>
    mem = -1;
 800de5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de5e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d015      	beq.n	800de92 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d006      	beq.n	800de7c <osEventFlagsNew+0x3a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	2b1f      	cmp	r3, #31
 800de74:	d902      	bls.n	800de7c <osEventFlagsNew+0x3a>
        mem = 1;
 800de76:	2301      	movs	r3, #1
 800de78:	613b      	str	r3, [r7, #16]
 800de7a:	e00c      	b.n	800de96 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d108      	bne.n	800de96 <osEventFlagsNew+0x54>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d104      	bne.n	800de96 <osEventFlagsNew+0x54>
          mem = 0;
 800de8c:	2300      	movs	r3, #0
 800de8e:	613b      	str	r3, [r7, #16]
 800de90:	e001      	b.n	800de96 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800de92:	2300      	movs	r3, #0
 800de94:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d106      	bne.n	800deaa <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 fa2f 	bl	800e304 <xEventGroupCreateStatic>
 800dea6:	6178      	str	r0, [r7, #20]
 800dea8:	e005      	b.n	800deb6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800deb0:	f000 fa5f 	bl	800e372 <xEventGroupCreate>
 800deb4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800deb6:	697b      	ldr	r3, [r7, #20]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d004      	beq.n	800dede <osEventFlagsSet+0x1e>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d003      	beq.n	800dee6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800dede:	f06f 0303 	mvn.w	r3, #3
 800dee2:	617b      	str	r3, [r7, #20]
 800dee4:	e028      	b.n	800df38 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dee6:	f3ef 8305 	mrs	r3, IPSR
 800deea:	60fb      	str	r3, [r7, #12]
  return(result);
 800deec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800deee:	2b00      	cmp	r3, #0
 800def0:	d01d      	beq.n	800df2e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800def2:	2300      	movs	r3, #0
 800def4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	461a      	mov	r2, r3
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6938      	ldr	r0, [r7, #16]
 800df00:	f000 fbda 	bl	800e6b8 <xEventGroupSetBitsFromISR>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d103      	bne.n	800df12 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800df0a:	f06f 0302 	mvn.w	r3, #2
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	e012      	b.n	800df38 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00d      	beq.n	800df38 <osEventFlagsSet+0x78>
 800df1c:	4b09      	ldr	r3, [pc, #36]	; (800df44 <osEventFlagsSet+0x84>)
 800df1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df22:	601a      	str	r2, [r3, #0]
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	e004      	b.n	800df38 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800df2e:	6839      	ldr	r1, [r7, #0]
 800df30:	6938      	ldr	r0, [r7, #16]
 800df32:	f000 fb07 	bl	800e544 <xEventGroupSetBits>
 800df36:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800df38:	697b      	ldr	r3, [r7, #20]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3718      	adds	r7, #24
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	e000ed04 	.word	0xe000ed04

0800df48 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800df48:	b580      	push	{r7, lr}
 800df4a:	b08c      	sub	sp, #48	; 0x30
 800df4c:	af02      	add	r7, sp, #8
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	60b9      	str	r1, [r7, #8]
 800df52:	607a      	str	r2, [r7, #4]
 800df54:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d004      	beq.n	800df6a <osEventFlagsWait+0x22>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800df6a:	f06f 0303 	mvn.w	r3, #3
 800df6e:	61fb      	str	r3, [r7, #28]
 800df70:	e04b      	b.n	800e00a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df72:	f3ef 8305 	mrs	r3, IPSR
 800df76:	617b      	str	r3, [r7, #20]
  return(result);
 800df78:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800df7e:	f06f 0305 	mvn.w	r3, #5
 800df82:	61fb      	str	r3, [r7, #28]
 800df84:	e041      	b.n	800e00a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800df90:	2301      	movs	r3, #1
 800df92:	627b      	str	r3, [r7, #36]	; 0x24
 800df94:	e001      	b.n	800df9a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800df96:	2300      	movs	r3, #0
 800df98:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f003 0302 	and.w	r3, r3, #2
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d002      	beq.n	800dfaa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	623b      	str	r3, [r7, #32]
 800dfa8:	e001      	b.n	800dfae <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	6a3a      	ldr	r2, [r7, #32]
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	69b8      	ldr	r0, [r7, #24]
 800dfba:	f000 f9f5 	bl	800e3a8 <xEventGroupWaitBits>
 800dfbe:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f003 0301 	and.w	r3, r3, #1
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d010      	beq.n	800dfec <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	4013      	ands	r3, r2
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d019      	beq.n	800e00a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d003      	beq.n	800dfe4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800dfdc:	f06f 0301 	mvn.w	r3, #1
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	e012      	b.n	800e00a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800dfe4:	f06f 0302 	mvn.w	r3, #2
 800dfe8:	61fb      	str	r3, [r7, #28]
 800dfea:	e00e      	b.n	800e00a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	4013      	ands	r3, r2
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d109      	bne.n	800e00a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d003      	beq.n	800e004 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800dffc:	f06f 0301 	mvn.w	r3, #1
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	e002      	b.n	800e00a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e004:	f06f 0302 	mvn.w	r3, #2
 800e008:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e00a:	69fb      	ldr	r3, [r7, #28]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3728      	adds	r7, #40	; 0x28
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e014:	b580      	push	{r7, lr}
 800e016:	b08a      	sub	sp, #40	; 0x28
 800e018:	af02      	add	r7, sp, #8
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e020:	2300      	movs	r3, #0
 800e022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e024:	f3ef 8305 	mrs	r3, IPSR
 800e028:	613b      	str	r3, [r7, #16]
  return(result);
 800e02a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d175      	bne.n	800e11c <osSemaphoreNew+0x108>
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d072      	beq.n	800e11c <osSemaphoreNew+0x108>
 800e036:	68ba      	ldr	r2, [r7, #8]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d86e      	bhi.n	800e11c <osSemaphoreNew+0x108>
    mem = -1;
 800e03e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e042:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d015      	beq.n	800e076 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d006      	beq.n	800e060 <osSemaphoreNew+0x4c>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	2b4f      	cmp	r3, #79	; 0x4f
 800e058:	d902      	bls.n	800e060 <osSemaphoreNew+0x4c>
        mem = 1;
 800e05a:	2301      	movs	r3, #1
 800e05c:	61bb      	str	r3, [r7, #24]
 800e05e:	e00c      	b.n	800e07a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d108      	bne.n	800e07a <osSemaphoreNew+0x66>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d104      	bne.n	800e07a <osSemaphoreNew+0x66>
          mem = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	61bb      	str	r3, [r7, #24]
 800e074:	e001      	b.n	800e07a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e076:	2300      	movs	r3, #0
 800e078:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e080:	d04c      	beq.n	800e11c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d128      	bne.n	800e0da <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e088:	69bb      	ldr	r3, [r7, #24]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d10a      	bne.n	800e0a4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	2203      	movs	r2, #3
 800e094:	9200      	str	r2, [sp, #0]
 800e096:	2200      	movs	r2, #0
 800e098:	2100      	movs	r1, #0
 800e09a:	2001      	movs	r0, #1
 800e09c:	f000 fc3c 	bl	800e918 <xQueueGenericCreateStatic>
 800e0a0:	61f8      	str	r0, [r7, #28]
 800e0a2:	e005      	b.n	800e0b0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e0a4:	2203      	movs	r2, #3
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	2001      	movs	r0, #1
 800e0aa:	f000 fcad 	bl	800ea08 <xQueueGenericCreate>
 800e0ae:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d022      	beq.n	800e0fc <osSemaphoreNew+0xe8>
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01f      	beq.n	800e0fc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e0bc:	2300      	movs	r3, #0
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	69f8      	ldr	r0, [r7, #28]
 800e0c4:	f000 fd68 	bl	800eb98 <xQueueGenericSend>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d016      	beq.n	800e0fc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e0ce:	69f8      	ldr	r0, [r7, #28]
 800e0d0:	f001 f9f4 	bl	800f4bc <vQueueDelete>
            hSemaphore = NULL;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	61fb      	str	r3, [r7, #28]
 800e0d8:	e010      	b.n	800e0fc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d108      	bne.n	800e0f2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f000 fcea 	bl	800eac2 <xQueueCreateCountingSemaphoreStatic>
 800e0ee:	61f8      	str	r0, [r7, #28]
 800e0f0:	e004      	b.n	800e0fc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e0f2:	68b9      	ldr	r1, [r7, #8]
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f000 fd1b 	bl	800eb30 <xQueueCreateCountingSemaphore>
 800e0fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00c      	beq.n	800e11c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	617b      	str	r3, [r7, #20]
 800e10e:	e001      	b.n	800e114 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e110:	2300      	movs	r3, #0
 800e112:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e114:	6979      	ldr	r1, [r7, #20]
 800e116:	69f8      	ldr	r0, [r7, #28]
 800e118:	f001 fb1c 	bl	800f754 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e11c:	69fb      	ldr	r3, [r7, #28]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3720      	adds	r7, #32
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e136:	2300      	movs	r3, #0
 800e138:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d103      	bne.n	800e148 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e140:	f06f 0303 	mvn.w	r3, #3
 800e144:	617b      	str	r3, [r7, #20]
 800e146:	e039      	b.n	800e1bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e148:	f3ef 8305 	mrs	r3, IPSR
 800e14c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e14e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e150:	2b00      	cmp	r3, #0
 800e152:	d022      	beq.n	800e19a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e15a:	f06f 0303 	mvn.w	r3, #3
 800e15e:	617b      	str	r3, [r7, #20]
 800e160:	e02c      	b.n	800e1bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e162:	2300      	movs	r3, #0
 800e164:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e166:	f107 0308 	add.w	r3, r7, #8
 800e16a:	461a      	mov	r2, r3
 800e16c:	2100      	movs	r1, #0
 800e16e:	6938      	ldr	r0, [r7, #16]
 800e170:	f001 f924 	bl	800f3bc <xQueueReceiveFromISR>
 800e174:	4603      	mov	r3, r0
 800e176:	2b01      	cmp	r3, #1
 800e178:	d003      	beq.n	800e182 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e17a:	f06f 0302 	mvn.w	r3, #2
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	e01c      	b.n	800e1bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d019      	beq.n	800e1bc <osSemaphoreAcquire+0x94>
 800e188:	4b0f      	ldr	r3, [pc, #60]	; (800e1c8 <osSemaphoreAcquire+0xa0>)
 800e18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e18e:	601a      	str	r2, [r3, #0]
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	e010      	b.n	800e1bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	6938      	ldr	r0, [r7, #16]
 800e19e:	f001 f801 	bl	800f1a4 <xQueueSemaphoreTake>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d009      	beq.n	800e1bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d003      	beq.n	800e1b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e1ae:	f06f 0301 	mvn.w	r3, #1
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	e002      	b.n	800e1bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e1b6:	f06f 0302 	mvn.w	r3, #2
 800e1ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e1bc:	697b      	ldr	r3, [r7, #20]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	e000ed04 	.word	0xe000ed04

0800e1cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d103      	bne.n	800e1ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e1e2:	f06f 0303 	mvn.w	r3, #3
 800e1e6:	617b      	str	r3, [r7, #20]
 800e1e8:	e02c      	b.n	800e244 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1ea:	f3ef 8305 	mrs	r3, IPSR
 800e1ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d01a      	beq.n	800e22c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1fa:	f107 0308 	add.w	r3, r7, #8
 800e1fe:	4619      	mov	r1, r3
 800e200:	6938      	ldr	r0, [r7, #16]
 800e202:	f000 fe62 	bl	800eeca <xQueueGiveFromISR>
 800e206:	4603      	mov	r3, r0
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d003      	beq.n	800e214 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e20c:	f06f 0302 	mvn.w	r3, #2
 800e210:	617b      	str	r3, [r7, #20]
 800e212:	e017      	b.n	800e244 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d014      	beq.n	800e244 <osSemaphoreRelease+0x78>
 800e21a:	4b0d      	ldr	r3, [pc, #52]	; (800e250 <osSemaphoreRelease+0x84>)
 800e21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	e00b      	b.n	800e244 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e22c:	2300      	movs	r3, #0
 800e22e:	2200      	movs	r2, #0
 800e230:	2100      	movs	r1, #0
 800e232:	6938      	ldr	r0, [r7, #16]
 800e234:	f000 fcb0 	bl	800eb98 <xQueueGenericSend>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d002      	beq.n	800e244 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e23e:	f06f 0302 	mvn.w	r3, #2
 800e242:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e244:	697b      	ldr	r3, [r7, #20]
}
 800e246:	4618      	mov	r0, r3
 800e248:	3718      	adds	r7, #24
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	e000ed04 	.word	0xe000ed04

0800e254 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e260:	f3ef 8305 	mrs	r3, IPSR
 800e264:	60fb      	str	r3, [r7, #12]
  return(result);
 800e266:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d003      	beq.n	800e274 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800e26c:	f06f 0305 	mvn.w	r3, #5
 800e270:	617b      	str	r3, [r7, #20]
 800e272:	e00e      	b.n	800e292 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d103      	bne.n	800e282 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800e27a:	f06f 0303 	mvn.w	r3, #3
 800e27e:	617b      	str	r3, [r7, #20]
 800e280:	e007      	b.n	800e292 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800e282:	6938      	ldr	r0, [r7, #16]
 800e284:	f001 fa90 	bl	800f7a8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800e288:	2300      	movs	r3, #0
 800e28a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800e28c:	6938      	ldr	r0, [r7, #16]
 800e28e:	f001 f915 	bl	800f4bc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e292:	697b      	ldr	r3, [r7, #20]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	4a07      	ldr	r2, [pc, #28]	; (800e2c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800e2ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	4a06      	ldr	r2, [pc, #24]	; (800e2cc <vApplicationGetIdleTaskMemory+0x30>)
 800e2b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2280      	movs	r2, #128	; 0x80
 800e2b8:	601a      	str	r2, [r3, #0]
}
 800e2ba:	bf00      	nop
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	20000228 	.word	0x20000228
 800e2cc:	20000284 	.word	0x20000284

0800e2d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	4a07      	ldr	r2, [pc, #28]	; (800e2fc <vApplicationGetTimerTaskMemory+0x2c>)
 800e2e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	4a06      	ldr	r2, [pc, #24]	; (800e300 <vApplicationGetTimerTaskMemory+0x30>)
 800e2e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2ee:	601a      	str	r2, [r3, #0]
}
 800e2f0:	bf00      	nop
 800e2f2:	3714      	adds	r7, #20
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	20000484 	.word	0x20000484
 800e300:	200004e0 	.word	0x200004e0

0800e304 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10a      	bne.n	800e328 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e324:	bf00      	nop
 800e326:	e7fe      	b.n	800e326 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e328:	2320      	movs	r3, #32
 800e32a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	2b20      	cmp	r3, #32
 800e330:	d00a      	beq.n	800e348 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	60fb      	str	r3, [r7, #12]
}
 800e344:	bf00      	nop
 800e346:	e7fe      	b.n	800e346 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00a      	beq.n	800e368 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	2200      	movs	r2, #0
 800e356:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	3304      	adds	r3, #4
 800e35c:	4618      	mov	r0, r3
 800e35e:	f000 f9bf 	bl	800e6e0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	2201      	movs	r2, #1
 800e366:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800e368:	697b      	ldr	r3, [r7, #20]
	}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800e372:	b580      	push	{r7, lr}
 800e374:	b082      	sub	sp, #8
 800e376:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800e378:	2020      	movs	r0, #32
 800e37a:	f003 f975 	bl	8011668 <pvPortMalloc>
 800e37e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	3304      	adds	r3, #4
 800e390:	4618      	mov	r0, r3
 800e392:	f000 f9a5 	bl	800e6e0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800e39c:	687b      	ldr	r3, [r7, #4]
	}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b090      	sub	sp, #64	; 0x40
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	607a      	str	r2, [r7, #4]
 800e3b4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10a      	bne.n	800e3de <xEventGroupWaitBits+0x36>
	__asm volatile
 800e3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	623b      	str	r3, [r7, #32]
}
 800e3da:	bf00      	nop
 800e3dc:	e7fe      	b.n	800e3dc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00a      	beq.n	800e3fe <xEventGroupWaitBits+0x56>
	__asm volatile
 800e3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ec:	f383 8811 	msr	BASEPRI, r3
 800e3f0:	f3bf 8f6f 	isb	sy
 800e3f4:	f3bf 8f4f 	dsb	sy
 800e3f8:	61fb      	str	r3, [r7, #28]
}
 800e3fa:	bf00      	nop
 800e3fc:	e7fe      	b.n	800e3fc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d10a      	bne.n	800e41a <xEventGroupWaitBits+0x72>
	__asm volatile
 800e404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	61bb      	str	r3, [r7, #24]
}
 800e416:	bf00      	nop
 800e418:	e7fe      	b.n	800e418 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e41a:	f002 f96f 	bl	80106fc <xTaskGetSchedulerState>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d102      	bne.n	800e42a <xEventGroupWaitBits+0x82>
 800e424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e426:	2b00      	cmp	r3, #0
 800e428:	d101      	bne.n	800e42e <xEventGroupWaitBits+0x86>
 800e42a:	2301      	movs	r3, #1
 800e42c:	e000      	b.n	800e430 <xEventGroupWaitBits+0x88>
 800e42e:	2300      	movs	r3, #0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10a      	bne.n	800e44a <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	617b      	str	r3, [r7, #20]
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e44a:	f001 fcc5 	bl	800fdd8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e454:	683a      	ldr	r2, [r7, #0]
 800e456:	68b9      	ldr	r1, [r7, #8]
 800e458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e45a:	f000 f90b 	bl	800e674 <prvTestWaitCondition>
 800e45e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00e      	beq.n	800e484 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e468:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d028      	beq.n	800e4c6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	43db      	mvns	r3, r3
 800e47c:	401a      	ands	r2, r3
 800e47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	e020      	b.n	800e4c6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e486:	2b00      	cmp	r3, #0
 800e488:	d104      	bne.n	800e494 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e48e:	2301      	movs	r3, #1
 800e490:	633b      	str	r3, [r7, #48]	; 0x30
 800e492:	e018      	b.n	800e4c6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d003      	beq.n	800e4a2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e4a0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d003      	beq.n	800e4b0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4ae:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b2:	1d18      	adds	r0, r3, #4
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4bc:	4619      	mov	r1, r3
 800e4be:	f001 fe95 	bl	80101ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e4c6:	f001 fc95 	bl	800fdf4 <xTaskResumeAll>
 800e4ca:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d031      	beq.n	800e536 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d107      	bne.n	800e4e8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e4d8:	4b19      	ldr	r3, [pc, #100]	; (800e540 <xEventGroupWaitBits+0x198>)
 800e4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e4e8:	f002 fa7e 	bl	80109e8 <uxTaskResetEventItemValue>
 800e4ec:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d11a      	bne.n	800e52e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e4f8:	f002 ff94 	bl	8011424 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e502:	683a      	ldr	r2, [r7, #0]
 800e504:	68b9      	ldr	r1, [r7, #8]
 800e506:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e508:	f000 f8b4 	bl	800e674 <prvTestWaitCondition>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d009      	beq.n	800e526 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d006      	beq.n	800e526 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	43db      	mvns	r3, r3
 800e520:	401a      	ands	r2, r3
 800e522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e524:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e526:	2301      	movs	r3, #1
 800e528:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e52a:	f002 ffab 	bl	8011484 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e534:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3740      	adds	r7, #64	; 0x40
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	e000ed04 	.word	0xe000ed04

0800e544 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b08e      	sub	sp, #56	; 0x38
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e54e:	2300      	movs	r3, #0
 800e550:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e556:	2300      	movs	r3, #0
 800e558:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10a      	bne.n	800e576 <xEventGroupSetBits+0x32>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	613b      	str	r3, [r7, #16]
}
 800e572:	bf00      	nop
 800e574:	e7fe      	b.n	800e574 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00a      	beq.n	800e596 <xEventGroupSetBits+0x52>
	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	60fb      	str	r3, [r7, #12]
}
 800e592:	bf00      	nop
 800e594:	e7fe      	b.n	800e594 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e598:	3304      	adds	r3, #4
 800e59a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	3308      	adds	r3, #8
 800e5a0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e5a2:	f001 fc19 	bl	800fdd8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	431a      	orrs	r2, r3
 800e5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e5b8:	e03c      	b.n	800e634 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e5d0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e5d8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d108      	bne.n	800e5f6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	4013      	ands	r3, r2
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00b      	beq.n	800e608 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5f4:	e008      	b.n	800e608 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	69ba      	ldr	r2, [r7, #24]
 800e600:	429a      	cmp	r2, r3
 800e602:	d101      	bne.n	800e608 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e604:	2301      	movs	r3, #1
 800e606:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d010      	beq.n	800e630 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	4313      	orrs	r3, r2
 800e61e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e628:	4619      	mov	r1, r3
 800e62a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e62c:	f001 feaa 	bl	8010384 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800e634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e636:	6a3b      	ldr	r3, [r7, #32]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d1be      	bne.n	800e5ba <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e642:	43db      	mvns	r3, r3
 800e644:	401a      	ands	r2, r3
 800e646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e648:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e64a:	f001 fbd3 	bl	800fdf4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	681b      	ldr	r3, [r3, #0]
}
 800e652:	4618      	mov	r0, r3
 800e654:	3738      	adds	r7, #56	; 0x38
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b082      	sub	sp, #8
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e664:	6839      	ldr	r1, [r7, #0]
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff ff6c 	bl	800e544 <xEventGroupSetBits>
}
 800e66c:	bf00      	nop
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e674:	b480      	push	{r7}
 800e676:	b087      	sub	sp, #28
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e680:	2300      	movs	r3, #0
 800e682:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d107      	bne.n	800e69a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	4013      	ands	r3, r2
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00a      	beq.n	800e6aa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e007      	b.n	800e6aa <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	4013      	ands	r3, r2
 800e6a0:	68ba      	ldr	r2, [r7, #8]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d101      	bne.n	800e6aa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e6aa:	697b      	ldr	r3, [r7, #20]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	371c      	adds	r7, #28
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	68f9      	ldr	r1, [r7, #12]
 800e6ca:	4804      	ldr	r0, [pc, #16]	; (800e6dc <xEventGroupSetBitsFromISR+0x24>)
 800e6cc:	f002 fd5a 	bl	8011184 <xTimerPendFunctionCallFromISR>
 800e6d0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e6d2:	697b      	ldr	r3, [r7, #20]
	}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3718      	adds	r7, #24
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	0800e65b 	.word	0x0800e65b

0800e6e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f103 0208 	add.w	r2, r3, #8
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f103 0208 	add.w	r2, r3, #8
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f103 0208 	add.w	r2, r3, #8
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e72e:	bf00      	nop
 800e730:	370c      	adds	r7, #12
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr

0800e73a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e73a:	b480      	push	{r7}
 800e73c:	b085      	sub	sp, #20
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
 800e742:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	689a      	ldr	r2, [r3, #8]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	689b      	ldr	r3, [r3, #8]
 800e75c:	683a      	ldr	r2, [r7, #0]
 800e75e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	1c5a      	adds	r2, r3, #1
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	601a      	str	r2, [r3, #0]
}
 800e776:	bf00      	nop
 800e778:	3714      	adds	r7, #20
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e782:	b480      	push	{r7}
 800e784:	b085      	sub	sp, #20
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
 800e78a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e798:	d103      	bne.n	800e7a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	691b      	ldr	r3, [r3, #16]
 800e79e:	60fb      	str	r3, [r7, #12]
 800e7a0:	e00c      	b.n	800e7bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	60fb      	str	r3, [r7, #12]
 800e7a8:	e002      	b.n	800e7b0 <vListInsert+0x2e>
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	60fb      	str	r3, [r7, #12]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d2f6      	bcs.n	800e7aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	685a      	ldr	r2, [r3, #4]
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	683a      	ldr	r2, [r7, #0]
 800e7d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	601a      	str	r2, [r3, #0]
}
 800e7e8:	bf00      	nop
 800e7ea:	3714      	adds	r7, #20
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	6892      	ldr	r2, [r2, #8]
 800e80a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	6852      	ldr	r2, [r2, #4]
 800e814:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d103      	bne.n	800e828 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	689a      	ldr	r2, [r3, #8]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2200      	movs	r2, #0
 800e82c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	1e5a      	subs	r2, r3, #1
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3714      	adds	r7, #20
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10a      	bne.n	800e872 <xQueueGenericReset+0x2a>
	__asm volatile
 800e85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e860:	f383 8811 	msr	BASEPRI, r3
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	60bb      	str	r3, [r7, #8]
}
 800e86e:	bf00      	nop
 800e870:	e7fe      	b.n	800e870 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e872:	f002 fdd7 	bl	8011424 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87e:	68f9      	ldr	r1, [r7, #12]
 800e880:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e882:	fb01 f303 	mul.w	r3, r1, r3
 800e886:	441a      	add	r2, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8a2:	3b01      	subs	r3, #1
 800e8a4:	68f9      	ldr	r1, [r7, #12]
 800e8a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8a8:	fb01 f303 	mul.w	r3, r1, r3
 800e8ac:	441a      	add	r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	22ff      	movs	r2, #255	; 0xff
 800e8b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	22ff      	movs	r2, #255	; 0xff
 800e8be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d114      	bne.n	800e8f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d01a      	beq.n	800e906 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	3310      	adds	r3, #16
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f001 fcf1 	bl	80102bc <xTaskRemoveFromEventList>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d012      	beq.n	800e906 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e8e0:	4b0c      	ldr	r3, [pc, #48]	; (800e914 <xQueueGenericReset+0xcc>)
 800e8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e6:	601a      	str	r2, [r3, #0]
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	e009      	b.n	800e906 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3310      	adds	r3, #16
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7ff fef2 	bl	800e6e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	3324      	adds	r3, #36	; 0x24
 800e900:	4618      	mov	r0, r3
 800e902:	f7ff feed 	bl	800e6e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e906:	f002 fdbd 	bl	8011484 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e90a:	2301      	movs	r3, #1
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3710      	adds	r7, #16
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	e000ed04 	.word	0xe000ed04

0800e918 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08e      	sub	sp, #56	; 0x38
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10a      	bne.n	800e942 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e93e:	bf00      	nop
 800e940:	e7fe      	b.n	800e940 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10a      	bne.n	800e95e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94c:	f383 8811 	msr	BASEPRI, r3
 800e950:	f3bf 8f6f 	isb	sy
 800e954:	f3bf 8f4f 	dsb	sy
 800e958:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e95a:	bf00      	nop
 800e95c:	e7fe      	b.n	800e95c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <xQueueGenericCreateStatic+0x52>
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d001      	beq.n	800e96e <xQueueGenericCreateStatic+0x56>
 800e96a:	2301      	movs	r3, #1
 800e96c:	e000      	b.n	800e970 <xQueueGenericCreateStatic+0x58>
 800e96e:	2300      	movs	r3, #0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10a      	bne.n	800e98a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	623b      	str	r3, [r7, #32]
}
 800e986:	bf00      	nop
 800e988:	e7fe      	b.n	800e988 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <xQueueGenericCreateStatic+0x7e>
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <xQueueGenericCreateStatic+0x82>
 800e996:	2301      	movs	r3, #1
 800e998:	e000      	b.n	800e99c <xQueueGenericCreateStatic+0x84>
 800e99a:	2300      	movs	r3, #0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d10a      	bne.n	800e9b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a4:	f383 8811 	msr	BASEPRI, r3
 800e9a8:	f3bf 8f6f 	isb	sy
 800e9ac:	f3bf 8f4f 	dsb	sy
 800e9b0:	61fb      	str	r3, [r7, #28]
}
 800e9b2:	bf00      	nop
 800e9b4:	e7fe      	b.n	800e9b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e9b6:	2350      	movs	r3, #80	; 0x50
 800e9b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b50      	cmp	r3, #80	; 0x50
 800e9be:	d00a      	beq.n	800e9d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	61bb      	str	r3, [r7, #24]
}
 800e9d2:	bf00      	nop
 800e9d4:	e7fe      	b.n	800e9d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e9d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00d      	beq.n	800e9fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	68b9      	ldr	r1, [r7, #8]
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f000 f83f 	bl	800ea7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3730      	adds	r7, #48	; 0x30
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08a      	sub	sp, #40	; 0x28
 800ea0c:	af02      	add	r7, sp, #8
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	4613      	mov	r3, r2
 800ea14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d10a      	bne.n	800ea32 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	613b      	str	r3, [r7, #16]
}
 800ea2e:	bf00      	nop
 800ea30:	e7fe      	b.n	800ea30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	68ba      	ldr	r2, [r7, #8]
 800ea36:	fb02 f303 	mul.w	r3, r2, r3
 800ea3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	3350      	adds	r3, #80	; 0x50
 800ea40:	4618      	mov	r0, r3
 800ea42:	f002 fe11 	bl	8011668 <pvPortMalloc>
 800ea46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d011      	beq.n	800ea72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	3350      	adds	r3, #80	; 0x50
 800ea56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea60:	79fa      	ldrb	r2, [r7, #7]
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	4613      	mov	r3, r2
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	68b9      	ldr	r1, [r7, #8]
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f000 f805 	bl	800ea7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea72:	69bb      	ldr	r3, [r7, #24]
	}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3720      	adds	r7, #32
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
 800ea88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d103      	bne.n	800ea98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	69ba      	ldr	r2, [r7, #24]
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	e002      	b.n	800ea9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eaaa:	2101      	movs	r1, #1
 800eaac:	69b8      	ldr	r0, [r7, #24]
 800eaae:	f7ff fecb 	bl	800e848 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	78fa      	ldrb	r2, [r7, #3]
 800eab6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eaba:	bf00      	nop
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b08a      	sub	sp, #40	; 0x28
 800eac6:	af02      	add	r7, sp, #8
 800eac8:	60f8      	str	r0, [r7, #12]
 800eaca:	60b9      	str	r1, [r7, #8]
 800eacc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10a      	bne.n	800eaea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ead4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead8:	f383 8811 	msr	BASEPRI, r3
 800eadc:	f3bf 8f6f 	isb	sy
 800eae0:	f3bf 8f4f 	dsb	sy
 800eae4:	61bb      	str	r3, [r7, #24]
}
 800eae6:	bf00      	nop
 800eae8:	e7fe      	b.n	800eae8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d90a      	bls.n	800eb08 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800eaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf6:	f383 8811 	msr	BASEPRI, r3
 800eafa:	f3bf 8f6f 	isb	sy
 800eafe:	f3bf 8f4f 	dsb	sy
 800eb02:	617b      	str	r3, [r7, #20]
}
 800eb04:	bf00      	nop
 800eb06:	e7fe      	b.n	800eb06 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eb08:	2302      	movs	r3, #2
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	2100      	movs	r1, #0
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7ff ff00 	bl	800e918 <xQueueGenericCreateStatic>
 800eb18:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d002      	beq.n	800eb26 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	68ba      	ldr	r2, [r7, #8]
 800eb24:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eb26:	69fb      	ldr	r3, [r7, #28]
	}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3720      	adds	r7, #32
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10a      	bne.n	800eb56 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb44:	f383 8811 	msr	BASEPRI, r3
 800eb48:	f3bf 8f6f 	isb	sy
 800eb4c:	f3bf 8f4f 	dsb	sy
 800eb50:	613b      	str	r3, [r7, #16]
}
 800eb52:	bf00      	nop
 800eb54:	e7fe      	b.n	800eb54 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d90a      	bls.n	800eb74 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800eb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb62:	f383 8811 	msr	BASEPRI, r3
 800eb66:	f3bf 8f6f 	isb	sy
 800eb6a:	f3bf 8f4f 	dsb	sy
 800eb6e:	60fb      	str	r3, [r7, #12]
}
 800eb70:	bf00      	nop
 800eb72:	e7fe      	b.n	800eb72 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eb74:	2202      	movs	r2, #2
 800eb76:	2100      	movs	r1, #0
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff ff45 	bl	800ea08 <xQueueGenericCreate>
 800eb7e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d002      	beq.n	800eb8c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eb8c:	697b      	ldr	r3, [r7, #20]
	}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
	...

0800eb98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b08e      	sub	sp, #56	; 0x38
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
 800eba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eba6:	2300      	movs	r3, #0
 800eba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10a      	bne.n	800ebca <xQueueGenericSend+0x32>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ebc6:	bf00      	nop
 800ebc8:	e7fe      	b.n	800ebc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d103      	bne.n	800ebd8 <xQueueGenericSend+0x40>
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d101      	bne.n	800ebdc <xQueueGenericSend+0x44>
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e000      	b.n	800ebde <xQueueGenericSend+0x46>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d10a      	bne.n	800ebf8 <xQueueGenericSend+0x60>
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe6:	f383 8811 	msr	BASEPRI, r3
 800ebea:	f3bf 8f6f 	isb	sy
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebf4:	bf00      	nop
 800ebf6:	e7fe      	b.n	800ebf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d103      	bne.n	800ec06 <xQueueGenericSend+0x6e>
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d101      	bne.n	800ec0a <xQueueGenericSend+0x72>
 800ec06:	2301      	movs	r3, #1
 800ec08:	e000      	b.n	800ec0c <xQueueGenericSend+0x74>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d10a      	bne.n	800ec26 <xQueueGenericSend+0x8e>
	__asm volatile
 800ec10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	623b      	str	r3, [r7, #32]
}
 800ec22:	bf00      	nop
 800ec24:	e7fe      	b.n	800ec24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec26:	f001 fd69 	bl	80106fc <xTaskGetSchedulerState>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <xQueueGenericSend+0x9e>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d101      	bne.n	800ec3a <xQueueGenericSend+0xa2>
 800ec36:	2301      	movs	r3, #1
 800ec38:	e000      	b.n	800ec3c <xQueueGenericSend+0xa4>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10a      	bne.n	800ec56 <xQueueGenericSend+0xbe>
	__asm volatile
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	61fb      	str	r3, [r7, #28]
}
 800ec52:	bf00      	nop
 800ec54:	e7fe      	b.n	800ec54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec56:	f002 fbe5 	bl	8011424 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d302      	bcc.n	800ec6c <xQueueGenericSend+0xd4>
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d129      	bne.n	800ecc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec6c:	683a      	ldr	r2, [r7, #0]
 800ec6e:	68b9      	ldr	r1, [r7, #8]
 800ec70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec72:	f000 fc5e 	bl	800f532 <prvCopyDataToQueue>
 800ec76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d010      	beq.n	800eca2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec82:	3324      	adds	r3, #36	; 0x24
 800ec84:	4618      	mov	r0, r3
 800ec86:	f001 fb19 	bl	80102bc <xTaskRemoveFromEventList>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d013      	beq.n	800ecb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec90:	4b3f      	ldr	r3, [pc, #252]	; (800ed90 <xQueueGenericSend+0x1f8>)
 800ec92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec96:	601a      	str	r2, [r3, #0]
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	e00a      	b.n	800ecb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d007      	beq.n	800ecb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eca8:	4b39      	ldr	r3, [pc, #228]	; (800ed90 <xQueueGenericSend+0x1f8>)
 800ecaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecae:	601a      	str	r2, [r3, #0]
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ecb8:	f002 fbe4 	bl	8011484 <vPortExitCritical>
				return pdPASS;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e063      	b.n	800ed88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d103      	bne.n	800ecce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ecc6:	f002 fbdd 	bl	8011484 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ecca:	2300      	movs	r3, #0
 800eccc:	e05c      	b.n	800ed88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ecce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d106      	bne.n	800ece2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ecd4:	f107 0314 	add.w	r3, r7, #20
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f001 fbb5 	bl	8010448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ecde:	2301      	movs	r3, #1
 800ece0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ece2:	f002 fbcf 	bl	8011484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ece6:	f001 f877 	bl	800fdd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ecea:	f002 fb9b 	bl	8011424 <vPortEnterCritical>
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecf4:	b25b      	sxtb	r3, r3
 800ecf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecfa:	d103      	bne.n	800ed04 <xQueueGenericSend+0x16c>
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed0a:	b25b      	sxtb	r3, r3
 800ed0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed10:	d103      	bne.n	800ed1a <xQueueGenericSend+0x182>
 800ed12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed1a:	f002 fbb3 	bl	8011484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed1e:	1d3a      	adds	r2, r7, #4
 800ed20:	f107 0314 	add.w	r3, r7, #20
 800ed24:	4611      	mov	r1, r2
 800ed26:	4618      	mov	r0, r3
 800ed28:	f001 fba4 	bl	8010474 <xTaskCheckForTimeOut>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d124      	bne.n	800ed7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed34:	f000 fcf5 	bl	800f722 <prvIsQueueFull>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d018      	beq.n	800ed70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	3310      	adds	r3, #16
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	4611      	mov	r1, r2
 800ed46:	4618      	mov	r0, r3
 800ed48:	f001 fa2c 	bl	80101a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed4e:	f000 fc80 	bl	800f652 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed52:	f001 f84f 	bl	800fdf4 <xTaskResumeAll>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f47f af7c 	bne.w	800ec56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ed5e:	4b0c      	ldr	r3, [pc, #48]	; (800ed90 <xQueueGenericSend+0x1f8>)
 800ed60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed64:	601a      	str	r2, [r3, #0]
 800ed66:	f3bf 8f4f 	dsb	sy
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	e772      	b.n	800ec56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed72:	f000 fc6e 	bl	800f652 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed76:	f001 f83d 	bl	800fdf4 <xTaskResumeAll>
 800ed7a:	e76c      	b.n	800ec56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed7e:	f000 fc68 	bl	800f652 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed82:	f001 f837 	bl	800fdf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3738      	adds	r7, #56	; 0x38
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	e000ed04 	.word	0xe000ed04

0800ed94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b090      	sub	sp, #64	; 0x40
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800eda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d10a      	bne.n	800edc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800edac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb0:	f383 8811 	msr	BASEPRI, r3
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800edbe:	bf00      	nop
 800edc0:	e7fe      	b.n	800edc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d103      	bne.n	800edd0 <xQueueGenericSendFromISR+0x3c>
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <xQueueGenericSendFromISR+0x40>
 800edd0:	2301      	movs	r3, #1
 800edd2:	e000      	b.n	800edd6 <xQueueGenericSendFromISR+0x42>
 800edd4:	2300      	movs	r3, #0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d10a      	bne.n	800edf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800edda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edde:	f383 8811 	msr	BASEPRI, r3
 800ede2:	f3bf 8f6f 	isb	sy
 800ede6:	f3bf 8f4f 	dsb	sy
 800edea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800edec:	bf00      	nop
 800edee:	e7fe      	b.n	800edee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	d103      	bne.n	800edfe <xQueueGenericSendFromISR+0x6a>
 800edf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d101      	bne.n	800ee02 <xQueueGenericSendFromISR+0x6e>
 800edfe:	2301      	movs	r3, #1
 800ee00:	e000      	b.n	800ee04 <xQueueGenericSendFromISR+0x70>
 800ee02:	2300      	movs	r3, #0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d10a      	bne.n	800ee1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	623b      	str	r3, [r7, #32]
}
 800ee1a:	bf00      	nop
 800ee1c:	e7fe      	b.n	800ee1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee1e:	f002 fbe3 	bl	80115e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ee22:	f3ef 8211 	mrs	r2, BASEPRI
 800ee26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2a:	f383 8811 	msr	BASEPRI, r3
 800ee2e:	f3bf 8f6f 	isb	sy
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	61fa      	str	r2, [r7, #28]
 800ee38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ee3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d302      	bcc.n	800ee50 <xQueueGenericSendFromISR+0xbc>
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	d12f      	bne.n	800eeb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee60:	683a      	ldr	r2, [r7, #0]
 800ee62:	68b9      	ldr	r1, [r7, #8]
 800ee64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee66:	f000 fb64 	bl	800f532 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee72:	d112      	bne.n	800ee9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d016      	beq.n	800eeaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7e:	3324      	adds	r3, #36	; 0x24
 800ee80:	4618      	mov	r0, r3
 800ee82:	f001 fa1b 	bl	80102bc <xTaskRemoveFromEventList>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00e      	beq.n	800eeaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d00b      	beq.n	800eeaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2201      	movs	r2, #1
 800ee96:	601a      	str	r2, [r3, #0]
 800ee98:	e007      	b.n	800eeaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee9e:	3301      	adds	r3, #1
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	b25a      	sxtb	r2, r3
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800eeae:	e001      	b.n	800eeb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eebe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3740      	adds	r7, #64	; 0x40
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b08e      	sub	sp, #56	; 0x38
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d10a      	bne.n	800eef4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	623b      	str	r3, [r7, #32]
}
 800eef0:	bf00      	nop
 800eef2:	e7fe      	b.n	800eef2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00a      	beq.n	800ef12 <xQueueGiveFromISR+0x48>
	__asm volatile
 800eefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef00:	f383 8811 	msr	BASEPRI, r3
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	61fb      	str	r3, [r7, #28]
}
 800ef0e:	bf00      	nop
 800ef10:	e7fe      	b.n	800ef10 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ef12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d103      	bne.n	800ef22 <xQueueGiveFromISR+0x58>
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <xQueueGiveFromISR+0x5c>
 800ef22:	2301      	movs	r3, #1
 800ef24:	e000      	b.n	800ef28 <xQueueGiveFromISR+0x5e>
 800ef26:	2300      	movs	r3, #0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10a      	bne.n	800ef42 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ef2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	61bb      	str	r3, [r7, #24]
}
 800ef3e:	bf00      	nop
 800ef40:	e7fe      	b.n	800ef40 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef42:	f002 fb51 	bl	80115e8 <vPortValidateInterruptPriority>
	__asm volatile
 800ef46:	f3ef 8211 	mrs	r2, BASEPRI
 800ef4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	617a      	str	r2, [r7, #20]
 800ef5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ef5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d22b      	bcs.n	800efca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7e:	1c5a      	adds	r2, r3, #1
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ef84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef8c:	d112      	bne.n	800efb4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d016      	beq.n	800efc4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	3324      	adds	r3, #36	; 0x24
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f001 f98e 	bl	80102bc <xTaskRemoveFromEventList>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00e      	beq.n	800efc4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d00b      	beq.n	800efc4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2201      	movs	r2, #1
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	e007      	b.n	800efc4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800efb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efb8:	3301      	adds	r3, #1
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	b25a      	sxtb	r2, r3
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800efc4:	2301      	movs	r3, #1
 800efc6:	637b      	str	r3, [r7, #52]	; 0x34
 800efc8:	e001      	b.n	800efce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800efca:	2300      	movs	r3, #0
 800efcc:	637b      	str	r3, [r7, #52]	; 0x34
 800efce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f383 8811 	msr	BASEPRI, r3
}
 800efd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800efda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3738      	adds	r7, #56	; 0x38
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08c      	sub	sp, #48	; 0x30
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eff0:	2300      	movs	r3, #0
 800eff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10a      	bne.n	800f014 <xQueueReceive+0x30>
	__asm volatile
 800effe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f002:	f383 8811 	msr	BASEPRI, r3
 800f006:	f3bf 8f6f 	isb	sy
 800f00a:	f3bf 8f4f 	dsb	sy
 800f00e:	623b      	str	r3, [r7, #32]
}
 800f010:	bf00      	nop
 800f012:	e7fe      	b.n	800f012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d103      	bne.n	800f022 <xQueueReceive+0x3e>
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d101      	bne.n	800f026 <xQueueReceive+0x42>
 800f022:	2301      	movs	r3, #1
 800f024:	e000      	b.n	800f028 <xQueueReceive+0x44>
 800f026:	2300      	movs	r3, #0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d10a      	bne.n	800f042 <xQueueReceive+0x5e>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f030:	f383 8811 	msr	BASEPRI, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	61fb      	str	r3, [r7, #28]
}
 800f03e:	bf00      	nop
 800f040:	e7fe      	b.n	800f040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f042:	f001 fb5b 	bl	80106fc <xTaskGetSchedulerState>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d102      	bne.n	800f052 <xQueueReceive+0x6e>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <xQueueReceive+0x72>
 800f052:	2301      	movs	r3, #1
 800f054:	e000      	b.n	800f058 <xQueueReceive+0x74>
 800f056:	2300      	movs	r3, #0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d10a      	bne.n	800f072 <xQueueReceive+0x8e>
	__asm volatile
 800f05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	61bb      	str	r3, [r7, #24]
}
 800f06e:	bf00      	nop
 800f070:	e7fe      	b.n	800f070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f072:	f002 f9d7 	bl	8011424 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f07a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d01f      	beq.n	800f0c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f082:	68b9      	ldr	r1, [r7, #8]
 800f084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f086:	f000 fabe 	bl	800f606 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	1e5a      	subs	r2, r3, #1
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00f      	beq.n	800f0ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09c:	3310      	adds	r3, #16
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f001 f90c 	bl	80102bc <xTaskRemoveFromEventList>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d007      	beq.n	800f0ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0aa:	4b3d      	ldr	r3, [pc, #244]	; (800f1a0 <xQueueReceive+0x1bc>)
 800f0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0b0:	601a      	str	r2, [r3, #0]
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0ba:	f002 f9e3 	bl	8011484 <vPortExitCritical>
				return pdPASS;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e069      	b.n	800f196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d103      	bne.n	800f0d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f0c8:	f002 f9dc 	bl	8011484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e062      	b.n	800f196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d106      	bne.n	800f0e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f0d6:	f107 0310 	add.w	r3, r7, #16
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f001 f9b4 	bl	8010448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0e4:	f002 f9ce 	bl	8011484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0e8:	f000 fe76 	bl	800fdd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0ec:	f002 f99a 	bl	8011424 <vPortEnterCritical>
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0f6:	b25b      	sxtb	r3, r3
 800f0f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0fc:	d103      	bne.n	800f106 <xQueueReceive+0x122>
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	2200      	movs	r2, #0
 800f102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f10c:	b25b      	sxtb	r3, r3
 800f10e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f112:	d103      	bne.n	800f11c <xQueueReceive+0x138>
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	2200      	movs	r2, #0
 800f118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f11c:	f002 f9b2 	bl	8011484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f120:	1d3a      	adds	r2, r7, #4
 800f122:	f107 0310 	add.w	r3, r7, #16
 800f126:	4611      	mov	r1, r2
 800f128:	4618      	mov	r0, r3
 800f12a:	f001 f9a3 	bl	8010474 <xTaskCheckForTimeOut>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d123      	bne.n	800f17c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f136:	f000 fade 	bl	800f6f6 <prvIsQueueEmpty>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d017      	beq.n	800f170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f142:	3324      	adds	r3, #36	; 0x24
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	4611      	mov	r1, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	f001 f82b 	bl	80101a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f150:	f000 fa7f 	bl	800f652 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f154:	f000 fe4e 	bl	800fdf4 <xTaskResumeAll>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d189      	bne.n	800f072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f15e:	4b10      	ldr	r3, [pc, #64]	; (800f1a0 <xQueueReceive+0x1bc>)
 800f160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	f3bf 8f4f 	dsb	sy
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	e780      	b.n	800f072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f172:	f000 fa6e 	bl	800f652 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f176:	f000 fe3d 	bl	800fdf4 <xTaskResumeAll>
 800f17a:	e77a      	b.n	800f072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f17e:	f000 fa68 	bl	800f652 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f182:	f000 fe37 	bl	800fdf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f188:	f000 fab5 	bl	800f6f6 <prvIsQueueEmpty>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f43f af6f 	beq.w	800f072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f196:	4618      	mov	r0, r3
 800f198:	3730      	adds	r7, #48	; 0x30
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	e000ed04 	.word	0xe000ed04

0800f1a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08e      	sub	sp, #56	; 0x38
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10a      	bne.n	800f1d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	623b      	str	r3, [r7, #32]
}
 800f1d2:	bf00      	nop
 800f1d4:	e7fe      	b.n	800f1d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00a      	beq.n	800f1f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	61fb      	str	r3, [r7, #28]
}
 800f1f0:	bf00      	nop
 800f1f2:	e7fe      	b.n	800f1f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1f4:	f001 fa82 	bl	80106fc <xTaskGetSchedulerState>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d102      	bne.n	800f204 <xQueueSemaphoreTake+0x60>
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d101      	bne.n	800f208 <xQueueSemaphoreTake+0x64>
 800f204:	2301      	movs	r3, #1
 800f206:	e000      	b.n	800f20a <xQueueSemaphoreTake+0x66>
 800f208:	2300      	movs	r3, #0
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d10a      	bne.n	800f224 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	61bb      	str	r3, [r7, #24]
}
 800f220:	bf00      	nop
 800f222:	e7fe      	b.n	800f222 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f224:	f002 f8fe 	bl	8011424 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f22c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f230:	2b00      	cmp	r3, #0
 800f232:	d024      	beq.n	800f27e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	1e5a      	subs	r2, r3, #1
 800f238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d104      	bne.n	800f24e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f244:	f001 fbe8 	bl	8010a18 <pvTaskIncrementMutexHeldCount>
 800f248:	4602      	mov	r2, r0
 800f24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00f      	beq.n	800f276 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	3310      	adds	r3, #16
 800f25a:	4618      	mov	r0, r3
 800f25c:	f001 f82e 	bl	80102bc <xTaskRemoveFromEventList>
 800f260:	4603      	mov	r3, r0
 800f262:	2b00      	cmp	r3, #0
 800f264:	d007      	beq.n	800f276 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f266:	4b54      	ldr	r3, [pc, #336]	; (800f3b8 <xQueueSemaphoreTake+0x214>)
 800f268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f276:	f002 f905 	bl	8011484 <vPortExitCritical>
				return pdPASS;
 800f27a:	2301      	movs	r3, #1
 800f27c:	e097      	b.n	800f3ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d111      	bne.n	800f2a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00a      	beq.n	800f2a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28e:	f383 8811 	msr	BASEPRI, r3
 800f292:	f3bf 8f6f 	isb	sy
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	617b      	str	r3, [r7, #20]
}
 800f29c:	bf00      	nop
 800f29e:	e7fe      	b.n	800f29e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f2a0:	f002 f8f0 	bl	8011484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e082      	b.n	800f3ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d106      	bne.n	800f2bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2ae:	f107 030c 	add.w	r3, r7, #12
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f001 f8c8 	bl	8010448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f2bc:	f002 f8e2 	bl	8011484 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2c0:	f000 fd8a 	bl	800fdd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2c4:	f002 f8ae 	bl	8011424 <vPortEnterCritical>
 800f2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2ce:	b25b      	sxtb	r3, r3
 800f2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2d4:	d103      	bne.n	800f2de <xQueueSemaphoreTake+0x13a>
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2e4:	b25b      	sxtb	r3, r3
 800f2e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2ea:	d103      	bne.n	800f2f4 <xQueueSemaphoreTake+0x150>
 800f2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2f4:	f002 f8c6 	bl	8011484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2f8:	463a      	mov	r2, r7
 800f2fa:	f107 030c 	add.w	r3, r7, #12
 800f2fe:	4611      	mov	r1, r2
 800f300:	4618      	mov	r0, r3
 800f302:	f001 f8b7 	bl	8010474 <xTaskCheckForTimeOut>
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d132      	bne.n	800f372 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f30e:	f000 f9f2 	bl	800f6f6 <prvIsQueueEmpty>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	d026      	beq.n	800f366 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d109      	bne.n	800f334 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f320:	f002 f880 	bl	8011424 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	689b      	ldr	r3, [r3, #8]
 800f328:	4618      	mov	r0, r3
 800f32a:	f001 fa05 	bl	8010738 <xTaskPriorityInherit>
 800f32e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f330:	f002 f8a8 	bl	8011484 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	3324      	adds	r3, #36	; 0x24
 800f338:	683a      	ldr	r2, [r7, #0]
 800f33a:	4611      	mov	r1, r2
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 ff31 	bl	80101a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f344:	f000 f985 	bl	800f652 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f348:	f000 fd54 	bl	800fdf4 <xTaskResumeAll>
 800f34c:	4603      	mov	r3, r0
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f47f af68 	bne.w	800f224 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f354:	4b18      	ldr	r3, [pc, #96]	; (800f3b8 <xQueueSemaphoreTake+0x214>)
 800f356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f35a:	601a      	str	r2, [r3, #0]
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	f3bf 8f6f 	isb	sy
 800f364:	e75e      	b.n	800f224 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f368:	f000 f973 	bl	800f652 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f36c:	f000 fd42 	bl	800fdf4 <xTaskResumeAll>
 800f370:	e758      	b.n	800f224 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f374:	f000 f96d 	bl	800f652 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f378:	f000 fd3c 	bl	800fdf4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f37e:	f000 f9ba 	bl	800f6f6 <prvIsQueueEmpty>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	f43f af4d 	beq.w	800f224 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00d      	beq.n	800f3ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f390:	f002 f848 	bl	8011424 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f396:	f000 f8b4 	bl	800f502 <prvGetDisinheritPriorityAfterTimeout>
 800f39a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39e:	689b      	ldr	r3, [r3, #8]
 800f3a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f001 fa9e 	bl	80108e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f3a8:	f002 f86c 	bl	8011484 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3738      	adds	r7, #56	; 0x38
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	e000ed04 	.word	0xe000ed04

0800f3bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b08e      	sub	sp, #56	; 0x38
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10a      	bne.n	800f3e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d6:	f383 8811 	msr	BASEPRI, r3
 800f3da:	f3bf 8f6f 	isb	sy
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	623b      	str	r3, [r7, #32]
}
 800f3e4:	bf00      	nop
 800f3e6:	e7fe      	b.n	800f3e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d103      	bne.n	800f3f6 <xQueueReceiveFromISR+0x3a>
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d101      	bne.n	800f3fa <xQueueReceiveFromISR+0x3e>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	e000      	b.n	800f3fc <xQueueReceiveFromISR+0x40>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10a      	bne.n	800f416 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	61fb      	str	r3, [r7, #28]
}
 800f412:	bf00      	nop
 800f414:	e7fe      	b.n	800f414 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f416:	f002 f8e7 	bl	80115e8 <vPortValidateInterruptPriority>
	__asm volatile
 800f41a:	f3ef 8211 	mrs	r2, BASEPRI
 800f41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	61ba      	str	r2, [r7, #24]
 800f430:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f432:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f434:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f43a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d02f      	beq.n	800f4a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f44c:	68b9      	ldr	r1, [r7, #8]
 800f44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f450:	f000 f8d9 	bl	800f606 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f456:	1e5a      	subs	r2, r3, #1
 800f458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f45c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f464:	d112      	bne.n	800f48c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	691b      	ldr	r3, [r3, #16]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d016      	beq.n	800f49c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f470:	3310      	adds	r3, #16
 800f472:	4618      	mov	r0, r3
 800f474:	f000 ff22 	bl	80102bc <xTaskRemoveFromEventList>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00e      	beq.n	800f49c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00b      	beq.n	800f49c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2201      	movs	r2, #1
 800f488:	601a      	str	r2, [r3, #0]
 800f48a:	e007      	b.n	800f49c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f490:	3301      	adds	r3, #1
 800f492:	b2db      	uxtb	r3, r3
 800f494:	b25a      	sxtb	r2, r3
 800f496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f49c:	2301      	movs	r3, #1
 800f49e:	637b      	str	r3, [r7, #52]	; 0x34
 800f4a0:	e001      	b.n	800f4a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f383 8811 	msr	BASEPRI, r3
}
 800f4b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3738      	adds	r7, #56	; 0x38
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d10a      	bne.n	800f4e4 <vQueueDelete+0x28>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	60bb      	str	r3, [r7, #8]
}
 800f4e0:	bf00      	nop
 800f4e2:	e7fe      	b.n	800f4e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f000 f95f 	bl	800f7a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d102      	bne.n	800f4fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f002 f983 	bl	8011800 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f4fa:	bf00      	nop
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f502:	b480      	push	{r7}
 800f504:	b085      	sub	sp, #20
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d006      	beq.n	800f520 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f51c:	60fb      	str	r3, [r7, #12]
 800f51e:	e001      	b.n	800f524 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f520:	2300      	movs	r3, #0
 800f522:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f524:	68fb      	ldr	r3, [r7, #12]
	}
 800f526:	4618      	mov	r0, r3
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr

0800f532 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b086      	sub	sp, #24
 800f536:	af00      	add	r7, sp, #0
 800f538:	60f8      	str	r0, [r7, #12]
 800f53a:	60b9      	str	r1, [r7, #8]
 800f53c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f53e:	2300      	movs	r3, #0
 800f540:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f546:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10d      	bne.n	800f56c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d14d      	bne.n	800f5f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	689b      	ldr	r3, [r3, #8]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f001 f953 	bl	8010808 <xTaskPriorityDisinherit>
 800f562:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2200      	movs	r2, #0
 800f568:	609a      	str	r2, [r3, #8]
 800f56a:	e043      	b.n	800f5f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d119      	bne.n	800f5a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6858      	ldr	r0, [r3, #4]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f57a:	461a      	mov	r2, r3
 800f57c:	68b9      	ldr	r1, [r7, #8]
 800f57e:	f002 fa87 	bl	8011a90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f58a:	441a      	add	r2, r3
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	685a      	ldr	r2, [r3, #4]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d32b      	bcc.n	800f5f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	605a      	str	r2, [r3, #4]
 800f5a4:	e026      	b.n	800f5f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	68d8      	ldr	r0, [r3, #12]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	68b9      	ldr	r1, [r7, #8]
 800f5b2:	f002 fa6d 	bl	8011a90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	68da      	ldr	r2, [r3, #12]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5be:	425b      	negs	r3, r3
 800f5c0:	441a      	add	r2, r3
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	68da      	ldr	r2, [r3, #12]
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d207      	bcs.n	800f5e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	689a      	ldr	r2, [r3, #8]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5da:	425b      	negs	r3, r3
 800f5dc:	441a      	add	r2, r3
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	d105      	bne.n	800f5f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d002      	beq.n	800f5f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	1c5a      	adds	r2, r3, #1
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f5fc:	697b      	ldr	r3, [r7, #20]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3718      	adds	r7, #24
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b082      	sub	sp, #8
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f614:	2b00      	cmp	r3, #0
 800f616:	d018      	beq.n	800f64a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	68da      	ldr	r2, [r3, #12]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f620:	441a      	add	r2, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68da      	ldr	r2, [r3, #12]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	689b      	ldr	r3, [r3, #8]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d303      	bcc.n	800f63a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68d9      	ldr	r1, [r3, #12]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f642:	461a      	mov	r2, r3
 800f644:	6838      	ldr	r0, [r7, #0]
 800f646:	f002 fa23 	bl	8011a90 <memcpy>
	}
}
 800f64a:	bf00      	nop
 800f64c:	3708      	adds	r7, #8
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b084      	sub	sp, #16
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f65a:	f001 fee3 	bl	8011424 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f664:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f666:	e011      	b.n	800f68c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d012      	beq.n	800f696 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	3324      	adds	r3, #36	; 0x24
 800f674:	4618      	mov	r0, r3
 800f676:	f000 fe21 	bl	80102bc <xTaskRemoveFromEventList>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f680:	f000 ff5a 	bl	8010538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f684:	7bfb      	ldrb	r3, [r7, #15]
 800f686:	3b01      	subs	r3, #1
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f690:	2b00      	cmp	r3, #0
 800f692:	dce9      	bgt.n	800f668 <prvUnlockQueue+0x16>
 800f694:	e000      	b.n	800f698 <prvUnlockQueue+0x46>
					break;
 800f696:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	22ff      	movs	r2, #255	; 0xff
 800f69c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f6a0:	f001 fef0 	bl	8011484 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f6a4:	f001 febe 	bl	8011424 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6b0:	e011      	b.n	800f6d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d012      	beq.n	800f6e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	3310      	adds	r3, #16
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f000 fdfc 	bl	80102bc <xTaskRemoveFromEventList>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f6ca:	f000 ff35 	bl	8010538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f6ce:	7bbb      	ldrb	r3, [r7, #14]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dce9      	bgt.n	800f6b2 <prvUnlockQueue+0x60>
 800f6de:	e000      	b.n	800f6e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f6e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	22ff      	movs	r2, #255	; 0xff
 800f6e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f6ea:	f001 fecb 	bl	8011484 <vPortExitCritical>
}
 800f6ee:	bf00      	nop
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b084      	sub	sp, #16
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6fe:	f001 fe91 	bl	8011424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f706:	2b00      	cmp	r3, #0
 800f708:	d102      	bne.n	800f710 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f70a:	2301      	movs	r3, #1
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	e001      	b.n	800f714 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f710:	2300      	movs	r3, #0
 800f712:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f714:	f001 feb6 	bl	8011484 <vPortExitCritical>

	return xReturn;
 800f718:	68fb      	ldr	r3, [r7, #12]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b084      	sub	sp, #16
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f72a:	f001 fe7b 	bl	8011424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f736:	429a      	cmp	r2, r3
 800f738:	d102      	bne.n	800f740 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f73a:	2301      	movs	r3, #1
 800f73c:	60fb      	str	r3, [r7, #12]
 800f73e:	e001      	b.n	800f744 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f740:	2300      	movs	r3, #0
 800f742:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f744:	f001 fe9e 	bl	8011484 <vPortExitCritical>

	return xReturn;
 800f748:	68fb      	ldr	r3, [r7, #12]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
	...

0800f754 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f75e:	2300      	movs	r3, #0
 800f760:	60fb      	str	r3, [r7, #12]
 800f762:	e014      	b.n	800f78e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f764:	4a0f      	ldr	r2, [pc, #60]	; (800f7a4 <vQueueAddToRegistry+0x50>)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d10b      	bne.n	800f788 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f770:	490c      	ldr	r1, [pc, #48]	; (800f7a4 <vQueueAddToRegistry+0x50>)
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f77a:	4a0a      	ldr	r2, [pc, #40]	; (800f7a4 <vQueueAddToRegistry+0x50>)
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	00db      	lsls	r3, r3, #3
 800f780:	4413      	add	r3, r2
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f786:	e006      	b.n	800f796 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	3301      	adds	r3, #1
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2b07      	cmp	r3, #7
 800f792:	d9e7      	bls.n	800f764 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f794:	bf00      	nop
 800f796:	bf00      	nop
 800f798:	3714      	adds	r7, #20
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	20010504 	.word	0x20010504

0800f7a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b085      	sub	sp, #20
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	60fb      	str	r3, [r7, #12]
 800f7b4:	e016      	b.n	800f7e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f7b6:	4a10      	ldr	r2, [pc, #64]	; (800f7f8 <vQueueUnregisterQueue+0x50>)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	00db      	lsls	r3, r3, #3
 800f7bc:	4413      	add	r3, r2
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d10b      	bne.n	800f7de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f7c6:	4a0c      	ldr	r2, [pc, #48]	; (800f7f8 <vQueueUnregisterQueue+0x50>)
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f7d0:	4a09      	ldr	r2, [pc, #36]	; (800f7f8 <vQueueUnregisterQueue+0x50>)
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	4413      	add	r3, r2
 800f7d8:	2200      	movs	r2, #0
 800f7da:	605a      	str	r2, [r3, #4]
				break;
 800f7dc:	e006      	b.n	800f7ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	60fb      	str	r3, [r7, #12]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2b07      	cmp	r3, #7
 800f7e8:	d9e5      	bls.n	800f7b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f7ea:	bf00      	nop
 800f7ec:	bf00      	nop
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr
 800f7f8:	20010504 	.word	0x20010504

0800f7fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f80c:	f001 fe0a 	bl	8011424 <vPortEnterCritical>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f816:	b25b      	sxtb	r3, r3
 800f818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f81c:	d103      	bne.n	800f826 <vQueueWaitForMessageRestricted+0x2a>
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f82c:	b25b      	sxtb	r3, r3
 800f82e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f832:	d103      	bne.n	800f83c <vQueueWaitForMessageRestricted+0x40>
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	2200      	movs	r2, #0
 800f838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f83c:	f001 fe22 	bl	8011484 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f844:	2b00      	cmp	r3, #0
 800f846:	d106      	bne.n	800f856 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	3324      	adds	r3, #36	; 0x24
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	68b9      	ldr	r1, [r7, #8]
 800f850:	4618      	mov	r0, r3
 800f852:	f000 fd07 	bl	8010264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f856:	6978      	ldr	r0, [r7, #20]
 800f858:	f7ff fefb 	bl	800f652 <prvUnlockQueue>
	}
 800f85c:	bf00      	nop
 800f85e:	3718      	adds	r7, #24
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08e      	sub	sp, #56	; 0x38
 800f868:	af04      	add	r7, sp, #16
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
 800f870:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f874:	2b00      	cmp	r3, #0
 800f876:	d10a      	bne.n	800f88e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87c:	f383 8811 	msr	BASEPRI, r3
 800f880:	f3bf 8f6f 	isb	sy
 800f884:	f3bf 8f4f 	dsb	sy
 800f888:	623b      	str	r3, [r7, #32]
}
 800f88a:	bf00      	nop
 800f88c:	e7fe      	b.n	800f88c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f890:	2b00      	cmp	r3, #0
 800f892:	d10a      	bne.n	800f8aa <xTaskCreateStatic+0x46>
	__asm volatile
 800f894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f898:	f383 8811 	msr	BASEPRI, r3
 800f89c:	f3bf 8f6f 	isb	sy
 800f8a0:	f3bf 8f4f 	dsb	sy
 800f8a4:	61fb      	str	r3, [r7, #28]
}
 800f8a6:	bf00      	nop
 800f8a8:	e7fe      	b.n	800f8a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f8aa:	235c      	movs	r3, #92	; 0x5c
 800f8ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b5c      	cmp	r3, #92	; 0x5c
 800f8b2:	d00a      	beq.n	800f8ca <xTaskCreateStatic+0x66>
	__asm volatile
 800f8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b8:	f383 8811 	msr	BASEPRI, r3
 800f8bc:	f3bf 8f6f 	isb	sy
 800f8c0:	f3bf 8f4f 	dsb	sy
 800f8c4:	61bb      	str	r3, [r7, #24]
}
 800f8c6:	bf00      	nop
 800f8c8:	e7fe      	b.n	800f8c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f8ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d01e      	beq.n	800f910 <xTaskCreateStatic+0xac>
 800f8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d01b      	beq.n	800f910 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e4:	2202      	movs	r2, #2
 800f8e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	9303      	str	r3, [sp, #12]
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f0:	9302      	str	r3, [sp, #8]
 800f8f2:	f107 0314 	add.w	r3, r7, #20
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	68b9      	ldr	r1, [r7, #8]
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f000 f850 	bl	800f9a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f90a:	f000 f8dd 	bl	800fac8 <prvAddNewTaskToReadyList>
 800f90e:	e001      	b.n	800f914 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f910:	2300      	movs	r3, #0
 800f912:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f914:	697b      	ldr	r3, [r7, #20]
	}
 800f916:	4618      	mov	r0, r3
 800f918:	3728      	adds	r7, #40	; 0x28
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b08c      	sub	sp, #48	; 0x30
 800f922:	af04      	add	r7, sp, #16
 800f924:	60f8      	str	r0, [r7, #12]
 800f926:	60b9      	str	r1, [r7, #8]
 800f928:	603b      	str	r3, [r7, #0]
 800f92a:	4613      	mov	r3, r2
 800f92c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f92e:	88fb      	ldrh	r3, [r7, #6]
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4618      	mov	r0, r3
 800f934:	f001 fe98 	bl	8011668 <pvPortMalloc>
 800f938:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00e      	beq.n	800f95e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f940:	205c      	movs	r0, #92	; 0x5c
 800f942:	f001 fe91 	bl	8011668 <pvPortMalloc>
 800f946:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d003      	beq.n	800f956 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	697a      	ldr	r2, [r7, #20]
 800f952:	631a      	str	r2, [r3, #48]	; 0x30
 800f954:	e005      	b.n	800f962 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f956:	6978      	ldr	r0, [r7, #20]
 800f958:	f001 ff52 	bl	8011800 <vPortFree>
 800f95c:	e001      	b.n	800f962 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d017      	beq.n	800f998 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f970:	88fa      	ldrh	r2, [r7, #6]
 800f972:	2300      	movs	r3, #0
 800f974:	9303      	str	r3, [sp, #12]
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	9302      	str	r3, [sp, #8]
 800f97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97c:	9301      	str	r3, [sp, #4]
 800f97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	68b9      	ldr	r1, [r7, #8]
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f000 f80e 	bl	800f9a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f98c:	69f8      	ldr	r0, [r7, #28]
 800f98e:	f000 f89b 	bl	800fac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f992:	2301      	movs	r3, #1
 800f994:	61bb      	str	r3, [r7, #24]
 800f996:	e002      	b.n	800f99e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f99c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f99e:	69bb      	ldr	r3, [r7, #24]
	}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3720      	adds	r7, #32
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
 800f9b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	461a      	mov	r2, r3
 800f9c0:	21a5      	movs	r1, #165	; 0xa5
 800f9c2:	f002 f873 	bl	8011aac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	4413      	add	r3, r2
 800f9d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	f023 0307 	bic.w	r3, r3, #7
 800f9de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f9e0:	69bb      	ldr	r3, [r7, #24]
 800f9e2:	f003 0307 	and.w	r3, r3, #7
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00a      	beq.n	800fa00 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ee:	f383 8811 	msr	BASEPRI, r3
 800f9f2:	f3bf 8f6f 	isb	sy
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	617b      	str	r3, [r7, #20]
}
 800f9fc:	bf00      	nop
 800f9fe:	e7fe      	b.n	800f9fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d01f      	beq.n	800fa46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa06:	2300      	movs	r3, #0
 800fa08:	61fb      	str	r3, [r7, #28]
 800fa0a:	e012      	b.n	800fa32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	4413      	add	r3, r2
 800fa12:	7819      	ldrb	r1, [r3, #0]
 800fa14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	4413      	add	r3, r2
 800fa1a:	3334      	adds	r3, #52	; 0x34
 800fa1c:	460a      	mov	r2, r1
 800fa1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	4413      	add	r3, r2
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d006      	beq.n	800fa3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	61fb      	str	r3, [r7, #28]
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	2b0f      	cmp	r3, #15
 800fa36:	d9e9      	bls.n	800fa0c <prvInitialiseNewTask+0x64>
 800fa38:	e000      	b.n	800fa3c <prvInitialiseNewTask+0x94>
			{
				break;
 800fa3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa44:	e003      	b.n	800fa4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa50:	2b37      	cmp	r3, #55	; 0x37
 800fa52:	d901      	bls.n	800fa58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fa54:	2337      	movs	r3, #55	; 0x37
 800fa56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa66:	2200      	movs	r2, #0
 800fa68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6c:	3304      	adds	r3, #4
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fe fe56 	bl	800e720 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa76:	3318      	adds	r3, #24
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fe fe51 	bl	800e720 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa96:	2200      	movs	r2, #0
 800fa98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800faa2:	683a      	ldr	r2, [r7, #0]
 800faa4:	68f9      	ldr	r1, [r7, #12]
 800faa6:	69b8      	ldr	r0, [r7, #24]
 800faa8:	f001 fb8c 	bl	80111c4 <pxPortInitialiseStack>
 800faac:	4602      	mov	r2, r0
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fabc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fabe:	bf00      	nop
 800fac0:	3720      	adds	r7, #32
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
	...

0800fac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fad0:	f001 fca8 	bl	8011424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fad4:	4b2d      	ldr	r3, [pc, #180]	; (800fb8c <prvAddNewTaskToReadyList+0xc4>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	3301      	adds	r3, #1
 800fada:	4a2c      	ldr	r2, [pc, #176]	; (800fb8c <prvAddNewTaskToReadyList+0xc4>)
 800fadc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fade:	4b2c      	ldr	r3, [pc, #176]	; (800fb90 <prvAddNewTaskToReadyList+0xc8>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d109      	bne.n	800fafa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fae6:	4a2a      	ldr	r2, [pc, #168]	; (800fb90 <prvAddNewTaskToReadyList+0xc8>)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800faec:	4b27      	ldr	r3, [pc, #156]	; (800fb8c <prvAddNewTaskToReadyList+0xc4>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d110      	bne.n	800fb16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800faf4:	f000 fd44 	bl	8010580 <prvInitialiseTaskLists>
 800faf8:	e00d      	b.n	800fb16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fafa:	4b26      	ldr	r3, [pc, #152]	; (800fb94 <prvAddNewTaskToReadyList+0xcc>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d109      	bne.n	800fb16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fb02:	4b23      	ldr	r3, [pc, #140]	; (800fb90 <prvAddNewTaskToReadyList+0xc8>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d802      	bhi.n	800fb16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fb10:	4a1f      	ldr	r2, [pc, #124]	; (800fb90 <prvAddNewTaskToReadyList+0xc8>)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fb16:	4b20      	ldr	r3, [pc, #128]	; (800fb98 <prvAddNewTaskToReadyList+0xd0>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	4a1e      	ldr	r2, [pc, #120]	; (800fb98 <prvAddNewTaskToReadyList+0xd0>)
 800fb1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fb20:	4b1d      	ldr	r3, [pc, #116]	; (800fb98 <prvAddNewTaskToReadyList+0xd0>)
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2c:	4b1b      	ldr	r3, [pc, #108]	; (800fb9c <prvAddNewTaskToReadyList+0xd4>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d903      	bls.n	800fb3c <prvAddNewTaskToReadyList+0x74>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb38:	4a18      	ldr	r2, [pc, #96]	; (800fb9c <prvAddNewTaskToReadyList+0xd4>)
 800fb3a:	6013      	str	r3, [r2, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb40:	4613      	mov	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4a15      	ldr	r2, [pc, #84]	; (800fba0 <prvAddNewTaskToReadyList+0xd8>)
 800fb4a:	441a      	add	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3304      	adds	r3, #4
 800fb50:	4619      	mov	r1, r3
 800fb52:	4610      	mov	r0, r2
 800fb54:	f7fe fdf1 	bl	800e73a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb58:	f001 fc94 	bl	8011484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb5c:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <prvAddNewTaskToReadyList+0xcc>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00e      	beq.n	800fb82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fb64:	4b0a      	ldr	r3, [pc, #40]	; (800fb90 <prvAddNewTaskToReadyList+0xc8>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d207      	bcs.n	800fb82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fb72:	4b0c      	ldr	r3, [pc, #48]	; (800fba4 <prvAddNewTaskToReadyList+0xdc>)
 800fb74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb78:	601a      	str	r2, [r3, #0]
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb82:	bf00      	nop
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	20000db4 	.word	0x20000db4
 800fb90:	200008e0 	.word	0x200008e0
 800fb94:	20000dc0 	.word	0x20000dc0
 800fb98:	20000dd0 	.word	0x20000dd0
 800fb9c:	20000dbc 	.word	0x20000dbc
 800fba0:	200008e4 	.word	0x200008e4
 800fba4:	e000ed04 	.word	0xe000ed04

0800fba8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b08a      	sub	sp, #40	; 0x28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10a      	bne.n	800fbd2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800fbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc0:	f383 8811 	msr	BASEPRI, r3
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	617b      	str	r3, [r7, #20]
}
 800fbce:	bf00      	nop
 800fbd0:	e7fe      	b.n	800fbd0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d10a      	bne.n	800fbee <vTaskDelayUntil+0x46>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbdc:	f383 8811 	msr	BASEPRI, r3
 800fbe0:	f3bf 8f6f 	isb	sy
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	613b      	str	r3, [r7, #16]
}
 800fbea:	bf00      	nop
 800fbec:	e7fe      	b.n	800fbec <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800fbee:	4b2a      	ldr	r3, [pc, #168]	; (800fc98 <vTaskDelayUntil+0xf0>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d00a      	beq.n	800fc0c <vTaskDelayUntil+0x64>
	__asm volatile
 800fbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfa:	f383 8811 	msr	BASEPRI, r3
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f3bf 8f4f 	dsb	sy
 800fc06:	60fb      	str	r3, [r7, #12]
}
 800fc08:	bf00      	nop
 800fc0a:	e7fe      	b.n	800fc0a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800fc0c:	f000 f8e4 	bl	800fdd8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fc10:	4b22      	ldr	r3, [pc, #136]	; (800fc9c <vTaskDelayUntil+0xf4>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	683a      	ldr	r2, [r7, #0]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	6a3a      	ldr	r2, [r7, #32]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d20b      	bcs.n	800fc42 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	69fa      	ldr	r2, [r7, #28]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d211      	bcs.n	800fc58 <vTaskDelayUntil+0xb0>
 800fc34:	69fa      	ldr	r2, [r7, #28]
 800fc36:	6a3b      	ldr	r3, [r7, #32]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d90d      	bls.n	800fc58 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc40:	e00a      	b.n	800fc58 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	69fa      	ldr	r2, [r7, #28]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d303      	bcc.n	800fc54 <vTaskDelayUntil+0xac>
 800fc4c:	69fa      	ldr	r2, [r7, #28]
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d901      	bls.n	800fc58 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fc54:	2301      	movs	r3, #1
 800fc56:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	69fa      	ldr	r2, [r7, #28]
 800fc5c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d006      	beq.n	800fc72 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800fc64:	69fa      	ldr	r2, [r7, #28]
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	1ad3      	subs	r3, r2, r3
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f000 fee7 	bl	8010a40 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800fc72:	f000 f8bf 	bl	800fdf4 <xTaskResumeAll>
 800fc76:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d107      	bne.n	800fc8e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800fc7e:	4b08      	ldr	r3, [pc, #32]	; (800fca0 <vTaskDelayUntil+0xf8>)
 800fc80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc84:	601a      	str	r2, [r3, #0]
 800fc86:	f3bf 8f4f 	dsb	sy
 800fc8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc8e:	bf00      	nop
 800fc90:	3728      	adds	r7, #40	; 0x28
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	20000ddc 	.word	0x20000ddc
 800fc9c:	20000db8 	.word	0x20000db8
 800fca0:	e000ed04 	.word	0xe000ed04

0800fca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fcac:	2300      	movs	r3, #0
 800fcae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d017      	beq.n	800fce6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fcb6:	4b13      	ldr	r3, [pc, #76]	; (800fd04 <vTaskDelay+0x60>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d00a      	beq.n	800fcd4 <vTaskDelay+0x30>
	__asm volatile
 800fcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc2:	f383 8811 	msr	BASEPRI, r3
 800fcc6:	f3bf 8f6f 	isb	sy
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	60bb      	str	r3, [r7, #8]
}
 800fcd0:	bf00      	nop
 800fcd2:	e7fe      	b.n	800fcd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fcd4:	f000 f880 	bl	800fdd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fcd8:	2100      	movs	r1, #0
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 feb0 	bl	8010a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fce0:	f000 f888 	bl	800fdf4 <xTaskResumeAll>
 800fce4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d107      	bne.n	800fcfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fcec:	4b06      	ldr	r3, [pc, #24]	; (800fd08 <vTaskDelay+0x64>)
 800fcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf2:	601a      	str	r2, [r3, #0]
 800fcf4:	f3bf 8f4f 	dsb	sy
 800fcf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcfc:	bf00      	nop
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	20000ddc 	.word	0x20000ddc
 800fd08:	e000ed04 	.word	0xe000ed04

0800fd0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b08a      	sub	sp, #40	; 0x28
 800fd10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd1a:	463a      	mov	r2, r7
 800fd1c:	1d39      	adds	r1, r7, #4
 800fd1e:	f107 0308 	add.w	r3, r7, #8
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fe faba 	bl	800e29c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd28:	6839      	ldr	r1, [r7, #0]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	9202      	str	r2, [sp, #8]
 800fd30:	9301      	str	r3, [sp, #4]
 800fd32:	2300      	movs	r3, #0
 800fd34:	9300      	str	r3, [sp, #0]
 800fd36:	2300      	movs	r3, #0
 800fd38:	460a      	mov	r2, r1
 800fd3a:	4921      	ldr	r1, [pc, #132]	; (800fdc0 <vTaskStartScheduler+0xb4>)
 800fd3c:	4821      	ldr	r0, [pc, #132]	; (800fdc4 <vTaskStartScheduler+0xb8>)
 800fd3e:	f7ff fd91 	bl	800f864 <xTaskCreateStatic>
 800fd42:	4603      	mov	r3, r0
 800fd44:	4a20      	ldr	r2, [pc, #128]	; (800fdc8 <vTaskStartScheduler+0xbc>)
 800fd46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd48:	4b1f      	ldr	r3, [pc, #124]	; (800fdc8 <vTaskStartScheduler+0xbc>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd50:	2301      	movs	r3, #1
 800fd52:	617b      	str	r3, [r7, #20]
 800fd54:	e001      	b.n	800fd5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d102      	bne.n	800fd66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fd60:	f000 fec2 	bl	8010ae8 <xTimerCreateTimerTask>
 800fd64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d116      	bne.n	800fd9a <vTaskStartScheduler+0x8e>
	__asm volatile
 800fd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd70:	f383 8811 	msr	BASEPRI, r3
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	613b      	str	r3, [r7, #16]
}
 800fd7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fd80:	4b12      	ldr	r3, [pc, #72]	; (800fdcc <vTaskStartScheduler+0xc0>)
 800fd82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fd88:	4b11      	ldr	r3, [pc, #68]	; (800fdd0 <vTaskStartScheduler+0xc4>)
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fd8e:	4b11      	ldr	r3, [pc, #68]	; (800fdd4 <vTaskStartScheduler+0xc8>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fd94:	f001 faa4 	bl	80112e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fd98:	e00e      	b.n	800fdb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fda0:	d10a      	bne.n	800fdb8 <vTaskStartScheduler+0xac>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	60fb      	str	r3, [r7, #12]
}
 800fdb4:	bf00      	nop
 800fdb6:	e7fe      	b.n	800fdb6 <vTaskStartScheduler+0xaa>
}
 800fdb8:	bf00      	nop
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	08013e7c 	.word	0x08013e7c
 800fdc4:	08010551 	.word	0x08010551
 800fdc8:	20000dd8 	.word	0x20000dd8
 800fdcc:	20000dd4 	.word	0x20000dd4
 800fdd0:	20000dc0 	.word	0x20000dc0
 800fdd4:	20000db8 	.word	0x20000db8

0800fdd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fdd8:	b480      	push	{r7}
 800fdda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fddc:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <vTaskSuspendAll+0x18>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	3301      	adds	r3, #1
 800fde2:	4a03      	ldr	r2, [pc, #12]	; (800fdf0 <vTaskSuspendAll+0x18>)
 800fde4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fde6:	bf00      	nop
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	20000ddc 	.word	0x20000ddc

0800fdf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe02:	4b42      	ldr	r3, [pc, #264]	; (800ff0c <xTaskResumeAll+0x118>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d10a      	bne.n	800fe20 <xTaskResumeAll+0x2c>
	__asm volatile
 800fe0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	603b      	str	r3, [r7, #0]
}
 800fe1c:	bf00      	nop
 800fe1e:	e7fe      	b.n	800fe1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe20:	f001 fb00 	bl	8011424 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe24:	4b39      	ldr	r3, [pc, #228]	; (800ff0c <xTaskResumeAll+0x118>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	4a38      	ldr	r2, [pc, #224]	; (800ff0c <xTaskResumeAll+0x118>)
 800fe2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe2e:	4b37      	ldr	r3, [pc, #220]	; (800ff0c <xTaskResumeAll+0x118>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d162      	bne.n	800fefc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe36:	4b36      	ldr	r3, [pc, #216]	; (800ff10 <xTaskResumeAll+0x11c>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d05e      	beq.n	800fefc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe3e:	e02f      	b.n	800fea0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe40:	4b34      	ldr	r3, [pc, #208]	; (800ff14 <xTaskResumeAll+0x120>)
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	3318      	adds	r3, #24
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fe fcd1 	bl	800e7f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	3304      	adds	r3, #4
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fe fccc 	bl	800e7f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe60:	4b2d      	ldr	r3, [pc, #180]	; (800ff18 <xTaskResumeAll+0x124>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d903      	bls.n	800fe70 <xTaskResumeAll+0x7c>
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6c:	4a2a      	ldr	r2, [pc, #168]	; (800ff18 <xTaskResumeAll+0x124>)
 800fe6e:	6013      	str	r3, [r2, #0]
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe74:	4613      	mov	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4a27      	ldr	r2, [pc, #156]	; (800ff1c <xTaskResumeAll+0x128>)
 800fe7e:	441a      	add	r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	3304      	adds	r3, #4
 800fe84:	4619      	mov	r1, r3
 800fe86:	4610      	mov	r0, r2
 800fe88:	f7fe fc57 	bl	800e73a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe90:	4b23      	ldr	r3, [pc, #140]	; (800ff20 <xTaskResumeAll+0x12c>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d302      	bcc.n	800fea0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fe9a:	4b22      	ldr	r3, [pc, #136]	; (800ff24 <xTaskResumeAll+0x130>)
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fea0:	4b1c      	ldr	r3, [pc, #112]	; (800ff14 <xTaskResumeAll+0x120>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1cb      	bne.n	800fe40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d001      	beq.n	800feb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800feae:	f000 fc05 	bl	80106bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800feb2:	4b1d      	ldr	r3, [pc, #116]	; (800ff28 <xTaskResumeAll+0x134>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d010      	beq.n	800fee0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800febe:	f000 f859 	bl	800ff74 <xTaskIncrementTick>
 800fec2:	4603      	mov	r3, r0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d002      	beq.n	800fece <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fec8:	4b16      	ldr	r3, [pc, #88]	; (800ff24 <xTaskResumeAll+0x130>)
 800feca:	2201      	movs	r2, #1
 800fecc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	3b01      	subs	r3, #1
 800fed2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d1f1      	bne.n	800febe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800feda:	4b13      	ldr	r3, [pc, #76]	; (800ff28 <xTaskResumeAll+0x134>)
 800fedc:	2200      	movs	r2, #0
 800fede:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fee0:	4b10      	ldr	r3, [pc, #64]	; (800ff24 <xTaskResumeAll+0x130>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d009      	beq.n	800fefc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fee8:	2301      	movs	r3, #1
 800feea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800feec:	4b0f      	ldr	r3, [pc, #60]	; (800ff2c <xTaskResumeAll+0x138>)
 800feee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fefc:	f001 fac2 	bl	8011484 <vPortExitCritical>

	return xAlreadyYielded;
 800ff00:	68bb      	ldr	r3, [r7, #8]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3710      	adds	r7, #16
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	20000ddc 	.word	0x20000ddc
 800ff10:	20000db4 	.word	0x20000db4
 800ff14:	20000d74 	.word	0x20000d74
 800ff18:	20000dbc 	.word	0x20000dbc
 800ff1c:	200008e4 	.word	0x200008e4
 800ff20:	200008e0 	.word	0x200008e0
 800ff24:	20000dc8 	.word	0x20000dc8
 800ff28:	20000dc4 	.word	0x20000dc4
 800ff2c:	e000ed04 	.word	0xe000ed04

0800ff30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff36:	4b05      	ldr	r3, [pc, #20]	; (800ff4c <xTaskGetTickCount+0x1c>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff3c:	687b      	ldr	r3, [r7, #4]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	20000db8 	.word	0x20000db8

0800ff50 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff56:	f001 fb47 	bl	80115e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ff5e:	4b04      	ldr	r3, [pc, #16]	; (800ff70 <xTaskGetTickCountFromISR+0x20>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff64:	683b      	ldr	r3, [r7, #0]
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	20000db8 	.word	0x20000db8

0800ff74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b086      	sub	sp, #24
 800ff78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff7e:	4b4f      	ldr	r3, [pc, #316]	; (80100bc <xTaskIncrementTick+0x148>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f040 808f 	bne.w	80100a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ff88:	4b4d      	ldr	r3, [pc, #308]	; (80100c0 <xTaskIncrementTick+0x14c>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ff90:	4a4b      	ldr	r2, [pc, #300]	; (80100c0 <xTaskIncrementTick+0x14c>)
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d120      	bne.n	800ffde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ff9c:	4b49      	ldr	r3, [pc, #292]	; (80100c4 <xTaskIncrementTick+0x150>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d00a      	beq.n	800ffbc <xTaskIncrementTick+0x48>
	__asm volatile
 800ffa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffaa:	f383 8811 	msr	BASEPRI, r3
 800ffae:	f3bf 8f6f 	isb	sy
 800ffb2:	f3bf 8f4f 	dsb	sy
 800ffb6:	603b      	str	r3, [r7, #0]
}
 800ffb8:	bf00      	nop
 800ffba:	e7fe      	b.n	800ffba <xTaskIncrementTick+0x46>
 800ffbc:	4b41      	ldr	r3, [pc, #260]	; (80100c4 <xTaskIncrementTick+0x150>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	60fb      	str	r3, [r7, #12]
 800ffc2:	4b41      	ldr	r3, [pc, #260]	; (80100c8 <xTaskIncrementTick+0x154>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4a3f      	ldr	r2, [pc, #252]	; (80100c4 <xTaskIncrementTick+0x150>)
 800ffc8:	6013      	str	r3, [r2, #0]
 800ffca:	4a3f      	ldr	r2, [pc, #252]	; (80100c8 <xTaskIncrementTick+0x154>)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	4b3e      	ldr	r3, [pc, #248]	; (80100cc <xTaskIncrementTick+0x158>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	4a3d      	ldr	r2, [pc, #244]	; (80100cc <xTaskIncrementTick+0x158>)
 800ffd8:	6013      	str	r3, [r2, #0]
 800ffda:	f000 fb6f 	bl	80106bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ffde:	4b3c      	ldr	r3, [pc, #240]	; (80100d0 <xTaskIncrementTick+0x15c>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	693a      	ldr	r2, [r7, #16]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d349      	bcc.n	801007c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffe8:	4b36      	ldr	r3, [pc, #216]	; (80100c4 <xTaskIncrementTick+0x150>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d104      	bne.n	800fffc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fff2:	4b37      	ldr	r3, [pc, #220]	; (80100d0 <xTaskIncrementTick+0x15c>)
 800fff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fff8:	601a      	str	r2, [r3, #0]
					break;
 800fffa:	e03f      	b.n	801007c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fffc:	4b31      	ldr	r3, [pc, #196]	; (80100c4 <xTaskIncrementTick+0x150>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801000c:	693a      	ldr	r2, [r7, #16]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	429a      	cmp	r2, r3
 8010012:	d203      	bcs.n	801001c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010014:	4a2e      	ldr	r2, [pc, #184]	; (80100d0 <xTaskIncrementTick+0x15c>)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801001a:	e02f      	b.n	801007c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	3304      	adds	r3, #4
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe fbe7 	bl	800e7f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801002a:	2b00      	cmp	r3, #0
 801002c:	d004      	beq.n	8010038 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	3318      	adds	r3, #24
 8010032:	4618      	mov	r0, r3
 8010034:	f7fe fbde 	bl	800e7f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801003c:	4b25      	ldr	r3, [pc, #148]	; (80100d4 <xTaskIncrementTick+0x160>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	429a      	cmp	r2, r3
 8010042:	d903      	bls.n	801004c <xTaskIncrementTick+0xd8>
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010048:	4a22      	ldr	r2, [pc, #136]	; (80100d4 <xTaskIncrementTick+0x160>)
 801004a:	6013      	str	r3, [r2, #0]
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010050:	4613      	mov	r3, r2
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	4413      	add	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4a1f      	ldr	r2, [pc, #124]	; (80100d8 <xTaskIncrementTick+0x164>)
 801005a:	441a      	add	r2, r3
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	3304      	adds	r3, #4
 8010060:	4619      	mov	r1, r3
 8010062:	4610      	mov	r0, r2
 8010064:	f7fe fb69 	bl	800e73a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	4b1b      	ldr	r3, [pc, #108]	; (80100dc <xTaskIncrementTick+0x168>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010072:	429a      	cmp	r2, r3
 8010074:	d3b8      	bcc.n	800ffe8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010076:	2301      	movs	r3, #1
 8010078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801007a:	e7b5      	b.n	800ffe8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801007c:	4b17      	ldr	r3, [pc, #92]	; (80100dc <xTaskIncrementTick+0x168>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010082:	4915      	ldr	r1, [pc, #84]	; (80100d8 <xTaskIncrementTick+0x164>)
 8010084:	4613      	mov	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4413      	add	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	440b      	add	r3, r1
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d901      	bls.n	8010098 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010094:	2301      	movs	r3, #1
 8010096:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010098:	4b11      	ldr	r3, [pc, #68]	; (80100e0 <xTaskIncrementTick+0x16c>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d007      	beq.n	80100b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80100a0:	2301      	movs	r3, #1
 80100a2:	617b      	str	r3, [r7, #20]
 80100a4:	e004      	b.n	80100b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80100a6:	4b0f      	ldr	r3, [pc, #60]	; (80100e4 <xTaskIncrementTick+0x170>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3301      	adds	r3, #1
 80100ac:	4a0d      	ldr	r2, [pc, #52]	; (80100e4 <xTaskIncrementTick+0x170>)
 80100ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80100b0:	697b      	ldr	r3, [r7, #20]
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3718      	adds	r7, #24
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	20000ddc 	.word	0x20000ddc
 80100c0:	20000db8 	.word	0x20000db8
 80100c4:	20000d6c 	.word	0x20000d6c
 80100c8:	20000d70 	.word	0x20000d70
 80100cc:	20000dcc 	.word	0x20000dcc
 80100d0:	20000dd4 	.word	0x20000dd4
 80100d4:	20000dbc 	.word	0x20000dbc
 80100d8:	200008e4 	.word	0x200008e4
 80100dc:	200008e0 	.word	0x200008e0
 80100e0:	20000dc8 	.word	0x20000dc8
 80100e4:	20000dc4 	.word	0x20000dc4

080100e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80100ee:	4b28      	ldr	r3, [pc, #160]	; (8010190 <vTaskSwitchContext+0xa8>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d003      	beq.n	80100fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80100f6:	4b27      	ldr	r3, [pc, #156]	; (8010194 <vTaskSwitchContext+0xac>)
 80100f8:	2201      	movs	r2, #1
 80100fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80100fc:	e041      	b.n	8010182 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80100fe:	4b25      	ldr	r3, [pc, #148]	; (8010194 <vTaskSwitchContext+0xac>)
 8010100:	2200      	movs	r2, #0
 8010102:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010104:	4b24      	ldr	r3, [pc, #144]	; (8010198 <vTaskSwitchContext+0xb0>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	60fb      	str	r3, [r7, #12]
 801010a:	e010      	b.n	801012e <vTaskSwitchContext+0x46>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d10a      	bne.n	8010128 <vTaskSwitchContext+0x40>
	__asm volatile
 8010112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	607b      	str	r3, [r7, #4]
}
 8010124:	bf00      	nop
 8010126:	e7fe      	b.n	8010126 <vTaskSwitchContext+0x3e>
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	3b01      	subs	r3, #1
 801012c:	60fb      	str	r3, [r7, #12]
 801012e:	491b      	ldr	r1, [pc, #108]	; (801019c <vTaskSwitchContext+0xb4>)
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	4613      	mov	r3, r2
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4413      	add	r3, r2
 8010138:	009b      	lsls	r3, r3, #2
 801013a:	440b      	add	r3, r1
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d0e4      	beq.n	801010c <vTaskSwitchContext+0x24>
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	4613      	mov	r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	4413      	add	r3, r2
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	4a13      	ldr	r2, [pc, #76]	; (801019c <vTaskSwitchContext+0xb4>)
 801014e:	4413      	add	r3, r2
 8010150:	60bb      	str	r3, [r7, #8]
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	685a      	ldr	r2, [r3, #4]
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	605a      	str	r2, [r3, #4]
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	685a      	ldr	r2, [r3, #4]
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	3308      	adds	r3, #8
 8010164:	429a      	cmp	r2, r3
 8010166:	d104      	bne.n	8010172 <vTaskSwitchContext+0x8a>
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	685a      	ldr	r2, [r3, #4]
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	605a      	str	r2, [r3, #4]
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	4a09      	ldr	r2, [pc, #36]	; (80101a0 <vTaskSwitchContext+0xb8>)
 801017a:	6013      	str	r3, [r2, #0]
 801017c:	4a06      	ldr	r2, [pc, #24]	; (8010198 <vTaskSwitchContext+0xb0>)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	6013      	str	r3, [r2, #0]
}
 8010182:	bf00      	nop
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	20000ddc 	.word	0x20000ddc
 8010194:	20000dc8 	.word	0x20000dc8
 8010198:	20000dbc 	.word	0x20000dbc
 801019c:	200008e4 	.word	0x200008e4
 80101a0:	200008e0 	.word	0x200008e0

080101a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d10a      	bne.n	80101ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80101b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b8:	f383 8811 	msr	BASEPRI, r3
 80101bc:	f3bf 8f6f 	isb	sy
 80101c0:	f3bf 8f4f 	dsb	sy
 80101c4:	60fb      	str	r3, [r7, #12]
}
 80101c6:	bf00      	nop
 80101c8:	e7fe      	b.n	80101c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80101ca:	4b07      	ldr	r3, [pc, #28]	; (80101e8 <vTaskPlaceOnEventList+0x44>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	3318      	adds	r3, #24
 80101d0:	4619      	mov	r1, r3
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7fe fad5 	bl	800e782 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80101d8:	2101      	movs	r1, #1
 80101da:	6838      	ldr	r0, [r7, #0]
 80101dc:	f000 fc30 	bl	8010a40 <prvAddCurrentTaskToDelayedList>
}
 80101e0:	bf00      	nop
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	200008e0 	.word	0x200008e0

080101ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10a      	bne.n	8010214 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	617b      	str	r3, [r7, #20]
}
 8010210:	bf00      	nop
 8010212:	e7fe      	b.n	8010212 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010214:	4b11      	ldr	r3, [pc, #68]	; (801025c <vTaskPlaceOnUnorderedEventList+0x70>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10a      	bne.n	8010232 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801021c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010220:	f383 8811 	msr	BASEPRI, r3
 8010224:	f3bf 8f6f 	isb	sy
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	613b      	str	r3, [r7, #16]
}
 801022e:	bf00      	nop
 8010230:	e7fe      	b.n	8010230 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010232:	4b0b      	ldr	r3, [pc, #44]	; (8010260 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801023c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801023e:	4b08      	ldr	r3, [pc, #32]	; (8010260 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3318      	adds	r3, #24
 8010244:	4619      	mov	r1, r3
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f7fe fa77 	bl	800e73a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801024c:	2101      	movs	r1, #1
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fbf6 	bl	8010a40 <prvAddCurrentTaskToDelayedList>
}
 8010254:	bf00      	nop
 8010256:	3718      	adds	r7, #24
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	20000ddc 	.word	0x20000ddc
 8010260:	200008e0 	.word	0x200008e0

08010264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010264:	b580      	push	{r7, lr}
 8010266:	b086      	sub	sp, #24
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d10a      	bne.n	801028c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027a:	f383 8811 	msr	BASEPRI, r3
 801027e:	f3bf 8f6f 	isb	sy
 8010282:	f3bf 8f4f 	dsb	sy
 8010286:	617b      	str	r3, [r7, #20]
}
 8010288:	bf00      	nop
 801028a:	e7fe      	b.n	801028a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801028c:	4b0a      	ldr	r3, [pc, #40]	; (80102b8 <vTaskPlaceOnEventListRestricted+0x54>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	3318      	adds	r3, #24
 8010292:	4619      	mov	r1, r3
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f7fe fa50 	bl	800e73a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80102a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	68b8      	ldr	r0, [r7, #8]
 80102aa:	f000 fbc9 	bl	8010a40 <prvAddCurrentTaskToDelayedList>
	}
 80102ae:	bf00      	nop
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	200008e0 	.word	0x200008e0

080102bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d10a      	bne.n	80102e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	60fb      	str	r3, [r7, #12]
}
 80102e4:	bf00      	nop
 80102e6:	e7fe      	b.n	80102e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	3318      	adds	r3, #24
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe fa81 	bl	800e7f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102f2:	4b1e      	ldr	r3, [pc, #120]	; (801036c <xTaskRemoveFromEventList+0xb0>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d11d      	bne.n	8010336 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	3304      	adds	r3, #4
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fe fa78 	bl	800e7f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010308:	4b19      	ldr	r3, [pc, #100]	; (8010370 <xTaskRemoveFromEventList+0xb4>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	429a      	cmp	r2, r3
 801030e:	d903      	bls.n	8010318 <xTaskRemoveFromEventList+0x5c>
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010314:	4a16      	ldr	r2, [pc, #88]	; (8010370 <xTaskRemoveFromEventList+0xb4>)
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801031c:	4613      	mov	r3, r2
 801031e:	009b      	lsls	r3, r3, #2
 8010320:	4413      	add	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	4a13      	ldr	r2, [pc, #76]	; (8010374 <xTaskRemoveFromEventList+0xb8>)
 8010326:	441a      	add	r2, r3
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	3304      	adds	r3, #4
 801032c:	4619      	mov	r1, r3
 801032e:	4610      	mov	r0, r2
 8010330:	f7fe fa03 	bl	800e73a <vListInsertEnd>
 8010334:	e005      	b.n	8010342 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	3318      	adds	r3, #24
 801033a:	4619      	mov	r1, r3
 801033c:	480e      	ldr	r0, [pc, #56]	; (8010378 <xTaskRemoveFromEventList+0xbc>)
 801033e:	f7fe f9fc 	bl	800e73a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	4b0d      	ldr	r3, [pc, #52]	; (801037c <xTaskRemoveFromEventList+0xc0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	429a      	cmp	r2, r3
 801034e:	d905      	bls.n	801035c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010350:	2301      	movs	r3, #1
 8010352:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010354:	4b0a      	ldr	r3, [pc, #40]	; (8010380 <xTaskRemoveFromEventList+0xc4>)
 8010356:	2201      	movs	r2, #1
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	e001      	b.n	8010360 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801035c:	2300      	movs	r3, #0
 801035e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010360:	697b      	ldr	r3, [r7, #20]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	20000ddc 	.word	0x20000ddc
 8010370:	20000dbc 	.word	0x20000dbc
 8010374:	200008e4 	.word	0x200008e4
 8010378:	20000d74 	.word	0x20000d74
 801037c:	200008e0 	.word	0x200008e0
 8010380:	20000dc8 	.word	0x20000dc8

08010384 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b086      	sub	sp, #24
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801038e:	4b29      	ldr	r3, [pc, #164]	; (8010434 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d10a      	bne.n	80103ac <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8010396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039a:	f383 8811 	msr	BASEPRI, r3
 801039e:	f3bf 8f6f 	isb	sy
 80103a2:	f3bf 8f4f 	dsb	sy
 80103a6:	613b      	str	r3, [r7, #16]
}
 80103a8:	bf00      	nop
 80103aa:	e7fe      	b.n	80103aa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	68db      	ldr	r3, [r3, #12]
 80103ba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d10a      	bne.n	80103d8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80103c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c6:	f383 8811 	msr	BASEPRI, r3
 80103ca:	f3bf 8f6f 	isb	sy
 80103ce:	f3bf 8f4f 	dsb	sy
 80103d2:	60fb      	str	r3, [r7, #12]
}
 80103d4:	bf00      	nop
 80103d6:	e7fe      	b.n	80103d6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7fe fa0b 	bl	800e7f4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	3304      	adds	r3, #4
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fe fa06 	bl	800e7f4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ec:	4b12      	ldr	r3, [pc, #72]	; (8010438 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d903      	bls.n	80103fc <vTaskRemoveFromUnorderedEventList+0x78>
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f8:	4a0f      	ldr	r2, [pc, #60]	; (8010438 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80103fa:	6013      	str	r3, [r2, #0]
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010400:	4613      	mov	r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	4413      	add	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4a0c      	ldr	r2, [pc, #48]	; (801043c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801040a:	441a      	add	r2, r3
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	3304      	adds	r3, #4
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f7fe f991 	bl	800e73a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801041c:	4b08      	ldr	r3, [pc, #32]	; (8010440 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010422:	429a      	cmp	r2, r3
 8010424:	d902      	bls.n	801042c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8010426:	4b07      	ldr	r3, [pc, #28]	; (8010444 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8010428:	2201      	movs	r2, #1
 801042a:	601a      	str	r2, [r3, #0]
	}
}
 801042c:	bf00      	nop
 801042e:	3718      	adds	r7, #24
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	20000ddc 	.word	0x20000ddc
 8010438:	20000dbc 	.word	0x20000dbc
 801043c:	200008e4 	.word	0x200008e4
 8010440:	200008e0 	.word	0x200008e0
 8010444:	20000dc8 	.word	0x20000dc8

08010448 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010450:	4b06      	ldr	r3, [pc, #24]	; (801046c <vTaskInternalSetTimeOutState+0x24>)
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010458:	4b05      	ldr	r3, [pc, #20]	; (8010470 <vTaskInternalSetTimeOutState+0x28>)
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	605a      	str	r2, [r3, #4]
}
 8010460:	bf00      	nop
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr
 801046c:	20000dcc 	.word	0x20000dcc
 8010470:	20000db8 	.word	0x20000db8

08010474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b088      	sub	sp, #32
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10a      	bne.n	801049a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010488:	f383 8811 	msr	BASEPRI, r3
 801048c:	f3bf 8f6f 	isb	sy
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	613b      	str	r3, [r7, #16]
}
 8010496:	bf00      	nop
 8010498:	e7fe      	b.n	8010498 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d10a      	bne.n	80104b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80104a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a4:	f383 8811 	msr	BASEPRI, r3
 80104a8:	f3bf 8f6f 	isb	sy
 80104ac:	f3bf 8f4f 	dsb	sy
 80104b0:	60fb      	str	r3, [r7, #12]
}
 80104b2:	bf00      	nop
 80104b4:	e7fe      	b.n	80104b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80104b6:	f000 ffb5 	bl	8011424 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80104ba:	4b1d      	ldr	r3, [pc, #116]	; (8010530 <xTaskCheckForTimeOut+0xbc>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	69ba      	ldr	r2, [r7, #24]
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104d2:	d102      	bne.n	80104da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80104d4:	2300      	movs	r3, #0
 80104d6:	61fb      	str	r3, [r7, #28]
 80104d8:	e023      	b.n	8010522 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	4b15      	ldr	r3, [pc, #84]	; (8010534 <xTaskCheckForTimeOut+0xc0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d007      	beq.n	80104f6 <xTaskCheckForTimeOut+0x82>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	69ba      	ldr	r2, [r7, #24]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d302      	bcc.n	80104f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80104f0:	2301      	movs	r3, #1
 80104f2:	61fb      	str	r3, [r7, #28]
 80104f4:	e015      	b.n	8010522 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	697a      	ldr	r2, [r7, #20]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d20b      	bcs.n	8010518 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	1ad2      	subs	r2, r2, r3
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7ff ff9b 	bl	8010448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010512:	2300      	movs	r3, #0
 8010514:	61fb      	str	r3, [r7, #28]
 8010516:	e004      	b.n	8010522 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2200      	movs	r2, #0
 801051c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801051e:	2301      	movs	r3, #1
 8010520:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010522:	f000 ffaf 	bl	8011484 <vPortExitCritical>

	return xReturn;
 8010526:	69fb      	ldr	r3, [r7, #28]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3720      	adds	r7, #32
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	20000db8 	.word	0x20000db8
 8010534:	20000dcc 	.word	0x20000dcc

08010538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010538:	b480      	push	{r7}
 801053a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801053c:	4b03      	ldr	r3, [pc, #12]	; (801054c <vTaskMissedYield+0x14>)
 801053e:	2201      	movs	r2, #1
 8010540:	601a      	str	r2, [r3, #0]
}
 8010542:	bf00      	nop
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	20000dc8 	.word	0x20000dc8

08010550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010558:	f000 f852 	bl	8010600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801055c:	4b06      	ldr	r3, [pc, #24]	; (8010578 <prvIdleTask+0x28>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d9f9      	bls.n	8010558 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010564:	4b05      	ldr	r3, [pc, #20]	; (801057c <prvIdleTask+0x2c>)
 8010566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056a:	601a      	str	r2, [r3, #0]
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010574:	e7f0      	b.n	8010558 <prvIdleTask+0x8>
 8010576:	bf00      	nop
 8010578:	200008e4 	.word	0x200008e4
 801057c:	e000ed04 	.word	0xe000ed04

08010580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010586:	2300      	movs	r3, #0
 8010588:	607b      	str	r3, [r7, #4]
 801058a:	e00c      	b.n	80105a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	4613      	mov	r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	4413      	add	r3, r2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	4a12      	ldr	r2, [pc, #72]	; (80105e0 <prvInitialiseTaskLists+0x60>)
 8010598:	4413      	add	r3, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe f8a0 	bl	800e6e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	3301      	adds	r3, #1
 80105a4:	607b      	str	r3, [r7, #4]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b37      	cmp	r3, #55	; 0x37
 80105aa:	d9ef      	bls.n	801058c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80105ac:	480d      	ldr	r0, [pc, #52]	; (80105e4 <prvInitialiseTaskLists+0x64>)
 80105ae:	f7fe f897 	bl	800e6e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80105b2:	480d      	ldr	r0, [pc, #52]	; (80105e8 <prvInitialiseTaskLists+0x68>)
 80105b4:	f7fe f894 	bl	800e6e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80105b8:	480c      	ldr	r0, [pc, #48]	; (80105ec <prvInitialiseTaskLists+0x6c>)
 80105ba:	f7fe f891 	bl	800e6e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80105be:	480c      	ldr	r0, [pc, #48]	; (80105f0 <prvInitialiseTaskLists+0x70>)
 80105c0:	f7fe f88e 	bl	800e6e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80105c4:	480b      	ldr	r0, [pc, #44]	; (80105f4 <prvInitialiseTaskLists+0x74>)
 80105c6:	f7fe f88b 	bl	800e6e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80105ca:	4b0b      	ldr	r3, [pc, #44]	; (80105f8 <prvInitialiseTaskLists+0x78>)
 80105cc:	4a05      	ldr	r2, [pc, #20]	; (80105e4 <prvInitialiseTaskLists+0x64>)
 80105ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80105d0:	4b0a      	ldr	r3, [pc, #40]	; (80105fc <prvInitialiseTaskLists+0x7c>)
 80105d2:	4a05      	ldr	r2, [pc, #20]	; (80105e8 <prvInitialiseTaskLists+0x68>)
 80105d4:	601a      	str	r2, [r3, #0]
}
 80105d6:	bf00      	nop
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	200008e4 	.word	0x200008e4
 80105e4:	20000d44 	.word	0x20000d44
 80105e8:	20000d58 	.word	0x20000d58
 80105ec:	20000d74 	.word	0x20000d74
 80105f0:	20000d88 	.word	0x20000d88
 80105f4:	20000da0 	.word	0x20000da0
 80105f8:	20000d6c 	.word	0x20000d6c
 80105fc:	20000d70 	.word	0x20000d70

08010600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010606:	e019      	b.n	801063c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010608:	f000 ff0c 	bl	8011424 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801060c:	4b10      	ldr	r3, [pc, #64]	; (8010650 <prvCheckTasksWaitingTermination+0x50>)
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	68db      	ldr	r3, [r3, #12]
 8010612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	3304      	adds	r3, #4
 8010618:	4618      	mov	r0, r3
 801061a:	f7fe f8eb 	bl	800e7f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801061e:	4b0d      	ldr	r3, [pc, #52]	; (8010654 <prvCheckTasksWaitingTermination+0x54>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3b01      	subs	r3, #1
 8010624:	4a0b      	ldr	r2, [pc, #44]	; (8010654 <prvCheckTasksWaitingTermination+0x54>)
 8010626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010628:	4b0b      	ldr	r3, [pc, #44]	; (8010658 <prvCheckTasksWaitingTermination+0x58>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	3b01      	subs	r3, #1
 801062e:	4a0a      	ldr	r2, [pc, #40]	; (8010658 <prvCheckTasksWaitingTermination+0x58>)
 8010630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010632:	f000 ff27 	bl	8011484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f000 f810 	bl	801065c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801063c:	4b06      	ldr	r3, [pc, #24]	; (8010658 <prvCheckTasksWaitingTermination+0x58>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d1e1      	bne.n	8010608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010644:	bf00      	nop
 8010646:	bf00      	nop
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	20000d88 	.word	0x20000d88
 8010654:	20000db4 	.word	0x20000db4
 8010658:	20000d9c 	.word	0x20000d9c

0801065c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801066a:	2b00      	cmp	r3, #0
 801066c:	d108      	bne.n	8010680 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010672:	4618      	mov	r0, r3
 8010674:	f001 f8c4 	bl	8011800 <vPortFree>
				vPortFree( pxTCB );
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f001 f8c1 	bl	8011800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801067e:	e018      	b.n	80106b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010686:	2b01      	cmp	r3, #1
 8010688:	d103      	bne.n	8010692 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f001 f8b8 	bl	8011800 <vPortFree>
	}
 8010690:	e00f      	b.n	80106b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010698:	2b02      	cmp	r3, #2
 801069a:	d00a      	beq.n	80106b2 <prvDeleteTCB+0x56>
	__asm volatile
 801069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a0:	f383 8811 	msr	BASEPRI, r3
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	f3bf 8f4f 	dsb	sy
 80106ac:	60fb      	str	r3, [r7, #12]
}
 80106ae:	bf00      	nop
 80106b0:	e7fe      	b.n	80106b0 <prvDeleteTCB+0x54>
	}
 80106b2:	bf00      	nop
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
	...

080106bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106c2:	4b0c      	ldr	r3, [pc, #48]	; (80106f4 <prvResetNextTaskUnblockTime+0x38>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d104      	bne.n	80106d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80106cc:	4b0a      	ldr	r3, [pc, #40]	; (80106f8 <prvResetNextTaskUnblockTime+0x3c>)
 80106ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80106d4:	e008      	b.n	80106e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106d6:	4b07      	ldr	r3, [pc, #28]	; (80106f4 <prvResetNextTaskUnblockTime+0x38>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	68db      	ldr	r3, [r3, #12]
 80106de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	4a04      	ldr	r2, [pc, #16]	; (80106f8 <prvResetNextTaskUnblockTime+0x3c>)
 80106e6:	6013      	str	r3, [r2, #0]
}
 80106e8:	bf00      	nop
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	20000d6c 	.word	0x20000d6c
 80106f8:	20000dd4 	.word	0x20000dd4

080106fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010702:	4b0b      	ldr	r3, [pc, #44]	; (8010730 <xTaskGetSchedulerState+0x34>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d102      	bne.n	8010710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801070a:	2301      	movs	r3, #1
 801070c:	607b      	str	r3, [r7, #4]
 801070e:	e008      	b.n	8010722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010710:	4b08      	ldr	r3, [pc, #32]	; (8010734 <xTaskGetSchedulerState+0x38>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d102      	bne.n	801071e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010718:	2302      	movs	r3, #2
 801071a:	607b      	str	r3, [r7, #4]
 801071c:	e001      	b.n	8010722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801071e:	2300      	movs	r3, #0
 8010720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010722:	687b      	ldr	r3, [r7, #4]
	}
 8010724:	4618      	mov	r0, r3
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr
 8010730:	20000dc0 	.word	0x20000dc0
 8010734:	20000ddc 	.word	0x20000ddc

08010738 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010744:	2300      	movs	r3, #0
 8010746:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d051      	beq.n	80107f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010752:	4b2a      	ldr	r3, [pc, #168]	; (80107fc <xTaskPriorityInherit+0xc4>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010758:	429a      	cmp	r2, r3
 801075a:	d241      	bcs.n	80107e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	699b      	ldr	r3, [r3, #24]
 8010760:	2b00      	cmp	r3, #0
 8010762:	db06      	blt.n	8010772 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010764:	4b25      	ldr	r3, [pc, #148]	; (80107fc <xTaskPriorityInherit+0xc4>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801076a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	6959      	ldr	r1, [r3, #20]
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077a:	4613      	mov	r3, r2
 801077c:	009b      	lsls	r3, r3, #2
 801077e:	4413      	add	r3, r2
 8010780:	009b      	lsls	r3, r3, #2
 8010782:	4a1f      	ldr	r2, [pc, #124]	; (8010800 <xTaskPriorityInherit+0xc8>)
 8010784:	4413      	add	r3, r2
 8010786:	4299      	cmp	r1, r3
 8010788:	d122      	bne.n	80107d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	3304      	adds	r3, #4
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe f830 	bl	800e7f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010794:	4b19      	ldr	r3, [pc, #100]	; (80107fc <xTaskPriorityInherit+0xc4>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107a2:	4b18      	ldr	r3, [pc, #96]	; (8010804 <xTaskPriorityInherit+0xcc>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d903      	bls.n	80107b2 <xTaskPriorityInherit+0x7a>
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ae:	4a15      	ldr	r2, [pc, #84]	; (8010804 <xTaskPriorityInherit+0xcc>)
 80107b0:	6013      	str	r3, [r2, #0]
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b6:	4613      	mov	r3, r2
 80107b8:	009b      	lsls	r3, r3, #2
 80107ba:	4413      	add	r3, r2
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4a10      	ldr	r2, [pc, #64]	; (8010800 <xTaskPriorityInherit+0xc8>)
 80107c0:	441a      	add	r2, r3
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	3304      	adds	r3, #4
 80107c6:	4619      	mov	r1, r3
 80107c8:	4610      	mov	r0, r2
 80107ca:	f7fd ffb6 	bl	800e73a <vListInsertEnd>
 80107ce:	e004      	b.n	80107da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80107d0:	4b0a      	ldr	r3, [pc, #40]	; (80107fc <xTaskPriorityInherit+0xc4>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80107da:	2301      	movs	r3, #1
 80107dc:	60fb      	str	r3, [r7, #12]
 80107de:	e008      	b.n	80107f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80107e4:	4b05      	ldr	r3, [pc, #20]	; (80107fc <xTaskPriorityInherit+0xc4>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d201      	bcs.n	80107f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80107ee:	2301      	movs	r3, #1
 80107f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107f2:	68fb      	ldr	r3, [r7, #12]
	}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	200008e0 	.word	0x200008e0
 8010800:	200008e4 	.word	0x200008e4
 8010804:	20000dbc 	.word	0x20000dbc

08010808 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010814:	2300      	movs	r3, #0
 8010816:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d056      	beq.n	80108cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801081e:	4b2e      	ldr	r3, [pc, #184]	; (80108d8 <xTaskPriorityDisinherit+0xd0>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	693a      	ldr	r2, [r7, #16]
 8010824:	429a      	cmp	r2, r3
 8010826:	d00a      	beq.n	801083e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082c:	f383 8811 	msr	BASEPRI, r3
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	60fb      	str	r3, [r7, #12]
}
 801083a:	bf00      	nop
 801083c:	e7fe      	b.n	801083c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010842:	2b00      	cmp	r3, #0
 8010844:	d10a      	bne.n	801085c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084a:	f383 8811 	msr	BASEPRI, r3
 801084e:	f3bf 8f6f 	isb	sy
 8010852:	f3bf 8f4f 	dsb	sy
 8010856:	60bb      	str	r3, [r7, #8]
}
 8010858:	bf00      	nop
 801085a:	e7fe      	b.n	801085a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010860:	1e5a      	subs	r2, r3, #1
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801086e:	429a      	cmp	r2, r3
 8010870:	d02c      	beq.n	80108cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010876:	2b00      	cmp	r3, #0
 8010878:	d128      	bne.n	80108cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	3304      	adds	r3, #4
 801087e:	4618      	mov	r0, r3
 8010880:	f7fd ffb8 	bl	800e7f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010890:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801089c:	4b0f      	ldr	r3, [pc, #60]	; (80108dc <xTaskPriorityDisinherit+0xd4>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d903      	bls.n	80108ac <xTaskPriorityDisinherit+0xa4>
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a8:	4a0c      	ldr	r2, [pc, #48]	; (80108dc <xTaskPriorityDisinherit+0xd4>)
 80108aa:	6013      	str	r3, [r2, #0]
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108b0:	4613      	mov	r3, r2
 80108b2:	009b      	lsls	r3, r3, #2
 80108b4:	4413      	add	r3, r2
 80108b6:	009b      	lsls	r3, r3, #2
 80108b8:	4a09      	ldr	r2, [pc, #36]	; (80108e0 <xTaskPriorityDisinherit+0xd8>)
 80108ba:	441a      	add	r2, r3
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	3304      	adds	r3, #4
 80108c0:	4619      	mov	r1, r3
 80108c2:	4610      	mov	r0, r2
 80108c4:	f7fd ff39 	bl	800e73a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80108c8:	2301      	movs	r3, #1
 80108ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80108cc:	697b      	ldr	r3, [r7, #20]
	}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3718      	adds	r7, #24
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	200008e0 	.word	0x200008e0
 80108dc:	20000dbc 	.word	0x20000dbc
 80108e0:	200008e4 	.word	0x200008e4

080108e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b088      	sub	sp, #32
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80108f2:	2301      	movs	r3, #1
 80108f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d06a      	beq.n	80109d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010900:	2b00      	cmp	r3, #0
 8010902:	d10a      	bne.n	801091a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010908:	f383 8811 	msr	BASEPRI, r3
 801090c:	f3bf 8f6f 	isb	sy
 8010910:	f3bf 8f4f 	dsb	sy
 8010914:	60fb      	str	r3, [r7, #12]
}
 8010916:	bf00      	nop
 8010918:	e7fe      	b.n	8010918 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801091a:	69bb      	ldr	r3, [r7, #24]
 801091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801091e:	683a      	ldr	r2, [r7, #0]
 8010920:	429a      	cmp	r2, r3
 8010922:	d902      	bls.n	801092a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	61fb      	str	r3, [r7, #28]
 8010928:	e002      	b.n	8010930 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801092e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010934:	69fa      	ldr	r2, [r7, #28]
 8010936:	429a      	cmp	r2, r3
 8010938:	d04b      	beq.n	80109d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	429a      	cmp	r2, r3
 8010942:	d146      	bne.n	80109d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010944:	4b25      	ldr	r3, [pc, #148]	; (80109dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	69ba      	ldr	r2, [r7, #24]
 801094a:	429a      	cmp	r2, r3
 801094c:	d10a      	bne.n	8010964 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801094e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010952:	f383 8811 	msr	BASEPRI, r3
 8010956:	f3bf 8f6f 	isb	sy
 801095a:	f3bf 8f4f 	dsb	sy
 801095e:	60bb      	str	r3, [r7, #8]
}
 8010960:	bf00      	nop
 8010962:	e7fe      	b.n	8010962 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010964:	69bb      	ldr	r3, [r7, #24]
 8010966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010968:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	69fa      	ldr	r2, [r7, #28]
 801096e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	699b      	ldr	r3, [r3, #24]
 8010974:	2b00      	cmp	r3, #0
 8010976:	db04      	blt.n	8010982 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	6959      	ldr	r1, [r3, #20]
 8010986:	693a      	ldr	r2, [r7, #16]
 8010988:	4613      	mov	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	4413      	add	r3, r2
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4a13      	ldr	r2, [pc, #76]	; (80109e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010992:	4413      	add	r3, r2
 8010994:	4299      	cmp	r1, r3
 8010996:	d11c      	bne.n	80109d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	3304      	adds	r3, #4
 801099c:	4618      	mov	r0, r3
 801099e:	f7fd ff29 	bl	800e7f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a6:	4b0f      	ldr	r3, [pc, #60]	; (80109e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d903      	bls.n	80109b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109b2:	4a0c      	ldr	r2, [pc, #48]	; (80109e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80109b4:	6013      	str	r3, [r2, #0]
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ba:	4613      	mov	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	4413      	add	r3, r2
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	4a07      	ldr	r2, [pc, #28]	; (80109e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80109c4:	441a      	add	r2, r3
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	3304      	adds	r3, #4
 80109ca:	4619      	mov	r1, r3
 80109cc:	4610      	mov	r0, r2
 80109ce:	f7fd feb4 	bl	800e73a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80109d2:	bf00      	nop
 80109d4:	3720      	adds	r7, #32
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	200008e0 	.word	0x200008e0
 80109e0:	200008e4 	.word	0x200008e4
 80109e4:	20000dbc 	.word	0x20000dbc

080109e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80109e8:	b480      	push	{r7}
 80109ea:	b083      	sub	sp, #12
 80109ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80109ee:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <uxTaskResetEventItemValue+0x2c>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109f6:	4b07      	ldr	r3, [pc, #28]	; (8010a14 <uxTaskResetEventItemValue+0x2c>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109fc:	4b05      	ldr	r3, [pc, #20]	; (8010a14 <uxTaskResetEventItemValue+0x2c>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010a04:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010a06:	687b      	ldr	r3, [r7, #4]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr
 8010a14:	200008e0 	.word	0x200008e0

08010a18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010a18:	b480      	push	{r7}
 8010a1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010a1c:	4b07      	ldr	r3, [pc, #28]	; (8010a3c <pvTaskIncrementMutexHeldCount+0x24>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d004      	beq.n	8010a2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010a24:	4b05      	ldr	r3, [pc, #20]	; (8010a3c <pvTaskIncrementMutexHeldCount+0x24>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a2a:	3201      	adds	r2, #1
 8010a2c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010a2e:	4b03      	ldr	r3, [pc, #12]	; (8010a3c <pvTaskIncrementMutexHeldCount+0x24>)
 8010a30:	681b      	ldr	r3, [r3, #0]
	}
 8010a32:	4618      	mov	r0, r3
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr
 8010a3c:	200008e0 	.word	0x200008e0

08010a40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a4a:	4b21      	ldr	r3, [pc, #132]	; (8010ad0 <prvAddCurrentTaskToDelayedList+0x90>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a50:	4b20      	ldr	r3, [pc, #128]	; (8010ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	3304      	adds	r3, #4
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fd fecc 	bl	800e7f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a62:	d10a      	bne.n	8010a7a <prvAddCurrentTaskToDelayedList+0x3a>
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d007      	beq.n	8010a7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a6a:	4b1a      	ldr	r3, [pc, #104]	; (8010ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	3304      	adds	r3, #4
 8010a70:	4619      	mov	r1, r3
 8010a72:	4819      	ldr	r0, [pc, #100]	; (8010ad8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010a74:	f7fd fe61 	bl	800e73a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a78:	e026      	b.n	8010ac8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	4413      	add	r3, r2
 8010a80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a82:	4b14      	ldr	r3, [pc, #80]	; (8010ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d209      	bcs.n	8010aa6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a92:	4b12      	ldr	r3, [pc, #72]	; (8010adc <prvAddCurrentTaskToDelayedList+0x9c>)
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	4b0f      	ldr	r3, [pc, #60]	; (8010ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3304      	adds	r3, #4
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	4610      	mov	r0, r2
 8010aa0:	f7fd fe6f 	bl	800e782 <vListInsert>
}
 8010aa4:	e010      	b.n	8010ac8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010aa6:	4b0e      	ldr	r3, [pc, #56]	; (8010ae0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	3304      	adds	r3, #4
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	f7fd fe65 	bl	800e782 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ab8:	4b0a      	ldr	r3, [pc, #40]	; (8010ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d202      	bcs.n	8010ac8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010ac2:	4a08      	ldr	r2, [pc, #32]	; (8010ae4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	6013      	str	r3, [r2, #0]
}
 8010ac8:	bf00      	nop
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	20000db8 	.word	0x20000db8
 8010ad4:	200008e0 	.word	0x200008e0
 8010ad8:	20000da0 	.word	0x20000da0
 8010adc:	20000d70 	.word	0x20000d70
 8010ae0:	20000d6c 	.word	0x20000d6c
 8010ae4:	20000dd4 	.word	0x20000dd4

08010ae8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08a      	sub	sp, #40	; 0x28
 8010aec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010aee:	2300      	movs	r3, #0
 8010af0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010af2:	f000 fb07 	bl	8011104 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010af6:	4b1c      	ldr	r3, [pc, #112]	; (8010b68 <xTimerCreateTimerTask+0x80>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d021      	beq.n	8010b42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010afe:	2300      	movs	r3, #0
 8010b00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b02:	2300      	movs	r3, #0
 8010b04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b06:	1d3a      	adds	r2, r7, #4
 8010b08:	f107 0108 	add.w	r1, r7, #8
 8010b0c:	f107 030c 	add.w	r3, r7, #12
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fd fbdd 	bl	800e2d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b16:	6879      	ldr	r1, [r7, #4]
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	68fa      	ldr	r2, [r7, #12]
 8010b1c:	9202      	str	r2, [sp, #8]
 8010b1e:	9301      	str	r3, [sp, #4]
 8010b20:	2302      	movs	r3, #2
 8010b22:	9300      	str	r3, [sp, #0]
 8010b24:	2300      	movs	r3, #0
 8010b26:	460a      	mov	r2, r1
 8010b28:	4910      	ldr	r1, [pc, #64]	; (8010b6c <xTimerCreateTimerTask+0x84>)
 8010b2a:	4811      	ldr	r0, [pc, #68]	; (8010b70 <xTimerCreateTimerTask+0x88>)
 8010b2c:	f7fe fe9a 	bl	800f864 <xTaskCreateStatic>
 8010b30:	4603      	mov	r3, r0
 8010b32:	4a10      	ldr	r2, [pc, #64]	; (8010b74 <xTimerCreateTimerTask+0x8c>)
 8010b34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b36:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <xTimerCreateTimerTask+0x8c>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d001      	beq.n	8010b42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10a      	bne.n	8010b5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	613b      	str	r3, [r7, #16]
}
 8010b5a:	bf00      	nop
 8010b5c:	e7fe      	b.n	8010b5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010b5e:	697b      	ldr	r3, [r7, #20]
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3718      	adds	r7, #24
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	20000e10 	.word	0x20000e10
 8010b6c:	08013e84 	.word	0x08013e84
 8010b70:	08010cad 	.word	0x08010cad
 8010b74:	20000e14 	.word	0x20000e14

08010b78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b08a      	sub	sp, #40	; 0x28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
 8010b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010b86:	2300      	movs	r3, #0
 8010b88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d10a      	bne.n	8010ba6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b94:	f383 8811 	msr	BASEPRI, r3
 8010b98:	f3bf 8f6f 	isb	sy
 8010b9c:	f3bf 8f4f 	dsb	sy
 8010ba0:	623b      	str	r3, [r7, #32]
}
 8010ba2:	bf00      	nop
 8010ba4:	e7fe      	b.n	8010ba4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010ba6:	4b1a      	ldr	r3, [pc, #104]	; (8010c10 <xTimerGenericCommand+0x98>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d02a      	beq.n	8010c04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	2b05      	cmp	r3, #5
 8010bbe:	dc18      	bgt.n	8010bf2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010bc0:	f7ff fd9c 	bl	80106fc <xTaskGetSchedulerState>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	d109      	bne.n	8010bde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010bca:	4b11      	ldr	r3, [pc, #68]	; (8010c10 <xTimerGenericCommand+0x98>)
 8010bcc:	6818      	ldr	r0, [r3, #0]
 8010bce:	f107 0110 	add.w	r1, r7, #16
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bd6:	f7fd ffdf 	bl	800eb98 <xQueueGenericSend>
 8010bda:	6278      	str	r0, [r7, #36]	; 0x24
 8010bdc:	e012      	b.n	8010c04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010bde:	4b0c      	ldr	r3, [pc, #48]	; (8010c10 <xTimerGenericCommand+0x98>)
 8010be0:	6818      	ldr	r0, [r3, #0]
 8010be2:	f107 0110 	add.w	r1, r7, #16
 8010be6:	2300      	movs	r3, #0
 8010be8:	2200      	movs	r2, #0
 8010bea:	f7fd ffd5 	bl	800eb98 <xQueueGenericSend>
 8010bee:	6278      	str	r0, [r7, #36]	; 0x24
 8010bf0:	e008      	b.n	8010c04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010bf2:	4b07      	ldr	r3, [pc, #28]	; (8010c10 <xTimerGenericCommand+0x98>)
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	f107 0110 	add.w	r1, r7, #16
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	683a      	ldr	r2, [r7, #0]
 8010bfe:	f7fe f8c9 	bl	800ed94 <xQueueGenericSendFromISR>
 8010c02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3728      	adds	r7, #40	; 0x28
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	20000e10 	.word	0x20000e10

08010c14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b088      	sub	sp, #32
 8010c18:	af02      	add	r7, sp, #8
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c1e:	4b22      	ldr	r3, [pc, #136]	; (8010ca8 <prvProcessExpiredTimer+0x94>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	68db      	ldr	r3, [r3, #12]
 8010c26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	3304      	adds	r3, #4
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fd fde1 	bl	800e7f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c38:	f003 0304 	and.w	r3, r3, #4
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d022      	beq.n	8010c86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	699a      	ldr	r2, [r3, #24]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	18d1      	adds	r1, r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	683a      	ldr	r2, [r7, #0]
 8010c4c:	6978      	ldr	r0, [r7, #20]
 8010c4e:	f000 f8d1 	bl	8010df4 <prvInsertTimerInActiveList>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d01f      	beq.n	8010c98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c58:	2300      	movs	r3, #0
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	2100      	movs	r1, #0
 8010c62:	6978      	ldr	r0, [r7, #20]
 8010c64:	f7ff ff88 	bl	8010b78 <xTimerGenericCommand>
 8010c68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d113      	bne.n	8010c98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	60fb      	str	r3, [r7, #12]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c8c:	f023 0301 	bic.w	r3, r3, #1
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	6a1b      	ldr	r3, [r3, #32]
 8010c9c:	6978      	ldr	r0, [r7, #20]
 8010c9e:	4798      	blx	r3
}
 8010ca0:	bf00      	nop
 8010ca2:	3718      	adds	r7, #24
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	20000e08 	.word	0x20000e08

08010cac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b084      	sub	sp, #16
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010cb4:	f107 0308 	add.w	r3, r7, #8
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f000 f857 	bl	8010d6c <prvGetNextExpireTime>
 8010cbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f000 f803 	bl	8010cd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010cca:	f000 f8d5 	bl	8010e78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010cce:	e7f1      	b.n	8010cb4 <prvTimerTask+0x8>

08010cd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010cda:	f7ff f87d 	bl	800fdd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010cde:	f107 0308 	add.w	r3, r7, #8
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 f866 	bl	8010db4 <prvSampleTimeNow>
 8010ce8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d130      	bne.n	8010d52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10a      	bne.n	8010d0c <prvProcessTimerOrBlockTask+0x3c>
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d806      	bhi.n	8010d0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010cfe:	f7ff f879 	bl	800fdf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d02:	68f9      	ldr	r1, [r7, #12]
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7ff ff85 	bl	8010c14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d0a:	e024      	b.n	8010d56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d008      	beq.n	8010d24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d12:	4b13      	ldr	r3, [pc, #76]	; (8010d60 <prvProcessTimerOrBlockTask+0x90>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d101      	bne.n	8010d20 <prvProcessTimerOrBlockTask+0x50>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e000      	b.n	8010d22 <prvProcessTimerOrBlockTask+0x52>
 8010d20:	2300      	movs	r3, #0
 8010d22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d24:	4b0f      	ldr	r3, [pc, #60]	; (8010d64 <prvProcessTimerOrBlockTask+0x94>)
 8010d26:	6818      	ldr	r0, [r3, #0]
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	1ad3      	subs	r3, r2, r3
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	4619      	mov	r1, r3
 8010d32:	f7fe fd63 	bl	800f7fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010d36:	f7ff f85d 	bl	800fdf4 <xTaskResumeAll>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d10a      	bne.n	8010d56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d40:	4b09      	ldr	r3, [pc, #36]	; (8010d68 <prvProcessTimerOrBlockTask+0x98>)
 8010d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	f3bf 8f4f 	dsb	sy
 8010d4c:	f3bf 8f6f 	isb	sy
}
 8010d50:	e001      	b.n	8010d56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010d52:	f7ff f84f 	bl	800fdf4 <xTaskResumeAll>
}
 8010d56:	bf00      	nop
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20000e0c 	.word	0x20000e0c
 8010d64:	20000e10 	.word	0x20000e10
 8010d68:	e000ed04 	.word	0xe000ed04

08010d6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d74:	4b0e      	ldr	r3, [pc, #56]	; (8010db0 <prvGetNextExpireTime+0x44>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d101      	bne.n	8010d82 <prvGetNextExpireTime+0x16>
 8010d7e:	2201      	movs	r2, #1
 8010d80:	e000      	b.n	8010d84 <prvGetNextExpireTime+0x18>
 8010d82:	2200      	movs	r2, #0
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d105      	bne.n	8010d9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d90:	4b07      	ldr	r3, [pc, #28]	; (8010db0 <prvGetNextExpireTime+0x44>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	60fb      	str	r3, [r7, #12]
 8010d9a:	e001      	b.n	8010da0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010da0:	68fb      	ldr	r3, [r7, #12]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3714      	adds	r7, #20
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	20000e08 	.word	0x20000e08

08010db4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010dbc:	f7ff f8b8 	bl	800ff30 <xTaskGetTickCount>
 8010dc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010dc2:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <prvSampleTimeNow+0x3c>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	68fa      	ldr	r2, [r7, #12]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d205      	bcs.n	8010dd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010dcc:	f000 f936 	bl	801103c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	601a      	str	r2, [r3, #0]
 8010dd6:	e002      	b.n	8010dde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010dde:	4a04      	ldr	r2, [pc, #16]	; (8010df0 <prvSampleTimeNow+0x3c>)
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010de4:	68fb      	ldr	r3, [r7, #12]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20000e18 	.word	0x20000e18

08010df4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b086      	sub	sp, #24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	607a      	str	r2, [r7, #4]
 8010e00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e02:	2300      	movs	r3, #0
 8010e04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	68ba      	ldr	r2, [r7, #8]
 8010e0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e12:	68ba      	ldr	r2, [r7, #8]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d812      	bhi.n	8010e40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	1ad2      	subs	r2, r2, r3
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	699b      	ldr	r3, [r3, #24]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d302      	bcc.n	8010e2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	617b      	str	r3, [r7, #20]
 8010e2c:	e01b      	b.n	8010e66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e2e:	4b10      	ldr	r3, [pc, #64]	; (8010e70 <prvInsertTimerInActiveList+0x7c>)
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	3304      	adds	r3, #4
 8010e36:	4619      	mov	r1, r3
 8010e38:	4610      	mov	r0, r2
 8010e3a:	f7fd fca2 	bl	800e782 <vListInsert>
 8010e3e:	e012      	b.n	8010e66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e40:	687a      	ldr	r2, [r7, #4]
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d206      	bcs.n	8010e56 <prvInsertTimerInActiveList+0x62>
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d302      	bcc.n	8010e56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010e50:	2301      	movs	r3, #1
 8010e52:	617b      	str	r3, [r7, #20]
 8010e54:	e007      	b.n	8010e66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e56:	4b07      	ldr	r3, [pc, #28]	; (8010e74 <prvInsertTimerInActiveList+0x80>)
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	3304      	adds	r3, #4
 8010e5e:	4619      	mov	r1, r3
 8010e60:	4610      	mov	r0, r2
 8010e62:	f7fd fc8e 	bl	800e782 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010e66:	697b      	ldr	r3, [r7, #20]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3718      	adds	r7, #24
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	20000e0c 	.word	0x20000e0c
 8010e74:	20000e08 	.word	0x20000e08

08010e78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b08e      	sub	sp, #56	; 0x38
 8010e7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e7e:	e0ca      	b.n	8011016 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	da18      	bge.n	8010eb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010e86:	1d3b      	adds	r3, r7, #4
 8010e88:	3304      	adds	r3, #4
 8010e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d10a      	bne.n	8010ea8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e96:	f383 8811 	msr	BASEPRI, r3
 8010e9a:	f3bf 8f6f 	isb	sy
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	61fb      	str	r3, [r7, #28]
}
 8010ea4:	bf00      	nop
 8010ea6:	e7fe      	b.n	8010ea6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eae:	6850      	ldr	r0, [r2, #4]
 8010eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eb2:	6892      	ldr	r2, [r2, #8]
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f2c0 80aa 	blt.w	8011014 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec6:	695b      	ldr	r3, [r3, #20]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d004      	beq.n	8010ed6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ece:	3304      	adds	r3, #4
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fd fc8f 	bl	800e7f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ed6:	463b      	mov	r3, r7
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f7ff ff6b 	bl	8010db4 <prvSampleTimeNow>
 8010ede:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b09      	cmp	r3, #9
 8010ee4:	f200 8097 	bhi.w	8011016 <prvProcessReceivedCommands+0x19e>
 8010ee8:	a201      	add	r2, pc, #4	; (adr r2, 8010ef0 <prvProcessReceivedCommands+0x78>)
 8010eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eee:	bf00      	nop
 8010ef0:	08010f19 	.word	0x08010f19
 8010ef4:	08010f19 	.word	0x08010f19
 8010ef8:	08010f19 	.word	0x08010f19
 8010efc:	08010f8d 	.word	0x08010f8d
 8010f00:	08010fa1 	.word	0x08010fa1
 8010f04:	08010feb 	.word	0x08010feb
 8010f08:	08010f19 	.word	0x08010f19
 8010f0c:	08010f19 	.word	0x08010f19
 8010f10:	08010f8d 	.word	0x08010f8d
 8010f14:	08010fa1 	.word	0x08010fa1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f1e:	f043 0301 	orr.w	r3, r3, #1
 8010f22:	b2da      	uxtb	r2, r3
 8010f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f2a:	68ba      	ldr	r2, [r7, #8]
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	699b      	ldr	r3, [r3, #24]
 8010f30:	18d1      	adds	r1, r2, r3
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f38:	f7ff ff5c 	bl	8010df4 <prvInsertTimerInActiveList>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d069      	beq.n	8011016 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f44:	6a1b      	ldr	r3, [r3, #32]
 8010f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f50:	f003 0304 	and.w	r3, r3, #4
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d05e      	beq.n	8011016 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f58:	68ba      	ldr	r2, [r7, #8]
 8010f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5c:	699b      	ldr	r3, [r3, #24]
 8010f5e:	441a      	add	r2, r3
 8010f60:	2300      	movs	r3, #0
 8010f62:	9300      	str	r3, [sp, #0]
 8010f64:	2300      	movs	r3, #0
 8010f66:	2100      	movs	r1, #0
 8010f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f6a:	f7ff fe05 	bl	8010b78 <xTimerGenericCommand>
 8010f6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010f70:	6a3b      	ldr	r3, [r7, #32]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d14f      	bne.n	8011016 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7a:	f383 8811 	msr	BASEPRI, r3
 8010f7e:	f3bf 8f6f 	isb	sy
 8010f82:	f3bf 8f4f 	dsb	sy
 8010f86:	61bb      	str	r3, [r7, #24]
}
 8010f88:	bf00      	nop
 8010f8a:	e7fe      	b.n	8010f8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f92:	f023 0301 	bic.w	r3, r3, #1
 8010f96:	b2da      	uxtb	r2, r3
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010f9e:	e03a      	b.n	8011016 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fa6:	f043 0301 	orr.w	r3, r3, #1
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010fb2:	68ba      	ldr	r2, [r7, #8]
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d10a      	bne.n	8010fd6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc4:	f383 8811 	msr	BASEPRI, r3
 8010fc8:	f3bf 8f6f 	isb	sy
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	617b      	str	r3, [r7, #20]
}
 8010fd2:	bf00      	nop
 8010fd4:	e7fe      	b.n	8010fd4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd8:	699a      	ldr	r2, [r3, #24]
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	18d1      	adds	r1, r2, r3
 8010fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fe4:	f7ff ff06 	bl	8010df4 <prvInsertTimerInActiveList>
					break;
 8010fe8:	e015      	b.n	8011016 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ff0:	f003 0302 	and.w	r3, r3, #2
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d103      	bne.n	8011000 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ffa:	f000 fc01 	bl	8011800 <vPortFree>
 8010ffe:	e00a      	b.n	8011016 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011006:	f023 0301 	bic.w	r3, r3, #1
 801100a:	b2da      	uxtb	r2, r3
 801100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011012:	e000      	b.n	8011016 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011014:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011016:	4b08      	ldr	r3, [pc, #32]	; (8011038 <prvProcessReceivedCommands+0x1c0>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	1d39      	adds	r1, r7, #4
 801101c:	2200      	movs	r2, #0
 801101e:	4618      	mov	r0, r3
 8011020:	f7fd ffe0 	bl	800efe4 <xQueueReceive>
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	f47f af2a 	bne.w	8010e80 <prvProcessReceivedCommands+0x8>
	}
}
 801102c:	bf00      	nop
 801102e:	bf00      	nop
 8011030:	3730      	adds	r7, #48	; 0x30
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}
 8011036:	bf00      	nop
 8011038:	20000e10 	.word	0x20000e10

0801103c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b088      	sub	sp, #32
 8011040:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011042:	e048      	b.n	80110d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011044:	4b2d      	ldr	r3, [pc, #180]	; (80110fc <prvSwitchTimerLists+0xc0>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801104e:	4b2b      	ldr	r3, [pc, #172]	; (80110fc <prvSwitchTimerLists+0xc0>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68db      	ldr	r3, [r3, #12]
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	3304      	adds	r3, #4
 801105c:	4618      	mov	r0, r3
 801105e:	f7fd fbc9 	bl	800e7f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	6a1b      	ldr	r3, [r3, #32]
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011070:	f003 0304 	and.w	r3, r3, #4
 8011074:	2b00      	cmp	r3, #0
 8011076:	d02e      	beq.n	80110d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	699b      	ldr	r3, [r3, #24]
 801107c:	693a      	ldr	r2, [r7, #16]
 801107e:	4413      	add	r3, r2
 8011080:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	429a      	cmp	r2, r3
 8011088:	d90e      	bls.n	80110a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	68fa      	ldr	r2, [r7, #12]
 8011094:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011096:	4b19      	ldr	r3, [pc, #100]	; (80110fc <prvSwitchTimerLists+0xc0>)
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	3304      	adds	r3, #4
 801109e:	4619      	mov	r1, r3
 80110a0:	4610      	mov	r0, r2
 80110a2:	f7fd fb6e 	bl	800e782 <vListInsert>
 80110a6:	e016      	b.n	80110d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110a8:	2300      	movs	r3, #0
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	2300      	movs	r3, #0
 80110ae:	693a      	ldr	r2, [r7, #16]
 80110b0:	2100      	movs	r1, #0
 80110b2:	68f8      	ldr	r0, [r7, #12]
 80110b4:	f7ff fd60 	bl	8010b78 <xTimerGenericCommand>
 80110b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d10a      	bne.n	80110d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80110c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	603b      	str	r3, [r7, #0]
}
 80110d2:	bf00      	nop
 80110d4:	e7fe      	b.n	80110d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80110d6:	4b09      	ldr	r3, [pc, #36]	; (80110fc <prvSwitchTimerLists+0xc0>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1b1      	bne.n	8011044 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80110e0:	4b06      	ldr	r3, [pc, #24]	; (80110fc <prvSwitchTimerLists+0xc0>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80110e6:	4b06      	ldr	r3, [pc, #24]	; (8011100 <prvSwitchTimerLists+0xc4>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a04      	ldr	r2, [pc, #16]	; (80110fc <prvSwitchTimerLists+0xc0>)
 80110ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80110ee:	4a04      	ldr	r2, [pc, #16]	; (8011100 <prvSwitchTimerLists+0xc4>)
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	6013      	str	r3, [r2, #0]
}
 80110f4:	bf00      	nop
 80110f6:	3718      	adds	r7, #24
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	20000e08 	.word	0x20000e08
 8011100:	20000e0c 	.word	0x20000e0c

08011104 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801110a:	f000 f98b 	bl	8011424 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801110e:	4b15      	ldr	r3, [pc, #84]	; (8011164 <prvCheckForValidListAndQueue+0x60>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d120      	bne.n	8011158 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011116:	4814      	ldr	r0, [pc, #80]	; (8011168 <prvCheckForValidListAndQueue+0x64>)
 8011118:	f7fd fae2 	bl	800e6e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801111c:	4813      	ldr	r0, [pc, #76]	; (801116c <prvCheckForValidListAndQueue+0x68>)
 801111e:	f7fd fadf 	bl	800e6e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011122:	4b13      	ldr	r3, [pc, #76]	; (8011170 <prvCheckForValidListAndQueue+0x6c>)
 8011124:	4a10      	ldr	r2, [pc, #64]	; (8011168 <prvCheckForValidListAndQueue+0x64>)
 8011126:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011128:	4b12      	ldr	r3, [pc, #72]	; (8011174 <prvCheckForValidListAndQueue+0x70>)
 801112a:	4a10      	ldr	r2, [pc, #64]	; (801116c <prvCheckForValidListAndQueue+0x68>)
 801112c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801112e:	2300      	movs	r3, #0
 8011130:	9300      	str	r3, [sp, #0]
 8011132:	4b11      	ldr	r3, [pc, #68]	; (8011178 <prvCheckForValidListAndQueue+0x74>)
 8011134:	4a11      	ldr	r2, [pc, #68]	; (801117c <prvCheckForValidListAndQueue+0x78>)
 8011136:	2110      	movs	r1, #16
 8011138:	200a      	movs	r0, #10
 801113a:	f7fd fbed 	bl	800e918 <xQueueGenericCreateStatic>
 801113e:	4603      	mov	r3, r0
 8011140:	4a08      	ldr	r2, [pc, #32]	; (8011164 <prvCheckForValidListAndQueue+0x60>)
 8011142:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011144:	4b07      	ldr	r3, [pc, #28]	; (8011164 <prvCheckForValidListAndQueue+0x60>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d005      	beq.n	8011158 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801114c:	4b05      	ldr	r3, [pc, #20]	; (8011164 <prvCheckForValidListAndQueue+0x60>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	490b      	ldr	r1, [pc, #44]	; (8011180 <prvCheckForValidListAndQueue+0x7c>)
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fafe 	bl	800f754 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011158:	f000 f994 	bl	8011484 <vPortExitCritical>
}
 801115c:	bf00      	nop
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	20000e10 	.word	0x20000e10
 8011168:	20000de0 	.word	0x20000de0
 801116c:	20000df4 	.word	0x20000df4
 8011170:	20000e08 	.word	0x20000e08
 8011174:	20000e0c 	.word	0x20000e0c
 8011178:	20000ebc 	.word	0x20000ebc
 801117c:	20000e1c 	.word	0x20000e1c
 8011180:	08013e8c 	.word	0x08013e8c

08011184 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011184:	b580      	push	{r7, lr}
 8011186:	b08a      	sub	sp, #40	; 0x28
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
 8011190:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8011192:	f06f 0301 	mvn.w	r3, #1
 8011196:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80111a4:	4b06      	ldr	r3, [pc, #24]	; (80111c0 <xTimerPendFunctionCallFromISR+0x3c>)
 80111a6:	6818      	ldr	r0, [r3, #0]
 80111a8:	f107 0114 	add.w	r1, r7, #20
 80111ac:	2300      	movs	r3, #0
 80111ae:	683a      	ldr	r2, [r7, #0]
 80111b0:	f7fd fdf0 	bl	800ed94 <xQueueGenericSendFromISR>
 80111b4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80111b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3728      	adds	r7, #40	; 0x28
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	20000e10 	.word	0x20000e10

080111c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	3b04      	subs	r3, #4
 80111d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80111dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	3b04      	subs	r3, #4
 80111e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	f023 0201 	bic.w	r2, r3, #1
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	3b04      	subs	r3, #4
 80111f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80111f4:	4a0c      	ldr	r2, [pc, #48]	; (8011228 <pxPortInitialiseStack+0x64>)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	3b14      	subs	r3, #20
 80111fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	3b04      	subs	r3, #4
 801120a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f06f 0202 	mvn.w	r2, #2
 8011212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	3b20      	subs	r3, #32
 8011218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801121a:	68fb      	ldr	r3, [r7, #12]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3714      	adds	r7, #20
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	0801122d 	.word	0x0801122d

0801122c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011232:	2300      	movs	r3, #0
 8011234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011236:	4b12      	ldr	r3, [pc, #72]	; (8011280 <prvTaskExitError+0x54>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801123e:	d00a      	beq.n	8011256 <prvTaskExitError+0x2a>
	__asm volatile
 8011240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011244:	f383 8811 	msr	BASEPRI, r3
 8011248:	f3bf 8f6f 	isb	sy
 801124c:	f3bf 8f4f 	dsb	sy
 8011250:	60fb      	str	r3, [r7, #12]
}
 8011252:	bf00      	nop
 8011254:	e7fe      	b.n	8011254 <prvTaskExitError+0x28>
	__asm volatile
 8011256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125a:	f383 8811 	msr	BASEPRI, r3
 801125e:	f3bf 8f6f 	isb	sy
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	60bb      	str	r3, [r7, #8]
}
 8011268:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801126a:	bf00      	nop
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d0fc      	beq.n	801126c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011272:	bf00      	nop
 8011274:	bf00      	nop
 8011276:	3714      	adds	r7, #20
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr
 8011280:	2000015c 	.word	0x2000015c
	...

08011290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011290:	4b07      	ldr	r3, [pc, #28]	; (80112b0 <pxCurrentTCBConst2>)
 8011292:	6819      	ldr	r1, [r3, #0]
 8011294:	6808      	ldr	r0, [r1, #0]
 8011296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129a:	f380 8809 	msr	PSP, r0
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f04f 0000 	mov.w	r0, #0
 80112a6:	f380 8811 	msr	BASEPRI, r0
 80112aa:	4770      	bx	lr
 80112ac:	f3af 8000 	nop.w

080112b0 <pxCurrentTCBConst2>:
 80112b0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112b4:	bf00      	nop
 80112b6:	bf00      	nop

080112b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112b8:	4808      	ldr	r0, [pc, #32]	; (80112dc <prvPortStartFirstTask+0x24>)
 80112ba:	6800      	ldr	r0, [r0, #0]
 80112bc:	6800      	ldr	r0, [r0, #0]
 80112be:	f380 8808 	msr	MSP, r0
 80112c2:	f04f 0000 	mov.w	r0, #0
 80112c6:	f380 8814 	msr	CONTROL, r0
 80112ca:	b662      	cpsie	i
 80112cc:	b661      	cpsie	f
 80112ce:	f3bf 8f4f 	dsb	sy
 80112d2:	f3bf 8f6f 	isb	sy
 80112d6:	df00      	svc	0
 80112d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80112da:	bf00      	nop
 80112dc:	e000ed08 	.word	0xe000ed08

080112e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80112e6:	4b46      	ldr	r3, [pc, #280]	; (8011400 <xPortStartScheduler+0x120>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	4a46      	ldr	r2, [pc, #280]	; (8011404 <xPortStartScheduler+0x124>)
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d10a      	bne.n	8011306 <xPortStartScheduler+0x26>
	__asm volatile
 80112f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f4:	f383 8811 	msr	BASEPRI, r3
 80112f8:	f3bf 8f6f 	isb	sy
 80112fc:	f3bf 8f4f 	dsb	sy
 8011300:	613b      	str	r3, [r7, #16]
}
 8011302:	bf00      	nop
 8011304:	e7fe      	b.n	8011304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011306:	4b3e      	ldr	r3, [pc, #248]	; (8011400 <xPortStartScheduler+0x120>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4a3f      	ldr	r2, [pc, #252]	; (8011408 <xPortStartScheduler+0x128>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d10a      	bne.n	8011326 <xPortStartScheduler+0x46>
	__asm volatile
 8011310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011314:	f383 8811 	msr	BASEPRI, r3
 8011318:	f3bf 8f6f 	isb	sy
 801131c:	f3bf 8f4f 	dsb	sy
 8011320:	60fb      	str	r3, [r7, #12]
}
 8011322:	bf00      	nop
 8011324:	e7fe      	b.n	8011324 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011326:	4b39      	ldr	r3, [pc, #228]	; (801140c <xPortStartScheduler+0x12c>)
 8011328:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	b2db      	uxtb	r3, r3
 8011330:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	22ff      	movs	r2, #255	; 0xff
 8011336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	b2db      	uxtb	r3, r3
 801133e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011340:	78fb      	ldrb	r3, [r7, #3]
 8011342:	b2db      	uxtb	r3, r3
 8011344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011348:	b2da      	uxtb	r2, r3
 801134a:	4b31      	ldr	r3, [pc, #196]	; (8011410 <xPortStartScheduler+0x130>)
 801134c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801134e:	4b31      	ldr	r3, [pc, #196]	; (8011414 <xPortStartScheduler+0x134>)
 8011350:	2207      	movs	r2, #7
 8011352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011354:	e009      	b.n	801136a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011356:	4b2f      	ldr	r3, [pc, #188]	; (8011414 <xPortStartScheduler+0x134>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	3b01      	subs	r3, #1
 801135c:	4a2d      	ldr	r2, [pc, #180]	; (8011414 <xPortStartScheduler+0x134>)
 801135e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011360:	78fb      	ldrb	r3, [r7, #3]
 8011362:	b2db      	uxtb	r3, r3
 8011364:	005b      	lsls	r3, r3, #1
 8011366:	b2db      	uxtb	r3, r3
 8011368:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801136a:	78fb      	ldrb	r3, [r7, #3]
 801136c:	b2db      	uxtb	r3, r3
 801136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011372:	2b80      	cmp	r3, #128	; 0x80
 8011374:	d0ef      	beq.n	8011356 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011376:	4b27      	ldr	r3, [pc, #156]	; (8011414 <xPortStartScheduler+0x134>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f1c3 0307 	rsb	r3, r3, #7
 801137e:	2b04      	cmp	r3, #4
 8011380:	d00a      	beq.n	8011398 <xPortStartScheduler+0xb8>
	__asm volatile
 8011382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011386:	f383 8811 	msr	BASEPRI, r3
 801138a:	f3bf 8f6f 	isb	sy
 801138e:	f3bf 8f4f 	dsb	sy
 8011392:	60bb      	str	r3, [r7, #8]
}
 8011394:	bf00      	nop
 8011396:	e7fe      	b.n	8011396 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011398:	4b1e      	ldr	r3, [pc, #120]	; (8011414 <xPortStartScheduler+0x134>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	021b      	lsls	r3, r3, #8
 801139e:	4a1d      	ldr	r2, [pc, #116]	; (8011414 <xPortStartScheduler+0x134>)
 80113a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80113a2:	4b1c      	ldr	r3, [pc, #112]	; (8011414 <xPortStartScheduler+0x134>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113aa:	4a1a      	ldr	r2, [pc, #104]	; (8011414 <xPortStartScheduler+0x134>)
 80113ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113b6:	4b18      	ldr	r3, [pc, #96]	; (8011418 <xPortStartScheduler+0x138>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	4a17      	ldr	r2, [pc, #92]	; (8011418 <xPortStartScheduler+0x138>)
 80113bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113c2:	4b15      	ldr	r3, [pc, #84]	; (8011418 <xPortStartScheduler+0x138>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4a14      	ldr	r2, [pc, #80]	; (8011418 <xPortStartScheduler+0x138>)
 80113c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80113cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113ce:	f000 f8dd 	bl	801158c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80113d2:	4b12      	ldr	r3, [pc, #72]	; (801141c <xPortStartScheduler+0x13c>)
 80113d4:	2200      	movs	r2, #0
 80113d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80113d8:	f000 f8fc 	bl	80115d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80113dc:	4b10      	ldr	r3, [pc, #64]	; (8011420 <xPortStartScheduler+0x140>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4a0f      	ldr	r2, [pc, #60]	; (8011420 <xPortStartScheduler+0x140>)
 80113e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80113e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80113e8:	f7ff ff66 	bl	80112b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80113ec:	f7fe fe7c 	bl	80100e8 <vTaskSwitchContext>
	prvTaskExitError();
 80113f0:	f7ff ff1c 	bl	801122c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80113f4:	2300      	movs	r3, #0
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3718      	adds	r7, #24
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	e000ed00 	.word	0xe000ed00
 8011404:	410fc271 	.word	0x410fc271
 8011408:	410fc270 	.word	0x410fc270
 801140c:	e000e400 	.word	0xe000e400
 8011410:	20000f0c 	.word	0x20000f0c
 8011414:	20000f10 	.word	0x20000f10
 8011418:	e000ed20 	.word	0xe000ed20
 801141c:	2000015c 	.word	0x2000015c
 8011420:	e000ef34 	.word	0xe000ef34

08011424 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
	__asm volatile
 801142a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142e:	f383 8811 	msr	BASEPRI, r3
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	f3bf 8f4f 	dsb	sy
 801143a:	607b      	str	r3, [r7, #4]
}
 801143c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801143e:	4b0f      	ldr	r3, [pc, #60]	; (801147c <vPortEnterCritical+0x58>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	3301      	adds	r3, #1
 8011444:	4a0d      	ldr	r2, [pc, #52]	; (801147c <vPortEnterCritical+0x58>)
 8011446:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011448:	4b0c      	ldr	r3, [pc, #48]	; (801147c <vPortEnterCritical+0x58>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	2b01      	cmp	r3, #1
 801144e:	d10f      	bne.n	8011470 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011450:	4b0b      	ldr	r3, [pc, #44]	; (8011480 <vPortEnterCritical+0x5c>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	b2db      	uxtb	r3, r3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00a      	beq.n	8011470 <vPortEnterCritical+0x4c>
	__asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	603b      	str	r3, [r7, #0]
}
 801146c:	bf00      	nop
 801146e:	e7fe      	b.n	801146e <vPortEnterCritical+0x4a>
	}
}
 8011470:	bf00      	nop
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr
 801147c:	2000015c 	.word	0x2000015c
 8011480:	e000ed04 	.word	0xe000ed04

08011484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801148a:	4b12      	ldr	r3, [pc, #72]	; (80114d4 <vPortExitCritical+0x50>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d10a      	bne.n	80114a8 <vPortExitCritical+0x24>
	__asm volatile
 8011492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011496:	f383 8811 	msr	BASEPRI, r3
 801149a:	f3bf 8f6f 	isb	sy
 801149e:	f3bf 8f4f 	dsb	sy
 80114a2:	607b      	str	r3, [r7, #4]
}
 80114a4:	bf00      	nop
 80114a6:	e7fe      	b.n	80114a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80114a8:	4b0a      	ldr	r3, [pc, #40]	; (80114d4 <vPortExitCritical+0x50>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	3b01      	subs	r3, #1
 80114ae:	4a09      	ldr	r2, [pc, #36]	; (80114d4 <vPortExitCritical+0x50>)
 80114b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114b2:	4b08      	ldr	r3, [pc, #32]	; (80114d4 <vPortExitCritical+0x50>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d105      	bne.n	80114c6 <vPortExitCritical+0x42>
 80114ba:	2300      	movs	r3, #0
 80114bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	f383 8811 	msr	BASEPRI, r3
}
 80114c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80114c6:	bf00      	nop
 80114c8:	370c      	adds	r7, #12
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	2000015c 	.word	0x2000015c
	...

080114e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80114e0:	f3ef 8009 	mrs	r0, PSP
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	4b15      	ldr	r3, [pc, #84]	; (8011540 <pxCurrentTCBConst>)
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	f01e 0f10 	tst.w	lr, #16
 80114f0:	bf08      	it	eq
 80114f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80114f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114fa:	6010      	str	r0, [r2, #0]
 80114fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011504:	f380 8811 	msr	BASEPRI, r0
 8011508:	f3bf 8f4f 	dsb	sy
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f7fe fdea 	bl	80100e8 <vTaskSwitchContext>
 8011514:	f04f 0000 	mov.w	r0, #0
 8011518:	f380 8811 	msr	BASEPRI, r0
 801151c:	bc09      	pop	{r0, r3}
 801151e:	6819      	ldr	r1, [r3, #0]
 8011520:	6808      	ldr	r0, [r1, #0]
 8011522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011526:	f01e 0f10 	tst.w	lr, #16
 801152a:	bf08      	it	eq
 801152c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011530:	f380 8809 	msr	PSP, r0
 8011534:	f3bf 8f6f 	isb	sy
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	f3af 8000 	nop.w

08011540 <pxCurrentTCBConst>:
 8011540:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011544:	bf00      	nop
 8011546:	bf00      	nop

08011548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
	__asm volatile
 801154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	607b      	str	r3, [r7, #4]
}
 8011560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011562:	f7fe fd07 	bl	800ff74 <xTaskIncrementTick>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	d003      	beq.n	8011574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801156c:	4b06      	ldr	r3, [pc, #24]	; (8011588 <xPortSysTickHandler+0x40>)
 801156e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011572:	601a      	str	r2, [r3, #0]
 8011574:	2300      	movs	r3, #0
 8011576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	f383 8811 	msr	BASEPRI, r3
}
 801157e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011580:	bf00      	nop
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	e000ed04 	.word	0xe000ed04

0801158c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801158c:	b480      	push	{r7}
 801158e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011590:	4b0b      	ldr	r3, [pc, #44]	; (80115c0 <vPortSetupTimerInterrupt+0x34>)
 8011592:	2200      	movs	r2, #0
 8011594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011596:	4b0b      	ldr	r3, [pc, #44]	; (80115c4 <vPortSetupTimerInterrupt+0x38>)
 8011598:	2200      	movs	r2, #0
 801159a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801159c:	4b0a      	ldr	r3, [pc, #40]	; (80115c8 <vPortSetupTimerInterrupt+0x3c>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a0a      	ldr	r2, [pc, #40]	; (80115cc <vPortSetupTimerInterrupt+0x40>)
 80115a2:	fba2 2303 	umull	r2, r3, r2, r3
 80115a6:	099b      	lsrs	r3, r3, #6
 80115a8:	4a09      	ldr	r2, [pc, #36]	; (80115d0 <vPortSetupTimerInterrupt+0x44>)
 80115aa:	3b01      	subs	r3, #1
 80115ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80115ae:	4b04      	ldr	r3, [pc, #16]	; (80115c0 <vPortSetupTimerInterrupt+0x34>)
 80115b0:	2207      	movs	r2, #7
 80115b2:	601a      	str	r2, [r3, #0]
}
 80115b4:	bf00      	nop
 80115b6:	46bd      	mov	sp, r7
 80115b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115bc:	4770      	bx	lr
 80115be:	bf00      	nop
 80115c0:	e000e010 	.word	0xe000e010
 80115c4:	e000e018 	.word	0xe000e018
 80115c8:	2000013c 	.word	0x2000013c
 80115cc:	10624dd3 	.word	0x10624dd3
 80115d0:	e000e014 	.word	0xe000e014

080115d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80115d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80115e4 <vPortEnableVFP+0x10>
 80115d8:	6801      	ldr	r1, [r0, #0]
 80115da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80115de:	6001      	str	r1, [r0, #0]
 80115e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80115e2:	bf00      	nop
 80115e4:	e000ed88 	.word	0xe000ed88

080115e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80115ee:	f3ef 8305 	mrs	r3, IPSR
 80115f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2b0f      	cmp	r3, #15
 80115f8:	d914      	bls.n	8011624 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80115fa:	4a17      	ldr	r2, [pc, #92]	; (8011658 <vPortValidateInterruptPriority+0x70>)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	4413      	add	r3, r2
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011604:	4b15      	ldr	r3, [pc, #84]	; (801165c <vPortValidateInterruptPriority+0x74>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	7afa      	ldrb	r2, [r7, #11]
 801160a:	429a      	cmp	r2, r3
 801160c:	d20a      	bcs.n	8011624 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801160e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	607b      	str	r3, [r7, #4]
}
 8011620:	bf00      	nop
 8011622:	e7fe      	b.n	8011622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011624:	4b0e      	ldr	r3, [pc, #56]	; (8011660 <vPortValidateInterruptPriority+0x78>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801162c:	4b0d      	ldr	r3, [pc, #52]	; (8011664 <vPortValidateInterruptPriority+0x7c>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	429a      	cmp	r2, r3
 8011632:	d90a      	bls.n	801164a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011638:	f383 8811 	msr	BASEPRI, r3
 801163c:	f3bf 8f6f 	isb	sy
 8011640:	f3bf 8f4f 	dsb	sy
 8011644:	603b      	str	r3, [r7, #0]
}
 8011646:	bf00      	nop
 8011648:	e7fe      	b.n	8011648 <vPortValidateInterruptPriority+0x60>
	}
 801164a:	bf00      	nop
 801164c:	3714      	adds	r7, #20
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	e000e3f0 	.word	0xe000e3f0
 801165c:	20000f0c 	.word	0x20000f0c
 8011660:	e000ed0c 	.word	0xe000ed0c
 8011664:	20000f10 	.word	0x20000f10

08011668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b08a      	sub	sp, #40	; 0x28
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011670:	2300      	movs	r3, #0
 8011672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011674:	f7fe fbb0 	bl	800fdd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011678:	4b5b      	ldr	r3, [pc, #364]	; (80117e8 <pvPortMalloc+0x180>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d101      	bne.n	8011684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011680:	f000 f920 	bl	80118c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011684:	4b59      	ldr	r3, [pc, #356]	; (80117ec <pvPortMalloc+0x184>)
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	4013      	ands	r3, r2
 801168c:	2b00      	cmp	r3, #0
 801168e:	f040 8093 	bne.w	80117b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d01d      	beq.n	80116d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011698:	2208      	movs	r2, #8
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4413      	add	r3, r2
 801169e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f003 0307 	and.w	r3, r3, #7
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d014      	beq.n	80116d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f023 0307 	bic.w	r3, r3, #7
 80116b0:	3308      	adds	r3, #8
 80116b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f003 0307 	and.w	r3, r3, #7
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d00a      	beq.n	80116d4 <pvPortMalloc+0x6c>
	__asm volatile
 80116be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	617b      	str	r3, [r7, #20]
}
 80116d0:	bf00      	nop
 80116d2:	e7fe      	b.n	80116d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d06e      	beq.n	80117b8 <pvPortMalloc+0x150>
 80116da:	4b45      	ldr	r3, [pc, #276]	; (80117f0 <pvPortMalloc+0x188>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d869      	bhi.n	80117b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80116e4:	4b43      	ldr	r3, [pc, #268]	; (80117f4 <pvPortMalloc+0x18c>)
 80116e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80116e8:	4b42      	ldr	r3, [pc, #264]	; (80117f4 <pvPortMalloc+0x18c>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116ee:	e004      	b.n	80116fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80116f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	429a      	cmp	r2, r3
 8011702:	d903      	bls.n	801170c <pvPortMalloc+0xa4>
 8011704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d1f1      	bne.n	80116f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801170c:	4b36      	ldr	r3, [pc, #216]	; (80117e8 <pvPortMalloc+0x180>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011712:	429a      	cmp	r2, r3
 8011714:	d050      	beq.n	80117b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011716:	6a3b      	ldr	r3, [r7, #32]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2208      	movs	r2, #8
 801171c:	4413      	add	r3, r2
 801171e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	6a3b      	ldr	r3, [r7, #32]
 8011726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172a:	685a      	ldr	r2, [r3, #4]
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	1ad2      	subs	r2, r2, r3
 8011730:	2308      	movs	r3, #8
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	429a      	cmp	r2, r3
 8011736:	d91f      	bls.n	8011778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4413      	add	r3, r2
 801173e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	f003 0307 	and.w	r3, r3, #7
 8011746:	2b00      	cmp	r3, #0
 8011748:	d00a      	beq.n	8011760 <pvPortMalloc+0xf8>
	__asm volatile
 801174a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	613b      	str	r3, [r7, #16]
}
 801175c:	bf00      	nop
 801175e:	e7fe      	b.n	801175e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	1ad2      	subs	r2, r2, r3
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011772:	69b8      	ldr	r0, [r7, #24]
 8011774:	f000 f908 	bl	8011988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011778:	4b1d      	ldr	r3, [pc, #116]	; (80117f0 <pvPortMalloc+0x188>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	1ad3      	subs	r3, r2, r3
 8011782:	4a1b      	ldr	r2, [pc, #108]	; (80117f0 <pvPortMalloc+0x188>)
 8011784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011786:	4b1a      	ldr	r3, [pc, #104]	; (80117f0 <pvPortMalloc+0x188>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	4b1b      	ldr	r3, [pc, #108]	; (80117f8 <pvPortMalloc+0x190>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	429a      	cmp	r2, r3
 8011790:	d203      	bcs.n	801179a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011792:	4b17      	ldr	r3, [pc, #92]	; (80117f0 <pvPortMalloc+0x188>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	4a18      	ldr	r2, [pc, #96]	; (80117f8 <pvPortMalloc+0x190>)
 8011798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179c:	685a      	ldr	r2, [r3, #4]
 801179e:	4b13      	ldr	r3, [pc, #76]	; (80117ec <pvPortMalloc+0x184>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	431a      	orrs	r2, r3
 80117a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80117a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117aa:	2200      	movs	r2, #0
 80117ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80117ae:	4b13      	ldr	r3, [pc, #76]	; (80117fc <pvPortMalloc+0x194>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	3301      	adds	r3, #1
 80117b4:	4a11      	ldr	r2, [pc, #68]	; (80117fc <pvPortMalloc+0x194>)
 80117b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80117b8:	f7fe fb1c 	bl	800fdf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	f003 0307 	and.w	r3, r3, #7
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d00a      	beq.n	80117dc <pvPortMalloc+0x174>
	__asm volatile
 80117c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ca:	f383 8811 	msr	BASEPRI, r3
 80117ce:	f3bf 8f6f 	isb	sy
 80117d2:	f3bf 8f4f 	dsb	sy
 80117d6:	60fb      	str	r3, [r7, #12]
}
 80117d8:	bf00      	nop
 80117da:	e7fe      	b.n	80117da <pvPortMalloc+0x172>
	return pvReturn;
 80117dc:	69fb      	ldr	r3, [r7, #28]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3728      	adds	r7, #40	; 0x28
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	bf00      	nop
 80117e8:	2000362c 	.word	0x2000362c
 80117ec:	20003640 	.word	0x20003640
 80117f0:	20003630 	.word	0x20003630
 80117f4:	20003624 	.word	0x20003624
 80117f8:	20003634 	.word	0x20003634
 80117fc:	20003638 	.word	0x20003638

08011800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b086      	sub	sp, #24
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d04d      	beq.n	80118ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011812:	2308      	movs	r3, #8
 8011814:	425b      	negs	r3, r3
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	4413      	add	r3, r2
 801181a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	685a      	ldr	r2, [r3, #4]
 8011824:	4b24      	ldr	r3, [pc, #144]	; (80118b8 <vPortFree+0xb8>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4013      	ands	r3, r2
 801182a:	2b00      	cmp	r3, #0
 801182c:	d10a      	bne.n	8011844 <vPortFree+0x44>
	__asm volatile
 801182e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011832:	f383 8811 	msr	BASEPRI, r3
 8011836:	f3bf 8f6f 	isb	sy
 801183a:	f3bf 8f4f 	dsb	sy
 801183e:	60fb      	str	r3, [r7, #12]
}
 8011840:	bf00      	nop
 8011842:	e7fe      	b.n	8011842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00a      	beq.n	8011862 <vPortFree+0x62>
	__asm volatile
 801184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011850:	f383 8811 	msr	BASEPRI, r3
 8011854:	f3bf 8f6f 	isb	sy
 8011858:	f3bf 8f4f 	dsb	sy
 801185c:	60bb      	str	r3, [r7, #8]
}
 801185e:	bf00      	nop
 8011860:	e7fe      	b.n	8011860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	685a      	ldr	r2, [r3, #4]
 8011866:	4b14      	ldr	r3, [pc, #80]	; (80118b8 <vPortFree+0xb8>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4013      	ands	r3, r2
 801186c:	2b00      	cmp	r3, #0
 801186e:	d01e      	beq.n	80118ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d11a      	bne.n	80118ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	685a      	ldr	r2, [r3, #4]
 801187c:	4b0e      	ldr	r3, [pc, #56]	; (80118b8 <vPortFree+0xb8>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	43db      	mvns	r3, r3
 8011882:	401a      	ands	r2, r3
 8011884:	693b      	ldr	r3, [r7, #16]
 8011886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011888:	f7fe faa6 	bl	800fdd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	685a      	ldr	r2, [r3, #4]
 8011890:	4b0a      	ldr	r3, [pc, #40]	; (80118bc <vPortFree+0xbc>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4413      	add	r3, r2
 8011896:	4a09      	ldr	r2, [pc, #36]	; (80118bc <vPortFree+0xbc>)
 8011898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801189a:	6938      	ldr	r0, [r7, #16]
 801189c:	f000 f874 	bl	8011988 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80118a0:	4b07      	ldr	r3, [pc, #28]	; (80118c0 <vPortFree+0xc0>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	3301      	adds	r3, #1
 80118a6:	4a06      	ldr	r2, [pc, #24]	; (80118c0 <vPortFree+0xc0>)
 80118a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80118aa:	f7fe faa3 	bl	800fdf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80118ae:	bf00      	nop
 80118b0:	3718      	adds	r7, #24
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
 80118b6:	bf00      	nop
 80118b8:	20003640 	.word	0x20003640
 80118bc:	20003630 	.word	0x20003630
 80118c0:	2000363c 	.word	0x2000363c

080118c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80118c4:	b480      	push	{r7}
 80118c6:	b085      	sub	sp, #20
 80118c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80118ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80118ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80118d0:	4b27      	ldr	r3, [pc, #156]	; (8011970 <prvHeapInit+0xac>)
 80118d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f003 0307 	and.w	r3, r3, #7
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d00c      	beq.n	80118f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	3307      	adds	r3, #7
 80118e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f023 0307 	bic.w	r3, r3, #7
 80118ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80118ec:	68ba      	ldr	r2, [r7, #8]
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	4a1f      	ldr	r2, [pc, #124]	; (8011970 <prvHeapInit+0xac>)
 80118f4:	4413      	add	r3, r2
 80118f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80118fc:	4a1d      	ldr	r2, [pc, #116]	; (8011974 <prvHeapInit+0xb0>)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011902:	4b1c      	ldr	r3, [pc, #112]	; (8011974 <prvHeapInit+0xb0>)
 8011904:	2200      	movs	r2, #0
 8011906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	68ba      	ldr	r2, [r7, #8]
 801190c:	4413      	add	r3, r2
 801190e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011910:	2208      	movs	r2, #8
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	1a9b      	subs	r3, r3, r2
 8011916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f023 0307 	bic.w	r3, r3, #7
 801191e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	4a15      	ldr	r2, [pc, #84]	; (8011978 <prvHeapInit+0xb4>)
 8011924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011926:	4b14      	ldr	r3, [pc, #80]	; (8011978 <prvHeapInit+0xb4>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2200      	movs	r2, #0
 801192c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801192e:	4b12      	ldr	r3, [pc, #72]	; (8011978 <prvHeapInit+0xb4>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2200      	movs	r2, #0
 8011934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	1ad2      	subs	r2, r2, r3
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011944:	4b0c      	ldr	r3, [pc, #48]	; (8011978 <prvHeapInit+0xb4>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	4a0a      	ldr	r2, [pc, #40]	; (801197c <prvHeapInit+0xb8>)
 8011952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	4a09      	ldr	r2, [pc, #36]	; (8011980 <prvHeapInit+0xbc>)
 801195a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801195c:	4b09      	ldr	r3, [pc, #36]	; (8011984 <prvHeapInit+0xc0>)
 801195e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011962:	601a      	str	r2, [r3, #0]
}
 8011964:	bf00      	nop
 8011966:	3714      	adds	r7, #20
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	20000f14 	.word	0x20000f14
 8011974:	20003624 	.word	0x20003624
 8011978:	2000362c 	.word	0x2000362c
 801197c:	20003634 	.word	0x20003634
 8011980:	20003630 	.word	0x20003630
 8011984:	20003640 	.word	0x20003640

08011988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011988:	b480      	push	{r7}
 801198a:	b085      	sub	sp, #20
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011990:	4b28      	ldr	r3, [pc, #160]	; (8011a34 <prvInsertBlockIntoFreeList+0xac>)
 8011992:	60fb      	str	r3, [r7, #12]
 8011994:	e002      	b.n	801199c <prvInsertBlockIntoFreeList+0x14>
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	60fb      	str	r3, [r7, #12]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d8f7      	bhi.n	8011996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	68ba      	ldr	r2, [r7, #8]
 80119b0:	4413      	add	r3, r2
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d108      	bne.n	80119ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	685a      	ldr	r2, [r3, #4]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	441a      	add	r2, r3
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	68ba      	ldr	r2, [r7, #8]
 80119d4:	441a      	add	r2, r3
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d118      	bne.n	8011a10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	4b15      	ldr	r3, [pc, #84]	; (8011a38 <prvInsertBlockIntoFreeList+0xb0>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d00d      	beq.n	8011a06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	685a      	ldr	r2, [r3, #4]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	441a      	add	r2, r3
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	681a      	ldr	r2, [r3, #0]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	601a      	str	r2, [r3, #0]
 8011a04:	e008      	b.n	8011a18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011a06:	4b0c      	ldr	r3, [pc, #48]	; (8011a38 <prvInsertBlockIntoFreeList+0xb0>)
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	601a      	str	r2, [r3, #0]
 8011a0e:	e003      	b.n	8011a18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d002      	beq.n	8011a26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	687a      	ldr	r2, [r7, #4]
 8011a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a26:	bf00      	nop
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	20003624 	.word	0x20003624
 8011a38:	2000362c 	.word	0x2000362c

08011a3c <__errno>:
 8011a3c:	4b01      	ldr	r3, [pc, #4]	; (8011a44 <__errno+0x8>)
 8011a3e:	6818      	ldr	r0, [r3, #0]
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	20000160 	.word	0x20000160

08011a48 <__libc_init_array>:
 8011a48:	b570      	push	{r4, r5, r6, lr}
 8011a4a:	4d0d      	ldr	r5, [pc, #52]	; (8011a80 <__libc_init_array+0x38>)
 8011a4c:	4c0d      	ldr	r4, [pc, #52]	; (8011a84 <__libc_init_array+0x3c>)
 8011a4e:	1b64      	subs	r4, r4, r5
 8011a50:	10a4      	asrs	r4, r4, #2
 8011a52:	2600      	movs	r6, #0
 8011a54:	42a6      	cmp	r6, r4
 8011a56:	d109      	bne.n	8011a6c <__libc_init_array+0x24>
 8011a58:	4d0b      	ldr	r5, [pc, #44]	; (8011a88 <__libc_init_array+0x40>)
 8011a5a:	4c0c      	ldr	r4, [pc, #48]	; (8011a8c <__libc_init_array+0x44>)
 8011a5c:	f002 f85e 	bl	8013b1c <_init>
 8011a60:	1b64      	subs	r4, r4, r5
 8011a62:	10a4      	asrs	r4, r4, #2
 8011a64:	2600      	movs	r6, #0
 8011a66:	42a6      	cmp	r6, r4
 8011a68:	d105      	bne.n	8011a76 <__libc_init_array+0x2e>
 8011a6a:	bd70      	pop	{r4, r5, r6, pc}
 8011a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a70:	4798      	blx	r3
 8011a72:	3601      	adds	r6, #1
 8011a74:	e7ee      	b.n	8011a54 <__libc_init_array+0xc>
 8011a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a7a:	4798      	blx	r3
 8011a7c:	3601      	adds	r6, #1
 8011a7e:	e7f2      	b.n	8011a66 <__libc_init_array+0x1e>
 8011a80:	08014620 	.word	0x08014620
 8011a84:	08014620 	.word	0x08014620
 8011a88:	08014620 	.word	0x08014620
 8011a8c:	08014624 	.word	0x08014624

08011a90 <memcpy>:
 8011a90:	440a      	add	r2, r1
 8011a92:	4291      	cmp	r1, r2
 8011a94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011a98:	d100      	bne.n	8011a9c <memcpy+0xc>
 8011a9a:	4770      	bx	lr
 8011a9c:	b510      	push	{r4, lr}
 8011a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011aa6:	4291      	cmp	r1, r2
 8011aa8:	d1f9      	bne.n	8011a9e <memcpy+0xe>
 8011aaa:	bd10      	pop	{r4, pc}

08011aac <memset>:
 8011aac:	4402      	add	r2, r0
 8011aae:	4603      	mov	r3, r0
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d100      	bne.n	8011ab6 <memset+0xa>
 8011ab4:	4770      	bx	lr
 8011ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8011aba:	e7f9      	b.n	8011ab0 <memset+0x4>

08011abc <iprintf>:
 8011abc:	b40f      	push	{r0, r1, r2, r3}
 8011abe:	4b0a      	ldr	r3, [pc, #40]	; (8011ae8 <iprintf+0x2c>)
 8011ac0:	b513      	push	{r0, r1, r4, lr}
 8011ac2:	681c      	ldr	r4, [r3, #0]
 8011ac4:	b124      	cbz	r4, 8011ad0 <iprintf+0x14>
 8011ac6:	69a3      	ldr	r3, [r4, #24]
 8011ac8:	b913      	cbnz	r3, 8011ad0 <iprintf+0x14>
 8011aca:	4620      	mov	r0, r4
 8011acc:	f000 fa5e 	bl	8011f8c <__sinit>
 8011ad0:	ab05      	add	r3, sp, #20
 8011ad2:	9a04      	ldr	r2, [sp, #16]
 8011ad4:	68a1      	ldr	r1, [r4, #8]
 8011ad6:	9301      	str	r3, [sp, #4]
 8011ad8:	4620      	mov	r0, r4
 8011ada:	f000 fc2f 	bl	801233c <_vfiprintf_r>
 8011ade:	b002      	add	sp, #8
 8011ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ae4:	b004      	add	sp, #16
 8011ae6:	4770      	bx	lr
 8011ae8:	20000160 	.word	0x20000160

08011aec <_puts_r>:
 8011aec:	b570      	push	{r4, r5, r6, lr}
 8011aee:	460e      	mov	r6, r1
 8011af0:	4605      	mov	r5, r0
 8011af2:	b118      	cbz	r0, 8011afc <_puts_r+0x10>
 8011af4:	6983      	ldr	r3, [r0, #24]
 8011af6:	b90b      	cbnz	r3, 8011afc <_puts_r+0x10>
 8011af8:	f000 fa48 	bl	8011f8c <__sinit>
 8011afc:	69ab      	ldr	r3, [r5, #24]
 8011afe:	68ac      	ldr	r4, [r5, #8]
 8011b00:	b913      	cbnz	r3, 8011b08 <_puts_r+0x1c>
 8011b02:	4628      	mov	r0, r5
 8011b04:	f000 fa42 	bl	8011f8c <__sinit>
 8011b08:	4b2c      	ldr	r3, [pc, #176]	; (8011bbc <_puts_r+0xd0>)
 8011b0a:	429c      	cmp	r4, r3
 8011b0c:	d120      	bne.n	8011b50 <_puts_r+0x64>
 8011b0e:	686c      	ldr	r4, [r5, #4]
 8011b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b12:	07db      	lsls	r3, r3, #31
 8011b14:	d405      	bmi.n	8011b22 <_puts_r+0x36>
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	0598      	lsls	r0, r3, #22
 8011b1a:	d402      	bmi.n	8011b22 <_puts_r+0x36>
 8011b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b1e:	f000 fad3 	bl	80120c8 <__retarget_lock_acquire_recursive>
 8011b22:	89a3      	ldrh	r3, [r4, #12]
 8011b24:	0719      	lsls	r1, r3, #28
 8011b26:	d51d      	bpl.n	8011b64 <_puts_r+0x78>
 8011b28:	6923      	ldr	r3, [r4, #16]
 8011b2a:	b1db      	cbz	r3, 8011b64 <_puts_r+0x78>
 8011b2c:	3e01      	subs	r6, #1
 8011b2e:	68a3      	ldr	r3, [r4, #8]
 8011b30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b34:	3b01      	subs	r3, #1
 8011b36:	60a3      	str	r3, [r4, #8]
 8011b38:	bb39      	cbnz	r1, 8011b8a <_puts_r+0x9e>
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	da38      	bge.n	8011bb0 <_puts_r+0xc4>
 8011b3e:	4622      	mov	r2, r4
 8011b40:	210a      	movs	r1, #10
 8011b42:	4628      	mov	r0, r5
 8011b44:	f000 f848 	bl	8011bd8 <__swbuf_r>
 8011b48:	3001      	adds	r0, #1
 8011b4a:	d011      	beq.n	8011b70 <_puts_r+0x84>
 8011b4c:	250a      	movs	r5, #10
 8011b4e:	e011      	b.n	8011b74 <_puts_r+0x88>
 8011b50:	4b1b      	ldr	r3, [pc, #108]	; (8011bc0 <_puts_r+0xd4>)
 8011b52:	429c      	cmp	r4, r3
 8011b54:	d101      	bne.n	8011b5a <_puts_r+0x6e>
 8011b56:	68ac      	ldr	r4, [r5, #8]
 8011b58:	e7da      	b.n	8011b10 <_puts_r+0x24>
 8011b5a:	4b1a      	ldr	r3, [pc, #104]	; (8011bc4 <_puts_r+0xd8>)
 8011b5c:	429c      	cmp	r4, r3
 8011b5e:	bf08      	it	eq
 8011b60:	68ec      	ldreq	r4, [r5, #12]
 8011b62:	e7d5      	b.n	8011b10 <_puts_r+0x24>
 8011b64:	4621      	mov	r1, r4
 8011b66:	4628      	mov	r0, r5
 8011b68:	f000 f888 	bl	8011c7c <__swsetup_r>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d0dd      	beq.n	8011b2c <_puts_r+0x40>
 8011b70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b76:	07da      	lsls	r2, r3, #31
 8011b78:	d405      	bmi.n	8011b86 <_puts_r+0x9a>
 8011b7a:	89a3      	ldrh	r3, [r4, #12]
 8011b7c:	059b      	lsls	r3, r3, #22
 8011b7e:	d402      	bmi.n	8011b86 <_puts_r+0x9a>
 8011b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b82:	f000 faa2 	bl	80120ca <__retarget_lock_release_recursive>
 8011b86:	4628      	mov	r0, r5
 8011b88:	bd70      	pop	{r4, r5, r6, pc}
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	da04      	bge.n	8011b98 <_puts_r+0xac>
 8011b8e:	69a2      	ldr	r2, [r4, #24]
 8011b90:	429a      	cmp	r2, r3
 8011b92:	dc06      	bgt.n	8011ba2 <_puts_r+0xb6>
 8011b94:	290a      	cmp	r1, #10
 8011b96:	d004      	beq.n	8011ba2 <_puts_r+0xb6>
 8011b98:	6823      	ldr	r3, [r4, #0]
 8011b9a:	1c5a      	adds	r2, r3, #1
 8011b9c:	6022      	str	r2, [r4, #0]
 8011b9e:	7019      	strb	r1, [r3, #0]
 8011ba0:	e7c5      	b.n	8011b2e <_puts_r+0x42>
 8011ba2:	4622      	mov	r2, r4
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	f000 f817 	bl	8011bd8 <__swbuf_r>
 8011baa:	3001      	adds	r0, #1
 8011bac:	d1bf      	bne.n	8011b2e <_puts_r+0x42>
 8011bae:	e7df      	b.n	8011b70 <_puts_r+0x84>
 8011bb0:	6823      	ldr	r3, [r4, #0]
 8011bb2:	250a      	movs	r5, #10
 8011bb4:	1c5a      	adds	r2, r3, #1
 8011bb6:	6022      	str	r2, [r4, #0]
 8011bb8:	701d      	strb	r5, [r3, #0]
 8011bba:	e7db      	b.n	8011b74 <_puts_r+0x88>
 8011bbc:	080143c8 	.word	0x080143c8
 8011bc0:	080143e8 	.word	0x080143e8
 8011bc4:	080143a8 	.word	0x080143a8

08011bc8 <puts>:
 8011bc8:	4b02      	ldr	r3, [pc, #8]	; (8011bd4 <puts+0xc>)
 8011bca:	4601      	mov	r1, r0
 8011bcc:	6818      	ldr	r0, [r3, #0]
 8011bce:	f7ff bf8d 	b.w	8011aec <_puts_r>
 8011bd2:	bf00      	nop
 8011bd4:	20000160 	.word	0x20000160

08011bd8 <__swbuf_r>:
 8011bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bda:	460e      	mov	r6, r1
 8011bdc:	4614      	mov	r4, r2
 8011bde:	4605      	mov	r5, r0
 8011be0:	b118      	cbz	r0, 8011bea <__swbuf_r+0x12>
 8011be2:	6983      	ldr	r3, [r0, #24]
 8011be4:	b90b      	cbnz	r3, 8011bea <__swbuf_r+0x12>
 8011be6:	f000 f9d1 	bl	8011f8c <__sinit>
 8011bea:	4b21      	ldr	r3, [pc, #132]	; (8011c70 <__swbuf_r+0x98>)
 8011bec:	429c      	cmp	r4, r3
 8011bee:	d12b      	bne.n	8011c48 <__swbuf_r+0x70>
 8011bf0:	686c      	ldr	r4, [r5, #4]
 8011bf2:	69a3      	ldr	r3, [r4, #24]
 8011bf4:	60a3      	str	r3, [r4, #8]
 8011bf6:	89a3      	ldrh	r3, [r4, #12]
 8011bf8:	071a      	lsls	r2, r3, #28
 8011bfa:	d52f      	bpl.n	8011c5c <__swbuf_r+0x84>
 8011bfc:	6923      	ldr	r3, [r4, #16]
 8011bfe:	b36b      	cbz	r3, 8011c5c <__swbuf_r+0x84>
 8011c00:	6923      	ldr	r3, [r4, #16]
 8011c02:	6820      	ldr	r0, [r4, #0]
 8011c04:	1ac0      	subs	r0, r0, r3
 8011c06:	6963      	ldr	r3, [r4, #20]
 8011c08:	b2f6      	uxtb	r6, r6
 8011c0a:	4283      	cmp	r3, r0
 8011c0c:	4637      	mov	r7, r6
 8011c0e:	dc04      	bgt.n	8011c1a <__swbuf_r+0x42>
 8011c10:	4621      	mov	r1, r4
 8011c12:	4628      	mov	r0, r5
 8011c14:	f000 f926 	bl	8011e64 <_fflush_r>
 8011c18:	bb30      	cbnz	r0, 8011c68 <__swbuf_r+0x90>
 8011c1a:	68a3      	ldr	r3, [r4, #8]
 8011c1c:	3b01      	subs	r3, #1
 8011c1e:	60a3      	str	r3, [r4, #8]
 8011c20:	6823      	ldr	r3, [r4, #0]
 8011c22:	1c5a      	adds	r2, r3, #1
 8011c24:	6022      	str	r2, [r4, #0]
 8011c26:	701e      	strb	r6, [r3, #0]
 8011c28:	6963      	ldr	r3, [r4, #20]
 8011c2a:	3001      	adds	r0, #1
 8011c2c:	4283      	cmp	r3, r0
 8011c2e:	d004      	beq.n	8011c3a <__swbuf_r+0x62>
 8011c30:	89a3      	ldrh	r3, [r4, #12]
 8011c32:	07db      	lsls	r3, r3, #31
 8011c34:	d506      	bpl.n	8011c44 <__swbuf_r+0x6c>
 8011c36:	2e0a      	cmp	r6, #10
 8011c38:	d104      	bne.n	8011c44 <__swbuf_r+0x6c>
 8011c3a:	4621      	mov	r1, r4
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f000 f911 	bl	8011e64 <_fflush_r>
 8011c42:	b988      	cbnz	r0, 8011c68 <__swbuf_r+0x90>
 8011c44:	4638      	mov	r0, r7
 8011c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c48:	4b0a      	ldr	r3, [pc, #40]	; (8011c74 <__swbuf_r+0x9c>)
 8011c4a:	429c      	cmp	r4, r3
 8011c4c:	d101      	bne.n	8011c52 <__swbuf_r+0x7a>
 8011c4e:	68ac      	ldr	r4, [r5, #8]
 8011c50:	e7cf      	b.n	8011bf2 <__swbuf_r+0x1a>
 8011c52:	4b09      	ldr	r3, [pc, #36]	; (8011c78 <__swbuf_r+0xa0>)
 8011c54:	429c      	cmp	r4, r3
 8011c56:	bf08      	it	eq
 8011c58:	68ec      	ldreq	r4, [r5, #12]
 8011c5a:	e7ca      	b.n	8011bf2 <__swbuf_r+0x1a>
 8011c5c:	4621      	mov	r1, r4
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f000 f80c 	bl	8011c7c <__swsetup_r>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d0cb      	beq.n	8011c00 <__swbuf_r+0x28>
 8011c68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c6c:	e7ea      	b.n	8011c44 <__swbuf_r+0x6c>
 8011c6e:	bf00      	nop
 8011c70:	080143c8 	.word	0x080143c8
 8011c74:	080143e8 	.word	0x080143e8
 8011c78:	080143a8 	.word	0x080143a8

08011c7c <__swsetup_r>:
 8011c7c:	4b32      	ldr	r3, [pc, #200]	; (8011d48 <__swsetup_r+0xcc>)
 8011c7e:	b570      	push	{r4, r5, r6, lr}
 8011c80:	681d      	ldr	r5, [r3, #0]
 8011c82:	4606      	mov	r6, r0
 8011c84:	460c      	mov	r4, r1
 8011c86:	b125      	cbz	r5, 8011c92 <__swsetup_r+0x16>
 8011c88:	69ab      	ldr	r3, [r5, #24]
 8011c8a:	b913      	cbnz	r3, 8011c92 <__swsetup_r+0x16>
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f000 f97d 	bl	8011f8c <__sinit>
 8011c92:	4b2e      	ldr	r3, [pc, #184]	; (8011d4c <__swsetup_r+0xd0>)
 8011c94:	429c      	cmp	r4, r3
 8011c96:	d10f      	bne.n	8011cb8 <__swsetup_r+0x3c>
 8011c98:	686c      	ldr	r4, [r5, #4]
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ca0:	0719      	lsls	r1, r3, #28
 8011ca2:	d42c      	bmi.n	8011cfe <__swsetup_r+0x82>
 8011ca4:	06dd      	lsls	r5, r3, #27
 8011ca6:	d411      	bmi.n	8011ccc <__swsetup_r+0x50>
 8011ca8:	2309      	movs	r3, #9
 8011caa:	6033      	str	r3, [r6, #0]
 8011cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011cb0:	81a3      	strh	r3, [r4, #12]
 8011cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cb6:	e03e      	b.n	8011d36 <__swsetup_r+0xba>
 8011cb8:	4b25      	ldr	r3, [pc, #148]	; (8011d50 <__swsetup_r+0xd4>)
 8011cba:	429c      	cmp	r4, r3
 8011cbc:	d101      	bne.n	8011cc2 <__swsetup_r+0x46>
 8011cbe:	68ac      	ldr	r4, [r5, #8]
 8011cc0:	e7eb      	b.n	8011c9a <__swsetup_r+0x1e>
 8011cc2:	4b24      	ldr	r3, [pc, #144]	; (8011d54 <__swsetup_r+0xd8>)
 8011cc4:	429c      	cmp	r4, r3
 8011cc6:	bf08      	it	eq
 8011cc8:	68ec      	ldreq	r4, [r5, #12]
 8011cca:	e7e6      	b.n	8011c9a <__swsetup_r+0x1e>
 8011ccc:	0758      	lsls	r0, r3, #29
 8011cce:	d512      	bpl.n	8011cf6 <__swsetup_r+0x7a>
 8011cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cd2:	b141      	cbz	r1, 8011ce6 <__swsetup_r+0x6a>
 8011cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cd8:	4299      	cmp	r1, r3
 8011cda:	d002      	beq.n	8011ce2 <__swsetup_r+0x66>
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f000 fa59 	bl	8012194 <_free_r>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8011ce6:	89a3      	ldrh	r3, [r4, #12]
 8011ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011cec:	81a3      	strh	r3, [r4, #12]
 8011cee:	2300      	movs	r3, #0
 8011cf0:	6063      	str	r3, [r4, #4]
 8011cf2:	6923      	ldr	r3, [r4, #16]
 8011cf4:	6023      	str	r3, [r4, #0]
 8011cf6:	89a3      	ldrh	r3, [r4, #12]
 8011cf8:	f043 0308 	orr.w	r3, r3, #8
 8011cfc:	81a3      	strh	r3, [r4, #12]
 8011cfe:	6923      	ldr	r3, [r4, #16]
 8011d00:	b94b      	cbnz	r3, 8011d16 <__swsetup_r+0x9a>
 8011d02:	89a3      	ldrh	r3, [r4, #12]
 8011d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d0c:	d003      	beq.n	8011d16 <__swsetup_r+0x9a>
 8011d0e:	4621      	mov	r1, r4
 8011d10:	4630      	mov	r0, r6
 8011d12:	f000 f9ff 	bl	8012114 <__smakebuf_r>
 8011d16:	89a0      	ldrh	r0, [r4, #12]
 8011d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d1c:	f010 0301 	ands.w	r3, r0, #1
 8011d20:	d00a      	beq.n	8011d38 <__swsetup_r+0xbc>
 8011d22:	2300      	movs	r3, #0
 8011d24:	60a3      	str	r3, [r4, #8]
 8011d26:	6963      	ldr	r3, [r4, #20]
 8011d28:	425b      	negs	r3, r3
 8011d2a:	61a3      	str	r3, [r4, #24]
 8011d2c:	6923      	ldr	r3, [r4, #16]
 8011d2e:	b943      	cbnz	r3, 8011d42 <__swsetup_r+0xc6>
 8011d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d34:	d1ba      	bne.n	8011cac <__swsetup_r+0x30>
 8011d36:	bd70      	pop	{r4, r5, r6, pc}
 8011d38:	0781      	lsls	r1, r0, #30
 8011d3a:	bf58      	it	pl
 8011d3c:	6963      	ldrpl	r3, [r4, #20]
 8011d3e:	60a3      	str	r3, [r4, #8]
 8011d40:	e7f4      	b.n	8011d2c <__swsetup_r+0xb0>
 8011d42:	2000      	movs	r0, #0
 8011d44:	e7f7      	b.n	8011d36 <__swsetup_r+0xba>
 8011d46:	bf00      	nop
 8011d48:	20000160 	.word	0x20000160
 8011d4c:	080143c8 	.word	0x080143c8
 8011d50:	080143e8 	.word	0x080143e8
 8011d54:	080143a8 	.word	0x080143a8

08011d58 <__sflush_r>:
 8011d58:	898a      	ldrh	r2, [r1, #12]
 8011d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d5e:	4605      	mov	r5, r0
 8011d60:	0710      	lsls	r0, r2, #28
 8011d62:	460c      	mov	r4, r1
 8011d64:	d458      	bmi.n	8011e18 <__sflush_r+0xc0>
 8011d66:	684b      	ldr	r3, [r1, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	dc05      	bgt.n	8011d78 <__sflush_r+0x20>
 8011d6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	dc02      	bgt.n	8011d78 <__sflush_r+0x20>
 8011d72:	2000      	movs	r0, #0
 8011d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d7a:	2e00      	cmp	r6, #0
 8011d7c:	d0f9      	beq.n	8011d72 <__sflush_r+0x1a>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d84:	682f      	ldr	r7, [r5, #0]
 8011d86:	602b      	str	r3, [r5, #0]
 8011d88:	d032      	beq.n	8011df0 <__sflush_r+0x98>
 8011d8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	075a      	lsls	r2, r3, #29
 8011d90:	d505      	bpl.n	8011d9e <__sflush_r+0x46>
 8011d92:	6863      	ldr	r3, [r4, #4]
 8011d94:	1ac0      	subs	r0, r0, r3
 8011d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d98:	b10b      	cbz	r3, 8011d9e <__sflush_r+0x46>
 8011d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d9c:	1ac0      	subs	r0, r0, r3
 8011d9e:	2300      	movs	r3, #0
 8011da0:	4602      	mov	r2, r0
 8011da2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011da4:	6a21      	ldr	r1, [r4, #32]
 8011da6:	4628      	mov	r0, r5
 8011da8:	47b0      	blx	r6
 8011daa:	1c43      	adds	r3, r0, #1
 8011dac:	89a3      	ldrh	r3, [r4, #12]
 8011dae:	d106      	bne.n	8011dbe <__sflush_r+0x66>
 8011db0:	6829      	ldr	r1, [r5, #0]
 8011db2:	291d      	cmp	r1, #29
 8011db4:	d82c      	bhi.n	8011e10 <__sflush_r+0xb8>
 8011db6:	4a2a      	ldr	r2, [pc, #168]	; (8011e60 <__sflush_r+0x108>)
 8011db8:	40ca      	lsrs	r2, r1
 8011dba:	07d6      	lsls	r6, r2, #31
 8011dbc:	d528      	bpl.n	8011e10 <__sflush_r+0xb8>
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	6062      	str	r2, [r4, #4]
 8011dc2:	04d9      	lsls	r1, r3, #19
 8011dc4:	6922      	ldr	r2, [r4, #16]
 8011dc6:	6022      	str	r2, [r4, #0]
 8011dc8:	d504      	bpl.n	8011dd4 <__sflush_r+0x7c>
 8011dca:	1c42      	adds	r2, r0, #1
 8011dcc:	d101      	bne.n	8011dd2 <__sflush_r+0x7a>
 8011dce:	682b      	ldr	r3, [r5, #0]
 8011dd0:	b903      	cbnz	r3, 8011dd4 <__sflush_r+0x7c>
 8011dd2:	6560      	str	r0, [r4, #84]	; 0x54
 8011dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dd6:	602f      	str	r7, [r5, #0]
 8011dd8:	2900      	cmp	r1, #0
 8011dda:	d0ca      	beq.n	8011d72 <__sflush_r+0x1a>
 8011ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011de0:	4299      	cmp	r1, r3
 8011de2:	d002      	beq.n	8011dea <__sflush_r+0x92>
 8011de4:	4628      	mov	r0, r5
 8011de6:	f000 f9d5 	bl	8012194 <_free_r>
 8011dea:	2000      	movs	r0, #0
 8011dec:	6360      	str	r0, [r4, #52]	; 0x34
 8011dee:	e7c1      	b.n	8011d74 <__sflush_r+0x1c>
 8011df0:	6a21      	ldr	r1, [r4, #32]
 8011df2:	2301      	movs	r3, #1
 8011df4:	4628      	mov	r0, r5
 8011df6:	47b0      	blx	r6
 8011df8:	1c41      	adds	r1, r0, #1
 8011dfa:	d1c7      	bne.n	8011d8c <__sflush_r+0x34>
 8011dfc:	682b      	ldr	r3, [r5, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d0c4      	beq.n	8011d8c <__sflush_r+0x34>
 8011e02:	2b1d      	cmp	r3, #29
 8011e04:	d001      	beq.n	8011e0a <__sflush_r+0xb2>
 8011e06:	2b16      	cmp	r3, #22
 8011e08:	d101      	bne.n	8011e0e <__sflush_r+0xb6>
 8011e0a:	602f      	str	r7, [r5, #0]
 8011e0c:	e7b1      	b.n	8011d72 <__sflush_r+0x1a>
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e14:	81a3      	strh	r3, [r4, #12]
 8011e16:	e7ad      	b.n	8011d74 <__sflush_r+0x1c>
 8011e18:	690f      	ldr	r7, [r1, #16]
 8011e1a:	2f00      	cmp	r7, #0
 8011e1c:	d0a9      	beq.n	8011d72 <__sflush_r+0x1a>
 8011e1e:	0793      	lsls	r3, r2, #30
 8011e20:	680e      	ldr	r6, [r1, #0]
 8011e22:	bf08      	it	eq
 8011e24:	694b      	ldreq	r3, [r1, #20]
 8011e26:	600f      	str	r7, [r1, #0]
 8011e28:	bf18      	it	ne
 8011e2a:	2300      	movne	r3, #0
 8011e2c:	eba6 0807 	sub.w	r8, r6, r7
 8011e30:	608b      	str	r3, [r1, #8]
 8011e32:	f1b8 0f00 	cmp.w	r8, #0
 8011e36:	dd9c      	ble.n	8011d72 <__sflush_r+0x1a>
 8011e38:	6a21      	ldr	r1, [r4, #32]
 8011e3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e3c:	4643      	mov	r3, r8
 8011e3e:	463a      	mov	r2, r7
 8011e40:	4628      	mov	r0, r5
 8011e42:	47b0      	blx	r6
 8011e44:	2800      	cmp	r0, #0
 8011e46:	dc06      	bgt.n	8011e56 <__sflush_r+0xfe>
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e4e:	81a3      	strh	r3, [r4, #12]
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e54:	e78e      	b.n	8011d74 <__sflush_r+0x1c>
 8011e56:	4407      	add	r7, r0
 8011e58:	eba8 0800 	sub.w	r8, r8, r0
 8011e5c:	e7e9      	b.n	8011e32 <__sflush_r+0xda>
 8011e5e:	bf00      	nop
 8011e60:	20400001 	.word	0x20400001

08011e64 <_fflush_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	690b      	ldr	r3, [r1, #16]
 8011e68:	4605      	mov	r5, r0
 8011e6a:	460c      	mov	r4, r1
 8011e6c:	b913      	cbnz	r3, 8011e74 <_fflush_r+0x10>
 8011e6e:	2500      	movs	r5, #0
 8011e70:	4628      	mov	r0, r5
 8011e72:	bd38      	pop	{r3, r4, r5, pc}
 8011e74:	b118      	cbz	r0, 8011e7e <_fflush_r+0x1a>
 8011e76:	6983      	ldr	r3, [r0, #24]
 8011e78:	b90b      	cbnz	r3, 8011e7e <_fflush_r+0x1a>
 8011e7a:	f000 f887 	bl	8011f8c <__sinit>
 8011e7e:	4b14      	ldr	r3, [pc, #80]	; (8011ed0 <_fflush_r+0x6c>)
 8011e80:	429c      	cmp	r4, r3
 8011e82:	d11b      	bne.n	8011ebc <_fflush_r+0x58>
 8011e84:	686c      	ldr	r4, [r5, #4]
 8011e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d0ef      	beq.n	8011e6e <_fflush_r+0xa>
 8011e8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e90:	07d0      	lsls	r0, r2, #31
 8011e92:	d404      	bmi.n	8011e9e <_fflush_r+0x3a>
 8011e94:	0599      	lsls	r1, r3, #22
 8011e96:	d402      	bmi.n	8011e9e <_fflush_r+0x3a>
 8011e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e9a:	f000 f915 	bl	80120c8 <__retarget_lock_acquire_recursive>
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	f7ff ff59 	bl	8011d58 <__sflush_r>
 8011ea6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ea8:	07da      	lsls	r2, r3, #31
 8011eaa:	4605      	mov	r5, r0
 8011eac:	d4e0      	bmi.n	8011e70 <_fflush_r+0xc>
 8011eae:	89a3      	ldrh	r3, [r4, #12]
 8011eb0:	059b      	lsls	r3, r3, #22
 8011eb2:	d4dd      	bmi.n	8011e70 <_fflush_r+0xc>
 8011eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011eb6:	f000 f908 	bl	80120ca <__retarget_lock_release_recursive>
 8011eba:	e7d9      	b.n	8011e70 <_fflush_r+0xc>
 8011ebc:	4b05      	ldr	r3, [pc, #20]	; (8011ed4 <_fflush_r+0x70>)
 8011ebe:	429c      	cmp	r4, r3
 8011ec0:	d101      	bne.n	8011ec6 <_fflush_r+0x62>
 8011ec2:	68ac      	ldr	r4, [r5, #8]
 8011ec4:	e7df      	b.n	8011e86 <_fflush_r+0x22>
 8011ec6:	4b04      	ldr	r3, [pc, #16]	; (8011ed8 <_fflush_r+0x74>)
 8011ec8:	429c      	cmp	r4, r3
 8011eca:	bf08      	it	eq
 8011ecc:	68ec      	ldreq	r4, [r5, #12]
 8011ece:	e7da      	b.n	8011e86 <_fflush_r+0x22>
 8011ed0:	080143c8 	.word	0x080143c8
 8011ed4:	080143e8 	.word	0x080143e8
 8011ed8:	080143a8 	.word	0x080143a8

08011edc <std>:
 8011edc:	2300      	movs	r3, #0
 8011ede:	b510      	push	{r4, lr}
 8011ee0:	4604      	mov	r4, r0
 8011ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8011ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011eea:	6083      	str	r3, [r0, #8]
 8011eec:	8181      	strh	r1, [r0, #12]
 8011eee:	6643      	str	r3, [r0, #100]	; 0x64
 8011ef0:	81c2      	strh	r2, [r0, #14]
 8011ef2:	6183      	str	r3, [r0, #24]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	2208      	movs	r2, #8
 8011ef8:	305c      	adds	r0, #92	; 0x5c
 8011efa:	f7ff fdd7 	bl	8011aac <memset>
 8011efe:	4b05      	ldr	r3, [pc, #20]	; (8011f14 <std+0x38>)
 8011f00:	6263      	str	r3, [r4, #36]	; 0x24
 8011f02:	4b05      	ldr	r3, [pc, #20]	; (8011f18 <std+0x3c>)
 8011f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f06:	4b05      	ldr	r3, [pc, #20]	; (8011f1c <std+0x40>)
 8011f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f0a:	4b05      	ldr	r3, [pc, #20]	; (8011f20 <std+0x44>)
 8011f0c:	6224      	str	r4, [r4, #32]
 8011f0e:	6323      	str	r3, [r4, #48]	; 0x30
 8011f10:	bd10      	pop	{r4, pc}
 8011f12:	bf00      	nop
 8011f14:	080128e5 	.word	0x080128e5
 8011f18:	08012907 	.word	0x08012907
 8011f1c:	0801293f 	.word	0x0801293f
 8011f20:	08012963 	.word	0x08012963

08011f24 <_cleanup_r>:
 8011f24:	4901      	ldr	r1, [pc, #4]	; (8011f2c <_cleanup_r+0x8>)
 8011f26:	f000 b8af 	b.w	8012088 <_fwalk_reent>
 8011f2a:	bf00      	nop
 8011f2c:	08011e65 	.word	0x08011e65

08011f30 <__sfmoreglue>:
 8011f30:	b570      	push	{r4, r5, r6, lr}
 8011f32:	1e4a      	subs	r2, r1, #1
 8011f34:	2568      	movs	r5, #104	; 0x68
 8011f36:	4355      	muls	r5, r2
 8011f38:	460e      	mov	r6, r1
 8011f3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f3e:	f000 f979 	bl	8012234 <_malloc_r>
 8011f42:	4604      	mov	r4, r0
 8011f44:	b140      	cbz	r0, 8011f58 <__sfmoreglue+0x28>
 8011f46:	2100      	movs	r1, #0
 8011f48:	e9c0 1600 	strd	r1, r6, [r0]
 8011f4c:	300c      	adds	r0, #12
 8011f4e:	60a0      	str	r0, [r4, #8]
 8011f50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f54:	f7ff fdaa 	bl	8011aac <memset>
 8011f58:	4620      	mov	r0, r4
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}

08011f5c <__sfp_lock_acquire>:
 8011f5c:	4801      	ldr	r0, [pc, #4]	; (8011f64 <__sfp_lock_acquire+0x8>)
 8011f5e:	f000 b8b3 	b.w	80120c8 <__retarget_lock_acquire_recursive>
 8011f62:	bf00      	nop
 8011f64:	2001054c 	.word	0x2001054c

08011f68 <__sfp_lock_release>:
 8011f68:	4801      	ldr	r0, [pc, #4]	; (8011f70 <__sfp_lock_release+0x8>)
 8011f6a:	f000 b8ae 	b.w	80120ca <__retarget_lock_release_recursive>
 8011f6e:	bf00      	nop
 8011f70:	2001054c 	.word	0x2001054c

08011f74 <__sinit_lock_acquire>:
 8011f74:	4801      	ldr	r0, [pc, #4]	; (8011f7c <__sinit_lock_acquire+0x8>)
 8011f76:	f000 b8a7 	b.w	80120c8 <__retarget_lock_acquire_recursive>
 8011f7a:	bf00      	nop
 8011f7c:	20010547 	.word	0x20010547

08011f80 <__sinit_lock_release>:
 8011f80:	4801      	ldr	r0, [pc, #4]	; (8011f88 <__sinit_lock_release+0x8>)
 8011f82:	f000 b8a2 	b.w	80120ca <__retarget_lock_release_recursive>
 8011f86:	bf00      	nop
 8011f88:	20010547 	.word	0x20010547

08011f8c <__sinit>:
 8011f8c:	b510      	push	{r4, lr}
 8011f8e:	4604      	mov	r4, r0
 8011f90:	f7ff fff0 	bl	8011f74 <__sinit_lock_acquire>
 8011f94:	69a3      	ldr	r3, [r4, #24]
 8011f96:	b11b      	cbz	r3, 8011fa0 <__sinit+0x14>
 8011f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f9c:	f7ff bff0 	b.w	8011f80 <__sinit_lock_release>
 8011fa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011fa4:	6523      	str	r3, [r4, #80]	; 0x50
 8011fa6:	4b13      	ldr	r3, [pc, #76]	; (8011ff4 <__sinit+0x68>)
 8011fa8:	4a13      	ldr	r2, [pc, #76]	; (8011ff8 <__sinit+0x6c>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	62a2      	str	r2, [r4, #40]	; 0x28
 8011fae:	42a3      	cmp	r3, r4
 8011fb0:	bf04      	itt	eq
 8011fb2:	2301      	moveq	r3, #1
 8011fb4:	61a3      	streq	r3, [r4, #24]
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 f820 	bl	8011ffc <__sfp>
 8011fbc:	6060      	str	r0, [r4, #4]
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f000 f81c 	bl	8011ffc <__sfp>
 8011fc4:	60a0      	str	r0, [r4, #8]
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f000 f818 	bl	8011ffc <__sfp>
 8011fcc:	2200      	movs	r2, #0
 8011fce:	60e0      	str	r0, [r4, #12]
 8011fd0:	2104      	movs	r1, #4
 8011fd2:	6860      	ldr	r0, [r4, #4]
 8011fd4:	f7ff ff82 	bl	8011edc <std>
 8011fd8:	68a0      	ldr	r0, [r4, #8]
 8011fda:	2201      	movs	r2, #1
 8011fdc:	2109      	movs	r1, #9
 8011fde:	f7ff ff7d 	bl	8011edc <std>
 8011fe2:	68e0      	ldr	r0, [r4, #12]
 8011fe4:	2202      	movs	r2, #2
 8011fe6:	2112      	movs	r1, #18
 8011fe8:	f7ff ff78 	bl	8011edc <std>
 8011fec:	2301      	movs	r3, #1
 8011fee:	61a3      	str	r3, [r4, #24]
 8011ff0:	e7d2      	b.n	8011f98 <__sinit+0xc>
 8011ff2:	bf00      	nop
 8011ff4:	080143a4 	.word	0x080143a4
 8011ff8:	08011f25 	.word	0x08011f25

08011ffc <__sfp>:
 8011ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ffe:	4607      	mov	r7, r0
 8012000:	f7ff ffac 	bl	8011f5c <__sfp_lock_acquire>
 8012004:	4b1e      	ldr	r3, [pc, #120]	; (8012080 <__sfp+0x84>)
 8012006:	681e      	ldr	r6, [r3, #0]
 8012008:	69b3      	ldr	r3, [r6, #24]
 801200a:	b913      	cbnz	r3, 8012012 <__sfp+0x16>
 801200c:	4630      	mov	r0, r6
 801200e:	f7ff ffbd 	bl	8011f8c <__sinit>
 8012012:	3648      	adds	r6, #72	; 0x48
 8012014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012018:	3b01      	subs	r3, #1
 801201a:	d503      	bpl.n	8012024 <__sfp+0x28>
 801201c:	6833      	ldr	r3, [r6, #0]
 801201e:	b30b      	cbz	r3, 8012064 <__sfp+0x68>
 8012020:	6836      	ldr	r6, [r6, #0]
 8012022:	e7f7      	b.n	8012014 <__sfp+0x18>
 8012024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012028:	b9d5      	cbnz	r5, 8012060 <__sfp+0x64>
 801202a:	4b16      	ldr	r3, [pc, #88]	; (8012084 <__sfp+0x88>)
 801202c:	60e3      	str	r3, [r4, #12]
 801202e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012032:	6665      	str	r5, [r4, #100]	; 0x64
 8012034:	f000 f847 	bl	80120c6 <__retarget_lock_init_recursive>
 8012038:	f7ff ff96 	bl	8011f68 <__sfp_lock_release>
 801203c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012044:	6025      	str	r5, [r4, #0]
 8012046:	61a5      	str	r5, [r4, #24]
 8012048:	2208      	movs	r2, #8
 801204a:	4629      	mov	r1, r5
 801204c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012050:	f7ff fd2c 	bl	8011aac <memset>
 8012054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801205c:	4620      	mov	r0, r4
 801205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012060:	3468      	adds	r4, #104	; 0x68
 8012062:	e7d9      	b.n	8012018 <__sfp+0x1c>
 8012064:	2104      	movs	r1, #4
 8012066:	4638      	mov	r0, r7
 8012068:	f7ff ff62 	bl	8011f30 <__sfmoreglue>
 801206c:	4604      	mov	r4, r0
 801206e:	6030      	str	r0, [r6, #0]
 8012070:	2800      	cmp	r0, #0
 8012072:	d1d5      	bne.n	8012020 <__sfp+0x24>
 8012074:	f7ff ff78 	bl	8011f68 <__sfp_lock_release>
 8012078:	230c      	movs	r3, #12
 801207a:	603b      	str	r3, [r7, #0]
 801207c:	e7ee      	b.n	801205c <__sfp+0x60>
 801207e:	bf00      	nop
 8012080:	080143a4 	.word	0x080143a4
 8012084:	ffff0001 	.word	0xffff0001

08012088 <_fwalk_reent>:
 8012088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801208c:	4606      	mov	r6, r0
 801208e:	4688      	mov	r8, r1
 8012090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012094:	2700      	movs	r7, #0
 8012096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801209a:	f1b9 0901 	subs.w	r9, r9, #1
 801209e:	d505      	bpl.n	80120ac <_fwalk_reent+0x24>
 80120a0:	6824      	ldr	r4, [r4, #0]
 80120a2:	2c00      	cmp	r4, #0
 80120a4:	d1f7      	bne.n	8012096 <_fwalk_reent+0xe>
 80120a6:	4638      	mov	r0, r7
 80120a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120ac:	89ab      	ldrh	r3, [r5, #12]
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	d907      	bls.n	80120c2 <_fwalk_reent+0x3a>
 80120b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120b6:	3301      	adds	r3, #1
 80120b8:	d003      	beq.n	80120c2 <_fwalk_reent+0x3a>
 80120ba:	4629      	mov	r1, r5
 80120bc:	4630      	mov	r0, r6
 80120be:	47c0      	blx	r8
 80120c0:	4307      	orrs	r7, r0
 80120c2:	3568      	adds	r5, #104	; 0x68
 80120c4:	e7e9      	b.n	801209a <_fwalk_reent+0x12>

080120c6 <__retarget_lock_init_recursive>:
 80120c6:	4770      	bx	lr

080120c8 <__retarget_lock_acquire_recursive>:
 80120c8:	4770      	bx	lr

080120ca <__retarget_lock_release_recursive>:
 80120ca:	4770      	bx	lr

080120cc <__swhatbuf_r>:
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	460e      	mov	r6, r1
 80120d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d4:	2900      	cmp	r1, #0
 80120d6:	b096      	sub	sp, #88	; 0x58
 80120d8:	4614      	mov	r4, r2
 80120da:	461d      	mov	r5, r3
 80120dc:	da07      	bge.n	80120ee <__swhatbuf_r+0x22>
 80120de:	2300      	movs	r3, #0
 80120e0:	602b      	str	r3, [r5, #0]
 80120e2:	89b3      	ldrh	r3, [r6, #12]
 80120e4:	061a      	lsls	r2, r3, #24
 80120e6:	d410      	bmi.n	801210a <__swhatbuf_r+0x3e>
 80120e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120ec:	e00e      	b.n	801210c <__swhatbuf_r+0x40>
 80120ee:	466a      	mov	r2, sp
 80120f0:	f000 fc5e 	bl	80129b0 <_fstat_r>
 80120f4:	2800      	cmp	r0, #0
 80120f6:	dbf2      	blt.n	80120de <__swhatbuf_r+0x12>
 80120f8:	9a01      	ldr	r2, [sp, #4]
 80120fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80120fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012102:	425a      	negs	r2, r3
 8012104:	415a      	adcs	r2, r3
 8012106:	602a      	str	r2, [r5, #0]
 8012108:	e7ee      	b.n	80120e8 <__swhatbuf_r+0x1c>
 801210a:	2340      	movs	r3, #64	; 0x40
 801210c:	2000      	movs	r0, #0
 801210e:	6023      	str	r3, [r4, #0]
 8012110:	b016      	add	sp, #88	; 0x58
 8012112:	bd70      	pop	{r4, r5, r6, pc}

08012114 <__smakebuf_r>:
 8012114:	898b      	ldrh	r3, [r1, #12]
 8012116:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012118:	079d      	lsls	r5, r3, #30
 801211a:	4606      	mov	r6, r0
 801211c:	460c      	mov	r4, r1
 801211e:	d507      	bpl.n	8012130 <__smakebuf_r+0x1c>
 8012120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012124:	6023      	str	r3, [r4, #0]
 8012126:	6123      	str	r3, [r4, #16]
 8012128:	2301      	movs	r3, #1
 801212a:	6163      	str	r3, [r4, #20]
 801212c:	b002      	add	sp, #8
 801212e:	bd70      	pop	{r4, r5, r6, pc}
 8012130:	ab01      	add	r3, sp, #4
 8012132:	466a      	mov	r2, sp
 8012134:	f7ff ffca 	bl	80120cc <__swhatbuf_r>
 8012138:	9900      	ldr	r1, [sp, #0]
 801213a:	4605      	mov	r5, r0
 801213c:	4630      	mov	r0, r6
 801213e:	f000 f879 	bl	8012234 <_malloc_r>
 8012142:	b948      	cbnz	r0, 8012158 <__smakebuf_r+0x44>
 8012144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012148:	059a      	lsls	r2, r3, #22
 801214a:	d4ef      	bmi.n	801212c <__smakebuf_r+0x18>
 801214c:	f023 0303 	bic.w	r3, r3, #3
 8012150:	f043 0302 	orr.w	r3, r3, #2
 8012154:	81a3      	strh	r3, [r4, #12]
 8012156:	e7e3      	b.n	8012120 <__smakebuf_r+0xc>
 8012158:	4b0d      	ldr	r3, [pc, #52]	; (8012190 <__smakebuf_r+0x7c>)
 801215a:	62b3      	str	r3, [r6, #40]	; 0x28
 801215c:	89a3      	ldrh	r3, [r4, #12]
 801215e:	6020      	str	r0, [r4, #0]
 8012160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012164:	81a3      	strh	r3, [r4, #12]
 8012166:	9b00      	ldr	r3, [sp, #0]
 8012168:	6163      	str	r3, [r4, #20]
 801216a:	9b01      	ldr	r3, [sp, #4]
 801216c:	6120      	str	r0, [r4, #16]
 801216e:	b15b      	cbz	r3, 8012188 <__smakebuf_r+0x74>
 8012170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012174:	4630      	mov	r0, r6
 8012176:	f000 fc2d 	bl	80129d4 <_isatty_r>
 801217a:	b128      	cbz	r0, 8012188 <__smakebuf_r+0x74>
 801217c:	89a3      	ldrh	r3, [r4, #12]
 801217e:	f023 0303 	bic.w	r3, r3, #3
 8012182:	f043 0301 	orr.w	r3, r3, #1
 8012186:	81a3      	strh	r3, [r4, #12]
 8012188:	89a0      	ldrh	r0, [r4, #12]
 801218a:	4305      	orrs	r5, r0
 801218c:	81a5      	strh	r5, [r4, #12]
 801218e:	e7cd      	b.n	801212c <__smakebuf_r+0x18>
 8012190:	08011f25 	.word	0x08011f25

08012194 <_free_r>:
 8012194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012196:	2900      	cmp	r1, #0
 8012198:	d048      	beq.n	801222c <_free_r+0x98>
 801219a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801219e:	9001      	str	r0, [sp, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f1a1 0404 	sub.w	r4, r1, #4
 80121a6:	bfb8      	it	lt
 80121a8:	18e4      	addlt	r4, r4, r3
 80121aa:	f000 fc35 	bl	8012a18 <__malloc_lock>
 80121ae:	4a20      	ldr	r2, [pc, #128]	; (8012230 <_free_r+0x9c>)
 80121b0:	9801      	ldr	r0, [sp, #4]
 80121b2:	6813      	ldr	r3, [r2, #0]
 80121b4:	4615      	mov	r5, r2
 80121b6:	b933      	cbnz	r3, 80121c6 <_free_r+0x32>
 80121b8:	6063      	str	r3, [r4, #4]
 80121ba:	6014      	str	r4, [r2, #0]
 80121bc:	b003      	add	sp, #12
 80121be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121c2:	f000 bc2f 	b.w	8012a24 <__malloc_unlock>
 80121c6:	42a3      	cmp	r3, r4
 80121c8:	d90b      	bls.n	80121e2 <_free_r+0x4e>
 80121ca:	6821      	ldr	r1, [r4, #0]
 80121cc:	1862      	adds	r2, r4, r1
 80121ce:	4293      	cmp	r3, r2
 80121d0:	bf04      	itt	eq
 80121d2:	681a      	ldreq	r2, [r3, #0]
 80121d4:	685b      	ldreq	r3, [r3, #4]
 80121d6:	6063      	str	r3, [r4, #4]
 80121d8:	bf04      	itt	eq
 80121da:	1852      	addeq	r2, r2, r1
 80121dc:	6022      	streq	r2, [r4, #0]
 80121de:	602c      	str	r4, [r5, #0]
 80121e0:	e7ec      	b.n	80121bc <_free_r+0x28>
 80121e2:	461a      	mov	r2, r3
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	b10b      	cbz	r3, 80121ec <_free_r+0x58>
 80121e8:	42a3      	cmp	r3, r4
 80121ea:	d9fa      	bls.n	80121e2 <_free_r+0x4e>
 80121ec:	6811      	ldr	r1, [r2, #0]
 80121ee:	1855      	adds	r5, r2, r1
 80121f0:	42a5      	cmp	r5, r4
 80121f2:	d10b      	bne.n	801220c <_free_r+0x78>
 80121f4:	6824      	ldr	r4, [r4, #0]
 80121f6:	4421      	add	r1, r4
 80121f8:	1854      	adds	r4, r2, r1
 80121fa:	42a3      	cmp	r3, r4
 80121fc:	6011      	str	r1, [r2, #0]
 80121fe:	d1dd      	bne.n	80121bc <_free_r+0x28>
 8012200:	681c      	ldr	r4, [r3, #0]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	6053      	str	r3, [r2, #4]
 8012206:	4421      	add	r1, r4
 8012208:	6011      	str	r1, [r2, #0]
 801220a:	e7d7      	b.n	80121bc <_free_r+0x28>
 801220c:	d902      	bls.n	8012214 <_free_r+0x80>
 801220e:	230c      	movs	r3, #12
 8012210:	6003      	str	r3, [r0, #0]
 8012212:	e7d3      	b.n	80121bc <_free_r+0x28>
 8012214:	6825      	ldr	r5, [r4, #0]
 8012216:	1961      	adds	r1, r4, r5
 8012218:	428b      	cmp	r3, r1
 801221a:	bf04      	itt	eq
 801221c:	6819      	ldreq	r1, [r3, #0]
 801221e:	685b      	ldreq	r3, [r3, #4]
 8012220:	6063      	str	r3, [r4, #4]
 8012222:	bf04      	itt	eq
 8012224:	1949      	addeq	r1, r1, r5
 8012226:	6021      	streq	r1, [r4, #0]
 8012228:	6054      	str	r4, [r2, #4]
 801222a:	e7c7      	b.n	80121bc <_free_r+0x28>
 801222c:	b003      	add	sp, #12
 801222e:	bd30      	pop	{r4, r5, pc}
 8012230:	20003644 	.word	0x20003644

08012234 <_malloc_r>:
 8012234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012236:	1ccd      	adds	r5, r1, #3
 8012238:	f025 0503 	bic.w	r5, r5, #3
 801223c:	3508      	adds	r5, #8
 801223e:	2d0c      	cmp	r5, #12
 8012240:	bf38      	it	cc
 8012242:	250c      	movcc	r5, #12
 8012244:	2d00      	cmp	r5, #0
 8012246:	4606      	mov	r6, r0
 8012248:	db01      	blt.n	801224e <_malloc_r+0x1a>
 801224a:	42a9      	cmp	r1, r5
 801224c:	d903      	bls.n	8012256 <_malloc_r+0x22>
 801224e:	230c      	movs	r3, #12
 8012250:	6033      	str	r3, [r6, #0]
 8012252:	2000      	movs	r0, #0
 8012254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012256:	f000 fbdf 	bl	8012a18 <__malloc_lock>
 801225a:	4921      	ldr	r1, [pc, #132]	; (80122e0 <_malloc_r+0xac>)
 801225c:	680a      	ldr	r2, [r1, #0]
 801225e:	4614      	mov	r4, r2
 8012260:	b99c      	cbnz	r4, 801228a <_malloc_r+0x56>
 8012262:	4f20      	ldr	r7, [pc, #128]	; (80122e4 <_malloc_r+0xb0>)
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	b923      	cbnz	r3, 8012272 <_malloc_r+0x3e>
 8012268:	4621      	mov	r1, r4
 801226a:	4630      	mov	r0, r6
 801226c:	f000 fb2a 	bl	80128c4 <_sbrk_r>
 8012270:	6038      	str	r0, [r7, #0]
 8012272:	4629      	mov	r1, r5
 8012274:	4630      	mov	r0, r6
 8012276:	f000 fb25 	bl	80128c4 <_sbrk_r>
 801227a:	1c43      	adds	r3, r0, #1
 801227c:	d123      	bne.n	80122c6 <_malloc_r+0x92>
 801227e:	230c      	movs	r3, #12
 8012280:	6033      	str	r3, [r6, #0]
 8012282:	4630      	mov	r0, r6
 8012284:	f000 fbce 	bl	8012a24 <__malloc_unlock>
 8012288:	e7e3      	b.n	8012252 <_malloc_r+0x1e>
 801228a:	6823      	ldr	r3, [r4, #0]
 801228c:	1b5b      	subs	r3, r3, r5
 801228e:	d417      	bmi.n	80122c0 <_malloc_r+0x8c>
 8012290:	2b0b      	cmp	r3, #11
 8012292:	d903      	bls.n	801229c <_malloc_r+0x68>
 8012294:	6023      	str	r3, [r4, #0]
 8012296:	441c      	add	r4, r3
 8012298:	6025      	str	r5, [r4, #0]
 801229a:	e004      	b.n	80122a6 <_malloc_r+0x72>
 801229c:	6863      	ldr	r3, [r4, #4]
 801229e:	42a2      	cmp	r2, r4
 80122a0:	bf0c      	ite	eq
 80122a2:	600b      	streq	r3, [r1, #0]
 80122a4:	6053      	strne	r3, [r2, #4]
 80122a6:	4630      	mov	r0, r6
 80122a8:	f000 fbbc 	bl	8012a24 <__malloc_unlock>
 80122ac:	f104 000b 	add.w	r0, r4, #11
 80122b0:	1d23      	adds	r3, r4, #4
 80122b2:	f020 0007 	bic.w	r0, r0, #7
 80122b6:	1ac2      	subs	r2, r0, r3
 80122b8:	d0cc      	beq.n	8012254 <_malloc_r+0x20>
 80122ba:	1a1b      	subs	r3, r3, r0
 80122bc:	50a3      	str	r3, [r4, r2]
 80122be:	e7c9      	b.n	8012254 <_malloc_r+0x20>
 80122c0:	4622      	mov	r2, r4
 80122c2:	6864      	ldr	r4, [r4, #4]
 80122c4:	e7cc      	b.n	8012260 <_malloc_r+0x2c>
 80122c6:	1cc4      	adds	r4, r0, #3
 80122c8:	f024 0403 	bic.w	r4, r4, #3
 80122cc:	42a0      	cmp	r0, r4
 80122ce:	d0e3      	beq.n	8012298 <_malloc_r+0x64>
 80122d0:	1a21      	subs	r1, r4, r0
 80122d2:	4630      	mov	r0, r6
 80122d4:	f000 faf6 	bl	80128c4 <_sbrk_r>
 80122d8:	3001      	adds	r0, #1
 80122da:	d1dd      	bne.n	8012298 <_malloc_r+0x64>
 80122dc:	e7cf      	b.n	801227e <_malloc_r+0x4a>
 80122de:	bf00      	nop
 80122e0:	20003644 	.word	0x20003644
 80122e4:	20003648 	.word	0x20003648

080122e8 <__sfputc_r>:
 80122e8:	6893      	ldr	r3, [r2, #8]
 80122ea:	3b01      	subs	r3, #1
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	b410      	push	{r4}
 80122f0:	6093      	str	r3, [r2, #8]
 80122f2:	da08      	bge.n	8012306 <__sfputc_r+0x1e>
 80122f4:	6994      	ldr	r4, [r2, #24]
 80122f6:	42a3      	cmp	r3, r4
 80122f8:	db01      	blt.n	80122fe <__sfputc_r+0x16>
 80122fa:	290a      	cmp	r1, #10
 80122fc:	d103      	bne.n	8012306 <__sfputc_r+0x1e>
 80122fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012302:	f7ff bc69 	b.w	8011bd8 <__swbuf_r>
 8012306:	6813      	ldr	r3, [r2, #0]
 8012308:	1c58      	adds	r0, r3, #1
 801230a:	6010      	str	r0, [r2, #0]
 801230c:	7019      	strb	r1, [r3, #0]
 801230e:	4608      	mov	r0, r1
 8012310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012314:	4770      	bx	lr

08012316 <__sfputs_r>:
 8012316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012318:	4606      	mov	r6, r0
 801231a:	460f      	mov	r7, r1
 801231c:	4614      	mov	r4, r2
 801231e:	18d5      	adds	r5, r2, r3
 8012320:	42ac      	cmp	r4, r5
 8012322:	d101      	bne.n	8012328 <__sfputs_r+0x12>
 8012324:	2000      	movs	r0, #0
 8012326:	e007      	b.n	8012338 <__sfputs_r+0x22>
 8012328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801232c:	463a      	mov	r2, r7
 801232e:	4630      	mov	r0, r6
 8012330:	f7ff ffda 	bl	80122e8 <__sfputc_r>
 8012334:	1c43      	adds	r3, r0, #1
 8012336:	d1f3      	bne.n	8012320 <__sfputs_r+0xa>
 8012338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801233c <_vfiprintf_r>:
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	460d      	mov	r5, r1
 8012342:	b09d      	sub	sp, #116	; 0x74
 8012344:	4614      	mov	r4, r2
 8012346:	4698      	mov	r8, r3
 8012348:	4606      	mov	r6, r0
 801234a:	b118      	cbz	r0, 8012354 <_vfiprintf_r+0x18>
 801234c:	6983      	ldr	r3, [r0, #24]
 801234e:	b90b      	cbnz	r3, 8012354 <_vfiprintf_r+0x18>
 8012350:	f7ff fe1c 	bl	8011f8c <__sinit>
 8012354:	4b89      	ldr	r3, [pc, #548]	; (801257c <_vfiprintf_r+0x240>)
 8012356:	429d      	cmp	r5, r3
 8012358:	d11b      	bne.n	8012392 <_vfiprintf_r+0x56>
 801235a:	6875      	ldr	r5, [r6, #4]
 801235c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801235e:	07d9      	lsls	r1, r3, #31
 8012360:	d405      	bmi.n	801236e <_vfiprintf_r+0x32>
 8012362:	89ab      	ldrh	r3, [r5, #12]
 8012364:	059a      	lsls	r2, r3, #22
 8012366:	d402      	bmi.n	801236e <_vfiprintf_r+0x32>
 8012368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801236a:	f7ff fead 	bl	80120c8 <__retarget_lock_acquire_recursive>
 801236e:	89ab      	ldrh	r3, [r5, #12]
 8012370:	071b      	lsls	r3, r3, #28
 8012372:	d501      	bpl.n	8012378 <_vfiprintf_r+0x3c>
 8012374:	692b      	ldr	r3, [r5, #16]
 8012376:	b9eb      	cbnz	r3, 80123b4 <_vfiprintf_r+0x78>
 8012378:	4629      	mov	r1, r5
 801237a:	4630      	mov	r0, r6
 801237c:	f7ff fc7e 	bl	8011c7c <__swsetup_r>
 8012380:	b1c0      	cbz	r0, 80123b4 <_vfiprintf_r+0x78>
 8012382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012384:	07dc      	lsls	r4, r3, #31
 8012386:	d50e      	bpl.n	80123a6 <_vfiprintf_r+0x6a>
 8012388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801238c:	b01d      	add	sp, #116	; 0x74
 801238e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012392:	4b7b      	ldr	r3, [pc, #492]	; (8012580 <_vfiprintf_r+0x244>)
 8012394:	429d      	cmp	r5, r3
 8012396:	d101      	bne.n	801239c <_vfiprintf_r+0x60>
 8012398:	68b5      	ldr	r5, [r6, #8]
 801239a:	e7df      	b.n	801235c <_vfiprintf_r+0x20>
 801239c:	4b79      	ldr	r3, [pc, #484]	; (8012584 <_vfiprintf_r+0x248>)
 801239e:	429d      	cmp	r5, r3
 80123a0:	bf08      	it	eq
 80123a2:	68f5      	ldreq	r5, [r6, #12]
 80123a4:	e7da      	b.n	801235c <_vfiprintf_r+0x20>
 80123a6:	89ab      	ldrh	r3, [r5, #12]
 80123a8:	0598      	lsls	r0, r3, #22
 80123aa:	d4ed      	bmi.n	8012388 <_vfiprintf_r+0x4c>
 80123ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123ae:	f7ff fe8c 	bl	80120ca <__retarget_lock_release_recursive>
 80123b2:	e7e9      	b.n	8012388 <_vfiprintf_r+0x4c>
 80123b4:	2300      	movs	r3, #0
 80123b6:	9309      	str	r3, [sp, #36]	; 0x24
 80123b8:	2320      	movs	r3, #32
 80123ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123be:	f8cd 800c 	str.w	r8, [sp, #12]
 80123c2:	2330      	movs	r3, #48	; 0x30
 80123c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012588 <_vfiprintf_r+0x24c>
 80123c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123cc:	f04f 0901 	mov.w	r9, #1
 80123d0:	4623      	mov	r3, r4
 80123d2:	469a      	mov	sl, r3
 80123d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123d8:	b10a      	cbz	r2, 80123de <_vfiprintf_r+0xa2>
 80123da:	2a25      	cmp	r2, #37	; 0x25
 80123dc:	d1f9      	bne.n	80123d2 <_vfiprintf_r+0x96>
 80123de:	ebba 0b04 	subs.w	fp, sl, r4
 80123e2:	d00b      	beq.n	80123fc <_vfiprintf_r+0xc0>
 80123e4:	465b      	mov	r3, fp
 80123e6:	4622      	mov	r2, r4
 80123e8:	4629      	mov	r1, r5
 80123ea:	4630      	mov	r0, r6
 80123ec:	f7ff ff93 	bl	8012316 <__sfputs_r>
 80123f0:	3001      	adds	r0, #1
 80123f2:	f000 80aa 	beq.w	801254a <_vfiprintf_r+0x20e>
 80123f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123f8:	445a      	add	r2, fp
 80123fa:	9209      	str	r2, [sp, #36]	; 0x24
 80123fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012400:	2b00      	cmp	r3, #0
 8012402:	f000 80a2 	beq.w	801254a <_vfiprintf_r+0x20e>
 8012406:	2300      	movs	r3, #0
 8012408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801240c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012410:	f10a 0a01 	add.w	sl, sl, #1
 8012414:	9304      	str	r3, [sp, #16]
 8012416:	9307      	str	r3, [sp, #28]
 8012418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801241c:	931a      	str	r3, [sp, #104]	; 0x68
 801241e:	4654      	mov	r4, sl
 8012420:	2205      	movs	r2, #5
 8012422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012426:	4858      	ldr	r0, [pc, #352]	; (8012588 <_vfiprintf_r+0x24c>)
 8012428:	f7ed feda 	bl	80001e0 <memchr>
 801242c:	9a04      	ldr	r2, [sp, #16]
 801242e:	b9d8      	cbnz	r0, 8012468 <_vfiprintf_r+0x12c>
 8012430:	06d1      	lsls	r1, r2, #27
 8012432:	bf44      	itt	mi
 8012434:	2320      	movmi	r3, #32
 8012436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801243a:	0713      	lsls	r3, r2, #28
 801243c:	bf44      	itt	mi
 801243e:	232b      	movmi	r3, #43	; 0x2b
 8012440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012444:	f89a 3000 	ldrb.w	r3, [sl]
 8012448:	2b2a      	cmp	r3, #42	; 0x2a
 801244a:	d015      	beq.n	8012478 <_vfiprintf_r+0x13c>
 801244c:	9a07      	ldr	r2, [sp, #28]
 801244e:	4654      	mov	r4, sl
 8012450:	2000      	movs	r0, #0
 8012452:	f04f 0c0a 	mov.w	ip, #10
 8012456:	4621      	mov	r1, r4
 8012458:	f811 3b01 	ldrb.w	r3, [r1], #1
 801245c:	3b30      	subs	r3, #48	; 0x30
 801245e:	2b09      	cmp	r3, #9
 8012460:	d94e      	bls.n	8012500 <_vfiprintf_r+0x1c4>
 8012462:	b1b0      	cbz	r0, 8012492 <_vfiprintf_r+0x156>
 8012464:	9207      	str	r2, [sp, #28]
 8012466:	e014      	b.n	8012492 <_vfiprintf_r+0x156>
 8012468:	eba0 0308 	sub.w	r3, r0, r8
 801246c:	fa09 f303 	lsl.w	r3, r9, r3
 8012470:	4313      	orrs	r3, r2
 8012472:	9304      	str	r3, [sp, #16]
 8012474:	46a2      	mov	sl, r4
 8012476:	e7d2      	b.n	801241e <_vfiprintf_r+0xe2>
 8012478:	9b03      	ldr	r3, [sp, #12]
 801247a:	1d19      	adds	r1, r3, #4
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	9103      	str	r1, [sp, #12]
 8012480:	2b00      	cmp	r3, #0
 8012482:	bfbb      	ittet	lt
 8012484:	425b      	neglt	r3, r3
 8012486:	f042 0202 	orrlt.w	r2, r2, #2
 801248a:	9307      	strge	r3, [sp, #28]
 801248c:	9307      	strlt	r3, [sp, #28]
 801248e:	bfb8      	it	lt
 8012490:	9204      	strlt	r2, [sp, #16]
 8012492:	7823      	ldrb	r3, [r4, #0]
 8012494:	2b2e      	cmp	r3, #46	; 0x2e
 8012496:	d10c      	bne.n	80124b2 <_vfiprintf_r+0x176>
 8012498:	7863      	ldrb	r3, [r4, #1]
 801249a:	2b2a      	cmp	r3, #42	; 0x2a
 801249c:	d135      	bne.n	801250a <_vfiprintf_r+0x1ce>
 801249e:	9b03      	ldr	r3, [sp, #12]
 80124a0:	1d1a      	adds	r2, r3, #4
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	9203      	str	r2, [sp, #12]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	bfb8      	it	lt
 80124aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80124ae:	3402      	adds	r4, #2
 80124b0:	9305      	str	r3, [sp, #20]
 80124b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012598 <_vfiprintf_r+0x25c>
 80124b6:	7821      	ldrb	r1, [r4, #0]
 80124b8:	2203      	movs	r2, #3
 80124ba:	4650      	mov	r0, sl
 80124bc:	f7ed fe90 	bl	80001e0 <memchr>
 80124c0:	b140      	cbz	r0, 80124d4 <_vfiprintf_r+0x198>
 80124c2:	2340      	movs	r3, #64	; 0x40
 80124c4:	eba0 000a 	sub.w	r0, r0, sl
 80124c8:	fa03 f000 	lsl.w	r0, r3, r0
 80124cc:	9b04      	ldr	r3, [sp, #16]
 80124ce:	4303      	orrs	r3, r0
 80124d0:	3401      	adds	r4, #1
 80124d2:	9304      	str	r3, [sp, #16]
 80124d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124d8:	482c      	ldr	r0, [pc, #176]	; (801258c <_vfiprintf_r+0x250>)
 80124da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124de:	2206      	movs	r2, #6
 80124e0:	f7ed fe7e 	bl	80001e0 <memchr>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	d03f      	beq.n	8012568 <_vfiprintf_r+0x22c>
 80124e8:	4b29      	ldr	r3, [pc, #164]	; (8012590 <_vfiprintf_r+0x254>)
 80124ea:	bb1b      	cbnz	r3, 8012534 <_vfiprintf_r+0x1f8>
 80124ec:	9b03      	ldr	r3, [sp, #12]
 80124ee:	3307      	adds	r3, #7
 80124f0:	f023 0307 	bic.w	r3, r3, #7
 80124f4:	3308      	adds	r3, #8
 80124f6:	9303      	str	r3, [sp, #12]
 80124f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124fa:	443b      	add	r3, r7
 80124fc:	9309      	str	r3, [sp, #36]	; 0x24
 80124fe:	e767      	b.n	80123d0 <_vfiprintf_r+0x94>
 8012500:	fb0c 3202 	mla	r2, ip, r2, r3
 8012504:	460c      	mov	r4, r1
 8012506:	2001      	movs	r0, #1
 8012508:	e7a5      	b.n	8012456 <_vfiprintf_r+0x11a>
 801250a:	2300      	movs	r3, #0
 801250c:	3401      	adds	r4, #1
 801250e:	9305      	str	r3, [sp, #20]
 8012510:	4619      	mov	r1, r3
 8012512:	f04f 0c0a 	mov.w	ip, #10
 8012516:	4620      	mov	r0, r4
 8012518:	f810 2b01 	ldrb.w	r2, [r0], #1
 801251c:	3a30      	subs	r2, #48	; 0x30
 801251e:	2a09      	cmp	r2, #9
 8012520:	d903      	bls.n	801252a <_vfiprintf_r+0x1ee>
 8012522:	2b00      	cmp	r3, #0
 8012524:	d0c5      	beq.n	80124b2 <_vfiprintf_r+0x176>
 8012526:	9105      	str	r1, [sp, #20]
 8012528:	e7c3      	b.n	80124b2 <_vfiprintf_r+0x176>
 801252a:	fb0c 2101 	mla	r1, ip, r1, r2
 801252e:	4604      	mov	r4, r0
 8012530:	2301      	movs	r3, #1
 8012532:	e7f0      	b.n	8012516 <_vfiprintf_r+0x1da>
 8012534:	ab03      	add	r3, sp, #12
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	462a      	mov	r2, r5
 801253a:	4b16      	ldr	r3, [pc, #88]	; (8012594 <_vfiprintf_r+0x258>)
 801253c:	a904      	add	r1, sp, #16
 801253e:	4630      	mov	r0, r6
 8012540:	f3af 8000 	nop.w
 8012544:	4607      	mov	r7, r0
 8012546:	1c78      	adds	r0, r7, #1
 8012548:	d1d6      	bne.n	80124f8 <_vfiprintf_r+0x1bc>
 801254a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801254c:	07d9      	lsls	r1, r3, #31
 801254e:	d405      	bmi.n	801255c <_vfiprintf_r+0x220>
 8012550:	89ab      	ldrh	r3, [r5, #12]
 8012552:	059a      	lsls	r2, r3, #22
 8012554:	d402      	bmi.n	801255c <_vfiprintf_r+0x220>
 8012556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012558:	f7ff fdb7 	bl	80120ca <__retarget_lock_release_recursive>
 801255c:	89ab      	ldrh	r3, [r5, #12]
 801255e:	065b      	lsls	r3, r3, #25
 8012560:	f53f af12 	bmi.w	8012388 <_vfiprintf_r+0x4c>
 8012564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012566:	e711      	b.n	801238c <_vfiprintf_r+0x50>
 8012568:	ab03      	add	r3, sp, #12
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	462a      	mov	r2, r5
 801256e:	4b09      	ldr	r3, [pc, #36]	; (8012594 <_vfiprintf_r+0x258>)
 8012570:	a904      	add	r1, sp, #16
 8012572:	4630      	mov	r0, r6
 8012574:	f000 f880 	bl	8012678 <_printf_i>
 8012578:	e7e4      	b.n	8012544 <_vfiprintf_r+0x208>
 801257a:	bf00      	nop
 801257c:	080143c8 	.word	0x080143c8
 8012580:	080143e8 	.word	0x080143e8
 8012584:	080143a8 	.word	0x080143a8
 8012588:	08014408 	.word	0x08014408
 801258c:	08014412 	.word	0x08014412
 8012590:	00000000 	.word	0x00000000
 8012594:	08012317 	.word	0x08012317
 8012598:	0801440e 	.word	0x0801440e

0801259c <_printf_common>:
 801259c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125a0:	4616      	mov	r6, r2
 80125a2:	4699      	mov	r9, r3
 80125a4:	688a      	ldr	r2, [r1, #8]
 80125a6:	690b      	ldr	r3, [r1, #16]
 80125a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80125ac:	4293      	cmp	r3, r2
 80125ae:	bfb8      	it	lt
 80125b0:	4613      	movlt	r3, r2
 80125b2:	6033      	str	r3, [r6, #0]
 80125b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125b8:	4607      	mov	r7, r0
 80125ba:	460c      	mov	r4, r1
 80125bc:	b10a      	cbz	r2, 80125c2 <_printf_common+0x26>
 80125be:	3301      	adds	r3, #1
 80125c0:	6033      	str	r3, [r6, #0]
 80125c2:	6823      	ldr	r3, [r4, #0]
 80125c4:	0699      	lsls	r1, r3, #26
 80125c6:	bf42      	ittt	mi
 80125c8:	6833      	ldrmi	r3, [r6, #0]
 80125ca:	3302      	addmi	r3, #2
 80125cc:	6033      	strmi	r3, [r6, #0]
 80125ce:	6825      	ldr	r5, [r4, #0]
 80125d0:	f015 0506 	ands.w	r5, r5, #6
 80125d4:	d106      	bne.n	80125e4 <_printf_common+0x48>
 80125d6:	f104 0a19 	add.w	sl, r4, #25
 80125da:	68e3      	ldr	r3, [r4, #12]
 80125dc:	6832      	ldr	r2, [r6, #0]
 80125de:	1a9b      	subs	r3, r3, r2
 80125e0:	42ab      	cmp	r3, r5
 80125e2:	dc26      	bgt.n	8012632 <_printf_common+0x96>
 80125e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80125e8:	1e13      	subs	r3, r2, #0
 80125ea:	6822      	ldr	r2, [r4, #0]
 80125ec:	bf18      	it	ne
 80125ee:	2301      	movne	r3, #1
 80125f0:	0692      	lsls	r2, r2, #26
 80125f2:	d42b      	bmi.n	801264c <_printf_common+0xb0>
 80125f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80125f8:	4649      	mov	r1, r9
 80125fa:	4638      	mov	r0, r7
 80125fc:	47c0      	blx	r8
 80125fe:	3001      	adds	r0, #1
 8012600:	d01e      	beq.n	8012640 <_printf_common+0xa4>
 8012602:	6823      	ldr	r3, [r4, #0]
 8012604:	68e5      	ldr	r5, [r4, #12]
 8012606:	6832      	ldr	r2, [r6, #0]
 8012608:	f003 0306 	and.w	r3, r3, #6
 801260c:	2b04      	cmp	r3, #4
 801260e:	bf08      	it	eq
 8012610:	1aad      	subeq	r5, r5, r2
 8012612:	68a3      	ldr	r3, [r4, #8]
 8012614:	6922      	ldr	r2, [r4, #16]
 8012616:	bf0c      	ite	eq
 8012618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801261c:	2500      	movne	r5, #0
 801261e:	4293      	cmp	r3, r2
 8012620:	bfc4      	itt	gt
 8012622:	1a9b      	subgt	r3, r3, r2
 8012624:	18ed      	addgt	r5, r5, r3
 8012626:	2600      	movs	r6, #0
 8012628:	341a      	adds	r4, #26
 801262a:	42b5      	cmp	r5, r6
 801262c:	d11a      	bne.n	8012664 <_printf_common+0xc8>
 801262e:	2000      	movs	r0, #0
 8012630:	e008      	b.n	8012644 <_printf_common+0xa8>
 8012632:	2301      	movs	r3, #1
 8012634:	4652      	mov	r2, sl
 8012636:	4649      	mov	r1, r9
 8012638:	4638      	mov	r0, r7
 801263a:	47c0      	blx	r8
 801263c:	3001      	adds	r0, #1
 801263e:	d103      	bne.n	8012648 <_printf_common+0xac>
 8012640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012648:	3501      	adds	r5, #1
 801264a:	e7c6      	b.n	80125da <_printf_common+0x3e>
 801264c:	18e1      	adds	r1, r4, r3
 801264e:	1c5a      	adds	r2, r3, #1
 8012650:	2030      	movs	r0, #48	; 0x30
 8012652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012656:	4422      	add	r2, r4
 8012658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801265c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012660:	3302      	adds	r3, #2
 8012662:	e7c7      	b.n	80125f4 <_printf_common+0x58>
 8012664:	2301      	movs	r3, #1
 8012666:	4622      	mov	r2, r4
 8012668:	4649      	mov	r1, r9
 801266a:	4638      	mov	r0, r7
 801266c:	47c0      	blx	r8
 801266e:	3001      	adds	r0, #1
 8012670:	d0e6      	beq.n	8012640 <_printf_common+0xa4>
 8012672:	3601      	adds	r6, #1
 8012674:	e7d9      	b.n	801262a <_printf_common+0x8e>
	...

08012678 <_printf_i>:
 8012678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801267c:	460c      	mov	r4, r1
 801267e:	4691      	mov	r9, r2
 8012680:	7e27      	ldrb	r7, [r4, #24]
 8012682:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012684:	2f78      	cmp	r7, #120	; 0x78
 8012686:	4680      	mov	r8, r0
 8012688:	469a      	mov	sl, r3
 801268a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801268e:	d807      	bhi.n	80126a0 <_printf_i+0x28>
 8012690:	2f62      	cmp	r7, #98	; 0x62
 8012692:	d80a      	bhi.n	80126aa <_printf_i+0x32>
 8012694:	2f00      	cmp	r7, #0
 8012696:	f000 80d8 	beq.w	801284a <_printf_i+0x1d2>
 801269a:	2f58      	cmp	r7, #88	; 0x58
 801269c:	f000 80a3 	beq.w	80127e6 <_printf_i+0x16e>
 80126a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80126a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80126a8:	e03a      	b.n	8012720 <_printf_i+0xa8>
 80126aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80126ae:	2b15      	cmp	r3, #21
 80126b0:	d8f6      	bhi.n	80126a0 <_printf_i+0x28>
 80126b2:	a001      	add	r0, pc, #4	; (adr r0, 80126b8 <_printf_i+0x40>)
 80126b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80126b8:	08012711 	.word	0x08012711
 80126bc:	08012725 	.word	0x08012725
 80126c0:	080126a1 	.word	0x080126a1
 80126c4:	080126a1 	.word	0x080126a1
 80126c8:	080126a1 	.word	0x080126a1
 80126cc:	080126a1 	.word	0x080126a1
 80126d0:	08012725 	.word	0x08012725
 80126d4:	080126a1 	.word	0x080126a1
 80126d8:	080126a1 	.word	0x080126a1
 80126dc:	080126a1 	.word	0x080126a1
 80126e0:	080126a1 	.word	0x080126a1
 80126e4:	08012831 	.word	0x08012831
 80126e8:	08012755 	.word	0x08012755
 80126ec:	08012813 	.word	0x08012813
 80126f0:	080126a1 	.word	0x080126a1
 80126f4:	080126a1 	.word	0x080126a1
 80126f8:	08012853 	.word	0x08012853
 80126fc:	080126a1 	.word	0x080126a1
 8012700:	08012755 	.word	0x08012755
 8012704:	080126a1 	.word	0x080126a1
 8012708:	080126a1 	.word	0x080126a1
 801270c:	0801281b 	.word	0x0801281b
 8012710:	680b      	ldr	r3, [r1, #0]
 8012712:	1d1a      	adds	r2, r3, #4
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	600a      	str	r2, [r1, #0]
 8012718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801271c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012720:	2301      	movs	r3, #1
 8012722:	e0a3      	b.n	801286c <_printf_i+0x1f4>
 8012724:	6825      	ldr	r5, [r4, #0]
 8012726:	6808      	ldr	r0, [r1, #0]
 8012728:	062e      	lsls	r6, r5, #24
 801272a:	f100 0304 	add.w	r3, r0, #4
 801272e:	d50a      	bpl.n	8012746 <_printf_i+0xce>
 8012730:	6805      	ldr	r5, [r0, #0]
 8012732:	600b      	str	r3, [r1, #0]
 8012734:	2d00      	cmp	r5, #0
 8012736:	da03      	bge.n	8012740 <_printf_i+0xc8>
 8012738:	232d      	movs	r3, #45	; 0x2d
 801273a:	426d      	negs	r5, r5
 801273c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012740:	485e      	ldr	r0, [pc, #376]	; (80128bc <_printf_i+0x244>)
 8012742:	230a      	movs	r3, #10
 8012744:	e019      	b.n	801277a <_printf_i+0x102>
 8012746:	f015 0f40 	tst.w	r5, #64	; 0x40
 801274a:	6805      	ldr	r5, [r0, #0]
 801274c:	600b      	str	r3, [r1, #0]
 801274e:	bf18      	it	ne
 8012750:	b22d      	sxthne	r5, r5
 8012752:	e7ef      	b.n	8012734 <_printf_i+0xbc>
 8012754:	680b      	ldr	r3, [r1, #0]
 8012756:	6825      	ldr	r5, [r4, #0]
 8012758:	1d18      	adds	r0, r3, #4
 801275a:	6008      	str	r0, [r1, #0]
 801275c:	0628      	lsls	r0, r5, #24
 801275e:	d501      	bpl.n	8012764 <_printf_i+0xec>
 8012760:	681d      	ldr	r5, [r3, #0]
 8012762:	e002      	b.n	801276a <_printf_i+0xf2>
 8012764:	0669      	lsls	r1, r5, #25
 8012766:	d5fb      	bpl.n	8012760 <_printf_i+0xe8>
 8012768:	881d      	ldrh	r5, [r3, #0]
 801276a:	4854      	ldr	r0, [pc, #336]	; (80128bc <_printf_i+0x244>)
 801276c:	2f6f      	cmp	r7, #111	; 0x6f
 801276e:	bf0c      	ite	eq
 8012770:	2308      	moveq	r3, #8
 8012772:	230a      	movne	r3, #10
 8012774:	2100      	movs	r1, #0
 8012776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801277a:	6866      	ldr	r6, [r4, #4]
 801277c:	60a6      	str	r6, [r4, #8]
 801277e:	2e00      	cmp	r6, #0
 8012780:	bfa2      	ittt	ge
 8012782:	6821      	ldrge	r1, [r4, #0]
 8012784:	f021 0104 	bicge.w	r1, r1, #4
 8012788:	6021      	strge	r1, [r4, #0]
 801278a:	b90d      	cbnz	r5, 8012790 <_printf_i+0x118>
 801278c:	2e00      	cmp	r6, #0
 801278e:	d04d      	beq.n	801282c <_printf_i+0x1b4>
 8012790:	4616      	mov	r6, r2
 8012792:	fbb5 f1f3 	udiv	r1, r5, r3
 8012796:	fb03 5711 	mls	r7, r3, r1, r5
 801279a:	5dc7      	ldrb	r7, [r0, r7]
 801279c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127a0:	462f      	mov	r7, r5
 80127a2:	42bb      	cmp	r3, r7
 80127a4:	460d      	mov	r5, r1
 80127a6:	d9f4      	bls.n	8012792 <_printf_i+0x11a>
 80127a8:	2b08      	cmp	r3, #8
 80127aa:	d10b      	bne.n	80127c4 <_printf_i+0x14c>
 80127ac:	6823      	ldr	r3, [r4, #0]
 80127ae:	07df      	lsls	r7, r3, #31
 80127b0:	d508      	bpl.n	80127c4 <_printf_i+0x14c>
 80127b2:	6923      	ldr	r3, [r4, #16]
 80127b4:	6861      	ldr	r1, [r4, #4]
 80127b6:	4299      	cmp	r1, r3
 80127b8:	bfde      	ittt	le
 80127ba:	2330      	movle	r3, #48	; 0x30
 80127bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80127c4:	1b92      	subs	r2, r2, r6
 80127c6:	6122      	str	r2, [r4, #16]
 80127c8:	f8cd a000 	str.w	sl, [sp]
 80127cc:	464b      	mov	r3, r9
 80127ce:	aa03      	add	r2, sp, #12
 80127d0:	4621      	mov	r1, r4
 80127d2:	4640      	mov	r0, r8
 80127d4:	f7ff fee2 	bl	801259c <_printf_common>
 80127d8:	3001      	adds	r0, #1
 80127da:	d14c      	bne.n	8012876 <_printf_i+0x1fe>
 80127dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127e0:	b004      	add	sp, #16
 80127e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127e6:	4835      	ldr	r0, [pc, #212]	; (80128bc <_printf_i+0x244>)
 80127e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80127ec:	6823      	ldr	r3, [r4, #0]
 80127ee:	680e      	ldr	r6, [r1, #0]
 80127f0:	061f      	lsls	r7, r3, #24
 80127f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80127f6:	600e      	str	r6, [r1, #0]
 80127f8:	d514      	bpl.n	8012824 <_printf_i+0x1ac>
 80127fa:	07d9      	lsls	r1, r3, #31
 80127fc:	bf44      	itt	mi
 80127fe:	f043 0320 	orrmi.w	r3, r3, #32
 8012802:	6023      	strmi	r3, [r4, #0]
 8012804:	b91d      	cbnz	r5, 801280e <_printf_i+0x196>
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	f023 0320 	bic.w	r3, r3, #32
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	2310      	movs	r3, #16
 8012810:	e7b0      	b.n	8012774 <_printf_i+0xfc>
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	f043 0320 	orr.w	r3, r3, #32
 8012818:	6023      	str	r3, [r4, #0]
 801281a:	2378      	movs	r3, #120	; 0x78
 801281c:	4828      	ldr	r0, [pc, #160]	; (80128c0 <_printf_i+0x248>)
 801281e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012822:	e7e3      	b.n	80127ec <_printf_i+0x174>
 8012824:	065e      	lsls	r6, r3, #25
 8012826:	bf48      	it	mi
 8012828:	b2ad      	uxthmi	r5, r5
 801282a:	e7e6      	b.n	80127fa <_printf_i+0x182>
 801282c:	4616      	mov	r6, r2
 801282e:	e7bb      	b.n	80127a8 <_printf_i+0x130>
 8012830:	680b      	ldr	r3, [r1, #0]
 8012832:	6826      	ldr	r6, [r4, #0]
 8012834:	6960      	ldr	r0, [r4, #20]
 8012836:	1d1d      	adds	r5, r3, #4
 8012838:	600d      	str	r5, [r1, #0]
 801283a:	0635      	lsls	r5, r6, #24
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	d501      	bpl.n	8012844 <_printf_i+0x1cc>
 8012840:	6018      	str	r0, [r3, #0]
 8012842:	e002      	b.n	801284a <_printf_i+0x1d2>
 8012844:	0671      	lsls	r1, r6, #25
 8012846:	d5fb      	bpl.n	8012840 <_printf_i+0x1c8>
 8012848:	8018      	strh	r0, [r3, #0]
 801284a:	2300      	movs	r3, #0
 801284c:	6123      	str	r3, [r4, #16]
 801284e:	4616      	mov	r6, r2
 8012850:	e7ba      	b.n	80127c8 <_printf_i+0x150>
 8012852:	680b      	ldr	r3, [r1, #0]
 8012854:	1d1a      	adds	r2, r3, #4
 8012856:	600a      	str	r2, [r1, #0]
 8012858:	681e      	ldr	r6, [r3, #0]
 801285a:	6862      	ldr	r2, [r4, #4]
 801285c:	2100      	movs	r1, #0
 801285e:	4630      	mov	r0, r6
 8012860:	f7ed fcbe 	bl	80001e0 <memchr>
 8012864:	b108      	cbz	r0, 801286a <_printf_i+0x1f2>
 8012866:	1b80      	subs	r0, r0, r6
 8012868:	6060      	str	r0, [r4, #4]
 801286a:	6863      	ldr	r3, [r4, #4]
 801286c:	6123      	str	r3, [r4, #16]
 801286e:	2300      	movs	r3, #0
 8012870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012874:	e7a8      	b.n	80127c8 <_printf_i+0x150>
 8012876:	6923      	ldr	r3, [r4, #16]
 8012878:	4632      	mov	r2, r6
 801287a:	4649      	mov	r1, r9
 801287c:	4640      	mov	r0, r8
 801287e:	47d0      	blx	sl
 8012880:	3001      	adds	r0, #1
 8012882:	d0ab      	beq.n	80127dc <_printf_i+0x164>
 8012884:	6823      	ldr	r3, [r4, #0]
 8012886:	079b      	lsls	r3, r3, #30
 8012888:	d413      	bmi.n	80128b2 <_printf_i+0x23a>
 801288a:	68e0      	ldr	r0, [r4, #12]
 801288c:	9b03      	ldr	r3, [sp, #12]
 801288e:	4298      	cmp	r0, r3
 8012890:	bfb8      	it	lt
 8012892:	4618      	movlt	r0, r3
 8012894:	e7a4      	b.n	80127e0 <_printf_i+0x168>
 8012896:	2301      	movs	r3, #1
 8012898:	4632      	mov	r2, r6
 801289a:	4649      	mov	r1, r9
 801289c:	4640      	mov	r0, r8
 801289e:	47d0      	blx	sl
 80128a0:	3001      	adds	r0, #1
 80128a2:	d09b      	beq.n	80127dc <_printf_i+0x164>
 80128a4:	3501      	adds	r5, #1
 80128a6:	68e3      	ldr	r3, [r4, #12]
 80128a8:	9903      	ldr	r1, [sp, #12]
 80128aa:	1a5b      	subs	r3, r3, r1
 80128ac:	42ab      	cmp	r3, r5
 80128ae:	dcf2      	bgt.n	8012896 <_printf_i+0x21e>
 80128b0:	e7eb      	b.n	801288a <_printf_i+0x212>
 80128b2:	2500      	movs	r5, #0
 80128b4:	f104 0619 	add.w	r6, r4, #25
 80128b8:	e7f5      	b.n	80128a6 <_printf_i+0x22e>
 80128ba:	bf00      	nop
 80128bc:	08014419 	.word	0x08014419
 80128c0:	0801442a 	.word	0x0801442a

080128c4 <_sbrk_r>:
 80128c4:	b538      	push	{r3, r4, r5, lr}
 80128c6:	4d06      	ldr	r5, [pc, #24]	; (80128e0 <_sbrk_r+0x1c>)
 80128c8:	2300      	movs	r3, #0
 80128ca:	4604      	mov	r4, r0
 80128cc:	4608      	mov	r0, r1
 80128ce:	602b      	str	r3, [r5, #0]
 80128d0:	f7f1 fa18 	bl	8003d04 <_sbrk>
 80128d4:	1c43      	adds	r3, r0, #1
 80128d6:	d102      	bne.n	80128de <_sbrk_r+0x1a>
 80128d8:	682b      	ldr	r3, [r5, #0]
 80128da:	b103      	cbz	r3, 80128de <_sbrk_r+0x1a>
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	bd38      	pop	{r3, r4, r5, pc}
 80128e0:	20010550 	.word	0x20010550

080128e4 <__sread>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	460c      	mov	r4, r1
 80128e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128ec:	f000 f8a0 	bl	8012a30 <_read_r>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	bfab      	itete	ge
 80128f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128f6:	89a3      	ldrhlt	r3, [r4, #12]
 80128f8:	181b      	addge	r3, r3, r0
 80128fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128fe:	bfac      	ite	ge
 8012900:	6563      	strge	r3, [r4, #84]	; 0x54
 8012902:	81a3      	strhlt	r3, [r4, #12]
 8012904:	bd10      	pop	{r4, pc}

08012906 <__swrite>:
 8012906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801290a:	461f      	mov	r7, r3
 801290c:	898b      	ldrh	r3, [r1, #12]
 801290e:	05db      	lsls	r3, r3, #23
 8012910:	4605      	mov	r5, r0
 8012912:	460c      	mov	r4, r1
 8012914:	4616      	mov	r6, r2
 8012916:	d505      	bpl.n	8012924 <__swrite+0x1e>
 8012918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801291c:	2302      	movs	r3, #2
 801291e:	2200      	movs	r2, #0
 8012920:	f000 f868 	bl	80129f4 <_lseek_r>
 8012924:	89a3      	ldrh	r3, [r4, #12]
 8012926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801292a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801292e:	81a3      	strh	r3, [r4, #12]
 8012930:	4632      	mov	r2, r6
 8012932:	463b      	mov	r3, r7
 8012934:	4628      	mov	r0, r5
 8012936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801293a:	f000 b817 	b.w	801296c <_write_r>

0801293e <__sseek>:
 801293e:	b510      	push	{r4, lr}
 8012940:	460c      	mov	r4, r1
 8012942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012946:	f000 f855 	bl	80129f4 <_lseek_r>
 801294a:	1c43      	adds	r3, r0, #1
 801294c:	89a3      	ldrh	r3, [r4, #12]
 801294e:	bf15      	itete	ne
 8012950:	6560      	strne	r0, [r4, #84]	; 0x54
 8012952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801295a:	81a3      	strheq	r3, [r4, #12]
 801295c:	bf18      	it	ne
 801295e:	81a3      	strhne	r3, [r4, #12]
 8012960:	bd10      	pop	{r4, pc}

08012962 <__sclose>:
 8012962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012966:	f000 b813 	b.w	8012990 <_close_r>
	...

0801296c <_write_r>:
 801296c:	b538      	push	{r3, r4, r5, lr}
 801296e:	4d07      	ldr	r5, [pc, #28]	; (801298c <_write_r+0x20>)
 8012970:	4604      	mov	r4, r0
 8012972:	4608      	mov	r0, r1
 8012974:	4611      	mov	r1, r2
 8012976:	2200      	movs	r2, #0
 8012978:	602a      	str	r2, [r5, #0]
 801297a:	461a      	mov	r2, r3
 801297c:	f7f1 f971 	bl	8003c62 <_write>
 8012980:	1c43      	adds	r3, r0, #1
 8012982:	d102      	bne.n	801298a <_write_r+0x1e>
 8012984:	682b      	ldr	r3, [r5, #0]
 8012986:	b103      	cbz	r3, 801298a <_write_r+0x1e>
 8012988:	6023      	str	r3, [r4, #0]
 801298a:	bd38      	pop	{r3, r4, r5, pc}
 801298c:	20010550 	.word	0x20010550

08012990 <_close_r>:
 8012990:	b538      	push	{r3, r4, r5, lr}
 8012992:	4d06      	ldr	r5, [pc, #24]	; (80129ac <_close_r+0x1c>)
 8012994:	2300      	movs	r3, #0
 8012996:	4604      	mov	r4, r0
 8012998:	4608      	mov	r0, r1
 801299a:	602b      	str	r3, [r5, #0]
 801299c:	f7f1 f97d 	bl	8003c9a <_close>
 80129a0:	1c43      	adds	r3, r0, #1
 80129a2:	d102      	bne.n	80129aa <_close_r+0x1a>
 80129a4:	682b      	ldr	r3, [r5, #0]
 80129a6:	b103      	cbz	r3, 80129aa <_close_r+0x1a>
 80129a8:	6023      	str	r3, [r4, #0]
 80129aa:	bd38      	pop	{r3, r4, r5, pc}
 80129ac:	20010550 	.word	0x20010550

080129b0 <_fstat_r>:
 80129b0:	b538      	push	{r3, r4, r5, lr}
 80129b2:	4d07      	ldr	r5, [pc, #28]	; (80129d0 <_fstat_r+0x20>)
 80129b4:	2300      	movs	r3, #0
 80129b6:	4604      	mov	r4, r0
 80129b8:	4608      	mov	r0, r1
 80129ba:	4611      	mov	r1, r2
 80129bc:	602b      	str	r3, [r5, #0]
 80129be:	f7f1 f978 	bl	8003cb2 <_fstat>
 80129c2:	1c43      	adds	r3, r0, #1
 80129c4:	d102      	bne.n	80129cc <_fstat_r+0x1c>
 80129c6:	682b      	ldr	r3, [r5, #0]
 80129c8:	b103      	cbz	r3, 80129cc <_fstat_r+0x1c>
 80129ca:	6023      	str	r3, [r4, #0]
 80129cc:	bd38      	pop	{r3, r4, r5, pc}
 80129ce:	bf00      	nop
 80129d0:	20010550 	.word	0x20010550

080129d4 <_isatty_r>:
 80129d4:	b538      	push	{r3, r4, r5, lr}
 80129d6:	4d06      	ldr	r5, [pc, #24]	; (80129f0 <_isatty_r+0x1c>)
 80129d8:	2300      	movs	r3, #0
 80129da:	4604      	mov	r4, r0
 80129dc:	4608      	mov	r0, r1
 80129de:	602b      	str	r3, [r5, #0]
 80129e0:	f7f1 f977 	bl	8003cd2 <_isatty>
 80129e4:	1c43      	adds	r3, r0, #1
 80129e6:	d102      	bne.n	80129ee <_isatty_r+0x1a>
 80129e8:	682b      	ldr	r3, [r5, #0]
 80129ea:	b103      	cbz	r3, 80129ee <_isatty_r+0x1a>
 80129ec:	6023      	str	r3, [r4, #0]
 80129ee:	bd38      	pop	{r3, r4, r5, pc}
 80129f0:	20010550 	.word	0x20010550

080129f4 <_lseek_r>:
 80129f4:	b538      	push	{r3, r4, r5, lr}
 80129f6:	4d07      	ldr	r5, [pc, #28]	; (8012a14 <_lseek_r+0x20>)
 80129f8:	4604      	mov	r4, r0
 80129fa:	4608      	mov	r0, r1
 80129fc:	4611      	mov	r1, r2
 80129fe:	2200      	movs	r2, #0
 8012a00:	602a      	str	r2, [r5, #0]
 8012a02:	461a      	mov	r2, r3
 8012a04:	f7f1 f970 	bl	8003ce8 <_lseek>
 8012a08:	1c43      	adds	r3, r0, #1
 8012a0a:	d102      	bne.n	8012a12 <_lseek_r+0x1e>
 8012a0c:	682b      	ldr	r3, [r5, #0]
 8012a0e:	b103      	cbz	r3, 8012a12 <_lseek_r+0x1e>
 8012a10:	6023      	str	r3, [r4, #0]
 8012a12:	bd38      	pop	{r3, r4, r5, pc}
 8012a14:	20010550 	.word	0x20010550

08012a18 <__malloc_lock>:
 8012a18:	4801      	ldr	r0, [pc, #4]	; (8012a20 <__malloc_lock+0x8>)
 8012a1a:	f7ff bb55 	b.w	80120c8 <__retarget_lock_acquire_recursive>
 8012a1e:	bf00      	nop
 8012a20:	20010548 	.word	0x20010548

08012a24 <__malloc_unlock>:
 8012a24:	4801      	ldr	r0, [pc, #4]	; (8012a2c <__malloc_unlock+0x8>)
 8012a26:	f7ff bb50 	b.w	80120ca <__retarget_lock_release_recursive>
 8012a2a:	bf00      	nop
 8012a2c:	20010548 	.word	0x20010548

08012a30 <_read_r>:
 8012a30:	b538      	push	{r3, r4, r5, lr}
 8012a32:	4d07      	ldr	r5, [pc, #28]	; (8012a50 <_read_r+0x20>)
 8012a34:	4604      	mov	r4, r0
 8012a36:	4608      	mov	r0, r1
 8012a38:	4611      	mov	r1, r2
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	602a      	str	r2, [r5, #0]
 8012a3e:	461a      	mov	r2, r3
 8012a40:	f7f1 f8f2 	bl	8003c28 <_read>
 8012a44:	1c43      	adds	r3, r0, #1
 8012a46:	d102      	bne.n	8012a4e <_read_r+0x1e>
 8012a48:	682b      	ldr	r3, [r5, #0]
 8012a4a:	b103      	cbz	r3, 8012a4e <_read_r+0x1e>
 8012a4c:	6023      	str	r3, [r4, #0]
 8012a4e:	bd38      	pop	{r3, r4, r5, pc}
 8012a50:	20010550 	.word	0x20010550
 8012a54:	00000000 	.word	0x00000000

08012a58 <tan>:
 8012a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a5a:	ec53 2b10 	vmov	r2, r3, d0
 8012a5e:	4814      	ldr	r0, [pc, #80]	; (8012ab0 <tan+0x58>)
 8012a60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012a64:	4281      	cmp	r1, r0
 8012a66:	dc05      	bgt.n	8012a74 <tan+0x1c>
 8012a68:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8012aa8 <tan+0x50>
 8012a6c:	2001      	movs	r0, #1
 8012a6e:	f000 fd6f 	bl	8013550 <__kernel_tan>
 8012a72:	e009      	b.n	8012a88 <tan+0x30>
 8012a74:	480f      	ldr	r0, [pc, #60]	; (8012ab4 <tan+0x5c>)
 8012a76:	4281      	cmp	r1, r0
 8012a78:	dd09      	ble.n	8012a8e <tan+0x36>
 8012a7a:	ee10 0a10 	vmov	r0, s0
 8012a7e:	4619      	mov	r1, r3
 8012a80:	f7ed fc02 	bl	8000288 <__aeabi_dsub>
 8012a84:	ec41 0b10 	vmov	d0, r0, r1
 8012a88:	b005      	add	sp, #20
 8012a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a8e:	4668      	mov	r0, sp
 8012a90:	f000 f812 	bl	8012ab8 <__ieee754_rem_pio2>
 8012a94:	0040      	lsls	r0, r0, #1
 8012a96:	f000 0002 	and.w	r0, r0, #2
 8012a9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a9e:	ed9d 0b00 	vldr	d0, [sp]
 8012aa2:	f1c0 0001 	rsb	r0, r0, #1
 8012aa6:	e7e2      	b.n	8012a6e <tan+0x16>
	...
 8012ab0:	3fe921fb 	.word	0x3fe921fb
 8012ab4:	7fefffff 	.word	0x7fefffff

08012ab8 <__ieee754_rem_pio2>:
 8012ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012abc:	ed2d 8b02 	vpush	{d8}
 8012ac0:	ec55 4b10 	vmov	r4, r5, d0
 8012ac4:	4bca      	ldr	r3, [pc, #808]	; (8012df0 <__ieee754_rem_pio2+0x338>)
 8012ac6:	b08b      	sub	sp, #44	; 0x2c
 8012ac8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012acc:	4598      	cmp	r8, r3
 8012ace:	4682      	mov	sl, r0
 8012ad0:	9502      	str	r5, [sp, #8]
 8012ad2:	dc08      	bgt.n	8012ae6 <__ieee754_rem_pio2+0x2e>
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	ed80 0b00 	vstr	d0, [r0]
 8012adc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012ae0:	f04f 0b00 	mov.w	fp, #0
 8012ae4:	e028      	b.n	8012b38 <__ieee754_rem_pio2+0x80>
 8012ae6:	4bc3      	ldr	r3, [pc, #780]	; (8012df4 <__ieee754_rem_pio2+0x33c>)
 8012ae8:	4598      	cmp	r8, r3
 8012aea:	dc78      	bgt.n	8012bde <__ieee754_rem_pio2+0x126>
 8012aec:	9b02      	ldr	r3, [sp, #8]
 8012aee:	4ec2      	ldr	r6, [pc, #776]	; (8012df8 <__ieee754_rem_pio2+0x340>)
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	ee10 0a10 	vmov	r0, s0
 8012af6:	a3b0      	add	r3, pc, #704	; (adr r3, 8012db8 <__ieee754_rem_pio2+0x300>)
 8012af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afc:	4629      	mov	r1, r5
 8012afe:	dd39      	ble.n	8012b74 <__ieee754_rem_pio2+0xbc>
 8012b00:	f7ed fbc2 	bl	8000288 <__aeabi_dsub>
 8012b04:	45b0      	cmp	r8, r6
 8012b06:	4604      	mov	r4, r0
 8012b08:	460d      	mov	r5, r1
 8012b0a:	d01b      	beq.n	8012b44 <__ieee754_rem_pio2+0x8c>
 8012b0c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012dc0 <__ieee754_rem_pio2+0x308>)
 8012b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b12:	f7ed fbb9 	bl	8000288 <__aeabi_dsub>
 8012b16:	4602      	mov	r2, r0
 8012b18:	460b      	mov	r3, r1
 8012b1a:	e9ca 2300 	strd	r2, r3, [sl]
 8012b1e:	4620      	mov	r0, r4
 8012b20:	4629      	mov	r1, r5
 8012b22:	f7ed fbb1 	bl	8000288 <__aeabi_dsub>
 8012b26:	a3a6      	add	r3, pc, #664	; (adr r3, 8012dc0 <__ieee754_rem_pio2+0x308>)
 8012b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2c:	f7ed fbac 	bl	8000288 <__aeabi_dsub>
 8012b30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b34:	f04f 0b01 	mov.w	fp, #1
 8012b38:	4658      	mov	r0, fp
 8012b3a:	b00b      	add	sp, #44	; 0x2c
 8012b3c:	ecbd 8b02 	vpop	{d8}
 8012b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b44:	a3a0      	add	r3, pc, #640	; (adr r3, 8012dc8 <__ieee754_rem_pio2+0x310>)
 8012b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4a:	f7ed fb9d 	bl	8000288 <__aeabi_dsub>
 8012b4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012dd0 <__ieee754_rem_pio2+0x318>)
 8012b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b54:	4604      	mov	r4, r0
 8012b56:	460d      	mov	r5, r1
 8012b58:	f7ed fb96 	bl	8000288 <__aeabi_dsub>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	e9ca 2300 	strd	r2, r3, [sl]
 8012b64:	4620      	mov	r0, r4
 8012b66:	4629      	mov	r1, r5
 8012b68:	f7ed fb8e 	bl	8000288 <__aeabi_dsub>
 8012b6c:	a398      	add	r3, pc, #608	; (adr r3, 8012dd0 <__ieee754_rem_pio2+0x318>)
 8012b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b72:	e7db      	b.n	8012b2c <__ieee754_rem_pio2+0x74>
 8012b74:	f7ed fb8a 	bl	800028c <__adddf3>
 8012b78:	45b0      	cmp	r8, r6
 8012b7a:	4604      	mov	r4, r0
 8012b7c:	460d      	mov	r5, r1
 8012b7e:	d016      	beq.n	8012bae <__ieee754_rem_pio2+0xf6>
 8012b80:	a38f      	add	r3, pc, #572	; (adr r3, 8012dc0 <__ieee754_rem_pio2+0x308>)
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	f7ed fb81 	bl	800028c <__adddf3>
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	e9ca 2300 	strd	r2, r3, [sl]
 8012b92:	4620      	mov	r0, r4
 8012b94:	4629      	mov	r1, r5
 8012b96:	f7ed fb77 	bl	8000288 <__aeabi_dsub>
 8012b9a:	a389      	add	r3, pc, #548	; (adr r3, 8012dc0 <__ieee754_rem_pio2+0x308>)
 8012b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba0:	f7ed fb74 	bl	800028c <__adddf3>
 8012ba4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8012ba8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012bac:	e7c4      	b.n	8012b38 <__ieee754_rem_pio2+0x80>
 8012bae:	a386      	add	r3, pc, #536	; (adr r3, 8012dc8 <__ieee754_rem_pio2+0x310>)
 8012bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb4:	f7ed fb6a 	bl	800028c <__adddf3>
 8012bb8:	a385      	add	r3, pc, #532	; (adr r3, 8012dd0 <__ieee754_rem_pio2+0x318>)
 8012bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	460d      	mov	r5, r1
 8012bc2:	f7ed fb63 	bl	800028c <__adddf3>
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	460b      	mov	r3, r1
 8012bca:	e9ca 2300 	strd	r2, r3, [sl]
 8012bce:	4620      	mov	r0, r4
 8012bd0:	4629      	mov	r1, r5
 8012bd2:	f7ed fb59 	bl	8000288 <__aeabi_dsub>
 8012bd6:	a37e      	add	r3, pc, #504	; (adr r3, 8012dd0 <__ieee754_rem_pio2+0x318>)
 8012bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bdc:	e7e0      	b.n	8012ba0 <__ieee754_rem_pio2+0xe8>
 8012bde:	4b87      	ldr	r3, [pc, #540]	; (8012dfc <__ieee754_rem_pio2+0x344>)
 8012be0:	4598      	cmp	r8, r3
 8012be2:	f300 80d9 	bgt.w	8012d98 <__ieee754_rem_pio2+0x2e0>
 8012be6:	f000 fe87 	bl	80138f8 <fabs>
 8012bea:	ec55 4b10 	vmov	r4, r5, d0
 8012bee:	ee10 0a10 	vmov	r0, s0
 8012bf2:	a379      	add	r3, pc, #484	; (adr r3, 8012dd8 <__ieee754_rem_pio2+0x320>)
 8012bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	f7ed fcfd 	bl	80005f8 <__aeabi_dmul>
 8012bfe:	4b80      	ldr	r3, [pc, #512]	; (8012e00 <__ieee754_rem_pio2+0x348>)
 8012c00:	2200      	movs	r2, #0
 8012c02:	f7ed fb43 	bl	800028c <__adddf3>
 8012c06:	f7ed ff91 	bl	8000b2c <__aeabi_d2iz>
 8012c0a:	4683      	mov	fp, r0
 8012c0c:	f7ed fc8a 	bl	8000524 <__aeabi_i2d>
 8012c10:	4602      	mov	r2, r0
 8012c12:	460b      	mov	r3, r1
 8012c14:	ec43 2b18 	vmov	d8, r2, r3
 8012c18:	a367      	add	r3, pc, #412	; (adr r3, 8012db8 <__ieee754_rem_pio2+0x300>)
 8012c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c1e:	f7ed fceb 	bl	80005f8 <__aeabi_dmul>
 8012c22:	4602      	mov	r2, r0
 8012c24:	460b      	mov	r3, r1
 8012c26:	4620      	mov	r0, r4
 8012c28:	4629      	mov	r1, r5
 8012c2a:	f7ed fb2d 	bl	8000288 <__aeabi_dsub>
 8012c2e:	a364      	add	r3, pc, #400	; (adr r3, 8012dc0 <__ieee754_rem_pio2+0x308>)
 8012c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c34:	4606      	mov	r6, r0
 8012c36:	460f      	mov	r7, r1
 8012c38:	ec51 0b18 	vmov	r0, r1, d8
 8012c3c:	f7ed fcdc 	bl	80005f8 <__aeabi_dmul>
 8012c40:	f1bb 0f1f 	cmp.w	fp, #31
 8012c44:	4604      	mov	r4, r0
 8012c46:	460d      	mov	r5, r1
 8012c48:	dc0d      	bgt.n	8012c66 <__ieee754_rem_pio2+0x1ae>
 8012c4a:	4b6e      	ldr	r3, [pc, #440]	; (8012e04 <__ieee754_rem_pio2+0x34c>)
 8012c4c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8012c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c54:	4543      	cmp	r3, r8
 8012c56:	d006      	beq.n	8012c66 <__ieee754_rem_pio2+0x1ae>
 8012c58:	4622      	mov	r2, r4
 8012c5a:	462b      	mov	r3, r5
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	4639      	mov	r1, r7
 8012c60:	f7ed fb12 	bl	8000288 <__aeabi_dsub>
 8012c64:	e00f      	b.n	8012c86 <__ieee754_rem_pio2+0x1ce>
 8012c66:	462b      	mov	r3, r5
 8012c68:	4622      	mov	r2, r4
 8012c6a:	4630      	mov	r0, r6
 8012c6c:	4639      	mov	r1, r7
 8012c6e:	f7ed fb0b 	bl	8000288 <__aeabi_dsub>
 8012c72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012c76:	9303      	str	r3, [sp, #12]
 8012c78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012c7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012c80:	f1b8 0f10 	cmp.w	r8, #16
 8012c84:	dc02      	bgt.n	8012c8c <__ieee754_rem_pio2+0x1d4>
 8012c86:	e9ca 0100 	strd	r0, r1, [sl]
 8012c8a:	e039      	b.n	8012d00 <__ieee754_rem_pio2+0x248>
 8012c8c:	a34e      	add	r3, pc, #312	; (adr r3, 8012dc8 <__ieee754_rem_pio2+0x310>)
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	ec51 0b18 	vmov	r0, r1, d8
 8012c96:	f7ed fcaf 	bl	80005f8 <__aeabi_dmul>
 8012c9a:	4604      	mov	r4, r0
 8012c9c:	460d      	mov	r5, r1
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	f7ed faef 	bl	8000288 <__aeabi_dsub>
 8012caa:	4602      	mov	r2, r0
 8012cac:	460b      	mov	r3, r1
 8012cae:	4680      	mov	r8, r0
 8012cb0:	4689      	mov	r9, r1
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	4639      	mov	r1, r7
 8012cb6:	f7ed fae7 	bl	8000288 <__aeabi_dsub>
 8012cba:	4622      	mov	r2, r4
 8012cbc:	462b      	mov	r3, r5
 8012cbe:	f7ed fae3 	bl	8000288 <__aeabi_dsub>
 8012cc2:	a343      	add	r3, pc, #268	; (adr r3, 8012dd0 <__ieee754_rem_pio2+0x318>)
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	4604      	mov	r4, r0
 8012cca:	460d      	mov	r5, r1
 8012ccc:	ec51 0b18 	vmov	r0, r1, d8
 8012cd0:	f7ed fc92 	bl	80005f8 <__aeabi_dmul>
 8012cd4:	4622      	mov	r2, r4
 8012cd6:	462b      	mov	r3, r5
 8012cd8:	f7ed fad6 	bl	8000288 <__aeabi_dsub>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	460b      	mov	r3, r1
 8012ce0:	4604      	mov	r4, r0
 8012ce2:	460d      	mov	r5, r1
 8012ce4:	4640      	mov	r0, r8
 8012ce6:	4649      	mov	r1, r9
 8012ce8:	f7ed face 	bl	8000288 <__aeabi_dsub>
 8012cec:	9a03      	ldr	r2, [sp, #12]
 8012cee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012cf2:	1ad3      	subs	r3, r2, r3
 8012cf4:	2b31      	cmp	r3, #49	; 0x31
 8012cf6:	dc24      	bgt.n	8012d42 <__ieee754_rem_pio2+0x28a>
 8012cf8:	e9ca 0100 	strd	r0, r1, [sl]
 8012cfc:	4646      	mov	r6, r8
 8012cfe:	464f      	mov	r7, r9
 8012d00:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d04:	4630      	mov	r0, r6
 8012d06:	4642      	mov	r2, r8
 8012d08:	464b      	mov	r3, r9
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	f7ed fabc 	bl	8000288 <__aeabi_dsub>
 8012d10:	462b      	mov	r3, r5
 8012d12:	4622      	mov	r2, r4
 8012d14:	f7ed fab8 	bl	8000288 <__aeabi_dsub>
 8012d18:	9b02      	ldr	r3, [sp, #8]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012d20:	f6bf af0a 	bge.w	8012b38 <__ieee754_rem_pio2+0x80>
 8012d24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012d28:	f8ca 3004 	str.w	r3, [sl, #4]
 8012d2c:	f8ca 8000 	str.w	r8, [sl]
 8012d30:	f8ca 0008 	str.w	r0, [sl, #8]
 8012d34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d38:	f8ca 300c 	str.w	r3, [sl, #12]
 8012d3c:	f1cb 0b00 	rsb	fp, fp, #0
 8012d40:	e6fa      	b.n	8012b38 <__ieee754_rem_pio2+0x80>
 8012d42:	a327      	add	r3, pc, #156	; (adr r3, 8012de0 <__ieee754_rem_pio2+0x328>)
 8012d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d48:	ec51 0b18 	vmov	r0, r1, d8
 8012d4c:	f7ed fc54 	bl	80005f8 <__aeabi_dmul>
 8012d50:	4604      	mov	r4, r0
 8012d52:	460d      	mov	r5, r1
 8012d54:	4602      	mov	r2, r0
 8012d56:	460b      	mov	r3, r1
 8012d58:	4640      	mov	r0, r8
 8012d5a:	4649      	mov	r1, r9
 8012d5c:	f7ed fa94 	bl	8000288 <__aeabi_dsub>
 8012d60:	4602      	mov	r2, r0
 8012d62:	460b      	mov	r3, r1
 8012d64:	4606      	mov	r6, r0
 8012d66:	460f      	mov	r7, r1
 8012d68:	4640      	mov	r0, r8
 8012d6a:	4649      	mov	r1, r9
 8012d6c:	f7ed fa8c 	bl	8000288 <__aeabi_dsub>
 8012d70:	4622      	mov	r2, r4
 8012d72:	462b      	mov	r3, r5
 8012d74:	f7ed fa88 	bl	8000288 <__aeabi_dsub>
 8012d78:	a31b      	add	r3, pc, #108	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x330>)
 8012d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7e:	4604      	mov	r4, r0
 8012d80:	460d      	mov	r5, r1
 8012d82:	ec51 0b18 	vmov	r0, r1, d8
 8012d86:	f7ed fc37 	bl	80005f8 <__aeabi_dmul>
 8012d8a:	4622      	mov	r2, r4
 8012d8c:	462b      	mov	r3, r5
 8012d8e:	f7ed fa7b 	bl	8000288 <__aeabi_dsub>
 8012d92:	4604      	mov	r4, r0
 8012d94:	460d      	mov	r5, r1
 8012d96:	e75f      	b.n	8012c58 <__ieee754_rem_pio2+0x1a0>
 8012d98:	4b1b      	ldr	r3, [pc, #108]	; (8012e08 <__ieee754_rem_pio2+0x350>)
 8012d9a:	4598      	cmp	r8, r3
 8012d9c:	dd36      	ble.n	8012e0c <__ieee754_rem_pio2+0x354>
 8012d9e:	ee10 2a10 	vmov	r2, s0
 8012da2:	462b      	mov	r3, r5
 8012da4:	4620      	mov	r0, r4
 8012da6:	4629      	mov	r1, r5
 8012da8:	f7ed fa6e 	bl	8000288 <__aeabi_dsub>
 8012dac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012db0:	e9ca 0100 	strd	r0, r1, [sl]
 8012db4:	e694      	b.n	8012ae0 <__ieee754_rem_pio2+0x28>
 8012db6:	bf00      	nop
 8012db8:	54400000 	.word	0x54400000
 8012dbc:	3ff921fb 	.word	0x3ff921fb
 8012dc0:	1a626331 	.word	0x1a626331
 8012dc4:	3dd0b461 	.word	0x3dd0b461
 8012dc8:	1a600000 	.word	0x1a600000
 8012dcc:	3dd0b461 	.word	0x3dd0b461
 8012dd0:	2e037073 	.word	0x2e037073
 8012dd4:	3ba3198a 	.word	0x3ba3198a
 8012dd8:	6dc9c883 	.word	0x6dc9c883
 8012ddc:	3fe45f30 	.word	0x3fe45f30
 8012de0:	2e000000 	.word	0x2e000000
 8012de4:	3ba3198a 	.word	0x3ba3198a
 8012de8:	252049c1 	.word	0x252049c1
 8012dec:	397b839a 	.word	0x397b839a
 8012df0:	3fe921fb 	.word	0x3fe921fb
 8012df4:	4002d97b 	.word	0x4002d97b
 8012df8:	3ff921fb 	.word	0x3ff921fb
 8012dfc:	413921fb 	.word	0x413921fb
 8012e00:	3fe00000 	.word	0x3fe00000
 8012e04:	0801443c 	.word	0x0801443c
 8012e08:	7fefffff 	.word	0x7fefffff
 8012e0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012e10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012e14:	ee10 0a10 	vmov	r0, s0
 8012e18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012e1c:	ee10 6a10 	vmov	r6, s0
 8012e20:	460f      	mov	r7, r1
 8012e22:	f7ed fe83 	bl	8000b2c <__aeabi_d2iz>
 8012e26:	f7ed fb7d 	bl	8000524 <__aeabi_i2d>
 8012e2a:	4602      	mov	r2, r0
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	4630      	mov	r0, r6
 8012e30:	4639      	mov	r1, r7
 8012e32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e36:	f7ed fa27 	bl	8000288 <__aeabi_dsub>
 8012e3a:	4b22      	ldr	r3, [pc, #136]	; (8012ec4 <__ieee754_rem_pio2+0x40c>)
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	f7ed fbdb 	bl	80005f8 <__aeabi_dmul>
 8012e42:	460f      	mov	r7, r1
 8012e44:	4606      	mov	r6, r0
 8012e46:	f7ed fe71 	bl	8000b2c <__aeabi_d2iz>
 8012e4a:	f7ed fb6b 	bl	8000524 <__aeabi_i2d>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	460b      	mov	r3, r1
 8012e52:	4630      	mov	r0, r6
 8012e54:	4639      	mov	r1, r7
 8012e56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012e5a:	f7ed fa15 	bl	8000288 <__aeabi_dsub>
 8012e5e:	4b19      	ldr	r3, [pc, #100]	; (8012ec4 <__ieee754_rem_pio2+0x40c>)
 8012e60:	2200      	movs	r2, #0
 8012e62:	f7ed fbc9 	bl	80005f8 <__aeabi_dmul>
 8012e66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e6a:	ad04      	add	r5, sp, #16
 8012e6c:	f04f 0803 	mov.w	r8, #3
 8012e70:	46a9      	mov	r9, r5
 8012e72:	2600      	movs	r6, #0
 8012e74:	2700      	movs	r7, #0
 8012e76:	4632      	mov	r2, r6
 8012e78:	463b      	mov	r3, r7
 8012e7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012e7e:	46c3      	mov	fp, r8
 8012e80:	3d08      	subs	r5, #8
 8012e82:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012e86:	f7ed fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d1f3      	bne.n	8012e76 <__ieee754_rem_pio2+0x3be>
 8012e8e:	4b0e      	ldr	r3, [pc, #56]	; (8012ec8 <__ieee754_rem_pio2+0x410>)
 8012e90:	9301      	str	r3, [sp, #4]
 8012e92:	2302      	movs	r3, #2
 8012e94:	9300      	str	r3, [sp, #0]
 8012e96:	4622      	mov	r2, r4
 8012e98:	465b      	mov	r3, fp
 8012e9a:	4651      	mov	r1, sl
 8012e9c:	4648      	mov	r0, r9
 8012e9e:	f000 f817 	bl	8012ed0 <__kernel_rem_pio2>
 8012ea2:	9b02      	ldr	r3, [sp, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	4683      	mov	fp, r0
 8012ea8:	f6bf ae46 	bge.w	8012b38 <__ieee754_rem_pio2+0x80>
 8012eac:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012eb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012eb4:	f8ca 3004 	str.w	r3, [sl, #4]
 8012eb8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012ebc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012ec0:	e73a      	b.n	8012d38 <__ieee754_rem_pio2+0x280>
 8012ec2:	bf00      	nop
 8012ec4:	41700000 	.word	0x41700000
 8012ec8:	080144bc 	.word	0x080144bc
 8012ecc:	00000000 	.word	0x00000000

08012ed0 <__kernel_rem_pio2>:
 8012ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ed4:	ed2d 8b02 	vpush	{d8}
 8012ed8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012edc:	f112 0f14 	cmn.w	r2, #20
 8012ee0:	9308      	str	r3, [sp, #32]
 8012ee2:	9101      	str	r1, [sp, #4]
 8012ee4:	4bc6      	ldr	r3, [pc, #792]	; (8013200 <__kernel_rem_pio2+0x330>)
 8012ee6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012ee8:	9009      	str	r0, [sp, #36]	; 0x24
 8012eea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012eee:	9304      	str	r3, [sp, #16]
 8012ef0:	9b08      	ldr	r3, [sp, #32]
 8012ef2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012ef6:	bfa8      	it	ge
 8012ef8:	1ed4      	subge	r4, r2, #3
 8012efa:	9306      	str	r3, [sp, #24]
 8012efc:	bfb2      	itee	lt
 8012efe:	2400      	movlt	r4, #0
 8012f00:	2318      	movge	r3, #24
 8012f02:	fb94 f4f3 	sdivge	r4, r4, r3
 8012f06:	f06f 0317 	mvn.w	r3, #23
 8012f0a:	fb04 3303 	mla	r3, r4, r3, r3
 8012f0e:	eb03 0a02 	add.w	sl, r3, r2
 8012f12:	9b04      	ldr	r3, [sp, #16]
 8012f14:	9a06      	ldr	r2, [sp, #24]
 8012f16:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80131f0 <__kernel_rem_pio2+0x320>
 8012f1a:	eb03 0802 	add.w	r8, r3, r2
 8012f1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012f20:	1aa7      	subs	r7, r4, r2
 8012f22:	ae20      	add	r6, sp, #128	; 0x80
 8012f24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012f28:	2500      	movs	r5, #0
 8012f2a:	4545      	cmp	r5, r8
 8012f2c:	dd18      	ble.n	8012f60 <__kernel_rem_pio2+0x90>
 8012f2e:	9b08      	ldr	r3, [sp, #32]
 8012f30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012f34:	aa20      	add	r2, sp, #128	; 0x80
 8012f36:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80131f0 <__kernel_rem_pio2+0x320>
 8012f3a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012f3e:	f1c3 0301 	rsb	r3, r3, #1
 8012f42:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012f46:	9307      	str	r3, [sp, #28]
 8012f48:	9b07      	ldr	r3, [sp, #28]
 8012f4a:	9a04      	ldr	r2, [sp, #16]
 8012f4c:	4443      	add	r3, r8
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	db2f      	blt.n	8012fb2 <__kernel_rem_pio2+0xe2>
 8012f52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012f56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012f5a:	462f      	mov	r7, r5
 8012f5c:	2600      	movs	r6, #0
 8012f5e:	e01b      	b.n	8012f98 <__kernel_rem_pio2+0xc8>
 8012f60:	42ef      	cmn	r7, r5
 8012f62:	d407      	bmi.n	8012f74 <__kernel_rem_pio2+0xa4>
 8012f64:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012f68:	f7ed fadc 	bl	8000524 <__aeabi_i2d>
 8012f6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012f70:	3501      	adds	r5, #1
 8012f72:	e7da      	b.n	8012f2a <__kernel_rem_pio2+0x5a>
 8012f74:	ec51 0b18 	vmov	r0, r1, d8
 8012f78:	e7f8      	b.n	8012f6c <__kernel_rem_pio2+0x9c>
 8012f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f7e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012f82:	f7ed fb39 	bl	80005f8 <__aeabi_dmul>
 8012f86:	4602      	mov	r2, r0
 8012f88:	460b      	mov	r3, r1
 8012f8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f8e:	f7ed f97d 	bl	800028c <__adddf3>
 8012f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f96:	3601      	adds	r6, #1
 8012f98:	9b06      	ldr	r3, [sp, #24]
 8012f9a:	429e      	cmp	r6, r3
 8012f9c:	f1a7 0708 	sub.w	r7, r7, #8
 8012fa0:	ddeb      	ble.n	8012f7a <__kernel_rem_pio2+0xaa>
 8012fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012fa6:	3508      	adds	r5, #8
 8012fa8:	ecab 7b02 	vstmia	fp!, {d7}
 8012fac:	f108 0801 	add.w	r8, r8, #1
 8012fb0:	e7ca      	b.n	8012f48 <__kernel_rem_pio2+0x78>
 8012fb2:	9b04      	ldr	r3, [sp, #16]
 8012fb4:	aa0c      	add	r2, sp, #48	; 0x30
 8012fb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fbc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012fbe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012fc2:	9c04      	ldr	r4, [sp, #16]
 8012fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8012fc6:	ab98      	add	r3, sp, #608	; 0x260
 8012fc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012fcc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012fd0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8012fd4:	f8cd b008 	str.w	fp, [sp, #8]
 8012fd8:	4625      	mov	r5, r4
 8012fda:	2d00      	cmp	r5, #0
 8012fdc:	dc78      	bgt.n	80130d0 <__kernel_rem_pio2+0x200>
 8012fde:	ec47 6b10 	vmov	d0, r6, r7
 8012fe2:	4650      	mov	r0, sl
 8012fe4:	f000 fd14 	bl	8013a10 <scalbn>
 8012fe8:	ec57 6b10 	vmov	r6, r7, d0
 8012fec:	2200      	movs	r2, #0
 8012fee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012ff2:	ee10 0a10 	vmov	r0, s0
 8012ff6:	4639      	mov	r1, r7
 8012ff8:	f7ed fafe 	bl	80005f8 <__aeabi_dmul>
 8012ffc:	ec41 0b10 	vmov	d0, r0, r1
 8013000:	f000 fc86 	bl	8013910 <floor>
 8013004:	4b7f      	ldr	r3, [pc, #508]	; (8013204 <__kernel_rem_pio2+0x334>)
 8013006:	ec51 0b10 	vmov	r0, r1, d0
 801300a:	2200      	movs	r2, #0
 801300c:	f7ed faf4 	bl	80005f8 <__aeabi_dmul>
 8013010:	4602      	mov	r2, r0
 8013012:	460b      	mov	r3, r1
 8013014:	4630      	mov	r0, r6
 8013016:	4639      	mov	r1, r7
 8013018:	f7ed f936 	bl	8000288 <__aeabi_dsub>
 801301c:	460f      	mov	r7, r1
 801301e:	4606      	mov	r6, r0
 8013020:	f7ed fd84 	bl	8000b2c <__aeabi_d2iz>
 8013024:	9007      	str	r0, [sp, #28]
 8013026:	f7ed fa7d 	bl	8000524 <__aeabi_i2d>
 801302a:	4602      	mov	r2, r0
 801302c:	460b      	mov	r3, r1
 801302e:	4630      	mov	r0, r6
 8013030:	4639      	mov	r1, r7
 8013032:	f7ed f929 	bl	8000288 <__aeabi_dsub>
 8013036:	f1ba 0f00 	cmp.w	sl, #0
 801303a:	4606      	mov	r6, r0
 801303c:	460f      	mov	r7, r1
 801303e:	dd70      	ble.n	8013122 <__kernel_rem_pio2+0x252>
 8013040:	1e62      	subs	r2, r4, #1
 8013042:	ab0c      	add	r3, sp, #48	; 0x30
 8013044:	9d07      	ldr	r5, [sp, #28]
 8013046:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801304a:	f1ca 0118 	rsb	r1, sl, #24
 801304e:	fa40 f301 	asr.w	r3, r0, r1
 8013052:	441d      	add	r5, r3
 8013054:	408b      	lsls	r3, r1
 8013056:	1ac0      	subs	r0, r0, r3
 8013058:	ab0c      	add	r3, sp, #48	; 0x30
 801305a:	9507      	str	r5, [sp, #28]
 801305c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013060:	f1ca 0317 	rsb	r3, sl, #23
 8013064:	fa40 f303 	asr.w	r3, r0, r3
 8013068:	9302      	str	r3, [sp, #8]
 801306a:	9b02      	ldr	r3, [sp, #8]
 801306c:	2b00      	cmp	r3, #0
 801306e:	dd66      	ble.n	801313e <__kernel_rem_pio2+0x26e>
 8013070:	9b07      	ldr	r3, [sp, #28]
 8013072:	2200      	movs	r2, #0
 8013074:	3301      	adds	r3, #1
 8013076:	9307      	str	r3, [sp, #28]
 8013078:	4615      	mov	r5, r2
 801307a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801307e:	4294      	cmp	r4, r2
 8013080:	f300 8099 	bgt.w	80131b6 <__kernel_rem_pio2+0x2e6>
 8013084:	f1ba 0f00 	cmp.w	sl, #0
 8013088:	dd07      	ble.n	801309a <__kernel_rem_pio2+0x1ca>
 801308a:	f1ba 0f01 	cmp.w	sl, #1
 801308e:	f000 80a5 	beq.w	80131dc <__kernel_rem_pio2+0x30c>
 8013092:	f1ba 0f02 	cmp.w	sl, #2
 8013096:	f000 80c1 	beq.w	801321c <__kernel_rem_pio2+0x34c>
 801309a:	9b02      	ldr	r3, [sp, #8]
 801309c:	2b02      	cmp	r3, #2
 801309e:	d14e      	bne.n	801313e <__kernel_rem_pio2+0x26e>
 80130a0:	4632      	mov	r2, r6
 80130a2:	463b      	mov	r3, r7
 80130a4:	4958      	ldr	r1, [pc, #352]	; (8013208 <__kernel_rem_pio2+0x338>)
 80130a6:	2000      	movs	r0, #0
 80130a8:	f7ed f8ee 	bl	8000288 <__aeabi_dsub>
 80130ac:	4606      	mov	r6, r0
 80130ae:	460f      	mov	r7, r1
 80130b0:	2d00      	cmp	r5, #0
 80130b2:	d044      	beq.n	801313e <__kernel_rem_pio2+0x26e>
 80130b4:	4650      	mov	r0, sl
 80130b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80131f8 <__kernel_rem_pio2+0x328>
 80130ba:	f000 fca9 	bl	8013a10 <scalbn>
 80130be:	4630      	mov	r0, r6
 80130c0:	4639      	mov	r1, r7
 80130c2:	ec53 2b10 	vmov	r2, r3, d0
 80130c6:	f7ed f8df 	bl	8000288 <__aeabi_dsub>
 80130ca:	4606      	mov	r6, r0
 80130cc:	460f      	mov	r7, r1
 80130ce:	e036      	b.n	801313e <__kernel_rem_pio2+0x26e>
 80130d0:	4b4e      	ldr	r3, [pc, #312]	; (801320c <__kernel_rem_pio2+0x33c>)
 80130d2:	2200      	movs	r2, #0
 80130d4:	4630      	mov	r0, r6
 80130d6:	4639      	mov	r1, r7
 80130d8:	f7ed fa8e 	bl	80005f8 <__aeabi_dmul>
 80130dc:	f7ed fd26 	bl	8000b2c <__aeabi_d2iz>
 80130e0:	f7ed fa20 	bl	8000524 <__aeabi_i2d>
 80130e4:	4b4a      	ldr	r3, [pc, #296]	; (8013210 <__kernel_rem_pio2+0x340>)
 80130e6:	2200      	movs	r2, #0
 80130e8:	4680      	mov	r8, r0
 80130ea:	4689      	mov	r9, r1
 80130ec:	f7ed fa84 	bl	80005f8 <__aeabi_dmul>
 80130f0:	4602      	mov	r2, r0
 80130f2:	460b      	mov	r3, r1
 80130f4:	4630      	mov	r0, r6
 80130f6:	4639      	mov	r1, r7
 80130f8:	f7ed f8c6 	bl	8000288 <__aeabi_dsub>
 80130fc:	f7ed fd16 	bl	8000b2c <__aeabi_d2iz>
 8013100:	9b02      	ldr	r3, [sp, #8]
 8013102:	f843 0b04 	str.w	r0, [r3], #4
 8013106:	3d01      	subs	r5, #1
 8013108:	9302      	str	r3, [sp, #8]
 801310a:	ab70      	add	r3, sp, #448	; 0x1c0
 801310c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013114:	4640      	mov	r0, r8
 8013116:	4649      	mov	r1, r9
 8013118:	f7ed f8b8 	bl	800028c <__adddf3>
 801311c:	4606      	mov	r6, r0
 801311e:	460f      	mov	r7, r1
 8013120:	e75b      	b.n	8012fda <__kernel_rem_pio2+0x10a>
 8013122:	d105      	bne.n	8013130 <__kernel_rem_pio2+0x260>
 8013124:	1e63      	subs	r3, r4, #1
 8013126:	aa0c      	add	r2, sp, #48	; 0x30
 8013128:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801312c:	15c3      	asrs	r3, r0, #23
 801312e:	e79b      	b.n	8013068 <__kernel_rem_pio2+0x198>
 8013130:	4b38      	ldr	r3, [pc, #224]	; (8013214 <__kernel_rem_pio2+0x344>)
 8013132:	2200      	movs	r2, #0
 8013134:	f7ed fce6 	bl	8000b04 <__aeabi_dcmpge>
 8013138:	2800      	cmp	r0, #0
 801313a:	d139      	bne.n	80131b0 <__kernel_rem_pio2+0x2e0>
 801313c:	9002      	str	r0, [sp, #8]
 801313e:	2200      	movs	r2, #0
 8013140:	2300      	movs	r3, #0
 8013142:	4630      	mov	r0, r6
 8013144:	4639      	mov	r1, r7
 8013146:	f7ed fcbf 	bl	8000ac8 <__aeabi_dcmpeq>
 801314a:	2800      	cmp	r0, #0
 801314c:	f000 80b4 	beq.w	80132b8 <__kernel_rem_pio2+0x3e8>
 8013150:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8013154:	465b      	mov	r3, fp
 8013156:	2200      	movs	r2, #0
 8013158:	9904      	ldr	r1, [sp, #16]
 801315a:	428b      	cmp	r3, r1
 801315c:	da65      	bge.n	801322a <__kernel_rem_pio2+0x35a>
 801315e:	2a00      	cmp	r2, #0
 8013160:	d07b      	beq.n	801325a <__kernel_rem_pio2+0x38a>
 8013162:	ab0c      	add	r3, sp, #48	; 0x30
 8013164:	f1aa 0a18 	sub.w	sl, sl, #24
 8013168:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801316c:	2b00      	cmp	r3, #0
 801316e:	f000 80a0 	beq.w	80132b2 <__kernel_rem_pio2+0x3e2>
 8013172:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80131f8 <__kernel_rem_pio2+0x328>
 8013176:	4650      	mov	r0, sl
 8013178:	f000 fc4a 	bl	8013a10 <scalbn>
 801317c:	4f23      	ldr	r7, [pc, #140]	; (801320c <__kernel_rem_pio2+0x33c>)
 801317e:	ec55 4b10 	vmov	r4, r5, d0
 8013182:	46d8      	mov	r8, fp
 8013184:	2600      	movs	r6, #0
 8013186:	f1b8 0f00 	cmp.w	r8, #0
 801318a:	f280 80cf 	bge.w	801332c <__kernel_rem_pio2+0x45c>
 801318e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80131f0 <__kernel_rem_pio2+0x320>
 8013192:	465f      	mov	r7, fp
 8013194:	f04f 0800 	mov.w	r8, #0
 8013198:	2f00      	cmp	r7, #0
 801319a:	f2c0 80fd 	blt.w	8013398 <__kernel_rem_pio2+0x4c8>
 801319e:	ab70      	add	r3, sp, #448	; 0x1c0
 80131a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8013218 <__kernel_rem_pio2+0x348>
 80131a4:	ec55 4b18 	vmov	r4, r5, d8
 80131a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80131ac:	2600      	movs	r6, #0
 80131ae:	e0e5      	b.n	801337c <__kernel_rem_pio2+0x4ac>
 80131b0:	2302      	movs	r3, #2
 80131b2:	9302      	str	r3, [sp, #8]
 80131b4:	e75c      	b.n	8013070 <__kernel_rem_pio2+0x1a0>
 80131b6:	f8db 3000 	ldr.w	r3, [fp]
 80131ba:	b955      	cbnz	r5, 80131d2 <__kernel_rem_pio2+0x302>
 80131bc:	b123      	cbz	r3, 80131c8 <__kernel_rem_pio2+0x2f8>
 80131be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80131c2:	f8cb 3000 	str.w	r3, [fp]
 80131c6:	2301      	movs	r3, #1
 80131c8:	3201      	adds	r2, #1
 80131ca:	f10b 0b04 	add.w	fp, fp, #4
 80131ce:	461d      	mov	r5, r3
 80131d0:	e755      	b.n	801307e <__kernel_rem_pio2+0x1ae>
 80131d2:	1acb      	subs	r3, r1, r3
 80131d4:	f8cb 3000 	str.w	r3, [fp]
 80131d8:	462b      	mov	r3, r5
 80131da:	e7f5      	b.n	80131c8 <__kernel_rem_pio2+0x2f8>
 80131dc:	1e62      	subs	r2, r4, #1
 80131de:	ab0c      	add	r3, sp, #48	; 0x30
 80131e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80131e8:	a90c      	add	r1, sp, #48	; 0x30
 80131ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80131ee:	e754      	b.n	801309a <__kernel_rem_pio2+0x1ca>
	...
 80131fc:	3ff00000 	.word	0x3ff00000
 8013200:	08014608 	.word	0x08014608
 8013204:	40200000 	.word	0x40200000
 8013208:	3ff00000 	.word	0x3ff00000
 801320c:	3e700000 	.word	0x3e700000
 8013210:	41700000 	.word	0x41700000
 8013214:	3fe00000 	.word	0x3fe00000
 8013218:	080145c8 	.word	0x080145c8
 801321c:	1e62      	subs	r2, r4, #1
 801321e:	ab0c      	add	r3, sp, #48	; 0x30
 8013220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013224:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013228:	e7de      	b.n	80131e8 <__kernel_rem_pio2+0x318>
 801322a:	a90c      	add	r1, sp, #48	; 0x30
 801322c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013230:	3b01      	subs	r3, #1
 8013232:	430a      	orrs	r2, r1
 8013234:	e790      	b.n	8013158 <__kernel_rem_pio2+0x288>
 8013236:	3301      	adds	r3, #1
 8013238:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801323c:	2900      	cmp	r1, #0
 801323e:	d0fa      	beq.n	8013236 <__kernel_rem_pio2+0x366>
 8013240:	9a08      	ldr	r2, [sp, #32]
 8013242:	18e3      	adds	r3, r4, r3
 8013244:	18a6      	adds	r6, r4, r2
 8013246:	aa20      	add	r2, sp, #128	; 0x80
 8013248:	1c65      	adds	r5, r4, #1
 801324a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801324e:	9302      	str	r3, [sp, #8]
 8013250:	9b02      	ldr	r3, [sp, #8]
 8013252:	42ab      	cmp	r3, r5
 8013254:	da04      	bge.n	8013260 <__kernel_rem_pio2+0x390>
 8013256:	461c      	mov	r4, r3
 8013258:	e6b5      	b.n	8012fc6 <__kernel_rem_pio2+0xf6>
 801325a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801325c:	2301      	movs	r3, #1
 801325e:	e7eb      	b.n	8013238 <__kernel_rem_pio2+0x368>
 8013260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013266:	f7ed f95d 	bl	8000524 <__aeabi_i2d>
 801326a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801326e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013270:	46b3      	mov	fp, r6
 8013272:	461c      	mov	r4, r3
 8013274:	2700      	movs	r7, #0
 8013276:	f04f 0800 	mov.w	r8, #0
 801327a:	f04f 0900 	mov.w	r9, #0
 801327e:	9b06      	ldr	r3, [sp, #24]
 8013280:	429f      	cmp	r7, r3
 8013282:	dd06      	ble.n	8013292 <__kernel_rem_pio2+0x3c2>
 8013284:	ab70      	add	r3, sp, #448	; 0x1c0
 8013286:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801328a:	e9c3 8900 	strd	r8, r9, [r3]
 801328e:	3501      	adds	r5, #1
 8013290:	e7de      	b.n	8013250 <__kernel_rem_pio2+0x380>
 8013292:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013296:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801329a:	f7ed f9ad 	bl	80005f8 <__aeabi_dmul>
 801329e:	4602      	mov	r2, r0
 80132a0:	460b      	mov	r3, r1
 80132a2:	4640      	mov	r0, r8
 80132a4:	4649      	mov	r1, r9
 80132a6:	f7ec fff1 	bl	800028c <__adddf3>
 80132aa:	3701      	adds	r7, #1
 80132ac:	4680      	mov	r8, r0
 80132ae:	4689      	mov	r9, r1
 80132b0:	e7e5      	b.n	801327e <__kernel_rem_pio2+0x3ae>
 80132b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80132b6:	e754      	b.n	8013162 <__kernel_rem_pio2+0x292>
 80132b8:	ec47 6b10 	vmov	d0, r6, r7
 80132bc:	f1ca 0000 	rsb	r0, sl, #0
 80132c0:	f000 fba6 	bl	8013a10 <scalbn>
 80132c4:	ec57 6b10 	vmov	r6, r7, d0
 80132c8:	4b9f      	ldr	r3, [pc, #636]	; (8013548 <__kernel_rem_pio2+0x678>)
 80132ca:	ee10 0a10 	vmov	r0, s0
 80132ce:	2200      	movs	r2, #0
 80132d0:	4639      	mov	r1, r7
 80132d2:	f7ed fc17 	bl	8000b04 <__aeabi_dcmpge>
 80132d6:	b300      	cbz	r0, 801331a <__kernel_rem_pio2+0x44a>
 80132d8:	4b9c      	ldr	r3, [pc, #624]	; (801354c <__kernel_rem_pio2+0x67c>)
 80132da:	2200      	movs	r2, #0
 80132dc:	4630      	mov	r0, r6
 80132de:	4639      	mov	r1, r7
 80132e0:	f7ed f98a 	bl	80005f8 <__aeabi_dmul>
 80132e4:	f7ed fc22 	bl	8000b2c <__aeabi_d2iz>
 80132e8:	4605      	mov	r5, r0
 80132ea:	f7ed f91b 	bl	8000524 <__aeabi_i2d>
 80132ee:	4b96      	ldr	r3, [pc, #600]	; (8013548 <__kernel_rem_pio2+0x678>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	f7ed f981 	bl	80005f8 <__aeabi_dmul>
 80132f6:	460b      	mov	r3, r1
 80132f8:	4602      	mov	r2, r0
 80132fa:	4639      	mov	r1, r7
 80132fc:	4630      	mov	r0, r6
 80132fe:	f7ec ffc3 	bl	8000288 <__aeabi_dsub>
 8013302:	f7ed fc13 	bl	8000b2c <__aeabi_d2iz>
 8013306:	f104 0b01 	add.w	fp, r4, #1
 801330a:	ab0c      	add	r3, sp, #48	; 0x30
 801330c:	f10a 0a18 	add.w	sl, sl, #24
 8013310:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013314:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8013318:	e72b      	b.n	8013172 <__kernel_rem_pio2+0x2a2>
 801331a:	4630      	mov	r0, r6
 801331c:	4639      	mov	r1, r7
 801331e:	f7ed fc05 	bl	8000b2c <__aeabi_d2iz>
 8013322:	ab0c      	add	r3, sp, #48	; 0x30
 8013324:	46a3      	mov	fp, r4
 8013326:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801332a:	e722      	b.n	8013172 <__kernel_rem_pio2+0x2a2>
 801332c:	ab70      	add	r3, sp, #448	; 0x1c0
 801332e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8013332:	ab0c      	add	r3, sp, #48	; 0x30
 8013334:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013338:	f7ed f8f4 	bl	8000524 <__aeabi_i2d>
 801333c:	4622      	mov	r2, r4
 801333e:	462b      	mov	r3, r5
 8013340:	f7ed f95a 	bl	80005f8 <__aeabi_dmul>
 8013344:	4632      	mov	r2, r6
 8013346:	e9c9 0100 	strd	r0, r1, [r9]
 801334a:	463b      	mov	r3, r7
 801334c:	4620      	mov	r0, r4
 801334e:	4629      	mov	r1, r5
 8013350:	f7ed f952 	bl	80005f8 <__aeabi_dmul>
 8013354:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013358:	4604      	mov	r4, r0
 801335a:	460d      	mov	r5, r1
 801335c:	e713      	b.n	8013186 <__kernel_rem_pio2+0x2b6>
 801335e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013362:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013366:	f7ed f947 	bl	80005f8 <__aeabi_dmul>
 801336a:	4602      	mov	r2, r0
 801336c:	460b      	mov	r3, r1
 801336e:	4620      	mov	r0, r4
 8013370:	4629      	mov	r1, r5
 8013372:	f7ec ff8b 	bl	800028c <__adddf3>
 8013376:	3601      	adds	r6, #1
 8013378:	4604      	mov	r4, r0
 801337a:	460d      	mov	r5, r1
 801337c:	9b04      	ldr	r3, [sp, #16]
 801337e:	429e      	cmp	r6, r3
 8013380:	dc01      	bgt.n	8013386 <__kernel_rem_pio2+0x4b6>
 8013382:	45b0      	cmp	r8, r6
 8013384:	daeb      	bge.n	801335e <__kernel_rem_pio2+0x48e>
 8013386:	ab48      	add	r3, sp, #288	; 0x120
 8013388:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801338c:	e9c3 4500 	strd	r4, r5, [r3]
 8013390:	3f01      	subs	r7, #1
 8013392:	f108 0801 	add.w	r8, r8, #1
 8013396:	e6ff      	b.n	8013198 <__kernel_rem_pio2+0x2c8>
 8013398:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801339a:	2b02      	cmp	r3, #2
 801339c:	dc0b      	bgt.n	80133b6 <__kernel_rem_pio2+0x4e6>
 801339e:	2b00      	cmp	r3, #0
 80133a0:	dc6e      	bgt.n	8013480 <__kernel_rem_pio2+0x5b0>
 80133a2:	d045      	beq.n	8013430 <__kernel_rem_pio2+0x560>
 80133a4:	9b07      	ldr	r3, [sp, #28]
 80133a6:	f003 0007 	and.w	r0, r3, #7
 80133aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80133ae:	ecbd 8b02 	vpop	{d8}
 80133b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80133b8:	2b03      	cmp	r3, #3
 80133ba:	d1f3      	bne.n	80133a4 <__kernel_rem_pio2+0x4d4>
 80133bc:	ab48      	add	r3, sp, #288	; 0x120
 80133be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80133c2:	46d0      	mov	r8, sl
 80133c4:	46d9      	mov	r9, fp
 80133c6:	f1b9 0f00 	cmp.w	r9, #0
 80133ca:	f1a8 0808 	sub.w	r8, r8, #8
 80133ce:	dc64      	bgt.n	801349a <__kernel_rem_pio2+0x5ca>
 80133d0:	465c      	mov	r4, fp
 80133d2:	2c01      	cmp	r4, #1
 80133d4:	f1aa 0a08 	sub.w	sl, sl, #8
 80133d8:	dc7e      	bgt.n	80134d8 <__kernel_rem_pio2+0x608>
 80133da:	2000      	movs	r0, #0
 80133dc:	2100      	movs	r1, #0
 80133de:	f1bb 0f01 	cmp.w	fp, #1
 80133e2:	f300 8097 	bgt.w	8013514 <__kernel_rem_pio2+0x644>
 80133e6:	9b02      	ldr	r3, [sp, #8]
 80133e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80133ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	f040 8099 	bne.w	8013528 <__kernel_rem_pio2+0x658>
 80133f6:	9b01      	ldr	r3, [sp, #4]
 80133f8:	e9c3 5600 	strd	r5, r6, [r3]
 80133fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013400:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013404:	e7ce      	b.n	80133a4 <__kernel_rem_pio2+0x4d4>
 8013406:	ab48      	add	r3, sp, #288	; 0x120
 8013408:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013410:	f7ec ff3c 	bl	800028c <__adddf3>
 8013414:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013418:	f1bb 0f00 	cmp.w	fp, #0
 801341c:	daf3      	bge.n	8013406 <__kernel_rem_pio2+0x536>
 801341e:	9b02      	ldr	r3, [sp, #8]
 8013420:	b113      	cbz	r3, 8013428 <__kernel_rem_pio2+0x558>
 8013422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013426:	4619      	mov	r1, r3
 8013428:	9b01      	ldr	r3, [sp, #4]
 801342a:	e9c3 0100 	strd	r0, r1, [r3]
 801342e:	e7b9      	b.n	80133a4 <__kernel_rem_pio2+0x4d4>
 8013430:	2000      	movs	r0, #0
 8013432:	2100      	movs	r1, #0
 8013434:	e7f0      	b.n	8013418 <__kernel_rem_pio2+0x548>
 8013436:	ab48      	add	r3, sp, #288	; 0x120
 8013438:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013440:	f7ec ff24 	bl	800028c <__adddf3>
 8013444:	3c01      	subs	r4, #1
 8013446:	2c00      	cmp	r4, #0
 8013448:	daf5      	bge.n	8013436 <__kernel_rem_pio2+0x566>
 801344a:	9b02      	ldr	r3, [sp, #8]
 801344c:	b1e3      	cbz	r3, 8013488 <__kernel_rem_pio2+0x5b8>
 801344e:	4602      	mov	r2, r0
 8013450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013454:	9c01      	ldr	r4, [sp, #4]
 8013456:	e9c4 2300 	strd	r2, r3, [r4]
 801345a:	4602      	mov	r2, r0
 801345c:	460b      	mov	r3, r1
 801345e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013462:	f7ec ff11 	bl	8000288 <__aeabi_dsub>
 8013466:	ad4a      	add	r5, sp, #296	; 0x128
 8013468:	2401      	movs	r4, #1
 801346a:	45a3      	cmp	fp, r4
 801346c:	da0f      	bge.n	801348e <__kernel_rem_pio2+0x5be>
 801346e:	9b02      	ldr	r3, [sp, #8]
 8013470:	b113      	cbz	r3, 8013478 <__kernel_rem_pio2+0x5a8>
 8013472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013476:	4619      	mov	r1, r3
 8013478:	9b01      	ldr	r3, [sp, #4]
 801347a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801347e:	e791      	b.n	80133a4 <__kernel_rem_pio2+0x4d4>
 8013480:	465c      	mov	r4, fp
 8013482:	2000      	movs	r0, #0
 8013484:	2100      	movs	r1, #0
 8013486:	e7de      	b.n	8013446 <__kernel_rem_pio2+0x576>
 8013488:	4602      	mov	r2, r0
 801348a:	460b      	mov	r3, r1
 801348c:	e7e2      	b.n	8013454 <__kernel_rem_pio2+0x584>
 801348e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013492:	f7ec fefb 	bl	800028c <__adddf3>
 8013496:	3401      	adds	r4, #1
 8013498:	e7e7      	b.n	801346a <__kernel_rem_pio2+0x59a>
 801349a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801349e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80134a2:	4620      	mov	r0, r4
 80134a4:	4632      	mov	r2, r6
 80134a6:	463b      	mov	r3, r7
 80134a8:	4629      	mov	r1, r5
 80134aa:	f7ec feef 	bl	800028c <__adddf3>
 80134ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134b2:	4602      	mov	r2, r0
 80134b4:	460b      	mov	r3, r1
 80134b6:	4620      	mov	r0, r4
 80134b8:	4629      	mov	r1, r5
 80134ba:	f7ec fee5 	bl	8000288 <__aeabi_dsub>
 80134be:	4632      	mov	r2, r6
 80134c0:	463b      	mov	r3, r7
 80134c2:	f7ec fee3 	bl	800028c <__adddf3>
 80134c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80134ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80134ce:	ed88 7b00 	vstr	d7, [r8]
 80134d2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80134d6:	e776      	b.n	80133c6 <__kernel_rem_pio2+0x4f6>
 80134d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80134dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80134e0:	4640      	mov	r0, r8
 80134e2:	4632      	mov	r2, r6
 80134e4:	463b      	mov	r3, r7
 80134e6:	4649      	mov	r1, r9
 80134e8:	f7ec fed0 	bl	800028c <__adddf3>
 80134ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134f0:	4602      	mov	r2, r0
 80134f2:	460b      	mov	r3, r1
 80134f4:	4640      	mov	r0, r8
 80134f6:	4649      	mov	r1, r9
 80134f8:	f7ec fec6 	bl	8000288 <__aeabi_dsub>
 80134fc:	4632      	mov	r2, r6
 80134fe:	463b      	mov	r3, r7
 8013500:	f7ec fec4 	bl	800028c <__adddf3>
 8013504:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013508:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801350c:	ed8a 7b00 	vstr	d7, [sl]
 8013510:	3c01      	subs	r4, #1
 8013512:	e75e      	b.n	80133d2 <__kernel_rem_pio2+0x502>
 8013514:	ab48      	add	r3, sp, #288	; 0x120
 8013516:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351e:	f7ec feb5 	bl	800028c <__adddf3>
 8013522:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013526:	e75a      	b.n	80133de <__kernel_rem_pio2+0x50e>
 8013528:	9b01      	ldr	r3, [sp, #4]
 801352a:	9a01      	ldr	r2, [sp, #4]
 801352c:	601d      	str	r5, [r3, #0]
 801352e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013532:	605c      	str	r4, [r3, #4]
 8013534:	609f      	str	r7, [r3, #8]
 8013536:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801353a:	60d3      	str	r3, [r2, #12]
 801353c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013540:	6110      	str	r0, [r2, #16]
 8013542:	6153      	str	r3, [r2, #20]
 8013544:	e72e      	b.n	80133a4 <__kernel_rem_pio2+0x4d4>
 8013546:	bf00      	nop
 8013548:	41700000 	.word	0x41700000
 801354c:	3e700000 	.word	0x3e700000

08013550 <__kernel_tan>:
 8013550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013554:	ed2d 8b04 	vpush	{d8-d9}
 8013558:	ec5b ab10 	vmov	sl, fp, d0
 801355c:	4be2      	ldr	r3, [pc, #904]	; (80138e8 <__kernel_tan+0x398>)
 801355e:	b085      	sub	sp, #20
 8013560:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8013564:	429f      	cmp	r7, r3
 8013566:	ed8d 1b00 	vstr	d1, [sp]
 801356a:	4606      	mov	r6, r0
 801356c:	f8cd b00c 	str.w	fp, [sp, #12]
 8013570:	dc24      	bgt.n	80135bc <__kernel_tan+0x6c>
 8013572:	ee10 0a10 	vmov	r0, s0
 8013576:	4659      	mov	r1, fp
 8013578:	f7ed fad8 	bl	8000b2c <__aeabi_d2iz>
 801357c:	2800      	cmp	r0, #0
 801357e:	d148      	bne.n	8013612 <__kernel_tan+0xc2>
 8013580:	1c73      	adds	r3, r6, #1
 8013582:	4652      	mov	r2, sl
 8013584:	4313      	orrs	r3, r2
 8013586:	433b      	orrs	r3, r7
 8013588:	d112      	bne.n	80135b0 <__kernel_tan+0x60>
 801358a:	ec4b ab10 	vmov	d0, sl, fp
 801358e:	f000 f9b3 	bl	80138f8 <fabs>
 8013592:	49d6      	ldr	r1, [pc, #856]	; (80138ec <__kernel_tan+0x39c>)
 8013594:	ec53 2b10 	vmov	r2, r3, d0
 8013598:	2000      	movs	r0, #0
 801359a:	f7ed f957 	bl	800084c <__aeabi_ddiv>
 801359e:	4682      	mov	sl, r0
 80135a0:	468b      	mov	fp, r1
 80135a2:	ec4b ab10 	vmov	d0, sl, fp
 80135a6:	b005      	add	sp, #20
 80135a8:	ecbd 8b04 	vpop	{d8-d9}
 80135ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b0:	2e01      	cmp	r6, #1
 80135b2:	d0f6      	beq.n	80135a2 <__kernel_tan+0x52>
 80135b4:	49ce      	ldr	r1, [pc, #824]	; (80138f0 <__kernel_tan+0x3a0>)
 80135b6:	465b      	mov	r3, fp
 80135b8:	2000      	movs	r0, #0
 80135ba:	e7ee      	b.n	801359a <__kernel_tan+0x4a>
 80135bc:	4bcd      	ldr	r3, [pc, #820]	; (80138f4 <__kernel_tan+0x3a4>)
 80135be:	429f      	cmp	r7, r3
 80135c0:	dd27      	ble.n	8013612 <__kernel_tan+0xc2>
 80135c2:	9b03      	ldr	r3, [sp, #12]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	da0a      	bge.n	80135de <__kernel_tan+0x8e>
 80135c8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80135cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80135d0:	469b      	mov	fp, r3
 80135d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135d6:	e9cd 2300 	strd	r2, r3, [sp]
 80135da:	ee10 aa10 	vmov	sl, s0
 80135de:	4652      	mov	r2, sl
 80135e0:	465b      	mov	r3, fp
 80135e2:	a1a1      	add	r1, pc, #644	; (adr r1, 8013868 <__kernel_tan+0x318>)
 80135e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135e8:	f7ec fe4e 	bl	8000288 <__aeabi_dsub>
 80135ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135f0:	4604      	mov	r4, r0
 80135f2:	460d      	mov	r5, r1
 80135f4:	a19e      	add	r1, pc, #632	; (adr r1, 8013870 <__kernel_tan+0x320>)
 80135f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135fa:	f7ec fe45 	bl	8000288 <__aeabi_dsub>
 80135fe:	4622      	mov	r2, r4
 8013600:	462b      	mov	r3, r5
 8013602:	f7ec fe43 	bl	800028c <__adddf3>
 8013606:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8013878 <__kernel_tan+0x328>
 801360a:	ed8d 7b00 	vstr	d7, [sp]
 801360e:	4682      	mov	sl, r0
 8013610:	468b      	mov	fp, r1
 8013612:	4652      	mov	r2, sl
 8013614:	465b      	mov	r3, fp
 8013616:	4650      	mov	r0, sl
 8013618:	4659      	mov	r1, fp
 801361a:	f7ec ffed 	bl	80005f8 <__aeabi_dmul>
 801361e:	4602      	mov	r2, r0
 8013620:	460b      	mov	r3, r1
 8013622:	4680      	mov	r8, r0
 8013624:	4689      	mov	r9, r1
 8013626:	f7ec ffe7 	bl	80005f8 <__aeabi_dmul>
 801362a:	4642      	mov	r2, r8
 801362c:	4604      	mov	r4, r0
 801362e:	460d      	mov	r5, r1
 8013630:	464b      	mov	r3, r9
 8013632:	4650      	mov	r0, sl
 8013634:	4659      	mov	r1, fp
 8013636:	f7ec ffdf 	bl	80005f8 <__aeabi_dmul>
 801363a:	a391      	add	r3, pc, #580	; (adr r3, 8013880 <__kernel_tan+0x330>)
 801363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013640:	ec41 0b18 	vmov	d8, r0, r1
 8013644:	4620      	mov	r0, r4
 8013646:	4629      	mov	r1, r5
 8013648:	f7ec ffd6 	bl	80005f8 <__aeabi_dmul>
 801364c:	a38e      	add	r3, pc, #568	; (adr r3, 8013888 <__kernel_tan+0x338>)
 801364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013652:	f7ec fe1b 	bl	800028c <__adddf3>
 8013656:	4622      	mov	r2, r4
 8013658:	462b      	mov	r3, r5
 801365a:	f7ec ffcd 	bl	80005f8 <__aeabi_dmul>
 801365e:	a38c      	add	r3, pc, #560	; (adr r3, 8013890 <__kernel_tan+0x340>)
 8013660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013664:	f7ec fe12 	bl	800028c <__adddf3>
 8013668:	4622      	mov	r2, r4
 801366a:	462b      	mov	r3, r5
 801366c:	f7ec ffc4 	bl	80005f8 <__aeabi_dmul>
 8013670:	a389      	add	r3, pc, #548	; (adr r3, 8013898 <__kernel_tan+0x348>)
 8013672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013676:	f7ec fe09 	bl	800028c <__adddf3>
 801367a:	4622      	mov	r2, r4
 801367c:	462b      	mov	r3, r5
 801367e:	f7ec ffbb 	bl	80005f8 <__aeabi_dmul>
 8013682:	a387      	add	r3, pc, #540	; (adr r3, 80138a0 <__kernel_tan+0x350>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	f7ec fe00 	bl	800028c <__adddf3>
 801368c:	4622      	mov	r2, r4
 801368e:	462b      	mov	r3, r5
 8013690:	f7ec ffb2 	bl	80005f8 <__aeabi_dmul>
 8013694:	a384      	add	r3, pc, #528	; (adr r3, 80138a8 <__kernel_tan+0x358>)
 8013696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801369a:	f7ec fdf7 	bl	800028c <__adddf3>
 801369e:	4642      	mov	r2, r8
 80136a0:	464b      	mov	r3, r9
 80136a2:	f7ec ffa9 	bl	80005f8 <__aeabi_dmul>
 80136a6:	a382      	add	r3, pc, #520	; (adr r3, 80138b0 <__kernel_tan+0x360>)
 80136a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ac:	ec41 0b19 	vmov	d9, r0, r1
 80136b0:	4620      	mov	r0, r4
 80136b2:	4629      	mov	r1, r5
 80136b4:	f7ec ffa0 	bl	80005f8 <__aeabi_dmul>
 80136b8:	a37f      	add	r3, pc, #508	; (adr r3, 80138b8 <__kernel_tan+0x368>)
 80136ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136be:	f7ec fde5 	bl	800028c <__adddf3>
 80136c2:	4622      	mov	r2, r4
 80136c4:	462b      	mov	r3, r5
 80136c6:	f7ec ff97 	bl	80005f8 <__aeabi_dmul>
 80136ca:	a37d      	add	r3, pc, #500	; (adr r3, 80138c0 <__kernel_tan+0x370>)
 80136cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d0:	f7ec fddc 	bl	800028c <__adddf3>
 80136d4:	4622      	mov	r2, r4
 80136d6:	462b      	mov	r3, r5
 80136d8:	f7ec ff8e 	bl	80005f8 <__aeabi_dmul>
 80136dc:	a37a      	add	r3, pc, #488	; (adr r3, 80138c8 <__kernel_tan+0x378>)
 80136de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e2:	f7ec fdd3 	bl	800028c <__adddf3>
 80136e6:	4622      	mov	r2, r4
 80136e8:	462b      	mov	r3, r5
 80136ea:	f7ec ff85 	bl	80005f8 <__aeabi_dmul>
 80136ee:	a378      	add	r3, pc, #480	; (adr r3, 80138d0 <__kernel_tan+0x380>)
 80136f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f4:	f7ec fdca 	bl	800028c <__adddf3>
 80136f8:	4622      	mov	r2, r4
 80136fa:	462b      	mov	r3, r5
 80136fc:	f7ec ff7c 	bl	80005f8 <__aeabi_dmul>
 8013700:	a375      	add	r3, pc, #468	; (adr r3, 80138d8 <__kernel_tan+0x388>)
 8013702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013706:	f7ec fdc1 	bl	800028c <__adddf3>
 801370a:	4602      	mov	r2, r0
 801370c:	460b      	mov	r3, r1
 801370e:	ec51 0b19 	vmov	r0, r1, d9
 8013712:	f7ec fdbb 	bl	800028c <__adddf3>
 8013716:	ec53 2b18 	vmov	r2, r3, d8
 801371a:	f7ec ff6d 	bl	80005f8 <__aeabi_dmul>
 801371e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013722:	f7ec fdb3 	bl	800028c <__adddf3>
 8013726:	4642      	mov	r2, r8
 8013728:	464b      	mov	r3, r9
 801372a:	f7ec ff65 	bl	80005f8 <__aeabi_dmul>
 801372e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013732:	f7ec fdab 	bl	800028c <__adddf3>
 8013736:	a36a      	add	r3, pc, #424	; (adr r3, 80138e0 <__kernel_tan+0x390>)
 8013738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801373c:	4604      	mov	r4, r0
 801373e:	460d      	mov	r5, r1
 8013740:	ec51 0b18 	vmov	r0, r1, d8
 8013744:	f7ec ff58 	bl	80005f8 <__aeabi_dmul>
 8013748:	4622      	mov	r2, r4
 801374a:	462b      	mov	r3, r5
 801374c:	f7ec fd9e 	bl	800028c <__adddf3>
 8013750:	460b      	mov	r3, r1
 8013752:	ec41 0b18 	vmov	d8, r0, r1
 8013756:	4602      	mov	r2, r0
 8013758:	4659      	mov	r1, fp
 801375a:	4650      	mov	r0, sl
 801375c:	f7ec fd96 	bl	800028c <__adddf3>
 8013760:	4b64      	ldr	r3, [pc, #400]	; (80138f4 <__kernel_tan+0x3a4>)
 8013762:	429f      	cmp	r7, r3
 8013764:	4604      	mov	r4, r0
 8013766:	460d      	mov	r5, r1
 8013768:	dd3e      	ble.n	80137e8 <__kernel_tan+0x298>
 801376a:	4630      	mov	r0, r6
 801376c:	f7ec feda 	bl	8000524 <__aeabi_i2d>
 8013770:	4622      	mov	r2, r4
 8013772:	4680      	mov	r8, r0
 8013774:	4689      	mov	r9, r1
 8013776:	462b      	mov	r3, r5
 8013778:	4620      	mov	r0, r4
 801377a:	4629      	mov	r1, r5
 801377c:	f7ec ff3c 	bl	80005f8 <__aeabi_dmul>
 8013780:	4642      	mov	r2, r8
 8013782:	4606      	mov	r6, r0
 8013784:	460f      	mov	r7, r1
 8013786:	464b      	mov	r3, r9
 8013788:	4620      	mov	r0, r4
 801378a:	4629      	mov	r1, r5
 801378c:	f7ec fd7e 	bl	800028c <__adddf3>
 8013790:	4602      	mov	r2, r0
 8013792:	460b      	mov	r3, r1
 8013794:	4630      	mov	r0, r6
 8013796:	4639      	mov	r1, r7
 8013798:	f7ed f858 	bl	800084c <__aeabi_ddiv>
 801379c:	ec53 2b18 	vmov	r2, r3, d8
 80137a0:	f7ec fd72 	bl	8000288 <__aeabi_dsub>
 80137a4:	4602      	mov	r2, r0
 80137a6:	460b      	mov	r3, r1
 80137a8:	4650      	mov	r0, sl
 80137aa:	4659      	mov	r1, fp
 80137ac:	f7ec fd6c 	bl	8000288 <__aeabi_dsub>
 80137b0:	4602      	mov	r2, r0
 80137b2:	460b      	mov	r3, r1
 80137b4:	f7ec fd6a 	bl	800028c <__adddf3>
 80137b8:	4602      	mov	r2, r0
 80137ba:	460b      	mov	r3, r1
 80137bc:	4640      	mov	r0, r8
 80137be:	4649      	mov	r1, r9
 80137c0:	f7ec fd62 	bl	8000288 <__aeabi_dsub>
 80137c4:	9b03      	ldr	r3, [sp, #12]
 80137c6:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80137ca:	f00a 0a02 	and.w	sl, sl, #2
 80137ce:	4604      	mov	r4, r0
 80137d0:	f1ca 0001 	rsb	r0, sl, #1
 80137d4:	460d      	mov	r5, r1
 80137d6:	f7ec fea5 	bl	8000524 <__aeabi_i2d>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	4620      	mov	r0, r4
 80137e0:	4629      	mov	r1, r5
 80137e2:	f7ec ff09 	bl	80005f8 <__aeabi_dmul>
 80137e6:	e6da      	b.n	801359e <__kernel_tan+0x4e>
 80137e8:	2e01      	cmp	r6, #1
 80137ea:	d038      	beq.n	801385e <__kernel_tan+0x30e>
 80137ec:	460f      	mov	r7, r1
 80137ee:	4689      	mov	r9, r1
 80137f0:	4602      	mov	r2, r0
 80137f2:	460b      	mov	r3, r1
 80137f4:	2000      	movs	r0, #0
 80137f6:	493e      	ldr	r1, [pc, #248]	; (80138f0 <__kernel_tan+0x3a0>)
 80137f8:	f7ed f828 	bl	800084c <__aeabi_ddiv>
 80137fc:	2600      	movs	r6, #0
 80137fe:	e9cd 0100 	strd	r0, r1, [sp]
 8013802:	4652      	mov	r2, sl
 8013804:	465b      	mov	r3, fp
 8013806:	4630      	mov	r0, r6
 8013808:	4639      	mov	r1, r7
 801380a:	f7ec fd3d 	bl	8000288 <__aeabi_dsub>
 801380e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013812:	4602      	mov	r2, r0
 8013814:	460b      	mov	r3, r1
 8013816:	ec51 0b18 	vmov	r0, r1, d8
 801381a:	f7ec fd35 	bl	8000288 <__aeabi_dsub>
 801381e:	4632      	mov	r2, r6
 8013820:	462b      	mov	r3, r5
 8013822:	f7ec fee9 	bl	80005f8 <__aeabi_dmul>
 8013826:	46b0      	mov	r8, r6
 8013828:	460f      	mov	r7, r1
 801382a:	4606      	mov	r6, r0
 801382c:	4642      	mov	r2, r8
 801382e:	462b      	mov	r3, r5
 8013830:	4640      	mov	r0, r8
 8013832:	4649      	mov	r1, r9
 8013834:	f7ec fee0 	bl	80005f8 <__aeabi_dmul>
 8013838:	4b2c      	ldr	r3, [pc, #176]	; (80138ec <__kernel_tan+0x39c>)
 801383a:	2200      	movs	r2, #0
 801383c:	f7ec fd26 	bl	800028c <__adddf3>
 8013840:	4602      	mov	r2, r0
 8013842:	460b      	mov	r3, r1
 8013844:	4630      	mov	r0, r6
 8013846:	4639      	mov	r1, r7
 8013848:	f7ec fd20 	bl	800028c <__adddf3>
 801384c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013850:	f7ec fed2 	bl	80005f8 <__aeabi_dmul>
 8013854:	4642      	mov	r2, r8
 8013856:	462b      	mov	r3, r5
 8013858:	f7ec fd18 	bl	800028c <__adddf3>
 801385c:	e69f      	b.n	801359e <__kernel_tan+0x4e>
 801385e:	4682      	mov	sl, r0
 8013860:	468b      	mov	fp, r1
 8013862:	e69e      	b.n	80135a2 <__kernel_tan+0x52>
 8013864:	f3af 8000 	nop.w
 8013868:	54442d18 	.word	0x54442d18
 801386c:	3fe921fb 	.word	0x3fe921fb
 8013870:	33145c07 	.word	0x33145c07
 8013874:	3c81a626 	.word	0x3c81a626
	...
 8013880:	74bf7ad4 	.word	0x74bf7ad4
 8013884:	3efb2a70 	.word	0x3efb2a70
 8013888:	32f0a7e9 	.word	0x32f0a7e9
 801388c:	3f12b80f 	.word	0x3f12b80f
 8013890:	1a8d1068 	.word	0x1a8d1068
 8013894:	3f3026f7 	.word	0x3f3026f7
 8013898:	fee08315 	.word	0xfee08315
 801389c:	3f57dbc8 	.word	0x3f57dbc8
 80138a0:	e96e8493 	.word	0xe96e8493
 80138a4:	3f8226e3 	.word	0x3f8226e3
 80138a8:	1bb341fe 	.word	0x1bb341fe
 80138ac:	3faba1ba 	.word	0x3faba1ba
 80138b0:	db605373 	.word	0xdb605373
 80138b4:	bef375cb 	.word	0xbef375cb
 80138b8:	a03792a6 	.word	0xa03792a6
 80138bc:	3f147e88 	.word	0x3f147e88
 80138c0:	f2f26501 	.word	0xf2f26501
 80138c4:	3f4344d8 	.word	0x3f4344d8
 80138c8:	c9560328 	.word	0xc9560328
 80138cc:	3f6d6d22 	.word	0x3f6d6d22
 80138d0:	8406d637 	.word	0x8406d637
 80138d4:	3f9664f4 	.word	0x3f9664f4
 80138d8:	1110fe7a 	.word	0x1110fe7a
 80138dc:	3fc11111 	.word	0x3fc11111
 80138e0:	55555563 	.word	0x55555563
 80138e4:	3fd55555 	.word	0x3fd55555
 80138e8:	3e2fffff 	.word	0x3e2fffff
 80138ec:	3ff00000 	.word	0x3ff00000
 80138f0:	bff00000 	.word	0xbff00000
 80138f4:	3fe59427 	.word	0x3fe59427

080138f8 <fabs>:
 80138f8:	ec51 0b10 	vmov	r0, r1, d0
 80138fc:	ee10 2a10 	vmov	r2, s0
 8013900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013904:	ec43 2b10 	vmov	d0, r2, r3
 8013908:	4770      	bx	lr
 801390a:	0000      	movs	r0, r0
 801390c:	0000      	movs	r0, r0
	...

08013910 <floor>:
 8013910:	ec51 0b10 	vmov	r0, r1, d0
 8013914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013918:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801391c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013920:	2e13      	cmp	r6, #19
 8013922:	ee10 5a10 	vmov	r5, s0
 8013926:	ee10 8a10 	vmov	r8, s0
 801392a:	460c      	mov	r4, r1
 801392c:	dc32      	bgt.n	8013994 <floor+0x84>
 801392e:	2e00      	cmp	r6, #0
 8013930:	da14      	bge.n	801395c <floor+0x4c>
 8013932:	a333      	add	r3, pc, #204	; (adr r3, 8013a00 <floor+0xf0>)
 8013934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013938:	f7ec fca8 	bl	800028c <__adddf3>
 801393c:	2200      	movs	r2, #0
 801393e:	2300      	movs	r3, #0
 8013940:	f7ed f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 8013944:	b138      	cbz	r0, 8013956 <floor+0x46>
 8013946:	2c00      	cmp	r4, #0
 8013948:	da57      	bge.n	80139fa <floor+0xea>
 801394a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801394e:	431d      	orrs	r5, r3
 8013950:	d001      	beq.n	8013956 <floor+0x46>
 8013952:	4c2d      	ldr	r4, [pc, #180]	; (8013a08 <floor+0xf8>)
 8013954:	2500      	movs	r5, #0
 8013956:	4621      	mov	r1, r4
 8013958:	4628      	mov	r0, r5
 801395a:	e025      	b.n	80139a8 <floor+0x98>
 801395c:	4f2b      	ldr	r7, [pc, #172]	; (8013a0c <floor+0xfc>)
 801395e:	4137      	asrs	r7, r6
 8013960:	ea01 0307 	and.w	r3, r1, r7
 8013964:	4303      	orrs	r3, r0
 8013966:	d01f      	beq.n	80139a8 <floor+0x98>
 8013968:	a325      	add	r3, pc, #148	; (adr r3, 8013a00 <floor+0xf0>)
 801396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396e:	f7ec fc8d 	bl	800028c <__adddf3>
 8013972:	2200      	movs	r2, #0
 8013974:	2300      	movs	r3, #0
 8013976:	f7ed f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 801397a:	2800      	cmp	r0, #0
 801397c:	d0eb      	beq.n	8013956 <floor+0x46>
 801397e:	2c00      	cmp	r4, #0
 8013980:	bfbe      	ittt	lt
 8013982:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013986:	fa43 f606 	asrlt.w	r6, r3, r6
 801398a:	19a4      	addlt	r4, r4, r6
 801398c:	ea24 0407 	bic.w	r4, r4, r7
 8013990:	2500      	movs	r5, #0
 8013992:	e7e0      	b.n	8013956 <floor+0x46>
 8013994:	2e33      	cmp	r6, #51	; 0x33
 8013996:	dd0b      	ble.n	80139b0 <floor+0xa0>
 8013998:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801399c:	d104      	bne.n	80139a8 <floor+0x98>
 801399e:	ee10 2a10 	vmov	r2, s0
 80139a2:	460b      	mov	r3, r1
 80139a4:	f7ec fc72 	bl	800028c <__adddf3>
 80139a8:	ec41 0b10 	vmov	d0, r0, r1
 80139ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80139b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139b8:	fa23 f707 	lsr.w	r7, r3, r7
 80139bc:	4207      	tst	r7, r0
 80139be:	d0f3      	beq.n	80139a8 <floor+0x98>
 80139c0:	a30f      	add	r3, pc, #60	; (adr r3, 8013a00 <floor+0xf0>)
 80139c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c6:	f7ec fc61 	bl	800028c <__adddf3>
 80139ca:	2200      	movs	r2, #0
 80139cc:	2300      	movs	r3, #0
 80139ce:	f7ed f8a3 	bl	8000b18 <__aeabi_dcmpgt>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	d0bf      	beq.n	8013956 <floor+0x46>
 80139d6:	2c00      	cmp	r4, #0
 80139d8:	da02      	bge.n	80139e0 <floor+0xd0>
 80139da:	2e14      	cmp	r6, #20
 80139dc:	d103      	bne.n	80139e6 <floor+0xd6>
 80139de:	3401      	adds	r4, #1
 80139e0:	ea25 0507 	bic.w	r5, r5, r7
 80139e4:	e7b7      	b.n	8013956 <floor+0x46>
 80139e6:	2301      	movs	r3, #1
 80139e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80139ec:	fa03 f606 	lsl.w	r6, r3, r6
 80139f0:	4435      	add	r5, r6
 80139f2:	4545      	cmp	r5, r8
 80139f4:	bf38      	it	cc
 80139f6:	18e4      	addcc	r4, r4, r3
 80139f8:	e7f2      	b.n	80139e0 <floor+0xd0>
 80139fa:	2500      	movs	r5, #0
 80139fc:	462c      	mov	r4, r5
 80139fe:	e7aa      	b.n	8013956 <floor+0x46>
 8013a00:	8800759c 	.word	0x8800759c
 8013a04:	7e37e43c 	.word	0x7e37e43c
 8013a08:	bff00000 	.word	0xbff00000
 8013a0c:	000fffff 	.word	0x000fffff

08013a10 <scalbn>:
 8013a10:	b570      	push	{r4, r5, r6, lr}
 8013a12:	ec55 4b10 	vmov	r4, r5, d0
 8013a16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	462b      	mov	r3, r5
 8013a1e:	b99a      	cbnz	r2, 8013a48 <scalbn+0x38>
 8013a20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013a24:	4323      	orrs	r3, r4
 8013a26:	d036      	beq.n	8013a96 <scalbn+0x86>
 8013a28:	4b39      	ldr	r3, [pc, #228]	; (8013b10 <scalbn+0x100>)
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	ee10 0a10 	vmov	r0, s0
 8013a30:	2200      	movs	r2, #0
 8013a32:	f7ec fde1 	bl	80005f8 <__aeabi_dmul>
 8013a36:	4b37      	ldr	r3, [pc, #220]	; (8013b14 <scalbn+0x104>)
 8013a38:	429e      	cmp	r6, r3
 8013a3a:	4604      	mov	r4, r0
 8013a3c:	460d      	mov	r5, r1
 8013a3e:	da10      	bge.n	8013a62 <scalbn+0x52>
 8013a40:	a32b      	add	r3, pc, #172	; (adr r3, 8013af0 <scalbn+0xe0>)
 8013a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a46:	e03a      	b.n	8013abe <scalbn+0xae>
 8013a48:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013a4c:	428a      	cmp	r2, r1
 8013a4e:	d10c      	bne.n	8013a6a <scalbn+0x5a>
 8013a50:	ee10 2a10 	vmov	r2, s0
 8013a54:	4620      	mov	r0, r4
 8013a56:	4629      	mov	r1, r5
 8013a58:	f7ec fc18 	bl	800028c <__adddf3>
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	460d      	mov	r5, r1
 8013a60:	e019      	b.n	8013a96 <scalbn+0x86>
 8013a62:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013a66:	460b      	mov	r3, r1
 8013a68:	3a36      	subs	r2, #54	; 0x36
 8013a6a:	4432      	add	r2, r6
 8013a6c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013a70:	428a      	cmp	r2, r1
 8013a72:	dd08      	ble.n	8013a86 <scalbn+0x76>
 8013a74:	2d00      	cmp	r5, #0
 8013a76:	a120      	add	r1, pc, #128	; (adr r1, 8013af8 <scalbn+0xe8>)
 8013a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a7c:	da1c      	bge.n	8013ab8 <scalbn+0xa8>
 8013a7e:	a120      	add	r1, pc, #128	; (adr r1, 8013b00 <scalbn+0xf0>)
 8013a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a84:	e018      	b.n	8013ab8 <scalbn+0xa8>
 8013a86:	2a00      	cmp	r2, #0
 8013a88:	dd08      	ble.n	8013a9c <scalbn+0x8c>
 8013a8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013a8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013a92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013a96:	ec45 4b10 	vmov	d0, r4, r5
 8013a9a:	bd70      	pop	{r4, r5, r6, pc}
 8013a9c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013aa0:	da19      	bge.n	8013ad6 <scalbn+0xc6>
 8013aa2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013aa6:	429e      	cmp	r6, r3
 8013aa8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013aac:	dd0a      	ble.n	8013ac4 <scalbn+0xb4>
 8013aae:	a112      	add	r1, pc, #72	; (adr r1, 8013af8 <scalbn+0xe8>)
 8013ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d1e2      	bne.n	8013a7e <scalbn+0x6e>
 8013ab8:	a30f      	add	r3, pc, #60	; (adr r3, 8013af8 <scalbn+0xe8>)
 8013aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013abe:	f7ec fd9b 	bl	80005f8 <__aeabi_dmul>
 8013ac2:	e7cb      	b.n	8013a5c <scalbn+0x4c>
 8013ac4:	a10a      	add	r1, pc, #40	; (adr r1, 8013af0 <scalbn+0xe0>)
 8013ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d0b8      	beq.n	8013a40 <scalbn+0x30>
 8013ace:	a10e      	add	r1, pc, #56	; (adr r1, 8013b08 <scalbn+0xf8>)
 8013ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ad4:	e7b4      	b.n	8013a40 <scalbn+0x30>
 8013ad6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013ada:	3236      	adds	r2, #54	; 0x36
 8013adc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013ae0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	4b0c      	ldr	r3, [pc, #48]	; (8013b18 <scalbn+0x108>)
 8013ae8:	2200      	movs	r2, #0
 8013aea:	e7e8      	b.n	8013abe <scalbn+0xae>
 8013aec:	f3af 8000 	nop.w
 8013af0:	c2f8f359 	.word	0xc2f8f359
 8013af4:	01a56e1f 	.word	0x01a56e1f
 8013af8:	8800759c 	.word	0x8800759c
 8013afc:	7e37e43c 	.word	0x7e37e43c
 8013b00:	8800759c 	.word	0x8800759c
 8013b04:	fe37e43c 	.word	0xfe37e43c
 8013b08:	c2f8f359 	.word	0xc2f8f359
 8013b0c:	81a56e1f 	.word	0x81a56e1f
 8013b10:	43500000 	.word	0x43500000
 8013b14:	ffff3cb0 	.word	0xffff3cb0
 8013b18:	3c900000 	.word	0x3c900000

08013b1c <_init>:
 8013b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b1e:	bf00      	nop
 8013b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b22:	bc08      	pop	{r3}
 8013b24:	469e      	mov	lr, r3
 8013b26:	4770      	bx	lr

08013b28 <_fini>:
 8013b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b2a:	bf00      	nop
 8013b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b2e:	bc08      	pop	{r3}
 8013b30:	469e      	mov	lr, r3
 8013b32:	4770      	bx	lr
