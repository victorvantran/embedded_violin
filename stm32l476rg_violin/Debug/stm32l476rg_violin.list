
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001056c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  080106fc  080106fc  000206fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011000  08011000  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08011000  08011000  00021000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011008  08011008  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011008  08011008  00021008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801100c  0801100c  0002100c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08011010  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f9b4  2000011c  0801112c  0003011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fad0  0801112c  0003fad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f82b  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056f8  00000000  00000000  0005f977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c0  00000000  00000000  00065070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020a8  00000000  00000000  00067330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e993  00000000  00000000  000693d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028175  00000000  00000000  00097d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118ab4  00000000  00000000  000bfee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d8994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b74  00000000  00000000  001d89e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080106e4 	.word	0x080106e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	080106e4 	.word	0x080106e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <SELECT+0x18>)
 8000582:	f004 f87f 	bl	8004684 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f002 fb78 	bl	8002c7c <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400

08000594 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <DESELECT+0x18>)
 800059e:	f004 f871 	bl	8004684 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f002 fb6a 	bl	8002c7c <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400

080005b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ba:	bf00      	nop
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SPI_TxByte+0x30>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d1f8      	bne.n	80005bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <SPI_TxByte+0x30>)
 80005d2:	f005 fc50 	bl	8005e76 <HAL_SPI_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000c854 	.word	0x2000c854

080005e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SPI_TxBuffer+0x30>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d1f8      	bne.n	80005f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <SPI_TxBuffer+0x30>)
 8000608:	f005 fc35 	bl	8005e76 <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000c854 	.word	0x2000c854

08000618 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000622:	bf00      	nop
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <SPI_RxByte+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b02      	cmp	r3, #2
 8000630:	d1f8      	bne.n	8000624 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000632:	1dba      	adds	r2, r7, #6
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <SPI_RxByte+0x34>)
 800063e:	f005 fd88 	bl	8006152 <HAL_SPI_TransmitReceive>

	return data;
 8000642:	79bb      	ldrb	r3, [r7, #6]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000c854 	.word	0x2000c854

08000650 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000658:	f7ff ffde 	bl	8000618 <SPI_RxByte>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <SD_ReadyWait+0x30>)
 8000674:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000678:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800067a:	f7ff ffcd 	bl	8000618 <SPI_RxByte>
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2bff      	cmp	r3, #255	; 0xff
 8000686:	d003      	beq.n	8000690 <SD_ReadyWait+0x24>
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <SD_ReadyWait+0x30>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f4      	bne.n	800067a <SD_ReadyWait+0xe>

	return res;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200035a0 	.word	0x200035a0

080006a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006ac:	f7ff ff72 	bl	8000594 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e005      	b.n	80006c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	f7ff ff7a 	bl	80005b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	3301      	adds	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	ddf6      	ble.n	80006b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006c8:	f7ff ff56 	bl	8000578 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006e0:	2395      	movs	r3, #149	; 0x95
 80006e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006e4:	463b      	mov	r3, r7
 80006e6:	2106      	movs	r1, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff7b 	bl	80005e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006ee:	e002      	b.n	80006f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006f6:	f7ff ff8f 	bl	8000618 <SPI_RxByte>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d002      	beq.n	8000706 <SD_PowerOn+0x66>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000706:	f7ff ff45 	bl	8000594 <DESELECT>
	SPI_TxByte(0XFF);
 800070a:	20ff      	movs	r0, #255	; 0xff
 800070c:	f7ff ff50 	bl	80005b0 <SPI_TxByte>

	PowerFlag = 1;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <SD_PowerOn+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000139 	.word	0x20000139

08000724 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <SD_PowerOff+0x14>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	20000139 	.word	0x20000139

0800073c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SD_CheckPower+0x14>)
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000139 	.word	0x20000139

08000754 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SD_RxDataBlock+0x58>)
 8000760:	22c8      	movs	r2, #200	; 0xc8
 8000762:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000764:	f7ff ff58 	bl	8000618 <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d103      	bne.n	800077a <SD_RxDataBlock+0x26>
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <SD_RxDataBlock+0x58>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2bfe      	cmp	r3, #254	; 0xfe
 800077e:	d001      	beq.n	8000784 <SD_RxDataBlock+0x30>
 8000780:	2300      	movs	r3, #0
 8000782:	e00f      	b.n	80007a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff60 	bl	8000650 <SPI_RxBytePtr>
	} while(len--);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	603a      	str	r2, [r7, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800079a:	f7ff ff3d 	bl	8000618 <SPI_RxByte>
	SPI_RxByte();
 800079e:	f7ff ff3b 	bl	8000618 <SPI_RxByte>

	return TRUE;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200035a2 	.word	0x200035a2

080007b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007c0:	f7ff ff54 	bl	800066c <SD_ReadyWait>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d001      	beq.n	80007ce <SD_TxDataBlock+0x1e>
 80007ca:	2300      	movs	r3, #0
 80007cc:	e02f      	b.n	800082e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feed 	bl	80005b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2bfd      	cmp	r3, #253	; 0xfd
 80007da:	d020      	beq.n	800081e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff feff 	bl	80005e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007e6:	f7ff ff17 	bl	8000618 <SPI_RxByte>
		SPI_RxByte();
 80007ea:	f7ff ff15 	bl	8000618 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007ee:	e00b      	b.n	8000808 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007f0:	f7ff ff12 	bl	8000618 <SPI_RxByte>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f003 031f 	and.w	r3, r3, #31
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d006      	beq.n	8000810 <SD_TxDataBlock+0x60>
			i++;
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	2b40      	cmp	r3, #64	; 0x40
 800080c:	d9f0      	bls.n	80007f0 <SD_TxDataBlock+0x40>
 800080e:	e000      	b.n	8000812 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000810:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000812:	bf00      	nop
 8000814:	f7ff ff00 	bl	8000618 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0fa      	beq.n	8000814 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2b05      	cmp	r3, #5
 8000826:	d101      	bne.n	800082c <SD_TxDataBlock+0x7c>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <SD_TxDataBlock+0x7e>

	return FALSE;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	6039      	str	r1, [r7, #0]
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000842:	f7ff ff13 	bl	800066c <SD_ReadyWait>
 8000846:	4603      	mov	r3, r0
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	d001      	beq.n	8000850 <SD_SendCmd+0x1a>
 800084c:	23ff      	movs	r3, #255	; 0xff
 800084e:	e042      	b.n	80008d6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff feac 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fea6 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0c1b      	lsrs	r3, r3, #16
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fea0 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe9a 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe95 	bl	80005b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b40      	cmp	r3, #64	; 0x40
 800088a:	d102      	bne.n	8000892 <SD_SendCmd+0x5c>
 800088c:	2395      	movs	r3, #149	; 0x95
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e007      	b.n	80008a2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b48      	cmp	r3, #72	; 0x48
 8000896:	d102      	bne.n	800089e <SD_SendCmd+0x68>
 8000898:	2387      	movs	r3, #135	; 0x87
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e001      	b.n	80008a2 <SD_SendCmd+0x6c>
	else crc = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe83 	bl	80005b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b4c      	cmp	r3, #76	; 0x4c
 80008ae:	d101      	bne.n	80008b4 <SD_SendCmd+0x7e>
 80008b0:	f7ff feb2 	bl	8000618 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008b4:	230a      	movs	r3, #10
 80008b6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008b8:	f7ff feae 	bl	8000618 <SPI_RxByte>
 80008bc:	4603      	mov	r3, r0
 80008be:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	da05      	bge.n	80008d4 <SD_SendCmd+0x9e>
 80008c8:	7bbb      	ldrb	r3, [r7, #14]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	73bb      	strb	r3, [r7, #14]
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f1      	bne.n	80008b8 <SD_SendCmd+0x82>

	return res;
 80008d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SD_disk_initialize+0x14>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e0d1      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008f4:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <SD_disk_initialize+0x2a>
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	e0c6      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800090a:	f7ff fec9 	bl	80006a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800090e:	f7ff fe33 	bl	8000578 <SELECT>

	/* check disk type */
	type = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000916:	2100      	movs	r1, #0
 8000918:	2040      	movs	r0, #64	; 0x40
 800091a:	f7ff ff8c 	bl	8000836 <SD_SendCmd>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 80a1 	bne.w	8000a68 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000926:	4b5f      	ldr	r3, [pc, #380]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800092e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000932:	2048      	movs	r0, #72	; 0x48
 8000934:	f7ff ff7f 	bl	8000836 <SD_SendCmd>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d155      	bne.n	80009ea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e00c      	b.n	800095e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000944:	7bfc      	ldrb	r4, [r7, #15]
 8000946:	f7ff fe67 	bl	8000618 <SPI_RxByte>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4423      	add	r3, r4
 8000954:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	3301      	adds	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d9ef      	bls.n	8000944 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000964:	7abb      	ldrb	r3, [r7, #10]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d17e      	bne.n	8000a68 <SD_disk_initialize+0x188>
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	2baa      	cmp	r3, #170	; 0xaa
 800096e:	d17b      	bne.n	8000a68 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff5f 	bl	8000836 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d807      	bhi.n	800098e <SD_disk_initialize+0xae>
 800097e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000982:	2069      	movs	r0, #105	; 0x69
 8000984:	f7ff ff57 	bl	8000836 <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1ec      	bne.n	8000970 <SD_disk_initialize+0x90>
 8000996:	e000      	b.n	800099a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000998:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d062      	beq.n	8000a68 <SD_disk_initialize+0x188>
 80009a2:	2100      	movs	r1, #0
 80009a4:	207a      	movs	r0, #122	; 0x7a
 80009a6:	f7ff ff46 	bl	8000836 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d15b      	bne.n	8000a68 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e00c      	b.n	80009d0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009b6:	7bfc      	ldrb	r4, [r7, #15]
 80009b8:	f7ff fe2e 	bl	8000618 <SPI_RxByte>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4423      	add	r3, r4
 80009c6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d9ef      	bls.n	80009b6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SD_disk_initialize+0x104>
 80009e0:	230c      	movs	r3, #12
 80009e2:	e000      	b.n	80009e6 <SD_disk_initialize+0x106>
 80009e4:	2304      	movs	r3, #4
 80009e6:	73bb      	strb	r3, [r7, #14]
 80009e8:	e03e      	b.n	8000a68 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009ea:	2100      	movs	r1, #0
 80009ec:	2077      	movs	r0, #119	; 0x77
 80009ee:	f7ff ff22 	bl	8000836 <SD_SendCmd>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d808      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 80009f8:	2100      	movs	r1, #0
 80009fa:	2069      	movs	r0, #105	; 0x69
 80009fc:	f7ff ff1b 	bl	8000836 <SD_SendCmd>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d801      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0x12c>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d10e      	bne.n	8000a32 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a14:	2100      	movs	r1, #0
 8000a16:	2077      	movs	r0, #119	; 0x77
 8000a18:	f7ff ff0d 	bl	8000836 <SD_SendCmd>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d80e      	bhi.n	8000a40 <SD_disk_initialize+0x160>
 8000a22:	2100      	movs	r1, #0
 8000a24:	2069      	movs	r0, #105	; 0x69
 8000a26:	f7ff ff06 	bl	8000836 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d107      	bne.n	8000a40 <SD_disk_initialize+0x160>
 8000a30:	e00c      	b.n	8000a4c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a32:	2100      	movs	r1, #0
 8000a34:	2041      	movs	r0, #65	; 0x41
 8000a36:	f7ff fefe 	bl	8000836 <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1e2      	bne.n	8000a0e <SD_disk_initialize+0x12e>
 8000a48:	e000      	b.n	8000a4c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a4a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d007      	beq.n	8000a64 <SD_disk_initialize+0x184>
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	2050      	movs	r0, #80	; 0x50
 8000a5a:	f7ff feec 	bl	8000836 <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_initialize+0x188>
 8000a64:	2300      	movs	r3, #0
 8000a66:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a6e:	f7ff fd91 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000a72:	f7ff fdd1 	bl	8000618 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f023 0301 	bic.w	r3, r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e001      	b.n	8000a92 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a8e:	f7ff fe49 	bl	8000724 <SD_PowerOff>
	}

	return Stat;
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	200035a2 	.word	0x200035a2
 8000aa8:	20000138 	.word	0x20000138

08000aac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SD_disk_status+0x14>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e002      	b.n	8000ac6 <SD_disk_status+0x1a>
	return Stat;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SD_disk_status+0x28>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <SD_disk_read+0x1c>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <SD_disk_read+0x20>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e051      	b.n	8000b9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <SD_disk_read+0xcc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SD_disk_read+0x32>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e048      	b.n	8000b9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <SD_disk_read+0xd0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <SD_disk_read+0x44>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b1c:	f7ff fd2c 	bl	8000578 <SELECT>

	if (count == 1)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d111      	bne.n	8000b4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2051      	movs	r0, #81	; 0x51
 8000b2a:	f7ff fe84 	bl	8000836 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d129      	bne.n	8000b88 <SD_disk_read+0xb0>
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	f7ff fe0b 	bl	8000754 <SD_RxDataBlock>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d021      	beq.n	8000b88 <SD_disk_read+0xb0>
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	e01e      	b.n	8000b88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2052      	movs	r0, #82	; 0x52
 8000b4e:	f7ff fe72 	bl	8000836 <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d117      	bne.n	8000b88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fdf9 	bl	8000754 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00a      	beq.n	8000b7e <SD_disk_read+0xa6>
				buff += 512;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1ed      	bne.n	8000b58 <SD_disk_read+0x80>
 8000b7c:	e000      	b.n	8000b80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	204c      	movs	r0, #76	; 0x4c
 8000b84:	f7ff fe57 	bl	8000836 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b88:	f7ff fd04 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000b8c:	f7ff fd44 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000138 	.word	0x20000138

08000bac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <SD_disk_write+0x1c>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <SD_disk_write+0x20>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e06b      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <SD_disk_write+0x100>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SD_disk_write+0x32>
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e062      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <SD_disk_write+0x100>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SD_disk_write+0x44>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e059      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <SD_disk_write+0x104>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <SD_disk_write+0x56>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c02:	f7ff fcb9 	bl	8000578 <SELECT>

	if (count == 1)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d110      	bne.n	8000c2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	2058      	movs	r0, #88	; 0x58
 8000c10:	f7ff fe11 	bl	8000836 <SD_SendCmd>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d13a      	bne.n	8000c90 <SD_disk_write+0xe4>
 8000c1a:	21fe      	movs	r1, #254	; 0xfe
 8000c1c:	68b8      	ldr	r0, [r7, #8]
 8000c1e:	f7ff fdc7 	bl	80007b0 <SD_TxDataBlock>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d033      	beq.n	8000c90 <SD_disk_write+0xe4>
			count = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	e030      	b.n	8000c90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <SD_disk_write+0x104>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2077      	movs	r0, #119	; 0x77
 8000c3e:	f7ff fdfa 	bl	8000836 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	2057      	movs	r0, #87	; 0x57
 8000c46:	f7ff fdf6 	bl	8000836 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2059      	movs	r0, #89	; 0x59
 8000c4e:	f7ff fdf2 	bl	8000836 <SD_SendCmd>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11b      	bne.n	8000c90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c58:	21fc      	movs	r1, #252	; 0xfc
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f7ff fda8 	bl	80007b0 <SD_TxDataBlock>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00a      	beq.n	8000c7c <SD_disk_write+0xd0>
				buff += 512;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1ee      	bne.n	8000c58 <SD_disk_write+0xac>
 8000c7a:	e000      	b.n	8000c7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c7e:	21fd      	movs	r1, #253	; 0xfd
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fd95 	bl	80007b0 <SD_TxDataBlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c90:	f7ff fc80 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000c94:	f7ff fcc0 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000138 	.word	0x20000138

08000cb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b08b      	sub	sp, #44	; 0x2c
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	603a      	str	r2, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SD_disk_ioctl+0x1e>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e115      	b.n	8000efe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	d124      	bne.n	8000d28 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d012      	beq.n	8000d0c <SD_disk_ioctl+0x58>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	dc1a      	bgt.n	8000d20 <SD_disk_ioctl+0x6c>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <SD_disk_ioctl+0x40>
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d006      	beq.n	8000d00 <SD_disk_ioctl+0x4c>
 8000cf2:	e015      	b.n	8000d20 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cf4:	f7ff fd16 	bl	8000724 <SD_PowerOff>
			res = RES_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfe:	e0fc      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d00:	f7ff fcce 	bl	80006a0 <SD_PowerOn>
			res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0a:	e0f6      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	1c5c      	adds	r4, r3, #1
 8000d10:	f7ff fd14 	bl	800073c <SD_CheckPower>
 8000d14:	4603      	mov	r3, r0
 8000d16:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d1e:	e0ec      	b.n	8000efa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d20:	2304      	movs	r3, #4
 8000d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d26:	e0e8      	b.n	8000efa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d28:	4b77      	ldr	r3, [pc, #476]	; (8000f08 <SD_disk_ioctl+0x254>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SD_disk_ioctl+0x86>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e0e1      	b.n	8000efe <SD_disk_ioctl+0x24a>

		SELECT();
 8000d3a:	f7ff fc1d 	bl	8000578 <SELECT>

		switch (ctrl)
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	f200 80cb 	bhi.w	8000edc <SD_disk_ioctl+0x228>
 8000d46:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <SD_disk_ioctl+0x98>)
 8000d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4c:	08000e47 	.word	0x08000e47
 8000d50:	08000d85 	.word	0x08000d85
 8000d54:	08000e37 	.word	0x08000e37
 8000d58:	08000edd 	.word	0x08000edd
 8000d5c:	08000edd 	.word	0x08000edd
 8000d60:	08000edd 	.word	0x08000edd
 8000d64:	08000edd 	.word	0x08000edd
 8000d68:	08000edd 	.word	0x08000edd
 8000d6c:	08000edd 	.word	0x08000edd
 8000d70:	08000edd 	.word	0x08000edd
 8000d74:	08000edd 	.word	0x08000edd
 8000d78:	08000e59 	.word	0x08000e59
 8000d7c:	08000e7d 	.word	0x08000e7d
 8000d80:	08000ea1 	.word	0x08000ea1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d84:	2100      	movs	r1, #0
 8000d86:	2049      	movs	r0, #73	; 0x49
 8000d88:	f7ff fd55 	bl	8000836 <SD_SendCmd>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 80a8 	bne.w	8000ee4 <SD_disk_ioctl+0x230>
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fcda 	bl	8000754 <SD_RxDataBlock>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 809e 	beq.w	8000ee4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	099b      	lsrs	r3, r3, #6
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d10e      	bne.n	8000dd0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000db2:	7d7b      	ldrb	r3, [r7, #21]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	7d3b      	ldrb	r3, [r7, #20]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dc6:	8bfb      	ldrh	r3, [r7, #30]
 8000dc8:	029a      	lsls	r2, r3, #10
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e02e      	b.n	8000e2e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dd0:	7c7b      	ldrb	r3, [r7, #17]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	7dbb      	ldrb	r3, [r7, #22]
 8000dda:	09db      	lsrs	r3, r3, #7
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	7d7b      	ldrb	r3, [r7, #21]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f003 0306 	and.w	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3302      	adds	r3, #2
 8000df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000df8:	7d3b      	ldrb	r3, [r7, #20]
 8000dfa:	099b      	lsrs	r3, r3, #6
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	7cfb      	ldrb	r3, [r7, #19]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cbb      	ldrb	r3, [r7, #18]
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e20:	8bfa      	ldrh	r2, [r7, #30]
 8000e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e26:	3b09      	subs	r3, #9
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e34:	e056      	b.n	8000ee4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e44:	e055      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e46:	f7ff fc11 	bl	800066c <SD_ReadyWait>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d14b      	bne.n	8000ee8 <SD_disk_ioctl+0x234>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e56:	e047      	b.n	8000ee8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2049      	movs	r0, #73	; 0x49
 8000e5c:	f7ff fceb 	bl	8000836 <SD_SendCmd>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d142      	bne.n	8000eec <SD_disk_ioctl+0x238>
 8000e66:	2110      	movs	r1, #16
 8000e68:	6a38      	ldr	r0, [r7, #32]
 8000e6a:	f7ff fc73 	bl	8000754 <SD_RxDataBlock>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d03b      	beq.n	8000eec <SD_disk_ioctl+0x238>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e037      	b.n	8000eec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	204a      	movs	r0, #74	; 0x4a
 8000e80:	f7ff fcd9 	bl	8000836 <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d132      	bne.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc61 	bl	8000754 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02b      	beq.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e027      	b.n	8000ef0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	207a      	movs	r0, #122	; 0x7a
 8000ea4:	f7ff fcc7 	bl	8000836 <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb4:	e00b      	b.n	8000ece <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eb6:	6a3c      	ldr	r4, [r7, #32]
 8000eb8:	1c63      	adds	r3, r4, #1
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	f7ff fbac 	bl	8000618 <SPI_RxByte>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d9ef      	bls.n	8000eb6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee2:	e006      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee4:	bf00      	nop
 8000ee6:	e004      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee8:	bf00      	nop
 8000eea:	e002      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ef0:	bf00      	nop
		}

		DESELECT();
 8000ef2:	f7ff fb4f 	bl	8000594 <DESELECT>
		SPI_RxByte();
 8000ef6:	f7ff fb8f 	bl	8000618 <SPI_RxByte>
	}

	return res;
 8000efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	372c      	adds	r7, #44	; 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000

08000f0c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8000f14:	1d39      	adds	r1, r7, #4
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <__io_putchar+0x20>)
 8000f1c:	f006 ff34 	bl	8007d88 <HAL_UART_Transmit>
	return ch;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000c8b8 	.word	0x2000c8b8

08000f30 <transmit_uart>:

void transmit_uart(char *string) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f949 	bl	80001d0 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, pdMS_TO_TICKS(100));
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <transmit_uart+0x28>)
 8000f4c:	f006 ff1c 	bl	8007d88 <HAL_UART_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000c8b8 	.word	0x2000c8b8

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f001 fe4c 	bl	8002bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f84c 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 fbba 	bl	80016e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 fb88 	bl	8001680 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f70:	f000 f8ce 	bl	8001110 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f74:	f000 f980 	bl	8001278 <MX_TIM1_Init>
  MX_FATFS_Init();
 8000f78:	f007 fb8c 	bl	8008694 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f7c:	f000 f93e 	bl	80011fc <MX_SPI1_Init>
  MX_TIM15_Init();
 8000f80:	f000 fa0a 	bl	8001398 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000f84:	f000 fa8c 	bl	80014a0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000f88:	f000 fb02 	bl	8001590 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f8c:	f00a fc6c 	bl	800b868 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 8000f90:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <main+0x78>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <main+0x7c>)
 8000f96:	f00a fcc6 	bl	800b926 <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <main+0x80>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <main+0x84>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	480f      	ldr	r0, [pc, #60]	; (8000fe4 <main+0x88>)
 8000fa6:	f00a fcbe 	bl	800b926 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <main+0x8c>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <main+0x90>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <main+0x94>)
 8000fb6:	f00a fcb6 	bl	800b926 <osThreadNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <main+0x98>)
 8000fbe:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <main+0x9c>)
 8000fc2:	f00a fd8a 	bl	800bada <osEventFlagsNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <main+0xa0>)
 8000fca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fcc:	f00a fc70 	bl	800b8b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x74>
 8000fd2:	bf00      	nop
 8000fd4:	08010a58 	.word	0x08010a58
 8000fd8:	0800178d 	.word	0x0800178d
 8000fdc:	200046f0 	.word	0x200046f0
 8000fe0:	08010a7c 	.word	0x08010a7c
 8000fe4:	08001911 	.word	0x08001911
 8000fe8:	200035a8 	.word	0x200035a8
 8000fec:	08010aa0 	.word	0x08010aa0
 8000ff0:	08001975 	.word	0x08001975
 8000ff4:	2000c84c 	.word	0x2000c84c
 8000ff8:	08010ac4 	.word	0x08010ac4
 8000ffc:	200035ac 	.word	0x200035ac

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0b8      	sub	sp, #224	; 0xe0
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800100a:	2244      	movs	r2, #68	; 0x44
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00e fb94 	bl	800f73c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2288      	movs	r2, #136	; 0x88
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f00e fb86 	bl	800f73c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103e:	2310      	movs	r3, #16
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001056:	230a      	movs	r3, #10
 8001058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800105c:	2307      	movs	r3, #7
 800105e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fb82 	bl	800477c <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800107e:	f000 fcad 	bl	80019dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2303      	movs	r3, #3
 800108a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010a4:	2104      	movs	r1, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 ff4e 	bl	8004f48 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010b2:	f000 fc93 	bl	80019dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80010b6:	f244 0302 	movw	r3, #16386	; 0x4002
 80010ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010c4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010c6:	2302      	movs	r3, #2
 80010c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010ce:	2308      	movs	r3, #8
 80010d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010d2:	2307      	movs	r3, #7
 80010d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4618      	mov	r0, r3
 80010e8:	f004 f966 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010f2:	f000 fc73 	bl	80019dc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010fa:	f003 fae9 	bl	80046d0 <HAL_PWREx_ControlVoltageScaling>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001104:	f000 fc6a 	bl	80019dc <Error_Handler>
  }
}
 8001108:	bf00      	nop
 800110a:	37e0      	adds	r7, #224	; 0xe0
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001134:	4a2f      	ldr	r2, [pc, #188]	; (80011f4 <MX_ADC1_Init+0xe4>)
 8001136:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <MX_ADC1_Init+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113e:	4b2c      	ldr	r3, [pc, #176]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MX_ADC1_Init+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001152:	2204      	movs	r2, #4
 8001154:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001158:	2200      	movs	r2, #0
 800115a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <MX_ADC1_Init+0xe0>)
 800115e:	2200      	movs	r2, #0
 8001160:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001164:	2201      	movs	r2, #1
 8001166:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_ADC1_Init+0xe0>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001172:	2200      	movs	r2, #0
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001178:	2200      	movs	r2, #0
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_ADC1_Init+0xe0>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_ADC1_Init+0xe0>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001192:	4817      	ldr	r0, [pc, #92]	; (80011f0 <MX_ADC1_Init+0xe0>)
 8001194:	f001 ff64 	bl	8003060 <HAL_ADC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800119e:	f000 fc1d 	bl	80019dc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	4619      	mov	r1, r3
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <MX_ADC1_Init+0xe0>)
 80011ae:	f002 ff2d 	bl	800400c <HAL_ADCEx_MultiModeConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011b8:	f000 fc10 	bl	80019dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_ADC1_Init+0xe8>)
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c0:	2306      	movs	r3, #6
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011c8:	237f      	movs	r3, #127	; 0x7f
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011cc:	2304      	movs	r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_ADC1_Init+0xe0>)
 80011da:	f002 facf 	bl	800377c <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011e4:	f000 fbfa 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000468c 	.word	0x2000468c
 80011f4:	50040000 	.word	0x50040000
 80011f8:	14f00020 	.word	0x14f00020

080011fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_SPI1_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <MX_SPI1_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_SPI1_Init+0x74>)
 8001208:	f44f 7282 	mov.w	r2, #260	; 0x104
 800120c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_SPI1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_SPI1_Init+0x74>)
 8001216:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800121a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_SPI1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_SPI1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_SPI1_Init+0x74>)
 800122a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_SPI1_Init+0x74>)
 8001232:	2220      	movs	r2, #32
 8001234:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_SPI1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_SPI1_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_SPI1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_SPI1_Init+0x74>)
 800124a:	2207      	movs	r2, #7
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_SPI1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_SPI1_Init+0x74>)
 8001256:	2208      	movs	r2, #8
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_SPI1_Init+0x74>)
 800125c:	f004 fd68 	bl	8005d30 <HAL_SPI_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 fbb9 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000c854 	.word	0x2000c854
 8001274:	40013000 	.word	0x40013000

08001278 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	; 0x58
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	222c      	movs	r2, #44	; 0x2c
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f00e fa49 	bl	800f73c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <MX_TIM1_Init+0x118>)
 80012ac:	4a39      	ldr	r2, [pc, #228]	; (8001394 <MX_TIM1_Init+0x11c>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 80012b0:	4b37      	ldr	r3, [pc, #220]	; (8001390 <MX_TIM1_Init+0x118>)
 80012b2:	2207      	movs	r2, #7
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <MX_TIM1_Init+0x118>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012bc:	4b34      	ldr	r3, [pc, #208]	; (8001390 <MX_TIM1_Init+0x118>)
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <MX_TIM1_Init+0x118>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <MX_TIM1_Init+0x118>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_TIM1_Init+0x118>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d6:	482e      	ldr	r0, [pc, #184]	; (8001390 <MX_TIM1_Init+0x118>)
 80012d8:	f005 fb76 	bl	80069c8 <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f000 fb7b 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4825      	ldr	r0, [pc, #148]	; (8001390 <MX_TIM1_Init+0x118>)
 80012fa:	f006 fbd3 	bl	8007aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001304:	f000 fb6a 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_TIM1_Init+0x118>)
 800132e:	f005 feeb 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001338:	f000 fb50 	bl	80019dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800135e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM1_Init+0x118>)
 8001372:	f006 fc1f 	bl	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800137c:	f000 fb2e 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM1_Init+0x118>)
 8001382:	f001 f9b9 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 8001386:	bf00      	nop
 8001388:	3758      	adds	r7, #88	; 0x58
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000c7fc 	.word	0x2000c7fc
 8001394:	40012c00 	.word	0x40012c00

08001398 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	; 0x58
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	222c      	movs	r2, #44	; 0x2c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00e f9b9 	bl	800f73c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <MX_TIM15_Init+0x100>)
 80013cc:	4a33      	ldr	r2, [pc, #204]	; (800149c <MX_TIM15_Init+0x104>)
 80013ce:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_TIM15_Init+0x100>)
 80013d2:	2207      	movs	r2, #7
 80013d4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <MX_TIM15_Init+0x100>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MX_TIM15_Init+0x100>)
 80013de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <MX_TIM15_Init+0x100>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <MX_TIM15_Init+0x100>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_TIM15_Init+0x100>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013f6:	4828      	ldr	r0, [pc, #160]	; (8001498 <MX_TIM15_Init+0x100>)
 80013f8:	f005 fae6 	bl	80069c8 <HAL_TIM_PWM_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001402:	f000 faeb 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800140e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001412:	4619      	mov	r1, r3
 8001414:	4820      	ldr	r0, [pc, #128]	; (8001498 <MX_TIM15_Init+0x100>)
 8001416:	f006 fb45 	bl	8007aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001420:	f000 fadc 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001424:	2360      	movs	r3, #96	; 0x60
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001430:	2300      	movs	r3, #0
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <MX_TIM15_Init+0x100>)
 800144a:	f005 fe5d 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001454:	f000 fac2 	bl	80019dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	4807      	ldr	r0, [pc, #28]	; (8001498 <MX_TIM15_Init+0x100>)
 800147c:	f006 fb9a 	bl	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001486:	f000 faa9 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <MX_TIM15_Init+0x100>)
 800148c:	f001 f934 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 8001490:	bf00      	nop
 8001492:	3758      	adds	r7, #88	; 0x58
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200045ec 	.word	0x200045ec
 800149c:	40014000 	.word	0x40014000

080014a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b092      	sub	sp, #72	; 0x48
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	222c      	movs	r2, #44	; 0x2c
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00e f93b 	bl	800f73c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <MX_TIM16_Init+0xec>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014ce:	2207      	movs	r2, #7
 80014d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014e6:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014f2:	4825      	ldr	r0, [pc, #148]	; (8001588 <MX_TIM16_Init+0xe8>)
 80014f4:	f005 f9a0 	bl	8006838 <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80014fe:	f000 fa6d 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001502:	4821      	ldr	r0, [pc, #132]	; (8001588 <MX_TIM16_Init+0xe8>)
 8001504:	f005 fa60 	bl	80069c8 <HAL_TIM_PWM_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800150e:	f000 fa65 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001512:	2360      	movs	r3, #96	; 0x60
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <MX_TIM16_Init+0xe8>)
 8001538:	f005 fde6 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001542:	f000 fa4b 	bl	80019dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM16_Init+0xe8>)
 800156a:	f006 fb23 	bl	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001574:	f000 fa32 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM16_Init+0xe8>)
 800157a:	f001 f8bd 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3748      	adds	r7, #72	; 0x48
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000d970 	.word	0x2000d970
 800158c:	40014400 	.word	0x40014400

08001590 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b092      	sub	sp, #72	; 0x48
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	222c      	movs	r2, #44	; 0x2c
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00e f8c3 	bl	800f73c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80015b6:	4b30      	ldr	r3, [pc, #192]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015b8:	4a30      	ldr	r2, [pc, #192]	; (800167c <MX_TIM17_Init+0xec>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 80015bc:	4b2e      	ldr	r3, [pc, #184]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015be:	2207      	movs	r2, #7
 80015c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015e2:	4825      	ldr	r0, [pc, #148]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015e4:	f005 f928 	bl	8006838 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80015ee:	f000 f9f5 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80015f2:	4821      	ldr	r0, [pc, #132]	; (8001678 <MX_TIM17_Init+0xe8>)
 80015f4:	f005 f9e8 	bl	80069c8 <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80015fe:	f000 f9ed 	bl	80019dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001602:	2360      	movs	r3, #96	; 0x60
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <MX_TIM17_Init+0xe8>)
 8001628:	f005 fd6e 	bl	8007108 <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001632:	f000 f9d3 	bl	80019dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800164a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <MX_TIM17_Init+0xe8>)
 800165a:	f006 faab 	bl	8007bb4 <HAL_TIMEx_ConfigBreakDeadTime>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001664:	f000 f9ba 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <MX_TIM17_Init+0xe8>)
 800166a:	f001 f845 	bl	80026f8 <HAL_TIM_MspPostInit>

}
 800166e:	bf00      	nop
 8001670:	3748      	adds	r7, #72	; 0x48
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20004640 	.word	0x20004640
 800167c:	40014800 	.word	0x40014800

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <MX_USART2_UART_Init+0x5c>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART2_UART_Init+0x58>)
 80016c4:	f006 fb12 	bl	8007cec <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ce:	f000 f985 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000c8b8 	.word	0x2000c8b8
 80016dc:	40004400 	.word	0x40004400

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <MX_GPIO_Init+0xa4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_GPIO_Init+0xa4>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_GPIO_Init+0xa4>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a16      	ldr	r2, [pc, #88]	; (8001784 <MX_GPIO_Init+0xa4>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_GPIO_Init+0xa4>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	480b      	ldr	r0, [pc, #44]	; (8001788 <MX_GPIO_Init+0xa8>)
 800175c:	f002 ff92 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001760:	2340      	movs	r3, #64	; 0x40
 8001762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800176c:	2301      	movs	r3, #1
 800176e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_GPIO_Init+0xa8>)
 8001778:	f002 fdda 	bl	8004330 <HAL_GPIO_Init>

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	48000400 	.word	0x48000400

0800178c <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8001794:	4847      	ldr	r0, [pc, #284]	; (80018b4 <StartMainMenuTask+0x128>)
 8001796:	f00e f85f 	bl	800f858 <puts>
    osDelay(1000);
 800179a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800179e:	f00a f954 	bl	800ba4a <osDelay>

    printf("Reading song\r\n");
 80017a2:	4845      	ldr	r0, [pc, #276]	; (80018b8 <StartMainMenuTask+0x12c>)
 80017a4:	f00e f858 	bl	800f858 <puts>
    osDelay(1000);
 80017a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ac:	f00a f94d 	bl	800ba4a <osDelay>



    // Mount
		fres = f_mount(&fs, "", 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	4942      	ldr	r1, [pc, #264]	; (80018bc <StartMainMenuTask+0x130>)
 80017b4:	4842      	ldr	r0, [pc, #264]	; (80018c0 <StartMainMenuTask+0x134>)
 80017b6:	f009 fa01 	bl	800abbc <f_mount>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <StartMainMenuTask+0x138>)
 80017c0:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80017c2:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <StartMainMenuTask+0x138>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <StartMainMenuTask+0x46>
			transmit_uart("Micro SD card is mounted successfully!\n");
 80017ca:	483f      	ldr	r0, [pc, #252]	; (80018c8 <StartMainMenuTask+0x13c>)
 80017cc:	f7ff fbb0 	bl	8000f30 <transmit_uart>
 80017d0:	e006      	b.n	80017e0 <StartMainMenuTask+0x54>
		} else if (fres != FR_OK) {
 80017d2:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <StartMainMenuTask+0x138>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <StartMainMenuTask+0x54>
			transmit_uart("Micro SD card's mount error!\n");
 80017da:	483c      	ldr	r0, [pc, #240]	; (80018cc <StartMainMenuTask+0x140>)
 80017dc:	f7ff fba8 	bl	8000f30 <transmit_uart>



		//fres = f_open(&fil, "glazunov_violin_concerto.piece", FA_READ);
		//fres = f_open(&fil, "glazunov.txt", FA_READ);
		fres = f_open(&fil, "test2.bin", FA_READ);
 80017e0:	2201      	movs	r2, #1
 80017e2:	493b      	ldr	r1, [pc, #236]	; (80018d0 <StartMainMenuTask+0x144>)
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <StartMainMenuTask+0x148>)
 80017e6:	f009 fa4d 	bl	800ac84 <f_open>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <StartMainMenuTask+0x138>)
 80017f0:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <StartMainMenuTask+0x138>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <StartMainMenuTask+0x76>
			transmit_uart("File opened for reading.\n");
 80017fa:	4837      	ldr	r0, [pc, #220]	; (80018d8 <StartMainMenuTask+0x14c>)
 80017fc:	f7ff fb98 	bl	8000f30 <transmit_uart>
 8001800:	e006      	b.n	8001810 <StartMainMenuTask+0x84>
		} else if (fres != FR_OK) {
 8001802:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <StartMainMenuTask+0x138>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <StartMainMenuTask+0x84>
			transmit_uart("File was not opened for reading!\n");
 800180a:	4834      	ldr	r0, [pc, #208]	; (80018dc <StartMainMenuTask+0x150>)
 800180c:	f7ff fb90 	bl	8000f30 <transmit_uart>





		Piece_vInit(&xPiece, &fil);
 8001810:	4930      	ldr	r1, [pc, #192]	; (80018d4 <StartMainMenuTask+0x148>)
 8001812:	4833      	ldr	r0, [pc, #204]	; (80018e0 <StartMainMenuTask+0x154>)
 8001814:	f000 f8e8 	bl	80019e8 <Piece_vInit>
		Piece_vSetComposition(&xPiece, &fil);
 8001818:	492e      	ldr	r1, [pc, #184]	; (80018d4 <StartMainMenuTask+0x148>)
 800181a:	4831      	ldr	r0, [pc, #196]	; (80018e0 <StartMainMenuTask+0x154>)
 800181c:	f000 f91a 	bl	8001a54 <Piece_vSetComposition>


		/* Close file */
		fres = f_close(&fil);
 8001820:	482c      	ldr	r0, [pc, #176]	; (80018d4 <StartMainMenuTask+0x148>)
 8001822:	f009 fe2e 	bl	800b482 <f_close>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <StartMainMenuTask+0x138>)
 800182c:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <StartMainMenuTask+0x138>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <StartMainMenuTask+0xb2>
			transmit_uart("The file is closed.\n");
 8001836:	482b      	ldr	r0, [pc, #172]	; (80018e4 <StartMainMenuTask+0x158>)
 8001838:	f7ff fb7a 	bl	8000f30 <transmit_uart>
 800183c:	e006      	b.n	800184c <StartMainMenuTask+0xc0>
		} else if (fres != FR_OK) {
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <StartMainMenuTask+0x138>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <StartMainMenuTask+0xc0>
			transmit_uart("The file was not closed.\n");
 8001846:	4828      	ldr	r0, [pc, #160]	; (80018e8 <StartMainMenuTask+0x15c>)
 8001848:	f7ff fb72 	bl	8000f30 <transmit_uart>
		}

		f_mount(NULL, "", 1);
 800184c:	2201      	movs	r2, #1
 800184e:	491b      	ldr	r1, [pc, #108]	; (80018bc <StartMainMenuTask+0x130>)
 8001850:	2000      	movs	r0, #0
 8001852:	f009 f9b3 	bl	800abbc <f_mount>
		if (fres == FR_OK) {
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <StartMainMenuTask+0x138>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <StartMainMenuTask+0xda>
			transmit_uart("The Micro SD card is unmounted!\n");
 800185e:	4823      	ldr	r0, [pc, #140]	; (80018ec <StartMainMenuTask+0x160>)
 8001860:	f7ff fb66 	bl	8000f30 <transmit_uart>
 8001864:	e006      	b.n	8001874 <StartMainMenuTask+0xe8>
		} else if (fres != FR_OK) {
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <StartMainMenuTask+0x138>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <StartMainMenuTask+0xe8>
			transmit_uart("The Micro SD was not unmounted!");
 800186e:	4820      	ldr	r0, [pc, #128]	; (80018f0 <StartMainMenuTask+0x164>)
 8001870:	f7ff fb5e 	bl	8000f30 <transmit_uart>
		}



		// Initial Command
	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	481f      	ldr	r0, [pc, #124]	; (80018f4 <StartMainMenuTask+0x168>)
 8001878:	f005 f8fe 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 800187c:	2100      	movs	r1, #0
 800187e:	481e      	ldr	r0, [pc, #120]	; (80018f8 <StartMainMenuTask+0x16c>)
 8001880:	f005 f8fa 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim16, TIM_CHANNEL_1);
 8001884:	2100      	movs	r1, #0
 8001886:	481d      	ldr	r0, [pc, #116]	; (80018fc <StartMainMenuTask+0x170>)
 8001888:	f005 f8f6 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
 800188c:	2100      	movs	r1, #0
 800188e:	481c      	ldr	r0, [pc, #112]	; (8001900 <StartMainMenuTask+0x174>)
 8001890:	f005 f8f2 	bl	8006a78 <HAL_TIM_PWM_Start_IT>

	  //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);


		xSynchWakeTime = xTaskGetTickCount();
 8001894:	f00c f998 	bl	800dbc8 <xTaskGetTickCount>
 8001898:	4603      	mov	r3, r0
 800189a:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <StartMainMenuTask+0x178>)
 800189c:	6013      	str	r3, [r2, #0]
		osEventFlagsSet(xEmbeddedViolinEventGroupHandle, (EB_PLAY_TICK | EB_PLAY_STATE));
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <StartMainMenuTask+0x17c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2106      	movs	r1, #6
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00a f957 	bl	800bb58 <osEventFlagsSet>


		// WAIT EVENT SYNCHRONIZE?

    osDelay(7000000000);
 80018aa:	4818      	ldr	r0, [pc, #96]	; (800190c <StartMainMenuTask+0x180>)
 80018ac:	f00a f8cd 	bl	800ba4a <osDelay>
  	printf("Main Menu\r\n");
 80018b0:	e770      	b.n	8001794 <StartMainMenuTask+0x8>
 80018b2:	bf00      	nop
 80018b4:	08010748 	.word	0x08010748
 80018b8:	08010754 	.word	0x08010754
 80018bc:	08010764 	.word	0x08010764
 80018c0:	200035b0 	.word	0x200035b0
 80018c4:	2000c93c 	.word	0x2000c93c
 80018c8:	08010768 	.word	0x08010768
 80018cc:	08010790 	.word	0x08010790
 80018d0:	080107b0 	.word	0x080107b0
 80018d4:	2000c940 	.word	0x2000c940
 80018d8:	080107bc 	.word	0x080107bc
 80018dc:	080107d8 	.word	0x080107d8
 80018e0:	20004758 	.word	0x20004758
 80018e4:	080107fc 	.word	0x080107fc
 80018e8:	08010814 	.word	0x08010814
 80018ec:	08010830 	.word	0x08010830
 80018f0:	08010854 	.word	0x08010854
 80018f4:	2000c7fc 	.word	0x2000c7fc
 80018f8:	200045ec 	.word	0x200045ec
 80018fc:	2000d970 	.word	0x2000d970
 8001900:	20004640 	.word	0x20004640
 8001904:	20004638 	.word	0x20004638
 8001908:	200035ac 	.word	0x200035ac
 800190c:	a13b8600 	.word	0xa13b8600

08001910 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <StartPlayTickTask+0x4c>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <StartPlayTickTask+0x50>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	2200      	movs	r2, #0
 8001928:	f00a f95a 	bl	800bbe0 <osEventFlagsWait>
 800192c:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	dbf1      	blt.n	8001918 <StartPlayTickTask+0x8>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0ec      	beq.n	8001918 <StartPlayTickTask+0x8>
		{
			while (running)
 800193e:	e008      	b.n	8001952 <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <StartPlayTickTask+0x54>)
 8001942:	f00d ff89 	bl	800f858 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <StartPlayTickTask+0x58>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <StartPlayTickTask+0x5c>)
 800194e:	f00b ff77 	bl	800d840 <vTaskDelayUntil>
			while (running)
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <StartPlayTickTask+0x60>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f2      	bne.n	8001940 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 800195a:	e7dd      	b.n	8001918 <StartPlayTickTask+0x8>
 800195c:	200035ac 	.word	0x200035ac
 8001960:	08010ad4 	.word	0x08010ad4
 8001964:	08010874 	.word	0x08010874
 8001968:	08010ad8 	.word	0x08010ad8
 800196c:	20004638 	.word	0x20004638
 8001970:	2000013c 	.word	0x2000013c

08001974 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <StartPlayState+0x38>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <StartPlayState+0x3c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	2200      	movs	r2, #0
 800198c:	f00a f928 	bl	800bbe0 <osEventFlagsWait>
 8001990:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	dbf1      	blt.n	800197c <StartPlayState+0x8>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0ec      	beq.n	800197c <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <StartPlayState+0x40>)
 80019a4:	f000 f8a2 	bl	8001aec <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80019a8:	e7e8      	b.n	800197c <StartPlayState+0x8>
 80019aa:	bf00      	nop
 80019ac:	200035ac 	.word	0x200035ac
 80019b0:	08010adc 	.word	0x08010adc
 80019b4:	20004758 	.word	0x20004758

080019b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ca:	f001 f937 	bl	8002c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40001000 	.word	0x40001000

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <Error_Handler+0x8>
	...

080019e8 <Piece_vInit>:
};



void Piece_vInit(PieceHandle_t *pxPiece, FIL *pFil)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xPieceInformation.pusName, sizeof(pxPiece->xPieceInformation.pusName), &ulNumBytesRead);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0108 	add.w	r1, r3, #8
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	6838      	ldr	r0, [r7, #0]
 8001a00:	f009 fb28 	bl	800b054 <f_read>
	printf("Name: %s\r\n", pxPiece->xPieceInformation.pusName);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3308      	adds	r3, #8
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <Piece_vInit+0x30>)
 8001a0c:	f00d fe9e 	bl	800f74c <iprintf>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	08010884 	.word	0x08010884

08001a1c <Piece_vSetCompositionByteSize>:


void Piece_vSetCompositionByteSize(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, &(pxPiece->xComposition.ulCompositionByteSize), sizeof(pxPiece->xComposition.ulCompositionByteSize), &ulNumBytesRead);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2204      	movs	r2, #4
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f009 fb0e 	bl	800b054 <f_read>
	printf("Composition size: %u\r\n", pxPiece->xComposition.ulCompositionByteSize);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <Piece_vSetCompositionByteSize+0x34>)
 8001a42:	f00d fe83 	bl	800f74c <iprintf>
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	08010890 	.word	0x08010890

08001a54 <Piece_vSetComposition>:


void Piece_vSetComposition(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	Piece_vSetCompositionByteSize(pxPiece, pFil);
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffdb 	bl	8001a1c <Piece_vSetCompositionByteSize>

	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f103 0194 	add.w	r1, r3, #148	; 0x94
			pxPiece->xComposition.ulCompositionByteSize < sizeof(pxPiece->xComposition.pusComposition) ? pxPiece->xComposition.ulCompositionByteSize : sizeof(pxPiece->xComposition.pusComposition),
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a76:	bf28      	it	cs
 8001a78:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001a7c:	461a      	mov	r2, r3
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	f009 fae6 	bl	800b054 <f_read>
			&ulNumBytesRead);


	printf("Number of bytes read: %lu\r\n", ulNumBytesRead);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <Piece_vSetComposition+0x5c>)
 8001a8e:	f00d fe5d 	bl	800f74c <iprintf>

	pxPiece->xPieceInstruction.ulInstructionCounter = 0;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

	pxPiece->xCapture.ulTick = osKernelGetTickCount();
 8001a98:	f009 ff30 	bl	800b8fc <osKernelGetTickCount>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001aa4:	3394      	adds	r3, #148	; 0x94
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	080108a8 	.word	0x080108a8

08001ab4 <Piece_ucParseBeatValue>:


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3305      	adds	r3, #5
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	440a      	add	r2, r1
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	795b      	ldrb	r3, [r3, #5]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 8001af8:	e045      	b.n	8001b86 <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	440a      	add	r2, r1
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4827      	ldr	r0, [pc, #156]	; (8001bbc <Piece_vParseCommand+0xd0>)
 8001b20:	f00d fe14 	bl	800f74c <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4825      	ldr	r0, [pc, #148]	; (8001bc0 <Piece_vParseCommand+0xd4>)
 8001b2c:	f00d fe0e 	bl	800f74c <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	791b      	ldrb	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <Piece_vParseCommand+0x52>
 8001b38:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3a:	d003      	beq.n	8001b44 <Piece_vParseCommand+0x58>
 8001b3c:	e006      	b.n	8001b4c <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
			break;
 8001b42:	e020      	b.n	8001b86 <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f891 	bl	8001c6c <Piece_vConfigureAll>
			break;
 8001b4a:	e01c      	b.n	8001b86 <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	791b      	ldrb	r3, [r3, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fb4b 	bl	80021ec <bIsPlayCommand>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d010      	beq.n	8001b7e <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa4 	bl	8001ab4 <Piece_ucParseBeatValue>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8001b70:	7bba      	ldrb	r2, [r7, #14]
 8001b72:	7b7b      	ldrb	r3, [r7, #13]
 8001b74:	4619      	mov	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f9d8 	bl	8001f2c <Piece_vPlayNotes>
 8001b7c:	e002      	b.n	8001b84 <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8001b7e:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <Piece_vParseCommand+0xd8>)
 8001b80:	f00d fe6a 	bl	800f858 <puts>
			}
			break;
 8001b84:	bf00      	nop
	while (!endCommand)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0b6      	beq.n	8001afa <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8001b8c:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <Piece_vParseCommand+0xdc>)
 8001b8e:	f00d fe63 	bl	800f858 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8001b92:	2100      	movs	r1, #0
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <Piece_vParseCommand+0xe0>)
 8001b96:	f005 f8bb 	bl	8006d10 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <Piece_vParseCommand+0xe4>)
 8001b9e:	f005 f8b7 	bl	8006d10 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <Piece_vParseCommand+0xe8>)
 8001ba6:	f005 f8b3 	bl	8006d10 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8001baa:	2100      	movs	r1, #0
 8001bac:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <Piece_vParseCommand+0xec>)
 8001bae:	f005 f8af 	bl	8006d10 <HAL_TIM_PWM_Stop_IT>
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	080108c4 	.word	0x080108c4
 8001bc0:	080108d8 	.word	0x080108d8
 8001bc4:	080108e8 	.word	0x080108e8
 8001bc8:	080108fc 	.word	0x080108fc
 8001bcc:	2000c7fc 	.word	0x2000c7fc
 8001bd0:	200045ec 	.word	0x200045ec
 8001bd4:	2000d970 	.word	0x2000d970
 8001bd8:	20004640 	.word	0x20004640

08001bdc <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4803      	ldr	r0, [pc, #12]	; (8001c08 <Piece_vSetMovement+0x2c>)
 8001bfa:	f00d fda7 	bl	800f74c <iprintf>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	08010910 	.word	0x08010910

08001c0c <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001c26:	4619      	mov	r1, r3
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <Piece_vSetBPM+0x2c>)
 8001c2a:	f00d fd8f 	bl	800f74c <iprintf>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	08010920 	.word	0x08010920

08001c3c <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001c56:	4619      	mov	r1, r3
 8001c58:	4803      	ldr	r0, [pc, #12]	; (8001c68 <Piece_vSetDynamic+0x2c>)
 8001c5a:	f00d fd77 	bl	800f74c <iprintf>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	0801092c 	.word	0x0801092c

08001c6c <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8001c74:	481e      	ldr	r0, [pc, #120]	; (8001cf0 <Piece_vConfigureAll+0x84>)
 8001c76:	f00d fdef 	bl	800f858 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	1c9a      	adds	r2, r3, #2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff84 	bl	8001bdc <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8001cd4:	89bb      	ldrh	r3, [r7, #12]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff97 	bl	8001c0c <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffaa 	bl	8001c3c <Piece_vSetDynamic>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	0801093c 	.word	0x0801093c

08001cf4 <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
	int count = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001d02:	e01e      	b.n	8001d42 <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d0a:	3394      	adds	r3, #148	; 0x94
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d18:	3394      	adds	r3, #148	; 0x94
 8001d1a:	601a      	str	r2, [r3, #0]
		count++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3b32      	subs	r3, #50	; 0x32
 8001d26:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 8001d28:	2232      	movs	r2, #50	; 0x32
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	4819      	ldr	r0, [pc, #100]	; (8001d94 <Piece_vCaptureFragment+0xa0>)
 8001d2e:	f00d fd0d 	bl	800f74c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d38:	3394      	adds	r3, #148	; 0x94
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 fe9f 	bl	800ba80 <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b31      	cmp	r3, #49	; 0x31
 8001d46:	dcdd      	bgt.n	8001d04 <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	dd1b      	ble.n	8001d86 <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d54:	3394      	adds	r3, #148	; 0x94
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	441a      	add	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d62:	3394      	adds	r3, #148	; 0x94
 8001d64:	601a      	str	r2, [r3, #0]

		count++;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	68f9      	ldr	r1, [r7, #12]
 8001d70:	4808      	ldr	r0, [pc, #32]	; (8001d94 <Piece_vCaptureFragment+0xa0>)
 8001d72:	f00d fceb 	bl	800f74c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d7c:	3394      	adds	r3, #148	; 0x94
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f009 fe7d 	bl	800ba80 <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	08010958 	.word	0x08010958

08001d98 <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001da6:	3398      	adds	r3, #152	; 0x98
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001db2:	339b      	adds	r3, #155	; 0x9b
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001dbe:	339e      	adds	r3, #158	; 0x9e
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001dca:	33a1      	adds	r3, #161	; 0xa1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3306      	adds	r3, #6
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	440a      	add	r2, r1
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	b292      	uxth	r2, r2
 8001df8:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1c9a      	adds	r2, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	88db      	ldrh	r3, [r3, #6]
 8001e08:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	88db      	ldrh	r3, [r3, #6]
 8001e0e:	0b9b      	lsrs	r3, r3, #14
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	88db      	ldrh	r3, [r3, #6]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e22:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d856      	bhi.n	8001ed8 <Piece_vParseNoteGoal+0xfc>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <Piece_vParseNoteGoal+0x54>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e41 	.word	0x08001e41
 8001e34:	08001e67 	.word	0x08001e67
 8001e38:	08001e8d 	.word	0x08001e8d
 8001e3c:	08001eb3 	.word	0x08001eb3
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e46:	3398      	adds	r3, #152	; 0x98
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e52:	3399      	adds	r3, #153	; 0x99
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e5e:	339a      	adds	r3, #154	; 0x9a
 8001e60:	7b7a      	ldrb	r2, [r7, #13]
 8001e62:	701a      	strb	r2, [r3, #0]
		break;
 8001e64:	e039      	b.n	8001eda <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e6c:	339b      	adds	r3, #155	; 0x9b
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e78:	339c      	adds	r3, #156	; 0x9c
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e84:	339d      	adds	r3, #157	; 0x9d
 8001e86:	7b7a      	ldrb	r2, [r7, #13]
 8001e88:	701a      	strb	r2, [r3, #0]
		break;
 8001e8a:	e026      	b.n	8001eda <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e92:	339e      	adds	r3, #158	; 0x9e
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e9e:	339f      	adds	r3, #159	; 0x9f
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001eaa:	33a0      	adds	r3, #160	; 0xa0
 8001eac:	7b7a      	ldrb	r2, [r7, #13]
 8001eae:	701a      	strb	r2, [r3, #0]
		break;
 8001eb0:	e013      	b.n	8001eda <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001eb8:	33a1      	adds	r3, #161	; 0xa1
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ec4:	33a2      	adds	r3, #162	; 0xa2
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ed0:	33a3      	adds	r3, #163	; 0xa3
 8001ed2:	7b7a      	ldrb	r2, [r7, #13]
 8001ed4:	701a      	strb	r2, [r3, #0]
		break;
 8001ed6:	e000      	b.n	8001eda <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 8001ed8:	bf00      	nop
	}
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d901      	bls.n	8001efe <Piece_vParseGoal+0x16>
 8001efa:	2304      	movs	r3, #4
 8001efc:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	81fb      	strh	r3, [r7, #14]
 8001f02:	e008      	b.n	8001f16 <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff69 	bl	8001ddc <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 8001f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	81fb      	strh	r3, [r7, #14]
 8001f16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	dbf1      	blt.n	8001f04 <Piece_vParseGoal+0x1c>
	}
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 8001f3c:	78bb      	ldrb	r3, [r7, #2]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	48a0      	ldr	r0, [pc, #640]	; (80021c4 <Piece_vPlayNotes+0x298>)
 8001f42:	f00d fc03 	bl	800f74c <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	489f      	ldr	r0, [pc, #636]	; (80021c8 <Piece_vPlayNotes+0x29c>)
 8001f4c:	f00d fbfe 	bl	800f74c <iprintf>

	Piece_vResetGoal(pxPiece);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff21 	bl	8001d98 <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 8001f56:	78bb      	ldrb	r3, [r7, #2]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffc4 	bl	8001ee8 <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f98d 	bl	8002280 <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d820      	bhi.n	8001fae <Piece_vPlayNotes+0x82>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <Piece_vPlayNotes+0x48>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f89 	.word	0x08001f89
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	08001f97 	.word	0x08001f97
 8001f80:	08001f9f 	.word	0x08001f9f
 8001f84:	08001fa7 	.word	0x08001fa7
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 8001f88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f8c:	617b      	str	r3, [r7, #20]
		break;
 8001f8e:	e012      	b.n	8001fb6 <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8001f90:	4b8e      	ldr	r3, [pc, #568]	; (80021cc <Piece_vPlayNotes+0x2a0>)
 8001f92:	617b      	str	r3, [r7, #20]
		break;
 8001f94:	e00f      	b.n	8001fb6 <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 8001f96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f9a:	617b      	str	r3, [r7, #20]
		break;
 8001f9c:	e00b      	b.n	8001fb6 <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8001f9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fa2:	617b      	str	r3, [r7, #20]
		break;
 8001fa4:	e007      	b.n	8001fb6 <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 8001fa6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001faa:	617b      	str	r3, [r7, #20]
		break;
 8001fac:	e003      	b.n	8001fb6 <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8001fae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fb2:	617b      	str	r3, [r7, #20]
		break;
 8001fb4:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fc4:	eddf 6a82 	vldr	s13, [pc, #520]	; 80021d0 <Piece_vPlayNotes+0x2a4>
 8001fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fcc:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80021d4 <Piece_vPlayNotes+0x2a8>
 8001fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd4:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2b0b      	cmp	r3, #11
 8001fdc:	f200 80d6 	bhi.w	800218c <Piece_vPlayNotes+0x260>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <Piece_vPlayNotes+0xbc>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08002019 	.word	0x08002019
 8001fec:	08002039 	.word	0x08002039
 8001ff0:	08002059 	.word	0x08002059
 8001ff4:	08002079 	.word	0x08002079
 8001ff8:	08002099 	.word	0x08002099
 8001ffc:	080020b5 	.word	0x080020b5
 8002000:	080020cd 	.word	0x080020cd
 8002004:	080020ed 	.word	0x080020ed
 8002008:	0800210d 	.word	0x0800210d
 800200c:	0800212d 	.word	0x0800212d
 8002010:	0800214d 	.word	0x0800214d
 8002014:	0800216d 	.word	0x0800216d
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 8002018:	edd7 7a03 	vldr	s15, [r7, #12]
 800201c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80021d8 <Piece_vPlayNotes+0x2ac>
 8002020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002024:	edd7 7a05 	vldr	s15, [r7, #20]
 8002028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002030:	ee17 3a90 	vmov	r3, s15
 8002034:	613b      	str	r3, [r7, #16]
		break;
 8002036:	e0b5      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 8002038:	edd7 7a03 	vldr	s15, [r7, #12]
 800203c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002040:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002044:	edd7 7a05 	vldr	s15, [r7, #20]
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002050:	ee17 3a90 	vmov	r3, s15
 8002054:	613b      	str	r3, [r7, #16]
		break;
 8002056:	e0a5      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 8002058:	edd7 7a03 	vldr	s15, [r7, #12]
 800205c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002064:	edd7 7a05 	vldr	s15, [r7, #20]
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002070:	ee17 3a90 	vmov	r3, s15
 8002074:	613b      	str	r3, [r7, #16]
		break;
 8002076:	e095      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 8002078:	edd7 7a03 	vldr	s15, [r7, #12]
 800207c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002080:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002084:	edd7 7a05 	vldr	s15, [r7, #20]
 8002088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002090:	ee17 3a90 	vmov	r3, s15
 8002094:	613b      	str	r3, [r7, #16]
		break;
 8002096:	e085      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 8002098:	edd7 7a03 	vldr	s15, [r7, #12]
 800209c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ac:	ee17 3a90 	vmov	r3, s15
 80020b0:	613b      	str	r3, [r7, #16]
		break;
 80020b2:	e077      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 80020b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80020b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c4:	ee17 3a90 	vmov	r3, s15
 80020c8:	613b      	str	r3, [r7, #16]
		break;
 80020ca:	e06b      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 80020cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e4:	ee17 3a90 	vmov	r3, s15
 80020e8:	613b      	str	r3, [r7, #16]
		break;
 80020ea:	e05b      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 80020ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f0:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80020f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002104:	ee17 3a90 	vmov	r3, s15
 8002108:	613b      	str	r3, [r7, #16]
		break;
 800210a:	e04b      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 800210c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002110:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002118:	edd7 7a05 	vldr	s15, [r7, #20]
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	613b      	str	r3, [r7, #16]
		break;
 800212a:	e03b      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 800212c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002130:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80021dc <Piece_vPlayNotes+0x2b0>
 8002134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002138:	edd7 7a05 	vldr	s15, [r7, #20]
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002144:	ee17 3a90 	vmov	r3, s15
 8002148:	613b      	str	r3, [r7, #16]
		break;
 800214a:	e02b      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 800214c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002150:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80021e0 <Piece_vPlayNotes+0x2b4>
 8002154:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002158:	edd7 7a05 	vldr	s15, [r7, #20]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002164:	ee17 3a90 	vmov	r3, s15
 8002168:	613b      	str	r3, [r7, #16]
		break;
 800216a:	e01b      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 800216c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002170:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80021e4 <Piece_vPlayNotes+0x2b8>
 8002174:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002178:	edd7 7a05 	vldr	s15, [r7, #20]
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002184:	ee17 3a90 	vmov	r3, s15
 8002188:	613b      	str	r3, [r7, #16]
		break;
 800218a:	e00b      	b.n	80021a4 <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 800218c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002190:	edd7 7a05 	vldr	s15, [r7, #20]
 8002194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219c:	ee17 3a90 	vmov	r3, s15
 80021a0:	613b      	str	r3, [r7, #16]
		break;
 80021a2:	bf00      	nop
	}


	if (ucNumNotes == 0)
 80021a4:	78bb      	ldrb	r3, [r7, #2]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 80021aa:	480f      	ldr	r0, [pc, #60]	; (80021e8 <Piece_vPlayNotes+0x2bc>)
 80021ac:	f00d fb54 	bl	800f858 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fd9d 	bl	8001cf4 <Piece_vCaptureFragment>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	08010970 	.word	0x08010970
 80021c8:	08010984 	.word	0x08010984
 80021cc:	3f2aaaab 	.word	0x3f2aaaab
 80021d0:	42700000 	.word	0x42700000
 80021d4:	447a0000 	.word	0x447a0000
 80021d8:	42000000 	.word	0x42000000
 80021dc:	3d800000 	.word	0x3d800000
 80021e0:	3d000000 	.word	0x3d000000
 80021e4:	3c800000 	.word	0x3c800000
 80021e8:	08010998 	.word	0x08010998

080021ec <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	09db      	lsrs	r3, r3, #7
 80021fe:	b2db      	uxtb	r3, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d816      	bhi.n	8002250 <Piece_usGetPitchTick+0x44>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <Piece_usGetPitchTick+0x1c>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	08002239 	.word	0x08002239
 800222c:	0800223f 	.word	0x0800223f
 8002230:	08002245 	.word	0x08002245
 8002234:	0800224b 	.word	0x0800224b
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002238:	2300      	movs	r3, #0
 800223a:	73fb      	strb	r3, [r7, #15]
		break;
 800223c:	e00b      	b.n	8002256 <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 800223e:	230a      	movs	r3, #10
 8002240:	73fb      	strb	r3, [r7, #15]
		break;
 8002242:	e008      	b.n	8002256 <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 8002244:	2314      	movs	r3, #20
 8002246:	73fb      	strb	r3, [r7, #15]
		break;
 8002248:	e005      	b.n	8002256 <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 800224a:	231e      	movs	r3, #30
 800224c:	73fb      	strb	r3, [r7, #15]
		break;
 800224e:	e002      	b.n	8002256 <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
		break;
 8002254:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	79bb      	ldrb	r3, [r7, #6]
 800225a:	4413      	add	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b47      	cmp	r3, #71	; 0x47
 8002262:	bf28      	it	cs
 8002264:	2347      	movcs	r3, #71	; 0x47
 8002266:	73fb      	strb	r3, [r7, #15]

	return pusPitchTickMap[ucPitchTickIndex];
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <Piece_usGetPitchTick+0x70>)
 800226c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20000004 	.word	0x20000004

08002280 <Piece_Debug_vPrintGoal>:
}



void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 8002288:	4873      	ldr	r0, [pc, #460]	; (8002458 <Piece_Debug_vPrintGoal+0x1d8>)
 800228a:	f00d fae5 	bl	800f858 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002294:	3398      	adds	r3, #152	; 0x98
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02c      	beq.n	80022f6 <Piece_Debug_vPrintGoal+0x76>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022a2:	339a      	adds	r3, #154	; 0x9a
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461c      	mov	r4, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022ae:	339a      	adds	r3, #154	; 0x9a
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7ff ffa9 	bl	800220c <Piece_usGetPitchTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4621      	mov	r1, r4
 80022c0:	4866      	ldr	r0, [pc, #408]	; (800245c <Piece_Debug_vPrintGoal+0x1dc>)
 80022c2:	f00d fa43 	bl	800f74c <iprintf>

		G_TIMER_BASE->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022cc:	339a      	adds	r3, #154	; 0x9a
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7ff ff9a 	bl	800220c <Piece_usGetPitchTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	4b60      	ldr	r3, [pc, #384]	; (8002460 <Piece_Debug_vPrintGoal+0x1e0>)
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_BASE->ARR/2;
 80022e0:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <Piece_Debug_vPrintGoal+0x1e0>)
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	4b5f      	ldr	r3, [pc, #380]	; (8002464 <Piece_Debug_vPrintGoal+0x1e4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0852      	lsrs	r2, r2, #1
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 80022ec:	2100      	movs	r1, #0
 80022ee:	485d      	ldr	r0, [pc, #372]	; (8002464 <Piece_Debug_vPrintGoal+0x1e4>)
 80022f0:	f004 fbc2 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
 80022f4:	e003      	b.n	80022fe <Piece_Debug_vPrintGoal+0x7e>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 80022f6:	2100      	movs	r1, #0
 80022f8:	485a      	ldr	r0, [pc, #360]	; (8002464 <Piece_Debug_vPrintGoal+0x1e4>)
 80022fa:	f004 fd09 	bl	8006d10 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002304:	339b      	adds	r3, #155	; 0x9b
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02c      	beq.n	8002366 <Piece_Debug_vPrintGoal+0xe6>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002312:	339d      	adds	r3, #157	; 0x9d
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461c      	mov	r4, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800231e:	339d      	adds	r3, #157	; 0x9d
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff ff71 	bl	800220c <Piece_usGetPitchTick>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	4621      	mov	r1, r4
 8002330:	484d      	ldr	r0, [pc, #308]	; (8002468 <Piece_Debug_vPrintGoal+0x1e8>)
 8002332:	f00d fa0b 	bl	800f74c <iprintf>

		D_TIMER_BASE->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800233c:	339d      	adds	r3, #157	; 0x9d
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff ff62 	bl	800220c <Piece_usGetPitchTick>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	4b47      	ldr	r3, [pc, #284]	; (800246c <Piece_Debug_vPrintGoal+0x1ec>)
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_BASE->ARR/2;
 8002350:	4b46      	ldr	r3, [pc, #280]	; (800246c <Piece_Debug_vPrintGoal+0x1ec>)
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <Piece_Debug_vPrintGoal+0x1f0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0852      	lsrs	r2, r2, #1
 800235a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 800235c:	2100      	movs	r1, #0
 800235e:	4844      	ldr	r0, [pc, #272]	; (8002470 <Piece_Debug_vPrintGoal+0x1f0>)
 8002360:	f004 fb8a 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
 8002364:	e003      	b.n	800236e <Piece_Debug_vPrintGoal+0xee>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8002366:	2100      	movs	r1, #0
 8002368:	4841      	ldr	r0, [pc, #260]	; (8002470 <Piece_Debug_vPrintGoal+0x1f0>)
 800236a:	f004 fcd1 	bl	8006d10 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002374:	339e      	adds	r3, #158	; 0x9e
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d02c      	beq.n	80023d6 <Piece_Debug_vPrintGoal+0x156>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002382:	33a0      	adds	r3, #160	; 0xa0
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461c      	mov	r4, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800238e:	33a0      	adds	r3, #160	; 0xa0
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	2002      	movs	r0, #2
 8002396:	f7ff ff39 	bl	800220c <Piece_usGetPitchTick>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4621      	mov	r1, r4
 80023a0:	4834      	ldr	r0, [pc, #208]	; (8002474 <Piece_Debug_vPrintGoal+0x1f4>)
 80023a2:	f00d f9d3 	bl	800f74c <iprintf>

		A_TIMER_BASE->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023ac:	33a0      	adds	r3, #160	; 0xa0
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	2002      	movs	r0, #2
 80023b4:	f7ff ff2a 	bl	800220c <Piece_usGetPitchTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <Piece_Debug_vPrintGoal+0x1f8>)
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_BASE->ARR/2;
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <Piece_Debug_vPrintGoal+0x1f8>)
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <Piece_Debug_vPrintGoal+0x1fc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0852      	lsrs	r2, r2, #1
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 80023cc:	2100      	movs	r1, #0
 80023ce:	482b      	ldr	r0, [pc, #172]	; (800247c <Piece_Debug_vPrintGoal+0x1fc>)
 80023d0:	f004 fb52 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
 80023d4:	e003      	b.n	80023de <Piece_Debug_vPrintGoal+0x15e>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 80023d6:	2100      	movs	r1, #0
 80023d8:	4828      	ldr	r0, [pc, #160]	; (800247c <Piece_Debug_vPrintGoal+0x1fc>)
 80023da:	f004 fc99 	bl	8006d10 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023e4:	33a1      	adds	r3, #161	; 0xa1
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02c      	beq.n	8002446 <Piece_Debug_vPrintGoal+0x1c6>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023f2:	33a3      	adds	r3, #163	; 0xa3
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461c      	mov	r4, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80023fe:	33a3      	adds	r3, #163	; 0xa3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	4619      	mov	r1, r3
 8002404:	2003      	movs	r0, #3
 8002406:	f7ff ff01 	bl	800220c <Piece_usGetPitchTick>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	4621      	mov	r1, r4
 8002410:	481b      	ldr	r0, [pc, #108]	; (8002480 <Piece_Debug_vPrintGoal+0x200>)
 8002412:	f00d f99b 	bl	800f74c <iprintf>

		E_TIMER_BASE->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800241c:	33a3      	adds	r3, #163	; 0xa3
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	2003      	movs	r0, #3
 8002424:	f7ff fef2 	bl	800220c <Piece_usGetPitchTick>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <Piece_Debug_vPrintGoal+0x204>)
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_BASE->ARR/2;
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <Piece_Debug_vPrintGoal+0x204>)
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <Piece_Debug_vPrintGoal+0x208>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0852      	lsrs	r2, r2, #1
 800243a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 800243c:	2100      	movs	r1, #0
 800243e:	4812      	ldr	r0, [pc, #72]	; (8002488 <Piece_Debug_vPrintGoal+0x208>)
 8002440:	f004 fb1a 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 8002444:	e003      	b.n	800244e <Piece_Debug_vPrintGoal+0x1ce>
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8002446:	2100      	movs	r1, #0
 8002448:	480f      	ldr	r0, [pc, #60]	; (8002488 <Piece_Debug_vPrintGoal+0x208>)
 800244a:	f004 fb15 	bl	8006a78 <HAL_TIM_PWM_Start_IT>
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	bf00      	nop
 8002458:	080109b0 	.word	0x080109b0
 800245c:	080109b8 	.word	0x080109b8
 8002460:	40012c00 	.word	0x40012c00
 8002464:	2000c7fc 	.word	0x2000c7fc
 8002468:	080109c8 	.word	0x080109c8
 800246c:	40014000 	.word	0x40014000
 8002470:	200045ec 	.word	0x200045ec
 8002474:	080109d8 	.word	0x080109d8
 8002478:	40014400 	.word	0x40014400
 800247c:	2000d970 	.word	0x2000d970
 8002480:	080109e8 	.word	0x080109e8
 8002484:	40014800 	.word	0x40014800
 8002488:	20004640 	.word	0x20004640

0800248c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_MspInit+0x4c>)
 8002494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_MspInit+0x4c>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6613      	str	r3, [r2, #96]	; 0x60
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_MspInit+0x4c>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_MspInit+0x4c>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_MspInit+0x4c>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6593      	str	r3, [r2, #88]	; 0x58
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_MspInit+0x4c>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	210f      	movs	r1, #15
 80024c6:	f06f 0001 	mvn.w	r0, #1
 80024ca:	f001 ff07 	bl	80042dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <HAL_ADC_MspInit+0x84>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12c      	bne.n	8002558 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_ADC_MspInit+0x88>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_ADC_MspInit+0x88>)
 8002504:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_ADC_MspInit+0x88>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <HAL_ADC_MspInit+0x88>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_ADC_MspInit+0x88>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_ADC_MspInit+0x88>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800252e:	2301      	movs	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002532:	230b      	movs	r3, #11
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002544:	f001 fef4 	bl	8004330 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002548:	2200      	movs	r2, #0
 800254a:	2105      	movs	r1, #5
 800254c:	2012      	movs	r0, #18
 800254e:	f001 fec5 	bl	80042dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002552:	2012      	movs	r0, #18
 8002554:	f001 fede 	bl	8004314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002558:	bf00      	nop
 800255a:	3728      	adds	r7, #40	; 0x28
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	50040000 	.word	0x50040000
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a25      	ldr	r2, [pc, #148]	; (800261c <HAL_SPI_MspInit+0xb4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d144      	bne.n	8002614 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	4a24      	ldr	r2, [pc, #144]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 8002590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002594:	6613      	str	r3, [r2, #96]	; 0x60
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <HAL_SPI_MspInit+0xb8>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025d2:	2320      	movs	r3, #32
 80025d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025e2:	2305      	movs	r3, #5
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f0:	f001 fe9e 	bl	8004330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025f4:	2330      	movs	r3, #48	; 0x30
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002604:	2305      	movs	r3, #5
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <HAL_SPI_MspInit+0xbc>)
 8002610:	f001 fe8e 	bl	8004330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013000 	.word	0x40013000
 8002620:	40021000 	.word	0x40021000
 8002624:	48000400 	.word	0x48000400

08002628 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_TIM_PWM_MspInit+0x5c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10c      	bne.n	8002654 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_TIM_PWM_MspInit+0x60>)
 800263c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_TIM_PWM_MspInit+0x60>)
 8002640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002644:	6613      	str	r3, [r2, #96]	; 0x60
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_TIM_PWM_MspInit+0x60>)
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002652:	e010      	b.n	8002676 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_TIM_PWM_MspInit+0x64>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10b      	bne.n	8002676 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_TIM_PWM_MspInit+0x60>)
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_TIM_PWM_MspInit+0x60>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6613      	str	r3, [r2, #96]	; 0x60
 800266a:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_TIM_PWM_MspInit+0x60>)
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40014000 	.word	0x40014000

08002690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_TIM_Base_MspInit+0x5c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10c      	bne.n	80026bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_TIM_Base_MspInit+0x60>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <HAL_TIM_Base_MspInit+0x60>)
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	6613      	str	r3, [r2, #96]	; 0x60
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_TIM_Base_MspInit+0x60>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80026ba:	e010      	b.n	80026de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_TIM_Base_MspInit+0x64>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10b      	bne.n	80026de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_TIM_Base_MspInit+0x60>)
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_TIM_Base_MspInit+0x60>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6613      	str	r3, [r2, #96]	; 0x60
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_TIM_Base_MspInit+0x60>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40014400 	.word	0x40014400
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40014800 	.word	0x40014800

080026f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a46      	ldr	r2, [pc, #280]	; (8002830 <HAL_TIM_MspPostInit+0x138>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11e      	bne.n	8002758 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	4b46      	ldr	r3, [pc, #280]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	4a45      	ldr	r2, [pc, #276]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002740:	2300      	movs	r3, #0
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002744:	2301      	movs	r3, #1
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f001 fded 	bl	8004330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002756:	e067      	b.n	8002828 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM15)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a36      	ldr	r2, [pc, #216]	; (8002838 <HAL_TIM_MspPostInit+0x140>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d11d      	bne.n	800279e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a33      	ldr	r2, [pc, #204]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b31      	ldr	r3, [pc, #196]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800277a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002788:	2300      	movs	r3, #0
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800278c:	230e      	movs	r3, #14
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4619      	mov	r1, r3
 8002796:	4829      	ldr	r0, [pc, #164]	; (800283c <HAL_TIM_MspPostInit+0x144>)
 8002798:	f001 fdca 	bl	8004330 <HAL_GPIO_Init>
}
 800279c:	e044      	b.n	8002828 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM16)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_TIM_MspPostInit+0x148>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d11d      	bne.n	80027e4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027c0:	2340      	movs	r3, #64	; 0x40
 80027c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80027d0:	230e      	movs	r3, #14
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027de:	f001 fda7 	bl	8004330 <HAL_GPIO_Init>
}
 80027e2:	e021      	b.n	8002828 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM17)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a16      	ldr	r2, [pc, #88]	; (8002844 <HAL_TIM_MspPostInit+0x14c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d11c      	bne.n	8002828 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_TIM_MspPostInit+0x13c>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002816:	230e      	movs	r3, #14
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002824:	f001 fd84 	bl	8004330 <HAL_GPIO_Init>
}
 8002828:	bf00      	nop
 800282a:	3730      	adds	r7, #48	; 0x30
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40014000 	.word	0x40014000
 800283c:	48000400 	.word	0x48000400
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <HAL_UART_MspInit+0x7c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d128      	bne.n	80028bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_UART_MspInit+0x80>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_UART_MspInit+0x80>)
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_UART_MspInit+0x80>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_UART_MspInit+0x80>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_UART_MspInit+0x80>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_UART_MspInit+0x80>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800289a:	230c      	movs	r3, #12
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028aa:	2307      	movs	r3, #7
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b8:	f001 fd3a 	bl	8004330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40004400 	.word	0x40004400
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08c      	sub	sp, #48	; 0x30
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80028dc:	2200      	movs	r2, #0
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	2036      	movs	r0, #54	; 0x36
 80028e2:	f001 fcfb 	bl	80042dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028e6:	2036      	movs	r0, #54	; 0x36
 80028e8:	f001 fd14 	bl	8004314 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_InitTick+0x9c>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <HAL_InitTick+0x9c>)
 80028f2:	f043 0310 	orr.w	r3, r3, #16
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_InitTick+0x9c>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002904:	f107 0210 	add.w	r2, r7, #16
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f002 fcc0 	bl	8005294 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002914:	f002 fc92 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8002918:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <HAL_InitTick+0xa0>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0c9b      	lsrs	r3, r3, #18
 8002924:	3b01      	subs	r3, #1
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_InitTick+0xa4>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_InitTick+0xa8>)
 800292c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_InitTick+0xa4>)
 8002930:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002934:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002936:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <HAL_InitTick+0xa4>)
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <HAL_InitTick+0xa4>)
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_InitTick+0xa4>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002948:	4809      	ldr	r0, [pc, #36]	; (8002970 <HAL_InitTick+0xa4>)
 800294a:	f003 ff75 	bl	8006838 <HAL_TIM_Base_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d104      	bne.n	800295e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002954:	4806      	ldr	r0, [pc, #24]	; (8002970 <HAL_InitTick+0xa4>)
 8002956:	f003 ffc7 	bl	80068e8 <HAL_TIM_Base_Start_IT>
 800295a:	4603      	mov	r3, r0
 800295c:	e000      	b.n	8002960 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
}
 8002960:	4618      	mov	r0, r3
 8002962:	3730      	adds	r7, #48	; 0x30
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	431bde83 	.word	0x431bde83
 8002970:	2000d9bc 	.word	0x2000d9bc
 8002974:	40001000 	.word	0x40001000

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800297c:	e7fe      	b.n	800297c <NMI_Handler+0x4>

0800297e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <HardFault_Handler+0x4>

08002984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <MemManage_Handler+0x4>

0800298a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <BusFault_Handler+0x4>

08002990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <UsageFault_Handler+0x4>

08002996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <ADC1_2_IRQHandler+0x10>)
 80029aa:	f000 fcaf 	bl	800330c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000468c 	.word	0x2000468c

080029b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <TIM6_DAC_IRQHandler+0x38>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <TIM6_DAC_IRQHandler+0x38>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <TIM6_DAC_IRQHandler+0x38>)
 80029ce:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <TIM6_DAC_IRQHandler+0x3c>)
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <TIM6_DAC_IRQHandler+0x3c>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <TIM6_DAC_IRQHandler+0x3c>)
 80029e2:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <TIM6_DAC_IRQHandler+0x40>)
 80029e6:	f004 fa6f 	bl	8006ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200035a2 	.word	0x200035a2
 80029f4:	200035a0 	.word	0x200035a0
 80029f8:	2000d9bc 	.word	0x2000d9bc

080029fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e00a      	b.n	8002a24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a0e:	f3af 8000 	nop.w
 8002a12:	4601      	mov	r1, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf0      	blt.n	8002a0e <_read+0x12>
	}

return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e009      	b.n	8002a5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fa5b 	bl	8000f0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf1      	blt.n	8002a48 <_write+0x12>
	}
	return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_close>:

int _close(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return -1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a96:	605a      	str	r2, [r3, #4]
	return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_isatty>:

int _isatty(int file)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f00c fde0 	bl	800f6cc <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20018000 	.word	0x20018000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	20000140 	.word	0x20000140
 8002b40:	2000fad0 	.word	0x2000fad0

08002b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <SystemInit+0x5c>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <SystemInit+0x5c>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <SystemInit+0x60>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <SystemInit+0x60>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <SystemInit+0x60>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <SystemInit+0x60>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <SystemInit+0x60>)
 8002b70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <SystemInit+0x60>)
 8002b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <SystemInit+0x60>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <SystemInit+0x60>)
 8002b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SystemInit+0x60>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000ed00 	.word	0xe000ed00
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002be0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bac:	f7ff ffca 	bl	8002b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002bb0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002bb2:	e003      	b.n	8002bbc <LoopCopyDataInit>

08002bb4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002bb6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002bb8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002bba:	3104      	adds	r1, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002bbc:	480a      	ldr	r0, [pc, #40]	; (8002be8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <LoopForever+0xe>)
	adds	r2, r0, r1
 8002bc0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002bc2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002bc4:	d3f6      	bcc.n	8002bb4 <CopyDataInit>
	ldr	r2, =_sbss
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002bc8:	e002      	b.n	8002bd0 <LoopFillZerobss>

08002bca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002bca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002bcc:	f842 3b04 	str.w	r3, [r2], #4

08002bd0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <LoopForever+0x16>)
	cmp	r2, r3
 8002bd2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bd4:	d3f9      	bcc.n	8002bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bd6:	f00c fd7f 	bl	800f6d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bda:	f7fe f9bf 	bl	8000f5c <main>

08002bde <LoopForever>:

LoopForever:
    b LoopForever
 8002bde:	e7fe      	b.n	8002bde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002be0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002be4:	08011010 	.word	0x08011010
	ldr	r0, =_sdata
 8002be8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002bec:	2000011c 	.word	0x2000011c
	ldr	r2, =_sbss
 8002bf0:	2000011c 	.word	0x2000011c
	ldr	r3, = _ebss
 8002bf4:	2000fad0 	.word	0x2000fad0

08002bf8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC3_IRQHandler>
	...

08002bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_Init+0x3c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <HAL_Init+0x3c>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c12:	2003      	movs	r0, #3
 8002c14:	f001 fb57 	bl	80042c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7ff fe57 	bl	80028cc <HAL_InitTick>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	71fb      	strb	r3, [r7, #7]
 8002c28:	e001      	b.n	8002c2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c2a:	f7ff fc2f 	bl	800248c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40022000 	.word	0x40022000

08002c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_IncTick+0x20>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x24>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_IncTick+0x24>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000009c 	.word	0x2000009c
 8002c60:	2000da08 	.word	0x2000da08

08002c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return uwTick;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_GetTick+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	2000da08 	.word	0x2000da08

08002c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff ffee 	bl	8002c64 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c94:	d005      	beq.n	8002ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_Delay+0x44>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca2:	bf00      	nop
 8002ca4:	f7ff ffde 	bl	8002c64 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d8f7      	bhi.n	8002ca4 <HAL_Delay+0x28>
  {
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000009c 	.word	0x2000009c

08002cc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3360      	adds	r3, #96	; 0x60
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <LL_ADC_SetOffset+0x44>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	03fff000 	.word	0x03fff000

08002d74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	461a      	mov	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3360      	adds	r3, #96	; 0x60
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3330      	adds	r3, #48	; 0x30
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	4413      	add	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	211f      	movs	r1, #31
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0e9b      	lsrs	r3, r3, #26
 8002e34:	f003 011f 	and.w	r1, r3, #31
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	431a      	orrs	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b087      	sub	sp, #28
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	0e5b      	lsrs	r3, r3, #25
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	4413      	add	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	0d1b      	lsrs	r3, r3, #20
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2107      	movs	r1, #7
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	401a      	ands	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	0d1b      	lsrs	r3, r3, #20
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0318 	and.w	r3, r3, #24
 8002ef2:	4908      	ldr	r1, [pc, #32]	; (8002f14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ef4:	40d9      	lsrs	r1, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	400b      	ands	r3, r1
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	0007ffff 	.word	0x0007ffff

08002f18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 031f 	and.w	r3, r3, #31
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6093      	str	r3, [r2, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f88:	d101      	bne.n	8002f8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <LL_ADC_IsEnabled+0x18>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <LL_ADC_IsEnabled+0x1a>
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d101      	bne.n	800302a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d101      	bne.n	8003050 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e136      	b.n	80032e8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fa27 	bl	80024dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff67 	bl	8002f74 <LL_ADC_IsDeepPowerDownEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff4d 	bl	8002f50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff82 	bl	8002fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d115      	bne.n	80030f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff66 	bl	8002f9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030d0:	4b87      	ldr	r3, [pc, #540]	; (80032f0 <HAL_ADC_Init+0x290>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	4a87      	ldr	r2, [pc, #540]	; (80032f4 <HAL_ADC_Init+0x294>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030e4:	e002      	b.n	80030ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff ff64 	bl	8002fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f043 0210 	orr.w	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff75 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 8003128:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 80cf 	bne.w	80032d6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 80cb 	bne.w	80032d6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003148:	f043 0202 	orr.w	r2, r3, #2
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff49 	bl	8002fec <LL_ADC_IsEnabled>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d115      	bne.n	800318c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003160:	4865      	ldr	r0, [pc, #404]	; (80032f8 <HAL_ADC_Init+0x298>)
 8003162:	f7ff ff43 	bl	8002fec <LL_ADC_IsEnabled>
 8003166:	4604      	mov	r4, r0
 8003168:	4864      	ldr	r0, [pc, #400]	; (80032fc <HAL_ADC_Init+0x29c>)
 800316a:	f7ff ff3f 	bl	8002fec <LL_ADC_IsEnabled>
 800316e:	4603      	mov	r3, r0
 8003170:	431c      	orrs	r4, r3
 8003172:	4863      	ldr	r0, [pc, #396]	; (8003300 <HAL_ADC_Init+0x2a0>)
 8003174:	f7ff ff3a 	bl	8002fec <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	4323      	orrs	r3, r4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4619      	mov	r1, r3
 8003186:	485f      	ldr	r0, [pc, #380]	; (8003304 <HAL_ADC_Init+0x2a4>)
 8003188:	f7ff fd9c 	bl	8002cc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e5b      	ldrb	r3, [r3, #25]
 8003190:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003196:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800319c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d106      	bne.n	80031c8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	3b01      	subs	r3, #1
 80031c0:	045b      	lsls	r3, r3, #17
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_ADC_Init+0x2a8>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff08 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 8003202:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff15 	bl	8003038 <LL_ADC_INJ_IsConversionOngoing>
 800320e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d13d      	bne.n	8003292 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d13a      	bne.n	8003292 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003220:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003228:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003238:	f023 0302 	bic.w	r3, r3, #2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	69b9      	ldr	r1, [r7, #24]
 8003242:	430b      	orrs	r3, r1
 8003244:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800324c:	2b01      	cmp	r3, #1
 800324e:	d118      	bne.n	8003282 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003272:	430a      	orrs	r2, r1
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	e007      	b.n	8003292 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10c      	bne.n	80032b4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	f023 010f 	bic.w	r1, r3, #15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
 80032b2:	e007      	b.n	80032c4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 020f 	bic.w	r2, r2, #15
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
 80032d4:	e007      	b.n	80032e6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0210 	orr.w	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3724      	adds	r7, #36	; 0x24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	20000094 	.word	0x20000094
 80032f4:	053e2d63 	.word	0x053e2d63
 80032f8:	50040000 	.word	0x50040000
 80032fc:	50040100 	.word	0x50040100
 8003300:	50040200 	.word	0x50040200
 8003304:	50040300 	.word	0x50040300
 8003308:	fff0c007 	.word	0xfff0c007

0800330c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003314:	2300      	movs	r3, #0
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003328:	4882      	ldr	r0, [pc, #520]	; (8003534 <HAL_ADC_IRQHandler+0x228>)
 800332a:	f7ff fdf5 	bl	8002f18 <LL_ADC_GetMultimode>
 800332e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d017      	beq.n	800336a <HAL_ADC_IRQHandler+0x5e>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d012      	beq.n	800336a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fe4b 	bl	8003ff8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d004      	beq.n	800337e <HAL_ADC_IRQHandler+0x72>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8083 	beq.w	8003490 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d07d      	beq.n	8003490 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fd10 	bl	8002dd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d062      	beq.n	8003482 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5d      	ldr	r2, [pc, #372]	; (8003538 <HAL_ADC_IRQHandler+0x22c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d002      	beq.n	80033cc <HAL_ADC_IRQHandler+0xc0>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	e000      	b.n	80033ce <HAL_ADC_IRQHandler+0xc2>
 80033cc:	4b5b      	ldr	r3, [pc, #364]	; (800353c <HAL_ADC_IRQHandler+0x230>)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d008      	beq.n	80033e8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d002      	beq.n	80033e8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d104      	bne.n	80033f2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	e00c      	b.n	800340c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a50      	ldr	r2, [pc, #320]	; (8003538 <HAL_ADC_IRQHandler+0x22c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d002      	beq.n	8003402 <HAL_ADC_IRQHandler+0xf6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	e000      	b.n	8003404 <HAL_ADC_IRQHandler+0xf8>
 8003402:	4b4e      	ldr	r3, [pc, #312]	; (800353c <HAL_ADC_IRQHandler+0x230>)
 8003404:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d135      	bne.n	8003482 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b08      	cmp	r3, #8
 8003422:	d12e      	bne.n	8003482 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fdf2 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d11a      	bne.n	800346a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020c 	bic.w	r2, r2, #12
 8003442:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d112      	bne.n	8003482 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
 8003468:	e00b      	b.n	8003482 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	f043 0210 	orr.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f95c 	bl	8003740 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	220c      	movs	r2, #12
 800348e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <HAL_ADC_IRQHandler+0x198>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 809f 	beq.w	80035ee <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8099 	beq.w	80035ee <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fcbb 	bl	8002e54 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034de:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fc76 	bl	8002dd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034ea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a11      	ldr	r2, [pc, #68]	; (8003538 <HAL_ADC_IRQHandler+0x22c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d002      	beq.n	80034fc <HAL_ADC_IRQHandler+0x1f0>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	e000      	b.n	80034fe <HAL_ADC_IRQHandler+0x1f2>
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <HAL_ADC_IRQHandler+0x230>)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4293      	cmp	r3, r2
 8003504:	d008      	beq.n	8003518 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d002      	beq.n	8003518 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b07      	cmp	r3, #7
 8003516:	d104      	bne.n	8003522 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	e013      	b.n	800354a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <HAL_ADC_IRQHandler+0x22c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d009      	beq.n	8003540 <HAL_ADC_IRQHandler+0x234>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	e007      	b.n	8003542 <HAL_ADC_IRQHandler+0x236>
 8003532:	bf00      	nop
 8003534:	50040300 	.word	0x50040300
 8003538:	50040100 	.word	0x50040100
 800353c:	50040000 	.word	0x50040000
 8003540:	4b7d      	ldr	r3, [pc, #500]	; (8003738 <HAL_ADC_IRQHandler+0x42c>)
 8003542:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d047      	beq.n	80035e0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_ADC_IRQHandler+0x25e>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d03f      	beq.n	80035e0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003566:	2b00      	cmp	r3, #0
 8003568:	d13a      	bne.n	80035e0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d133      	bne.n	80035e0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d12e      	bne.n	80035e0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fd56 	bl	8003038 <LL_ADC_INJ_IsConversionOngoing>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11a      	bne.n	80035c8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035a0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d112      	bne.n	80035e0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
 80035c6:	e00b      	b.n	80035e0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035cc:	f043 0210 	orr.w	r2, r3, #16
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f043 0201 	orr.w	r2, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fce1 	bl	8003fa8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2260      	movs	r2, #96	; 0x60
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d011      	beq.n	800361c <HAL_ADC_IRQHandler+0x310>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8a0 	bl	8003754 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <HAL_ADC_IRQHandler+0x340>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fcc7 	bl	8003fd0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <HAL_ADC_IRQHandler+0x370>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fcb9 	bl	8003fe4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d036      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x3e8>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d031      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003698:	2301      	movs	r3, #1
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	e014      	b.n	80036c8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036a4:	4825      	ldr	r0, [pc, #148]	; (800373c <HAL_ADC_IRQHandler+0x430>)
 80036a6:	f7ff fc45 	bl	8002f34 <LL_ADC_GetMultiDMATransfer>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036b0:	2301      	movs	r3, #1
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	e008      	b.n	80036c8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036c4:	2301      	movs	r3, #1
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10e      	bne.n	80036ec <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f043 0202 	orr.w	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f83e 	bl	8003768 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2210      	movs	r2, #16
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <HAL_ADC_IRQHandler+0x424>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f043 0208 	orr.w	r2, r3, #8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003728:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fc46 	bl	8003fbc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003730:	bf00      	nop
 8003732:	3728      	adds	r7, #40	; 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	50040000 	.word	0x50040000
 800373c:	50040300 	.word	0x50040300

08003740 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0b6      	sub	sp, #216	; 0xd8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003786:	2300      	movs	r3, #0
 8003788:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_ADC_ConfigChannel+0x22>
 800379a:	2302      	movs	r3, #2
 800379c:	e3c7      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x7b2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fc31 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 83a8 	bne.w	8003f08 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d824      	bhi.n	800380a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	3b02      	subs	r3, #2
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d81b      	bhi.n	8003802 <HAL_ADC_ConfigChannel+0x86>
 80037ca:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <HAL_ADC_ConfigChannel+0x54>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037e9 	.word	0x080037e9
 80037d8:	080037f1 	.word	0x080037f1
 80037dc:	080037f9 	.word	0x080037f9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	220c      	movs	r2, #12
 80037e4:	605a      	str	r2, [r3, #4]
          break;
 80037e6:	e011      	b.n	800380c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2212      	movs	r2, #18
 80037ec:	605a      	str	r2, [r3, #4]
          break;
 80037ee:	e00d      	b.n	800380c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2218      	movs	r2, #24
 80037f4:	605a      	str	r2, [r3, #4]
          break;
 80037f6:	e009      	b.n	800380c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fe:	605a      	str	r2, [r3, #4]
          break;
 8003800:	e004      	b.n	800380c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2206      	movs	r2, #6
 8003806:	605a      	str	r2, [r3, #4]
          break;
 8003808:	e000      	b.n	800380c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800380a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	f7ff faef 	bl	8002dfc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fbf5 	bl	8003012 <LL_ADC_REG_IsConversionOngoing>
 8003828:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fc01 	bl	8003038 <LL_ADC_INJ_IsConversionOngoing>
 8003836:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800383a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800383e:	2b00      	cmp	r3, #0
 8003840:	f040 81a6 	bne.w	8003b90 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 81a1 	bne.w	8003b90 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	461a      	mov	r2, r3
 800385c:	f7ff fb0d 	bl	8002e7a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	08db      	lsrs	r3, r3, #3
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d00a      	beq.n	8003898 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6919      	ldr	r1, [r3, #16]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003892:	f7ff fa4b 	bl	8002d2c <LL_ADC_SetOffset>
 8003896:	e17b      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fa68 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x148>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fa5d 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	f003 021f 	and.w	r2, r3, #31
 80038c2:	e01e      	b.n	8003902 <HAL_ADC_ConfigChannel+0x186>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fa52 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80038f2:	2320      	movs	r3, #32
 80038f4:	e004      	b.n	8003900 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80038f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_ADC_ConfigChannel+0x19e>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0e9b      	lsrs	r3, r3, #26
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	e018      	b.n	800394c <HAL_ADC_ConfigChannel+0x1d0>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003926:	fa93 f3a3 	rbit	r3, r3
 800392a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800392e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800393e:	2320      	movs	r3, #32
 8003940:	e004      	b.n	800394c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800394c:	429a      	cmp	r2, r3
 800394e:	d106      	bne.n	800395e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fa21 	bl	8002da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fa05 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 800396a:	4603      	mov	r3, r0
 800396c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <HAL_ADC_ConfigChannel+0x20e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff f9fa 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	f003 021f 	and.w	r2, r3, #31
 8003988:	e01e      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x24c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f9ef 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80039b8:	2320      	movs	r3, #32
 80039ba:	e004      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80039bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x264>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0e9b      	lsrs	r3, r3, #26
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	e018      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x296>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003a04:	2320      	movs	r3, #32
 8003a06:	e004      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d106      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff f9be 	bl	8002da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2102      	movs	r1, #2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff f9a2 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x2d4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff f997 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003a46:	4603      	mov	r3, r0
 8003a48:	0e9b      	lsrs	r3, r3, #26
 8003a4a:	f003 021f 	and.w	r2, r3, #31
 8003a4e:	e01e      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x312>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2102      	movs	r1, #2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff f98c 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	e004      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d105      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x32a>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	0e9b      	lsrs	r3, r3, #26
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	e016      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x358>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab2:	fa93 f3a3 	rbit	r3, r3
 8003ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	e004      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d106      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f95d 	bl	8002da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2103      	movs	r1, #3
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff f941 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x396>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2103      	movs	r1, #3
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f936 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	0e9b      	lsrs	r3, r3, #26
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	e017      	b.n	8003b42 <HAL_ADC_ConfigChannel+0x3c6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2103      	movs	r1, #3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f92b 	bl	8002d74 <LL_ADC_GetOffsetChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	fa93 f3a3 	rbit	r3, r3
 8003b28:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003b34:	2320      	movs	r3, #32
 8003b36:	e003      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d105      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x3de>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	0e9b      	lsrs	r3, r3, #26
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	e011      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x402>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b72:	2320      	movs	r3, #32
 8003b74:	e003      	b.n	8003b7e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d106      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2103      	movs	r1, #3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff f908 	bl	8002da0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff fa29 	bl	8002fec <LL_ADC_IsEnabled>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 813f 	bne.w	8003e20 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7ff f98e 	bl	8002ed0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a8e      	ldr	r2, [pc, #568]	; (8003df4 <HAL_ADC_ConfigChannel+0x678>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	f040 8130 	bne.w	8003e20 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x46c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2b09      	cmp	r3, #9
 8003bde:	bf94      	ite	ls
 8003be0:	2301      	movls	r3, #1
 8003be2:	2300      	movhi	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	e019      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x4a0>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003c00:	2320      	movs	r3, #32
 8003c02:	e003      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	2b09      	cmp	r3, #9
 8003c14:	bf94      	ite	ls
 8003c16:	2301      	movls	r3, #1
 8003c18:	2300      	movhi	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d079      	beq.n	8003d14 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x4c0>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	0e9b      	lsrs	r3, r3, #26
 8003c32:	3301      	adds	r3, #1
 8003c34:	069b      	lsls	r3, r3, #26
 8003c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3a:	e015      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x4ec>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c44:	fa93 f3a3 	rbit	r3, r3
 8003c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003c54:	2320      	movs	r3, #32
 8003c56:	e003      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x50c>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0e9b      	lsrs	r3, r3, #26
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	e017      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x53c>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e003      	b.n	8003cac <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f003 031f 	and.w	r3, r3, #31
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	ea42 0103 	orr.w	r1, r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x562>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0e9b      	lsrs	r3, r3, #26
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f003 021f 	and.w	r2, r3, #31
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	051b      	lsls	r3, r3, #20
 8003cdc:	e018      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x594>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	e003      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f003 021f 	and.w	r2, r3, #31
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d10:	430b      	orrs	r3, r1
 8003d12:	e080      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d107      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x5b4>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	0e9b      	lsrs	r3, r3, #26
 8003d26:	3301      	adds	r3, #1
 8003d28:	069b      	lsls	r3, r3, #26
 8003d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d2e:	e015      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x5e0>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e003      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	069b      	lsls	r3, r3, #26
 8003d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_ADC_ConfigChannel+0x600>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	0e9b      	lsrs	r3, r3, #26
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	e017      	b.n	8003dac <HAL_ADC_ConfigChannel+0x630>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	61fb      	str	r3, [r7, #28]
  return result;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d94:	2320      	movs	r3, #32
 8003d96:	e003      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	ea42 0103 	orr.w	r1, r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x65c>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	3b1e      	subs	r3, #30
 8003dd0:	051b      	lsls	r3, r3, #20
 8003dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	e01d      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x698>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	613b      	str	r3, [r7, #16]
  return result;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003df0:	2320      	movs	r3, #32
 8003df2:	e005      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x684>
 8003df4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f003 021f 	and.w	r2, r3, #31
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3b1e      	subs	r3, #30
 8003e0e:	051b      	lsls	r3, r3, #20
 8003e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e14:	430b      	orrs	r3, r1
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	6892      	ldr	r2, [r2, #8]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f7ff f82d 	bl	8002e7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d07a      	beq.n	8003f22 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e2c:	4843      	ldr	r0, [pc, #268]	; (8003f3c <HAL_ADC_ConfigChannel+0x7c0>)
 8003e2e:	f7fe ff6f 	bl	8002d10 <LL_ADC_GetCommonPathInternalCh>
 8003e32:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a41      	ldr	r2, [pc, #260]	; (8003f40 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d12c      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d126      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x6e4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d15d      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4834      	ldr	r0, [pc, #208]	; (8003f3c <HAL_ADC_ConfigChannel+0x7c0>)
 8003e6c:	f7fe ff3d 	bl	8002cea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e70:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <HAL_ADC_ConfigChannel+0x7d0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	4a36      	ldr	r2, [pc, #216]	; (8003f50 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e8a:	e002      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f9      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e98:	e040      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2d      	ldr	r2, [pc, #180]	; (8003f54 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d118      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x75a>
 8003ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d112      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <HAL_ADC_ConfigChannel+0x7c8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <HAL_ADC_ConfigChannel+0x748>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d12d      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ecc:	4619      	mov	r1, r3
 8003ece:	481b      	ldr	r0, [pc, #108]	; (8003f3c <HAL_ADC_ConfigChannel+0x7c0>)
 8003ed0:	f7fe ff0b 	bl	8002cea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed4:	e024      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1f      	ldr	r2, [pc, #124]	; (8003f58 <HAL_ADC_ConfigChannel+0x7dc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d120      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d11a      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d115      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003efa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003efe:	4619      	mov	r1, r3
 8003f00:	480e      	ldr	r0, [pc, #56]	; (8003f3c <HAL_ADC_ConfigChannel+0x7c0>)
 8003f02:	f7fe fef2 	bl	8002cea <LL_ADC_SetCommonPathInternalCh>
 8003f06:	e00c      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f1a:	e002      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	37d8      	adds	r7, #216	; 0xd8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	80080000 	.word	0x80080000
 8003f3c:	50040300 	.word	0x50040300
 8003f40:	c7520000 	.word	0xc7520000
 8003f44:	50040000 	.word	0x50040000
 8003f48:	50040200 	.word	0x50040200
 8003f4c:	20000094 	.word	0x20000094
 8003f50:	053e2d63 	.word	0x053e2d63
 8003f54:	cb840000 	.word	0xcb840000
 8003f58:	80000001 	.word	0x80000001

08003f5c <LL_ADC_IsEnabled>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <LL_ADC_IsEnabled+0x18>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <LL_ADC_IsEnabled+0x1a>
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d101      	bne.n	8003f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b09f      	sub	sp, #124	; 0x7c
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004026:	2302      	movs	r3, #2
 8004028:	e093      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004032:	2300      	movs	r3, #0
 8004034:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004036:	2300      	movs	r3, #0
 8004038:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a47      	ldr	r2, [pc, #284]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d102      	bne.n	800404a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004044:	4b46      	ldr	r3, [pc, #280]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	e001      	b.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e072      	b.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff87 	bl	8003f82 <LL_ADC_REG_IsConversionOngoing>
 8004074:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff ff81 	bl	8003f82 <LL_ADC_REG_IsConversionOngoing>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d154      	bne.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004088:	2b00      	cmp	r3, #0
 800408a:	d151      	bne.n	8004130 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800408c:	4b35      	ldr	r3, [pc, #212]	; (8004164 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800408e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d02c      	beq.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040aa:	035b      	lsls	r3, r3, #13
 80040ac:	430b      	orrs	r3, r1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040b4:	4829      	ldr	r0, [pc, #164]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040b6:	f7ff ff51 	bl	8003f5c <LL_ADC_IsEnabled>
 80040ba:	4604      	mov	r4, r0
 80040bc:	4828      	ldr	r0, [pc, #160]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040be:	f7ff ff4d 	bl	8003f5c <LL_ADC_IsEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	431c      	orrs	r4, r3
 80040c6:	4828      	ldr	r0, [pc, #160]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80040c8:	f7ff ff48 	bl	8003f5c <LL_ADC_IsEnabled>
 80040cc:	4603      	mov	r3, r0
 80040ce:	4323      	orrs	r3, r4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d137      	bne.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040dc:	f023 030f 	bic.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	6811      	ldr	r1, [r2, #0]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	6892      	ldr	r2, [r2, #8]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	431a      	orrs	r2, r3
 80040ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040f0:	e028      	b.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040fe:	4817      	ldr	r0, [pc, #92]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004100:	f7ff ff2c 	bl	8003f5c <LL_ADC_IsEnabled>
 8004104:	4604      	mov	r4, r0
 8004106:	4816      	ldr	r0, [pc, #88]	; (8004160 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004108:	f7ff ff28 	bl	8003f5c <LL_ADC_IsEnabled>
 800410c:	4603      	mov	r3, r0
 800410e:	431c      	orrs	r4, r3
 8004110:	4815      	ldr	r0, [pc, #84]	; (8004168 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004112:	f7ff ff23 	bl	8003f5c <LL_ADC_IsEnabled>
 8004116:	4603      	mov	r3, r0
 8004118:	4323      	orrs	r3, r4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d112      	bne.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800411e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004126:	f023 030f 	bic.w	r3, r3, #15
 800412a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800412c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800412e:	e009      	b.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004142:	e000      	b.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004144:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800414e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004152:	4618      	mov	r0, r3
 8004154:	377c      	adds	r7, #124	; 0x7c
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}
 800415a:	bf00      	nop
 800415c:	50040000 	.word	0x50040000
 8004160:	50040100 	.word	0x50040100
 8004164:	50040300 	.word	0x50040300
 8004168:	50040200 	.word	0x50040200

0800416c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004188:	4013      	ands	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	60d3      	str	r3, [r2, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <__NVIC_GetPriorityGrouping+0x18>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 0307 	and.w	r3, r3, #7
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	db0b      	blt.n	80041fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	f003 021f 	and.w	r2, r3, #31
 80041e8:	4907      	ldr	r1, [pc, #28]	; (8004208 <__NVIC_EnableIRQ+0x38>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2001      	movs	r0, #1
 80041f2:	fa00 f202 	lsl.w	r2, r0, r2
 80041f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000e100 	.word	0xe000e100

0800420c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421c:	2b00      	cmp	r3, #0
 800421e:	db0a      	blt.n	8004236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	490c      	ldr	r1, [pc, #48]	; (8004258 <__NVIC_SetPriority+0x4c>)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	0112      	lsls	r2, r2, #4
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	440b      	add	r3, r1
 8004230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004234:	e00a      	b.n	800424c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4908      	ldr	r1, [pc, #32]	; (800425c <__NVIC_SetPriority+0x50>)
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	3b04      	subs	r3, #4
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	440b      	add	r3, r1
 800424a:	761a      	strb	r2, [r3, #24]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000e100 	.word	0xe000e100
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f1c3 0307 	rsb	r3, r3, #7
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf28      	it	cs
 800427e:	2304      	movcs	r3, #4
 8004280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3304      	adds	r3, #4
 8004286:	2b06      	cmp	r3, #6
 8004288:	d902      	bls.n	8004290 <NVIC_EncodePriority+0x30>
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3b03      	subs	r3, #3
 800428e:	e000      	b.n	8004292 <NVIC_EncodePriority+0x32>
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	401a      	ands	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43d9      	mvns	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	4313      	orrs	r3, r2
         );
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ff4c 	bl	800416c <__NVIC_SetPriorityGrouping>
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042ee:	f7ff ff61 	bl	80041b4 <__NVIC_GetPriorityGrouping>
 80042f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	6978      	ldr	r0, [r7, #20]
 80042fa:	f7ff ffb1 	bl	8004260 <NVIC_EncodePriority>
 80042fe:	4602      	mov	r2, r0
 8004300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ff80 	bl	800420c <__NVIC_SetPriority>
}
 800430c:	bf00      	nop
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff54 	bl	80041d0 <__NVIC_EnableIRQ>
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800433e:	e17f      	b.n	8004640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2101      	movs	r1, #1
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8171 	beq.w	800463a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d00b      	beq.n	8004378 <HAL_GPIO_Init+0x48>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d007      	beq.n	8004378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800436c:	2b11      	cmp	r3, #17
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b12      	cmp	r3, #18
 8004376:	d130      	bne.n	80043da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ae:	2201      	movs	r2, #1
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4013      	ands	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 0201 	and.w	r2, r3, #1
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d118      	bne.n	8004418 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043ec:	2201      	movs	r2, #1
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	08db      	lsrs	r3, r3, #3
 8004402:	f003 0201 	and.w	r2, r3, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x128>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b12      	cmp	r3, #18
 8004456:	d123      	bne.n	80044a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	08da      	lsrs	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3208      	adds	r2, #8
 8004460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	220f      	movs	r2, #15
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	08da      	lsrs	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3208      	adds	r2, #8
 800449a:	6939      	ldr	r1, [r7, #16]
 800449c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0203 	and.w	r2, r3, #3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80ac 	beq.w	800463a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e2:	4b5f      	ldr	r3, [pc, #380]	; (8004660 <HAL_GPIO_Init+0x330>)
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	4a5e      	ldr	r2, [pc, #376]	; (8004660 <HAL_GPIO_Init+0x330>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6613      	str	r3, [r2, #96]	; 0x60
 80044ee:	4b5c      	ldr	r3, [pc, #368]	; (8004660 <HAL_GPIO_Init+0x330>)
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044fa:	4a5a      	ldr	r2, [pc, #360]	; (8004664 <HAL_GPIO_Init+0x334>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004524:	d025      	beq.n	8004572 <HAL_GPIO_Init+0x242>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4f      	ldr	r2, [pc, #316]	; (8004668 <HAL_GPIO_Init+0x338>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01f      	beq.n	800456e <HAL_GPIO_Init+0x23e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4e      	ldr	r2, [pc, #312]	; (800466c <HAL_GPIO_Init+0x33c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d019      	beq.n	800456a <HAL_GPIO_Init+0x23a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_GPIO_Init+0x340>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_GPIO_Init+0x236>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <HAL_GPIO_Init+0x344>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00d      	beq.n	8004562 <HAL_GPIO_Init+0x232>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4b      	ldr	r2, [pc, #300]	; (8004678 <HAL_GPIO_Init+0x348>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x22e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <HAL_GPIO_Init+0x34c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_GPIO_Init+0x22a>
 8004556:	2306      	movs	r3, #6
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800455a:	2307      	movs	r3, #7
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004572:	2300      	movs	r3, #0
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004584:	4937      	ldr	r1, [pc, #220]	; (8004664 <HAL_GPIO_Init+0x334>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004592:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_GPIO_Init+0x350>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	43db      	mvns	r3, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045b6:	4a32      	ldr	r2, [pc, #200]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80045bc:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e0:	4a27      	ldr	r2, [pc, #156]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_GPIO_Init+0x350>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_GPIO_Init+0x350>)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_GPIO_Init+0x350>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004634:	4a12      	ldr	r2, [pc, #72]	; (8004680 <HAL_GPIO_Init+0x350>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	3301      	adds	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f ae78 	bne.w	8004340 <HAL_GPIO_Init+0x10>
  }
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	40010000 	.word	0x40010000
 8004668:	48000400 	.word	0x48000400
 800466c:	48000800 	.word	0x48000800
 8004670:	48000c00 	.word	0x48000c00
 8004674:	48001000 	.word	0x48001000
 8004678:	48001400 	.word	0x48001400
 800467c:	48001800 	.word	0x48001800
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <HAL_PWREx_GetVoltageRange+0x18>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40007000 	.word	0x40007000

080046d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046de:	d130      	bne.n	8004742 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ec:	d038      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2232      	movs	r2, #50	; 0x32
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004714:	e002      	b.n	800471c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b01      	subs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004728:	d102      	bne.n	8004730 <HAL_PWREx_ControlVoltageScaling+0x60>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f2      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d110      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00f      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	d007      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004758:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40007000 	.word	0x40007000
 8004774:	20000094 	.word	0x20000094
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e3d4      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478e:	4ba1      	ldr	r3, [pc, #644]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004798:	4b9e      	ldr	r3, [pc, #632]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80e4 	beq.w	8004978 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_RCC_OscConfig+0x4a>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	f040 808b 	bne.w	80048d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 8087 	bne.w	80048d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c6:	4b93      	ldr	r3, [pc, #588]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_RCC_OscConfig+0x62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e3ac      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1a      	ldr	r2, [r3, #32]
 80047e2:	4b8c      	ldr	r3, [pc, #560]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_RCC_OscConfig+0x7c>
 80047ee:	4b89      	ldr	r3, [pc, #548]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f6:	e005      	b.n	8004804 <HAL_RCC_OscConfig+0x88>
 80047f8:	4b86      	ldr	r3, [pc, #536]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80047fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004804:	4293      	cmp	r3, r2
 8004806:	d223      	bcs.n	8004850 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fd73 	bl	80052f8 <RCC_SetFlashLatencyFromMSIRange>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e38d      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481c:	4b7d      	ldr	r3, [pc, #500]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a7c      	ldr	r2, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b7a      	ldr	r3, [pc, #488]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4977      	ldr	r1, [pc, #476]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483a:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	4972      	ldr	r1, [pc, #456]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
 800484e:	e025      	b.n	800489c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004850:	4b70      	ldr	r3, [pc, #448]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6f      	ldr	r2, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004856:	f043 0308 	orr.w	r3, r3, #8
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	496a      	ldr	r1, [pc, #424]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	4965      	ldr	r1, [pc, #404]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800487e:	4313      	orrs	r3, r2
 8004880:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fd33 	bl	80052f8 <RCC_SetFlashLatencyFromMSIRange>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e34d      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489c:	f000 fc36 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	495a      	ldr	r1, [pc, #360]	; (8004a18 <HAL_RCC_OscConfig+0x29c>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_RCC_OscConfig+0x2a0>)
 80048ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048bc:	4b58      	ldr	r3, [pc, #352]	; (8004a20 <HAL_RCC_OscConfig+0x2a4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe f803 	bl	80028cc <HAL_InitTick>
 80048c6:	4603      	mov	r3, r0
 80048c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d052      	beq.n	8004976 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	e331      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d032      	beq.n	8004942 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048dc:	4b4d      	ldr	r3, [pc, #308]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4c      	ldr	r2, [pc, #304]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e8:	f7fe f9bc 	bl	8002c64 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f0:	f7fe f9b8 	bl	8002c64 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e31a      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004902:	4b44      	ldr	r3, [pc, #272]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	493b      	ldr	r1, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	4936      	ldr	r1, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	e01a      	b.n	8004978 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004942:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a33      	ldr	r2, [pc, #204]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494e:	f7fe f989 	bl	8002c64 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004956:	f7fe f985 	bl	8002c64 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e2e7      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004968:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x1da>
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004976:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d074      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b08      	cmp	r3, #8
 8004988:	d005      	beq.n	8004996 <HAL_RCC_OscConfig+0x21a>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	d10e      	bne.n	80049ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d10b      	bne.n	80049ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d064      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d160      	bne.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e2c4      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x24a>
 80049b8:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a15      	ldr	r2, [pc, #84]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e01d      	b.n	8004a02 <HAL_RCC_OscConfig+0x286>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ce:	d10c      	bne.n	80049ea <HAL_RCC_OscConfig+0x26e>
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e00b      	b.n	8004a02 <HAL_RCC_OscConfig+0x286>
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a06      	ldr	r2, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x298>)
 80049fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01c      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fe f92b 	bl	8002c64 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a10:	e011      	b.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08010ae0 	.word	0x08010ae0
 8004a1c:	20000094 	.word	0x20000094
 8004a20:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fe f91e 	bl	8002c64 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e280      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4baf      	ldr	r3, [pc, #700]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2a8>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fe f90e 	bl	8002c64 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fe f90a 	bl	8002c64 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e26c      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	4ba5      	ldr	r3, [pc, #660]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d0>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d060      	beq.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x310>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	4b99      	ldr	r3, [pc, #612]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x328>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e249      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b93      	ldr	r3, [pc, #588]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	4990      	ldr	r1, [pc, #576]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	e040      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d023      	beq.n	8004b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	4b8c      	ldr	r3, [pc, #560]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a8b      	ldr	r2, [pc, #556]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fe f8c9 	bl	8002c64 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7fe f8c5 	bl	8002c64 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e227      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	497c      	ldr	r1, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b7a      	ldr	r3, [pc, #488]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a79      	ldr	r2, [pc, #484]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fe f8a5 	bl	8002c64 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fe f8a1 	bl	8002c64 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e203      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	4b70      	ldr	r3, [pc, #448]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b56:	4a67      	ldr	r2, [pc, #412]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fe f880 	bl	8002c64 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fe f87c 	bl	8002c64 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1de      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7a:	4b5e      	ldr	r3, [pc, #376]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3ec>
 8004b88:	e01b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b5a      	ldr	r3, [pc, #360]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b90:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fe f863 	bl	8002c64 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fe f85f 	bl	8002c64 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1c1      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd4:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	4b44      	ldr	r3, [pc, #272]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	4a43      	ldr	r2, [pc, #268]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6593      	str	r3, [r2, #88]	; 0x58
 8004bec:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d118      	bne.n	8004c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3a      	ldr	r2, [pc, #232]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c14:	f7fe f826 	bl	8002c64 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1c:	f7fe f822 	bl	8002c64 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e184      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2e:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <HAL_RCC_OscConfig+0x57c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4d8>
 8004c42:	4b2c      	ldr	r3, [pc, #176]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c52:	e024      	b.n	8004c9e <HAL_RCC_OscConfig+0x522>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d110      	bne.n	8004c7e <HAL_RCC_OscConfig+0x502>
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6c:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7c:	e00f      	b.n	8004c9e <HAL_RCC_OscConfig+0x522>
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	4a1b      	ldr	r2, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c94:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004c96:	f023 0304 	bic.w	r3, r3, #4
 8004c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fd ffdd 	bl	8002c64 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fd ffd9 	bl	8002c64 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e139      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_OscConfig+0x578>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ed      	beq.n	8004cae <HAL_RCC_OscConfig+0x532>
 8004cd2:	e01a      	b.n	8004d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd4:	f7fd ffc6 	bl	8002c64 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cda:	e00f      	b.n	8004cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fd ffc2 	bl	8002c64 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d906      	bls.n	8004cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e122      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfc:	4b90      	ldr	r3, [pc, #576]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e8      	bne.n	8004cdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b8b      	ldr	r3, [pc, #556]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	4a8a      	ldr	r2, [pc, #552]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8108 	beq.w	8004f36 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	f040 80d0 	bne.w	8004ed0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d30:	4b83      	ldr	r3, [pc, #524]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f003 0203 	and.w	r2, r3, #3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d130      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d127      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d11f      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d70:	2a07      	cmp	r2, #7
 8004d72:	bf14      	ite	ne
 8004d74:	2201      	movne	r2, #1
 8004d76:	2200      	moveq	r2, #0
 8004d78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d113      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d06e      	beq.n	8004e84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d069      	beq.n	8004e80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dac:	4b64      	ldr	r3, [pc, #400]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004db8:	4b61      	ldr	r3, [pc, #388]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b7      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dc8:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a5c      	ldr	r2, [pc, #368]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd4:	f7fd ff46 	bl	8002c64 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fd ff42 	bl	8002c64 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0a4      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dee:	4b54      	ldr	r3, [pc, #336]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfa:	4b51      	ldr	r3, [pc, #324]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <HAL_RCC_OscConfig+0x7c8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	0112      	lsls	r2, r2, #4
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e1c:	0852      	lsrs	r2, r2, #1
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	0552      	lsls	r2, r2, #21
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e28:	0852      	lsrs	r2, r2, #1
 8004e2a:	3a01      	subs	r2, #1
 8004e2c:	0652      	lsls	r2, r2, #25
 8004e2e:	4311      	orrs	r1, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e34:	0912      	lsrs	r2, r2, #4
 8004e36:	0452      	lsls	r2, r2, #17
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	4941      	ldr	r1, [pc, #260]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3e      	ldr	r2, [pc, #248]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e4c:	4b3c      	ldr	r3, [pc, #240]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e58:	f7fd ff04 	bl	8002c64 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fd ff00 	bl	8002c64 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e062      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e72:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e7e:	e05a      	b.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e059      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e84:	4b2e      	ldr	r3, [pc, #184]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d152      	bne.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e90:	4b2b      	ldr	r3, [pc, #172]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2a      	ldr	r2, [pc, #168]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e9c:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ea8:	f7fd fedc 	bl	8002c64 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7fd fed8 	bl	8002c64 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e03a      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec2:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x734>
 8004ece:	e032      	b.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	d02d      	beq.n	8004f32 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004eee:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004ef4:	f023 0303 	bic.w	r3, r3, #3
 8004ef8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004f00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fd feab 	bl	8002c64 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fd fea7 	bl	8002c64 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e009      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCC_OscConfig+0x7c4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCC_OscConfig+0x796>
 8004f30:	e001      	b.n	8004f36 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40021000 	.word	0x40021000
 8004f44:	f99d808c 	.word	0xf99d808c

08004f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0c8      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f5c:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d910      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6a:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 0207 	bic.w	r2, r3, #7
 8004f72:	4961      	ldr	r1, [pc, #388]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0b0      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d04c      	beq.n	8005032 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa0:	4b56      	ldr	r3, [pc, #344]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d121      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e09e      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb8:	4b50      	ldr	r3, [pc, #320]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e092      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fd0:	4b4a      	ldr	r3, [pc, #296]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e086      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe0:	4b46      	ldr	r3, [pc, #280]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e07e      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff0:	4b42      	ldr	r3, [pc, #264]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f023 0203 	bic.w	r2, r3, #3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	493f      	ldr	r1, [pc, #252]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fd fe2f 	bl	8002c64 <HAL_GetTick>
 8005006:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005008:	e00a      	b.n	8005020 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500a:	f7fd fe2b 	bl	8002c64 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e066      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005020:	4b36      	ldr	r3, [pc, #216]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 020c 	and.w	r2, r3, #12
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	429a      	cmp	r2, r3
 8005030:	d1eb      	bne.n	800500a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	492c      	ldr	r1, [pc, #176]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b29      	ldr	r3, [pc, #164]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d210      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0207 	bic.w	r2, r3, #7
 8005066:	4924      	ldr	r1, [pc, #144]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e036      	b.n	80050ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4918      	ldr	r1, [pc, #96]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4910      	ldr	r1, [pc, #64]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050be:	f000 f825 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_RCC_ClockConfig+0x1b4>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	490c      	ldr	r1, [pc, #48]	; (8005100 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	5ccb      	ldrb	r3, [r1, r3]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	4a0a      	ldr	r2, [pc, #40]	; (8005104 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_RCC_ClockConfig+0x1c0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd fbf2 	bl	80028cc <HAL_InitTick>
 80050e8:	4603      	mov	r3, r0
 80050ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80050ec:	7afb      	ldrb	r3, [r7, #11]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40022000 	.word	0x40022000
 80050fc:	40021000 	.word	0x40021000
 8005100:	08010ae0 	.word	0x08010ae0
 8005104:	20000094 	.word	0x20000094
 8005108:	20000098 	.word	0x20000098

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800511a:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005124:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x34>
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d121      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d11e      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005140:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d107      	bne.n	800515c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800514e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e005      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800515c:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <HAL_RCC_GetSysClockFreq+0x10c>)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005170:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d102      	bne.n	800518a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <HAL_RCC_GetSysClockFreq+0x110>)
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e004      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d101      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005190:	4b23      	ldr	r3, [pc, #140]	; (8005220 <HAL_RCC_GetSysClockFreq+0x114>)
 8005192:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d134      	bne.n	8005204 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800519a:	4b1e      	ldr	r3, [pc, #120]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d003      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0xac>
 80051b0:	e005      	b.n	80051be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051b2:	4b1a      	ldr	r3, [pc, #104]	; (800521c <HAL_RCC_GetSysClockFreq+0x110>)
 80051b4:	617b      	str	r3, [r7, #20]
      break;
 80051b6:	e005      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_GetSysClockFreq+0x114>)
 80051ba:	617b      	str	r3, [r7, #20]
      break;
 80051bc:	e002      	b.n	80051c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	617b      	str	r3, [r7, #20]
      break;
 80051c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	3301      	adds	r3, #1
 80051d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	fb02 f203 	mul.w	r2, r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	0e5b      	lsrs	r3, r3, #25
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	3301      	adds	r3, #1
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005202:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005204:	69bb      	ldr	r3, [r7, #24]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3724      	adds	r7, #36	; 0x24
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40021000 	.word	0x40021000
 8005218:	08010af8 	.word	0x08010af8
 800521c:	00f42400 	.word	0x00f42400
 8005220:	007a1200 	.word	0x007a1200

08005224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005228:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_RCC_GetHCLKFreq+0x14>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20000094 	.word	0x20000094

0800523c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005240:	f7ff fff0 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4904      	ldr	r1, [pc, #16]	; (8005264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40021000 	.word	0x40021000
 8005264:	08010af0 	.word	0x08010af0

08005268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800526c:	f7ff ffda 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0adb      	lsrs	r3, r3, #11
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4904      	ldr	r1, [pc, #16]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	08010af0 	.word	0x08010af0

08005294 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	220f      	movs	r2, #15
 80052a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052a4:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_RCC_GetClockConfig+0x5c>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 0203 	and.w	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <HAL_RCC_GetClockConfig+0x5c>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <HAL_RCC_GetClockConfig+0x5c>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_RCC_GetClockConfig+0x5c>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <HAL_RCC_GetClockConfig+0x60>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0207 	and.w	r2, r3, #7
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40022000 	.word	0x40022000

080052f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005300:	2300      	movs	r3, #0
 8005302:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005304:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005310:	f7ff f9d0 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005314:	6178      	str	r0, [r7, #20]
 8005316:	e014      	b.n	8005342 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005318:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531c:	4a24      	ldr	r2, [pc, #144]	; (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005322:	6593      	str	r3, [r2, #88]	; 0x58
 8005324:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005330:	f7ff f9c0 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005334:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005336:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005340:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d10b      	bne.n	8005362 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b80      	cmp	r3, #128	; 0x80
 800534e:	d919      	bls.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2ba0      	cmp	r3, #160	; 0xa0
 8005354:	d902      	bls.n	800535c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005356:	2302      	movs	r3, #2
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e013      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800535c:	2301      	movs	r3, #1
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e010      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b80      	cmp	r3, #128	; 0x80
 8005366:	d902      	bls.n	800536e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005368:	2303      	movs	r3, #3
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e00a      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	d102      	bne.n	800537a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005374:	2302      	movs	r3, #2
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e004      	b.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b70      	cmp	r3, #112	; 0x70
 800537e:	d101      	bne.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005380:	2301      	movs	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 0207 	bic.w	r2, r3, #7
 800538c:	4909      	ldr	r1, [pc, #36]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d001      	beq.n	80053a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40022000 	.word	0x40022000

080053b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053c0:	2300      	movs	r3, #0
 80053c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053c4:	2300      	movs	r3, #0
 80053c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d041      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053dc:	d02a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053e2:	d824      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053e8:	d008      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053ee:	d81e      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f8:	d010      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053fa:	e018      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053fc:	4b86      	ldr	r3, [pc, #536]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4a85      	ldr	r2, [pc, #532]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005406:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005408:	e015      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fabb 	bl	800598c <RCCEx_PLLSAI1_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800541a:	e00c      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3320      	adds	r3, #32
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fba6 	bl	8005b74 <RCCEx_PLLSAI2_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	74fb      	strb	r3, [r7, #19]
      break;
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800543c:	4b76      	ldr	r3, [pc, #472]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544a:	4973      	ldr	r1, [pc, #460]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005452:	e001      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d041      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005468:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800546c:	d02a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800546e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005472:	d824      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005478:	d008      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800547a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547e:	d81e      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005488:	d010      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800548a:	e018      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800548c:	4b62      	ldr	r3, [pc, #392]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a61      	ldr	r2, [pc, #388]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005496:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005498:	e015      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3304      	adds	r3, #4
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fa73 	bl	800598c <RCCEx_PLLSAI1_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054aa:	e00c      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3320      	adds	r3, #32
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fb5e 	bl	8005b74 <RCCEx_PLLSAI2_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054bc:	e003      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	74fb      	strb	r3, [r7, #19]
      break;
 80054c2:	e000      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054cc:	4b52      	ldr	r3, [pc, #328]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054da:	494f      	ldr	r1, [pc, #316]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054e2:	e001      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80a0 	beq.w	8005636 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054fa:	4b47      	ldr	r3, [pc, #284]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005510:	4b41      	ldr	r3, [pc, #260]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	4a40      	ldr	r2, [pc, #256]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551a:	6593      	str	r3, [r2, #88]	; 0x58
 800551c:	4b3e      	ldr	r3, [pc, #248]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005528:	2301      	movs	r3, #1
 800552a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800552c:	4b3b      	ldr	r3, [pc, #236]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a3a      	ldr	r2, [pc, #232]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005538:	f7fd fb94 	bl	8002c64 <HAL_GetTick>
 800553c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800553e:	e009      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005540:	f7fd fb90 	bl	8002c64 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d902      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	74fb      	strb	r3, [r7, #19]
        break;
 8005552:	e005      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005554:	4b31      	ldr	r3, [pc, #196]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0ef      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d15c      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005566:	4b2c      	ldr	r3, [pc, #176]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005570:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01f      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	429a      	cmp	r2, r3
 8005582:	d019      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005584:	4b24      	ldr	r3, [pc, #144]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005590:	4b21      	ldr	r3, [pc, #132]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	4a20      	ldr	r2, [pc, #128]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055a0:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a6:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fd fb4f 	bl	8002c64 <HAL_GetTick>
 80055c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c8:	e00b      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fd fb4b 	bl	8002c64 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d902      	bls.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	74fb      	strb	r3, [r7, #19]
            break;
 80055e0:	e006      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0ec      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10c      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005606:	4904      	ldr	r1, [pc, #16]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800560e:	e009      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	74bb      	strb	r3, [r7, #18]
 8005614:	e006      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005616:	bf00      	nop
 8005618:	40021000 	.word	0x40021000
 800561c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005624:	7c7b      	ldrb	r3, [r7, #17]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4b9e      	ldr	r3, [pc, #632]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	4a9d      	ldr	r2, [pc, #628]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005634:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005642:	4b98      	ldr	r3, [pc, #608]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f023 0203 	bic.w	r2, r3, #3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	4994      	ldr	r1, [pc, #592]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005664:	4b8f      	ldr	r3, [pc, #572]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f023 020c 	bic.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	498c      	ldr	r1, [pc, #560]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005686:	4b87      	ldr	r3, [pc, #540]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	4983      	ldr	r1, [pc, #524]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056a8:	4b7e      	ldr	r3, [pc, #504]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	497b      	ldr	r1, [pc, #492]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056ca:	4b76      	ldr	r3, [pc, #472]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	4972      	ldr	r1, [pc, #456]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ec:	4b6d      	ldr	r3, [pc, #436]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fa:	496a      	ldr	r1, [pc, #424]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800570e:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571c:	4961      	ldr	r1, [pc, #388]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005730:	4b5c      	ldr	r3, [pc, #368]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	4959      	ldr	r1, [pc, #356]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005752:	4b54      	ldr	r3, [pc, #336]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	4950      	ldr	r1, [pc, #320]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005774:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005782:	4948      	ldr	r1, [pc, #288]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005796:	4b43      	ldr	r3, [pc, #268]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a4:	493f      	ldr	r1, [pc, #252]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d028      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057b8:	4b3a      	ldr	r3, [pc, #232]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c6:	4937      	ldr	r1, [pc, #220]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d6:	d106      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d8:	4b32      	ldr	r3, [pc, #200]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a31      	ldr	r2, [pc, #196]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e2:	60d3      	str	r3, [r2, #12]
 80057e4:	e011      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057ee:	d10c      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f8c8 	bl	800598c <RCCEx_PLLSAI1_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d028      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005816:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	491f      	ldr	r1, [pc, #124]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005834:	d106      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005836:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005840:	60d3      	str	r3, [r2, #12]
 8005842:	e011      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800584c:	d10c      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	2101      	movs	r1, #1
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f899 	bl	800598c <RCCEx_PLLSAI1_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800585e:	7cfb      	ldrb	r3, [r7, #19]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d02b      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	4908      	ldr	r1, [pc, #32]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005892:	d109      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4a02      	ldr	r2, [pc, #8]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589e:	60d3      	str	r3, [r2, #12]
 80058a0:	e014      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	2101      	movs	r1, #1
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f867 	bl	800598c <RCCEx_PLLSAI1_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058c2:	7cfb      	ldrb	r3, [r7, #19]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d02f      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058d8:	4b2b      	ldr	r3, [pc, #172]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e6:	4928      	ldr	r1, [pc, #160]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f6:	d10d      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	2102      	movs	r1, #2
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f844 	bl	800598c <RCCEx_PLLSAI1_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d014      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	74bb      	strb	r3, [r7, #18]
 8005912:	e011      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591c:	d10c      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3320      	adds	r3, #32
 8005922:	2102      	movs	r1, #2
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f925 	bl	8005b74 <RCCEx_PLLSAI2_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005944:	4b10      	ldr	r3, [pc, #64]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005952:	490d      	ldr	r1, [pc, #52]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005966:	4b08      	ldr	r3, [pc, #32]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005976:	4904      	ldr	r1, [pc, #16]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800597e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40021000 	.word	0x40021000

0800598c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800599a:	4b75      	ldr	r3, [pc, #468]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d018      	beq.n	80059d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059a6:	4b72      	ldr	r3, [pc, #456]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0203 	and.w	r2, r3, #3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d10d      	bne.n	80059d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
       ||
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059be:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
       ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d047      	beq.n	8005a62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e044      	b.n	8005a62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d018      	beq.n	8005a12 <RCCEx_PLLSAI1_Config+0x86>
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d825      	bhi.n	8005a30 <RCCEx_PLLSAI1_Config+0xa4>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d002      	beq.n	80059ee <RCCEx_PLLSAI1_Config+0x62>
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d009      	beq.n	8005a00 <RCCEx_PLLSAI1_Config+0x74>
 80059ec:	e020      	b.n	8005a30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059ee:	4b60      	ldr	r3, [pc, #384]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d11d      	bne.n	8005a36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fe:	e01a      	b.n	8005a36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a00:	4b5b      	ldr	r3, [pc, #364]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a10:	e013      	b.n	8005a3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a12:	4b57      	ldr	r3, [pc, #348]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10f      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a1e:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a2e:	e006      	b.n	8005a3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
      break;
 8005a34:	e004      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a36:	bf00      	nop
 8005a38:	e002      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a46:	4b4a      	ldr	r3, [pc, #296]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	4944      	ldr	r1, [pc, #272]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d17d      	bne.n	8005b64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a68:	4b41      	ldr	r3, [pc, #260]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a40      	ldr	r2, [pc, #256]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a74:	f7fd f8f6 	bl	8002c64 <HAL_GetTick>
 8005a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a7a:	e009      	b.n	8005a90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a7c:	f7fd f8f2 	bl	8002c64 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d902      	bls.n	8005a90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a8e:	e005      	b.n	8005a9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a90:	4b37      	ldr	r3, [pc, #220]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1ef      	bne.n	8005a7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d160      	bne.n	8005b64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d111      	bne.n	8005acc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aa8:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6892      	ldr	r2, [r2, #8]
 8005ab8:	0211      	lsls	r1, r2, #8
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68d2      	ldr	r2, [r2, #12]
 8005abe:	0912      	lsrs	r2, r2, #4
 8005ac0:	0452      	lsls	r2, r2, #17
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	492a      	ldr	r1, [pc, #168]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]
 8005aca:	e027      	b.n	8005b1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d112      	bne.n	8005af8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ad2:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ada:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6892      	ldr	r2, [r2, #8]
 8005ae2:	0211      	lsls	r1, r2, #8
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6912      	ldr	r2, [r2, #16]
 8005ae8:	0852      	lsrs	r2, r2, #1
 8005aea:	3a01      	subs	r2, #1
 8005aec:	0552      	lsls	r2, r2, #21
 8005aee:	430a      	orrs	r2, r1
 8005af0:	491f      	ldr	r1, [pc, #124]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]
 8005af6:	e011      	b.n	8005b1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6892      	ldr	r2, [r2, #8]
 8005b08:	0211      	lsls	r1, r2, #8
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6952      	ldr	r2, [r2, #20]
 8005b0e:	0852      	lsrs	r2, r2, #1
 8005b10:	3a01      	subs	r2, #1
 8005b12:	0652      	lsls	r2, r2, #25
 8005b14:	430a      	orrs	r2, r1
 8005b16:	4916      	ldr	r1, [pc, #88]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b1c:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fd f89c 	bl	8002c64 <HAL_GetTick>
 8005b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b2e:	e009      	b.n	8005b44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b30:	f7fd f898 	bl	8002c64 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d902      	bls.n	8005b44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	73fb      	strb	r3, [r7, #15]
          break;
 8005b42:	e005      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ef      	beq.n	8005b30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	4904      	ldr	r1, [pc, #16]	; (8005b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000

08005b74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b82:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d018      	beq.n	8005bc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b8e:	4b67      	ldr	r3, [pc, #412]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f003 0203 	and.w	r2, r3, #3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d10d      	bne.n	8005bba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ba6:	4b61      	ldr	r3, [pc, #388]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	091b      	lsrs	r3, r3, #4
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d047      	beq.n	8005c4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
 8005bbe:	e044      	b.n	8005c4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d018      	beq.n	8005bfa <RCCEx_PLLSAI2_Config+0x86>
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d825      	bhi.n	8005c18 <RCCEx_PLLSAI2_Config+0xa4>
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d002      	beq.n	8005bd6 <RCCEx_PLLSAI2_Config+0x62>
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d009      	beq.n	8005be8 <RCCEx_PLLSAI2_Config+0x74>
 8005bd4:	e020      	b.n	8005c18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bd6:	4b55      	ldr	r3, [pc, #340]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d11d      	bne.n	8005c1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be6:	e01a      	b.n	8005c1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005be8:	4b50      	ldr	r3, [pc, #320]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d116      	bne.n	8005c22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bf8:	e013      	b.n	8005c22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c06:	4b49      	ldr	r3, [pc, #292]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c16:	e006      	b.n	8005c26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c1c:	e004      	b.n	8005c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e002      	b.n	8005c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c22:	bf00      	nop
 8005c24:	e000      	b.n	8005c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10d      	bne.n	8005c4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c2e:	4b3f      	ldr	r3, [pc, #252]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	430b      	orrs	r3, r1
 8005c44:	4939      	ldr	r1, [pc, #228]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d167      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c50:	4b36      	ldr	r3, [pc, #216]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a35      	ldr	r2, [pc, #212]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5c:	f7fd f802 	bl	8002c64 <HAL_GetTick>
 8005c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c62:	e009      	b.n	8005c78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c64:	f7fc fffe 	bl	8002c64 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d902      	bls.n	8005c78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	73fb      	strb	r3, [r7, #15]
        break;
 8005c76:	e005      	b.n	8005c84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c78:	4b2c      	ldr	r3, [pc, #176]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ef      	bne.n	8005c64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d14a      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d111      	bne.n	8005cb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c90:	4b26      	ldr	r3, [pc, #152]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6892      	ldr	r2, [r2, #8]
 8005ca0:	0211      	lsls	r1, r2, #8
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68d2      	ldr	r2, [r2, #12]
 8005ca6:	0912      	lsrs	r2, r2, #4
 8005ca8:	0452      	lsls	r2, r2, #17
 8005caa:	430a      	orrs	r2, r1
 8005cac:	491f      	ldr	r1, [pc, #124]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	614b      	str	r3, [r1, #20]
 8005cb2:	e011      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005cbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6892      	ldr	r2, [r2, #8]
 8005cc4:	0211      	lsls	r1, r2, #8
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6912      	ldr	r2, [r2, #16]
 8005cca:	0852      	lsrs	r2, r2, #1
 8005ccc:	3a01      	subs	r2, #1
 8005cce:	0652      	lsls	r2, r2, #25
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	4916      	ldr	r1, [pc, #88]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005cd8:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fc ffbe 	bl	8002c64 <HAL_GetTick>
 8005ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cea:	e009      	b.n	8005d00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cec:	f7fc ffba 	bl	8002c64 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d902      	bls.n	8005d00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8005cfe:	e005      	b.n	8005d0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ef      	beq.n	8005cec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	4904      	ldr	r1, [pc, #16]	; (8005d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000

08005d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e095      	b.n	8005e6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d108      	bne.n	8005d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d52:	d009      	beq.n	8005d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	61da      	str	r2, [r3, #28]
 8005d5a:	e005      	b.n	8005d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fc fbf0 	bl	8002568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005da8:	d902      	bls.n	8005db0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e002      	b.n	8005db6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dbe:	d007      	beq.n	8005dd0 <HAL_SPI_Init+0xa0>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dc8:	d002      	beq.n	8005dd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	ea42 0103 	orr.w	r1, r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	f003 0204 	and.w	r2, r3, #4
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e4c:	ea42 0103 	orr.w	r1, r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b088      	sub	sp, #32
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_SPI_Transmit+0x22>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e158      	b.n	800614a <HAL_SPI_Transmit+0x2d4>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea0:	f7fc fee0 	bl	8002c64 <HAL_GetTick>
 8005ea4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005eba:	e13d      	b.n	8006138 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SPI_Transmit+0x52>
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ecc:	e134      	b.n	8006138 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f18:	d10f      	bne.n	8005f3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d007      	beq.n	8005f58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f60:	d94b      	bls.n	8005ffa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_SPI_Transmit+0xfa>
 8005f6a:	8afb      	ldrh	r3, [r7, #22]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d13e      	bne.n	8005fee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	881a      	ldrh	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	1c9a      	adds	r2, r3, #2
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f94:	e02b      	b.n	8005fee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d112      	bne.n	8005fca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	881a      	ldrh	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	1c9a      	adds	r2, r3, #2
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fc8:	e011      	b.n	8005fee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fca:	f7fc fe4b 	bl	8002c64 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d803      	bhi.n	8005fe2 <HAL_SPI_Transmit+0x16c>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe0:	d102      	bne.n	8005fe8 <HAL_SPI_Transmit+0x172>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fec:	e0a4      	b.n	8006138 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1ce      	bne.n	8005f96 <HAL_SPI_Transmit+0x120>
 8005ff8:	e07c      	b.n	80060f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_SPI_Transmit+0x192>
 8006002:	8afb      	ldrh	r3, [r7, #22]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d170      	bne.n	80060ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d912      	bls.n	8006038 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b02      	subs	r3, #2
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006036:	e058      	b.n	80060ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800605e:	e044      	b.n	80060ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b02      	cmp	r3, #2
 800606c:	d12b      	bne.n	80060c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	d912      	bls.n	800609e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	1c9a      	adds	r2, r3, #2
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b02      	subs	r3, #2
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800609c:	e025      	b.n	80060ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060c4:	e011      	b.n	80060ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c6:	f7fc fdcd 	bl	8002c64 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d803      	bhi.n	80060de <HAL_SPI_Transmit+0x268>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060dc:	d102      	bne.n	80060e4 <HAL_SPI_Transmit+0x26e>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d102      	bne.n	80060ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060e8:	e026      	b.n	8006138 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1b5      	bne.n	8006060 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fb57 	bl	80067ac <SPI_EndRxTxTransaction>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006112:	2300      	movs	r3, #0
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e000      	b.n	8006138 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006148:	7ffb      	ldrb	r3, [r7, #31]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b08a      	sub	sp, #40	; 0x28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006160:	2301      	movs	r3, #1
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x26>
 8006174:	2302      	movs	r3, #2
 8006176:	e1fb      	b.n	8006570 <HAL_SPI_TransmitReceive+0x41e>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006180:	f7fc fd70 	bl	8002c64 <HAL_GetTick>
 8006184:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800618c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800619c:	7efb      	ldrb	r3, [r7, #27]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d00e      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x6e>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a8:	d106      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_SPI_TransmitReceive+0x66>
 80061b2:	7efb      	ldrb	r3, [r7, #27]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d003      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061b8:	2302      	movs	r3, #2
 80061ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061be:	e1cd      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x80>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_SPI_TransmitReceive+0x80>
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061d8:	e1c0      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d003      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2205      	movs	r2, #5
 80061ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	887a      	ldrh	r2, [r7, #2]
 80061fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	887a      	ldrh	r2, [r7, #2]
 8006206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	887a      	ldrh	r2, [r7, #2]
 8006214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	887a      	ldrh	r2, [r7, #2]
 800621a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006230:	d802      	bhi.n	8006238 <HAL_SPI_TransmitReceive+0xe6>
 8006232:	8a3b      	ldrh	r3, [r7, #16]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d908      	bls.n	800624a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006246:	605a      	str	r2, [r3, #4]
 8006248:	e007      	b.n	800625a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d007      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006280:	d97c      	bls.n	800637c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x13e>
 800628a:	8a7b      	ldrh	r3, [r7, #18]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d169      	bne.n	8006364 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b4:	e056      	b.n	8006364 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d11b      	bne.n	80062fc <HAL_SPI_TransmitReceive+0x1aa>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <HAL_SPI_TransmitReceive+0x1aa>
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d113      	bne.n	80062fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	d11c      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x1f2>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d016      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	b292      	uxth	r2, r2
 8006322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006340:	2301      	movs	r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006344:	f7fc fc8e 	bl	8002c64 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006350:	429a      	cmp	r2, r3
 8006352:	d807      	bhi.n	8006364 <HAL_SPI_TransmitReceive+0x212>
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800635a:	d003      	beq.n	8006364 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006362:	e0fb      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1a3      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x164>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d19d      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x164>
 800637a:	e0df      	b.n	800653c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_SPI_TransmitReceive+0x23a>
 8006384:	8a7b      	ldrh	r3, [r7, #18]
 8006386:	2b01      	cmp	r3, #1
 8006388:	f040 80cb 	bne.w	8006522 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d912      	bls.n	80063bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b02      	subs	r3, #2
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ba:	e0b2      	b.n	8006522 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063e2:	e09e      	b.n	8006522 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d134      	bne.n	800645c <HAL_SPI_TransmitReceive+0x30a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d02f      	beq.n	800645c <HAL_SPI_TransmitReceive+0x30a>
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d12c      	bne.n	800645c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d912      	bls.n	8006432 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	881a      	ldrh	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	1c9a      	adds	r2, r3, #2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b02      	subs	r3, #2
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006430:	e012      	b.n	8006458 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	330c      	adds	r3, #12
 800643c:	7812      	ldrb	r2, [r2, #0]
 800643e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b01      	cmp	r3, #1
 8006468:	d148      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x3aa>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d042      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d923      	bls.n	80064ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	b292      	uxth	r2, r2
 800648e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	1c9a      	adds	r2, r3, #2
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b02      	subs	r3, #2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d81f      	bhi.n	80064f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	e016      	b.n	80064f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f103 020c 	add.w	r2, r3, #12
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	7812      	ldrb	r2, [r2, #0]
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064f8:	2301      	movs	r3, #1
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064fc:	f7fc fbb2 	bl	8002c64 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006508:	429a      	cmp	r2, r3
 800650a:	d803      	bhi.n	8006514 <HAL_SPI_TransmitReceive+0x3c2>
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006512:	d102      	bne.n	800651a <HAL_SPI_TransmitReceive+0x3c8>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006520:	e01c      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f af5b 	bne.w	80063e4 <HAL_SPI_TransmitReceive+0x292>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f af54 	bne.w	80063e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f933 	bl	80067ac <SPI_EndRxTxTransaction>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d006      	beq.n	800655a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
 8006558:	e000      	b.n	800655c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800655a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800656c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006570:	4618      	mov	r0, r3
 8006572:	3728      	adds	r7, #40	; 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006588:	f7fc fb6c 	bl	8002c64 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	1a9b      	subs	r3, r3, r2
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	4413      	add	r3, r2
 8006596:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006598:	f7fc fb64 	bl	8002c64 <HAL_GetTick>
 800659c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800659e:	4b39      	ldr	r3, [pc, #228]	; (8006684 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	015b      	lsls	r3, r3, #5
 80065a4:	0d1b      	lsrs	r3, r3, #20
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ae:	e054      	b.n	800665a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b6:	d050      	beq.n	800665a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065b8:	f7fc fb54 	bl	8002c64 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d902      	bls.n	80065ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d13d      	bne.n	800664a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e6:	d111      	bne.n	800660c <SPI_WaitFlagStateUntilTimeout+0x94>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f0:	d004      	beq.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fa:	d107      	bne.n	800660c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006614:	d10f      	bne.n	8006636 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006634:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e017      	b.n	800667a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3b01      	subs	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4013      	ands	r3, r2
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	429a      	cmp	r2, r3
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	429a      	cmp	r2, r3
 8006676:	d19b      	bne.n	80065b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000094 	.word	0x20000094

08006688 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006696:	f7fc fae5 	bl	8002c64 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	1a9b      	subs	r3, r3, r2
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	4413      	add	r3, r2
 80066a4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066a6:	f7fc fadd 	bl	8002c64 <HAL_GetTick>
 80066aa:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066ac:	4b3e      	ldr	r3, [pc, #248]	; (80067a8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	00da      	lsls	r2, r3, #3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	0d1b      	lsrs	r3, r3, #20
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80066c4:	e062      	b.n	800678c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066cc:	d109      	bne.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80066e0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e8:	d050      	beq.n	800678c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ea:	f7fc fabb 	bl	8002c64 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d902      	bls.n	8006700 <SPI_WaitFifoStateUntilTimeout+0x78>
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d13d      	bne.n	800677c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800670e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006718:	d111      	bne.n	800673e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006722:	d004      	beq.n	800672e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672c:	d107      	bne.n	800673e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006746:	d10f      	bne.n	8006768 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006766:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e010      	b.n	800679e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3b01      	subs	r3, #1
 800678a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4013      	ands	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d194      	bne.n	80066c6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000094 	.word	0x20000094

080067ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff ff5f 	bl	8006688 <SPI_WaitFifoStateUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e027      	b.n	8006830 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff fec4 	bl	8006578 <SPI_WaitFlagStateUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fa:	f043 0220 	orr.w	r2, r3, #32
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e014      	b.n	8006830 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f7ff ff38 	bl	8006688 <SPI_WaitFifoStateUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006822:	f043 0220 	orr.w	r2, r3, #32
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e000      	b.n	8006830 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e049      	b.n	80068de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb ff16 	bl	8002690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f000 fd7e 	bl	8007378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d001      	beq.n	8006900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e04f      	b.n	80069a0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a23      	ldr	r2, [pc, #140]	; (80069ac <HAL_TIM_Base_Start_IT+0xc4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01d      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d018      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00e      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1c      	ldr	r2, [pc, #112]	; (80069b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d009      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d004      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x76>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d115      	bne.n	800698a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006966:	4013      	ands	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b06      	cmp	r3, #6
 800696e:	d015      	beq.n	800699c <HAL_TIM_Base_Start_IT+0xb4>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006976:	d011      	beq.n	800699c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	e008      	b.n	800699c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0201 	orr.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	e000      	b.n	800699e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	00010007 	.word	0x00010007

080069c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e049      	b.n	8006a6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fb fe1a 	bl	8002628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f000 fcb6 	bl	8007378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d109      	bne.n	8006a9c <HAL_TIM_PWM_Start_IT+0x24>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	bf14      	ite	ne
 8006a94:	2301      	movne	r3, #1
 8006a96:	2300      	moveq	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	e03c      	b.n	8006b16 <HAL_TIM_PWM_Start_IT+0x9e>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d109      	bne.n	8006ab6 <HAL_TIM_PWM_Start_IT+0x3e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	bf14      	ite	ne
 8006aae:	2301      	movne	r3, #1
 8006ab0:	2300      	moveq	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	e02f      	b.n	8006b16 <HAL_TIM_PWM_Start_IT+0x9e>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d109      	bne.n	8006ad0 <HAL_TIM_PWM_Start_IT+0x58>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	bf14      	ite	ne
 8006ac8:	2301      	movne	r3, #1
 8006aca:	2300      	moveq	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	e022      	b.n	8006b16 <HAL_TIM_PWM_Start_IT+0x9e>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b0c      	cmp	r3, #12
 8006ad4:	d109      	bne.n	8006aea <HAL_TIM_PWM_Start_IT+0x72>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	bf14      	ite	ne
 8006ae2:	2301      	movne	r3, #1
 8006ae4:	2300      	moveq	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	e015      	b.n	8006b16 <HAL_TIM_PWM_Start_IT+0x9e>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d109      	bne.n	8006b04 <HAL_TIM_PWM_Start_IT+0x8c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	e008      	b.n	8006b16 <HAL_TIM_PWM_Start_IT+0x9e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	bf14      	ite	ne
 8006b10:	2301      	movne	r3, #1
 8006b12:	2300      	moveq	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e0e2      	b.n	8006ce4 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <HAL_TIM_PWM_Start_IT+0xb6>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2c:	e023      	b.n	8006b76 <HAL_TIM_PWM_Start_IT+0xfe>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d104      	bne.n	8006b3e <HAL_TIM_PWM_Start_IT+0xc6>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b3c:	e01b      	b.n	8006b76 <HAL_TIM_PWM_Start_IT+0xfe>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d104      	bne.n	8006b4e <HAL_TIM_PWM_Start_IT+0xd6>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4c:	e013      	b.n	8006b76 <HAL_TIM_PWM_Start_IT+0xfe>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b0c      	cmp	r3, #12
 8006b52:	d104      	bne.n	8006b5e <HAL_TIM_PWM_Start_IT+0xe6>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b5c:	e00b      	b.n	8006b76 <HAL_TIM_PWM_Start_IT+0xfe>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b10      	cmp	r3, #16
 8006b62:	d104      	bne.n	8006b6e <HAL_TIM_PWM_Start_IT+0xf6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b6c:	e003      	b.n	8006b76 <HAL_TIM_PWM_Start_IT+0xfe>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	d841      	bhi.n	8006c00 <HAL_TIM_PWM_Start_IT+0x188>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_TIM_PWM_Start_IT+0x10c>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006c01 	.word	0x08006c01
 8006b8c:	08006c01 	.word	0x08006c01
 8006b90:	08006c01 	.word	0x08006c01
 8006b94:	08006bcb 	.word	0x08006bcb
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	08006bdd 	.word	0x08006bdd
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c01 	.word	0x08006c01
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006bef 	.word	0x08006bef
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0202 	orr.w	r2, r2, #2
 8006bc6:	60da      	str	r2, [r3, #12]
      break;
 8006bc8:	e01b      	b.n	8006c02 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0204 	orr.w	r2, r2, #4
 8006bd8:	60da      	str	r2, [r3, #12]
      break;
 8006bda:	e012      	b.n	8006c02 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0208 	orr.w	r2, r2, #8
 8006bea:	60da      	str	r2, [r3, #12]
      break;
 8006bec:	e009      	b.n	8006c02 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0210 	orr.w	r2, r2, #16
 8006bfc:	60da      	str	r2, [r3, #12]
      break;
 8006bfe:	e000      	b.n	8006c02 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 8006c00:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2201      	movs	r2, #1
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 ff24 	bl	8007a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a35      	ldr	r2, [pc, #212]	; (8006cec <HAL_TIM_PWM_Start_IT+0x274>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a34      	ldr	r2, [pc, #208]	; (8006cf0 <HAL_TIM_PWM_Start_IT+0x278>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a32      	ldr	r2, [pc, #200]	; (8006cf4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a31      	ldr	r2, [pc, #196]	; (8006cf8 <HAL_TIM_PWM_Start_IT+0x280>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_TIM_PWM_Start_IT+0x1ca>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2f      	ldr	r2, [pc, #188]	; (8006cfc <HAL_TIM_PWM_Start_IT+0x284>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_PWM_Start_IT+0x1ce>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a22      	ldr	r2, [pc, #136]	; (8006cec <HAL_TIM_PWM_Start_IT+0x274>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d01d      	beq.n	8006ca2 <HAL_TIM_PWM_Start_IT+0x22a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c6e:	d018      	beq.n	8006ca2 <HAL_TIM_PWM_Start_IT+0x22a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <HAL_TIM_PWM_Start_IT+0x288>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_TIM_PWM_Start_IT+0x22a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_TIM_PWM_Start_IT+0x28c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00e      	beq.n	8006ca2 <HAL_TIM_PWM_Start_IT+0x22a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1f      	ldr	r2, [pc, #124]	; (8006d08 <HAL_TIM_PWM_Start_IT+0x290>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIM_PWM_Start_IT+0x22a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <HAL_TIM_PWM_Start_IT+0x278>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIM_PWM_Start_IT+0x22a>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d115      	bne.n	8006cce <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	4b18      	ldr	r3, [pc, #96]	; (8006d0c <HAL_TIM_PWM_Start_IT+0x294>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d015      	beq.n	8006ce0 <HAL_TIM_PWM_Start_IT+0x268>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cba:	d011      	beq.n	8006ce0 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ccc:	e008      	b.n	8006ce0 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0201 	orr.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e000      	b.n	8006ce2 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40013400 	.word	0x40013400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	00010007 	.word	0x00010007

08006d10 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d841      	bhi.n	8006da4 <HAL_TIM_PWM_Stop_IT+0x94>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_TIM_PWM_Stop_IT+0x18>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006da5 	.word	0x08006da5
 8006d30:	08006da5 	.word	0x08006da5
 8006d34:	08006da5 	.word	0x08006da5
 8006d38:	08006d6f 	.word	0x08006d6f
 8006d3c:	08006da5 	.word	0x08006da5
 8006d40:	08006da5 	.word	0x08006da5
 8006d44:	08006da5 	.word	0x08006da5
 8006d48:	08006d81 	.word	0x08006d81
 8006d4c:	08006da5 	.word	0x08006da5
 8006d50:	08006da5 	.word	0x08006da5
 8006d54:	08006da5 	.word	0x08006da5
 8006d58:	08006d93 	.word	0x08006d93
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0202 	bic.w	r2, r2, #2
 8006d6a:	60da      	str	r2, [r3, #12]
      break;
 8006d6c:	e01b      	b.n	8006da6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0204 	bic.w	r2, r2, #4
 8006d7c:	60da      	str	r2, [r3, #12]
      break;
 8006d7e:	e012      	b.n	8006da6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0208 	bic.w	r2, r2, #8
 8006d8e:	60da      	str	r2, [r3, #12]
      break;
 8006d90:	e009      	b.n	8006da6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0210 	bic.w	r2, r2, #16
 8006da0:	60da      	str	r2, [r3, #12]
      break;
 8006da2:	e000      	b.n	8006da6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006da4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fe52 	bl	8007a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a3e      	ldr	r2, [pc, #248]	; (8006eb4 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a3d      	ldr	r2, [pc, #244]	; (8006eb8 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a3b      	ldr	r2, [pc, #236]	; (8006ebc <HAL_TIM_PWM_Stop_IT+0x1ac>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a3a      	ldr	r2, [pc, #232]	; (8006ec0 <HAL_TIM_PWM_Stop_IT+0x1b0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_PWM_Stop_IT+0xda>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <HAL_TIM_PWM_Stop_IT+0xdc>
 8006dea:	2300      	movs	r3, #0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d017      	beq.n	8006e20 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a1a      	ldr	r2, [r3, #32]
 8006df6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10f      	bne.n	8006e20 <HAL_TIM_PWM_Stop_IT+0x110>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6a1a      	ldr	r2, [r3, #32]
 8006e06:	f240 4344 	movw	r3, #1092	; 0x444
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <HAL_TIM_PWM_Stop_IT+0x110>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6a1a      	ldr	r2, [r3, #32]
 8006e26:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10f      	bne.n	8006e50 <HAL_TIM_PWM_Stop_IT+0x140>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	f240 4344 	movw	r3, #1092	; 0x444
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_PWM_Stop_IT+0x140>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <HAL_TIM_PWM_Stop_IT+0x150>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e5e:	e023      	b.n	8006ea8 <HAL_TIM_PWM_Stop_IT+0x198>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d104      	bne.n	8006e70 <HAL_TIM_PWM_Stop_IT+0x160>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e6e:	e01b      	b.n	8006ea8 <HAL_TIM_PWM_Stop_IT+0x198>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d104      	bne.n	8006e80 <HAL_TIM_PWM_Stop_IT+0x170>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e7e:	e013      	b.n	8006ea8 <HAL_TIM_PWM_Stop_IT+0x198>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b0c      	cmp	r3, #12
 8006e84:	d104      	bne.n	8006e90 <HAL_TIM_PWM_Stop_IT+0x180>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e8e:	e00b      	b.n	8006ea8 <HAL_TIM_PWM_Stop_IT+0x198>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b10      	cmp	r3, #16
 8006e94:	d104      	bne.n	8006ea0 <HAL_TIM_PWM_Stop_IT+0x190>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e9e:	e003      	b.n	8006ea8 <HAL_TIM_PWM_Stop_IT+0x198>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	40012c00 	.word	0x40012c00
 8006eb8:	40013400 	.word	0x40013400
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	40014400 	.word	0x40014400
 8006ec4:	40014800 	.word	0x40014800

08006ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d122      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d11b      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0202 	mvn.w	r2, #2
 8006ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa16 	bl	800733c <HAL_TIM_IC_CaptureCallback>
 8006f10:	e005      	b.n	8006f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa08 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa19 	bl	8007350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d122      	bne.n	8006f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d11b      	bne.n	8006f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0204 	mvn.w	r2, #4
 8006f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9ec 	bl	800733c <HAL_TIM_IC_CaptureCallback>
 8006f64:	e005      	b.n	8006f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9de 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9ef 	bl	8007350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	d122      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d11b      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0208 	mvn.w	r2, #8
 8006f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2204      	movs	r2, #4
 8006fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9c2 	bl	800733c <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f9b4 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f9c5 	bl	8007350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b10      	cmp	r3, #16
 8006fd8:	d122      	bne.n	8007020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d11b      	bne.n	8007020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0210 	mvn.w	r2, #16
 8006ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2208      	movs	r2, #8
 8006ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f998 	bl	800733c <HAL_TIM_IC_CaptureCallback>
 800700c:	e005      	b.n	800701a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f98a 	bl	8007328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f99b 	bl	8007350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b01      	cmp	r3, #1
 800702c:	d10e      	bne.n	800704c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0201 	mvn.w	r2, #1
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fa fcb6 	bl	80019b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007056:	2b80      	cmp	r3, #128	; 0x80
 8007058:	d10e      	bne.n	8007078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007064:	2b80      	cmp	r3, #128	; 0x80
 8007066:	d107      	bne.n	8007078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fe26 	bl	8007cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	d10e      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d107      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800709e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fe19 	bl	8007cd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b40      	cmp	r3, #64	; 0x40
 80070b2:	d10e      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d107      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f949 	bl	8007364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d10e      	bne.n	80070fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d107      	bne.n	80070fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f06f 0220 	mvn.w	r2, #32
 80070f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fdd9 	bl	8007cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070fe:	bf00      	nop
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800711e:	2302      	movs	r3, #2
 8007120:	e0fd      	b.n	800731e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b14      	cmp	r3, #20
 800712e:	f200 80f0 	bhi.w	8007312 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	0800718d 	.word	0x0800718d
 800713c:	08007313 	.word	0x08007313
 8007140:	08007313 	.word	0x08007313
 8007144:	08007313 	.word	0x08007313
 8007148:	080071cd 	.word	0x080071cd
 800714c:	08007313 	.word	0x08007313
 8007150:	08007313 	.word	0x08007313
 8007154:	08007313 	.word	0x08007313
 8007158:	0800720f 	.word	0x0800720f
 800715c:	08007313 	.word	0x08007313
 8007160:	08007313 	.word	0x08007313
 8007164:	08007313 	.word	0x08007313
 8007168:	0800724f 	.word	0x0800724f
 800716c:	08007313 	.word	0x08007313
 8007170:	08007313 	.word	0x08007313
 8007174:	08007313 	.word	0x08007313
 8007178:	08007291 	.word	0x08007291
 800717c:	08007313 	.word	0x08007313
 8007180:	08007313 	.word	0x08007313
 8007184:	08007313 	.word	0x08007313
 8007188:	080072d1 	.word	0x080072d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 f98a 	bl	80074ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0208 	orr.w	r2, r2, #8
 80071a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0204 	bic.w	r2, r2, #4
 80071b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6999      	ldr	r1, [r3, #24]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	619a      	str	r2, [r3, #24]
      break;
 80071ca:	e0a3      	b.n	8007314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f9fa 	bl	80075cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699a      	ldr	r2, [r3, #24]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6999      	ldr	r1, [r3, #24]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	021a      	lsls	r2, r3, #8
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	619a      	str	r2, [r3, #24]
      break;
 800720c:	e082      	b.n	8007314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fa63 	bl	80076e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0208 	orr.w	r2, r2, #8
 8007228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69da      	ldr	r2, [r3, #28]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0204 	bic.w	r2, r2, #4
 8007238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69d9      	ldr	r1, [r3, #28]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	61da      	str	r2, [r3, #28]
      break;
 800724c:	e062      	b.n	8007314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 facb 	bl	80077f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69da      	ldr	r2, [r3, #28]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69d9      	ldr	r1, [r3, #28]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	021a      	lsls	r2, r3, #8
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	61da      	str	r2, [r3, #28]
      break;
 800728e:	e041      	b.n	8007314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fb14 	bl	80078c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0208 	orr.w	r2, r2, #8
 80072aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0204 	bic.w	r2, r2, #4
 80072ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072ce:	e021      	b.n	8007314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fb58 	bl	800798c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	021a      	lsls	r2, r3, #8
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	430a      	orrs	r2, r1
 800730e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007310:	e000      	b.n	8007314 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007312:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop

08007328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a40      	ldr	r2, [pc, #256]	; (800748c <TIM_Base_SetConfig+0x114>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d013      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d00f      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a3d      	ldr	r2, [pc, #244]	; (8007490 <TIM_Base_SetConfig+0x118>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00b      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a3c      	ldr	r2, [pc, #240]	; (8007494 <TIM_Base_SetConfig+0x11c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a3b      	ldr	r2, [pc, #236]	; (8007498 <TIM_Base_SetConfig+0x120>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d003      	beq.n	80073b8 <TIM_Base_SetConfig+0x40>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a3a      	ldr	r2, [pc, #232]	; (800749c <TIM_Base_SetConfig+0x124>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d108      	bne.n	80073ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a2f      	ldr	r2, [pc, #188]	; (800748c <TIM_Base_SetConfig+0x114>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01f      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d8:	d01b      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <TIM_Base_SetConfig+0x118>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d017      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a2b      	ldr	r2, [pc, #172]	; (8007494 <TIM_Base_SetConfig+0x11c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a2a      	ldr	r2, [pc, #168]	; (8007498 <TIM_Base_SetConfig+0x120>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00f      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a29      	ldr	r2, [pc, #164]	; (800749c <TIM_Base_SetConfig+0x124>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00b      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a28      	ldr	r2, [pc, #160]	; (80074a0 <TIM_Base_SetConfig+0x128>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d007      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a27      	ldr	r2, [pc, #156]	; (80074a4 <TIM_Base_SetConfig+0x12c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d003      	beq.n	8007412 <TIM_Base_SetConfig+0x9a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <TIM_Base_SetConfig+0x130>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d108      	bne.n	8007424 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a10      	ldr	r2, [pc, #64]	; (800748c <TIM_Base_SetConfig+0x114>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00f      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a12      	ldr	r2, [pc, #72]	; (800749c <TIM_Base_SetConfig+0x124>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00b      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <TIM_Base_SetConfig+0x128>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d007      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a10      	ldr	r2, [pc, #64]	; (80074a4 <TIM_Base_SetConfig+0x12c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_Base_SetConfig+0xf8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a0f      	ldr	r2, [pc, #60]	; (80074a8 <TIM_Base_SetConfig+0x130>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d103      	bne.n	8007478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691a      	ldr	r2, [r3, #16]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	615a      	str	r2, [r3, #20]
}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40012c00 	.word	0x40012c00
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40013400 	.word	0x40013400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800

080074ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0303 	bic.w	r3, r3, #3
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f023 0302 	bic.w	r3, r3, #2
 80074f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a2c      	ldr	r2, [pc, #176]	; (80075b8 <TIM_OC1_SetConfig+0x10c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00f      	beq.n	800752c <TIM_OC1_SetConfig+0x80>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a2b      	ldr	r2, [pc, #172]	; (80075bc <TIM_OC1_SetConfig+0x110>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00b      	beq.n	800752c <TIM_OC1_SetConfig+0x80>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a2a      	ldr	r2, [pc, #168]	; (80075c0 <TIM_OC1_SetConfig+0x114>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d007      	beq.n	800752c <TIM_OC1_SetConfig+0x80>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a29      	ldr	r2, [pc, #164]	; (80075c4 <TIM_OC1_SetConfig+0x118>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_OC1_SetConfig+0x80>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a28      	ldr	r2, [pc, #160]	; (80075c8 <TIM_OC1_SetConfig+0x11c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d10c      	bne.n	8007546 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f023 0308 	bic.w	r3, r3, #8
 8007532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f023 0304 	bic.w	r3, r3, #4
 8007544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <TIM_OC1_SetConfig+0x10c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00f      	beq.n	800756e <TIM_OC1_SetConfig+0xc2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a1a      	ldr	r2, [pc, #104]	; (80075bc <TIM_OC1_SetConfig+0x110>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00b      	beq.n	800756e <TIM_OC1_SetConfig+0xc2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a19      	ldr	r2, [pc, #100]	; (80075c0 <TIM_OC1_SetConfig+0x114>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d007      	beq.n	800756e <TIM_OC1_SetConfig+0xc2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a18      	ldr	r2, [pc, #96]	; (80075c4 <TIM_OC1_SetConfig+0x118>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_OC1_SetConfig+0xc2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <TIM_OC1_SetConfig+0x11c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d111      	bne.n	8007592 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800757c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	621a      	str	r2, [r3, #32]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	40012c00 	.word	0x40012c00
 80075bc:	40013400 	.word	0x40013400
 80075c0:	40014000 	.word	0x40014000
 80075c4:	40014400 	.word	0x40014400
 80075c8:	40014800 	.word	0x40014800

080075cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	f023 0210 	bic.w	r2, r3, #16
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	021b      	lsls	r3, r3, #8
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f023 0320 	bic.w	r3, r3, #32
 800761a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a28      	ldr	r2, [pc, #160]	; (80076cc <TIM_OC2_SetConfig+0x100>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_OC2_SetConfig+0x6c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a27      	ldr	r2, [pc, #156]	; (80076d0 <TIM_OC2_SetConfig+0x104>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d10d      	bne.n	8007654 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800763e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a1d      	ldr	r2, [pc, #116]	; (80076cc <TIM_OC2_SetConfig+0x100>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00f      	beq.n	800767c <TIM_OC2_SetConfig+0xb0>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a1c      	ldr	r2, [pc, #112]	; (80076d0 <TIM_OC2_SetConfig+0x104>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00b      	beq.n	800767c <TIM_OC2_SetConfig+0xb0>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <TIM_OC2_SetConfig+0x108>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d007      	beq.n	800767c <TIM_OC2_SetConfig+0xb0>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a1a      	ldr	r2, [pc, #104]	; (80076d8 <TIM_OC2_SetConfig+0x10c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d003      	beq.n	800767c <TIM_OC2_SetConfig+0xb0>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a19      	ldr	r2, [pc, #100]	; (80076dc <TIM_OC2_SetConfig+0x110>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d113      	bne.n	80076a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800768a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	621a      	str	r2, [r3, #32]
}
 80076be:	bf00      	nop
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	40013400 	.word	0x40013400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800

080076e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0303 	bic.w	r3, r3, #3
 800771a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800772c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a27      	ldr	r2, [pc, #156]	; (80077dc <TIM_OC3_SetConfig+0xfc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_OC3_SetConfig+0x6a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a26      	ldr	r2, [pc, #152]	; (80077e0 <TIM_OC3_SetConfig+0x100>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d10d      	bne.n	8007766 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	021b      	lsls	r3, r3, #8
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <TIM_OC3_SetConfig+0xfc>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00f      	beq.n	800778e <TIM_OC3_SetConfig+0xae>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1b      	ldr	r2, [pc, #108]	; (80077e0 <TIM_OC3_SetConfig+0x100>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00b      	beq.n	800778e <TIM_OC3_SetConfig+0xae>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <TIM_OC3_SetConfig+0x104>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d007      	beq.n	800778e <TIM_OC3_SetConfig+0xae>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <TIM_OC3_SetConfig+0x108>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d003      	beq.n	800778e <TIM_OC3_SetConfig+0xae>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a18      	ldr	r2, [pc, #96]	; (80077ec <TIM_OC3_SetConfig+0x10c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d113      	bne.n	80077b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800779c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	621a      	str	r2, [r3, #32]
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	40012c00 	.word	0x40012c00
 80077e0:	40013400 	.word	0x40013400
 80077e4:	40014000 	.word	0x40014000
 80077e8:	40014400 	.word	0x40014400
 80077ec:	40014800 	.word	0x40014800

080077f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800781e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4313      	orrs	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800783e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	031b      	lsls	r3, r3, #12
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a18      	ldr	r2, [pc, #96]	; (80078b0 <TIM_OC4_SetConfig+0xc0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00f      	beq.n	8007874 <TIM_OC4_SetConfig+0x84>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a17      	ldr	r2, [pc, #92]	; (80078b4 <TIM_OC4_SetConfig+0xc4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00b      	beq.n	8007874 <TIM_OC4_SetConfig+0x84>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a16      	ldr	r2, [pc, #88]	; (80078b8 <TIM_OC4_SetConfig+0xc8>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d007      	beq.n	8007874 <TIM_OC4_SetConfig+0x84>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a15      	ldr	r2, [pc, #84]	; (80078bc <TIM_OC4_SetConfig+0xcc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d003      	beq.n	8007874 <TIM_OC4_SetConfig+0x84>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a14      	ldr	r2, [pc, #80]	; (80078c0 <TIM_OC4_SetConfig+0xd0>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d109      	bne.n	8007888 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800787a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	019b      	lsls	r3, r3, #6
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40012c00 	.word	0x40012c00
 80078b4:	40013400 	.word	0x40013400
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40014400 	.word	0x40014400
 80078c0:	40014800 	.word	0x40014800

080078c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a17      	ldr	r2, [pc, #92]	; (8007978 <TIM_OC5_SetConfig+0xb4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00f      	beq.n	800793e <TIM_OC5_SetConfig+0x7a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a16      	ldr	r2, [pc, #88]	; (800797c <TIM_OC5_SetConfig+0xb8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00b      	beq.n	800793e <TIM_OC5_SetConfig+0x7a>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a15      	ldr	r2, [pc, #84]	; (8007980 <TIM_OC5_SetConfig+0xbc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d007      	beq.n	800793e <TIM_OC5_SetConfig+0x7a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a14      	ldr	r2, [pc, #80]	; (8007984 <TIM_OC5_SetConfig+0xc0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d003      	beq.n	800793e <TIM_OC5_SetConfig+0x7a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a13      	ldr	r2, [pc, #76]	; (8007988 <TIM_OC5_SetConfig+0xc4>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d109      	bne.n	8007952 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	621a      	str	r2, [r3, #32]
}
 800796c:	bf00      	nop
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40013400 	.word	0x40013400
 8007980:	40014000 	.word	0x40014000
 8007984:	40014400 	.word	0x40014400
 8007988:	40014800 	.word	0x40014800

0800798c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	051b      	lsls	r3, r3, #20
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a18      	ldr	r2, [pc, #96]	; (8007a44 <TIM_OC6_SetConfig+0xb8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00f      	beq.n	8007a08 <TIM_OC6_SetConfig+0x7c>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <TIM_OC6_SetConfig+0xbc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00b      	beq.n	8007a08 <TIM_OC6_SetConfig+0x7c>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a16      	ldr	r2, [pc, #88]	; (8007a4c <TIM_OC6_SetConfig+0xc0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d007      	beq.n	8007a08 <TIM_OC6_SetConfig+0x7c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <TIM_OC6_SetConfig+0xc4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC6_SetConfig+0x7c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <TIM_OC6_SetConfig+0xc8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d109      	bne.n	8007a1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	029b      	lsls	r3, r3, #10
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40013400 	.word	0x40013400
 8007a4c:	40014000 	.word	0x40014000
 8007a50:	40014400 	.word	0x40014400
 8007a54:	40014800 	.word	0x40014800

08007a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 031f 	and.w	r3, r3, #31
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a1a      	ldr	r2, [r3, #32]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a1a      	ldr	r2, [r3, #32]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f003 031f 	and.w	r3, r3, #31
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a90:	431a      	orrs	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	621a      	str	r2, [r3, #32]
}
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e068      	b.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a2e      	ldr	r2, [pc, #184]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d108      	bne.n	8007b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d01d      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2e:	d018      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d013      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a18      	ldr	r2, [pc, #96]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a14      	ldr	r2, [pc, #80]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10c      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40000c00 	.word	0x40000c00
 8007bb0:	40014000 	.word	0x40014000

08007bb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e065      	b.n	8007c9c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	041b      	lsls	r3, r3, #16
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a16      	ldr	r2, [pc, #88]	; (8007ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d004      	beq.n	8007c5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a14      	ldr	r2, [pc, #80]	; (8007cac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d115      	bne.n	8007c8a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	051b      	lsls	r3, r3, #20
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	40013400 	.word	0x40013400

08007cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e040      	b.n	8007d80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7fa fd9a 	bl	8002848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2224      	movs	r2, #36	; 0x24
 8007d18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f022 0201 	bic.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8c0 	bl	8007eb0 <UART_SetConfig>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e022      	b.n	8007d80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb3e 	bl	80083c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fbc5 	bl	8008508 <UART_CheckIdleState>
 8007d7e:	4603      	mov	r3, r0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08a      	sub	sp, #40	; 0x28
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4613      	mov	r3, r2
 8007d96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	f040 8082 	bne.w	8007ea6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <HAL_UART_Transmit+0x26>
 8007da8:	88fb      	ldrh	r3, [r7, #6]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e07a      	b.n	8007ea8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_UART_Transmit+0x38>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e073      	b.n	8007ea8 <HAL_UART_Transmit+0x120>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2221      	movs	r2, #33	; 0x21
 8007dd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dd6:	f7fa ff45 	bl	8002c64 <HAL_GetTick>
 8007dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	88fa      	ldrh	r2, [r7, #6]
 8007de0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	88fa      	ldrh	r2, [r7, #6]
 8007de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df4:	d108      	bne.n	8007e08 <HAL_UART_Transmit+0x80>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d104      	bne.n	8007e08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	e003      	b.n	8007e10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007e18:	e02d      	b.n	8007e76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2180      	movs	r1, #128	; 0x80
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fbb8 	bl	800859a <UART_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e039      	b.n	8007ea8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10b      	bne.n	8007e52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e46:	b292      	uxth	r2, r2
 8007e48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	61bb      	str	r3, [r7, #24]
 8007e50:	e008      	b.n	8007e64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	b292      	uxth	r2, r2
 8007e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	3301      	adds	r3, #1
 8007e62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1cb      	bne.n	8007e1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2140      	movs	r1, #64	; 0x40
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fb84 	bl	800859a <UART_WaitOnFlagUntilTimeout>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e005      	b.n	8007ea8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e000      	b.n	8007ea8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007ea6:	2302      	movs	r3, #2
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4bad      	ldr	r3, [pc, #692]	; (8008190 <UART_SetConfig+0x2e0>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	69f9      	ldr	r1, [r7, #28]
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4aa2      	ldr	r2, [pc, #648]	; (8008194 <UART_SetConfig+0x2e4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a99      	ldr	r2, [pc, #612]	; (8008198 <UART_SetConfig+0x2e8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d121      	bne.n	8007f7a <UART_SetConfig+0xca>
 8007f36:	4b99      	ldr	r3, [pc, #612]	; (800819c <UART_SetConfig+0x2ec>)
 8007f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3c:	f003 0303 	and.w	r3, r3, #3
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d817      	bhi.n	8007f74 <UART_SetConfig+0xc4>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x9c>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f63 	.word	0x08007f63
 8007f58:	08007f6f 	.word	0x08007f6f
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	76fb      	strb	r3, [r7, #27]
 8007f60:	e0e7      	b.n	8008132 <UART_SetConfig+0x282>
 8007f62:	2302      	movs	r3, #2
 8007f64:	76fb      	strb	r3, [r7, #27]
 8007f66:	e0e4      	b.n	8008132 <UART_SetConfig+0x282>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	76fb      	strb	r3, [r7, #27]
 8007f6c:	e0e1      	b.n	8008132 <UART_SetConfig+0x282>
 8007f6e:	2308      	movs	r3, #8
 8007f70:	76fb      	strb	r3, [r7, #27]
 8007f72:	e0de      	b.n	8008132 <UART_SetConfig+0x282>
 8007f74:	2310      	movs	r3, #16
 8007f76:	76fb      	strb	r3, [r7, #27]
 8007f78:	e0db      	b.n	8008132 <UART_SetConfig+0x282>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a88      	ldr	r2, [pc, #544]	; (80081a0 <UART_SetConfig+0x2f0>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d132      	bne.n	8007fea <UART_SetConfig+0x13a>
 8007f84:	4b85      	ldr	r3, [pc, #532]	; (800819c <UART_SetConfig+0x2ec>)
 8007f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b0c      	cmp	r3, #12
 8007f90:	d828      	bhi.n	8007fe4 <UART_SetConfig+0x134>
 8007f92:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0xe8>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fcd 	.word	0x08007fcd
 8007f9c:	08007fe5 	.word	0x08007fe5
 8007fa0:	08007fe5 	.word	0x08007fe5
 8007fa4:	08007fe5 	.word	0x08007fe5
 8007fa8:	08007fd9 	.word	0x08007fd9
 8007fac:	08007fe5 	.word	0x08007fe5
 8007fb0:	08007fe5 	.word	0x08007fe5
 8007fb4:	08007fe5 	.word	0x08007fe5
 8007fb8:	08007fd3 	.word	0x08007fd3
 8007fbc:	08007fe5 	.word	0x08007fe5
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fe5 	.word	0x08007fe5
 8007fc8:	08007fdf 	.word	0x08007fdf
 8007fcc:	2300      	movs	r3, #0
 8007fce:	76fb      	strb	r3, [r7, #27]
 8007fd0:	e0af      	b.n	8008132 <UART_SetConfig+0x282>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	76fb      	strb	r3, [r7, #27]
 8007fd6:	e0ac      	b.n	8008132 <UART_SetConfig+0x282>
 8007fd8:	2304      	movs	r3, #4
 8007fda:	76fb      	strb	r3, [r7, #27]
 8007fdc:	e0a9      	b.n	8008132 <UART_SetConfig+0x282>
 8007fde:	2308      	movs	r3, #8
 8007fe0:	76fb      	strb	r3, [r7, #27]
 8007fe2:	e0a6      	b.n	8008132 <UART_SetConfig+0x282>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	76fb      	strb	r3, [r7, #27]
 8007fe8:	e0a3      	b.n	8008132 <UART_SetConfig+0x282>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a6d      	ldr	r2, [pc, #436]	; (80081a4 <UART_SetConfig+0x2f4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d120      	bne.n	8008036 <UART_SetConfig+0x186>
 8007ff4:	4b69      	ldr	r3, [pc, #420]	; (800819c <UART_SetConfig+0x2ec>)
 8007ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ffe:	2b30      	cmp	r3, #48	; 0x30
 8008000:	d013      	beq.n	800802a <UART_SetConfig+0x17a>
 8008002:	2b30      	cmp	r3, #48	; 0x30
 8008004:	d814      	bhi.n	8008030 <UART_SetConfig+0x180>
 8008006:	2b20      	cmp	r3, #32
 8008008:	d009      	beq.n	800801e <UART_SetConfig+0x16e>
 800800a:	2b20      	cmp	r3, #32
 800800c:	d810      	bhi.n	8008030 <UART_SetConfig+0x180>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <UART_SetConfig+0x168>
 8008012:	2b10      	cmp	r3, #16
 8008014:	d006      	beq.n	8008024 <UART_SetConfig+0x174>
 8008016:	e00b      	b.n	8008030 <UART_SetConfig+0x180>
 8008018:	2300      	movs	r3, #0
 800801a:	76fb      	strb	r3, [r7, #27]
 800801c:	e089      	b.n	8008132 <UART_SetConfig+0x282>
 800801e:	2302      	movs	r3, #2
 8008020:	76fb      	strb	r3, [r7, #27]
 8008022:	e086      	b.n	8008132 <UART_SetConfig+0x282>
 8008024:	2304      	movs	r3, #4
 8008026:	76fb      	strb	r3, [r7, #27]
 8008028:	e083      	b.n	8008132 <UART_SetConfig+0x282>
 800802a:	2308      	movs	r3, #8
 800802c:	76fb      	strb	r3, [r7, #27]
 800802e:	e080      	b.n	8008132 <UART_SetConfig+0x282>
 8008030:	2310      	movs	r3, #16
 8008032:	76fb      	strb	r3, [r7, #27]
 8008034:	e07d      	b.n	8008132 <UART_SetConfig+0x282>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a5b      	ldr	r2, [pc, #364]	; (80081a8 <UART_SetConfig+0x2f8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d120      	bne.n	8008082 <UART_SetConfig+0x1d2>
 8008040:	4b56      	ldr	r3, [pc, #344]	; (800819c <UART_SetConfig+0x2ec>)
 8008042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008046:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800804a:	2bc0      	cmp	r3, #192	; 0xc0
 800804c:	d013      	beq.n	8008076 <UART_SetConfig+0x1c6>
 800804e:	2bc0      	cmp	r3, #192	; 0xc0
 8008050:	d814      	bhi.n	800807c <UART_SetConfig+0x1cc>
 8008052:	2b80      	cmp	r3, #128	; 0x80
 8008054:	d009      	beq.n	800806a <UART_SetConfig+0x1ba>
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d810      	bhi.n	800807c <UART_SetConfig+0x1cc>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <UART_SetConfig+0x1b4>
 800805e:	2b40      	cmp	r3, #64	; 0x40
 8008060:	d006      	beq.n	8008070 <UART_SetConfig+0x1c0>
 8008062:	e00b      	b.n	800807c <UART_SetConfig+0x1cc>
 8008064:	2300      	movs	r3, #0
 8008066:	76fb      	strb	r3, [r7, #27]
 8008068:	e063      	b.n	8008132 <UART_SetConfig+0x282>
 800806a:	2302      	movs	r3, #2
 800806c:	76fb      	strb	r3, [r7, #27]
 800806e:	e060      	b.n	8008132 <UART_SetConfig+0x282>
 8008070:	2304      	movs	r3, #4
 8008072:	76fb      	strb	r3, [r7, #27]
 8008074:	e05d      	b.n	8008132 <UART_SetConfig+0x282>
 8008076:	2308      	movs	r3, #8
 8008078:	76fb      	strb	r3, [r7, #27]
 800807a:	e05a      	b.n	8008132 <UART_SetConfig+0x282>
 800807c:	2310      	movs	r3, #16
 800807e:	76fb      	strb	r3, [r7, #27]
 8008080:	e057      	b.n	8008132 <UART_SetConfig+0x282>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a49      	ldr	r2, [pc, #292]	; (80081ac <UART_SetConfig+0x2fc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d125      	bne.n	80080d8 <UART_SetConfig+0x228>
 800808c:	4b43      	ldr	r3, [pc, #268]	; (800819c <UART_SetConfig+0x2ec>)
 800808e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800809a:	d017      	beq.n	80080cc <UART_SetConfig+0x21c>
 800809c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a0:	d817      	bhi.n	80080d2 <UART_SetConfig+0x222>
 80080a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a6:	d00b      	beq.n	80080c0 <UART_SetConfig+0x210>
 80080a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ac:	d811      	bhi.n	80080d2 <UART_SetConfig+0x222>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <UART_SetConfig+0x20a>
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b6:	d006      	beq.n	80080c6 <UART_SetConfig+0x216>
 80080b8:	e00b      	b.n	80080d2 <UART_SetConfig+0x222>
 80080ba:	2300      	movs	r3, #0
 80080bc:	76fb      	strb	r3, [r7, #27]
 80080be:	e038      	b.n	8008132 <UART_SetConfig+0x282>
 80080c0:	2302      	movs	r3, #2
 80080c2:	76fb      	strb	r3, [r7, #27]
 80080c4:	e035      	b.n	8008132 <UART_SetConfig+0x282>
 80080c6:	2304      	movs	r3, #4
 80080c8:	76fb      	strb	r3, [r7, #27]
 80080ca:	e032      	b.n	8008132 <UART_SetConfig+0x282>
 80080cc:	2308      	movs	r3, #8
 80080ce:	76fb      	strb	r3, [r7, #27]
 80080d0:	e02f      	b.n	8008132 <UART_SetConfig+0x282>
 80080d2:	2310      	movs	r3, #16
 80080d4:	76fb      	strb	r3, [r7, #27]
 80080d6:	e02c      	b.n	8008132 <UART_SetConfig+0x282>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a2d      	ldr	r2, [pc, #180]	; (8008194 <UART_SetConfig+0x2e4>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d125      	bne.n	800812e <UART_SetConfig+0x27e>
 80080e2:	4b2e      	ldr	r3, [pc, #184]	; (800819c <UART_SetConfig+0x2ec>)
 80080e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080f0:	d017      	beq.n	8008122 <UART_SetConfig+0x272>
 80080f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080f6:	d817      	bhi.n	8008128 <UART_SetConfig+0x278>
 80080f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fc:	d00b      	beq.n	8008116 <UART_SetConfig+0x266>
 80080fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008102:	d811      	bhi.n	8008128 <UART_SetConfig+0x278>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <UART_SetConfig+0x260>
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810c:	d006      	beq.n	800811c <UART_SetConfig+0x26c>
 800810e:	e00b      	b.n	8008128 <UART_SetConfig+0x278>
 8008110:	2300      	movs	r3, #0
 8008112:	76fb      	strb	r3, [r7, #27]
 8008114:	e00d      	b.n	8008132 <UART_SetConfig+0x282>
 8008116:	2302      	movs	r3, #2
 8008118:	76fb      	strb	r3, [r7, #27]
 800811a:	e00a      	b.n	8008132 <UART_SetConfig+0x282>
 800811c:	2304      	movs	r3, #4
 800811e:	76fb      	strb	r3, [r7, #27]
 8008120:	e007      	b.n	8008132 <UART_SetConfig+0x282>
 8008122:	2308      	movs	r3, #8
 8008124:	76fb      	strb	r3, [r7, #27]
 8008126:	e004      	b.n	8008132 <UART_SetConfig+0x282>
 8008128:	2310      	movs	r3, #16
 800812a:	76fb      	strb	r3, [r7, #27]
 800812c:	e001      	b.n	8008132 <UART_SetConfig+0x282>
 800812e:	2310      	movs	r3, #16
 8008130:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a17      	ldr	r2, [pc, #92]	; (8008194 <UART_SetConfig+0x2e4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	f040 8087 	bne.w	800824c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800813e:	7efb      	ldrb	r3, [r7, #27]
 8008140:	2b08      	cmp	r3, #8
 8008142:	d837      	bhi.n	80081b4 <UART_SetConfig+0x304>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <UART_SetConfig+0x29c>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	08008171 	.word	0x08008171
 8008150:	080081b5 	.word	0x080081b5
 8008154:	08008179 	.word	0x08008179
 8008158:	080081b5 	.word	0x080081b5
 800815c:	0800817f 	.word	0x0800817f
 8008160:	080081b5 	.word	0x080081b5
 8008164:	080081b5 	.word	0x080081b5
 8008168:	080081b5 	.word	0x080081b5
 800816c:	08008187 	.word	0x08008187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008170:	f7fd f864 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8008174:	6178      	str	r0, [r7, #20]
        break;
 8008176:	e022      	b.n	80081be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008178:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <UART_SetConfig+0x300>)
 800817a:	617b      	str	r3, [r7, #20]
        break;
 800817c:	e01f      	b.n	80081be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800817e:	f7fc ffc5 	bl	800510c <HAL_RCC_GetSysClockFreq>
 8008182:	6178      	str	r0, [r7, #20]
        break;
 8008184:	e01b      	b.n	80081be <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818a:	617b      	str	r3, [r7, #20]
        break;
 800818c:	e017      	b.n	80081be <UART_SetConfig+0x30e>
 800818e:	bf00      	nop
 8008190:	efff69f3 	.word	0xefff69f3
 8008194:	40008000 	.word	0x40008000
 8008198:	40013800 	.word	0x40013800
 800819c:	40021000 	.word	0x40021000
 80081a0:	40004400 	.word	0x40004400
 80081a4:	40004800 	.word	0x40004800
 80081a8:	40004c00 	.word	0x40004c00
 80081ac:	40005000 	.word	0x40005000
 80081b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	76bb      	strb	r3, [r7, #26]
        break;
 80081bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80f1 	beq.w	80083a8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	4413      	add	r3, r2
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d305      	bcc.n	80081e2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d902      	bls.n	80081e8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	76bb      	strb	r3, [r7, #26]
 80081e6:	e0df      	b.n	80083a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f04f 0100 	mov.w	r1, #0
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	020b      	lsls	r3, r1, #8
 80081fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081fe:	0202      	lsls	r2, r0, #8
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	6849      	ldr	r1, [r1, #4]
 8008204:	0849      	lsrs	r1, r1, #1
 8008206:	4608      	mov	r0, r1
 8008208:	f04f 0100 	mov.w	r1, #0
 800820c:	1814      	adds	r4, r2, r0
 800820e:	eb43 0501 	adc.w	r5, r3, r1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	4620      	mov	r0, r4
 800821e:	4629      	mov	r1, r5
 8008220:	f7f8 f82e 	bl	8000280 <__aeabi_uldivmod>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4613      	mov	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008232:	d308      	bcc.n	8008246 <UART_SetConfig+0x396>
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800823a:	d204      	bcs.n	8008246 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	60da      	str	r2, [r3, #12]
 8008244:	e0b0      	b.n	80083a8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	76bb      	strb	r3, [r7, #26]
 800824a:	e0ad      	b.n	80083a8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008254:	d15c      	bne.n	8008310 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008256:	7efb      	ldrb	r3, [r7, #27]
 8008258:	2b08      	cmp	r3, #8
 800825a:	d828      	bhi.n	80082ae <UART_SetConfig+0x3fe>
 800825c:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <UART_SetConfig+0x3b4>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	08008289 	.word	0x08008289
 8008268:	08008291 	.word	0x08008291
 800826c:	08008299 	.word	0x08008299
 8008270:	080082af 	.word	0x080082af
 8008274:	0800829f 	.word	0x0800829f
 8008278:	080082af 	.word	0x080082af
 800827c:	080082af 	.word	0x080082af
 8008280:	080082af 	.word	0x080082af
 8008284:	080082a7 	.word	0x080082a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008288:	f7fc ffd8 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 800828c:	6178      	str	r0, [r7, #20]
        break;
 800828e:	e013      	b.n	80082b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008290:	f7fc ffea 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 8008294:	6178      	str	r0, [r7, #20]
        break;
 8008296:	e00f      	b.n	80082b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008298:	4b49      	ldr	r3, [pc, #292]	; (80083c0 <UART_SetConfig+0x510>)
 800829a:	617b      	str	r3, [r7, #20]
        break;
 800829c:	e00c      	b.n	80082b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829e:	f7fc ff35 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80082a2:	6178      	str	r0, [r7, #20]
        break;
 80082a4:	e008      	b.n	80082b8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082aa:	617b      	str	r3, [r7, #20]
        break;
 80082ac:	e004      	b.n	80082b8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	76bb      	strb	r3, [r7, #26]
        break;
 80082b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d074      	beq.n	80083a8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	005a      	lsls	r2, r3, #1
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	085b      	lsrs	r3, r3, #1
 80082c8:	441a      	add	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b0f      	cmp	r3, #15
 80082da:	d916      	bls.n	800830a <UART_SetConfig+0x45a>
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e2:	d212      	bcs.n	800830a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f023 030f 	bic.w	r3, r3, #15
 80082ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	085b      	lsrs	r3, r3, #1
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	f003 0307 	and.w	r3, r3, #7
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	89fb      	ldrh	r3, [r7, #14]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	89fa      	ldrh	r2, [r7, #14]
 8008306:	60da      	str	r2, [r3, #12]
 8008308:	e04e      	b.n	80083a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	76bb      	strb	r3, [r7, #26]
 800830e:	e04b      	b.n	80083a8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008310:	7efb      	ldrb	r3, [r7, #27]
 8008312:	2b08      	cmp	r3, #8
 8008314:	d827      	bhi.n	8008366 <UART_SetConfig+0x4b6>
 8008316:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x46c>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008341 	.word	0x08008341
 8008320:	08008349 	.word	0x08008349
 8008324:	08008351 	.word	0x08008351
 8008328:	08008367 	.word	0x08008367
 800832c:	08008357 	.word	0x08008357
 8008330:	08008367 	.word	0x08008367
 8008334:	08008367 	.word	0x08008367
 8008338:	08008367 	.word	0x08008367
 800833c:	0800835f 	.word	0x0800835f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008340:	f7fc ff7c 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8008344:	6178      	str	r0, [r7, #20]
        break;
 8008346:	e013      	b.n	8008370 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008348:	f7fc ff8e 	bl	8005268 <HAL_RCC_GetPCLK2Freq>
 800834c:	6178      	str	r0, [r7, #20]
        break;
 800834e:	e00f      	b.n	8008370 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008350:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <UART_SetConfig+0x510>)
 8008352:	617b      	str	r3, [r7, #20]
        break;
 8008354:	e00c      	b.n	8008370 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008356:	f7fc fed9 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800835a:	6178      	str	r0, [r7, #20]
        break;
 800835c:	e008      	b.n	8008370 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008362:	617b      	str	r3, [r7, #20]
        break;
 8008364:	e004      	b.n	8008370 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	76bb      	strb	r3, [r7, #26]
        break;
 800836e:	bf00      	nop
    }

    if (pclk != 0U)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d018      	beq.n	80083a8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	085a      	lsrs	r2, r3, #1
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	441a      	add	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	fbb2 f3f3 	udiv	r3, r2, r3
 8008388:	b29b      	uxth	r3, r3
 800838a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2b0f      	cmp	r3, #15
 8008390:	d908      	bls.n	80083a4 <UART_SetConfig+0x4f4>
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008398:	d204      	bcs.n	80083a4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	60da      	str	r2, [r3, #12]
 80083a2:	e001      	b.n	80083a8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80083b4:	7ebb      	ldrb	r3, [r7, #26]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3720      	adds	r7, #32
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bdb0      	pop	{r4, r5, r7, pc}
 80083be:	bf00      	nop
 80083c0:	00f42400 	.word	0x00f42400

080083c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	430a      	orrs	r2, r1
 8008430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01a      	beq.n	80084da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c2:	d10a      	bne.n	80084da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	605a      	str	r2, [r3, #4]
  }
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af02      	add	r7, sp, #8
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008518:	f7fa fba4 	bl	8002c64 <HAL_GetTick>
 800851c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b08      	cmp	r3, #8
 800852a:	d10e      	bne.n	800854a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800852c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f82d 	bl	800859a <UART_WaitOnFlagUntilTimeout>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e023      	b.n	8008592 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b04      	cmp	r3, #4
 8008556:	d10e      	bne.n	8008576 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f817 	bl	800859a <UART_WaitOnFlagUntilTimeout>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e00d      	b.n	8008592 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	4613      	mov	r3, r2
 80085a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085aa:	e05e      	b.n	800866a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b2:	d05a      	beq.n	800866a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085b4:	f7fa fb56 	bl	8002c64 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d302      	bcc.n	80085ca <UART_WaitOnFlagUntilTimeout+0x30>
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d11b      	bne.n	8008602 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80085d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0201 	bic.w	r2, r2, #1
 80085e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2220      	movs	r2, #32
 80085ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2220      	movs	r2, #32
 80085f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e043      	b.n	800868a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d02c      	beq.n	800866a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800861a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800861e:	d124      	bne.n	800866a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008628:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008638:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0201 	bic.w	r2, r2, #1
 8008648:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e00f      	b.n	800868a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69da      	ldr	r2, [r3, #28]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	4013      	ands	r3, r2
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	429a      	cmp	r2, r3
 8008678:	bf0c      	ite	eq
 800867a:	2301      	moveq	r3, #1
 800867c:	2300      	movne	r3, #0
 800867e:	b2db      	uxtb	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	429a      	cmp	r2, r3
 8008686:	d091      	beq.n	80085ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008698:	4904      	ldr	r1, [pc, #16]	; (80086ac <MX_FATFS_Init+0x18>)
 800869a:	4805      	ldr	r0, [pc, #20]	; (80086b0 <MX_FATFS_Init+0x1c>)
 800869c:	f002 ff6c 	bl	800b578 <FATFS_LinkDriver>
 80086a0:	4603      	mov	r3, r0
 80086a2:	461a      	mov	r2, r3
 80086a4:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <MX_FATFS_Init+0x20>)
 80086a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80086a8:	bf00      	nop
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	2000da0c 	.word	0x2000da0c
 80086b0:	200000a0 	.word	0x200000a0
 80086b4:	2000da10 	.word	0x2000da10

080086b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80086bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7f8 f903 	bl	80008e0 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80086da:	bf00      	nop
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7f8 f9db 	bl	8000aac <SD_disk_status>
  /* USER CODE END STATUS */
}
 80086f6:	bf00      	nop
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	4603      	mov	r3, r0
 800870e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 8008710:	7bf8      	ldrb	r0, [r7, #15]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	f7f8 f9de 	bl	8000ad8 <SD_disk_read>
  /* USER CODE END READ */
}
 800871c:	bf00      	nop
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 8008736:	7bf8      	ldrb	r0, [r7, #15]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	f7f8 fa35 	bl	8000bac <SD_disk_write>
  /* USER CODE END WRITE */
}
 8008742:	bf00      	nop
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	603a      	str	r2, [r7, #0]
 8008756:	71fb      	strb	r3, [r7, #7]
 8008758:	460b      	mov	r3, r1
 800875a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	79b9      	ldrb	r1, [r7, #6]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7f8 faa6 	bl	8000cb4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8008768:	bf00      	nop
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <disk_status+0x30>)
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	79fa      	ldrb	r2, [r7, #7]
 800878c:	4905      	ldr	r1, [pc, #20]	; (80087a4 <disk_status+0x30>)
 800878e:	440a      	add	r2, r1
 8008790:	7a12      	ldrb	r2, [r2, #8]
 8008792:	4610      	mov	r0, r2
 8008794:	4798      	blx	r3
 8008796:	4603      	mov	r3, r0
 8008798:	73fb      	strb	r3, [r7, #15]
  return stat;
 800879a:	7bfb      	ldrb	r3, [r7, #15]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	2000016c 	.word	0x2000016c

080087a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	4a0d      	ldr	r2, [pc, #52]	; (80087f0 <disk_initialize+0x48>)
 80087ba:	5cd3      	ldrb	r3, [r2, r3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d111      	bne.n	80087e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	4a0b      	ldr	r2, [pc, #44]	; (80087f0 <disk_initialize+0x48>)
 80087c4:	2101      	movs	r1, #1
 80087c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	4a09      	ldr	r2, [pc, #36]	; (80087f0 <disk_initialize+0x48>)
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	79fa      	ldrb	r2, [r7, #7]
 80087d6:	4906      	ldr	r1, [pc, #24]	; (80087f0 <disk_initialize+0x48>)
 80087d8:	440a      	add	r2, r1
 80087da:	7a12      	ldrb	r2, [r2, #8]
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	2000016c 	.word	0x2000016c

080087f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80087f4:	b590      	push	{r4, r7, lr}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <disk_read+0x3c>)
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4413      	add	r3, r2
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	689c      	ldr	r4, [r3, #8]
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	4a07      	ldr	r2, [pc, #28]	; (8008830 <disk_read+0x3c>)
 8008814:	4413      	add	r3, r2
 8008816:	7a18      	ldrb	r0, [r3, #8]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	47a0      	blx	r4
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]
  return res;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
}
 8008826:	4618      	mov	r0, r3
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	bd90      	pop	{r4, r7, pc}
 800882e:	bf00      	nop
 8008830:	2000016c 	.word	0x2000016c

08008834 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008834:	b590      	push	{r4, r7, lr}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	60b9      	str	r1, [r7, #8]
 800883c:	607a      	str	r2, [r7, #4]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4a0a      	ldr	r2, [pc, #40]	; (8008870 <disk_write+0x3c>)
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	68dc      	ldr	r4, [r3, #12]
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4a07      	ldr	r2, [pc, #28]	; (8008870 <disk_write+0x3c>)
 8008854:	4413      	add	r3, r2
 8008856:	7a18      	ldrb	r0, [r3, #8]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	68b9      	ldr	r1, [r7, #8]
 800885e:	47a0      	blx	r4
 8008860:	4603      	mov	r3, r0
 8008862:	75fb      	strb	r3, [r7, #23]
  return res;
 8008864:	7dfb      	ldrb	r3, [r7, #23]
}
 8008866:	4618      	mov	r0, r3
 8008868:	371c      	adds	r7, #28
 800886a:	46bd      	mov	sp, r7
 800886c:	bd90      	pop	{r4, r7, pc}
 800886e:	bf00      	nop
 8008870:	2000016c 	.word	0x2000016c

08008874 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	603a      	str	r2, [r7, #0]
 800887e:	71fb      	strb	r3, [r7, #7]
 8008880:	460b      	mov	r3, r1
 8008882:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	4a09      	ldr	r2, [pc, #36]	; (80088ac <disk_ioctl+0x38>)
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	79fa      	ldrb	r2, [r7, #7]
 8008892:	4906      	ldr	r1, [pc, #24]	; (80088ac <disk_ioctl+0x38>)
 8008894:	440a      	add	r2, r1
 8008896:	7a10      	ldrb	r0, [r2, #8]
 8008898:	79b9      	ldrb	r1, [r7, #6]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	4798      	blx	r3
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2000016c 	.word	0x2000016c

080088b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3301      	adds	r3, #1
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80088c0:	89fb      	ldrh	r3, [r7, #14]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b21a      	sxth	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	b21b      	sxth	r3, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b21b      	sxth	r3, r3
 80088d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80088d2:	89fb      	ldrh	r3, [r7, #14]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3303      	adds	r3, #3
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	3202      	adds	r2, #2
 80088f8:	7812      	ldrb	r2, [r2, #0]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	021b      	lsls	r3, r3, #8
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	3201      	adds	r2, #1
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	4313      	orrs	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	021b      	lsls	r3, r3, #8
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7812      	ldrb	r2, [r2, #0]
 8008914:	4313      	orrs	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
	return rv;
 8008918:	68fb      	ldr	r3, [r7, #12]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	887a      	ldrh	r2, [r7, #2]
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	887b      	ldrh	r3, [r7, #2]
 8008940:	0a1b      	lsrs	r3, r3, #8
 8008942:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	887a      	ldrh	r2, [r7, #2]
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	701a      	strb	r2, [r3, #0]
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	701a      	strb	r2, [r3, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	0a1b      	lsrs	r3, r3, #8
 8008976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	0a1b      	lsrs	r3, r3, #8
 800899a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	607a      	str	r2, [r7, #4]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	1c53      	adds	r3, r2, #1
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	1c59      	adds	r1, r3, #1
 80089d8:	6179      	str	r1, [r7, #20]
 80089da:	7812      	ldrb	r2, [r2, #0]
 80089dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	607b      	str	r3, [r7, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1f1      	bne.n	80089ce <mem_cpy+0x1a>
	}
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80089f6:	b480      	push	{r7}
 80089f8:	b087      	sub	sp, #28
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	617a      	str	r2, [r7, #20]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f3      	bne.n	8008a06 <mem_set+0x10>
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	371c      	adds	r7, #28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008a2c:	b480      	push	{r7}
 8008a2e:	b089      	sub	sp, #36	; 0x24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	61fa      	str	r2, [r7, #28]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	61ba      	str	r2, [r7, #24]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	1acb      	subs	r3, r1, r3
 8008a58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	607b      	str	r3, [r7, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <mem_cmp+0x40>
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0eb      	beq.n	8008a44 <mem_cmp+0x18>

	return r;
 8008a6c:	697b      	ldr	r3, [r7, #20]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3724      	adds	r7, #36	; 0x24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008a7a:	b480      	push	{r7}
 8008a7c:	b083      	sub	sp, #12
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008a84:	e002      	b.n	8008a8c <chk_chr+0x12>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	607b      	str	r3, [r7, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <chk_chr+0x26>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d1f2      	bne.n	8008a86 <chk_chr+0xc>
	return *str;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <lock_fs+0x22>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f002 fe55 	bl	800b772 <ff_req_grant>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <lock_fs+0x22>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <lock_fs+0x24>
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00d      	beq.n	8008b0a <unlock_fs+0x2e>
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	2b0c      	cmp	r3, #12
 8008af2:	d00a      	beq.n	8008b0a <unlock_fs+0x2e>
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	2b0b      	cmp	r3, #11
 8008af8:	d007      	beq.n	8008b0a <unlock_fs+0x2e>
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	2b0f      	cmp	r3, #15
 8008afe:	d004      	beq.n	8008b0a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f002 fe49 	bl	800b79c <ff_rel_grant>
	}
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
	...

08008b14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60bb      	str	r3, [r7, #8]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	e029      	b.n	8008b7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008b28:	4a27      	ldr	r2, [pc, #156]	; (8008bc8 <chk_lock+0xb4>)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	011b      	lsls	r3, r3, #4
 8008b2e:	4413      	add	r3, r2
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d01d      	beq.n	8008b72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b36:	4a24      	ldr	r2, [pc, #144]	; (8008bc8 <chk_lock+0xb4>)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	4413      	add	r3, r2
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d116      	bne.n	8008b76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008b48:	4a1f      	ldr	r2, [pc, #124]	; (8008bc8 <chk_lock+0xb4>)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	4413      	add	r3, r2
 8008b50:	3304      	adds	r3, #4
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d10c      	bne.n	8008b76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b5c:	4a1a      	ldr	r2, [pc, #104]	; (8008bc8 <chk_lock+0xb4>)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	4413      	add	r3, r2
 8008b64:	3308      	adds	r3, #8
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d102      	bne.n	8008b76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b70:	e007      	b.n	8008b82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008b72:	2301      	movs	r3, #1
 8008b74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d9d2      	bls.n	8008b28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d109      	bne.n	8008b9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <chk_lock+0x80>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d101      	bne.n	8008b98 <chk_lock+0x84>
 8008b94:	2300      	movs	r3, #0
 8008b96:	e010      	b.n	8008bba <chk_lock+0xa6>
 8008b98:	2312      	movs	r3, #18
 8008b9a:	e00e      	b.n	8008bba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d108      	bne.n	8008bb4 <chk_lock+0xa0>
 8008ba2:	4a09      	ldr	r2, [pc, #36]	; (8008bc8 <chk_lock+0xb4>)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	011b      	lsls	r3, r3, #4
 8008ba8:	4413      	add	r3, r2
 8008baa:	330c      	adds	r3, #12
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb2:	d101      	bne.n	8008bb8 <chk_lock+0xa4>
 8008bb4:	2310      	movs	r3, #16
 8008bb6:	e000      	b.n	8008bba <chk_lock+0xa6>
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	2000014c 	.word	0x2000014c

08008bcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
 8008bd6:	e002      	b.n	8008bde <enq_lock+0x12>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	607b      	str	r3, [r7, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d806      	bhi.n	8008bf2 <enq_lock+0x26>
 8008be4:	4a09      	ldr	r2, [pc, #36]	; (8008c0c <enq_lock+0x40>)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	4413      	add	r3, r2
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f2      	bne.n	8008bd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	bf14      	ite	ne
 8008bf8:	2301      	movne	r3, #1
 8008bfa:	2300      	moveq	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	2000014c 	.word	0x2000014c

08008c10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e01f      	b.n	8008c60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008c20:	4a41      	ldr	r2, [pc, #260]	; (8008d28 <inc_lock+0x118>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	4413      	add	r3, r2
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d113      	bne.n	8008c5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008c32:	4a3d      	ldr	r2, [pc, #244]	; (8008d28 <inc_lock+0x118>)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	4413      	add	r3, r2
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d109      	bne.n	8008c5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008c46:	4a38      	ldr	r2, [pc, #224]	; (8008d28 <inc_lock+0x118>)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	4413      	add	r3, r2
 8008c4e:	3308      	adds	r3, #8
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d006      	beq.n	8008c68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d9dc      	bls.n	8008c20 <inc_lock+0x10>
 8008c66:	e000      	b.n	8008c6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008c68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d132      	bne.n	8008cd6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e002      	b.n	8008c7c <inc_lock+0x6c>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d806      	bhi.n	8008c90 <inc_lock+0x80>
 8008c82:	4a29      	ldr	r2, [pc, #164]	; (8008d28 <inc_lock+0x118>)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	011b      	lsls	r3, r3, #4
 8008c88:	4413      	add	r3, r2
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1f2      	bne.n	8008c76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d101      	bne.n	8008c9a <inc_lock+0x8a>
 8008c96:	2300      	movs	r3, #0
 8008c98:	e040      	b.n	8008d1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4922      	ldr	r1, [pc, #136]	; (8008d28 <inc_lock+0x118>)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	011b      	lsls	r3, r3, #4
 8008ca4:	440b      	add	r3, r1
 8008ca6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	491e      	ldr	r1, [pc, #120]	; (8008d28 <inc_lock+0x118>)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	011b      	lsls	r3, r3, #4
 8008cb2:	440b      	add	r3, r1
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695a      	ldr	r2, [r3, #20]
 8008cbc:	491a      	ldr	r1, [pc, #104]	; (8008d28 <inc_lock+0x118>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	440b      	add	r3, r1
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008cc8:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <inc_lock+0x118>)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	4413      	add	r3, r2
 8008cd0:	330c      	adds	r3, #12
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <inc_lock+0xe0>
 8008cdc:	4a12      	ldr	r2, [pc, #72]	; (8008d28 <inc_lock+0x118>)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	4413      	add	r3, r2
 8008ce4:	330c      	adds	r3, #12
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <inc_lock+0xe0>
 8008cec:	2300      	movs	r3, #0
 8008cee:	e015      	b.n	8008d1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d108      	bne.n	8008d08 <inc_lock+0xf8>
 8008cf6:	4a0c      	ldr	r2, [pc, #48]	; (8008d28 <inc_lock+0x118>)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	4413      	add	r3, r2
 8008cfe:	330c      	adds	r3, #12
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	3301      	adds	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	e001      	b.n	8008d0c <inc_lock+0xfc>
 8008d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d0c:	4906      	ldr	r1, [pc, #24]	; (8008d28 <inc_lock+0x118>)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	440b      	add	r3, r1
 8008d14:	330c      	adds	r3, #12
 8008d16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	2000014c 	.word	0x2000014c

08008d2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	607b      	str	r3, [r7, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d825      	bhi.n	8008d8c <dec_lock+0x60>
		n = Files[i].ctr;
 8008d40:	4a17      	ldr	r2, [pc, #92]	; (8008da0 <dec_lock+0x74>)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	4413      	add	r3, r2
 8008d48:	330c      	adds	r3, #12
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008d4e:	89fb      	ldrh	r3, [r7, #14]
 8008d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d54:	d101      	bne.n	8008d5a <dec_lock+0x2e>
 8008d56:	2300      	movs	r3, #0
 8008d58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008d5a:	89fb      	ldrh	r3, [r7, #14]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <dec_lock+0x3a>
 8008d60:	89fb      	ldrh	r3, [r7, #14]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008d66:	4a0e      	ldr	r2, [pc, #56]	; (8008da0 <dec_lock+0x74>)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	4413      	add	r3, r2
 8008d6e:	330c      	adds	r3, #12
 8008d70:	89fa      	ldrh	r2, [r7, #14]
 8008d72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008d74:	89fb      	ldrh	r3, [r7, #14]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <dec_lock+0x5a>
 8008d7a:	4a09      	ldr	r2, [pc, #36]	; (8008da0 <dec_lock+0x74>)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	4413      	add	r3, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	737b      	strb	r3, [r7, #13]
 8008d8a:	e001      	b.n	8008d90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008d90:	7b7b      	ldrb	r3, [r7, #13]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	2000014c 	.word	0x2000014c

08008da4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	e010      	b.n	8008dd4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008db2:	4a0d      	ldr	r2, [pc, #52]	; (8008de8 <clear_lock+0x44>)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	4413      	add	r3, r2
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d105      	bne.n	8008dce <clear_lock+0x2a>
 8008dc2:	4a09      	ldr	r2, [pc, #36]	; (8008de8 <clear_lock+0x44>)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	011b      	lsls	r3, r3, #4
 8008dc8:	4413      	add	r3, r2
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d9eb      	bls.n	8008db2 <clear_lock+0xe>
	}
}
 8008dda:	bf00      	nop
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	2000014c 	.word	0x2000014c

08008dec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	78db      	ldrb	r3, [r3, #3]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d034      	beq.n	8008e6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7858      	ldrb	r0, [r3, #1]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008e10:	2301      	movs	r3, #1
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	f7ff fd0e 	bl	8008834 <disk_write>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	73fb      	strb	r3, [r7, #15]
 8008e22:	e022      	b.n	8008e6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	1ad2      	subs	r2, r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d217      	bcs.n	8008e6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	789b      	ldrb	r3, [r3, #2]
 8008e3e:	613b      	str	r3, [r7, #16]
 8008e40:	e010      	b.n	8008e64 <sync_window+0x78>
					wsect += fs->fsize;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4413      	add	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	7858      	ldrb	r0, [r3, #1]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008e56:	2301      	movs	r3, #1
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	f7ff fceb 	bl	8008834 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	613b      	str	r3, [r7, #16]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d8eb      	bhi.n	8008e42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d01b      	beq.n	8008ec4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff ffad 	bl	8008dec <sync_window>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d113      	bne.n	8008ec4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7858      	ldrb	r0, [r3, #1]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	f7ff fca3 	bl	80087f4 <disk_read>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d004      	beq.n	8008ebe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eb8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff ff87 	bl	8008dec <sync_window>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d159      	bne.n	8008f9c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d149      	bne.n	8008f84 <sync_fs+0xb4>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	791b      	ldrb	r3, [r3, #4]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d145      	bne.n	8008f84 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	899b      	ldrh	r3, [r3, #12]
 8008f02:	461a      	mov	r2, r3
 8008f04:	2100      	movs	r1, #0
 8008f06:	f7ff fd76 	bl	80089f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	333c      	adds	r3, #60	; 0x3c
 8008f0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f12:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff fd05 	bl	8008926 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	333c      	adds	r3, #60	; 0x3c
 8008f20:	4921      	ldr	r1, [pc, #132]	; (8008fa8 <sync_fs+0xd8>)
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff fd1a 	bl	800895c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	333c      	adds	r3, #60	; 0x3c
 8008f2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f30:	491e      	ldr	r1, [pc, #120]	; (8008fac <sync_fs+0xdc>)
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7ff fd12 	bl	800895c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	333c      	adds	r3, #60	; 0x3c
 8008f3c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	4619      	mov	r1, r3
 8008f46:	4610      	mov	r0, r2
 8008f48:	f7ff fd08 	bl	800895c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	333c      	adds	r3, #60	; 0x3c
 8008f50:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f7ff fcfe 	bl	800895c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7858      	ldrb	r0, [r3, #1]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f7ff fc5b 	bl	8008834 <disk_write>
			fs->fsi_flag = 0;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	785b      	ldrb	r3, [r3, #1]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff fc71 	bl	8008874 <disk_ioctl>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <sync_fs+0xcc>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	41615252 	.word	0x41615252
 8008fac:	61417272 	.word	0x61417272

08008fb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	3b02      	subs	r3, #2
 8008fbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a1b      	ldr	r3, [r3, #32]
 8008fc4:	3b02      	subs	r3, #2
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d301      	bcc.n	8008fd0 <clust2sect+0x20>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e008      	b.n	8008fe2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	895b      	ldrh	r3, [r3, #10]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	fb03 f202 	mul.w	r2, r3, r2
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	4413      	add	r3, r2
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d904      	bls.n	800900e <get_fat+0x20>
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <get_fat+0x26>
		val = 1;	/* Internal error */
 800900e:	2301      	movs	r3, #1
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	e0bb      	b.n	800918c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009018:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b03      	cmp	r3, #3
 8009020:	f000 8083 	beq.w	800912a <get_fat+0x13c>
 8009024:	2b03      	cmp	r3, #3
 8009026:	f300 80a7 	bgt.w	8009178 <get_fat+0x18a>
 800902a:	2b01      	cmp	r3, #1
 800902c:	d002      	beq.n	8009034 <get_fat+0x46>
 800902e:	2b02      	cmp	r3, #2
 8009030:	d056      	beq.n	80090e0 <get_fat+0xf2>
 8009032:	e0a1      	b.n	8009178 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	899b      	ldrh	r3, [r3, #12]
 800904a:	4619      	mov	r1, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009052:	4413      	add	r3, r2
 8009054:	4619      	mov	r1, r3
 8009056:	6938      	ldr	r0, [r7, #16]
 8009058:	f7ff ff0c 	bl	8008e74 <move_window>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 808d 	bne.w	800917e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	60fa      	str	r2, [r7, #12]
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	8992      	ldrh	r2, [r2, #12]
 800906e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009072:	fb02 f201 	mul.w	r2, r2, r1
 8009076:	1a9b      	subs	r3, r3, r2
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	4413      	add	r3, r2
 800907c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009080:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	899b      	ldrh	r3, [r3, #12]
 800908a:	4619      	mov	r1, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009092:	4413      	add	r3, r2
 8009094:	4619      	mov	r1, r3
 8009096:	6938      	ldr	r0, [r7, #16]
 8009098:	f7ff feec 	bl	8008e74 <move_window>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d16f      	bne.n	8009182 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	899b      	ldrh	r3, [r3, #12]
 80090a6:	461a      	mov	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80090ae:	fb02 f201 	mul.w	r2, r2, r1
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	4413      	add	r3, r2
 80090b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	461a      	mov	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <get_fat+0xe8>
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	091b      	lsrs	r3, r3, #4
 80090d4:	e002      	b.n	80090dc <get_fat+0xee>
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090dc:	617b      	str	r3, [r7, #20]
			break;
 80090de:	e055      	b.n	800918c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	899b      	ldrh	r3, [r3, #12]
 80090e8:	085b      	lsrs	r3, r3, #1
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80090f4:	4413      	add	r3, r2
 80090f6:	4619      	mov	r1, r3
 80090f8:	6938      	ldr	r0, [r7, #16]
 80090fa:	f7ff febb 	bl	8008e74 <move_window>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d140      	bne.n	8009186 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	8992      	ldrh	r2, [r2, #12]
 8009112:	fbb3 f0f2 	udiv	r0, r3, r2
 8009116:	fb02 f200 	mul.w	r2, r2, r0
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	440b      	add	r3, r1
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fbc6 	bl	80088b0 <ld_word>
 8009124:	4603      	mov	r3, r0
 8009126:	617b      	str	r3, [r7, #20]
			break;
 8009128:	e030      	b.n	800918c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	899b      	ldrh	r3, [r3, #12]
 8009132:	089b      	lsrs	r3, r3, #2
 8009134:	b29b      	uxth	r3, r3
 8009136:	4619      	mov	r1, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	fbb3 f3f1 	udiv	r3, r3, r1
 800913e:	4413      	add	r3, r2
 8009140:	4619      	mov	r1, r3
 8009142:	6938      	ldr	r0, [r7, #16]
 8009144:	f7ff fe96 	bl	8008e74 <move_window>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d11d      	bne.n	800918a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	8992      	ldrh	r2, [r2, #12]
 800915c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009160:	fb02 f200 	mul.w	r2, r2, r0
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	440b      	add	r3, r1
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff fbb9 	bl	80088e0 <ld_dword>
 800916e:	4603      	mov	r3, r0
 8009170:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009174:	617b      	str	r3, [r7, #20]
			break;
 8009176:	e009      	b.n	800918c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009178:	2301      	movs	r3, #1
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	e006      	b.n	800918c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800917e:	bf00      	nop
 8009180:	e004      	b.n	800918c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009182:	bf00      	nop
 8009184:	e002      	b.n	800918c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009186:	bf00      	nop
 8009188:	e000      	b.n	800918c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800918a:	bf00      	nop
		}
	}

	return val;
 800918c:	697b      	ldr	r3, [r7, #20]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009196:	b590      	push	{r4, r7, lr}
 8009198:	b089      	sub	sp, #36	; 0x24
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80091a2:	2302      	movs	r3, #2
 80091a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f240 8102 	bls.w	80093b2 <put_fat+0x21c>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	f080 80fc 	bcs.w	80093b2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b03      	cmp	r3, #3
 80091c0:	f000 80b6 	beq.w	8009330 <put_fat+0x19a>
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	f300 80fd 	bgt.w	80093c4 <put_fat+0x22e>
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d003      	beq.n	80091d6 <put_fat+0x40>
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	f000 8083 	beq.w	80092da <put_fat+0x144>
 80091d4:	e0f6      	b.n	80093c4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	61bb      	str	r3, [r7, #24]
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	4413      	add	r3, r2
 80091e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	899b      	ldrh	r3, [r3, #12]
 80091ec:	4619      	mov	r1, r3
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80091f4:	4413      	add	r3, r2
 80091f6:	4619      	mov	r1, r3
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f7ff fe3b 	bl	8008e74 <move_window>
 80091fe:	4603      	mov	r3, r0
 8009200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009202:	7ffb      	ldrb	r3, [r7, #31]
 8009204:	2b00      	cmp	r3, #0
 8009206:	f040 80d6 	bne.w	80093b6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	61ba      	str	r2, [r7, #24]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	8992      	ldrh	r2, [r2, #12]
 800921a:	fbb3 f0f2 	udiv	r0, r3, r2
 800921e:	fb02 f200 	mul.w	r2, r2, r0
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	440b      	add	r3, r1
 8009226:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00d      	beq.n	800924e <put_fat+0xb8>
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b25b      	sxtb	r3, r3
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	b25a      	sxtb	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	011b      	lsls	r3, r3, #4
 8009244:	b25b      	sxtb	r3, r3
 8009246:	4313      	orrs	r3, r2
 8009248:	b25b      	sxtb	r3, r3
 800924a:	b2db      	uxtb	r3, r3
 800924c:	e001      	b.n	8009252 <put_fat+0xbc>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	899b      	ldrh	r3, [r3, #12]
 8009264:	4619      	mov	r1, r3
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	fbb3 f3f1 	udiv	r3, r3, r1
 800926c:	4413      	add	r3, r2
 800926e:	4619      	mov	r1, r3
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f7ff fdff 	bl	8008e74 <move_window>
 8009276:	4603      	mov	r3, r0
 8009278:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800927a:	7ffb      	ldrb	r3, [r7, #31]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 809c 	bne.w	80093ba <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	899b      	ldrh	r3, [r3, #12]
 800928c:	461a      	mov	r2, r3
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	fbb3 f0f2 	udiv	r0, r3, r2
 8009294:	fb02 f200 	mul.w	r2, r2, r0
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	440b      	add	r3, r1
 800929c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <put_fat+0x11a>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	091b      	lsrs	r3, r3, #4
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	e00e      	b.n	80092ce <put_fat+0x138>
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	b25b      	sxtb	r3, r3
 80092b6:	f023 030f 	bic.w	r3, r3, #15
 80092ba:	b25a      	sxtb	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	b25b      	sxtb	r3, r3
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	b25b      	sxtb	r3, r3
 80092c8:	4313      	orrs	r3, r2
 80092ca:	b25b      	sxtb	r3, r3
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	70da      	strb	r2, [r3, #3]
			break;
 80092d8:	e074      	b.n	80093c4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	899b      	ldrh	r3, [r3, #12]
 80092e2:	085b      	lsrs	r3, r3, #1
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ee:	4413      	add	r3, r2
 80092f0:	4619      	mov	r1, r3
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f7ff fdbe 	bl	8008e74 <move_window>
 80092f8:	4603      	mov	r3, r0
 80092fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092fc:	7ffb      	ldrb	r3, [r7, #31]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d15d      	bne.n	80093be <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	8992      	ldrh	r2, [r2, #12]
 8009310:	fbb3 f0f2 	udiv	r0, r3, r2
 8009314:	fb02 f200 	mul.w	r2, r2, r0
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	440b      	add	r3, r1
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	b292      	uxth	r2, r2
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff faff 	bl	8008926 <st_word>
			fs->wflag = 1;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	70da      	strb	r2, [r3, #3]
			break;
 800932e:	e049      	b.n	80093c4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	899b      	ldrh	r3, [r3, #12]
 8009338:	089b      	lsrs	r3, r3, #2
 800933a:	b29b      	uxth	r3, r3
 800933c:	4619      	mov	r1, r3
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	fbb3 f3f1 	udiv	r3, r3, r1
 8009344:	4413      	add	r3, r2
 8009346:	4619      	mov	r1, r3
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fd93 	bl	8008e74 <move_window>
 800934e:	4603      	mov	r3, r0
 8009350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009352:	7ffb      	ldrb	r3, [r7, #31]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d134      	bne.n	80093c2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	8992      	ldrh	r2, [r2, #12]
 800936c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009370:	fb02 f200 	mul.w	r2, r2, r0
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	440b      	add	r3, r1
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fab1 	bl	80088e0 <ld_dword>
 800937e:	4603      	mov	r3, r0
 8009380:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009384:	4323      	orrs	r3, r4
 8009386:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	8992      	ldrh	r2, [r2, #12]
 8009396:	fbb3 f0f2 	udiv	r0, r3, r2
 800939a:	fb02 f200 	mul.w	r2, r2, r0
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	440b      	add	r3, r1
 80093a2:	6879      	ldr	r1, [r7, #4]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff fad9 	bl	800895c <st_dword>
			fs->wflag = 1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2201      	movs	r2, #1
 80093ae:	70da      	strb	r2, [r3, #3]
			break;
 80093b0:	e008      	b.n	80093c4 <put_fat+0x22e>
		}
	}
 80093b2:	bf00      	nop
 80093b4:	e006      	b.n	80093c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80093b6:	bf00      	nop
 80093b8:	e004      	b.n	80093c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80093ba:	bf00      	nop
 80093bc:	e002      	b.n	80093c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80093be:	bf00      	nop
 80093c0:	e000      	b.n	80093c4 <put_fat+0x22e>
			if (res != FR_OK) break;
 80093c2:	bf00      	nop
	return res;
 80093c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3724      	adds	r7, #36	; 0x24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd90      	pop	{r4, r7, pc}

080093ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b088      	sub	sp, #32
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d904      	bls.n	80093f4 <remove_chain+0x26>
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d301      	bcc.n	80093f8 <remove_chain+0x2a>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e04b      	b.n	8009490 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00c      	beq.n	8009418 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80093fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	69b8      	ldr	r0, [r7, #24]
 8009406:	f7ff fec6 	bl	8009196 <put_fat>
 800940a:	4603      	mov	r3, r0
 800940c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800940e:	7ffb      	ldrb	r3, [r7, #31]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <remove_chain+0x4a>
 8009414:	7ffb      	ldrb	r3, [r7, #31]
 8009416:	e03b      	b.n	8009490 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff fde7 	bl	8008fee <get_fat>
 8009420:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d031      	beq.n	800948c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d101      	bne.n	8009432 <remove_chain+0x64>
 800942e:	2302      	movs	r3, #2
 8009430:	e02e      	b.n	8009490 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009438:	d101      	bne.n	800943e <remove_chain+0x70>
 800943a:	2301      	movs	r3, #1
 800943c:	e028      	b.n	8009490 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800943e:	2200      	movs	r2, #0
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	69b8      	ldr	r0, [r7, #24]
 8009444:	f7ff fea7 	bl	8009196 <put_fat>
 8009448:	4603      	mov	r3, r0
 800944a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800944c:	7ffb      	ldrb	r3, [r7, #31]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <remove_chain+0x88>
 8009452:	7ffb      	ldrb	r3, [r7, #31]
 8009454:	e01c      	b.n	8009490 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	69da      	ldr	r2, [r3, #28]
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	3b02      	subs	r3, #2
 8009460:	429a      	cmp	r2, r3
 8009462:	d20b      	bcs.n	800947c <remove_chain+0xae>
			fs->free_clst++;
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	791b      	ldrb	r3, [r3, #4]
 8009472:	f043 0301 	orr.w	r3, r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	429a      	cmp	r2, r3
 8009488:	d3c6      	bcc.n	8009418 <remove_chain+0x4a>
 800948a:	e000      	b.n	800948e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800948c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3720      	adds	r7, #32
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10d      	bne.n	80094ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d004      	beq.n	80094c4 <create_chain+0x2c>
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d31b      	bcc.n	80094fc <create_chain+0x64>
 80094c4:	2301      	movs	r3, #1
 80094c6:	61bb      	str	r3, [r7, #24]
 80094c8:	e018      	b.n	80094fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fd8e 	bl	8008fee <get_fat>
 80094d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d801      	bhi.n	80094de <create_chain+0x46>
 80094da:	2301      	movs	r3, #1
 80094dc:	e070      	b.n	80095c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e4:	d101      	bne.n	80094ea <create_chain+0x52>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	e06a      	b.n	80095c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d201      	bcs.n	80094f8 <create_chain+0x60>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	e063      	b.n	80095c0 <create_chain+0x128>
		scl = clst;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	3301      	adds	r3, #1
 8009504:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	429a      	cmp	r2, r3
 800950e:	d307      	bcc.n	8009520 <create_chain+0x88>
				ncl = 2;
 8009510:	2302      	movs	r3, #2
 8009512:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009514:	69fa      	ldr	r2, [r7, #28]
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	429a      	cmp	r2, r3
 800951a:	d901      	bls.n	8009520 <create_chain+0x88>
 800951c:	2300      	movs	r3, #0
 800951e:	e04f      	b.n	80095c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009520:	69f9      	ldr	r1, [r7, #28]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fd63 	bl	8008fee <get_fat>
 8009528:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00e      	beq.n	800954e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d003      	beq.n	800953e <create_chain+0xa6>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800953c:	d101      	bne.n	8009542 <create_chain+0xaa>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	e03e      	b.n	80095c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	429a      	cmp	r2, r3
 8009548:	d1da      	bne.n	8009500 <create_chain+0x68>
 800954a:	2300      	movs	r3, #0
 800954c:	e038      	b.n	80095c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800954e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009554:	69f9      	ldr	r1, [r7, #28]
 8009556:	6938      	ldr	r0, [r7, #16]
 8009558:	f7ff fe1d 	bl	8009196 <put_fat>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <create_chain+0xe2>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d006      	beq.n	800957a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800956c:	69fa      	ldr	r2, [r7, #28]
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6938      	ldr	r0, [r7, #16]
 8009572:	f7ff fe10 	bl	8009196 <put_fat>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d116      	bne.n	80095ae <create_chain+0x116>
		fs->last_clst = ncl;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	69da      	ldr	r2, [r3, #28]
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	3b02      	subs	r3, #2
 8009590:	429a      	cmp	r2, r3
 8009592:	d804      	bhi.n	800959e <create_chain+0x106>
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	1e5a      	subs	r2, r3, #1
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	791b      	ldrb	r3, [r3, #4]
 80095a2:	f043 0301 	orr.w	r3, r3, #1
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	711a      	strb	r2, [r3, #4]
 80095ac:	e007      	b.n	80095be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80095ae:	7dfb      	ldrb	r3, [r7, #23]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d102      	bne.n	80095ba <create_chain+0x122>
 80095b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095b8:	e000      	b.n	80095bc <create_chain+0x124>
 80095ba:	2301      	movs	r3, #1
 80095bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80095be:	69fb      	ldr	r3, [r7, #28]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	3304      	adds	r3, #4
 80095de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	899b      	ldrh	r3, [r3, #12]
 80095e4:	461a      	mov	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	8952      	ldrh	r2, [r2, #10]
 80095f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1d1a      	adds	r2, r3, #4
 80095fa:	613a      	str	r2, [r7, #16]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <clmt_clust+0x42>
 8009606:	2300      	movs	r3, #0
 8009608:	e010      	b.n	800962c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	429a      	cmp	r2, r3
 8009610:	d307      	bcc.n	8009622 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3304      	adds	r3, #4
 800961e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009620:	e7e9      	b.n	80095f6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009622:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	4413      	add	r3, r2
}
 800962c:	4618      	mov	r0, r3
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800964e:	d204      	bcs.n	800965a <dir_sdi+0x22>
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	f003 031f 	and.w	r3, r3, #31
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <dir_sdi+0x26>
		return FR_INT_ERR;
 800965a:	2302      	movs	r3, #2
 800965c:	e071      	b.n	8009742 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d106      	bne.n	800967e <dir_sdi+0x46>
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b02      	cmp	r3, #2
 8009676:	d902      	bls.n	800967e <dir_sdi+0x46>
		clst = fs->dirbase;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10c      	bne.n	800969e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	095b      	lsrs	r3, r3, #5
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	8912      	ldrh	r2, [r2, #8]
 800968c:	4293      	cmp	r3, r2
 800968e:	d301      	bcc.n	8009694 <dir_sdi+0x5c>
 8009690:	2302      	movs	r3, #2
 8009692:	e056      	b.n	8009742 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	61da      	str	r2, [r3, #28]
 800969c:	e02d      	b.n	80096fa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	895b      	ldrh	r3, [r3, #10]
 80096a2:	461a      	mov	r2, r3
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	899b      	ldrh	r3, [r3, #12]
 80096a8:	fb03 f302 	mul.w	r3, r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096ae:	e019      	b.n	80096e4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6979      	ldr	r1, [r7, #20]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fc9a 	bl	8008fee <get_fat>
 80096ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c2:	d101      	bne.n	80096c8 <dir_sdi+0x90>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e03c      	b.n	8009742 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d904      	bls.n	80096d8 <dir_sdi+0xa0>
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d301      	bcc.n	80096dc <dir_sdi+0xa4>
 80096d8:	2302      	movs	r3, #2
 80096da:	e032      	b.n	8009742 <dir_sdi+0x10a>
			ofs -= csz;
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d2e1      	bcs.n	80096b0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80096ec:	6979      	ldr	r1, [r7, #20]
 80096ee:	6938      	ldr	r0, [r7, #16]
 80096f0:	f7ff fc5e 	bl	8008fb0 <clust2sect>
 80096f4:	4602      	mov	r2, r0
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <dir_sdi+0xd4>
 8009708:	2302      	movs	r3, #2
 800970a:	e01a      	b.n	8009742 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	69da      	ldr	r2, [r3, #28]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	899b      	ldrh	r3, [r3, #12]
 8009714:	4619      	mov	r1, r3
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	fbb3 f3f1 	udiv	r3, r3, r1
 800971c:	441a      	add	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	899b      	ldrh	r3, [r3, #12]
 800972c:	461a      	mov	r2, r3
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	fbb3 f0f2 	udiv	r0, r3, r2
 8009734:	fb02 f200 	mul.w	r2, r2, r0
 8009738:	1a9b      	subs	r3, r3, r2
 800973a:	18ca      	adds	r2, r1, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	3320      	adds	r3, #32
 8009760:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <dir_next+0x28>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009770:	d301      	bcc.n	8009776 <dir_next+0x2c>
 8009772:	2304      	movs	r3, #4
 8009774:	e0bb      	b.n	80098ee <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	899b      	ldrh	r3, [r3, #12]
 800977a:	461a      	mov	r2, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009782:	fb02 f201 	mul.w	r2, r2, r1
 8009786:	1a9b      	subs	r3, r3, r2
 8009788:	2b00      	cmp	r3, #0
 800978a:	f040 809d 	bne.w	80098c8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10b      	bne.n	80097b8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	8912      	ldrh	r2, [r2, #8]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	f0c0 808d 	bcc.w	80098c8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	61da      	str	r2, [r3, #28]
 80097b4:	2304      	movs	r3, #4
 80097b6:	e09a      	b.n	80098ee <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	899b      	ldrh	r3, [r3, #12]
 80097bc:	461a      	mov	r2, r3
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	8952      	ldrh	r2, [r2, #10]
 80097c8:	3a01      	subs	r2, #1
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d17b      	bne.n	80098c8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f7ff fc08 	bl	8008fee <get_fat>
 80097de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d801      	bhi.n	80097ea <dir_next+0xa0>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e081      	b.n	80098ee <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f0:	d101      	bne.n	80097f6 <dir_next+0xac>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e07b      	b.n	80098ee <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d359      	bcc.n	80098b4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d104      	bne.n	8009810 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	61da      	str	r2, [r3, #28]
 800980c:	2304      	movs	r3, #4
 800980e:	e06e      	b.n	80098ee <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f7ff fe3d 	bl	8009498 <create_chain>
 800981e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <dir_next+0xe0>
 8009826:	2307      	movs	r3, #7
 8009828:	e061      	b.n	80098ee <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d101      	bne.n	8009834 <dir_next+0xea>
 8009830:	2302      	movs	r3, #2
 8009832:	e05c      	b.n	80098ee <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800983a:	d101      	bne.n	8009840 <dir_next+0xf6>
 800983c:	2301      	movs	r3, #1
 800983e:	e056      	b.n	80098ee <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff fad3 	bl	8008dec <sync_window>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <dir_next+0x106>
 800984c:	2301      	movs	r3, #1
 800984e:	e04e      	b.n	80098ee <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	899b      	ldrh	r3, [r3, #12]
 800985a:	461a      	mov	r2, r3
 800985c:	2100      	movs	r1, #0
 800985e:	f7ff f8ca 	bl	80089f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
 8009866:	6979      	ldr	r1, [r7, #20]
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7ff fba1 	bl	8008fb0 <clust2sect>
 800986e:	4602      	mov	r2, r0
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
 8009874:	e012      	b.n	800989c <dir_next+0x152>
						fs->wflag = 1;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff fab5 	bl	8008dec <sync_window>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <dir_next+0x142>
 8009888:	2301      	movs	r3, #1
 800988a:	e030      	b.n	80098ee <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	3301      	adds	r3, #1
 8009890:	613b      	str	r3, [r7, #16]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	639a      	str	r2, [r3, #56]	; 0x38
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	895b      	ldrh	r3, [r3, #10]
 80098a0:	461a      	mov	r2, r3
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d3e6      	bcc.n	8009876 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	1ad2      	subs	r2, r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fb77 	bl	8008fb0 <clust2sect>
 80098c2:	4602      	mov	r2, r0
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	899b      	ldrh	r3, [r3, #12]
 80098d8:	461a      	mov	r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80098e0:	fb02 f200 	mul.w	r2, r2, r0
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	18ca      	adds	r2, r1, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b086      	sub	sp, #24
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009906:	2100      	movs	r1, #0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fe95 	bl	8009638 <dir_sdi>
 800990e:	4603      	mov	r3, r0
 8009910:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d12b      	bne.n	8009970 <dir_alloc+0x7a>
		n = 0;
 8009918:	2300      	movs	r3, #0
 800991a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	4619      	mov	r1, r3
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f7ff faa6 	bl	8008e74 <move_window>
 8009928:	4603      	mov	r3, r0
 800992a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d11d      	bne.n	800996e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2be5      	cmp	r3, #229	; 0xe5
 800993a:	d004      	beq.n	8009946 <dir_alloc+0x50>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d107      	bne.n	8009956 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3301      	adds	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d102      	bne.n	800995a <dir_alloc+0x64>
 8009954:	e00c      	b.n	8009970 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009956:	2300      	movs	r3, #0
 8009958:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800995a:	2101      	movs	r1, #1
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7ff fef4 	bl	800974a <dir_next>
 8009962:	4603      	mov	r3, r0
 8009964:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d0d7      	beq.n	800991c <dir_alloc+0x26>
 800996c:	e000      	b.n	8009970 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800996e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	2b04      	cmp	r3, #4
 8009974:	d101      	bne.n	800997a <dir_alloc+0x84>
 8009976:	2307      	movs	r3, #7
 8009978:	75fb      	strb	r3, [r7, #23]
	return res;
 800997a:	7dfb      	ldrb	r3, [r7, #23]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	331a      	adds	r3, #26
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe ff8c 	bl	80088b0 <ld_word>
 8009998:	4603      	mov	r3, r0
 800999a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d109      	bne.n	80099b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	3314      	adds	r3, #20
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe ff81 	bl	80088b0 <ld_word>
 80099ae:	4603      	mov	r3, r0
 80099b0:	041b      	lsls	r3, r3, #16
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	331a      	adds	r3, #26
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	b292      	uxth	r2, r2
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe ffa4 	bl	8008926 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d109      	bne.n	80099fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f103 0214 	add.w	r2, r3, #20
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	0c1b      	lsrs	r3, r3, #16
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7fe ff96 	bl	8008926 <st_word>
	}
}
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009a04:	b590      	push	{r4, r7, lr}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	331a      	adds	r3, #26
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe ff4c 	bl	80088b0 <ld_word>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <cmp_lfn+0x1e>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	e059      	b.n	8009ad6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a2a:	1e5a      	subs	r2, r3, #1
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	4413      	add	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009a38:	2301      	movs	r3, #1
 8009a3a:	81fb      	strh	r3, [r7, #14]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	613b      	str	r3, [r7, #16]
 8009a40:	e033      	b.n	8009aaa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009a42:	4a27      	ldr	r2, [pc, #156]	; (8009ae0 <cmp_lfn+0xdc>)
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	4413      	add	r3, r2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe ff2d 	bl	80088b0 <ld_word>
 8009a56:	4603      	mov	r3, r0
 8009a58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009a5a:	89fb      	ldrh	r3, [r7, #14]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01a      	beq.n	8009a96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2bfe      	cmp	r3, #254	; 0xfe
 8009a64:	d812      	bhi.n	8009a8c <cmp_lfn+0x88>
 8009a66:	89bb      	ldrh	r3, [r7, #12]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 fdd1 	bl	800b610 <ff_wtoupper>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461c      	mov	r4, r3
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	617a      	str	r2, [r7, #20]
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f001 fdc5 	bl	800b610 <ff_wtoupper>
 8009a86:	4603      	mov	r3, r0
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	d001      	beq.n	8009a90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e022      	b.n	8009ad6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009a90:	89bb      	ldrh	r3, [r7, #12]
 8009a92:	81fb      	strh	r3, [r7, #14]
 8009a94:	e006      	b.n	8009aa4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009a96:	89bb      	ldrh	r3, [r7, #12]
 8009a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d001      	beq.n	8009aa4 <cmp_lfn+0xa0>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e018      	b.n	8009ad6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	613b      	str	r3, [r7, #16]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b0c      	cmp	r3, #12
 8009aae:	d9c8      	bls.n	8009a42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <cmp_lfn+0xd0>
 8009abc:	89fb      	ldrh	r3, [r7, #14]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d008      	beq.n	8009ad4 <cmp_lfn+0xd0>
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	4413      	add	r3, r2
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <cmp_lfn+0xd0>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e000      	b.n	8009ad6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009ad4:	2301      	movs	r3, #1
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd90      	pop	{r4, r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	08010ba8 	.word	0x08010ba8

08009ae4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4611      	mov	r1, r2
 8009af0:	461a      	mov	r2, r3
 8009af2:	460b      	mov	r3, r1
 8009af4:	71fb      	strb	r3, [r7, #7]
 8009af6:	4613      	mov	r3, r2
 8009af8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	330d      	adds	r3, #13
 8009afe:	79ba      	ldrb	r2, [r7, #6]
 8009b00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	330b      	adds	r3, #11
 8009b06:	220f      	movs	r2, #15
 8009b08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	330c      	adds	r3, #12
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	331a      	adds	r3, #26
 8009b16:	2100      	movs	r1, #0
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe ff04 	bl	8008926 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	1e5a      	subs	r2, r3, #1
 8009b22:	4613      	mov	r3, r2
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	82fb      	strh	r3, [r7, #22]
 8009b32:	2300      	movs	r3, #0
 8009b34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009b36:	8afb      	ldrh	r3, [r7, #22]
 8009b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d007      	beq.n	8009b50 <put_lfn+0x6c>
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	61fa      	str	r2, [r7, #28]
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009b50:	4a17      	ldr	r2, [pc, #92]	; (8009bb0 <put_lfn+0xcc>)
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	4413      	add	r3, r2
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	8afa      	ldrh	r2, [r7, #22]
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fedf 	bl	8008926 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009b68:	8afb      	ldrh	r3, [r7, #22]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <put_lfn+0x90>
 8009b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	3301      	adds	r3, #1
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2b0c      	cmp	r3, #12
 8009b7e:	d9da      	bls.n	8009b36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009b80:	8afb      	ldrh	r3, [r7, #22]
 8009b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d006      	beq.n	8009b98 <put_lfn+0xb4>
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	005b      	lsls	r3, r3, #1
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <put_lfn+0xbc>
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	79fa      	ldrb	r2, [r7, #7]
 8009ba4:	701a      	strb	r2, [r3, #0]
}
 8009ba6:	bf00      	nop
 8009ba8:	3720      	adds	r7, #32
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	08010ba8 	.word	0x08010ba8

08009bb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08c      	sub	sp, #48	; 0x30
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009bc2:	220b      	movs	r2, #11
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f7fe fef4 	bl	80089b4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	d92b      	bls.n	8009c2a <gen_numname+0x76>
		sr = seq;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009bd6:	e022      	b.n	8009c1e <gen_numname+0x6a>
			wc = *lfn++;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	1c9a      	adds	r2, r3, #2
 8009bdc:	607a      	str	r2, [r7, #4]
 8009bde:	881b      	ldrh	r3, [r3, #0]
 8009be0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009be2:	2300      	movs	r3, #0
 8009be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009be6:	e017      	b.n	8009c18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	005a      	lsls	r2, r3, #1
 8009bec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	4413      	add	r3, r2
 8009bf4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009bf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bf8:	085b      	lsrs	r3, r3, #1
 8009bfa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <gen_numname+0x5e>
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009c0c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009c10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	3301      	adds	r3, #1
 8009c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	2b0f      	cmp	r3, #15
 8009c1c:	d9e4      	bls.n	8009be8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1d8      	bne.n	8009bd8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009c2a:	2307      	movs	r3, #7
 8009c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	f003 030f 	and.w	r3, r3, #15
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	3330      	adds	r3, #48	; 0x30
 8009c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c42:	2b39      	cmp	r3, #57	; 0x39
 8009c44:	d904      	bls.n	8009c50 <gen_numname+0x9c>
 8009c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009c4a:	3307      	adds	r3, #7
 8009c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	1e5a      	subs	r2, r3, #1
 8009c54:	62ba      	str	r2, [r7, #40]	; 0x28
 8009c56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009c60:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	091b      	lsrs	r3, r3, #4
 8009c68:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1de      	bne.n	8009c2e <gen_numname+0x7a>
	ns[i] = '~';
 8009c70:	f107 0214 	add.w	r2, r7, #20
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	4413      	add	r3, r2
 8009c78:	227e      	movs	r2, #126	; 0x7e
 8009c7a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c80:	e002      	b.n	8009c88 <gen_numname+0xd4>
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	3301      	adds	r3, #1
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24
 8009c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d205      	bcs.n	8009c9c <gen_numname+0xe8>
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	4413      	add	r3, r2
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	2b20      	cmp	r3, #32
 8009c9a:	d1f2      	bne.n	8009c82 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	2b07      	cmp	r3, #7
 8009ca0:	d808      	bhi.n	8009cb4 <gen_numname+0x100>
 8009ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	62ba      	str	r2, [r7, #40]	; 0x28
 8009ca8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009cac:	4413      	add	r3, r2
 8009cae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009cb2:	e000      	b.n	8009cb6 <gen_numname+0x102>
 8009cb4:	2120      	movs	r1, #32
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	627a      	str	r2, [r7, #36]	; 0x24
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	460a      	mov	r2, r1
 8009cc2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	2b07      	cmp	r3, #7
 8009cc8:	d9e8      	bls.n	8009c9c <gen_numname+0xe8>
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	3730      	adds	r7, #48	; 0x30
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009ce0:	230b      	movs	r3, #11
 8009ce2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	0852      	lsrs	r2, r2, #1
 8009cea:	01db      	lsls	r3, r3, #7
 8009cec:	4313      	orrs	r3, r2
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	1c59      	adds	r1, r3, #1
 8009cf4:	6079      	str	r1, [r7, #4]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	60bb      	str	r3, [r7, #8]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1ed      	bne.n	8009ce4 <sum_sfn+0x10>
	return sum;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b086      	sub	sp, #24
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009d24:	2100      	movs	r1, #0
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fc86 	bl	8009638 <dir_sdi>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009d30:	7dfb      	ldrb	r3, [r7, #23]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <dir_find+0x24>
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	e0a9      	b.n	8009e8e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d3a:	23ff      	movs	r3, #255	; 0xff
 8009d3c:	753b      	strb	r3, [r7, #20]
 8009d3e:	7d3b      	ldrb	r3, [r7, #20]
 8009d40:	757b      	strb	r3, [r7, #21]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d48:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6938      	ldr	r0, [r7, #16]
 8009d52:	f7ff f88f 	bl	8008e74 <move_window>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f040 8090 	bne.w	8009e82 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d6a:	7dbb      	ldrb	r3, [r7, #22]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d102      	bne.n	8009d76 <dir_find+0x60>
 8009d70:	2304      	movs	r3, #4
 8009d72:	75fb      	strb	r3, [r7, #23]
 8009d74:	e08a      	b.n	8009e8c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	330b      	adds	r3, #11
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d82:	73fb      	strb	r3, [r7, #15]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7bfa      	ldrb	r2, [r7, #15]
 8009d88:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009d8a:	7dbb      	ldrb	r3, [r7, #22]
 8009d8c:	2be5      	cmp	r3, #229	; 0xe5
 8009d8e:	d007      	beq.n	8009da0 <dir_find+0x8a>
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	f003 0308 	and.w	r3, r3, #8
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d009      	beq.n	8009dae <dir_find+0x98>
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	2b0f      	cmp	r3, #15
 8009d9e:	d006      	beq.n	8009dae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009da0:	23ff      	movs	r3, #255	; 0xff
 8009da2:	757b      	strb	r3, [r7, #21]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009daa:	631a      	str	r2, [r3, #48]	; 0x30
 8009dac:	e05e      	b.n	8009e6c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
 8009db0:	2b0f      	cmp	r3, #15
 8009db2:	d136      	bne.n	8009e22 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d154      	bne.n	8009e6c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009dc2:	7dbb      	ldrb	r3, [r7, #22]
 8009dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00d      	beq.n	8009de8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	7b5b      	ldrb	r3, [r3, #13]
 8009dd2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009dd4:	7dbb      	ldrb	r3, [r7, #22]
 8009dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dda:	75bb      	strb	r3, [r7, #22]
 8009ddc:	7dbb      	ldrb	r3, [r7, #22]
 8009dde:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	695a      	ldr	r2, [r3, #20]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009de8:	7dba      	ldrb	r2, [r7, #22]
 8009dea:	7d7b      	ldrb	r3, [r7, #21]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d115      	bne.n	8009e1c <dir_find+0x106>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	330d      	adds	r3, #13
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	7d3a      	ldrb	r2, [r7, #20]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d10e      	bne.n	8009e1c <dir_find+0x106>
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7ff fdfb 	bl	8009a04 <cmp_lfn>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <dir_find+0x106>
 8009e14:	7d7b      	ldrb	r3, [r7, #21]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	e000      	b.n	8009e1e <dir_find+0x108>
 8009e1c:	23ff      	movs	r3, #255	; 0xff
 8009e1e:	757b      	strb	r3, [r7, #21]
 8009e20:	e024      	b.n	8009e6c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009e22:	7d7b      	ldrb	r3, [r7, #21]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <dir_find+0x126>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff ff51 	bl	8009cd4 <sum_sfn>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	7d3b      	ldrb	r3, [r7, #20]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d024      	beq.n	8009e86 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <dir_find+0x14a>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a18      	ldr	r0, [r3, #32]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3324      	adds	r3, #36	; 0x24
 8009e52:	220b      	movs	r2, #11
 8009e54:	4619      	mov	r1, r3
 8009e56:	f7fe fde9 	bl	8008a2c <mem_cmp>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d014      	beq.n	8009e8a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009e60:	23ff      	movs	r3, #255	; 0xff
 8009e62:	757b      	strb	r3, [r7, #21]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e6a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff fc6b 	bl	800974a <dir_next>
 8009e74:	4603      	mov	r3, r0
 8009e76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f43f af65 	beq.w	8009d4a <dir_find+0x34>
 8009e80:	e004      	b.n	8009e8c <dir_find+0x176>
		if (res != FR_OK) break;
 8009e82:	bf00      	nop
 8009e84:	e002      	b.n	8009e8c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009e86:	bf00      	nop
 8009e88:	e000      	b.n	8009e8c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009e8a:	bf00      	nop

	return res;
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08c      	sub	sp, #48	; 0x30
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009eac:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <dir_register+0x20>
 8009eb4:	2306      	movs	r3, #6
 8009eb6:	e0e0      	b.n	800a07a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009eb8:	2300      	movs	r3, #0
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebc:	e002      	b.n	8009ec4 <dir_register+0x2c>
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	4413      	add	r3, r2
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1f4      	bne.n	8009ebe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009eda:	f107 030c 	add.w	r3, r7, #12
 8009ede:	220c      	movs	r2, #12
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe fd67 	bl	80089b4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d032      	beq.n	8009f56 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2240      	movs	r2, #64	; 0x40
 8009ef4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009ef8:	2301      	movs	r3, #1
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009efc:	e016      	b.n	8009f2c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	691a      	ldr	r2, [r3, #16]
 8009f08:	f107 010c 	add.w	r1, r7, #12
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	f7ff fe51 	bl	8009bb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff feff 	bl	8009d16 <dir_find>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009f1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	3301      	adds	r3, #1
 8009f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2e:	2b63      	cmp	r3, #99	; 0x63
 8009f30:	d9e5      	bls.n	8009efe <dir_register+0x66>
 8009f32:	e000      	b.n	8009f36 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009f34:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	2b64      	cmp	r3, #100	; 0x64
 8009f3a:	d101      	bne.n	8009f40 <dir_register+0xa8>
 8009f3c:	2307      	movs	r3, #7
 8009f3e:	e09c      	b.n	800a07a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d002      	beq.n	8009f4e <dir_register+0xb6>
 8009f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f4c:	e095      	b.n	800a07a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009f4e:	7dfa      	ldrb	r2, [r7, #23]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	f003 0302 	and.w	r3, r3, #2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d007      	beq.n	8009f70 <dir_register+0xd8>
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	330c      	adds	r3, #12
 8009f64:	4a47      	ldr	r2, [pc, #284]	; (800a084 <dir_register+0x1ec>)
 8009f66:	fba2 2303 	umull	r2, r3, r2, r3
 8009f6a:	089b      	lsrs	r3, r3, #2
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	e000      	b.n	8009f72 <dir_register+0xda>
 8009f70:	2301      	movs	r3, #1
 8009f72:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009f74:	6a39      	ldr	r1, [r7, #32]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff fcbd 	bl	80098f6 <dir_alloc>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d148      	bne.n	800a01c <dir_register+0x184>
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	623b      	str	r3, [r7, #32]
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d042      	beq.n	800a01c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	695a      	ldr	r2, [r3, #20]
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	015b      	lsls	r3, r3, #5
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff fb48 	bl	8009638 <dir_sdi>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d132      	bne.n	800a01c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3324      	adds	r3, #36	; 0x24
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff fe8a 	bl	8009cd4 <sum_sfn>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	69f8      	ldr	r0, [r7, #28]
 8009fcc:	f7fe ff52 	bl	8008e74 <move_window>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d11d      	bne.n	800a01a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	6918      	ldr	r0, [r3, #16]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a19      	ldr	r1, [r3, #32]
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	7efb      	ldrb	r3, [r7, #27]
 8009fec:	f7ff fd7a 	bl	8009ae4 <put_lfn>
				fs->wflag = 1;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff fba6 	bl	800974a <dir_next>
 8009ffe:	4603      	mov	r3, r0
 800a000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d107      	bne.n	800a01c <dir_register+0x184>
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	3b01      	subs	r3, #1
 800a010:	623b      	str	r3, [r7, #32]
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1d5      	bne.n	8009fc4 <dir_register+0x12c>
 800a018:	e000      	b.n	800a01c <dir_register+0x184>
				if (res != FR_OK) break;
 800a01a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a01c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a020:	2b00      	cmp	r3, #0
 800a022:	d128      	bne.n	800a076 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	4619      	mov	r1, r3
 800a02a:	69f8      	ldr	r0, [r7, #28]
 800a02c:	f7fe ff22 	bl	8008e74 <move_window>
 800a030:	4603      	mov	r3, r0
 800a032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d11b      	bne.n	800a076 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	2220      	movs	r2, #32
 800a044:	2100      	movs	r1, #0
 800a046:	4618      	mov	r0, r3
 800a048:	f7fe fcd5 	bl	80089f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a18      	ldr	r0, [r3, #32]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3324      	adds	r3, #36	; 0x24
 800a054:	220b      	movs	r2, #11
 800a056:	4619      	mov	r1, r3
 800a058:	f7fe fcac 	bl	80089b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	330c      	adds	r3, #12
 800a068:	f002 0218 	and.w	r2, r2, #24
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	2201      	movs	r2, #1
 800a074:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3730      	adds	r7, #48	; 0x30
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	4ec4ec4f 	.word	0x4ec4ec4f

0800a088 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08a      	sub	sp, #40	; 0x28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	61ba      	str	r2, [r7, #24]
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b8:	2b1f      	cmp	r3, #31
 800a0ba:	d940      	bls.n	800a13e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a0bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0be:	2b2f      	cmp	r3, #47	; 0x2f
 800a0c0:	d006      	beq.n	800a0d0 <create_name+0x48>
 800a0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0c4:	2b5c      	cmp	r3, #92	; 0x5c
 800a0c6:	d110      	bne.n	800a0ea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a0c8:	e002      	b.n	800a0d0 <create_name+0x48>
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	61bb      	str	r3, [r7, #24]
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b2f      	cmp	r3, #47	; 0x2f
 800a0da:	d0f6      	beq.n	800a0ca <create_name+0x42>
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	2b5c      	cmp	r3, #92	; 0x5c
 800a0e6:	d0f0      	beq.n	800a0ca <create_name+0x42>
			break;
 800a0e8:	e02a      	b.n	800a140 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2bfe      	cmp	r3, #254	; 0xfe
 800a0ee:	d901      	bls.n	800a0f4 <create_name+0x6c>
 800a0f0:	2306      	movs	r3, #6
 800a0f2:	e177      	b.n	800a3e4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a0f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a0fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	4618      	mov	r0, r3
 800a100:	f001 fa4a 	bl	800b598 <ff_convert>
 800a104:	4603      	mov	r3, r0
 800a106:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <create_name+0x8a>
 800a10e:	2306      	movs	r3, #6
 800a110:	e168      	b.n	800a3e4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a114:	2b7f      	cmp	r3, #127	; 0x7f
 800a116:	d809      	bhi.n	800a12c <create_name+0xa4>
 800a118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a11a:	4619      	mov	r1, r3
 800a11c:	48b3      	ldr	r0, [pc, #716]	; (800a3ec <create_name+0x364>)
 800a11e:	f7fe fcac 	bl	8008a7a <chk_chr>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <create_name+0xa4>
 800a128:	2306      	movs	r3, #6
 800a12a:	e15b      	b.n	800a3e4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	617a      	str	r2, [r7, #20]
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a13a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a13c:	e7b4      	b.n	800a0a8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a13e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	441a      	add	r2, r3
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a14a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a14c:	2b1f      	cmp	r3, #31
 800a14e:	d801      	bhi.n	800a154 <create_name+0xcc>
 800a150:	2304      	movs	r3, #4
 800a152:	e000      	b.n	800a156 <create_name+0xce>
 800a154:	2300      	movs	r3, #0
 800a156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a15a:	e011      	b.n	800a180 <create_name+0xf8>
		w = lfn[di - 1];
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a162:	3b01      	subs	r3, #1
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4413      	add	r3, r2
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a170:	2b20      	cmp	r3, #32
 800a172:	d002      	beq.n	800a17a <create_name+0xf2>
 800a174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a176:	2b2e      	cmp	r3, #46	; 0x2e
 800a178:	d106      	bne.n	800a188 <create_name+0x100>
		di--;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1ea      	bne.n	800a15c <create_name+0xd4>
 800a186:	e000      	b.n	800a18a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a188:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	005b      	lsls	r3, r3, #1
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	2200      	movs	r2, #0
 800a194:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <create_name+0x118>
 800a19c:	2306      	movs	r3, #6
 800a19e:	e121      	b.n	800a3e4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3324      	adds	r3, #36	; 0x24
 800a1a4:	220b      	movs	r2, #11
 800a1a6:	2120      	movs	r1, #32
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fe fc24 	bl	80089f6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	e002      	b.n	800a1ba <create_name+0x132>
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	61bb      	str	r3, [r7, #24]
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	2b20      	cmp	r3, #32
 800a1c6:	d0f5      	beq.n	800a1b4 <create_name+0x12c>
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	881b      	ldrh	r3, [r3, #0]
 800a1d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a1d4:	d0ee      	beq.n	800a1b4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <create_name+0x168>
 800a1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1e0:	f043 0303 	orr.w	r3, r3, #3
 800a1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a1e8:	e002      	b.n	800a1f0 <create_name+0x168>
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	617b      	str	r3, [r7, #20]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d009      	beq.n	800a20a <create_name+0x182>
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	2b2e      	cmp	r3, #46	; 0x2e
 800a208:	d1ef      	bne.n	800a1ea <create_name+0x162>

	i = b = 0; ni = 8;
 800a20a:	2300      	movs	r3, #0
 800a20c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a210:	2300      	movs	r3, #0
 800a212:	623b      	str	r3, [r7, #32]
 800a214:	2308      	movs	r3, #8
 800a216:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	61ba      	str	r2, [r7, #24]
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4413      	add	r3, r2
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 8090 	beq.w	800a350 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a232:	2b20      	cmp	r3, #32
 800a234:	d006      	beq.n	800a244 <create_name+0x1bc>
 800a236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a238:	2b2e      	cmp	r3, #46	; 0x2e
 800a23a:	d10a      	bne.n	800a252 <create_name+0x1ca>
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	429a      	cmp	r2, r3
 800a242:	d006      	beq.n	800a252 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a248:	f043 0303 	orr.w	r3, r3, #3
 800a24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a250:	e07d      	b.n	800a34e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a252:	6a3a      	ldr	r2, [r7, #32]
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	429a      	cmp	r2, r3
 800a258:	d203      	bcs.n	800a262 <create_name+0x1da>
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d123      	bne.n	800a2aa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	2b0b      	cmp	r3, #11
 800a266:	d106      	bne.n	800a276 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a26c:	f043 0303 	orr.w	r3, r3, #3
 800a270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a274:	e06f      	b.n	800a356 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d005      	beq.n	800a28a <create_name+0x202>
 800a27e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a282:	f043 0303 	orr.w	r3, r3, #3
 800a286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d860      	bhi.n	800a354 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	61bb      	str	r3, [r7, #24]
 800a296:	2308      	movs	r3, #8
 800a298:	623b      	str	r3, [r7, #32]
 800a29a:	230b      	movs	r3, #11
 800a29c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a29e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a2a8:	e051      	b.n	800a34e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a2aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2ac:	2b7f      	cmp	r3, #127	; 0x7f
 800a2ae:	d914      	bls.n	800a2da <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a2b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 f96f 	bl	800b598 <ff_convert>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <create_name+0x246>
 800a2c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2c6:	3b80      	subs	r3, #128	; 0x80
 800a2c8:	4a49      	ldr	r2, [pc, #292]	; (800a3f0 <create_name+0x368>)
 800a2ca:	5cd3      	ldrb	r3, [r2, r3]
 800a2cc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2d2:	f043 0302 	orr.w	r3, r3, #2
 800a2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <create_name+0x268>
 800a2e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	4843      	ldr	r0, [pc, #268]	; (800a3f4 <create_name+0x36c>)
 800a2e6:	f7fe fbc8 	bl	8008a7a <chk_chr>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d008      	beq.n	800a302 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a2f0:	235f      	movs	r3, #95	; 0x5f
 800a2f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2f8:	f043 0303 	orr.w	r3, r3, #3
 800a2fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a300:	e01b      	b.n	800a33a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a304:	2b40      	cmp	r3, #64	; 0x40
 800a306:	d909      	bls.n	800a31c <create_name+0x294>
 800a308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a30a:	2b5a      	cmp	r3, #90	; 0x5a
 800a30c:	d806      	bhi.n	800a31c <create_name+0x294>
					b |= 2;
 800a30e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a312:	f043 0302 	orr.w	r3, r3, #2
 800a316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a31a:	e00e      	b.n	800a33a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a31c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a31e:	2b60      	cmp	r3, #96	; 0x60
 800a320:	d90b      	bls.n	800a33a <create_name+0x2b2>
 800a322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a324:	2b7a      	cmp	r3, #122	; 0x7a
 800a326:	d808      	bhi.n	800a33a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a32c:	f043 0301 	orr.w	r3, r3, #1
 800a330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a336:	3b20      	subs	r3, #32
 800a338:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	623a      	str	r2, [r7, #32]
 800a340:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a342:	b2d1      	uxtb	r1, r2
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	4413      	add	r3, r2
 800a348:	460a      	mov	r2, r1
 800a34a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a34e:	e763      	b.n	800a218 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a350:	bf00      	nop
 800a352:	e000      	b.n	800a356 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a354:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a35c:	2be5      	cmp	r3, #229	; 0xe5
 800a35e:	d103      	bne.n	800a368 <create_name+0x2e0>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2205      	movs	r2, #5
 800a364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	2b08      	cmp	r3, #8
 800a36c:	d104      	bne.n	800a378 <create_name+0x2f0>
 800a36e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a37c:	f003 030c 	and.w	r3, r3, #12
 800a380:	2b0c      	cmp	r3, #12
 800a382:	d005      	beq.n	800a390 <create_name+0x308>
 800a384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a388:	f003 0303 	and.w	r3, r3, #3
 800a38c:	2b03      	cmp	r3, #3
 800a38e:	d105      	bne.n	800a39c <create_name+0x314>
 800a390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a394:	f043 0302 	orr.w	r3, r3, #2
 800a398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d117      	bne.n	800a3d8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a3a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d105      	bne.n	800a3c0 <create_name+0x338>
 800a3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b8:	f043 0310 	orr.w	r3, r3, #16
 800a3bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3c4:	f003 030c 	and.w	r3, r3, #12
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d105      	bne.n	800a3d8 <create_name+0x350>
 800a3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3d0:	f043 0308 	orr.w	r3, r3, #8
 800a3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a3de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a3e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3728      	adds	r7, #40	; 0x28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	080109f8 	.word	0x080109f8
 800a3f0:	08010b28 	.word	0x08010b28
 800a3f4:	08010a04 	.word	0x08010a04

0800a3f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a40c:	e002      	b.n	800a414 <follow_path+0x1c>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b2f      	cmp	r3, #47	; 0x2f
 800a41a:	d0f8      	beq.n	800a40e <follow_path+0x16>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b5c      	cmp	r3, #92	; 0x5c
 800a422:	d0f4      	beq.n	800a40e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	2200      	movs	r2, #0
 800a428:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b1f      	cmp	r3, #31
 800a430:	d80a      	bhi.n	800a448 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2280      	movs	r2, #128	; 0x80
 800a436:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a43a:	2100      	movs	r1, #0
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff f8fb 	bl	8009638 <dir_sdi>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]
 800a446:	e048      	b.n	800a4da <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a448:	463b      	mov	r3, r7
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff fe1b 	bl	800a088 <create_name>
 800a452:	4603      	mov	r3, r0
 800a454:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d139      	bne.n	800a4d0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff fc5a 	bl	8009d16 <dir_find>
 800a462:	4603      	mov	r3, r0
 800a464:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a46c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00a      	beq.n	800a48a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	2b04      	cmp	r3, #4
 800a478:	d12c      	bne.n	800a4d4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a47a:	7afb      	ldrb	r3, [r7, #11]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d127      	bne.n	800a4d4 <follow_path+0xdc>
 800a484:	2305      	movs	r3, #5
 800a486:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a488:	e024      	b.n	800a4d4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a48a:	7afb      	ldrb	r3, [r7, #11]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	d121      	bne.n	800a4d8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	799b      	ldrb	r3, [r3, #6]
 800a498:	f003 0310 	and.w	r3, r3, #16
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a4a0:	2305      	movs	r3, #5
 800a4a2:	75fb      	strb	r3, [r7, #23]
 800a4a4:	e019      	b.n	800a4da <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	8992      	ldrh	r2, [r2, #12]
 800a4b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4b8:	fb02 f200 	mul.w	r2, r2, r0
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	440b      	add	r3, r1
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f7ff fa5e 	bl	8009984 <ld_clust>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4ce:	e7bb      	b.n	800a448 <follow_path+0x50>
			if (res != FR_OK) break;
 800a4d0:	bf00      	nop
 800a4d2:	e002      	b.n	800a4da <follow_path+0xe2>
				break;
 800a4d4:	bf00      	nop
 800a4d6:	e000      	b.n	800a4da <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4d8:	bf00      	nop
			}
		}
	}

	return res;
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d031      	beq.n	800a55e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	617b      	str	r3, [r7, #20]
 800a500:	e002      	b.n	800a508 <get_ldnumber+0x24>
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	3301      	adds	r3, #1
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b1f      	cmp	r3, #31
 800a50e:	d903      	bls.n	800a518 <get_ldnumber+0x34>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	2b3a      	cmp	r3, #58	; 0x3a
 800a516:	d1f4      	bne.n	800a502 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b3a      	cmp	r3, #58	; 0x3a
 800a51e:	d11c      	bne.n	800a55a <get_ldnumber+0x76>
			tp = *path;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	1c5a      	adds	r2, r3, #1
 800a52a:	60fa      	str	r2, [r7, #12]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	3b30      	subs	r3, #48	; 0x30
 800a530:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2b09      	cmp	r3, #9
 800a536:	d80e      	bhi.n	800a556 <get_ldnumber+0x72>
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d10a      	bne.n	800a556 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d107      	bne.n	800a556 <get_ldnumber+0x72>
					vol = (int)i;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	3301      	adds	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	e002      	b.n	800a560 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a55e:	693b      	ldr	r3, [r7, #16]
}
 800a560:	4618      	mov	r0, r3
 800a562:	371c      	adds	r7, #28
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	70da      	strb	r2, [r3, #3]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a582:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7fe fc74 	bl	8008e74 <move_window>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <check_fs+0x2a>
 800a592:	2304      	movs	r3, #4
 800a594:	e038      	b.n	800a608 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	333c      	adds	r3, #60	; 0x3c
 800a59a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe f986 	bl	80088b0 <ld_word>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d001      	beq.n	800a5b4 <check_fs+0x48>
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e029      	b.n	800a608 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5ba:	2be9      	cmp	r3, #233	; 0xe9
 800a5bc:	d009      	beq.n	800a5d2 <check_fs+0x66>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c4:	2beb      	cmp	r3, #235	; 0xeb
 800a5c6:	d11e      	bne.n	800a606 <check_fs+0x9a>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5ce:	2b90      	cmp	r3, #144	; 0x90
 800a5d0:	d119      	bne.n	800a606 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	333c      	adds	r3, #60	; 0x3c
 800a5d6:	3336      	adds	r3, #54	; 0x36
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fe f981 	bl	80088e0 <ld_dword>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5e4:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <check_fs+0xa4>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d101      	bne.n	800a5ee <check_fs+0x82>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e00c      	b.n	800a608 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	333c      	adds	r3, #60	; 0x3c
 800a5f2:	3352      	adds	r3, #82	; 0x52
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fe f973 	bl	80088e0 <ld_dword>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	4a05      	ldr	r2, [pc, #20]	; (800a614 <check_fs+0xa8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d101      	bne.n	800a606 <check_fs+0x9a>
 800a602:	2300      	movs	r3, #0
 800a604:	e000      	b.n	800a608 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a606:	2302      	movs	r3, #2
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	00544146 	.word	0x00544146
 800a614:	33544146 	.word	0x33544146

0800a618 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b096      	sub	sp, #88	; 0x58
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	4613      	mov	r3, r2
 800a624:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff ff59 	bl	800a4e4 <get_ldnumber>
 800a632:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a636:	2b00      	cmp	r3, #0
 800a638:	da01      	bge.n	800a63e <find_volume+0x26>
 800a63a:	230b      	movs	r3, #11
 800a63c:	e26c      	b.n	800ab18 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a63e:	4aa4      	ldr	r2, [pc, #656]	; (800a8d0 <find_volume+0x2b8>)
 800a640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a646:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <find_volume+0x3a>
 800a64e:	230c      	movs	r3, #12
 800a650:	e262      	b.n	800ab18 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800a652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a654:	f7fe fa2c 	bl	8008ab0 <lock_fs>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <find_volume+0x4a>
 800a65e:	230f      	movs	r3, #15
 800a660:	e25a      	b.n	800ab18 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a666:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	f023 0301 	bic.w	r3, r3, #1
 800a66e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01a      	beq.n	800a6ae <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe f879 	bl	8008774 <disk_status>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10c      	bne.n	800a6ae <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d007      	beq.n	800a6aa <find_volume+0x92>
 800a69a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a69e:	f003 0304 	and.w	r3, r3, #4
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a6a6:	230a      	movs	r3, #10
 800a6a8:	e236      	b.n	800ab18 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e234      	b.n	800ab18 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe f871 	bl	80087a8 <disk_initialize>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a6cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a6d8:	2303      	movs	r3, #3
 800a6da:	e21d      	b.n	800ab18 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d007      	beq.n	800a6f2 <find_volume+0xda>
 800a6e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a6ee:	230a      	movs	r3, #10
 800a6f0:	e212      	b.n	800ab18 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	7858      	ldrb	r0, [r3, #1]
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	2102      	movs	r1, #2
 800a6fe:	f7fe f8b9 	bl	8008874 <disk_ioctl>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <find_volume+0xf4>
 800a708:	2301      	movs	r3, #1
 800a70a:	e205      	b.n	800ab18 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	899b      	ldrh	r3, [r3, #12]
 800a710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a714:	d80d      	bhi.n	800a732 <find_volume+0x11a>
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	899b      	ldrh	r3, [r3, #12]
 800a71a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a71e:	d308      	bcc.n	800a732 <find_volume+0x11a>
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	899b      	ldrh	r3, [r3, #12]
 800a724:	461a      	mov	r2, r3
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	899b      	ldrh	r3, [r3, #12]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	4013      	ands	r3, r2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <find_volume+0x11e>
 800a732:	2301      	movs	r3, #1
 800a734:	e1f0      	b.n	800ab18 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a73a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a73c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a73e:	f7ff ff15 	bl	800a56c <check_fs>
 800a742:	4603      	mov	r3, r0
 800a744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d14b      	bne.n	800a7e8 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a750:	2300      	movs	r3, #0
 800a752:	643b      	str	r3, [r7, #64]	; 0x40
 800a754:	e01f      	b.n	800a796 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a764:	4413      	add	r3, r2
 800a766:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76a:	3304      	adds	r3, #4
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d006      	beq.n	800a780 <find_volume+0x168>
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	3308      	adds	r3, #8
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe f8b2 	bl	80088e0 <ld_dword>
 800a77c:	4602      	mov	r2, r0
 800a77e:	e000      	b.n	800a782 <find_volume+0x16a>
 800a780:	2200      	movs	r2, #0
 800a782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a78a:	440b      	add	r3, r1
 800a78c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a792:	3301      	adds	r3, #1
 800a794:	643b      	str	r3, [r7, #64]	; 0x40
 800a796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a798:	2b03      	cmp	r3, #3
 800a79a:	d9dc      	bls.n	800a756 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a79c:	2300      	movs	r3, #0
 800a79e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <find_volume+0x194>
 800a7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a7ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d005      	beq.n	800a7ce <find_volume+0x1b6>
 800a7c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a7c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7c6:	f7ff fed1 	bl	800a56c <check_fs>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	e000      	b.n	800a7d0 <find_volume+0x1b8>
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a7d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d905      	bls.n	800a7e8 <find_volume+0x1d0>
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7de:	3301      	adds	r3, #1
 800a7e0:	643b      	str	r3, [r7, #64]	; 0x40
 800a7e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d9e1      	bls.n	800a7ac <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a7e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d101      	bne.n	800a7f4 <find_volume+0x1dc>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e191      	b.n	800ab18 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a7f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d901      	bls.n	800a800 <find_volume+0x1e8>
 800a7fc:	230d      	movs	r3, #13
 800a7fe:	e18b      	b.n	800ab18 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	333c      	adds	r3, #60	; 0x3c
 800a804:	330b      	adds	r3, #11
 800a806:	4618      	mov	r0, r3
 800a808:	f7fe f852 	bl	80088b0 <ld_word>
 800a80c:	4603      	mov	r3, r0
 800a80e:	461a      	mov	r2, r3
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	899b      	ldrh	r3, [r3, #12]
 800a814:	429a      	cmp	r2, r3
 800a816:	d001      	beq.n	800a81c <find_volume+0x204>
 800a818:	230d      	movs	r3, #13
 800a81a:	e17d      	b.n	800ab18 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	333c      	adds	r3, #60	; 0x3c
 800a820:	3316      	adds	r3, #22
 800a822:	4618      	mov	r0, r3
 800a824:	f7fe f844 	bl	80088b0 <ld_word>
 800a828:	4603      	mov	r3, r0
 800a82a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d106      	bne.n	800a840 <find_volume+0x228>
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	333c      	adds	r3, #60	; 0x3c
 800a836:	3324      	adds	r3, #36	; 0x24
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe f851 	bl	80088e0 <ld_dword>
 800a83e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a842:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a844:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	789b      	ldrb	r3, [r3, #2]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d005      	beq.n	800a864 <find_volume+0x24c>
 800a858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85a:	789b      	ldrb	r3, [r3, #2]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d001      	beq.n	800a864 <find_volume+0x24c>
 800a860:	230d      	movs	r3, #13
 800a862:	e159      	b.n	800ab18 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	789b      	ldrb	r3, [r3, #2]
 800a868:	461a      	mov	r2, r3
 800a86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a86c:	fb02 f303 	mul.w	r3, r2, r3
 800a870:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a878:	b29a      	uxth	r2, r3
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	895b      	ldrh	r3, [r3, #10]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d008      	beq.n	800a898 <find_volume+0x280>
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	895b      	ldrh	r3, [r3, #10]
 800a88a:	461a      	mov	r2, r3
 800a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88e:	895b      	ldrh	r3, [r3, #10]
 800a890:	3b01      	subs	r3, #1
 800a892:	4013      	ands	r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <find_volume+0x284>
 800a898:	230d      	movs	r3, #13
 800a89a:	e13d      	b.n	800ab18 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	333c      	adds	r3, #60	; 0x3c
 800a8a0:	3311      	adds	r3, #17
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe f804 	bl	80088b0 <ld_word>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	891b      	ldrh	r3, [r3, #8]
 800a8b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b6:	8992      	ldrh	r2, [r2, #12]
 800a8b8:	0952      	lsrs	r2, r2, #5
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8c0:	fb02 f201 	mul.w	r2, r2, r1
 800a8c4:	1a9b      	subs	r3, r3, r2
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <find_volume+0x2bc>
 800a8cc:	230d      	movs	r3, #13
 800a8ce:	e123      	b.n	800ab18 <find_volume+0x500>
 800a8d0:	20000144 	.word	0x20000144

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d6:	333c      	adds	r3, #60	; 0x3c
 800a8d8:	3313      	adds	r3, #19
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fd ffe8 	bl	80088b0 <ld_word>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a8e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <find_volume+0x2e0>
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	333c      	adds	r3, #60	; 0x3c
 800a8ee:	3320      	adds	r3, #32
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fd fff5 	bl	80088e0 <ld_dword>
 800a8f6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fa:	333c      	adds	r3, #60	; 0x3c
 800a8fc:	330e      	adds	r3, #14
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fd ffd6 	bl	80088b0 <ld_word>
 800a904:	4603      	mov	r3, r0
 800a906:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a908:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d101      	bne.n	800a912 <find_volume+0x2fa>
 800a90e:	230d      	movs	r3, #13
 800a910:	e102      	b.n	800ab18 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a912:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a916:	4413      	add	r3, r2
 800a918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a91a:	8911      	ldrh	r1, [r2, #8]
 800a91c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a91e:	8992      	ldrh	r2, [r2, #12]
 800a920:	0952      	lsrs	r2, r2, #5
 800a922:	b292      	uxth	r2, r2
 800a924:	fbb1 f2f2 	udiv	r2, r1, r2
 800a928:	b292      	uxth	r2, r2
 800a92a:	4413      	add	r3, r2
 800a92c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a92e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	429a      	cmp	r2, r3
 800a934:	d201      	bcs.n	800a93a <find_volume+0x322>
 800a936:	230d      	movs	r3, #13
 800a938:	e0ee      	b.n	800ab18 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a93a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a942:	8952      	ldrh	r2, [r2, #10]
 800a944:	fbb3 f3f2 	udiv	r3, r3, r2
 800a948:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <find_volume+0x33c>
 800a950:	230d      	movs	r3, #13
 800a952:	e0e1      	b.n	800ab18 <find_volume+0x500>
		fmt = FS_FAT32;
 800a954:	2303      	movs	r3, #3
 800a956:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a960:	4293      	cmp	r3, r2
 800a962:	d802      	bhi.n	800a96a <find_volume+0x352>
 800a964:	2302      	movs	r3, #2
 800a966:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a970:	4293      	cmp	r3, r2
 800a972:	d802      	bhi.n	800a97a <find_volume+0x362>
 800a974:	2301      	movs	r3, #1
 800a976:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97c:	1c9a      	adds	r2, r3, #2
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a986:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98c:	441a      	add	r2, r3
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a992:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	441a      	add	r2, r3
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800a99c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d11e      	bne.n	800a9e2 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	333c      	adds	r3, #60	; 0x3c
 800a9a8:	332a      	adds	r3, #42	; 0x2a
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fd ff80 	bl	80088b0 <ld_word>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <find_volume+0x3a2>
 800a9b6:	230d      	movs	r3, #13
 800a9b8:	e0ae      	b.n	800ab18 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9bc:	891b      	ldrh	r3, [r3, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <find_volume+0x3ae>
 800a9c2:	230d      	movs	r3, #13
 800a9c4:	e0a8      	b.n	800ab18 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c8:	333c      	adds	r3, #60	; 0x3c
 800a9ca:	332c      	adds	r3, #44	; 0x2c
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fd ff87 	bl	80088e0 <ld_dword>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	647b      	str	r3, [r7, #68]	; 0x44
 800a9e0:	e01f      	b.n	800aa22 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	891b      	ldrh	r3, [r3, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <find_volume+0x3d6>
 800a9ea:	230d      	movs	r3, #13
 800a9ec:	e094      	b.n	800ab18 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f4:	441a      	add	r2, r3
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a9fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d103      	bne.n	800aa0a <find_volume+0x3f2>
 800aa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	e00a      	b.n	800aa20 <find_volume+0x408>
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0c:	6a1a      	ldr	r2, [r3, #32]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	4413      	add	r3, r2
 800aa14:	085a      	lsrs	r2, r3, #1
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aa20:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	899b      	ldrh	r3, [r3, #12]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa2e:	440b      	add	r3, r1
 800aa30:	3b01      	subs	r3, #1
 800aa32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa34:	8989      	ldrh	r1, [r1, #12]
 800aa36:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d201      	bcs.n	800aa42 <find_volume+0x42a>
 800aa3e:	230d      	movs	r3, #13
 800aa40:	e06a      	b.n	800ab18 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa48:	61da      	str	r2, [r3, #28]
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	69da      	ldr	r2, [r3, #28]
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	2280      	movs	r2, #128	; 0x80
 800aa56:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aa58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d149      	bne.n	800aaf4 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	333c      	adds	r3, #60	; 0x3c
 800aa64:	3330      	adds	r3, #48	; 0x30
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd ff22 	bl	80088b0 <ld_word>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d140      	bne.n	800aaf4 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aa72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa74:	3301      	adds	r3, #1
 800aa76:	4619      	mov	r1, r3
 800aa78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa7a:	f7fe f9fb 	bl	8008e74 <move_window>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d137      	bne.n	800aaf4 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	2200      	movs	r2, #0
 800aa88:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	333c      	adds	r3, #60	; 0x3c
 800aa8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fd ff0c 	bl	80088b0 <ld_word>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d127      	bne.n	800aaf4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	333c      	adds	r3, #60	; 0x3c
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fd ff19 	bl	80088e0 <ld_dword>
 800aaae:	4603      	mov	r3, r0
 800aab0:	4a1b      	ldr	r2, [pc, #108]	; (800ab20 <find_volume+0x508>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d11e      	bne.n	800aaf4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab8:	333c      	adds	r3, #60	; 0x3c
 800aaba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fd ff0e 	bl	80088e0 <ld_dword>
 800aac4:	4603      	mov	r3, r0
 800aac6:	4a17      	ldr	r2, [pc, #92]	; (800ab24 <find_volume+0x50c>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d113      	bne.n	800aaf4 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aace:	333c      	adds	r3, #60	; 0x3c
 800aad0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7fd ff03 	bl	80088e0 <ld_dword>
 800aada:	4602      	mov	r2, r0
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	333c      	adds	r3, #60	; 0x3c
 800aae4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7fd fef9 	bl	80088e0 <ld_dword>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf2:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aafa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aafc:	4b0a      	ldr	r3, [pc, #40]	; (800ab28 <find_volume+0x510>)
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	3301      	adds	r3, #1
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	4b08      	ldr	r3, [pc, #32]	; (800ab28 <find_volume+0x510>)
 800ab06:	801a      	strh	r2, [r3, #0]
 800ab08:	4b07      	ldr	r3, [pc, #28]	; (800ab28 <find_volume+0x510>)
 800ab0a:	881a      	ldrh	r2, [r3, #0]
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ab10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab12:	f7fe f947 	bl	8008da4 <clear_lock>
#endif
	return FR_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3758      	adds	r7, #88	; 0x58
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	41615252 	.word	0x41615252
 800ab24:	61417272 	.word	0x61417272
 800ab28:	20000148 	.word	0x20000148

0800ab2c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ab36:	2309      	movs	r3, #9
 800ab38:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d02e      	beq.n	800ab9e <validate+0x72>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d02a      	beq.n	800ab9e <validate+0x72>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d025      	beq.n	800ab9e <validate+0x72>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	889a      	ldrh	r2, [r3, #4]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	88db      	ldrh	r3, [r3, #6]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d11e      	bne.n	800ab9e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fd ffa3 	bl	8008ab0 <lock_fs>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d014      	beq.n	800ab9a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	785b      	ldrb	r3, [r3, #1]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fd fdfc 	bl	8008774 <disk_status>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d102      	bne.n	800ab8c <validate+0x60>
				res = FR_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]
 800ab8a:	e008      	b.n	800ab9e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2100      	movs	r1, #0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fd ffa2 	bl	8008adc <unlock_fs>
 800ab98:	e001      	b.n	800ab9e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ab9a:	230f      	movs	r3, #15
 800ab9c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <validate+0x7e>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	e000      	b.n	800abac <validate+0x80>
 800abaa:	2300      	movs	r3, #0
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	6013      	str	r3, [r2, #0]
	return res;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
	...

0800abbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800abce:	f107 0310 	add.w	r3, r7, #16
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff fc86 	bl	800a4e4 <get_ldnumber>
 800abd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	da01      	bge.n	800abe4 <f_mount+0x28>
 800abe0:	230b      	movs	r3, #11
 800abe2:	e048      	b.n	800ac76 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800abe4:	4a26      	ldr	r2, [pc, #152]	; (800ac80 <f_mount+0xc4>)
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00f      	beq.n	800ac14 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800abf4:	69b8      	ldr	r0, [r7, #24]
 800abf6:	f7fe f8d5 	bl	8008da4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 fdab 	bl	800b75a <ff_del_syncobj>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <f_mount+0x52>
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	e033      	b.n	800ac76 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2200      	movs	r2, #0
 800ac12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00f      	beq.n	800ac3a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3314      	adds	r3, #20
 800ac28:	4619      	mov	r1, r3
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	f000 fd7a 	bl	800b724 <ff_cre_syncobj>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <f_mount+0x7e>
 800ac36:	2302      	movs	r3, #2
 800ac38:	e01d      	b.n	800ac76 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4910      	ldr	r1, [pc, #64]	; (800ac80 <f_mount+0xc4>)
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <f_mount+0x94>
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d001      	beq.n	800ac54 <f_mount+0x98>
 800ac50:	2300      	movs	r3, #0
 800ac52:	e010      	b.n	800ac76 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ac54:	f107 010c 	add.w	r1, r7, #12
 800ac58:	f107 0308 	add.w	r3, r7, #8
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff fcda 	bl	800a618 <find_volume>
 800ac64:	4603      	mov	r3, r0
 800ac66:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7dfa      	ldrb	r2, [r7, #23]
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fd ff34 	bl	8008adc <unlock_fs>
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000144 	.word	0x20000144

0800ac84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b09a      	sub	sp, #104	; 0x68
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <f_open+0x18>
 800ac98:	2309      	movs	r3, #9
 800ac9a:	e1d7      	b.n	800b04c <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aca2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aca4:	79fa      	ldrb	r2, [r7, #7]
 800aca6:	f107 0110 	add.w	r1, r7, #16
 800acaa:	f107 0308 	add.w	r3, r7, #8
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fcb2 	bl	800a618 <find_volume>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800acba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f040 81b4 	bne.w	800b02c <f_open+0x3a8>
		dj.obj.fs = fs;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800acc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800accc:	f000 fd71 	bl	800b7b2 <ff_memalloc>
 800acd0:	65b8      	str	r0, [r7, #88]	; 0x58
 800acd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d106      	bne.n	800ace6 <f_open+0x62>
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2111      	movs	r1, #17
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fd fefd 	bl	8008adc <unlock_fs>
 800ace2:	2311      	movs	r3, #17
 800ace4:	e1b2      	b.n	800b04c <f_open+0x3c8>
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acea:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	f107 0314 	add.w	r3, r7, #20
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff fb7f 	bl	800a3f8 <follow_path>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ad00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d11a      	bne.n	800ad3e <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ad08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad0c:	b25b      	sxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	da03      	bge.n	800ad1a <f_open+0x96>
				res = FR_INVALID_NAME;
 800ad12:	2306      	movs	r3, #6
 800ad14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad18:	e011      	b.n	800ad3e <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	bf14      	ite	ne
 800ad24:	2301      	movne	r3, #1
 800ad26:	2300      	moveq	r3, #0
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f107 0314 	add.w	r3, r7, #20
 800ad30:	4611      	mov	r1, r2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fd feee 	bl	8008b14 <chk_lock>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	f003 031c 	and.w	r3, r3, #28
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d07f      	beq.n	800ae48 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800ad48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d017      	beq.n	800ad80 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ad50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad54:	2b04      	cmp	r3, #4
 800ad56:	d10e      	bne.n	800ad76 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ad58:	f7fd ff38 	bl	8008bcc <enq_lock>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d006      	beq.n	800ad70 <f_open+0xec>
 800ad62:	f107 0314 	add.w	r3, r7, #20
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff f896 	bl	8009e98 <dir_register>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	e000      	b.n	800ad72 <f_open+0xee>
 800ad70:	2312      	movs	r3, #18
 800ad72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ad76:	79fb      	ldrb	r3, [r7, #7]
 800ad78:	f043 0308 	orr.w	r3, r3, #8
 800ad7c:	71fb      	strb	r3, [r7, #7]
 800ad7e:	e010      	b.n	800ada2 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ad80:	7ebb      	ldrb	r3, [r7, #26]
 800ad82:	f003 0311 	and.w	r3, r3, #17
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <f_open+0x10e>
					res = FR_DENIED;
 800ad8a:	2307      	movs	r3, #7
 800ad8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad90:	e007      	b.n	800ada2 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <f_open+0x11e>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ada2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d168      	bne.n	800ae7c <f_open+0x1f8>
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d063      	beq.n	800ae7c <f_open+0x1f8>
				dw = GET_FATTIME();
 800adb4:	f7fd fc80 	bl	80086b8 <get_fattime>
 800adb8:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800adba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adbc:	330e      	adds	r3, #14
 800adbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fd fdcb 	bl	800895c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800adc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc8:	3316      	adds	r3, #22
 800adca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fd fdc5 	bl	800895c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800add2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add4:	330b      	adds	r3, #11
 800add6:	2220      	movs	r2, #32
 800add8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe fdcf 	bl	8009984 <ld_clust>
 800ade6:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800adec:	2200      	movs	r2, #0
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe fde7 	bl	80099c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800adf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf6:	331c      	adds	r3, #28
 800adf8:	2100      	movs	r1, #0
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fd fdae 	bl	800895c <st_dword>
					fs->wflag = 1;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2201      	movs	r2, #1
 800ae04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ae06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d037      	beq.n	800ae7c <f_open+0x1f8>
						dw = fs->winsect;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800ae12:	f107 0314 	add.w	r3, r7, #20
 800ae16:	2200      	movs	r2, #0
 800ae18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fe fad7 	bl	80093ce <remove_chain>
 800ae20:	4603      	mov	r3, r0
 800ae22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800ae26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d126      	bne.n	800ae7c <f_open+0x1f8>
							res = move_window(fs, dw);
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe f81e 	bl	8008e74 <move_window>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae42:	3a01      	subs	r2, #1
 800ae44:	619a      	str	r2, [r3, #24]
 800ae46:	e019      	b.n	800ae7c <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d115      	bne.n	800ae7c <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae50:	7ebb      	ldrb	r3, [r7, #26]
 800ae52:	f003 0310 	and.w	r3, r3, #16
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <f_open+0x1de>
					res = FR_NO_FILE;
 800ae5a:	2304      	movs	r3, #4
 800ae5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ae60:	e00c      	b.n	800ae7c <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	f003 0302 	and.w	r3, r3, #2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d007      	beq.n	800ae7c <f_open+0x1f8>
 800ae6c:	7ebb      	ldrb	r3, [r7, #26]
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d002      	beq.n	800ae7c <f_open+0x1f8>
						res = FR_DENIED;
 800ae76:	2307      	movs	r3, #7
 800ae78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ae7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d128      	bne.n	800aed6 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	f003 0308 	and.w	r3, r3, #8
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <f_open+0x212>
				mode |= FA_MODIFIED;
 800ae8e:	79fb      	ldrb	r3, [r7, #7]
 800ae90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ae9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	f023 0301 	bic.w	r3, r3, #1
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	bf14      	ite	ne
 800aeae:	2301      	movne	r3, #1
 800aeb0:	2300      	moveq	r3, #0
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	f107 0314 	add.w	r3, r7, #20
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fd fea7 	bl	8008c10 <inc_lock>
 800aec2:	4602      	mov	r2, r0
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <f_open+0x252>
 800aed0:	2302      	movs	r3, #2
 800aed2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aed6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f040 80a3 	bne.w	800b026 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aee4:	4611      	mov	r1, r2
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe fd4c 	bl	8009984 <ld_clust>
 800aeec:	4602      	mov	r2, r0
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef4:	331c      	adds	r3, #28
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fd fcf2 	bl	80088e0 <ld_dword>
 800aefc:	4602      	mov	r2, r0
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	88da      	ldrh	r2, [r3, #6]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	79fa      	ldrb	r2, [r7, #7]
 800af1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3330      	adds	r3, #48	; 0x30
 800af32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800af36:	2100      	movs	r1, #0
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fd fd5c 	bl	80089f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800af3e:	79fb      	ldrb	r3, [r7, #7]
 800af40:	f003 0320 	and.w	r3, r3, #32
 800af44:	2b00      	cmp	r3, #0
 800af46:	d06e      	beq.n	800b026 <f_open+0x3a2>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d06a      	beq.n	800b026 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	895b      	ldrh	r3, [r3, #10]
 800af5c:	461a      	mov	r2, r3
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	899b      	ldrh	r3, [r3, #12]
 800af62:	fb03 f302 	mul.w	r3, r3, r2
 800af66:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af74:	e016      	b.n	800afa4 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe f837 	bl	8008fee <get_fat>
 800af80:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800af82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af84:	2b01      	cmp	r3, #1
 800af86:	d802      	bhi.n	800af8e <f_open+0x30a>
 800af88:	2302      	movs	r3, #2
 800af8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800af8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af94:	d102      	bne.n	800af9c <f_open+0x318>
 800af96:	2301      	movs	r3, #1
 800af98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d103      	bne.n	800afb4 <f_open+0x330>
 800afac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d8e0      	bhi.n	800af76 <f_open+0x2f2>
				}
				fp->clust = clst;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800afba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d131      	bne.n	800b026 <f_open+0x3a2>
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	899b      	ldrh	r3, [r3, #12]
 800afc6:	461a      	mov	r2, r3
 800afc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afca:	fbb3 f1f2 	udiv	r1, r3, r2
 800afce:	fb02 f201 	mul.w	r2, r2, r1
 800afd2:	1a9b      	subs	r3, r3, r2
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d026      	beq.n	800b026 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fd ffe7 	bl	8008fb0 <clust2sect>
 800afe2:	64b8      	str	r0, [r7, #72]	; 0x48
 800afe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d103      	bne.n	800aff2 <f_open+0x36e>
						res = FR_INT_ERR;
 800afea:	2302      	movs	r3, #2
 800afec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aff0:	e019      	b.n	800b026 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	899b      	ldrh	r3, [r3, #12]
 800aff6:	461a      	mov	r2, r3
 800aff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800affa:	fbb3 f2f2 	udiv	r2, r3, r2
 800affe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b000:	441a      	add	r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	7858      	ldrb	r0, [r3, #1]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6a1a      	ldr	r2, [r3, #32]
 800b014:	2301      	movs	r3, #1
 800b016:	f7fd fbed 	bl	80087f4 <disk_read>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <f_open+0x3a2>
 800b020:	2301      	movs	r3, #1
 800b022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800b026:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b028:	f000 fbcf 	bl	800b7ca <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b02c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <f_open+0x3b6>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b040:	4611      	mov	r1, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f7fd fd4a 	bl	8008adc <unlock_fs>
 800b048:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3768      	adds	r7, #104	; 0x68
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f107 0214 	add.w	r2, r7, #20
 800b072:	4611      	mov	r1, r2
 800b074:	4618      	mov	r0, r3
 800b076:	f7ff fd59 	bl	800ab2c <validate>
 800b07a:	4603      	mov	r3, r0
 800b07c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b084:	2b00      	cmp	r3, #0
 800b086:	d107      	bne.n	800b098 <f_read+0x44>
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	7d5b      	ldrb	r3, [r3, #21]
 800b08c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b094:	2b00      	cmp	r3, #0
 800b096:	d009      	beq.n	800b0ac <f_read+0x58>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b09e:	4611      	mov	r1, r2
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fd fd1b 	bl	8008adc <unlock_fs>
 800b0a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0aa:	e15d      	b.n	800b368 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	7d1b      	ldrb	r3, [r3, #20]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d106      	bne.n	800b0c6 <f_read+0x72>
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2107      	movs	r1, #7
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fd fd0d 	bl	8008adc <unlock_fs>
 800b0c2:	2307      	movs	r3, #7
 800b0c4:	e150      	b.n	800b368 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	68da      	ldr	r2, [r3, #12]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	f240 813c 	bls.w	800b354 <f_read+0x300>
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b0e0:	e138      	b.n	800b354 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	8992      	ldrh	r2, [r2, #12]
 800b0ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0ee:	fb02 f201 	mul.w	r2, r2, r1
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f040 80f3 	bne.w	800b2e0 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	8992      	ldrh	r2, [r2, #12]
 800b102:	fbb3 f3f2 	udiv	r3, r3, r2
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	8952      	ldrh	r2, [r2, #10]
 800b10a:	3a01      	subs	r2, #1
 800b10c:	4013      	ands	r3, r2
 800b10e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d139      	bne.n	800b18a <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d103      	bne.n	800b126 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	633b      	str	r3, [r7, #48]	; 0x30
 800b124:	e013      	b.n	800b14e <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d007      	beq.n	800b13e <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	4619      	mov	r1, r3
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7fe fa47 	bl	80095c8 <clmt_clust>
 800b13a:	6338      	str	r0, [r7, #48]	; 0x30
 800b13c:	e007      	b.n	800b14e <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	4619      	mov	r1, r3
 800b146:	4610      	mov	r0, r2
 800b148:	f7fd ff51 	bl	8008fee <get_fat>
 800b14c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	2b01      	cmp	r3, #1
 800b152:	d809      	bhi.n	800b168 <f_read+0x114>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2202      	movs	r2, #2
 800b158:	755a      	strb	r2, [r3, #21]
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2102      	movs	r1, #2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fd fcbc 	bl	8008adc <unlock_fs>
 800b164:	2302      	movs	r3, #2
 800b166:	e0ff      	b.n	800b368 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b16e:	d109      	bne.n	800b184 <f_read+0x130>
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	755a      	strb	r2, [r3, #21]
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2101      	movs	r1, #1
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fd fcae 	bl	8008adc <unlock_fs>
 800b180:	2301      	movs	r3, #1
 800b182:	e0f1      	b.n	800b368 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b188:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fd ff0c 	bl	8008fb0 <clust2sect>
 800b198:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d109      	bne.n	800b1b4 <f_read+0x160>
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	755a      	strb	r2, [r3, #21]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2102      	movs	r1, #2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fd fc96 	bl	8008adc <unlock_fs>
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e0d9      	b.n	800b368 <f_read+0x314>
			sect += csect;
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	899b      	ldrh	r3, [r3, #12]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1c8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d046      	beq.n	800b25e <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	4413      	add	r3, r2
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	8952      	ldrh	r2, [r2, #10]
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d905      	bls.n	800b1ea <f_read+0x196>
					cc = fs->csize - csect;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	895b      	ldrh	r3, [r3, #10]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	7858      	ldrb	r0, [r3, #1]
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	69ba      	ldr	r2, [r7, #24]
 800b1f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1f4:	f7fd fafe 	bl	80087f4 <disk_read>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d009      	beq.n	800b212 <f_read+0x1be>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2201      	movs	r2, #1
 800b202:	755a      	strb	r2, [r3, #21]
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2101      	movs	r1, #1
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fd fc67 	bl	8008adc <unlock_fs>
 800b20e:	2301      	movs	r3, #1
 800b210:	e0aa      	b.n	800b368 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	7d1b      	ldrb	r3, [r3, #20]
 800b216:	b25b      	sxtb	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	da18      	bge.n	800b24e <f_read+0x1fa>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6a1a      	ldr	r2, [r3, #32]
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b226:	429a      	cmp	r2, r3
 800b228:	d911      	bls.n	800b24e <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6a1a      	ldr	r2, [r3, #32]
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	8992      	ldrh	r2, [r2, #12]
 800b236:	fb02 f303 	mul.w	r3, r2, r3
 800b23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b23c:	18d0      	adds	r0, r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	899b      	ldrh	r3, [r3, #12]
 800b248:	461a      	mov	r2, r3
 800b24a:	f7fd fbb3 	bl	80089b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	899b      	ldrh	r3, [r3, #12]
 800b252:	461a      	mov	r2, r3
 800b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b256:	fb02 f303 	mul.w	r3, r2, r3
 800b25a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b25c:	e066      	b.n	800b32c <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6a1b      	ldr	r3, [r3, #32]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	d038      	beq.n	800b2da <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	7d1b      	ldrb	r3, [r3, #20]
 800b26c:	b25b      	sxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	da1d      	bge.n	800b2ae <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	7858      	ldrb	r0, [r3, #1]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a1a      	ldr	r2, [r3, #32]
 800b280:	2301      	movs	r3, #1
 800b282:	f7fd fad7 	bl	8008834 <disk_write>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d009      	beq.n	800b2a0 <f_read+0x24c>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2201      	movs	r2, #1
 800b290:	755a      	strb	r2, [r3, #21]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2101      	movs	r1, #1
 800b296:	4618      	mov	r0, r3
 800b298:	f7fd fc20 	bl	8008adc <unlock_fs>
 800b29c:	2301      	movs	r3, #1
 800b29e:	e063      	b.n	800b368 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	7d1b      	ldrb	r3, [r3, #20]
 800b2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	7858      	ldrb	r0, [r3, #1]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	69ba      	ldr	r2, [r7, #24]
 800b2bc:	f7fd fa9a 	bl	80087f4 <disk_read>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d009      	beq.n	800b2da <f_read+0x286>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	755a      	strb	r2, [r3, #21]
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fd fc03 	bl	8008adc <unlock_fs>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e046      	b.n	800b368 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	899b      	ldrh	r3, [r3, #12]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	8992      	ldrh	r2, [r2, #12]
 800b2ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2f2:	fb02 f201 	mul.w	r2, r2, r1
 800b2f6:	1a9b      	subs	r3, r3, r2
 800b2f8:	1ac3      	subs	r3, r0, r3
 800b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b2fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	429a      	cmp	r2, r3
 800b302:	d901      	bls.n	800b308 <f_read+0x2b4>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	8992      	ldrh	r2, [r2, #12]
 800b316:	fbb3 f0f2 	udiv	r0, r3, r2
 800b31a:	fb02 f200 	mul.w	r2, r2, r0
 800b31e:	1a9b      	subs	r3, r3, r2
 800b320:	440b      	add	r3, r1
 800b322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b324:	4619      	mov	r1, r3
 800b326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b328:	f7fd fb44 	bl	80089b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b330:	4413      	add	r3, r2
 800b332:	627b      	str	r3, [r7, #36]	; 0x24
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	699a      	ldr	r2, [r3, #24]
 800b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33a:	441a      	add	r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	619a      	str	r2, [r3, #24]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b346:	441a      	add	r2, r3
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	f47f aec3 	bne.w	800b0e2 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2100      	movs	r1, #0
 800b360:	4618      	mov	r0, r3
 800b362:	f7fd fbbb 	bl	8008adc <unlock_fs>
 800b366:	2300      	movs	r3, #0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3738      	adds	r7, #56	; 0x38
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f107 0208 	add.w	r2, r7, #8
 800b37e:	4611      	mov	r1, r2
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fbd3 	bl	800ab2c <validate>
 800b386:	4603      	mov	r3, r0
 800b388:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d16d      	bne.n	800b46c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	7d1b      	ldrb	r3, [r3, #20]
 800b394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d067      	beq.n	800b46c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	7d1b      	ldrb	r3, [r3, #20]
 800b3a0:	b25b      	sxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	da1a      	bge.n	800b3dc <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	7858      	ldrb	r0, [r3, #1]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a1a      	ldr	r2, [r3, #32]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	f7fd fa3d 	bl	8008834 <disk_write>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d006      	beq.n	800b3ce <f_sync+0x5e>
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fd fb89 	bl	8008adc <unlock_fs>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e055      	b.n	800b47a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	7d1b      	ldrb	r3, [r3, #20]
 800b3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b3dc:	f7fd f96c 	bl	80086b8 <get_fattime>
 800b3e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	f7fd fd42 	bl	8008e74 <move_window>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d138      	bne.n	800b46c <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	330b      	adds	r3, #11
 800b404:	781a      	ldrb	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	330b      	adds	r3, #11
 800b40a:	f042 0220 	orr.w	r2, r2, #32
 800b40e:	b2d2      	uxtb	r2, r2
 800b410:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	461a      	mov	r2, r3
 800b41c:	68f9      	ldr	r1, [r7, #12]
 800b41e:	f7fe fad0 	bl	80099c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f103 021c 	add.w	r2, r3, #28
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f7fd fa94 	bl	800895c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3316      	adds	r3, #22
 800b438:	6939      	ldr	r1, [r7, #16]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fd fa8e 	bl	800895c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3312      	adds	r3, #18
 800b444:	2100      	movs	r1, #0
 800b446:	4618      	mov	r0, r3
 800b448:	f7fd fa6d 	bl	8008926 <st_word>
					fs->wflag = 1;
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2201      	movs	r2, #1
 800b450:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	4618      	mov	r0, r3
 800b456:	f7fd fd3b 	bl	8008ed0 <sync_fs>
 800b45a:	4603      	mov	r3, r0
 800b45c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	7d1b      	ldrb	r3, [r3, #20]
 800b462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b466:	b2da      	uxtb	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	7dfa      	ldrb	r2, [r7, #23]
 800b470:	4611      	mov	r1, r2
 800b472:	4618      	mov	r0, r3
 800b474:	f7fd fb32 	bl	8008adc <unlock_fs>
 800b478:	7dfb      	ldrb	r3, [r7, #23]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b084      	sub	sp, #16
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff ff70 	bl	800b370 <f_sync>
 800b490:	4603      	mov	r3, r0
 800b492:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d11d      	bne.n	800b4d6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f107 0208 	add.w	r2, r7, #8
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff fb42 	bl	800ab2c <validate>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d111      	bne.n	800b4d6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	691b      	ldr	r3, [r3, #16]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fd fc38 	bl	8008d2c <dec_lock>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d102      	bne.n	800b4cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fd fb03 	bl	8008adc <unlock_fs>
#endif
		}
	}
	return res;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b4f6:	4b1f      	ldr	r3, [pc, #124]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b4f8:	7a5b      	ldrb	r3, [r3, #9]
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d131      	bne.n	800b564 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b500:	4b1c      	ldr	r3, [pc, #112]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b502:	7a5b      	ldrb	r3, [r3, #9]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	461a      	mov	r2, r3
 800b508:	4b1a      	ldr	r3, [pc, #104]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b50a:	2100      	movs	r1, #0
 800b50c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b50e:	4b19      	ldr	r3, [pc, #100]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b510:	7a5b      	ldrb	r3, [r3, #9]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	4a17      	ldr	r2, [pc, #92]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	4413      	add	r3, r2
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b51e:	4b15      	ldr	r3, [pc, #84]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b520:	7a5b      	ldrb	r3, [r3, #9]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	461a      	mov	r2, r3
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b528:	4413      	add	r3, r2
 800b52a:	79fa      	ldrb	r2, [r7, #7]
 800b52c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b52e:	4b11      	ldr	r3, [pc, #68]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b530:	7a5b      	ldrb	r3, [r3, #9]
 800b532:	b2db      	uxtb	r3, r3
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	b2d1      	uxtb	r1, r2
 800b538:	4a0e      	ldr	r2, [pc, #56]	; (800b574 <FATFS_LinkDriverEx+0x94>)
 800b53a:	7251      	strb	r1, [r2, #9]
 800b53c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b53e:	7dbb      	ldrb	r3, [r7, #22]
 800b540:	3330      	adds	r3, #48	; 0x30
 800b542:	b2da      	uxtb	r2, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	3301      	adds	r3, #1
 800b54c:	223a      	movs	r2, #58	; 0x3a
 800b54e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	3302      	adds	r3, #2
 800b554:	222f      	movs	r2, #47	; 0x2f
 800b556:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	3303      	adds	r3, #3
 800b55c:	2200      	movs	r2, #0
 800b55e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b564:	7dfb      	ldrb	r3, [r7, #23]
}
 800b566:	4618      	mov	r0, r3
 800b568:	371c      	adds	r7, #28
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	2000016c 	.word	0x2000016c

0800b578 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b582:	2200      	movs	r2, #0
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff ffaa 	bl	800b4e0 <FATFS_LinkDriverEx>
 800b58c:	4603      	mov	r3, r0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	6039      	str	r1, [r7, #0]
 800b5a2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b5a4:	88fb      	ldrh	r3, [r7, #6]
 800b5a6:	2b7f      	cmp	r3, #127	; 0x7f
 800b5a8:	d802      	bhi.n	800b5b0 <ff_convert+0x18>
		c = chr;
 800b5aa:	88fb      	ldrh	r3, [r7, #6]
 800b5ac:	81fb      	strh	r3, [r7, #14]
 800b5ae:	e025      	b.n	800b5fc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00b      	beq.n	800b5ce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b5b6:	88fb      	ldrh	r3, [r7, #6]
 800b5b8:	2bff      	cmp	r3, #255	; 0xff
 800b5ba:	d805      	bhi.n	800b5c8 <ff_convert+0x30>
 800b5bc:	88fb      	ldrh	r3, [r7, #6]
 800b5be:	3b80      	subs	r3, #128	; 0x80
 800b5c0:	4a12      	ldr	r2, [pc, #72]	; (800b60c <ff_convert+0x74>)
 800b5c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5c6:	e000      	b.n	800b5ca <ff_convert+0x32>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	81fb      	strh	r3, [r7, #14]
 800b5cc:	e016      	b.n	800b5fc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	81fb      	strh	r3, [r7, #14]
 800b5d2:	e009      	b.n	800b5e8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b5d4:	89fb      	ldrh	r3, [r7, #14]
 800b5d6:	4a0d      	ldr	r2, [pc, #52]	; (800b60c <ff_convert+0x74>)
 800b5d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5dc:	88fa      	ldrh	r2, [r7, #6]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d006      	beq.n	800b5f0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b5e2:	89fb      	ldrh	r3, [r7, #14]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	81fb      	strh	r3, [r7, #14]
 800b5e8:	89fb      	ldrh	r3, [r7, #14]
 800b5ea:	2b7f      	cmp	r3, #127	; 0x7f
 800b5ec:	d9f2      	bls.n	800b5d4 <ff_convert+0x3c>
 800b5ee:	e000      	b.n	800b5f2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b5f0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b5f2:	89fb      	ldrh	r3, [r7, #14]
 800b5f4:	3380      	adds	r3, #128	; 0x80
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b5fc:	89fb      	ldrh	r3, [r7, #14]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	08010bb8 	.word	0x08010bb8

0800b610 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b61a:	88fb      	ldrh	r3, [r7, #6]
 800b61c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b620:	d201      	bcs.n	800b626 <ff_wtoupper+0x16>
 800b622:	4b3e      	ldr	r3, [pc, #248]	; (800b71c <ff_wtoupper+0x10c>)
 800b624:	e000      	b.n	800b628 <ff_wtoupper+0x18>
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <ff_wtoupper+0x110>)
 800b628:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	1c9a      	adds	r2, r3, #2
 800b62e:	617a      	str	r2, [r7, #20]
 800b630:	881b      	ldrh	r3, [r3, #0]
 800b632:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b634:	8a7b      	ldrh	r3, [r7, #18]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d068      	beq.n	800b70c <ff_wtoupper+0xfc>
 800b63a:	88fa      	ldrh	r2, [r7, #6]
 800b63c:	8a7b      	ldrh	r3, [r7, #18]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d364      	bcc.n	800b70c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	1c9a      	adds	r2, r3, #2
 800b646:	617a      	str	r2, [r7, #20]
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	823b      	strh	r3, [r7, #16]
 800b64c:	8a3b      	ldrh	r3, [r7, #16]
 800b64e:	0a1b      	lsrs	r3, r3, #8
 800b650:	81fb      	strh	r3, [r7, #14]
 800b652:	8a3b      	ldrh	r3, [r7, #16]
 800b654:	b2db      	uxtb	r3, r3
 800b656:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b658:	88fa      	ldrh	r2, [r7, #6]
 800b65a:	8a79      	ldrh	r1, [r7, #18]
 800b65c:	8a3b      	ldrh	r3, [r7, #16]
 800b65e:	440b      	add	r3, r1
 800b660:	429a      	cmp	r2, r3
 800b662:	da49      	bge.n	800b6f8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b664:	89fb      	ldrh	r3, [r7, #14]
 800b666:	2b08      	cmp	r3, #8
 800b668:	d84f      	bhi.n	800b70a <ff_wtoupper+0xfa>
 800b66a:	a201      	add	r2, pc, #4	; (adr r2, 800b670 <ff_wtoupper+0x60>)
 800b66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b670:	0800b695 	.word	0x0800b695
 800b674:	0800b6a7 	.word	0x0800b6a7
 800b678:	0800b6bd 	.word	0x0800b6bd
 800b67c:	0800b6c5 	.word	0x0800b6c5
 800b680:	0800b6cd 	.word	0x0800b6cd
 800b684:	0800b6d5 	.word	0x0800b6d5
 800b688:	0800b6dd 	.word	0x0800b6dd
 800b68c:	0800b6e5 	.word	0x0800b6e5
 800b690:	0800b6ed 	.word	0x0800b6ed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b694:	88fa      	ldrh	r2, [r7, #6]
 800b696:	8a7b      	ldrh	r3, [r7, #18]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	005b      	lsls	r3, r3, #1
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	4413      	add	r3, r2
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	80fb      	strh	r3, [r7, #6]
 800b6a4:	e027      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b6a6:	88fa      	ldrh	r2, [r7, #6]
 800b6a8:	8a7b      	ldrh	r3, [r7, #18]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	88fa      	ldrh	r2, [r7, #6]
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	80fb      	strh	r3, [r7, #6]
 800b6ba:	e01c      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b6bc:	88fb      	ldrh	r3, [r7, #6]
 800b6be:	3b10      	subs	r3, #16
 800b6c0:	80fb      	strh	r3, [r7, #6]
 800b6c2:	e018      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b6c4:	88fb      	ldrh	r3, [r7, #6]
 800b6c6:	3b20      	subs	r3, #32
 800b6c8:	80fb      	strh	r3, [r7, #6]
 800b6ca:	e014      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b6cc:	88fb      	ldrh	r3, [r7, #6]
 800b6ce:	3b30      	subs	r3, #48	; 0x30
 800b6d0:	80fb      	strh	r3, [r7, #6]
 800b6d2:	e010      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b6d4:	88fb      	ldrh	r3, [r7, #6]
 800b6d6:	3b1a      	subs	r3, #26
 800b6d8:	80fb      	strh	r3, [r7, #6]
 800b6da:	e00c      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b6dc:	88fb      	ldrh	r3, [r7, #6]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	80fb      	strh	r3, [r7, #6]
 800b6e2:	e008      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b6e4:	88fb      	ldrh	r3, [r7, #6]
 800b6e6:	3b50      	subs	r3, #80	; 0x50
 800b6e8:	80fb      	strh	r3, [r7, #6]
 800b6ea:	e004      	b.n	800b6f6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b6ec:	88fb      	ldrh	r3, [r7, #6]
 800b6ee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b6f2:	80fb      	strh	r3, [r7, #6]
 800b6f4:	bf00      	nop
			}
			break;
 800b6f6:	e008      	b.n	800b70a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b6f8:	89fb      	ldrh	r3, [r7, #14]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d195      	bne.n	800b62a <ff_wtoupper+0x1a>
 800b6fe:	8a3b      	ldrh	r3, [r7, #16]
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4413      	add	r3, r2
 800b706:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b708:	e78f      	b.n	800b62a <ff_wtoupper+0x1a>
			break;
 800b70a:	bf00      	nop
	}

	return chr;
 800b70c:	88fb      	ldrh	r3, [r7, #6]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	371c      	adds	r7, #28
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	08010cb8 	.word	0x08010cb8
 800b720:	08010eac 	.word	0x08010eac

0800b724 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	6039      	str	r1, [r7, #0]
 800b72e:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800b730:	2200      	movs	r2, #0
 800b732:	2101      	movs	r1, #1
 800b734:	2001      	movs	r0, #1
 800b736:	f000 fab9 	bl	800bcac <osSemaphoreNew>
 800b73a:	4602      	mov	r2, r0
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	60fb      	str	r3, [r7, #12]

    return ret;
 800b750:	68fb      	ldr	r3, [r7, #12]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b082      	sub	sp, #8
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fbc2 	bl	800beec <osSemaphoreDelete>
#endif
    return 1;
 800b768:	2301      	movs	r3, #1
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}

0800b772 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b77e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fb1c 	bl	800bdc0 <osSemaphoreAcquire>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800b78e:	2301      	movs	r3, #1
 800b790:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b792:	68fb      	ldr	r3, [r7, #12]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fb5d 	bl	800be64 <osSemaphoreRelease>
#endif
}
 800b7aa:	bf00      	nop
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f003 fd9c 	bl	800f2f8 <pvPortMalloc>
 800b7c0:	4603      	mov	r3, r0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f003 fe5c 	bl	800f490 <vPortFree>
}
 800b7d8:	bf00      	nop
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <__NVIC_SetPriority>:
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	6039      	str	r1, [r7, #0]
 800b7ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	db0a      	blt.n	800b80a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	490c      	ldr	r1, [pc, #48]	; (800b82c <__NVIC_SetPriority+0x4c>)
 800b7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7fe:	0112      	lsls	r2, r2, #4
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	440b      	add	r3, r1
 800b804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b808:	e00a      	b.n	800b820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	4908      	ldr	r1, [pc, #32]	; (800b830 <__NVIC_SetPriority+0x50>)
 800b810:	79fb      	ldrb	r3, [r7, #7]
 800b812:	f003 030f 	and.w	r3, r3, #15
 800b816:	3b04      	subs	r3, #4
 800b818:	0112      	lsls	r2, r2, #4
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	440b      	add	r3, r1
 800b81e:	761a      	strb	r2, [r3, #24]
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	e000e100 	.word	0xe000e100
 800b830:	e000ed00 	.word	0xe000ed00

0800b834 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b834:	b580      	push	{r7, lr}
 800b836:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <SysTick_Handler+0x1c>)
 800b83a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b83c:	f002 fdaa 	bl	800e394 <xTaskGetSchedulerState>
 800b840:	4603      	mov	r3, r0
 800b842:	2b01      	cmp	r3, #1
 800b844:	d001      	beq.n	800b84a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b846:	f003 fcc7 	bl	800f1d8 <xPortSysTickHandler>
  }
}
 800b84a:	bf00      	nop
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	e000e010 	.word	0xe000e010

0800b854 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b858:	2100      	movs	r1, #0
 800b85a:	f06f 0004 	mvn.w	r0, #4
 800b85e:	f7ff ffbf 	bl	800b7e0 <__NVIC_SetPriority>
#endif
}
 800b862:	bf00      	nop
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b86e:	f3ef 8305 	mrs	r3, IPSR
 800b872:	603b      	str	r3, [r7, #0]
  return(result);
 800b874:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b87a:	f06f 0305 	mvn.w	r3, #5
 800b87e:	607b      	str	r3, [r7, #4]
 800b880:	e00c      	b.n	800b89c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b882:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <osKernelInitialize+0x44>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d105      	bne.n	800b896 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b88a:	4b08      	ldr	r3, [pc, #32]	; (800b8ac <osKernelInitialize+0x44>)
 800b88c:	2201      	movs	r2, #1
 800b88e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b890:	2300      	movs	r3, #0
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	e002      	b.n	800b89c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b89a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b89c:	687b      	ldr	r3, [r7, #4]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	20000178 	.word	0x20000178

0800b8b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b6:	f3ef 8305 	mrs	r3, IPSR
 800b8ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b8bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <osKernelStart+0x1a>
    stat = osErrorISR;
 800b8c2:	f06f 0305 	mvn.w	r3, #5
 800b8c6:	607b      	str	r3, [r7, #4]
 800b8c8:	e010      	b.n	800b8ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b8ca:	4b0b      	ldr	r3, [pc, #44]	; (800b8f8 <osKernelStart+0x48>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d109      	bne.n	800b8e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b8d2:	f7ff ffbf 	bl	800b854 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b8d6:	4b08      	ldr	r3, [pc, #32]	; (800b8f8 <osKernelStart+0x48>)
 800b8d8:	2202      	movs	r2, #2
 800b8da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b8dc:	f002 f862 	bl	800d9a4 <vTaskStartScheduler>
      stat = osOK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	607b      	str	r3, [r7, #4]
 800b8e4:	e002      	b.n	800b8ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8ec:	687b      	ldr	r3, [r7, #4]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000178 	.word	0x20000178

0800b8fc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b902:	f3ef 8305 	mrs	r3, IPSR
 800b906:	603b      	str	r3, [r7, #0]
  return(result);
 800b908:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b90e:	f002 f96b 	bl	800dbe8 <xTaskGetTickCountFromISR>
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	e002      	b.n	800b91c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b916:	f002 f957 	bl	800dbc8 <xTaskGetTickCount>
 800b91a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b91c:	687b      	ldr	r3, [r7, #4]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b926:	b580      	push	{r7, lr}
 800b928:	b08e      	sub	sp, #56	; 0x38
 800b92a:	af04      	add	r7, sp, #16
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b936:	f3ef 8305 	mrs	r3, IPSR
 800b93a:	617b      	str	r3, [r7, #20]
  return(result);
 800b93c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d17e      	bne.n	800ba40 <osThreadNew+0x11a>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d07b      	beq.n	800ba40 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b948:	2380      	movs	r3, #128	; 0x80
 800b94a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b94c:	2318      	movs	r3, #24
 800b94e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b950:	2300      	movs	r3, #0
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b958:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d045      	beq.n	800b9ec <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <osThreadNew+0x48>
        name = attr->name;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d002      	beq.n	800b97c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d008      	beq.n	800b994 <osThreadNew+0x6e>
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	2b38      	cmp	r3, #56	; 0x38
 800b986:	d805      	bhi.n	800b994 <osThreadNew+0x6e>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f003 0301 	and.w	r3, r3, #1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <osThreadNew+0x72>
        return (NULL);
 800b994:	2300      	movs	r3, #0
 800b996:	e054      	b.n	800ba42 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	089b      	lsrs	r3, r3, #2
 800b9a6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d00e      	beq.n	800b9ce <osThreadNew+0xa8>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	2b5b      	cmp	r3, #91	; 0x5b
 800b9b6:	d90a      	bls.n	800b9ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d006      	beq.n	800b9ce <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <osThreadNew+0xa8>
        mem = 1;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	61bb      	str	r3, [r7, #24]
 800b9cc:	e010      	b.n	800b9f0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d10c      	bne.n	800b9f0 <osThreadNew+0xca>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d108      	bne.n	800b9f0 <osThreadNew+0xca>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d104      	bne.n	800b9f0 <osThreadNew+0xca>
          mem = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	61bb      	str	r3, [r7, #24]
 800b9ea:	e001      	b.n	800b9f0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d110      	bne.n	800ba18 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9fe:	9202      	str	r2, [sp, #8]
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6a3a      	ldr	r2, [r7, #32]
 800ba0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f001 fd75 	bl	800d4fc <xTaskCreateStatic>
 800ba12:	4603      	mov	r3, r0
 800ba14:	613b      	str	r3, [r7, #16]
 800ba16:	e013      	b.n	800ba40 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d110      	bne.n	800ba40 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ba1e:	6a3b      	ldr	r3, [r7, #32]
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	f107 0310 	add.w	r3, r7, #16
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f001 fdc0 	bl	800d5b6 <xTaskCreate>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d001      	beq.n	800ba40 <osThreadNew+0x11a>
            hTask = NULL;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba40:	693b      	ldr	r3, [r7, #16]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3728      	adds	r7, #40	; 0x28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba52:	f3ef 8305 	mrs	r3, IPSR
 800ba56:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <osDelay+0x1c>
    stat = osErrorISR;
 800ba5e:	f06f 0305 	mvn.w	r3, #5
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e007      	b.n	800ba76 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 ff63 	bl	800d93c <vTaskDelay>
    }
  }

  return (stat);
 800ba76:	68fb      	ldr	r3, [r7, #12]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba88:	f3ef 8305 	mrs	r3, IPSR
 800ba8c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d003      	beq.n	800ba9c <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ba94:	f06f 0305 	mvn.w	r3, #5
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	e019      	b.n	800bad0 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800baa0:	f002 f892 	bl	800dbc8 <xTaskGetTickCount>
 800baa4:	4603      	mov	r3, r0
 800baa6:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d009      	beq.n	800baca <osDelayUntil+0x4a>
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	db06      	blt.n	800baca <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800babc:	f107 0308 	add.w	r3, r7, #8
 800bac0:	6939      	ldr	r1, [r7, #16]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f001 febc 	bl	800d840 <vTaskDelayUntil>
 800bac8:	e002      	b.n	800bad0 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800baca:	f06f 0303 	mvn.w	r3, #3
 800bace:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bad0:	697b      	ldr	r3, [r7, #20]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3718      	adds	r7, #24
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800bada:	b580      	push	{r7, lr}
 800badc:	b086      	sub	sp, #24
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae6:	f3ef 8305 	mrs	r3, IPSR
 800baea:	60fb      	str	r3, [r7, #12]
  return(result);
 800baec:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d12d      	bne.n	800bb4e <osEventFlagsNew+0x74>
    mem = -1;
 800baf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baf6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d015      	beq.n	800bb2a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d006      	beq.n	800bb14 <osEventFlagsNew+0x3a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	2b1f      	cmp	r3, #31
 800bb0c:	d902      	bls.n	800bb14 <osEventFlagsNew+0x3a>
        mem = 1;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	e00c      	b.n	800bb2e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d108      	bne.n	800bb2e <osEventFlagsNew+0x54>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <osEventFlagsNew+0x54>
          mem = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	613b      	str	r3, [r7, #16]
 800bb28:	e001      	b.n	800bb2e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d106      	bne.n	800bb42 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 fa2f 	bl	800bf9c <xEventGroupCreateStatic>
 800bb3e:	6178      	str	r0, [r7, #20]
 800bb40:	e005      	b.n	800bb4e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d102      	bne.n	800bb4e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800bb48:	f000 fa5f 	bl	800c00a <xEventGroupCreate>
 800bb4c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800bb4e:	697b      	ldr	r3, [r7, #20]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <osEventFlagsSet+0x1e>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800bb76:	f06f 0303 	mvn.w	r3, #3
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	e028      	b.n	800bbd0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb7e:	f3ef 8305 	mrs	r3, IPSR
 800bb82:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb84:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d01d      	beq.n	800bbc6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bb8e:	f107 0308 	add.w	r3, r7, #8
 800bb92:	461a      	mov	r2, r3
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6938      	ldr	r0, [r7, #16]
 800bb98:	f000 fbda 	bl	800c350 <xEventGroupSetBitsFromISR>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d103      	bne.n	800bbaa <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800bba2:	f06f 0302 	mvn.w	r3, #2
 800bba6:	617b      	str	r3, [r7, #20]
 800bba8:	e012      	b.n	800bbd0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00d      	beq.n	800bbd0 <osEventFlagsSet+0x78>
 800bbb4:	4b09      	ldr	r3, [pc, #36]	; (800bbdc <osEventFlagsSet+0x84>)
 800bbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	e004      	b.n	800bbd0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800bbc6:	6839      	ldr	r1, [r7, #0]
 800bbc8:	6938      	ldr	r0, [r7, #16]
 800bbca:	f000 fb07 	bl	800c1dc <xEventGroupSetBits>
 800bbce:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800bbd0:	697b      	ldr	r3, [r7, #20]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	e000ed04 	.word	0xe000ed04

0800bbe0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b08c      	sub	sp, #48	; 0x30
 800bbe4:	af02      	add	r7, sp, #8
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	60b9      	str	r1, [r7, #8]
 800bbea:	607a      	str	r2, [r7, #4]
 800bbec:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d004      	beq.n	800bc02 <osEventFlagsWait+0x22>
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800bc02:	f06f 0303 	mvn.w	r3, #3
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	e04b      	b.n	800bca2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc0a:	f3ef 8305 	mrs	r3, IPSR
 800bc0e:	617b      	str	r3, [r7, #20]
  return(result);
 800bc10:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d003      	beq.n	800bc1e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800bc16:	f06f 0305 	mvn.w	r3, #5
 800bc1a:	61fb      	str	r3, [r7, #28]
 800bc1c:	e041      	b.n	800bca2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc2c:	e001      	b.n	800bc32 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	623b      	str	r3, [r7, #32]
 800bc40:	e001      	b.n	800bc46 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800bc42:	2301      	movs	r3, #1
 800bc44:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4c:	6a3a      	ldr	r2, [r7, #32]
 800bc4e:	68b9      	ldr	r1, [r7, #8]
 800bc50:	69b8      	ldr	r0, [r7, #24]
 800bc52:	f000 f9f5 	bl	800c040 <xEventGroupWaitBits>
 800bc56:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d010      	beq.n	800bc84 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	4013      	ands	r3, r2
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d019      	beq.n	800bca2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800bc74:	f06f 0301 	mvn.w	r3, #1
 800bc78:	61fb      	str	r3, [r7, #28]
 800bc7a:	e012      	b.n	800bca2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bc7c:	f06f 0302 	mvn.w	r3, #2
 800bc80:	61fb      	str	r3, [r7, #28]
 800bc82:	e00e      	b.n	800bca2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800bc84:	68ba      	ldr	r2, [r7, #8]
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	4013      	ands	r3, r2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d109      	bne.n	800bca2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d003      	beq.n	800bc9c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800bc94:	f06f 0301 	mvn.w	r3, #1
 800bc98:	61fb      	str	r3, [r7, #28]
 800bc9a:	e002      	b.n	800bca2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bc9c:	f06f 0302 	mvn.w	r3, #2
 800bca0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800bca2:	69fb      	ldr	r3, [r7, #28]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3728      	adds	r7, #40	; 0x28
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08a      	sub	sp, #40	; 0x28
 800bcb0:	af02      	add	r7, sp, #8
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcbc:	f3ef 8305 	mrs	r3, IPSR
 800bcc0:	613b      	str	r3, [r7, #16]
  return(result);
 800bcc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d175      	bne.n	800bdb4 <osSemaphoreNew+0x108>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d072      	beq.n	800bdb4 <osSemaphoreNew+0x108>
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d86e      	bhi.n	800bdb4 <osSemaphoreNew+0x108>
    mem = -1;
 800bcd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d015      	beq.n	800bd0e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d006      	beq.n	800bcf8 <osSemaphoreNew+0x4c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	2b4f      	cmp	r3, #79	; 0x4f
 800bcf0:	d902      	bls.n	800bcf8 <osSemaphoreNew+0x4c>
        mem = 1;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	61bb      	str	r3, [r7, #24]
 800bcf6:	e00c      	b.n	800bd12 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d108      	bne.n	800bd12 <osSemaphoreNew+0x66>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d104      	bne.n	800bd12 <osSemaphoreNew+0x66>
          mem = 0;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	61bb      	str	r3, [r7, #24]
 800bd0c:	e001      	b.n	800bd12 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd18:	d04c      	beq.n	800bdb4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d128      	bne.n	800bd72 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d10a      	bne.n	800bd3c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	2203      	movs	r2, #3
 800bd2c:	9200      	str	r2, [sp, #0]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2100      	movs	r1, #0
 800bd32:	2001      	movs	r0, #1
 800bd34:	f000 fc3c 	bl	800c5b0 <xQueueGenericCreateStatic>
 800bd38:	61f8      	str	r0, [r7, #28]
 800bd3a:	e005      	b.n	800bd48 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	2100      	movs	r1, #0
 800bd40:	2001      	movs	r0, #1
 800bd42:	f000 fcad 	bl	800c6a0 <xQueueGenericCreate>
 800bd46:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d022      	beq.n	800bd94 <osSemaphoreNew+0xe8>
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d01f      	beq.n	800bd94 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bd54:	2300      	movs	r3, #0
 800bd56:	2200      	movs	r2, #0
 800bd58:	2100      	movs	r1, #0
 800bd5a:	69f8      	ldr	r0, [r7, #28]
 800bd5c:	f000 fd68 	bl	800c830 <xQueueGenericSend>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d016      	beq.n	800bd94 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bd66:	69f8      	ldr	r0, [r7, #28]
 800bd68:	f001 f9f4 	bl	800d154 <vQueueDelete>
            hSemaphore = NULL;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	61fb      	str	r3, [r7, #28]
 800bd70:	e010      	b.n	800bd94 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d108      	bne.n	800bd8a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f000 fcea 	bl	800c75a <xQueueCreateCountingSemaphoreStatic>
 800bd86:	61f8      	str	r0, [r7, #28]
 800bd88:	e004      	b.n	800bd94 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bd8a:	68b9      	ldr	r1, [r7, #8]
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f000 fd1b 	bl	800c7c8 <xQueueCreateCountingSemaphore>
 800bd92:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00c      	beq.n	800bdb4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	617b      	str	r3, [r7, #20]
 800bda6:	e001      	b.n	800bdac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bdac:	6979      	ldr	r1, [r7, #20]
 800bdae:	69f8      	ldr	r0, [r7, #28]
 800bdb0:	f001 fb1c 	bl	800d3ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bdb4:	69fb      	ldr	r3, [r7, #28]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3720      	adds	r7, #32
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
	...

0800bdc0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d103      	bne.n	800bde0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bdd8:	f06f 0303 	mvn.w	r3, #3
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	e039      	b.n	800be54 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bde0:	f3ef 8305 	mrs	r3, IPSR
 800bde4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bde6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d022      	beq.n	800be32 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800bdf2:	f06f 0303 	mvn.w	r3, #3
 800bdf6:	617b      	str	r3, [r7, #20]
 800bdf8:	e02c      	b.n	800be54 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bdfe:	f107 0308 	add.w	r3, r7, #8
 800be02:	461a      	mov	r2, r3
 800be04:	2100      	movs	r1, #0
 800be06:	6938      	ldr	r0, [r7, #16]
 800be08:	f001 f924 	bl	800d054 <xQueueReceiveFromISR>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d003      	beq.n	800be1a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800be12:	f06f 0302 	mvn.w	r3, #2
 800be16:	617b      	str	r3, [r7, #20]
 800be18:	e01c      	b.n	800be54 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d019      	beq.n	800be54 <osSemaphoreAcquire+0x94>
 800be20:	4b0f      	ldr	r3, [pc, #60]	; (800be60 <osSemaphoreAcquire+0xa0>)
 800be22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	e010      	b.n	800be54 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6938      	ldr	r0, [r7, #16]
 800be36:	f001 f801 	bl	800ce3c <xQueueSemaphoreTake>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d009      	beq.n	800be54 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d003      	beq.n	800be4e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800be46:	f06f 0301 	mvn.w	r3, #1
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e002      	b.n	800be54 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800be4e:	f06f 0302 	mvn.w	r3, #2
 800be52:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800be54:	697b      	ldr	r3, [r7, #20]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	e000ed04 	.word	0xe000ed04

0800be64 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d103      	bne.n	800be82 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800be7a:	f06f 0303 	mvn.w	r3, #3
 800be7e:	617b      	str	r3, [r7, #20]
 800be80:	e02c      	b.n	800bedc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be82:	f3ef 8305 	mrs	r3, IPSR
 800be86:	60fb      	str	r3, [r7, #12]
  return(result);
 800be88:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d01a      	beq.n	800bec4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800be92:	f107 0308 	add.w	r3, r7, #8
 800be96:	4619      	mov	r1, r3
 800be98:	6938      	ldr	r0, [r7, #16]
 800be9a:	f000 fe62 	bl	800cb62 <xQueueGiveFromISR>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d003      	beq.n	800beac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800bea4:	f06f 0302 	mvn.w	r3, #2
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	e017      	b.n	800bedc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d014      	beq.n	800bedc <osSemaphoreRelease+0x78>
 800beb2:	4b0d      	ldr	r3, [pc, #52]	; (800bee8 <osSemaphoreRelease+0x84>)
 800beb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb8:	601a      	str	r2, [r3, #0]
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	e00b      	b.n	800bedc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bec4:	2300      	movs	r3, #0
 800bec6:	2200      	movs	r2, #0
 800bec8:	2100      	movs	r1, #0
 800beca:	6938      	ldr	r0, [r7, #16]
 800becc:	f000 fcb0 	bl	800c830 <xQueueGenericSend>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d002      	beq.n	800bedc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bed6:	f06f 0302 	mvn.w	r3, #2
 800beda:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bedc:	697b      	ldr	r3, [r7, #20]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3718      	adds	r7, #24
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bef8:	f3ef 8305 	mrs	r3, IPSR
 800befc:	60fb      	str	r3, [r7, #12]
  return(result);
 800befe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800bf04:	f06f 0305 	mvn.w	r3, #5
 800bf08:	617b      	str	r3, [r7, #20]
 800bf0a:	e00e      	b.n	800bf2a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d103      	bne.n	800bf1a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800bf12:	f06f 0303 	mvn.w	r3, #3
 800bf16:	617b      	str	r3, [r7, #20]
 800bf18:	e007      	b.n	800bf2a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800bf1a:	6938      	ldr	r0, [r7, #16]
 800bf1c:	f001 fa90 	bl	800d440 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800bf24:	6938      	ldr	r0, [r7, #16]
 800bf26:	f001 f915 	bl	800d154 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bf2a:	697b      	ldr	r3, [r7, #20]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	4a07      	ldr	r2, [pc, #28]	; (800bf60 <vApplicationGetIdleTaskMemory+0x2c>)
 800bf44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4a06      	ldr	r2, [pc, #24]	; (800bf64 <vApplicationGetIdleTaskMemory+0x30>)
 800bf4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2280      	movs	r2, #128	; 0x80
 800bf50:	601a      	str	r2, [r3, #0]
}
 800bf52:	bf00      	nop
 800bf54:	3714      	adds	r7, #20
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	2000017c 	.word	0x2000017c
 800bf64:	200001d8 	.word	0x200001d8

0800bf68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4a07      	ldr	r2, [pc, #28]	; (800bf94 <vApplicationGetTimerTaskMemory+0x2c>)
 800bf78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	4a06      	ldr	r2, [pc, #24]	; (800bf98 <vApplicationGetTimerTaskMemory+0x30>)
 800bf7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf86:	601a      	str	r2, [r3, #0]
}
 800bf88:	bf00      	nop
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	200003d8 	.word	0x200003d8
 800bf98:	20000434 	.word	0x20000434

0800bf9c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800bfc0:	2320      	movs	r3, #32
 800bfc2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	d00a      	beq.n	800bfe0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800bfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	60fb      	str	r3, [r7, #12]
}
 800bfdc:	bf00      	nop
 800bfde:	e7fe      	b.n	800bfde <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00a      	beq.n	800c000 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f9bf 	bl	800c378 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2201      	movs	r2, #1
 800bffe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c000:	697b      	ldr	r3, [r7, #20]
	}
 800c002:	4618      	mov	r0, r3
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c010:	2020      	movs	r0, #32
 800c012:	f003 f971 	bl	800f2f8 <pvPortMalloc>
 800c016:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3304      	adds	r3, #4
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 f9a5 	bl	800c378 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c034:	687b      	ldr	r3, [r7, #4]
	}
 800c036:	4618      	mov	r0, r3
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b090      	sub	sp, #64	; 0x40
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c056:	2300      	movs	r3, #0
 800c058:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xEventGroupWaitBits+0x36>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	623b      	str	r3, [r7, #32]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00a      	beq.n	800c096 <xEventGroupWaitBits+0x56>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	61fb      	str	r3, [r7, #28]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10a      	bne.n	800c0b2 <xEventGroupWaitBits+0x72>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	61bb      	str	r3, [r7, #24]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0b2:	f002 f96f 	bl	800e394 <xTaskGetSchedulerState>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d102      	bne.n	800c0c2 <xEventGroupWaitBits+0x82>
 800c0bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <xEventGroupWaitBits+0x86>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e000      	b.n	800c0c8 <xEventGroupWaitBits+0x88>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	617b      	str	r3, [r7, #20]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c0e2:	f001 fcc5 	bl	800da70 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	68b9      	ldr	r1, [r7, #8]
 800c0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0f2:	f000 f90b 	bl	800c30c <prvTestWaitCondition>
 800c0f6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c102:	2300      	movs	r3, #0
 800c104:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d028      	beq.n	800c15e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	43db      	mvns	r3, r3
 800c114:	401a      	ands	r2, r3
 800c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	e020      	b.n	800c15e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c11c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d104      	bne.n	800c12c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c126:	2301      	movs	r3, #1
 800c128:	633b      	str	r3, [r7, #48]	; 0x30
 800c12a:	e018      	b.n	800c15e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d003      	beq.n	800c13a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c138:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c146:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14a:	1d18      	adds	r0, r3, #4
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c150:	4313      	orrs	r3, r2
 800c152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c154:	4619      	mov	r1, r3
 800c156:	f001 fe95 	bl	800de84 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c15a:	2300      	movs	r3, #0
 800c15c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c15e:	f001 fc95 	bl	800da8c <xTaskResumeAll>
 800c162:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c166:	2b00      	cmp	r3, #0
 800c168:	d031      	beq.n	800c1ce <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d107      	bne.n	800c180 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c170:	4b19      	ldr	r3, [pc, #100]	; (800c1d8 <xEventGroupWaitBits+0x198>)
 800c172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c176:	601a      	str	r2, [r3, #0]
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c180:	f002 fa7e 	bl	800e680 <uxTaskResetEventItemValue>
 800c184:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11a      	bne.n	800c1c6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c190:	f002 ff90 	bl	800f0b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	68b9      	ldr	r1, [r7, #8]
 800c19e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c1a0:	f000 f8b4 	bl	800c30c <prvTestWaitCondition>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d009      	beq.n	800c1be <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d006      	beq.n	800c1be <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	43db      	mvns	r3, r3
 800c1b8:	401a      	ands	r2, r3
 800c1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1bc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c1c2:	f002 ffa7 	bl	800f114 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3740      	adds	r7, #64	; 0x40
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08e      	sub	sp, #56	; 0x38
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <xEventGroupSetBits+0x32>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	613b      	str	r3, [r7, #16]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00a      	beq.n	800c22e <xEventGroupSetBits+0x52>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	60fb      	str	r3, [r7, #12]
}
 800c22a:	bf00      	nop
 800c22c:	e7fe      	b.n	800c22c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	3304      	adds	r3, #4
 800c232:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	3308      	adds	r3, #8
 800c238:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c23a:	f001 fc19 	bl	800da70 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	431a      	orrs	r2, r3
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c250:	e03c      	b.n	800c2cc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c25e:	2300      	movs	r3, #0
 800c260:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c268:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c270:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d108      	bne.n	800c28e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	4013      	ands	r3, r2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00b      	beq.n	800c2a0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c288:	2301      	movs	r3, #1
 800c28a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c28c:	e008      	b.n	800c2a0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	4013      	ands	r3, r2
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d101      	bne.n	800c2a0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c29c:	2301      	movs	r3, #1
 800c29e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d010      	beq.n	800c2c8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d003      	beq.n	800c2b8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c2c4:	f001 feaa 	bl	800e01c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c2cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d1be      	bne.n	800c252 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	43db      	mvns	r3, r3
 800c2dc:	401a      	ands	r2, r3
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c2e2:	f001 fbd3 	bl	800da8c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e8:	681b      	ldr	r3, [r3, #0]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3738      	adds	r7, #56	; 0x38
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7ff ff6c 	bl	800c1dc <xEventGroupSetBits>
}
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c318:	2300      	movs	r3, #0
 800c31a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d107      	bne.n	800c332 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	4013      	ands	r3, r2
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00a      	beq.n	800c342 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	617b      	str	r3, [r7, #20]
 800c330:	e007      	b.n	800c342 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	4013      	ands	r3, r2
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d101      	bne.n	800c342 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c33e:	2301      	movs	r3, #1
 800c340:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c342:	697b      	ldr	r3, [r7, #20]
}
 800c344:	4618      	mov	r0, r3
 800c346:	371c      	adds	r7, #28
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	68f9      	ldr	r1, [r7, #12]
 800c362:	4804      	ldr	r0, [pc, #16]	; (800c374 <xEventGroupSetBitsFromISR+0x24>)
 800c364:	f002 fd5a 	bl	800ee1c <xTimerPendFunctionCallFromISR>
 800c368:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c36a:	697b      	ldr	r3, [r7, #20]
	}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	0800c2f3 	.word	0x0800c2f3

0800c378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f103 0208 	add.w	r2, r3, #8
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f103 0208 	add.w	r2, r3, #8
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f103 0208 	add.w	r2, r3, #8
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3ac:	bf00      	nop
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	689a      	ldr	r2, [r3, #8]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	683a      	ldr	r2, [r7, #0]
 800c3fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	601a      	str	r2, [r3, #0]
}
 800c40e:	bf00      	nop
 800c410:	3714      	adds	r7, #20
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr

0800c41a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c41a:	b480      	push	{r7}
 800c41c:	b085      	sub	sp, #20
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c430:	d103      	bne.n	800c43a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	60fb      	str	r3, [r7, #12]
 800c438:	e00c      	b.n	800c454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3308      	adds	r3, #8
 800c43e:	60fb      	str	r3, [r7, #12]
 800c440:	e002      	b.n	800c448 <vListInsert+0x2e>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	429a      	cmp	r2, r3
 800c452:	d2f6      	bcs.n	800c442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	683a      	ldr	r2, [r7, #0]
 800c46e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	1c5a      	adds	r2, r3, #1
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	601a      	str	r2, [r3, #0]
}
 800c480:	bf00      	nop
 800c482:	3714      	adds	r7, #20
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	6892      	ldr	r2, [r2, #8]
 800c4a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	6852      	ldr	r2, [r2, #4]
 800c4ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d103      	bne.n	800c4c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	1e5a      	subs	r2, r3, #1
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10a      	bne.n	800c50a <xQueueGenericReset+0x2a>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	60bb      	str	r3, [r7, #8]
}
 800c506:	bf00      	nop
 800c508:	e7fe      	b.n	800c508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c50a:	f002 fdd3 	bl	800f0b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c516:	68f9      	ldr	r1, [r7, #12]
 800c518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c51a:	fb01 f303 	mul.w	r3, r1, r3
 800c51e:	441a      	add	r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53a:	3b01      	subs	r3, #1
 800c53c:	68f9      	ldr	r1, [r7, #12]
 800c53e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c540:	fb01 f303 	mul.w	r3, r1, r3
 800c544:	441a      	add	r2, r3
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	22ff      	movs	r2, #255	; 0xff
 800c54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	22ff      	movs	r2, #255	; 0xff
 800c556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d114      	bne.n	800c58a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01a      	beq.n	800c59e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	3310      	adds	r3, #16
 800c56c:	4618      	mov	r0, r3
 800c56e:	f001 fcf1 	bl	800df54 <xTaskRemoveFromEventList>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d012      	beq.n	800c59e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c578:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <xQueueGenericReset+0xcc>)
 800c57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	e009      	b.n	800c59e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	3310      	adds	r3, #16
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff fef2 	bl	800c378 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3324      	adds	r3, #36	; 0x24
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff feed 	bl	800c378 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c59e:	f002 fdb9 	bl	800f114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c5a2:	2301      	movs	r3, #1
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d10a      	bne.n	800c5da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d002      	beq.n	800c602 <xQueueGenericCreateStatic+0x52>
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <xQueueGenericCreateStatic+0x56>
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <xQueueGenericCreateStatic+0x58>
 800c606:	2300      	movs	r3, #0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10a      	bne.n	800c622 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	623b      	str	r3, [r7, #32]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <xQueueGenericCreateStatic+0x7e>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <xQueueGenericCreateStatic+0x82>
 800c62e:	2301      	movs	r3, #1
 800c630:	e000      	b.n	800c634 <xQueueGenericCreateStatic+0x84>
 800c632:	2300      	movs	r3, #0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10a      	bne.n	800c64e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	61fb      	str	r3, [r7, #28]
}
 800c64a:	bf00      	nop
 800c64c:	e7fe      	b.n	800c64c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c64e:	2350      	movs	r3, #80	; 0x50
 800c650:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b50      	cmp	r3, #80	; 0x50
 800c656:	d00a      	beq.n	800c66e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65c:	f383 8811 	msr	BASEPRI, r3
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	61bb      	str	r3, [r7, #24]
}
 800c66a:	bf00      	nop
 800c66c:	e7fe      	b.n	800c66c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c66e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00d      	beq.n	800c696 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c682:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c688:	9300      	str	r3, [sp, #0]
 800c68a:	4613      	mov	r3, r2
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	68b9      	ldr	r1, [r7, #8]
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f000 f83f 	bl	800c714 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c698:	4618      	mov	r0, r3
 800c69a:	3730      	adds	r7, #48	; 0x30
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08a      	sub	sp, #40	; 0x28
 800c6a4:	af02      	add	r7, sp, #8
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10a      	bne.n	800c6ca <xQueueGenericCreate+0x2a>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	613b      	str	r3, [r7, #16]
}
 800c6c6:	bf00      	nop
 800c6c8:	e7fe      	b.n	800c6c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	fb02 f303 	mul.w	r3, r2, r3
 800c6d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	3350      	adds	r3, #80	; 0x50
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f002 fe0d 	bl	800f2f8 <pvPortMalloc>
 800c6de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d011      	beq.n	800c70a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	3350      	adds	r3, #80	; 0x50
 800c6ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6f8:	79fa      	ldrb	r2, [r7, #7]
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	4613      	mov	r3, r2
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	68b9      	ldr	r1, [r7, #8]
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 f805 	bl	800c714 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c70a:	69bb      	ldr	r3, [r7, #24]
	}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
 800c720:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d103      	bne.n	800c730 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	69ba      	ldr	r2, [r7, #24]
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	e002      	b.n	800c736 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c742:	2101      	movs	r1, #1
 800c744:	69b8      	ldr	r0, [r7, #24]
 800c746:	f7ff fecb 	bl	800c4e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	78fa      	ldrb	r2, [r7, #3]
 800c74e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c752:	bf00      	nop
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b08a      	sub	sp, #40	; 0x28
 800c75e:	af02      	add	r7, sp, #8
 800c760:	60f8      	str	r0, [r7, #12]
 800c762:	60b9      	str	r1, [r7, #8]
 800c764:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	61bb      	str	r3, [r7, #24]
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	429a      	cmp	r2, r3
 800c788:	d90a      	bls.n	800c7a0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78e:	f383 8811 	msr	BASEPRI, r3
 800c792:	f3bf 8f6f 	isb	sy
 800c796:	f3bf 8f4f 	dsb	sy
 800c79a:	617b      	str	r3, [r7, #20]
}
 800c79c:	bf00      	nop
 800c79e:	e7fe      	b.n	800c79e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	9300      	str	r3, [sp, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff ff00 	bl	800c5b0 <xQueueGenericCreateStatic>
 800c7b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c7be:	69fb      	ldr	r3, [r7, #28]
	}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10a      	bne.n	800c7ee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	613b      	str	r3, [r7, #16]
}
 800c7ea:	bf00      	nop
 800c7ec:	e7fe      	b.n	800c7ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d90a      	bls.n	800c80c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60fb      	str	r3, [r7, #12]
}
 800c808:	bf00      	nop
 800c80a:	e7fe      	b.n	800c80a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c80c:	2202      	movs	r2, #2
 800c80e:	2100      	movs	r1, #0
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff ff45 	bl	800c6a0 <xQueueGenericCreate>
 800c816:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d002      	beq.n	800c824 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	683a      	ldr	r2, [r7, #0]
 800c822:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c824:	697b      	ldr	r3, [r7, #20]
	}
 800c826:	4618      	mov	r0, r3
 800c828:	3718      	adds	r7, #24
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
	...

0800c830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b08e      	sub	sp, #56	; 0x38
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c83e:	2300      	movs	r3, #0
 800c840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d10a      	bne.n	800c862 <xQueueGenericSend+0x32>
	__asm volatile
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c85e:	bf00      	nop
 800c860:	e7fe      	b.n	800c860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d103      	bne.n	800c870 <xQueueGenericSend+0x40>
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <xQueueGenericSend+0x44>
 800c870:	2301      	movs	r3, #1
 800c872:	e000      	b.n	800c876 <xQueueGenericSend+0x46>
 800c874:	2300      	movs	r3, #0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d10a      	bne.n	800c890 <xQueueGenericSend+0x60>
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c88c:	bf00      	nop
 800c88e:	e7fe      	b.n	800c88e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	2b02      	cmp	r3, #2
 800c894:	d103      	bne.n	800c89e <xQueueGenericSend+0x6e>
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d101      	bne.n	800c8a2 <xQueueGenericSend+0x72>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e000      	b.n	800c8a4 <xQueueGenericSend+0x74>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d10a      	bne.n	800c8be <xQueueGenericSend+0x8e>
	__asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	623b      	str	r3, [r7, #32]
}
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8be:	f001 fd69 	bl	800e394 <xTaskGetSchedulerState>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d102      	bne.n	800c8ce <xQueueGenericSend+0x9e>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <xQueueGenericSend+0xa2>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <xQueueGenericSend+0xa4>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10a      	bne.n	800c8ee <xQueueGenericSend+0xbe>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	61fb      	str	r3, [r7, #28]
}
 800c8ea:	bf00      	nop
 800c8ec:	e7fe      	b.n	800c8ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8ee:	f002 fbe1 	bl	800f0b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d302      	bcc.n	800c904 <xQueueGenericSend+0xd4>
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b02      	cmp	r3, #2
 800c902:	d129      	bne.n	800c958 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c90a:	f000 fc5e 	bl	800d1ca <prvCopyDataToQueue>
 800c90e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c914:	2b00      	cmp	r3, #0
 800c916:	d010      	beq.n	800c93a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91a:	3324      	adds	r3, #36	; 0x24
 800c91c:	4618      	mov	r0, r3
 800c91e:	f001 fb19 	bl	800df54 <xTaskRemoveFromEventList>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d013      	beq.n	800c950 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c928:	4b3f      	ldr	r3, [pc, #252]	; (800ca28 <xQueueGenericSend+0x1f8>)
 800c92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	e00a      	b.n	800c950 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d007      	beq.n	800c950 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c940:	4b39      	ldr	r3, [pc, #228]	; (800ca28 <xQueueGenericSend+0x1f8>)
 800c942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c946:	601a      	str	r2, [r3, #0]
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c950:	f002 fbe0 	bl	800f114 <vPortExitCritical>
				return pdPASS;
 800c954:	2301      	movs	r3, #1
 800c956:	e063      	b.n	800ca20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d103      	bne.n	800c966 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c95e:	f002 fbd9 	bl	800f114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c962:	2300      	movs	r3, #0
 800c964:	e05c      	b.n	800ca20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d106      	bne.n	800c97a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c96c:	f107 0314 	add.w	r3, r7, #20
 800c970:	4618      	mov	r0, r3
 800c972:	f001 fbb5 	bl	800e0e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c976:	2301      	movs	r3, #1
 800c978:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c97a:	f002 fbcb 	bl	800f114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c97e:	f001 f877 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c982:	f002 fb97 	bl	800f0b4 <vPortEnterCritical>
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c98c:	b25b      	sxtb	r3, r3
 800c98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c992:	d103      	bne.n	800c99c <xQueueGenericSend+0x16c>
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9a2:	b25b      	sxtb	r3, r3
 800c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9a8:	d103      	bne.n	800c9b2 <xQueueGenericSend+0x182>
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9b2:	f002 fbaf 	bl	800f114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9b6:	1d3a      	adds	r2, r7, #4
 800c9b8:	f107 0314 	add.w	r3, r7, #20
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f001 fba4 	bl	800e10c <xTaskCheckForTimeOut>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d124      	bne.n	800ca14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c9ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9cc:	f000 fcf5 	bl	800d3ba <prvIsQueueFull>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d018      	beq.n	800ca08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	3310      	adds	r3, #16
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f001 fa2c 	bl	800de3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c9e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9e6:	f000 fc80 	bl	800d2ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c9ea:	f001 f84f 	bl	800da8c <xTaskResumeAll>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f47f af7c 	bne.w	800c8ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c9f6:	4b0c      	ldr	r3, [pc, #48]	; (800ca28 <xQueueGenericSend+0x1f8>)
 800c9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	f3bf 8f4f 	dsb	sy
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	e772      	b.n	800c8ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ca08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca0a:	f000 fc6e 	bl	800d2ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca0e:	f001 f83d 	bl	800da8c <xTaskResumeAll>
 800ca12:	e76c      	b.n	800c8ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ca14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca16:	f000 fc68 	bl	800d2ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca1a:	f001 f837 	bl	800da8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ca1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3738      	adds	r7, #56	; 0x38
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	e000ed04 	.word	0xe000ed04

0800ca2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b090      	sub	sp, #64	; 0x40
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
 800ca38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10a      	bne.n	800ca5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d103      	bne.n	800ca68 <xQueueGenericSendFromISR+0x3c>
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <xQueueGenericSendFromISR+0x40>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e000      	b.n	800ca6e <xQueueGenericSendFromISR+0x42>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d10a      	bne.n	800ca88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ca72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	f3bf 8f4f 	dsb	sy
 800ca82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca84:	bf00      	nop
 800ca86:	e7fe      	b.n	800ca86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d103      	bne.n	800ca96 <xQueueGenericSendFromISR+0x6a>
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d101      	bne.n	800ca9a <xQueueGenericSendFromISR+0x6e>
 800ca96:	2301      	movs	r3, #1
 800ca98:	e000      	b.n	800ca9c <xQueueGenericSendFromISR+0x70>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10a      	bne.n	800cab6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	623b      	str	r3, [r7, #32]
}
 800cab2:	bf00      	nop
 800cab4:	e7fe      	b.n	800cab4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cab6:	f002 fbdf 	bl	800f278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800caba:	f3ef 8211 	mrs	r2, BASEPRI
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	61fa      	str	r2, [r7, #28]
 800cad0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cad2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cad4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cade:	429a      	cmp	r2, r3
 800cae0:	d302      	bcc.n	800cae8 <xQueueGenericSendFromISR+0xbc>
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d12f      	bne.n	800cb48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800caee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	68b9      	ldr	r1, [r7, #8]
 800cafc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cafe:	f000 fb64 	bl	800d1ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cb02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cb06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb0a:	d112      	bne.n	800cb32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d016      	beq.n	800cb42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb16:	3324      	adds	r3, #36	; 0x24
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 fa1b 	bl	800df54 <xTaskRemoveFromEventList>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00e      	beq.n	800cb42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00b      	beq.n	800cb42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	e007      	b.n	800cb42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cb32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb36:	3301      	adds	r3, #1
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	b25a      	sxtb	r2, r3
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cb42:	2301      	movs	r3, #1
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cb46:	e001      	b.n	800cb4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cb56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3740      	adds	r7, #64	; 0x40
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b08e      	sub	sp, #56	; 0x38
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10a      	bne.n	800cb8c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	623b      	str	r3, [r7, #32]
}
 800cb88:	bf00      	nop
 800cb8a:	e7fe      	b.n	800cb8a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00a      	beq.n	800cbaa <xQueueGiveFromISR+0x48>
	__asm volatile
 800cb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	61fb      	str	r3, [r7, #28]
}
 800cba6:	bf00      	nop
 800cba8:	e7fe      	b.n	800cba8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d103      	bne.n	800cbba <xQueueGiveFromISR+0x58>
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <xQueueGiveFromISR+0x5c>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <xQueueGiveFromISR+0x5e>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <xQueueGiveFromISR+0x78>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	61bb      	str	r3, [r7, #24]
}
 800cbd6:	bf00      	nop
 800cbd8:	e7fe      	b.n	800cbd8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbda:	f002 fb4d 	bl	800f278 <vPortValidateInterruptPriority>
	__asm volatile
 800cbde:	f3ef 8211 	mrs	r2, BASEPRI
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	f383 8811 	msr	BASEPRI, r3
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	617a      	str	r2, [r7, #20]
 800cbf4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cbf6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d22b      	bcs.n	800cc62 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc24:	d112      	bne.n	800cc4c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d016      	beq.n	800cc5c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	3324      	adds	r3, #36	; 0x24
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 f98e 	bl	800df54 <xTaskRemoveFromEventList>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00e      	beq.n	800cc5c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00b      	beq.n	800cc5c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2201      	movs	r2, #1
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	e007      	b.n	800cc5c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc50:	3301      	adds	r3, #1
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	b25a      	sxtb	r2, r3
 800cc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	637b      	str	r3, [r7, #52]	; 0x34
 800cc60:	e001      	b.n	800cc66 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	637b      	str	r3, [r7, #52]	; 0x34
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f383 8811 	msr	BASEPRI, r3
}
 800cc70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3738      	adds	r7, #56	; 0x38
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08c      	sub	sp, #48	; 0x30
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10a      	bne.n	800ccac <xQueueReceive+0x30>
	__asm volatile
 800cc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	623b      	str	r3, [r7, #32]
}
 800cca8:	bf00      	nop
 800ccaa:	e7fe      	b.n	800ccaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d103      	bne.n	800ccba <xQueueReceive+0x3e>
 800ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d101      	bne.n	800ccbe <xQueueReceive+0x42>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e000      	b.n	800ccc0 <xQueueReceive+0x44>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xQueueReceive+0x5e>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	61fb      	str	r3, [r7, #28]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccda:	f001 fb5b 	bl	800e394 <xTaskGetSchedulerState>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d102      	bne.n	800ccea <xQueueReceive+0x6e>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <xQueueReceive+0x72>
 800ccea:	2301      	movs	r3, #1
 800ccec:	e000      	b.n	800ccf0 <xQueueReceive+0x74>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10a      	bne.n	800cd0a <xQueueReceive+0x8e>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	61bb      	str	r3, [r7, #24]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd0a:	f002 f9d3 	bl	800f0b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d01f      	beq.n	800cd5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd1a:	68b9      	ldr	r1, [r7, #8]
 800cd1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd1e:	f000 fabe 	bl	800d29e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	1e5a      	subs	r2, r3, #1
 800cd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00f      	beq.n	800cd52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	3310      	adds	r3, #16
 800cd36:	4618      	mov	r0, r3
 800cd38:	f001 f90c 	bl	800df54 <xTaskRemoveFromEventList>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d007      	beq.n	800cd52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd42:	4b3d      	ldr	r3, [pc, #244]	; (800ce38 <xQueueReceive+0x1bc>)
 800cd44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd52:	f002 f9df 	bl	800f114 <vPortExitCritical>
				return pdPASS;
 800cd56:	2301      	movs	r3, #1
 800cd58:	e069      	b.n	800ce2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d103      	bne.n	800cd68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd60:	f002 f9d8 	bl	800f114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd64:	2300      	movs	r3, #0
 800cd66:	e062      	b.n	800ce2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd6e:	f107 0310 	add.w	r3, r7, #16
 800cd72:	4618      	mov	r0, r3
 800cd74:	f001 f9b4 	bl	800e0e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd78:	2301      	movs	r3, #1
 800cd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd7c:	f002 f9ca 	bl	800f114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd80:	f000 fe76 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd84:	f002 f996 	bl	800f0b4 <vPortEnterCritical>
 800cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd8e:	b25b      	sxtb	r3, r3
 800cd90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd94:	d103      	bne.n	800cd9e <xQueueReceive+0x122>
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cda4:	b25b      	sxtb	r3, r3
 800cda6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdaa:	d103      	bne.n	800cdb4 <xQueueReceive+0x138>
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdb4:	f002 f9ae 	bl	800f114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdb8:	1d3a      	adds	r2, r7, #4
 800cdba:	f107 0310 	add.w	r3, r7, #16
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f001 f9a3 	bl	800e10c <xTaskCheckForTimeOut>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d123      	bne.n	800ce14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cdce:	f000 fade 	bl	800d38e <prvIsQueueEmpty>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d017      	beq.n	800ce08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	3324      	adds	r3, #36	; 0x24
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	4611      	mov	r1, r2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f001 f82b 	bl	800de3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cde8:	f000 fa7f 	bl	800d2ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cdec:	f000 fe4e 	bl	800da8c <xTaskResumeAll>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d189      	bne.n	800cd0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cdf6:	4b10      	ldr	r3, [pc, #64]	; (800ce38 <xQueueReceive+0x1bc>)
 800cdf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	e780      	b.n	800cd0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce0a:	f000 fa6e 	bl	800d2ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce0e:	f000 fe3d 	bl	800da8c <xTaskResumeAll>
 800ce12:	e77a      	b.n	800cd0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce16:	f000 fa68 	bl	800d2ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce1a:	f000 fe37 	bl	800da8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce20:	f000 fab5 	bl	800d38e <prvIsQueueEmpty>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f43f af6f 	beq.w	800cd0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3730      	adds	r7, #48	; 0x30
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	e000ed04 	.word	0xe000ed04

0800ce3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08e      	sub	sp, #56	; 0x38
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10a      	bne.n	800ce6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ce58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	623b      	str	r3, [r7, #32]
}
 800ce6a:	bf00      	nop
 800ce6c:	e7fe      	b.n	800ce6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	61fb      	str	r3, [r7, #28]
}
 800ce88:	bf00      	nop
 800ce8a:	e7fe      	b.n	800ce8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce8c:	f001 fa82 	bl	800e394 <xTaskGetSchedulerState>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d102      	bne.n	800ce9c <xQueueSemaphoreTake+0x60>
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <xQueueSemaphoreTake+0x64>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e000      	b.n	800cea2 <xQueueSemaphoreTake+0x66>
 800cea0:	2300      	movs	r3, #0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10a      	bne.n	800cebc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	61bb      	str	r3, [r7, #24]
}
 800ceb8:	bf00      	nop
 800ceba:	e7fe      	b.n	800ceba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cebc:	f002 f8fa 	bl	800f0b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d024      	beq.n	800cf16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	1e5a      	subs	r2, r3, #1
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ced4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d104      	bne.n	800cee6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cedc:	f001 fbe8 	bl	800e6b0 <pvTaskIncrementMutexHeldCount>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00f      	beq.n	800cf0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	3310      	adds	r3, #16
 800cef2:	4618      	mov	r0, r3
 800cef4:	f001 f82e 	bl	800df54 <xTaskRemoveFromEventList>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d007      	beq.n	800cf0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cefe:	4b54      	ldr	r3, [pc, #336]	; (800d050 <xQueueSemaphoreTake+0x214>)
 800cf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf0e:	f002 f901 	bl	800f114 <vPortExitCritical>
				return pdPASS;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e097      	b.n	800d046 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d111      	bne.n	800cf40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00a      	beq.n	800cf38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	617b      	str	r3, [r7, #20]
}
 800cf34:	bf00      	nop
 800cf36:	e7fe      	b.n	800cf36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cf38:	f002 f8ec 	bl	800f114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e082      	b.n	800d046 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f001 f8c8 	bl	800e0e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf50:	2301      	movs	r3, #1
 800cf52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf54:	f002 f8de 	bl	800f114 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf58:	f000 fd8a 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf5c:	f002 f8aa 	bl	800f0b4 <vPortEnterCritical>
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf66:	b25b      	sxtb	r3, r3
 800cf68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf6c:	d103      	bne.n	800cf76 <xQueueSemaphoreTake+0x13a>
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	2200      	movs	r2, #0
 800cf72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf7c:	b25b      	sxtb	r3, r3
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf82:	d103      	bne.n	800cf8c <xQueueSemaphoreTake+0x150>
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf8c:	f002 f8c2 	bl	800f114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf90:	463a      	mov	r2, r7
 800cf92:	f107 030c 	add.w	r3, r7, #12
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f001 f8b7 	bl	800e10c <xTaskCheckForTimeOut>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d132      	bne.n	800d00a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfa6:	f000 f9f2 	bl	800d38e <prvIsQueueEmpty>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d026      	beq.n	800cffe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d109      	bne.n	800cfcc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cfb8:	f002 f87c 	bl	800f0b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f001 fa05 	bl	800e3d0 <xTaskPriorityInherit>
 800cfc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cfc8:	f002 f8a4 	bl	800f114 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	3324      	adds	r3, #36	; 0x24
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 ff31 	bl	800de3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfdc:	f000 f985 	bl	800d2ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfe0:	f000 fd54 	bl	800da8c <xTaskResumeAll>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f47f af68 	bne.w	800cebc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cfec:	4b18      	ldr	r3, [pc, #96]	; (800d050 <xQueueSemaphoreTake+0x214>)
 800cfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	e75e      	b.n	800cebc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d000:	f000 f973 	bl	800d2ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d004:	f000 fd42 	bl	800da8c <xTaskResumeAll>
 800d008:	e758      	b.n	800cebc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d00a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d00c:	f000 f96d 	bl	800d2ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d010:	f000 fd3c 	bl	800da8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d016:	f000 f9ba 	bl	800d38e <prvIsQueueEmpty>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f43f af4d 	beq.w	800cebc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00d      	beq.n	800d044 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d028:	f002 f844 	bl	800f0b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d02e:	f000 f8b4 	bl	800d19a <prvGetDisinheritPriorityAfterTimeout>
 800d032:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f001 fa9e 	bl	800e57c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d040:	f002 f868 	bl	800f114 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d046:	4618      	mov	r0, r3
 800d048:	3738      	adds	r7, #56	; 0x38
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	e000ed04 	.word	0xe000ed04

0800d054 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08e      	sub	sp, #56	; 0x38
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10a      	bne.n	800d080 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	623b      	str	r3, [r7, #32]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d103      	bne.n	800d08e <xQueueReceiveFromISR+0x3a>
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d101      	bne.n	800d092 <xQueueReceiveFromISR+0x3e>
 800d08e:	2301      	movs	r3, #1
 800d090:	e000      	b.n	800d094 <xQueueReceiveFromISR+0x40>
 800d092:	2300      	movs	r3, #0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d10a      	bne.n	800d0ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09c:	f383 8811 	msr	BASEPRI, r3
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	f3bf 8f4f 	dsb	sy
 800d0a8:	61fb      	str	r3, [r7, #28]
}
 800d0aa:	bf00      	nop
 800d0ac:	e7fe      	b.n	800d0ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0ae:	f002 f8e3 	bl	800f278 <vPortValidateInterruptPriority>
	__asm volatile
 800d0b2:	f3ef 8211 	mrs	r2, BASEPRI
 800d0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	61ba      	str	r2, [r7, #24]
 800d0c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d0ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d02f      	beq.n	800d13a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0e4:	68b9      	ldr	r1, [r7, #8]
 800d0e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0e8:	f000 f8d9 	bl	800d29e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	1e5a      	subs	r2, r3, #1
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d0f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0fc:	d112      	bne.n	800d124 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d016      	beq.n	800d134 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	3310      	adds	r3, #16
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 ff22 	bl	800df54 <xTaskRemoveFromEventList>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d00e      	beq.n	800d134 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00b      	beq.n	800d134 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	e007      	b.n	800d134 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d128:	3301      	adds	r3, #1
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	b25a      	sxtb	r2, r3
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d134:	2301      	movs	r3, #1
 800d136:	637b      	str	r3, [r7, #52]	; 0x34
 800d138:	e001      	b.n	800d13e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	637b      	str	r3, [r7, #52]	; 0x34
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	f383 8811 	msr	BASEPRI, r3
}
 800d148:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3738      	adds	r7, #56	; 0x38
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d10a      	bne.n	800d17c <vQueueDelete+0x28>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16a:	f383 8811 	msr	BASEPRI, r3
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	60bb      	str	r3, [r7, #8]
}
 800d178:	bf00      	nop
 800d17a:	e7fe      	b.n	800d17a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f000 f95f 	bl	800d440 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d102      	bne.n	800d192 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f002 f97f 	bl	800f490 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d192:	bf00      	nop
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d19a:	b480      	push	{r7}
 800d19c:	b085      	sub	sp, #20
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d006      	beq.n	800d1b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d1b4:	60fb      	str	r3, [r7, #12]
 800d1b6:	e001      	b.n	800d1bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
	}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3714      	adds	r7, #20
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b086      	sub	sp, #24
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	60f8      	str	r0, [r7, #12]
 800d1d2:	60b9      	str	r1, [r7, #8]
 800d1d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10d      	bne.n	800d204 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d14d      	bne.n	800d28c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f001 f953 	bl	800e4a0 <xTaskPriorityDisinherit>
 800d1fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	609a      	str	r2, [r3, #8]
 800d202:	e043      	b.n	800d28c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d119      	bne.n	800d23e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6858      	ldr	r0, [r3, #4]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d212:	461a      	mov	r2, r3
 800d214:	68b9      	ldr	r1, [r7, #8]
 800d216:	f002 fa83 	bl	800f720 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	685a      	ldr	r2, [r3, #4]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d222:	441a      	add	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	429a      	cmp	r2, r3
 800d232:	d32b      	bcc.n	800d28c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681a      	ldr	r2, [r3, #0]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	605a      	str	r2, [r3, #4]
 800d23c:	e026      	b.n	800d28c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	68d8      	ldr	r0, [r3, #12]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d246:	461a      	mov	r2, r3
 800d248:	68b9      	ldr	r1, [r7, #8]
 800d24a:	f002 fa69 	bl	800f720 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68da      	ldr	r2, [r3, #12]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d256:	425b      	negs	r3, r3
 800d258:	441a      	add	r2, r3
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	68da      	ldr	r2, [r3, #12]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	429a      	cmp	r2, r3
 800d268:	d207      	bcs.n	800d27a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	689a      	ldr	r2, [r3, #8]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d272:	425b      	negs	r3, r3
 800d274:	441a      	add	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d105      	bne.n	800d28c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	3b01      	subs	r3, #1
 800d28a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d294:	697b      	ldr	r3, [r7, #20]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b082      	sub	sp, #8
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d018      	beq.n	800d2e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68da      	ldr	r2, [r3, #12]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b8:	441a      	add	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	68da      	ldr	r2, [r3, #12]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d303      	bcc.n	800d2d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	68d9      	ldr	r1, [r3, #12]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2da:	461a      	mov	r2, r3
 800d2dc:	6838      	ldr	r0, [r7, #0]
 800d2de:	f002 fa1f 	bl	800f720 <memcpy>
	}
}
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b084      	sub	sp, #16
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2f2:	f001 fedf 	bl	800f0b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2fe:	e011      	b.n	800d324 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d304:	2b00      	cmp	r3, #0
 800d306:	d012      	beq.n	800d32e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	3324      	adds	r3, #36	; 0x24
 800d30c:	4618      	mov	r0, r3
 800d30e:	f000 fe21 	bl	800df54 <xTaskRemoveFromEventList>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d318:	f000 ff5a 	bl	800e1d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
 800d31e:	3b01      	subs	r3, #1
 800d320:	b2db      	uxtb	r3, r3
 800d322:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	dce9      	bgt.n	800d300 <prvUnlockQueue+0x16>
 800d32c:	e000      	b.n	800d330 <prvUnlockQueue+0x46>
					break;
 800d32e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	22ff      	movs	r2, #255	; 0xff
 800d334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d338:	f001 feec 	bl	800f114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d33c:	f001 feba 	bl	800f0b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d346:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d348:	e011      	b.n	800d36e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d012      	beq.n	800d378 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	3310      	adds	r3, #16
 800d356:	4618      	mov	r0, r3
 800d358:	f000 fdfc 	bl	800df54 <xTaskRemoveFromEventList>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d362:	f000 ff35 	bl	800e1d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	3b01      	subs	r3, #1
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d36e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d372:	2b00      	cmp	r3, #0
 800d374:	dce9      	bgt.n	800d34a <prvUnlockQueue+0x60>
 800d376:	e000      	b.n	800d37a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d378:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d382:	f001 fec7 	bl	800f114 <vPortExitCritical>
}
 800d386:	bf00      	nop
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d396:	f001 fe8d 	bl	800f0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	60fb      	str	r3, [r7, #12]
 800d3a6:	e001      	b.n	800d3ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3ac:	f001 feb2 	bl	800f114 <vPortExitCritical>

	return xReturn;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3c2:	f001 fe77 	bl	800f0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d102      	bne.n	800d3d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	e001      	b.n	800d3dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3dc:	f001 fe9a 	bl	800f114 <vPortExitCritical>

	return xReturn;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
	...

0800d3ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e014      	b.n	800d426 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d3fc:	4a0f      	ldr	r2, [pc, #60]	; (800d43c <vQueueAddToRegistry+0x50>)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10b      	bne.n	800d420 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d408:	490c      	ldr	r1, [pc, #48]	; (800d43c <vQueueAddToRegistry+0x50>)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	683a      	ldr	r2, [r7, #0]
 800d40e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d412:	4a0a      	ldr	r2, [pc, #40]	; (800d43c <vQueueAddToRegistry+0x50>)
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	00db      	lsls	r3, r3, #3
 800d418:	4413      	add	r3, r2
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d41e:	e006      	b.n	800d42e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3301      	adds	r3, #1
 800d424:	60fb      	str	r3, [r7, #12]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2b07      	cmp	r3, #7
 800d42a:	d9e7      	bls.n	800d3fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	2000fa80 	.word	0x2000fa80

0800d440 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d440:	b480      	push	{r7}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d448:	2300      	movs	r3, #0
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	e016      	b.n	800d47c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d44e:	4a10      	ldr	r2, [pc, #64]	; (800d490 <vQueueUnregisterQueue+0x50>)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	00db      	lsls	r3, r3, #3
 800d454:	4413      	add	r3, r2
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d10b      	bne.n	800d476 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d45e:	4a0c      	ldr	r2, [pc, #48]	; (800d490 <vQueueUnregisterQueue+0x50>)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2100      	movs	r1, #0
 800d464:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d468:	4a09      	ldr	r2, [pc, #36]	; (800d490 <vQueueUnregisterQueue+0x50>)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	4413      	add	r3, r2
 800d470:	2200      	movs	r2, #0
 800d472:	605a      	str	r2, [r3, #4]
				break;
 800d474:	e006      	b.n	800d484 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3301      	adds	r3, #1
 800d47a:	60fb      	str	r3, [r7, #12]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2b07      	cmp	r3, #7
 800d480:	d9e5      	bls.n	800d44e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	2000fa80 	.word	0x2000fa80

0800d494 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4a4:	f001 fe06 	bl	800f0b4 <vPortEnterCritical>
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4ae:	b25b      	sxtb	r3, r3
 800d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4b4:	d103      	bne.n	800d4be <vQueueWaitForMessageRestricted+0x2a>
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4c4:	b25b      	sxtb	r3, r3
 800d4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4ca:	d103      	bne.n	800d4d4 <vQueueWaitForMessageRestricted+0x40>
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4d4:	f001 fe1e 	bl	800f114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d106      	bne.n	800d4ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	3324      	adds	r3, #36	; 0x24
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fd07 	bl	800defc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d4ee:	6978      	ldr	r0, [r7, #20]
 800d4f0:	f7ff fefb 	bl	800d2ea <prvUnlockQueue>
	}
 800d4f4:	bf00      	nop
 800d4f6:	3718      	adds	r7, #24
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b08e      	sub	sp, #56	; 0x38
 800d500:	af04      	add	r7, sp, #16
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
 800d508:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10a      	bne.n	800d526 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	623b      	str	r3, [r7, #32]
}
 800d522:	bf00      	nop
 800d524:	e7fe      	b.n	800d524 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d10a      	bne.n	800d542 <xTaskCreateStatic+0x46>
	__asm volatile
 800d52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	61fb      	str	r3, [r7, #28]
}
 800d53e:	bf00      	nop
 800d540:	e7fe      	b.n	800d540 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d542:	235c      	movs	r3, #92	; 0x5c
 800d544:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2b5c      	cmp	r3, #92	; 0x5c
 800d54a:	d00a      	beq.n	800d562 <xTaskCreateStatic+0x66>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	61bb      	str	r3, [r7, #24]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d562:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d566:	2b00      	cmp	r3, #0
 800d568:	d01e      	beq.n	800d5a8 <xTaskCreateStatic+0xac>
 800d56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d01b      	beq.n	800d5a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d572:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d578:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57c:	2202      	movs	r2, #2
 800d57e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d582:	2300      	movs	r3, #0
 800d584:	9303      	str	r3, [sp, #12]
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	9302      	str	r3, [sp, #8]
 800d58a:	f107 0314 	add.w	r3, r7, #20
 800d58e:	9301      	str	r3, [sp, #4]
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	68b9      	ldr	r1, [r7, #8]
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f000 f850 	bl	800d640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5a2:	f000 f8dd 	bl	800d760 <prvAddNewTaskToReadyList>
 800d5a6:	e001      	b.n	800d5ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5ac:	697b      	ldr	r3, [r7, #20]
	}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3728      	adds	r7, #40	; 0x28
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b08c      	sub	sp, #48	; 0x30
 800d5ba:	af04      	add	r7, sp, #16
 800d5bc:	60f8      	str	r0, [r7, #12]
 800d5be:	60b9      	str	r1, [r7, #8]
 800d5c0:	603b      	str	r3, [r7, #0]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d5c6:	88fb      	ldrh	r3, [r7, #6]
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f001 fe94 	bl	800f2f8 <pvPortMalloc>
 800d5d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00e      	beq.n	800d5f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d5d8:	205c      	movs	r0, #92	; 0x5c
 800d5da:	f001 fe8d 	bl	800f2f8 <pvPortMalloc>
 800d5de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d003      	beq.n	800d5ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	697a      	ldr	r2, [r7, #20]
 800d5ea:	631a      	str	r2, [r3, #48]	; 0x30
 800d5ec:	e005      	b.n	800d5fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d5ee:	6978      	ldr	r0, [r7, #20]
 800d5f0:	f001 ff4e 	bl	800f490 <vPortFree>
 800d5f4:	e001      	b.n	800d5fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d017      	beq.n	800d630 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	2200      	movs	r2, #0
 800d604:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d608:	88fa      	ldrh	r2, [r7, #6]
 800d60a:	2300      	movs	r3, #0
 800d60c:	9303      	str	r3, [sp, #12]
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	9302      	str	r3, [sp, #8]
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d614:	9301      	str	r3, [sp, #4]
 800d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	68b9      	ldr	r1, [r7, #8]
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 f80e 	bl	800d640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d624:	69f8      	ldr	r0, [r7, #28]
 800d626:	f000 f89b 	bl	800d760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d62a:	2301      	movs	r3, #1
 800d62c:	61bb      	str	r3, [r7, #24]
 800d62e:	e002      	b.n	800d636 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d634:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d636:	69bb      	ldr	r3, [r7, #24]
	}
 800d638:	4618      	mov	r0, r3
 800d63a:	3720      	adds	r7, #32
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b088      	sub	sp, #32
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	461a      	mov	r2, r3
 800d658:	21a5      	movs	r1, #165	; 0xa5
 800d65a:	f002 f86f 	bl	800f73c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d668:	3b01      	subs	r3, #1
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	4413      	add	r3, r2
 800d66e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	f023 0307 	bic.w	r3, r3, #7
 800d676:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	f003 0307 	and.w	r3, r3, #7
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00a      	beq.n	800d698 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d686:	f383 8811 	msr	BASEPRI, r3
 800d68a:	f3bf 8f6f 	isb	sy
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	617b      	str	r3, [r7, #20]
}
 800d694:	bf00      	nop
 800d696:	e7fe      	b.n	800d696 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d01f      	beq.n	800d6de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61fb      	str	r3, [r7, #28]
 800d6a2:	e012      	b.n	800d6ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	7819      	ldrb	r1, [r3, #0]
 800d6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	3334      	adds	r3, #52	; 0x34
 800d6b4:	460a      	mov	r2, r1
 800d6b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6b8:	68ba      	ldr	r2, [r7, #8]
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	4413      	add	r3, r2
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d006      	beq.n	800d6d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	61fb      	str	r3, [r7, #28]
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	2b0f      	cmp	r3, #15
 800d6ce:	d9e9      	bls.n	800d6a4 <prvInitialiseNewTask+0x64>
 800d6d0:	e000      	b.n	800d6d4 <prvInitialiseNewTask+0x94>
			{
				break;
 800d6d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6dc:	e003      	b.n	800d6e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	2b37      	cmp	r3, #55	; 0x37
 800d6ea:	d901      	bls.n	800d6f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d6ec:	2337      	movs	r3, #55	; 0x37
 800d6ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fe:	2200      	movs	r2, #0
 800d700:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d704:	3304      	adds	r3, #4
 800d706:	4618      	mov	r0, r3
 800d708:	f7fe fe56 	bl	800c3b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70e:	3318      	adds	r3, #24
 800d710:	4618      	mov	r0, r3
 800d712:	f7fe fe51 	bl	800c3b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d71a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d72a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	2200      	movs	r2, #0
 800d730:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	68f9      	ldr	r1, [r7, #12]
 800d73e:	69b8      	ldr	r0, [r7, #24]
 800d740:	f001 fb8c 	bl	800ee5c <pxPortInitialiseStack>
 800d744:	4602      	mov	r2, r0
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d756:	bf00      	nop
 800d758:	3720      	adds	r7, #32
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
	...

0800d760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d768:	f001 fca4 	bl	800f0b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d76c:	4b2d      	ldr	r3, [pc, #180]	; (800d824 <prvAddNewTaskToReadyList+0xc4>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3301      	adds	r3, #1
 800d772:	4a2c      	ldr	r2, [pc, #176]	; (800d824 <prvAddNewTaskToReadyList+0xc4>)
 800d774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d776:	4b2c      	ldr	r3, [pc, #176]	; (800d828 <prvAddNewTaskToReadyList+0xc8>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d109      	bne.n	800d792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d77e:	4a2a      	ldr	r2, [pc, #168]	; (800d828 <prvAddNewTaskToReadyList+0xc8>)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d784:	4b27      	ldr	r3, [pc, #156]	; (800d824 <prvAddNewTaskToReadyList+0xc4>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d110      	bne.n	800d7ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d78c:	f000 fd44 	bl	800e218 <prvInitialiseTaskLists>
 800d790:	e00d      	b.n	800d7ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d792:	4b26      	ldr	r3, [pc, #152]	; (800d82c <prvAddNewTaskToReadyList+0xcc>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d109      	bne.n	800d7ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d79a:	4b23      	ldr	r3, [pc, #140]	; (800d828 <prvAddNewTaskToReadyList+0xc8>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d802      	bhi.n	800d7ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d7a8:	4a1f      	ldr	r2, [pc, #124]	; (800d828 <prvAddNewTaskToReadyList+0xc8>)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d7ae:	4b20      	ldr	r3, [pc, #128]	; (800d830 <prvAddNewTaskToReadyList+0xd0>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	4a1e      	ldr	r2, [pc, #120]	; (800d830 <prvAddNewTaskToReadyList+0xd0>)
 800d7b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d7b8:	4b1d      	ldr	r3, [pc, #116]	; (800d830 <prvAddNewTaskToReadyList+0xd0>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c4:	4b1b      	ldr	r3, [pc, #108]	; (800d834 <prvAddNewTaskToReadyList+0xd4>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d903      	bls.n	800d7d4 <prvAddNewTaskToReadyList+0x74>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d0:	4a18      	ldr	r2, [pc, #96]	; (800d834 <prvAddNewTaskToReadyList+0xd4>)
 800d7d2:	6013      	str	r3, [r2, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d8:	4613      	mov	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4413      	add	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4a15      	ldr	r2, [pc, #84]	; (800d838 <prvAddNewTaskToReadyList+0xd8>)
 800d7e2:	441a      	add	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	4610      	mov	r0, r2
 800d7ec:	f7fe fdf1 	bl	800c3d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d7f0:	f001 fc90 	bl	800f114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d7f4:	4b0d      	ldr	r3, [pc, #52]	; (800d82c <prvAddNewTaskToReadyList+0xcc>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00e      	beq.n	800d81a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d7fc:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <prvAddNewTaskToReadyList+0xc8>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d806:	429a      	cmp	r2, r3
 800d808:	d207      	bcs.n	800d81a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d80a:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <prvAddNewTaskToReadyList+0xdc>)
 800d80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d810:	601a      	str	r2, [r3, #0]
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d81a:	bf00      	nop
 800d81c:	3708      	adds	r7, #8
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	20000d08 	.word	0x20000d08
 800d828:	20000834 	.word	0x20000834
 800d82c:	20000d14 	.word	0x20000d14
 800d830:	20000d24 	.word	0x20000d24
 800d834:	20000d10 	.word	0x20000d10
 800d838:	20000838 	.word	0x20000838
 800d83c:	e000ed04 	.word	0xe000ed04

0800d840 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08a      	sub	sp, #40	; 0x28
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d84a:	2300      	movs	r3, #0
 800d84c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <vTaskDelayUntil+0x2a>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	617b      	str	r3, [r7, #20]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10a      	bne.n	800d886 <vTaskDelayUntil+0x46>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	613b      	str	r3, [r7, #16]
}
 800d882:	bf00      	nop
 800d884:	e7fe      	b.n	800d884 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d886:	4b2a      	ldr	r3, [pc, #168]	; (800d930 <vTaskDelayUntil+0xf0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00a      	beq.n	800d8a4 <vTaskDelayUntil+0x64>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	60fb      	str	r3, [r7, #12]
}
 800d8a0:	bf00      	nop
 800d8a2:	e7fe      	b.n	800d8a2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d8a4:	f000 f8e4 	bl	800da70 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d8a8:	4b22      	ldr	r3, [pc, #136]	; (800d934 <vTaskDelayUntil+0xf4>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6a3a      	ldr	r2, [r7, #32]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d20b      	bcs.n	800d8da <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	69fa      	ldr	r2, [r7, #28]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d211      	bcs.n	800d8f0 <vTaskDelayUntil+0xb0>
 800d8cc:	69fa      	ldr	r2, [r7, #28]
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d90d      	bls.n	800d8f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d8d8:	e00a      	b.n	800d8f0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	69fa      	ldr	r2, [r7, #28]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d303      	bcc.n	800d8ec <vTaskDelayUntil+0xac>
 800d8e4:	69fa      	ldr	r2, [r7, #28]
 800d8e6:	6a3b      	ldr	r3, [r7, #32]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d901      	bls.n	800d8f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	69fa      	ldr	r2, [r7, #28]
 800d8f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d006      	beq.n	800d90a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d8fc:	69fa      	ldr	r2, [r7, #28]
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	2100      	movs	r1, #0
 800d904:	4618      	mov	r0, r3
 800d906:	f000 fee7 	bl	800e6d8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d90a:	f000 f8bf 	bl	800da8c <xTaskResumeAll>
 800d90e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d107      	bne.n	800d926 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d916:	4b08      	ldr	r3, [pc, #32]	; (800d938 <vTaskDelayUntil+0xf8>)
 800d918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d926:	bf00      	nop
 800d928:	3728      	adds	r7, #40	; 0x28
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	20000d30 	.word	0x20000d30
 800d934:	20000d0c 	.word	0x20000d0c
 800d938:	e000ed04 	.word	0xe000ed04

0800d93c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d944:	2300      	movs	r3, #0
 800d946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d017      	beq.n	800d97e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d94e:	4b13      	ldr	r3, [pc, #76]	; (800d99c <vTaskDelay+0x60>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <vTaskDelay+0x30>
	__asm volatile
 800d956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	60bb      	str	r3, [r7, #8]
}
 800d968:	bf00      	nop
 800d96a:	e7fe      	b.n	800d96a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d96c:	f000 f880 	bl	800da70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d970:	2100      	movs	r1, #0
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 feb0 	bl	800e6d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d978:	f000 f888 	bl	800da8c <xTaskResumeAll>
 800d97c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d107      	bne.n	800d994 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d984:	4b06      	ldr	r3, [pc, #24]	; (800d9a0 <vTaskDelay+0x64>)
 800d986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d98a:	601a      	str	r2, [r3, #0]
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d994:	bf00      	nop
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	20000d30 	.word	0x20000d30
 800d9a0:	e000ed04 	.word	0xe000ed04

0800d9a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b08a      	sub	sp, #40	; 0x28
 800d9a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d9b2:	463a      	mov	r2, r7
 800d9b4:	1d39      	adds	r1, r7, #4
 800d9b6:	f107 0308 	add.w	r3, r7, #8
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe faba 	bl	800bf34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	68ba      	ldr	r2, [r7, #8]
 800d9c6:	9202      	str	r2, [sp, #8]
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	460a      	mov	r2, r1
 800d9d2:	4921      	ldr	r1, [pc, #132]	; (800da58 <vTaskStartScheduler+0xb4>)
 800d9d4:	4821      	ldr	r0, [pc, #132]	; (800da5c <vTaskStartScheduler+0xb8>)
 800d9d6:	f7ff fd91 	bl	800d4fc <xTaskCreateStatic>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	4a20      	ldr	r2, [pc, #128]	; (800da60 <vTaskStartScheduler+0xbc>)
 800d9de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9e0:	4b1f      	ldr	r3, [pc, #124]	; (800da60 <vTaskStartScheduler+0xbc>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d002      	beq.n	800d9ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	617b      	str	r3, [r7, #20]
 800d9ec:	e001      	b.n	800d9f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d102      	bne.n	800d9fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d9f8:	f000 fec2 	bl	800e780 <xTimerCreateTimerTask>
 800d9fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d116      	bne.n	800da32 <vTaskStartScheduler+0x8e>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	613b      	str	r3, [r7, #16]
}
 800da16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da18:	4b12      	ldr	r3, [pc, #72]	; (800da64 <vTaskStartScheduler+0xc0>)
 800da1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da20:	4b11      	ldr	r3, [pc, #68]	; (800da68 <vTaskStartScheduler+0xc4>)
 800da22:	2201      	movs	r2, #1
 800da24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da26:	4b11      	ldr	r3, [pc, #68]	; (800da6c <vTaskStartScheduler+0xc8>)
 800da28:	2200      	movs	r2, #0
 800da2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da2c:	f001 faa0 	bl	800ef70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da30:	e00e      	b.n	800da50 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da38:	d10a      	bne.n	800da50 <vTaskStartScheduler+0xac>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	60fb      	str	r3, [r7, #12]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <vTaskStartScheduler+0xaa>
}
 800da50:	bf00      	nop
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	08010a40 	.word	0x08010a40
 800da5c:	0800e1e9 	.word	0x0800e1e9
 800da60:	20000d2c 	.word	0x20000d2c
 800da64:	20000d28 	.word	0x20000d28
 800da68:	20000d14 	.word	0x20000d14
 800da6c:	20000d0c 	.word	0x20000d0c

0800da70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da70:	b480      	push	{r7}
 800da72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da74:	4b04      	ldr	r3, [pc, #16]	; (800da88 <vTaskSuspendAll+0x18>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3301      	adds	r3, #1
 800da7a:	4a03      	ldr	r2, [pc, #12]	; (800da88 <vTaskSuspendAll+0x18>)
 800da7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da7e:	bf00      	nop
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr
 800da88:	20000d30 	.word	0x20000d30

0800da8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da96:	2300      	movs	r3, #0
 800da98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da9a:	4b42      	ldr	r3, [pc, #264]	; (800dba4 <xTaskResumeAll+0x118>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10a      	bne.n	800dab8 <xTaskResumeAll+0x2c>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	603b      	str	r3, [r7, #0]
}
 800dab4:	bf00      	nop
 800dab6:	e7fe      	b.n	800dab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dab8:	f001 fafc 	bl	800f0b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dabc:	4b39      	ldr	r3, [pc, #228]	; (800dba4 <xTaskResumeAll+0x118>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	4a38      	ldr	r2, [pc, #224]	; (800dba4 <xTaskResumeAll+0x118>)
 800dac4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dac6:	4b37      	ldr	r3, [pc, #220]	; (800dba4 <xTaskResumeAll+0x118>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d162      	bne.n	800db94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dace:	4b36      	ldr	r3, [pc, #216]	; (800dba8 <xTaskResumeAll+0x11c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d05e      	beq.n	800db94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dad6:	e02f      	b.n	800db38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dad8:	4b34      	ldr	r3, [pc, #208]	; (800dbac <xTaskResumeAll+0x120>)
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	3318      	adds	r3, #24
 800dae4:	4618      	mov	r0, r3
 800dae6:	f7fe fcd1 	bl	800c48c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	3304      	adds	r3, #4
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fe fccc 	bl	800c48c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf8:	4b2d      	ldr	r3, [pc, #180]	; (800dbb0 <xTaskResumeAll+0x124>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d903      	bls.n	800db08 <xTaskResumeAll+0x7c>
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db04:	4a2a      	ldr	r2, [pc, #168]	; (800dbb0 <xTaskResumeAll+0x124>)
 800db06:	6013      	str	r3, [r2, #0]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db0c:	4613      	mov	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4413      	add	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4a27      	ldr	r2, [pc, #156]	; (800dbb4 <xTaskResumeAll+0x128>)
 800db16:	441a      	add	r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f7fe fc57 	bl	800c3d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db28:	4b23      	ldr	r3, [pc, #140]	; (800dbb8 <xTaskResumeAll+0x12c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2e:	429a      	cmp	r2, r3
 800db30:	d302      	bcc.n	800db38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800db32:	4b22      	ldr	r3, [pc, #136]	; (800dbbc <xTaskResumeAll+0x130>)
 800db34:	2201      	movs	r2, #1
 800db36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db38:	4b1c      	ldr	r3, [pc, #112]	; (800dbac <xTaskResumeAll+0x120>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1cb      	bne.n	800dad8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db46:	f000 fc05 	bl	800e354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db4a:	4b1d      	ldr	r3, [pc, #116]	; (800dbc0 <xTaskResumeAll+0x134>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d010      	beq.n	800db78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db56:	f000 f859 	bl	800dc0c <xTaskIncrementTick>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db60:	4b16      	ldr	r3, [pc, #88]	; (800dbbc <xTaskResumeAll+0x130>)
 800db62:	2201      	movs	r2, #1
 800db64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	3b01      	subs	r3, #1
 800db6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1f1      	bne.n	800db56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db72:	4b13      	ldr	r3, [pc, #76]	; (800dbc0 <xTaskResumeAll+0x134>)
 800db74:	2200      	movs	r2, #0
 800db76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db78:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <xTaskResumeAll+0x130>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d009      	beq.n	800db94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db80:	2301      	movs	r3, #1
 800db82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db84:	4b0f      	ldr	r3, [pc, #60]	; (800dbc4 <xTaskResumeAll+0x138>)
 800db86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db8a:	601a      	str	r2, [r3, #0]
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db94:	f001 fabe 	bl	800f114 <vPortExitCritical>

	return xAlreadyYielded;
 800db98:	68bb      	ldr	r3, [r7, #8]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	20000d30 	.word	0x20000d30
 800dba8:	20000d08 	.word	0x20000d08
 800dbac:	20000cc8 	.word	0x20000cc8
 800dbb0:	20000d10 	.word	0x20000d10
 800dbb4:	20000838 	.word	0x20000838
 800dbb8:	20000834 	.word	0x20000834
 800dbbc:	20000d1c 	.word	0x20000d1c
 800dbc0:	20000d18 	.word	0x20000d18
 800dbc4:	e000ed04 	.word	0xe000ed04

0800dbc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dbce:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <xTaskGetTickCount+0x1c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dbd4:	687b      	ldr	r3, [r7, #4]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	20000d0c 	.word	0x20000d0c

0800dbe8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbee:	f001 fb43 	bl	800f278 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dbf6:	4b04      	ldr	r3, [pc, #16]	; (800dc08 <xTaskGetTickCountFromISR+0x20>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbfc:	683b      	ldr	r3, [r7, #0]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	20000d0c 	.word	0x20000d0c

0800dc0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc12:	2300      	movs	r3, #0
 800dc14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc16:	4b4f      	ldr	r3, [pc, #316]	; (800dd54 <xTaskIncrementTick+0x148>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f040 808f 	bne.w	800dd3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc20:	4b4d      	ldr	r3, [pc, #308]	; (800dd58 <xTaskIncrementTick+0x14c>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3301      	adds	r3, #1
 800dc26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc28:	4a4b      	ldr	r2, [pc, #300]	; (800dd58 <xTaskIncrementTick+0x14c>)
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d120      	bne.n	800dc76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc34:	4b49      	ldr	r3, [pc, #292]	; (800dd5c <xTaskIncrementTick+0x150>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00a      	beq.n	800dc54 <xTaskIncrementTick+0x48>
	__asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	603b      	str	r3, [r7, #0]
}
 800dc50:	bf00      	nop
 800dc52:	e7fe      	b.n	800dc52 <xTaskIncrementTick+0x46>
 800dc54:	4b41      	ldr	r3, [pc, #260]	; (800dd5c <xTaskIncrementTick+0x150>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	4b41      	ldr	r3, [pc, #260]	; (800dd60 <xTaskIncrementTick+0x154>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4a3f      	ldr	r2, [pc, #252]	; (800dd5c <xTaskIncrementTick+0x150>)
 800dc60:	6013      	str	r3, [r2, #0]
 800dc62:	4a3f      	ldr	r2, [pc, #252]	; (800dd60 <xTaskIncrementTick+0x154>)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	4b3e      	ldr	r3, [pc, #248]	; (800dd64 <xTaskIncrementTick+0x158>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	4a3d      	ldr	r2, [pc, #244]	; (800dd64 <xTaskIncrementTick+0x158>)
 800dc70:	6013      	str	r3, [r2, #0]
 800dc72:	f000 fb6f 	bl	800e354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc76:	4b3c      	ldr	r3, [pc, #240]	; (800dd68 <xTaskIncrementTick+0x15c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	693a      	ldr	r2, [r7, #16]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d349      	bcc.n	800dd14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc80:	4b36      	ldr	r3, [pc, #216]	; (800dd5c <xTaskIncrementTick+0x150>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d104      	bne.n	800dc94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc8a:	4b37      	ldr	r3, [pc, #220]	; (800dd68 <xTaskIncrementTick+0x15c>)
 800dc8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc90:	601a      	str	r2, [r3, #0]
					break;
 800dc92:	e03f      	b.n	800dd14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc94:	4b31      	ldr	r3, [pc, #196]	; (800dd5c <xTaskIncrementTick+0x150>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d203      	bcs.n	800dcb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dcac:	4a2e      	ldr	r2, [pc, #184]	; (800dd68 <xTaskIncrementTick+0x15c>)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dcb2:	e02f      	b.n	800dd14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fe fbe7 	bl	800c48c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d004      	beq.n	800dcd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	3318      	adds	r3, #24
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fe fbde 	bl	800c48c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd4:	4b25      	ldr	r3, [pc, #148]	; (800dd6c <xTaskIncrementTick+0x160>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d903      	bls.n	800dce4 <xTaskIncrementTick+0xd8>
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce0:	4a22      	ldr	r2, [pc, #136]	; (800dd6c <xTaskIncrementTick+0x160>)
 800dce2:	6013      	str	r3, [r2, #0]
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce8:	4613      	mov	r3, r2
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	4413      	add	r3, r2
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4a1f      	ldr	r2, [pc, #124]	; (800dd70 <xTaskIncrementTick+0x164>)
 800dcf2:	441a      	add	r2, r3
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	f7fe fb69 	bl	800c3d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd04:	4b1b      	ldr	r3, [pc, #108]	; (800dd74 <xTaskIncrementTick+0x168>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d3b8      	bcc.n	800dc80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd12:	e7b5      	b.n	800dc80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd14:	4b17      	ldr	r3, [pc, #92]	; (800dd74 <xTaskIncrementTick+0x168>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd1a:	4915      	ldr	r1, [pc, #84]	; (800dd70 <xTaskIncrementTick+0x164>)
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	440b      	add	r3, r1
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d901      	bls.n	800dd30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd30:	4b11      	ldr	r3, [pc, #68]	; (800dd78 <xTaskIncrementTick+0x16c>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d007      	beq.n	800dd48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	617b      	str	r3, [r7, #20]
 800dd3c:	e004      	b.n	800dd48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd3e:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <xTaskIncrementTick+0x170>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	3301      	adds	r3, #1
 800dd44:	4a0d      	ldr	r2, [pc, #52]	; (800dd7c <xTaskIncrementTick+0x170>)
 800dd46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd48:	697b      	ldr	r3, [r7, #20]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3718      	adds	r7, #24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	bf00      	nop
 800dd54:	20000d30 	.word	0x20000d30
 800dd58:	20000d0c 	.word	0x20000d0c
 800dd5c:	20000cc0 	.word	0x20000cc0
 800dd60:	20000cc4 	.word	0x20000cc4
 800dd64:	20000d20 	.word	0x20000d20
 800dd68:	20000d28 	.word	0x20000d28
 800dd6c:	20000d10 	.word	0x20000d10
 800dd70:	20000838 	.word	0x20000838
 800dd74:	20000834 	.word	0x20000834
 800dd78:	20000d1c 	.word	0x20000d1c
 800dd7c:	20000d18 	.word	0x20000d18

0800dd80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd86:	4b28      	ldr	r3, [pc, #160]	; (800de28 <vTaskSwitchContext+0xa8>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d003      	beq.n	800dd96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd8e:	4b27      	ldr	r3, [pc, #156]	; (800de2c <vTaskSwitchContext+0xac>)
 800dd90:	2201      	movs	r2, #1
 800dd92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd94:	e041      	b.n	800de1a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800dd96:	4b25      	ldr	r3, [pc, #148]	; (800de2c <vTaskSwitchContext+0xac>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd9c:	4b24      	ldr	r3, [pc, #144]	; (800de30 <vTaskSwitchContext+0xb0>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	60fb      	str	r3, [r7, #12]
 800dda2:	e010      	b.n	800ddc6 <vTaskSwitchContext+0x46>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10a      	bne.n	800ddc0 <vTaskSwitchContext+0x40>
	__asm volatile
 800ddaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddae:	f383 8811 	msr	BASEPRI, r3
 800ddb2:	f3bf 8f6f 	isb	sy
 800ddb6:	f3bf 8f4f 	dsb	sy
 800ddba:	607b      	str	r3, [r7, #4]
}
 800ddbc:	bf00      	nop
 800ddbe:	e7fe      	b.n	800ddbe <vTaskSwitchContext+0x3e>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	60fb      	str	r3, [r7, #12]
 800ddc6:	491b      	ldr	r1, [pc, #108]	; (800de34 <vTaskSwitchContext+0xb4>)
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	4613      	mov	r3, r2
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	4413      	add	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	440b      	add	r3, r1
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0e4      	beq.n	800dda4 <vTaskSwitchContext+0x24>
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	4613      	mov	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4413      	add	r3, r2
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4a13      	ldr	r2, [pc, #76]	; (800de34 <vTaskSwitchContext+0xb4>)
 800dde6:	4413      	add	r3, r2
 800dde8:	60bb      	str	r3, [r7, #8]
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	685a      	ldr	r2, [r3, #4]
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	605a      	str	r2, [r3, #4]
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d104      	bne.n	800de0a <vTaskSwitchContext+0x8a>
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	605a      	str	r2, [r3, #4]
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	4a09      	ldr	r2, [pc, #36]	; (800de38 <vTaskSwitchContext+0xb8>)
 800de12:	6013      	str	r3, [r2, #0]
 800de14:	4a06      	ldr	r2, [pc, #24]	; (800de30 <vTaskSwitchContext+0xb0>)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6013      	str	r3, [r2, #0]
}
 800de1a:	bf00      	nop
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20000d30 	.word	0x20000d30
 800de2c:	20000d1c 	.word	0x20000d1c
 800de30:	20000d10 	.word	0x20000d10
 800de34:	20000838 	.word	0x20000838
 800de38:	20000834 	.word	0x20000834

0800de3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10a      	bne.n	800de62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800de4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de50:	f383 8811 	msr	BASEPRI, r3
 800de54:	f3bf 8f6f 	isb	sy
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	60fb      	str	r3, [r7, #12]
}
 800de5e:	bf00      	nop
 800de60:	e7fe      	b.n	800de60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de62:	4b07      	ldr	r3, [pc, #28]	; (800de80 <vTaskPlaceOnEventList+0x44>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3318      	adds	r3, #24
 800de68:	4619      	mov	r1, r3
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7fe fad5 	bl	800c41a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de70:	2101      	movs	r1, #1
 800de72:	6838      	ldr	r0, [r7, #0]
 800de74:	f000 fc30 	bl	800e6d8 <prvAddCurrentTaskToDelayedList>
}
 800de78:	bf00      	nop
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	20000834 	.word	0x20000834

0800de84 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10a      	bne.n	800deac <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	617b      	str	r3, [r7, #20]
}
 800dea8:	bf00      	nop
 800deaa:	e7fe      	b.n	800deaa <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800deac:	4b11      	ldr	r3, [pc, #68]	; (800def4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d10a      	bne.n	800deca <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800deb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb8:	f383 8811 	msr	BASEPRI, r3
 800debc:	f3bf 8f6f 	isb	sy
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	613b      	str	r3, [r7, #16]
}
 800dec6:	bf00      	nop
 800dec8:	e7fe      	b.n	800dec8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800deca:	4b0b      	ldr	r3, [pc, #44]	; (800def8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ded4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ded6:	4b08      	ldr	r3, [pc, #32]	; (800def8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3318      	adds	r3, #24
 800dedc:	4619      	mov	r1, r3
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f7fe fa77 	bl	800c3d2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dee4:	2101      	movs	r1, #1
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 fbf6 	bl	800e6d8 <prvAddCurrentTaskToDelayedList>
}
 800deec:	bf00      	nop
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	20000d30 	.word	0x20000d30
 800def8:	20000834 	.word	0x20000834

0800defc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	617b      	str	r3, [r7, #20]
}
 800df20:	bf00      	nop
 800df22:	e7fe      	b.n	800df22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df24:	4b0a      	ldr	r3, [pc, #40]	; (800df50 <vTaskPlaceOnEventListRestricted+0x54>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	3318      	adds	r3, #24
 800df2a:	4619      	mov	r1, r3
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7fe fa50 	bl	800c3d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d002      	beq.n	800df3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800df38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	68b8      	ldr	r0, [r7, #8]
 800df42:	f000 fbc9 	bl	800e6d8 <prvAddCurrentTaskToDelayedList>
	}
 800df46:	bf00      	nop
 800df48:	3718      	adds	r7, #24
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	20000834 	.word	0x20000834

0800df54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10a      	bne.n	800df80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	60fb      	str	r3, [r7, #12]
}
 800df7c:	bf00      	nop
 800df7e:	e7fe      	b.n	800df7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	3318      	adds	r3, #24
 800df84:	4618      	mov	r0, r3
 800df86:	f7fe fa81 	bl	800c48c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df8a:	4b1e      	ldr	r3, [pc, #120]	; (800e004 <xTaskRemoveFromEventList+0xb0>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d11d      	bne.n	800dfce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	3304      	adds	r3, #4
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fa78 	bl	800c48c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa0:	4b19      	ldr	r3, [pc, #100]	; (800e008 <xTaskRemoveFromEventList+0xb4>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d903      	bls.n	800dfb0 <xTaskRemoveFromEventList+0x5c>
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfac:	4a16      	ldr	r2, [pc, #88]	; (800e008 <xTaskRemoveFromEventList+0xb4>)
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	4413      	add	r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4a13      	ldr	r2, [pc, #76]	; (800e00c <xTaskRemoveFromEventList+0xb8>)
 800dfbe:	441a      	add	r2, r3
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	3304      	adds	r3, #4
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	f7fe fa03 	bl	800c3d2 <vListInsertEnd>
 800dfcc:	e005      	b.n	800dfda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	3318      	adds	r3, #24
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	480e      	ldr	r0, [pc, #56]	; (800e010 <xTaskRemoveFromEventList+0xbc>)
 800dfd6:	f7fe f9fc 	bl	800c3d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfde:	4b0d      	ldr	r3, [pc, #52]	; (800e014 <xTaskRemoveFromEventList+0xc0>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d905      	bls.n	800dff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dfec:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <xTaskRemoveFromEventList+0xc4>)
 800dfee:	2201      	movs	r2, #1
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	e001      	b.n	800dff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dff4:	2300      	movs	r3, #0
 800dff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dff8:	697b      	ldr	r3, [r7, #20]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	20000d30 	.word	0x20000d30
 800e008:	20000d10 	.word	0x20000d10
 800e00c:	20000838 	.word	0x20000838
 800e010:	20000cc8 	.word	0x20000cc8
 800e014:	20000834 	.word	0x20000834
 800e018:	20000d1c 	.word	0x20000d1c

0800e01c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e026:	4b29      	ldr	r3, [pc, #164]	; (800e0cc <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d10a      	bne.n	800e044 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	613b      	str	r3, [r7, #16]
}
 800e040:	bf00      	nop
 800e042:	e7fe      	b.n	800e042 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10a      	bne.n	800e070 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	60fb      	str	r3, [r7, #12]
}
 800e06c:	bf00      	nop
 800e06e:	e7fe      	b.n	800e06e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7fe fa0b 	bl	800c48c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	3304      	adds	r3, #4
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fa06 	bl	800c48c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e084:	4b12      	ldr	r3, [pc, #72]	; (800e0d0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d903      	bls.n	800e094 <vTaskRemoveFromUnorderedEventList+0x78>
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e090:	4a0f      	ldr	r2, [pc, #60]	; (800e0d0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e092:	6013      	str	r3, [r2, #0]
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e098:	4613      	mov	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	4a0c      	ldr	r2, [pc, #48]	; (800e0d4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e0a2:	441a      	add	r2, r3
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	f7fe f991 	bl	800c3d2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b4:	4b08      	ldr	r3, [pc, #32]	; (800e0d8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d902      	bls.n	800e0c4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e0be:	4b07      	ldr	r3, [pc, #28]	; (800e0dc <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	601a      	str	r2, [r3, #0]
	}
}
 800e0c4:	bf00      	nop
 800e0c6:	3718      	adds	r7, #24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	20000d30 	.word	0x20000d30
 800e0d0:	20000d10 	.word	0x20000d10
 800e0d4:	20000838 	.word	0x20000838
 800e0d8:	20000834 	.word	0x20000834
 800e0dc:	20000d1c 	.word	0x20000d1c

0800e0e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0e8:	4b06      	ldr	r3, [pc, #24]	; (800e104 <vTaskInternalSetTimeOutState+0x24>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0f0:	4b05      	ldr	r3, [pc, #20]	; (800e108 <vTaskInternalSetTimeOutState+0x28>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	605a      	str	r2, [r3, #4]
}
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	20000d20 	.word	0x20000d20
 800e108:	20000d0c 	.word	0x20000d0c

0800e10c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b088      	sub	sp, #32
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10a      	bne.n	800e132 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e120:	f383 8811 	msr	BASEPRI, r3
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	613b      	str	r3, [r7, #16]
}
 800e12e:	bf00      	nop
 800e130:	e7fe      	b.n	800e130 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	60fb      	str	r3, [r7, #12]
}
 800e14a:	bf00      	nop
 800e14c:	e7fe      	b.n	800e14c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e14e:	f000 ffb1 	bl	800f0b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e152:	4b1d      	ldr	r3, [pc, #116]	; (800e1c8 <xTaskCheckForTimeOut+0xbc>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	69ba      	ldr	r2, [r7, #24]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e16a:	d102      	bne.n	800e172 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e16c:	2300      	movs	r3, #0
 800e16e:	61fb      	str	r3, [r7, #28]
 800e170:	e023      	b.n	800e1ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <xTaskCheckForTimeOut+0xc0>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d007      	beq.n	800e18e <xTaskCheckForTimeOut+0x82>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	69ba      	ldr	r2, [r7, #24]
 800e184:	429a      	cmp	r2, r3
 800e186:	d302      	bcc.n	800e18e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e188:	2301      	movs	r3, #1
 800e18a:	61fb      	str	r3, [r7, #28]
 800e18c:	e015      	b.n	800e1ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	429a      	cmp	r2, r3
 800e196:	d20b      	bcs.n	800e1b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	1ad2      	subs	r2, r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f7ff ff9b 	bl	800e0e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	61fb      	str	r3, [r7, #28]
 800e1ae:	e004      	b.n	800e1ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1ba:	f000 ffab 	bl	800f114 <vPortExitCritical>

	return xReturn;
 800e1be:	69fb      	ldr	r3, [r7, #28]
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3720      	adds	r7, #32
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	20000d0c 	.word	0x20000d0c
 800e1cc:	20000d20 	.word	0x20000d20

0800e1d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1d4:	4b03      	ldr	r3, [pc, #12]	; (800e1e4 <vTaskMissedYield+0x14>)
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	601a      	str	r2, [r3, #0]
}
 800e1da:	bf00      	nop
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr
 800e1e4:	20000d1c 	.word	0x20000d1c

0800e1e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1f0:	f000 f852 	bl	800e298 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1f4:	4b06      	ldr	r3, [pc, #24]	; (800e210 <prvIdleTask+0x28>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d9f9      	bls.n	800e1f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e1fc:	4b05      	ldr	r3, [pc, #20]	; (800e214 <prvIdleTask+0x2c>)
 800e1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e20c:	e7f0      	b.n	800e1f0 <prvIdleTask+0x8>
 800e20e:	bf00      	nop
 800e210:	20000838 	.word	0x20000838
 800e214:	e000ed04 	.word	0xe000ed04

0800e218 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e21e:	2300      	movs	r3, #0
 800e220:	607b      	str	r3, [r7, #4]
 800e222:	e00c      	b.n	800e23e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4a12      	ldr	r2, [pc, #72]	; (800e278 <prvInitialiseTaskLists+0x60>)
 800e230:	4413      	add	r3, r2
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe f8a0 	bl	800c378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	3301      	adds	r3, #1
 800e23c:	607b      	str	r3, [r7, #4]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b37      	cmp	r3, #55	; 0x37
 800e242:	d9ef      	bls.n	800e224 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e244:	480d      	ldr	r0, [pc, #52]	; (800e27c <prvInitialiseTaskLists+0x64>)
 800e246:	f7fe f897 	bl	800c378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e24a:	480d      	ldr	r0, [pc, #52]	; (800e280 <prvInitialiseTaskLists+0x68>)
 800e24c:	f7fe f894 	bl	800c378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e250:	480c      	ldr	r0, [pc, #48]	; (800e284 <prvInitialiseTaskLists+0x6c>)
 800e252:	f7fe f891 	bl	800c378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e256:	480c      	ldr	r0, [pc, #48]	; (800e288 <prvInitialiseTaskLists+0x70>)
 800e258:	f7fe f88e 	bl	800c378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e25c:	480b      	ldr	r0, [pc, #44]	; (800e28c <prvInitialiseTaskLists+0x74>)
 800e25e:	f7fe f88b 	bl	800c378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e262:	4b0b      	ldr	r3, [pc, #44]	; (800e290 <prvInitialiseTaskLists+0x78>)
 800e264:	4a05      	ldr	r2, [pc, #20]	; (800e27c <prvInitialiseTaskLists+0x64>)
 800e266:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e268:	4b0a      	ldr	r3, [pc, #40]	; (800e294 <prvInitialiseTaskLists+0x7c>)
 800e26a:	4a05      	ldr	r2, [pc, #20]	; (800e280 <prvInitialiseTaskLists+0x68>)
 800e26c:	601a      	str	r2, [r3, #0]
}
 800e26e:	bf00      	nop
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20000838 	.word	0x20000838
 800e27c:	20000c98 	.word	0x20000c98
 800e280:	20000cac 	.word	0x20000cac
 800e284:	20000cc8 	.word	0x20000cc8
 800e288:	20000cdc 	.word	0x20000cdc
 800e28c:	20000cf4 	.word	0x20000cf4
 800e290:	20000cc0 	.word	0x20000cc0
 800e294:	20000cc4 	.word	0x20000cc4

0800e298 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e29e:	e019      	b.n	800e2d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2a0:	f000 ff08 	bl	800f0b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2a4:	4b10      	ldr	r3, [pc, #64]	; (800e2e8 <prvCheckTasksWaitingTermination+0x50>)
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fe f8eb 	bl	800c48c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2b6:	4b0d      	ldr	r3, [pc, #52]	; (800e2ec <prvCheckTasksWaitingTermination+0x54>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	4a0b      	ldr	r2, [pc, #44]	; (800e2ec <prvCheckTasksWaitingTermination+0x54>)
 800e2be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2c0:	4b0b      	ldr	r3, [pc, #44]	; (800e2f0 <prvCheckTasksWaitingTermination+0x58>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3b01      	subs	r3, #1
 800e2c6:	4a0a      	ldr	r2, [pc, #40]	; (800e2f0 <prvCheckTasksWaitingTermination+0x58>)
 800e2c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2ca:	f000 ff23 	bl	800f114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f810 	bl	800e2f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2d4:	4b06      	ldr	r3, [pc, #24]	; (800e2f0 <prvCheckTasksWaitingTermination+0x58>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1e1      	bne.n	800e2a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2dc:	bf00      	nop
 800e2de:	bf00      	nop
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20000cdc 	.word	0x20000cdc
 800e2ec:	20000d08 	.word	0x20000d08
 800e2f0:	20000cf0 	.word	0x20000cf0

0800e2f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e302:	2b00      	cmp	r3, #0
 800e304:	d108      	bne.n	800e318 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e30a:	4618      	mov	r0, r3
 800e30c:	f001 f8c0 	bl	800f490 <vPortFree>
				vPortFree( pxTCB );
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f001 f8bd 	bl	800f490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e316:	e018      	b.n	800e34a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d103      	bne.n	800e32a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f001 f8b4 	bl	800f490 <vPortFree>
	}
 800e328:	e00f      	b.n	800e34a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e330:	2b02      	cmp	r3, #2
 800e332:	d00a      	beq.n	800e34a <prvDeleteTCB+0x56>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	60fb      	str	r3, [r7, #12]
}
 800e346:	bf00      	nop
 800e348:	e7fe      	b.n	800e348 <prvDeleteTCB+0x54>
	}
 800e34a:	bf00      	nop
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
	...

0800e354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e35a:	4b0c      	ldr	r3, [pc, #48]	; (800e38c <prvResetNextTaskUnblockTime+0x38>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d104      	bne.n	800e36e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e364:	4b0a      	ldr	r3, [pc, #40]	; (800e390 <prvResetNextTaskUnblockTime+0x3c>)
 800e366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e36a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e36c:	e008      	b.n	800e380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e36e:	4b07      	ldr	r3, [pc, #28]	; (800e38c <prvResetNextTaskUnblockTime+0x38>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	4a04      	ldr	r2, [pc, #16]	; (800e390 <prvResetNextTaskUnblockTime+0x3c>)
 800e37e:	6013      	str	r3, [r2, #0]
}
 800e380:	bf00      	nop
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr
 800e38c:	20000cc0 	.word	0x20000cc0
 800e390:	20000d28 	.word	0x20000d28

0800e394 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e39a:	4b0b      	ldr	r3, [pc, #44]	; (800e3c8 <xTaskGetSchedulerState+0x34>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d102      	bne.n	800e3a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	607b      	str	r3, [r7, #4]
 800e3a6:	e008      	b.n	800e3ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3a8:	4b08      	ldr	r3, [pc, #32]	; (800e3cc <xTaskGetSchedulerState+0x38>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	607b      	str	r3, [r7, #4]
 800e3b4:	e001      	b.n	800e3ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3ba:	687b      	ldr	r3, [r7, #4]
	}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	20000d14 	.word	0x20000d14
 800e3cc:	20000d30 	.word	0x20000d30

0800e3d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d051      	beq.n	800e48a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ea:	4b2a      	ldr	r3, [pc, #168]	; (800e494 <xTaskPriorityInherit+0xc4>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d241      	bcs.n	800e478 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	699b      	ldr	r3, [r3, #24]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	db06      	blt.n	800e40a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3fc:	4b25      	ldr	r3, [pc, #148]	; (800e494 <xTaskPriorityInherit+0xc4>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e402:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	6959      	ldr	r1, [r3, #20]
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e412:	4613      	mov	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4a1f      	ldr	r2, [pc, #124]	; (800e498 <xTaskPriorityInherit+0xc8>)
 800e41c:	4413      	add	r3, r2
 800e41e:	4299      	cmp	r1, r3
 800e420:	d122      	bne.n	800e468 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	3304      	adds	r3, #4
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe f830 	bl	800c48c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e42c:	4b19      	ldr	r3, [pc, #100]	; (800e494 <xTaskPriorityInherit+0xc4>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e43a:	4b18      	ldr	r3, [pc, #96]	; (800e49c <xTaskPriorityInherit+0xcc>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d903      	bls.n	800e44a <xTaskPriorityInherit+0x7a>
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e446:	4a15      	ldr	r2, [pc, #84]	; (800e49c <xTaskPriorityInherit+0xcc>)
 800e448:	6013      	str	r3, [r2, #0]
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e44e:	4613      	mov	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4413      	add	r3, r2
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4a10      	ldr	r2, [pc, #64]	; (800e498 <xTaskPriorityInherit+0xc8>)
 800e458:	441a      	add	r2, r3
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4619      	mov	r1, r3
 800e460:	4610      	mov	r0, r2
 800e462:	f7fd ffb6 	bl	800c3d2 <vListInsertEnd>
 800e466:	e004      	b.n	800e472 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e468:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <xTaskPriorityInherit+0xc4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e472:	2301      	movs	r3, #1
 800e474:	60fb      	str	r3, [r7, #12]
 800e476:	e008      	b.n	800e48a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e47c:	4b05      	ldr	r3, [pc, #20]	; (800e494 <xTaskPriorityInherit+0xc4>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e482:	429a      	cmp	r2, r3
 800e484:	d201      	bcs.n	800e48a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e486:	2301      	movs	r3, #1
 800e488:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e48a:	68fb      	ldr	r3, [r7, #12]
	}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20000834 	.word	0x20000834
 800e498:	20000838 	.word	0x20000838
 800e49c:	20000d10 	.word	0x20000d10

0800e4a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d056      	beq.n	800e564 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4b6:	4b2e      	ldr	r3, [pc, #184]	; (800e570 <xTaskPriorityDisinherit+0xd0>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	693a      	ldr	r2, [r7, #16]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d00a      	beq.n	800e4d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	60fb      	str	r3, [r7, #12]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10a      	bne.n	800e4f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	60bb      	str	r3, [r7, #8]
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4f8:	1e5a      	subs	r2, r3, #1
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e506:	429a      	cmp	r2, r3
 800e508:	d02c      	beq.n	800e564 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d128      	bne.n	800e564 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	3304      	adds	r3, #4
 800e516:	4618      	mov	r0, r3
 800e518:	f7fd ffb8 	bl	800c48c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e528:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e534:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <xTaskPriorityDisinherit+0xd4>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d903      	bls.n	800e544 <xTaskPriorityDisinherit+0xa4>
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e540:	4a0c      	ldr	r2, [pc, #48]	; (800e574 <xTaskPriorityDisinherit+0xd4>)
 800e542:	6013      	str	r3, [r2, #0]
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e548:	4613      	mov	r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4413      	add	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4a09      	ldr	r2, [pc, #36]	; (800e578 <xTaskPriorityDisinherit+0xd8>)
 800e552:	441a      	add	r2, r3
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	3304      	adds	r3, #4
 800e558:	4619      	mov	r1, r3
 800e55a:	4610      	mov	r0, r2
 800e55c:	f7fd ff39 	bl	800c3d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e560:	2301      	movs	r3, #1
 800e562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e564:	697b      	ldr	r3, [r7, #20]
	}
 800e566:	4618      	mov	r0, r3
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	20000834 	.word	0x20000834
 800e574:	20000d10 	.word	0x20000d10
 800e578:	20000838 	.word	0x20000838

0800e57c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b088      	sub	sp, #32
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e58a:	2301      	movs	r3, #1
 800e58c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d06a      	beq.n	800e66a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e594:	69bb      	ldr	r3, [r7, #24]
 800e596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60fb      	str	r3, [r7, #12]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5b6:	683a      	ldr	r2, [r7, #0]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d902      	bls.n	800e5c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	61fb      	str	r3, [r7, #28]
 800e5c0:	e002      	b.n	800e5c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5cc:	69fa      	ldr	r2, [r7, #28]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d04b      	beq.n	800e66a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d6:	697a      	ldr	r2, [r7, #20]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d146      	bne.n	800e66a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5dc:	4b25      	ldr	r3, [pc, #148]	; (800e674 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69ba      	ldr	r2, [r7, #24]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d10a      	bne.n	800e5fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	60bb      	str	r3, [r7, #8]
}
 800e5f8:	bf00      	nop
 800e5fa:	e7fe      	b.n	800e5fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e600:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	69fa      	ldr	r2, [r7, #28]
 800e606:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	699b      	ldr	r3, [r3, #24]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	db04      	blt.n	800e61a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	6959      	ldr	r1, [r3, #20]
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	4613      	mov	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	4a13      	ldr	r2, [pc, #76]	; (800e678 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e62a:	4413      	add	r3, r2
 800e62c:	4299      	cmp	r1, r3
 800e62e:	d11c      	bne.n	800e66a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	3304      	adds	r3, #4
 800e634:	4618      	mov	r0, r3
 800e636:	f7fd ff29 	bl	800c48c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63e:	4b0f      	ldr	r3, [pc, #60]	; (800e67c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	429a      	cmp	r2, r3
 800e644:	d903      	bls.n	800e64e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64a:	4a0c      	ldr	r2, [pc, #48]	; (800e67c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	69bb      	ldr	r3, [r7, #24]
 800e650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e652:	4613      	mov	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4a07      	ldr	r2, [pc, #28]	; (800e678 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e65c:	441a      	add	r2, r3
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	3304      	adds	r3, #4
 800e662:	4619      	mov	r1, r3
 800e664:	4610      	mov	r0, r2
 800e666:	f7fd feb4 	bl	800c3d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e66a:	bf00      	nop
 800e66c:	3720      	adds	r7, #32
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	20000834 	.word	0x20000834
 800e678:	20000838 	.word	0x20000838
 800e67c:	20000d10 	.word	0x20000d10

0800e680 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e686:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <uxTaskResetEventItemValue+0x2c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	699b      	ldr	r3, [r3, #24]
 800e68c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e68e:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <uxTaskResetEventItemValue+0x2c>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e694:	4b05      	ldr	r3, [pc, #20]	; (800e6ac <uxTaskResetEventItemValue+0x2c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e69c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e69e:	687b      	ldr	r3, [r7, #4]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr
 800e6ac:	20000834 	.word	0x20000834

0800e6b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e6b0:	b480      	push	{r7}
 800e6b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6b4:	4b07      	ldr	r3, [pc, #28]	; (800e6d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d004      	beq.n	800e6c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6bc:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6c2:	3201      	adds	r2, #1
 800e6c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e6c6:	4b03      	ldr	r3, [pc, #12]	; (800e6d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
	}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	20000834 	.word	0x20000834

0800e6d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6e2:	4b21      	ldr	r3, [pc, #132]	; (800e768 <prvAddCurrentTaskToDelayedList+0x90>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6e8:	4b20      	ldr	r3, [pc, #128]	; (800e76c <prvAddCurrentTaskToDelayedList+0x94>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fd fecc 	bl	800c48c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6fa:	d10a      	bne.n	800e712 <prvAddCurrentTaskToDelayedList+0x3a>
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d007      	beq.n	800e712 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e702:	4b1a      	ldr	r3, [pc, #104]	; (800e76c <prvAddCurrentTaskToDelayedList+0x94>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3304      	adds	r3, #4
 800e708:	4619      	mov	r1, r3
 800e70a:	4819      	ldr	r0, [pc, #100]	; (800e770 <prvAddCurrentTaskToDelayedList+0x98>)
 800e70c:	f7fd fe61 	bl	800c3d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e710:	e026      	b.n	800e760 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e712:	68fa      	ldr	r2, [r7, #12]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	4413      	add	r3, r2
 800e718:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e71a:	4b14      	ldr	r3, [pc, #80]	; (800e76c <prvAddCurrentTaskToDelayedList+0x94>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e722:	68ba      	ldr	r2, [r7, #8]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	429a      	cmp	r2, r3
 800e728:	d209      	bcs.n	800e73e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e72a:	4b12      	ldr	r3, [pc, #72]	; (800e774 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	4b0f      	ldr	r3, [pc, #60]	; (800e76c <prvAddCurrentTaskToDelayedList+0x94>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	3304      	adds	r3, #4
 800e734:	4619      	mov	r1, r3
 800e736:	4610      	mov	r0, r2
 800e738:	f7fd fe6f 	bl	800c41a <vListInsert>
}
 800e73c:	e010      	b.n	800e760 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e73e:	4b0e      	ldr	r3, [pc, #56]	; (800e778 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	4b0a      	ldr	r3, [pc, #40]	; (800e76c <prvAddCurrentTaskToDelayedList+0x94>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3304      	adds	r3, #4
 800e748:	4619      	mov	r1, r3
 800e74a:	4610      	mov	r0, r2
 800e74c:	f7fd fe65 	bl	800c41a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e750:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	68ba      	ldr	r2, [r7, #8]
 800e756:	429a      	cmp	r2, r3
 800e758:	d202      	bcs.n	800e760 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e75a:	4a08      	ldr	r2, [pc, #32]	; (800e77c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	6013      	str	r3, [r2, #0]
}
 800e760:	bf00      	nop
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	20000d0c 	.word	0x20000d0c
 800e76c:	20000834 	.word	0x20000834
 800e770:	20000cf4 	.word	0x20000cf4
 800e774:	20000cc4 	.word	0x20000cc4
 800e778:	20000cc0 	.word	0x20000cc0
 800e77c:	20000d28 	.word	0x20000d28

0800e780 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b08a      	sub	sp, #40	; 0x28
 800e784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e786:	2300      	movs	r3, #0
 800e788:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e78a:	f000 fb07 	bl	800ed9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e78e:	4b1c      	ldr	r3, [pc, #112]	; (800e800 <xTimerCreateTimerTask+0x80>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d021      	beq.n	800e7da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e796:	2300      	movs	r3, #0
 800e798:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e79e:	1d3a      	adds	r2, r7, #4
 800e7a0:	f107 0108 	add.w	r1, r7, #8
 800e7a4:	f107 030c 	add.w	r3, r7, #12
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fd fbdd 	bl	800bf68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e7ae:	6879      	ldr	r1, [r7, #4]
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	68fa      	ldr	r2, [r7, #12]
 800e7b4:	9202      	str	r2, [sp, #8]
 800e7b6:	9301      	str	r3, [sp, #4]
 800e7b8:	2302      	movs	r3, #2
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	2300      	movs	r3, #0
 800e7be:	460a      	mov	r2, r1
 800e7c0:	4910      	ldr	r1, [pc, #64]	; (800e804 <xTimerCreateTimerTask+0x84>)
 800e7c2:	4811      	ldr	r0, [pc, #68]	; (800e808 <xTimerCreateTimerTask+0x88>)
 800e7c4:	f7fe fe9a 	bl	800d4fc <xTaskCreateStatic>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	4a10      	ldr	r2, [pc, #64]	; (800e80c <xTimerCreateTimerTask+0x8c>)
 800e7cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e7ce:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <xTimerCreateTimerTask+0x8c>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d10a      	bne.n	800e7f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	613b      	str	r3, [r7, #16]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e7f6:	697b      	ldr	r3, [r7, #20]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3718      	adds	r7, #24
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	20000d64 	.word	0x20000d64
 800e804:	08010a48 	.word	0x08010a48
 800e808:	0800e945 	.word	0x0800e945
 800e80c:	20000d68 	.word	0x20000d68

0800e810 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b08a      	sub	sp, #40	; 0x28
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]
 800e81c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e81e:	2300      	movs	r3, #0
 800e820:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10a      	bne.n	800e83e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	623b      	str	r3, [r7, #32]
}
 800e83a:	bf00      	nop
 800e83c:	e7fe      	b.n	800e83c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e83e:	4b1a      	ldr	r3, [pc, #104]	; (800e8a8 <xTimerGenericCommand+0x98>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d02a      	beq.n	800e89c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	2b05      	cmp	r3, #5
 800e856:	dc18      	bgt.n	800e88a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e858:	f7ff fd9c 	bl	800e394 <xTaskGetSchedulerState>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d109      	bne.n	800e876 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e862:	4b11      	ldr	r3, [pc, #68]	; (800e8a8 <xTimerGenericCommand+0x98>)
 800e864:	6818      	ldr	r0, [r3, #0]
 800e866:	f107 0110 	add.w	r1, r7, #16
 800e86a:	2300      	movs	r3, #0
 800e86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e86e:	f7fd ffdf 	bl	800c830 <xQueueGenericSend>
 800e872:	6278      	str	r0, [r7, #36]	; 0x24
 800e874:	e012      	b.n	800e89c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e876:	4b0c      	ldr	r3, [pc, #48]	; (800e8a8 <xTimerGenericCommand+0x98>)
 800e878:	6818      	ldr	r0, [r3, #0]
 800e87a:	f107 0110 	add.w	r1, r7, #16
 800e87e:	2300      	movs	r3, #0
 800e880:	2200      	movs	r2, #0
 800e882:	f7fd ffd5 	bl	800c830 <xQueueGenericSend>
 800e886:	6278      	str	r0, [r7, #36]	; 0x24
 800e888:	e008      	b.n	800e89c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e88a:	4b07      	ldr	r3, [pc, #28]	; (800e8a8 <xTimerGenericCommand+0x98>)
 800e88c:	6818      	ldr	r0, [r3, #0]
 800e88e:	f107 0110 	add.w	r1, r7, #16
 800e892:	2300      	movs	r3, #0
 800e894:	683a      	ldr	r2, [r7, #0]
 800e896:	f7fe f8c9 	bl	800ca2c <xQueueGenericSendFromISR>
 800e89a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3728      	adds	r7, #40	; 0x28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20000d64 	.word	0x20000d64

0800e8ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b088      	sub	sp, #32
 800e8b0:	af02      	add	r7, sp, #8
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8b6:	4b22      	ldr	r3, [pc, #136]	; (800e940 <prvProcessExpiredTimer+0x94>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	68db      	ldr	r3, [r3, #12]
 800e8be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fd fde1 	bl	800c48c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d022      	beq.n	800e91e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	699a      	ldr	r2, [r3, #24]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	18d1      	adds	r1, r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	6978      	ldr	r0, [r7, #20]
 800e8e6:	f000 f8d1 	bl	800ea8c <prvInsertTimerInActiveList>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d01f      	beq.n	800e930 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	6978      	ldr	r0, [r7, #20]
 800e8fc:	f7ff ff88 	bl	800e810 <xTimerGenericCommand>
 800e900:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d113      	bne.n	800e930 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	60fb      	str	r3, [r7, #12]
}
 800e91a:	bf00      	nop
 800e91c:	e7fe      	b.n	800e91c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e924:	f023 0301 	bic.w	r3, r3, #1
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	6a1b      	ldr	r3, [r3, #32]
 800e934:	6978      	ldr	r0, [r7, #20]
 800e936:	4798      	blx	r3
}
 800e938:	bf00      	nop
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	20000d5c 	.word	0x20000d5c

0800e944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e94c:	f107 0308 	add.w	r3, r7, #8
 800e950:	4618      	mov	r0, r3
 800e952:	f000 f857 	bl	800ea04 <prvGetNextExpireTime>
 800e956:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	4619      	mov	r1, r3
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f000 f803 	bl	800e968 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e962:	f000 f8d5 	bl	800eb10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e966:	e7f1      	b.n	800e94c <prvTimerTask+0x8>

0800e968 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e972:	f7ff f87d 	bl	800da70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e976:	f107 0308 	add.w	r3, r7, #8
 800e97a:	4618      	mov	r0, r3
 800e97c:	f000 f866 	bl	800ea4c <prvSampleTimeNow>
 800e980:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d130      	bne.n	800e9ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d10a      	bne.n	800e9a4 <prvProcessTimerOrBlockTask+0x3c>
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	429a      	cmp	r2, r3
 800e994:	d806      	bhi.n	800e9a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e996:	f7ff f879 	bl	800da8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e99a:	68f9      	ldr	r1, [r7, #12]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7ff ff85 	bl	800e8ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e9a2:	e024      	b.n	800e9ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d008      	beq.n	800e9bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e9aa:	4b13      	ldr	r3, [pc, #76]	; (800e9f8 <prvProcessTimerOrBlockTask+0x90>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d101      	bne.n	800e9b8 <prvProcessTimerOrBlockTask+0x50>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e000      	b.n	800e9ba <prvProcessTimerOrBlockTask+0x52>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e9bc:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <prvProcessTimerOrBlockTask+0x94>)
 800e9be:	6818      	ldr	r0, [r3, #0]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	683a      	ldr	r2, [r7, #0]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	f7fe fd63 	bl	800d494 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e9ce:	f7ff f85d 	bl	800da8c <xTaskResumeAll>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d10a      	bne.n	800e9ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e9d8:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <prvProcessTimerOrBlockTask+0x98>)
 800e9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9de:	601a      	str	r2, [r3, #0]
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	f3bf 8f6f 	isb	sy
}
 800e9e8:	e001      	b.n	800e9ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e9ea:	f7ff f84f 	bl	800da8c <xTaskResumeAll>
}
 800e9ee:	bf00      	nop
 800e9f0:	3710      	adds	r7, #16
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20000d60 	.word	0x20000d60
 800e9fc:	20000d64 	.word	0x20000d64
 800ea00:	e000ed04 	.word	0xe000ed04

0800ea04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea0c:	4b0e      	ldr	r3, [pc, #56]	; (800ea48 <prvGetNextExpireTime+0x44>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <prvGetNextExpireTime+0x16>
 800ea16:	2201      	movs	r2, #1
 800ea18:	e000      	b.n	800ea1c <prvGetNextExpireTime+0x18>
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d105      	bne.n	800ea34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea28:	4b07      	ldr	r3, [pc, #28]	; (800ea48 <prvGetNextExpireTime+0x44>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	e001      	b.n	800ea38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea34:	2300      	movs	r3, #0
 800ea36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea38:	68fb      	ldr	r3, [r7, #12]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3714      	adds	r7, #20
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	20000d5c 	.word	0x20000d5c

0800ea4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea54:	f7ff f8b8 	bl	800dbc8 <xTaskGetTickCount>
 800ea58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea5a:	4b0b      	ldr	r3, [pc, #44]	; (800ea88 <prvSampleTimeNow+0x3c>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d205      	bcs.n	800ea70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea64:	f000 f936 	bl	800ecd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	e002      	b.n	800ea76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea76:	4a04      	ldr	r2, [pc, #16]	; (800ea88 <prvSampleTimeNow+0x3c>)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	20000d6c 	.word	0x20000d6c

0800ea8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	60b9      	str	r1, [r7, #8]
 800ea96:	607a      	str	r2, [r7, #4]
 800ea98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	68ba      	ldr	r2, [r7, #8]
 800eaa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	68fa      	ldr	r2, [r7, #12]
 800eaa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d812      	bhi.n	800ead8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	1ad2      	subs	r2, r2, r3
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d302      	bcc.n	800eac6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eac0:	2301      	movs	r3, #1
 800eac2:	617b      	str	r3, [r7, #20]
 800eac4:	e01b      	b.n	800eafe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eac6:	4b10      	ldr	r3, [pc, #64]	; (800eb08 <prvInsertTimerInActiveList+0x7c>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3304      	adds	r3, #4
 800eace:	4619      	mov	r1, r3
 800ead0:	4610      	mov	r0, r2
 800ead2:	f7fd fca2 	bl	800c41a <vListInsert>
 800ead6:	e012      	b.n	800eafe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d206      	bcs.n	800eaee <prvInsertTimerInActiveList+0x62>
 800eae0:	68ba      	ldr	r2, [r7, #8]
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d302      	bcc.n	800eaee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eae8:	2301      	movs	r3, #1
 800eaea:	617b      	str	r3, [r7, #20]
 800eaec:	e007      	b.n	800eafe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaee:	4b07      	ldr	r3, [pc, #28]	; (800eb0c <prvInsertTimerInActiveList+0x80>)
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	3304      	adds	r3, #4
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4610      	mov	r0, r2
 800eafa:	f7fd fc8e 	bl	800c41a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eafe:	697b      	ldr	r3, [r7, #20]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3718      	adds	r7, #24
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20000d60 	.word	0x20000d60
 800eb0c:	20000d5c 	.word	0x20000d5c

0800eb10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b08e      	sub	sp, #56	; 0x38
 800eb14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb16:	e0ca      	b.n	800ecae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	da18      	bge.n	800eb50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb1e:	1d3b      	adds	r3, r7, #4
 800eb20:	3304      	adds	r3, #4
 800eb22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10a      	bne.n	800eb40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	61fb      	str	r3, [r7, #28]
}
 800eb3c:	bf00      	nop
 800eb3e:	e7fe      	b.n	800eb3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb46:	6850      	ldr	r0, [r2, #4]
 800eb48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb4a:	6892      	ldr	r2, [r2, #8]
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f2c0 80aa 	blt.w	800ecac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	695b      	ldr	r3, [r3, #20]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d004      	beq.n	800eb6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb66:	3304      	adds	r3, #4
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7fd fc8f 	bl	800c48c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb6e:	463b      	mov	r3, r7
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7ff ff6b 	bl	800ea4c <prvSampleTimeNow>
 800eb76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2b09      	cmp	r3, #9
 800eb7c:	f200 8097 	bhi.w	800ecae <prvProcessReceivedCommands+0x19e>
 800eb80:	a201      	add	r2, pc, #4	; (adr r2, 800eb88 <prvProcessReceivedCommands+0x78>)
 800eb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb86:	bf00      	nop
 800eb88:	0800ebb1 	.word	0x0800ebb1
 800eb8c:	0800ebb1 	.word	0x0800ebb1
 800eb90:	0800ebb1 	.word	0x0800ebb1
 800eb94:	0800ec25 	.word	0x0800ec25
 800eb98:	0800ec39 	.word	0x0800ec39
 800eb9c:	0800ec83 	.word	0x0800ec83
 800eba0:	0800ebb1 	.word	0x0800ebb1
 800eba4:	0800ebb1 	.word	0x0800ebb1
 800eba8:	0800ec25 	.word	0x0800ec25
 800ebac:	0800ec39 	.word	0x0800ec39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebb6:	f043 0301 	orr.w	r3, r3, #1
 800ebba:	b2da      	uxtb	r2, r3
 800ebbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	18d1      	adds	r1, r2, r3
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebd0:	f7ff ff5c 	bl	800ea8c <prvInsertTimerInActiveList>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d069      	beq.n	800ecae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebe8:	f003 0304 	and.w	r3, r3, #4
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d05e      	beq.n	800ecae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ebf0:	68ba      	ldr	r2, [r7, #8]
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	699b      	ldr	r3, [r3, #24]
 800ebf6:	441a      	add	r2, r3
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	2100      	movs	r1, #0
 800ec00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec02:	f7ff fe05 	bl	800e810 <xTimerGenericCommand>
 800ec06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ec08:	6a3b      	ldr	r3, [r7, #32]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d14f      	bne.n	800ecae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ec0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec12:	f383 8811 	msr	BASEPRI, r3
 800ec16:	f3bf 8f6f 	isb	sy
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	61bb      	str	r3, [r7, #24]
}
 800ec20:	bf00      	nop
 800ec22:	e7fe      	b.n	800ec22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec2a:	f023 0301 	bic.w	r3, r3, #1
 800ec2e:	b2da      	uxtb	r2, r3
 800ec30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ec36:	e03a      	b.n	800ecae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec3e:	f043 0301 	orr.w	r3, r3, #1
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	699b      	ldr	r3, [r3, #24]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d10a      	bne.n	800ec6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ec58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5c:	f383 8811 	msr	BASEPRI, r3
 800ec60:	f3bf 8f6f 	isb	sy
 800ec64:	f3bf 8f4f 	dsb	sy
 800ec68:	617b      	str	r3, [r7, #20]
}
 800ec6a:	bf00      	nop
 800ec6c:	e7fe      	b.n	800ec6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	699a      	ldr	r2, [r3, #24]
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	18d1      	adds	r1, r2, r3
 800ec76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec7c:	f7ff ff06 	bl	800ea8c <prvInsertTimerInActiveList>
					break;
 800ec80:	e015      	b.n	800ecae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec88:	f003 0302 	and.w	r3, r3, #2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d103      	bne.n	800ec98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ec90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec92:	f000 fbfd 	bl	800f490 <vPortFree>
 800ec96:	e00a      	b.n	800ecae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec9e:	f023 0301 	bic.w	r3, r3, #1
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ecaa:	e000      	b.n	800ecae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ecac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ecae:	4b08      	ldr	r3, [pc, #32]	; (800ecd0 <prvProcessReceivedCommands+0x1c0>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	1d39      	adds	r1, r7, #4
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fd ffe0 	bl	800cc7c <xQueueReceive>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f47f af2a 	bne.w	800eb18 <prvProcessReceivedCommands+0x8>
	}
}
 800ecc4:	bf00      	nop
 800ecc6:	bf00      	nop
 800ecc8:	3730      	adds	r7, #48	; 0x30
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	20000d64 	.word	0x20000d64

0800ecd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ecda:	e048      	b.n	800ed6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecdc:	4b2d      	ldr	r3, [pc, #180]	; (800ed94 <prvSwitchTimerLists+0xc0>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ece6:	4b2b      	ldr	r3, [pc, #172]	; (800ed94 <prvSwitchTimerLists+0xc0>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7fd fbc9 	bl	800c48c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6a1b      	ldr	r3, [r3, #32]
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d02e      	beq.n	800ed6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	693a      	ldr	r2, [r7, #16]
 800ed16:	4413      	add	r3, r2
 800ed18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d90e      	bls.n	800ed40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	68fa      	ldr	r2, [r7, #12]
 800ed2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed2e:	4b19      	ldr	r3, [pc, #100]	; (800ed94 <prvSwitchTimerLists+0xc0>)
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	3304      	adds	r3, #4
 800ed36:	4619      	mov	r1, r3
 800ed38:	4610      	mov	r0, r2
 800ed3a:	f7fd fb6e 	bl	800c41a <vListInsert>
 800ed3e:	e016      	b.n	800ed6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed40:	2300      	movs	r3, #0
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	2300      	movs	r3, #0
 800ed46:	693a      	ldr	r2, [r7, #16]
 800ed48:	2100      	movs	r1, #0
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f7ff fd60 	bl	800e810 <xTimerGenericCommand>
 800ed50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d10a      	bne.n	800ed6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ed58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed5c:	f383 8811 	msr	BASEPRI, r3
 800ed60:	f3bf 8f6f 	isb	sy
 800ed64:	f3bf 8f4f 	dsb	sy
 800ed68:	603b      	str	r3, [r7, #0]
}
 800ed6a:	bf00      	nop
 800ed6c:	e7fe      	b.n	800ed6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed6e:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <prvSwitchTimerLists+0xc0>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d1b1      	bne.n	800ecdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed78:	4b06      	ldr	r3, [pc, #24]	; (800ed94 <prvSwitchTimerLists+0xc0>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed7e:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <prvSwitchTimerLists+0xc4>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4a04      	ldr	r2, [pc, #16]	; (800ed94 <prvSwitchTimerLists+0xc0>)
 800ed84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed86:	4a04      	ldr	r2, [pc, #16]	; (800ed98 <prvSwitchTimerLists+0xc4>)
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	6013      	str	r3, [r2, #0]
}
 800ed8c:	bf00      	nop
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	20000d5c 	.word	0x20000d5c
 800ed98:	20000d60 	.word	0x20000d60

0800ed9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eda2:	f000 f987 	bl	800f0b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eda6:	4b15      	ldr	r3, [pc, #84]	; (800edfc <prvCheckForValidListAndQueue+0x60>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d120      	bne.n	800edf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800edae:	4814      	ldr	r0, [pc, #80]	; (800ee00 <prvCheckForValidListAndQueue+0x64>)
 800edb0:	f7fd fae2 	bl	800c378 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800edb4:	4813      	ldr	r0, [pc, #76]	; (800ee04 <prvCheckForValidListAndQueue+0x68>)
 800edb6:	f7fd fadf 	bl	800c378 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800edba:	4b13      	ldr	r3, [pc, #76]	; (800ee08 <prvCheckForValidListAndQueue+0x6c>)
 800edbc:	4a10      	ldr	r2, [pc, #64]	; (800ee00 <prvCheckForValidListAndQueue+0x64>)
 800edbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800edc0:	4b12      	ldr	r3, [pc, #72]	; (800ee0c <prvCheckForValidListAndQueue+0x70>)
 800edc2:	4a10      	ldr	r2, [pc, #64]	; (800ee04 <prvCheckForValidListAndQueue+0x68>)
 800edc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800edc6:	2300      	movs	r3, #0
 800edc8:	9300      	str	r3, [sp, #0]
 800edca:	4b11      	ldr	r3, [pc, #68]	; (800ee10 <prvCheckForValidListAndQueue+0x74>)
 800edcc:	4a11      	ldr	r2, [pc, #68]	; (800ee14 <prvCheckForValidListAndQueue+0x78>)
 800edce:	2110      	movs	r1, #16
 800edd0:	200a      	movs	r0, #10
 800edd2:	f7fd fbed 	bl	800c5b0 <xQueueGenericCreateStatic>
 800edd6:	4603      	mov	r3, r0
 800edd8:	4a08      	ldr	r2, [pc, #32]	; (800edfc <prvCheckForValidListAndQueue+0x60>)
 800edda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eddc:	4b07      	ldr	r3, [pc, #28]	; (800edfc <prvCheckForValidListAndQueue+0x60>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d005      	beq.n	800edf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ede4:	4b05      	ldr	r3, [pc, #20]	; (800edfc <prvCheckForValidListAndQueue+0x60>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	490b      	ldr	r1, [pc, #44]	; (800ee18 <prvCheckForValidListAndQueue+0x7c>)
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe fafe 	bl	800d3ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800edf0:	f000 f990 	bl	800f114 <vPortExitCritical>
}
 800edf4:	bf00      	nop
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	20000d64 	.word	0x20000d64
 800ee00:	20000d34 	.word	0x20000d34
 800ee04:	20000d48 	.word	0x20000d48
 800ee08:	20000d5c 	.word	0x20000d5c
 800ee0c:	20000d60 	.word	0x20000d60
 800ee10:	20000e10 	.word	0x20000e10
 800ee14:	20000d70 	.word	0x20000d70
 800ee18:	08010a50 	.word	0x08010a50

0800ee1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08a      	sub	sp, #40	; 0x28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
 800ee28:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ee2a:	f06f 0301 	mvn.w	r3, #1
 800ee2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ee3c:	4b06      	ldr	r3, [pc, #24]	; (800ee58 <xTimerPendFunctionCallFromISR+0x3c>)
 800ee3e:	6818      	ldr	r0, [r3, #0]
 800ee40:	f107 0114 	add.w	r1, r7, #20
 800ee44:	2300      	movs	r3, #0
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	f7fd fdf0 	bl	800ca2c <xQueueGenericSendFromISR>
 800ee4c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3728      	adds	r7, #40	; 0x28
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	20000d64 	.word	0x20000d64

0800ee5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3b04      	subs	r3, #4
 800ee6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ee74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3b04      	subs	r3, #4
 800ee7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	f023 0201 	bic.w	r2, r3, #1
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3b04      	subs	r3, #4
 800ee8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee8c:	4a0c      	ldr	r2, [pc, #48]	; (800eec0 <pxPortInitialiseStack+0x64>)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	3b14      	subs	r3, #20
 800ee96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3b04      	subs	r3, #4
 800eea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f06f 0202 	mvn.w	r2, #2
 800eeaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	3b20      	subs	r3, #32
 800eeb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3714      	adds	r7, #20
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	0800eec5 	.word	0x0800eec5

0800eec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eec4:	b480      	push	{r7}
 800eec6:	b085      	sub	sp, #20
 800eec8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eeca:	2300      	movs	r3, #0
 800eecc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eece:	4b12      	ldr	r3, [pc, #72]	; (800ef18 <prvTaskExitError+0x54>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eed6:	d00a      	beq.n	800eeee <prvTaskExitError+0x2a>
	__asm volatile
 800eed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eedc:	f383 8811 	msr	BASEPRI, r3
 800eee0:	f3bf 8f6f 	isb	sy
 800eee4:	f3bf 8f4f 	dsb	sy
 800eee8:	60fb      	str	r3, [r7, #12]
}
 800eeea:	bf00      	nop
 800eeec:	e7fe      	b.n	800eeec <prvTaskExitError+0x28>
	__asm volatile
 800eeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	60bb      	str	r3, [r7, #8]
}
 800ef00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef02:	bf00      	nop
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d0fc      	beq.n	800ef04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef0a:	bf00      	nop
 800ef0c:	bf00      	nop
 800ef0e:	3714      	adds	r7, #20
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr
 800ef18:	200000b4 	.word	0x200000b4
 800ef1c:	00000000 	.word	0x00000000

0800ef20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef20:	4b07      	ldr	r3, [pc, #28]	; (800ef40 <pxCurrentTCBConst2>)
 800ef22:	6819      	ldr	r1, [r3, #0]
 800ef24:	6808      	ldr	r0, [r1, #0]
 800ef26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2a:	f380 8809 	msr	PSP, r0
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f04f 0000 	mov.w	r0, #0
 800ef36:	f380 8811 	msr	BASEPRI, r0
 800ef3a:	4770      	bx	lr
 800ef3c:	f3af 8000 	nop.w

0800ef40 <pxCurrentTCBConst2>:
 800ef40:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef44:	bf00      	nop
 800ef46:	bf00      	nop

0800ef48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef48:	4808      	ldr	r0, [pc, #32]	; (800ef6c <prvPortStartFirstTask+0x24>)
 800ef4a:	6800      	ldr	r0, [r0, #0]
 800ef4c:	6800      	ldr	r0, [r0, #0]
 800ef4e:	f380 8808 	msr	MSP, r0
 800ef52:	f04f 0000 	mov.w	r0, #0
 800ef56:	f380 8814 	msr	CONTROL, r0
 800ef5a:	b662      	cpsie	i
 800ef5c:	b661      	cpsie	f
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	df00      	svc	0
 800ef68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef6a:	bf00      	nop
 800ef6c:	e000ed08 	.word	0xe000ed08

0800ef70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef76:	4b46      	ldr	r3, [pc, #280]	; (800f090 <xPortStartScheduler+0x120>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a46      	ldr	r2, [pc, #280]	; (800f094 <xPortStartScheduler+0x124>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d10a      	bne.n	800ef96 <xPortStartScheduler+0x26>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	613b      	str	r3, [r7, #16]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef96:	4b3e      	ldr	r3, [pc, #248]	; (800f090 <xPortStartScheduler+0x120>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a3f      	ldr	r2, [pc, #252]	; (800f098 <xPortStartScheduler+0x128>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d10a      	bne.n	800efb6 <xPortStartScheduler+0x46>
	__asm volatile
 800efa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	60fb      	str	r3, [r7, #12]
}
 800efb2:	bf00      	nop
 800efb4:	e7fe      	b.n	800efb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800efb6:	4b39      	ldr	r3, [pc, #228]	; (800f09c <xPortStartScheduler+0x12c>)
 800efb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	22ff      	movs	r2, #255	; 0xff
 800efc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800efd0:	78fb      	ldrb	r3, [r7, #3]
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	4b31      	ldr	r3, [pc, #196]	; (800f0a0 <xPortStartScheduler+0x130>)
 800efdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800efde:	4b31      	ldr	r3, [pc, #196]	; (800f0a4 <xPortStartScheduler+0x134>)
 800efe0:	2207      	movs	r2, #7
 800efe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efe4:	e009      	b.n	800effa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800efe6:	4b2f      	ldr	r3, [pc, #188]	; (800f0a4 <xPortStartScheduler+0x134>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3b01      	subs	r3, #1
 800efec:	4a2d      	ldr	r2, [pc, #180]	; (800f0a4 <xPortStartScheduler+0x134>)
 800efee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	005b      	lsls	r3, r3, #1
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800effa:	78fb      	ldrb	r3, [r7, #3]
 800effc:	b2db      	uxtb	r3, r3
 800effe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f002:	2b80      	cmp	r3, #128	; 0x80
 800f004:	d0ef      	beq.n	800efe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f006:	4b27      	ldr	r3, [pc, #156]	; (800f0a4 <xPortStartScheduler+0x134>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f1c3 0307 	rsb	r3, r3, #7
 800f00e:	2b04      	cmp	r3, #4
 800f010:	d00a      	beq.n	800f028 <xPortStartScheduler+0xb8>
	__asm volatile
 800f012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f016:	f383 8811 	msr	BASEPRI, r3
 800f01a:	f3bf 8f6f 	isb	sy
 800f01e:	f3bf 8f4f 	dsb	sy
 800f022:	60bb      	str	r3, [r7, #8]
}
 800f024:	bf00      	nop
 800f026:	e7fe      	b.n	800f026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f028:	4b1e      	ldr	r3, [pc, #120]	; (800f0a4 <xPortStartScheduler+0x134>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	021b      	lsls	r3, r3, #8
 800f02e:	4a1d      	ldr	r2, [pc, #116]	; (800f0a4 <xPortStartScheduler+0x134>)
 800f030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f032:	4b1c      	ldr	r3, [pc, #112]	; (800f0a4 <xPortStartScheduler+0x134>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f03a:	4a1a      	ldr	r2, [pc, #104]	; (800f0a4 <xPortStartScheduler+0x134>)
 800f03c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	b2da      	uxtb	r2, r3
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f046:	4b18      	ldr	r3, [pc, #96]	; (800f0a8 <xPortStartScheduler+0x138>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	4a17      	ldr	r2, [pc, #92]	; (800f0a8 <xPortStartScheduler+0x138>)
 800f04c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f052:	4b15      	ldr	r3, [pc, #84]	; (800f0a8 <xPortStartScheduler+0x138>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4a14      	ldr	r2, [pc, #80]	; (800f0a8 <xPortStartScheduler+0x138>)
 800f058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f05c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f05e:	f000 f8dd 	bl	800f21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f062:	4b12      	ldr	r3, [pc, #72]	; (800f0ac <xPortStartScheduler+0x13c>)
 800f064:	2200      	movs	r2, #0
 800f066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f068:	f000 f8fc 	bl	800f264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f06c:	4b10      	ldr	r3, [pc, #64]	; (800f0b0 <xPortStartScheduler+0x140>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a0f      	ldr	r2, [pc, #60]	; (800f0b0 <xPortStartScheduler+0x140>)
 800f072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f078:	f7ff ff66 	bl	800ef48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f07c:	f7fe fe80 	bl	800dd80 <vTaskSwitchContext>
	prvTaskExitError();
 800f080:	f7ff ff20 	bl	800eec4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	e000ed00 	.word	0xe000ed00
 800f094:	410fc271 	.word	0x410fc271
 800f098:	410fc270 	.word	0x410fc270
 800f09c:	e000e400 	.word	0xe000e400
 800f0a0:	20000e60 	.word	0x20000e60
 800f0a4:	20000e64 	.word	0x20000e64
 800f0a8:	e000ed20 	.word	0xe000ed20
 800f0ac:	200000b4 	.word	0x200000b4
 800f0b0:	e000ef34 	.word	0xe000ef34

0800f0b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	607b      	str	r3, [r7, #4]
}
 800f0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0ce:	4b0f      	ldr	r3, [pc, #60]	; (800f10c <vPortEnterCritical+0x58>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	4a0d      	ldr	r2, [pc, #52]	; (800f10c <vPortEnterCritical+0x58>)
 800f0d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0d8:	4b0c      	ldr	r3, [pc, #48]	; (800f10c <vPortEnterCritical+0x58>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d10f      	bne.n	800f100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f0e0:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <vPortEnterCritical+0x5c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00a      	beq.n	800f100 <vPortEnterCritical+0x4c>
	__asm volatile
 800f0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ee:	f383 8811 	msr	BASEPRI, r3
 800f0f2:	f3bf 8f6f 	isb	sy
 800f0f6:	f3bf 8f4f 	dsb	sy
 800f0fa:	603b      	str	r3, [r7, #0]
}
 800f0fc:	bf00      	nop
 800f0fe:	e7fe      	b.n	800f0fe <vPortEnterCritical+0x4a>
	}
}
 800f100:	bf00      	nop
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	200000b4 	.word	0x200000b4
 800f110:	e000ed04 	.word	0xe000ed04

0800f114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f114:	b480      	push	{r7}
 800f116:	b083      	sub	sp, #12
 800f118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f11a:	4b12      	ldr	r3, [pc, #72]	; (800f164 <vPortExitCritical+0x50>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d10a      	bne.n	800f138 <vPortExitCritical+0x24>
	__asm volatile
 800f122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	607b      	str	r3, [r7, #4]
}
 800f134:	bf00      	nop
 800f136:	e7fe      	b.n	800f136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f138:	4b0a      	ldr	r3, [pc, #40]	; (800f164 <vPortExitCritical+0x50>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	3b01      	subs	r3, #1
 800f13e:	4a09      	ldr	r2, [pc, #36]	; (800f164 <vPortExitCritical+0x50>)
 800f140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f142:	4b08      	ldr	r3, [pc, #32]	; (800f164 <vPortExitCritical+0x50>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d105      	bne.n	800f156 <vPortExitCritical+0x42>
 800f14a:	2300      	movs	r3, #0
 800f14c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	f383 8811 	msr	BASEPRI, r3
}
 800f154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f156:	bf00      	nop
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	200000b4 	.word	0x200000b4
	...

0800f170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f170:	f3ef 8009 	mrs	r0, PSP
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	4b15      	ldr	r3, [pc, #84]	; (800f1d0 <pxCurrentTCBConst>)
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	f01e 0f10 	tst.w	lr, #16
 800f180:	bf08      	it	eq
 800f182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f18a:	6010      	str	r0, [r2, #0]
 800f18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f194:	f380 8811 	msr	BASEPRI, r0
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f7fe fdee 	bl	800dd80 <vTaskSwitchContext>
 800f1a4:	f04f 0000 	mov.w	r0, #0
 800f1a8:	f380 8811 	msr	BASEPRI, r0
 800f1ac:	bc09      	pop	{r0, r3}
 800f1ae:	6819      	ldr	r1, [r3, #0]
 800f1b0:	6808      	ldr	r0, [r1, #0]
 800f1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b6:	f01e 0f10 	tst.w	lr, #16
 800f1ba:	bf08      	it	eq
 800f1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1c0:	f380 8809 	msr	PSP, r0
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	f3af 8000 	nop.w

0800f1d0 <pxCurrentTCBConst>:
 800f1d0:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop

0800f1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	607b      	str	r3, [r7, #4]
}
 800f1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1f2:	f7fe fd0b 	bl	800dc0c <xTaskIncrementTick>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d003      	beq.n	800f204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1fc:	4b06      	ldr	r3, [pc, #24]	; (800f218 <xPortSysTickHandler+0x40>)
 800f1fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	2300      	movs	r3, #0
 800f206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	f383 8811 	msr	BASEPRI, r3
}
 800f20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f210:	bf00      	nop
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	e000ed04 	.word	0xe000ed04

0800f21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f21c:	b480      	push	{r7}
 800f21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f220:	4b0b      	ldr	r3, [pc, #44]	; (800f250 <vPortSetupTimerInterrupt+0x34>)
 800f222:	2200      	movs	r2, #0
 800f224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f226:	4b0b      	ldr	r3, [pc, #44]	; (800f254 <vPortSetupTimerInterrupt+0x38>)
 800f228:	2200      	movs	r2, #0
 800f22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f22c:	4b0a      	ldr	r3, [pc, #40]	; (800f258 <vPortSetupTimerInterrupt+0x3c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a0a      	ldr	r2, [pc, #40]	; (800f25c <vPortSetupTimerInterrupt+0x40>)
 800f232:	fba2 2303 	umull	r2, r3, r2, r3
 800f236:	099b      	lsrs	r3, r3, #6
 800f238:	4a09      	ldr	r2, [pc, #36]	; (800f260 <vPortSetupTimerInterrupt+0x44>)
 800f23a:	3b01      	subs	r3, #1
 800f23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f23e:	4b04      	ldr	r3, [pc, #16]	; (800f250 <vPortSetupTimerInterrupt+0x34>)
 800f240:	2207      	movs	r2, #7
 800f242:	601a      	str	r2, [r3, #0]
}
 800f244:	bf00      	nop
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	e000e010 	.word	0xe000e010
 800f254:	e000e018 	.word	0xe000e018
 800f258:	20000094 	.word	0x20000094
 800f25c:	10624dd3 	.word	0x10624dd3
 800f260:	e000e014 	.word	0xe000e014

0800f264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f274 <vPortEnableVFP+0x10>
 800f268:	6801      	ldr	r1, [r0, #0]
 800f26a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f26e:	6001      	str	r1, [r0, #0]
 800f270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f272:	bf00      	nop
 800f274:	e000ed88 	.word	0xe000ed88

0800f278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f27e:	f3ef 8305 	mrs	r3, IPSR
 800f282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b0f      	cmp	r3, #15
 800f288:	d914      	bls.n	800f2b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f28a:	4a17      	ldr	r2, [pc, #92]	; (800f2e8 <vPortValidateInterruptPriority+0x70>)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	4413      	add	r3, r2
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f294:	4b15      	ldr	r3, [pc, #84]	; (800f2ec <vPortValidateInterruptPriority+0x74>)
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	7afa      	ldrb	r2, [r7, #11]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d20a      	bcs.n	800f2b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	607b      	str	r3, [r7, #4]
}
 800f2b0:	bf00      	nop
 800f2b2:	e7fe      	b.n	800f2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f2b4:	4b0e      	ldr	r3, [pc, #56]	; (800f2f0 <vPortValidateInterruptPriority+0x78>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f2bc:	4b0d      	ldr	r3, [pc, #52]	; (800f2f4 <vPortValidateInterruptPriority+0x7c>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d90a      	bls.n	800f2da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c8:	f383 8811 	msr	BASEPRI, r3
 800f2cc:	f3bf 8f6f 	isb	sy
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	603b      	str	r3, [r7, #0]
}
 800f2d6:	bf00      	nop
 800f2d8:	e7fe      	b.n	800f2d8 <vPortValidateInterruptPriority+0x60>
	}
 800f2da:	bf00      	nop
 800f2dc:	3714      	adds	r7, #20
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	e000e3f0 	.word	0xe000e3f0
 800f2ec:	20000e60 	.word	0x20000e60
 800f2f0:	e000ed0c 	.word	0xe000ed0c
 800f2f4:	20000e64 	.word	0x20000e64

0800f2f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b08a      	sub	sp, #40	; 0x28
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f300:	2300      	movs	r3, #0
 800f302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f304:	f7fe fbb4 	bl	800da70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f308:	4b5b      	ldr	r3, [pc, #364]	; (800f478 <pvPortMalloc+0x180>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d101      	bne.n	800f314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f310:	f000 f920 	bl	800f554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f314:	4b59      	ldr	r3, [pc, #356]	; (800f47c <pvPortMalloc+0x184>)
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4013      	ands	r3, r2
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f040 8093 	bne.w	800f448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d01d      	beq.n	800f364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f328:	2208      	movs	r2, #8
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4413      	add	r3, r2
 800f32e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f003 0307 	and.w	r3, r3, #7
 800f336:	2b00      	cmp	r3, #0
 800f338:	d014      	beq.n	800f364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f023 0307 	bic.w	r3, r3, #7
 800f340:	3308      	adds	r3, #8
 800f342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f003 0307 	and.w	r3, r3, #7
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00a      	beq.n	800f364 <pvPortMalloc+0x6c>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	617b      	str	r3, [r7, #20]
}
 800f360:	bf00      	nop
 800f362:	e7fe      	b.n	800f362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d06e      	beq.n	800f448 <pvPortMalloc+0x150>
 800f36a:	4b45      	ldr	r3, [pc, #276]	; (800f480 <pvPortMalloc+0x188>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	429a      	cmp	r2, r3
 800f372:	d869      	bhi.n	800f448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f374:	4b43      	ldr	r3, [pc, #268]	; (800f484 <pvPortMalloc+0x18c>)
 800f376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f378:	4b42      	ldr	r3, [pc, #264]	; (800f484 <pvPortMalloc+0x18c>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f37e:	e004      	b.n	800f38a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	687a      	ldr	r2, [r7, #4]
 800f390:	429a      	cmp	r2, r3
 800f392:	d903      	bls.n	800f39c <pvPortMalloc+0xa4>
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d1f1      	bne.n	800f380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f39c:	4b36      	ldr	r3, [pc, #216]	; (800f478 <pvPortMalloc+0x180>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d050      	beq.n	800f448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2208      	movs	r2, #8
 800f3ac:	4413      	add	r3, r2
 800f3ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	6a3b      	ldr	r3, [r7, #32]
 800f3b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	1ad2      	subs	r2, r2, r3
 800f3c0:	2308      	movs	r3, #8
 800f3c2:	005b      	lsls	r3, r3, #1
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d91f      	bls.n	800f408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4413      	add	r3, r2
 800f3ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	f003 0307 	and.w	r3, r3, #7
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00a      	beq.n	800f3f0 <pvPortMalloc+0xf8>
	__asm volatile
 800f3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3de:	f383 8811 	msr	BASEPRI, r3
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	f3bf 8f4f 	dsb	sy
 800f3ea:	613b      	str	r3, [r7, #16]
}
 800f3ec:	bf00      	nop
 800f3ee:	e7fe      	b.n	800f3ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	685a      	ldr	r2, [r3, #4]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	1ad2      	subs	r2, r2, r3
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f402:	69b8      	ldr	r0, [r7, #24]
 800f404:	f000 f908 	bl	800f618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f408:	4b1d      	ldr	r3, [pc, #116]	; (800f480 <pvPortMalloc+0x188>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	4a1b      	ldr	r2, [pc, #108]	; (800f480 <pvPortMalloc+0x188>)
 800f414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f416:	4b1a      	ldr	r3, [pc, #104]	; (800f480 <pvPortMalloc+0x188>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	4b1b      	ldr	r3, [pc, #108]	; (800f488 <pvPortMalloc+0x190>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d203      	bcs.n	800f42a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f422:	4b17      	ldr	r3, [pc, #92]	; (800f480 <pvPortMalloc+0x188>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4a18      	ldr	r2, [pc, #96]	; (800f488 <pvPortMalloc+0x190>)
 800f428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	4b13      	ldr	r3, [pc, #76]	; (800f47c <pvPortMalloc+0x184>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	431a      	orrs	r2, r3
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43a:	2200      	movs	r2, #0
 800f43c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f43e:	4b13      	ldr	r3, [pc, #76]	; (800f48c <pvPortMalloc+0x194>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3301      	adds	r3, #1
 800f444:	4a11      	ldr	r2, [pc, #68]	; (800f48c <pvPortMalloc+0x194>)
 800f446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f448:	f7fe fb20 	bl	800da8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f44c:	69fb      	ldr	r3, [r7, #28]
 800f44e:	f003 0307 	and.w	r3, r3, #7
 800f452:	2b00      	cmp	r3, #0
 800f454:	d00a      	beq.n	800f46c <pvPortMalloc+0x174>
	__asm volatile
 800f456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f45a:	f383 8811 	msr	BASEPRI, r3
 800f45e:	f3bf 8f6f 	isb	sy
 800f462:	f3bf 8f4f 	dsb	sy
 800f466:	60fb      	str	r3, [r7, #12]
}
 800f468:	bf00      	nop
 800f46a:	e7fe      	b.n	800f46a <pvPortMalloc+0x172>
	return pvReturn;
 800f46c:	69fb      	ldr	r3, [r7, #28]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3728      	adds	r7, #40	; 0x28
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	20003580 	.word	0x20003580
 800f47c:	20003594 	.word	0x20003594
 800f480:	20003584 	.word	0x20003584
 800f484:	20003578 	.word	0x20003578
 800f488:	20003588 	.word	0x20003588
 800f48c:	2000358c 	.word	0x2000358c

0800f490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d04d      	beq.n	800f53e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4a2:	2308      	movs	r3, #8
 800f4a4:	425b      	negs	r3, r3
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	4413      	add	r3, r2
 800f4aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	685a      	ldr	r2, [r3, #4]
 800f4b4:	4b24      	ldr	r3, [pc, #144]	; (800f548 <vPortFree+0xb8>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4013      	ands	r3, r2
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10a      	bne.n	800f4d4 <vPortFree+0x44>
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	60fb      	str	r3, [r7, #12]
}
 800f4d0:	bf00      	nop
 800f4d2:	e7fe      	b.n	800f4d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d00a      	beq.n	800f4f2 <vPortFree+0x62>
	__asm volatile
 800f4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	60bb      	str	r3, [r7, #8]
}
 800f4ee:	bf00      	nop
 800f4f0:	e7fe      	b.n	800f4f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	685a      	ldr	r2, [r3, #4]
 800f4f6:	4b14      	ldr	r3, [pc, #80]	; (800f548 <vPortFree+0xb8>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4013      	ands	r3, r2
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d01e      	beq.n	800f53e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d11a      	bne.n	800f53e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	685a      	ldr	r2, [r3, #4]
 800f50c:	4b0e      	ldr	r3, [pc, #56]	; (800f548 <vPortFree+0xb8>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	43db      	mvns	r3, r3
 800f512:	401a      	ands	r2, r3
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f518:	f7fe faaa 	bl	800da70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	685a      	ldr	r2, [r3, #4]
 800f520:	4b0a      	ldr	r3, [pc, #40]	; (800f54c <vPortFree+0xbc>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4413      	add	r3, r2
 800f526:	4a09      	ldr	r2, [pc, #36]	; (800f54c <vPortFree+0xbc>)
 800f528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f52a:	6938      	ldr	r0, [r7, #16]
 800f52c:	f000 f874 	bl	800f618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f530:	4b07      	ldr	r3, [pc, #28]	; (800f550 <vPortFree+0xc0>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	3301      	adds	r3, #1
 800f536:	4a06      	ldr	r2, [pc, #24]	; (800f550 <vPortFree+0xc0>)
 800f538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f53a:	f7fe faa7 	bl	800da8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f53e:	bf00      	nop
 800f540:	3718      	adds	r7, #24
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20003594 	.word	0x20003594
 800f54c:	20003584 	.word	0x20003584
 800f550:	20003590 	.word	0x20003590

0800f554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f55a:	f242 7310 	movw	r3, #10000	; 0x2710
 800f55e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f560:	4b27      	ldr	r3, [pc, #156]	; (800f600 <prvHeapInit+0xac>)
 800f562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f003 0307 	and.w	r3, r3, #7
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00c      	beq.n	800f588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3307      	adds	r3, #7
 800f572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f023 0307 	bic.w	r3, r3, #7
 800f57a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f57c:	68ba      	ldr	r2, [r7, #8]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	4a1f      	ldr	r2, [pc, #124]	; (800f600 <prvHeapInit+0xac>)
 800f584:	4413      	add	r3, r2
 800f586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f58c:	4a1d      	ldr	r2, [pc, #116]	; (800f604 <prvHeapInit+0xb0>)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f592:	4b1c      	ldr	r3, [pc, #112]	; (800f604 <prvHeapInit+0xb0>)
 800f594:	2200      	movs	r2, #0
 800f596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	4413      	add	r3, r2
 800f59e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5a0:	2208      	movs	r2, #8
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	1a9b      	subs	r3, r3, r2
 800f5a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f023 0307 	bic.w	r3, r3, #7
 800f5ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	4a15      	ldr	r2, [pc, #84]	; (800f608 <prvHeapInit+0xb4>)
 800f5b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5b6:	4b14      	ldr	r3, [pc, #80]	; (800f608 <prvHeapInit+0xb4>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5be:	4b12      	ldr	r3, [pc, #72]	; (800f608 <prvHeapInit+0xb4>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f5d4:	4b0c      	ldr	r3, [pc, #48]	; (800f608 <prvHeapInit+0xb4>)
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	4a0a      	ldr	r2, [pc, #40]	; (800f60c <prvHeapInit+0xb8>)
 800f5e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	4a09      	ldr	r2, [pc, #36]	; (800f610 <prvHeapInit+0xbc>)
 800f5ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5ec:	4b09      	ldr	r3, [pc, #36]	; (800f614 <prvHeapInit+0xc0>)
 800f5ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f5f2:	601a      	str	r2, [r3, #0]
}
 800f5f4:	bf00      	nop
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr
 800f600:	20000e68 	.word	0x20000e68
 800f604:	20003578 	.word	0x20003578
 800f608:	20003580 	.word	0x20003580
 800f60c:	20003588 	.word	0x20003588
 800f610:	20003584 	.word	0x20003584
 800f614:	20003594 	.word	0x20003594

0800f618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f620:	4b28      	ldr	r3, [pc, #160]	; (800f6c4 <prvInsertBlockIntoFreeList+0xac>)
 800f622:	60fb      	str	r3, [r7, #12]
 800f624:	e002      	b.n	800f62c <prvInsertBlockIntoFreeList+0x14>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	60fb      	str	r3, [r7, #12]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	429a      	cmp	r2, r3
 800f634:	d8f7      	bhi.n	800f626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	68ba      	ldr	r2, [r7, #8]
 800f640:	4413      	add	r3, r2
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	429a      	cmp	r2, r3
 800f646:	d108      	bne.n	800f65a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	685a      	ldr	r2, [r3, #4]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	441a      	add	r2, r3
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	441a      	add	r2, r3
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d118      	bne.n	800f6a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	4b15      	ldr	r3, [pc, #84]	; (800f6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	429a      	cmp	r2, r3
 800f678:	d00d      	beq.n	800f696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	685a      	ldr	r2, [r3, #4]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	441a      	add	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	601a      	str	r2, [r3, #0]
 800f694:	e008      	b.n	800f6a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f696:	4b0c      	ldr	r3, [pc, #48]	; (800f6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	e003      	b.n	800f6a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d002      	beq.n	800f6b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6b6:	bf00      	nop
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	20003578 	.word	0x20003578
 800f6c8:	20003580 	.word	0x20003580

0800f6cc <__errno>:
 800f6cc:	4b01      	ldr	r3, [pc, #4]	; (800f6d4 <__errno+0x8>)
 800f6ce:	6818      	ldr	r0, [r3, #0]
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	200000b8 	.word	0x200000b8

0800f6d8 <__libc_init_array>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	4d0d      	ldr	r5, [pc, #52]	; (800f710 <__libc_init_array+0x38>)
 800f6dc:	4c0d      	ldr	r4, [pc, #52]	; (800f714 <__libc_init_array+0x3c>)
 800f6de:	1b64      	subs	r4, r4, r5
 800f6e0:	10a4      	asrs	r4, r4, #2
 800f6e2:	2600      	movs	r6, #0
 800f6e4:	42a6      	cmp	r6, r4
 800f6e6:	d109      	bne.n	800f6fc <__libc_init_array+0x24>
 800f6e8:	4d0b      	ldr	r5, [pc, #44]	; (800f718 <__libc_init_array+0x40>)
 800f6ea:	4c0c      	ldr	r4, [pc, #48]	; (800f71c <__libc_init_array+0x44>)
 800f6ec:	f000 fffa 	bl	80106e4 <_init>
 800f6f0:	1b64      	subs	r4, r4, r5
 800f6f2:	10a4      	asrs	r4, r4, #2
 800f6f4:	2600      	movs	r6, #0
 800f6f6:	42a6      	cmp	r6, r4
 800f6f8:	d105      	bne.n	800f706 <__libc_init_array+0x2e>
 800f6fa:	bd70      	pop	{r4, r5, r6, pc}
 800f6fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f700:	4798      	blx	r3
 800f702:	3601      	adds	r6, #1
 800f704:	e7ee      	b.n	800f6e4 <__libc_init_array+0xc>
 800f706:	f855 3b04 	ldr.w	r3, [r5], #4
 800f70a:	4798      	blx	r3
 800f70c:	3601      	adds	r6, #1
 800f70e:	e7f2      	b.n	800f6f6 <__libc_init_array+0x1e>
 800f710:	08011008 	.word	0x08011008
 800f714:	08011008 	.word	0x08011008
 800f718:	08011008 	.word	0x08011008
 800f71c:	0801100c 	.word	0x0801100c

0800f720 <memcpy>:
 800f720:	440a      	add	r2, r1
 800f722:	4291      	cmp	r1, r2
 800f724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f728:	d100      	bne.n	800f72c <memcpy+0xc>
 800f72a:	4770      	bx	lr
 800f72c:	b510      	push	{r4, lr}
 800f72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f732:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f736:	4291      	cmp	r1, r2
 800f738:	d1f9      	bne.n	800f72e <memcpy+0xe>
 800f73a:	bd10      	pop	{r4, pc}

0800f73c <memset>:
 800f73c:	4402      	add	r2, r0
 800f73e:	4603      	mov	r3, r0
 800f740:	4293      	cmp	r3, r2
 800f742:	d100      	bne.n	800f746 <memset+0xa>
 800f744:	4770      	bx	lr
 800f746:	f803 1b01 	strb.w	r1, [r3], #1
 800f74a:	e7f9      	b.n	800f740 <memset+0x4>

0800f74c <iprintf>:
 800f74c:	b40f      	push	{r0, r1, r2, r3}
 800f74e:	4b0a      	ldr	r3, [pc, #40]	; (800f778 <iprintf+0x2c>)
 800f750:	b513      	push	{r0, r1, r4, lr}
 800f752:	681c      	ldr	r4, [r3, #0]
 800f754:	b124      	cbz	r4, 800f760 <iprintf+0x14>
 800f756:	69a3      	ldr	r3, [r4, #24]
 800f758:	b913      	cbnz	r3, 800f760 <iprintf+0x14>
 800f75a:	4620      	mov	r0, r4
 800f75c:	f000 fa5e 	bl	800fc1c <__sinit>
 800f760:	ab05      	add	r3, sp, #20
 800f762:	9a04      	ldr	r2, [sp, #16]
 800f764:	68a1      	ldr	r1, [r4, #8]
 800f766:	9301      	str	r3, [sp, #4]
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fc2f 	bl	800ffcc <_vfiprintf_r>
 800f76e:	b002      	add	sp, #8
 800f770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f774:	b004      	add	sp, #16
 800f776:	4770      	bx	lr
 800f778:	200000b8 	.word	0x200000b8

0800f77c <_puts_r>:
 800f77c:	b570      	push	{r4, r5, r6, lr}
 800f77e:	460e      	mov	r6, r1
 800f780:	4605      	mov	r5, r0
 800f782:	b118      	cbz	r0, 800f78c <_puts_r+0x10>
 800f784:	6983      	ldr	r3, [r0, #24]
 800f786:	b90b      	cbnz	r3, 800f78c <_puts_r+0x10>
 800f788:	f000 fa48 	bl	800fc1c <__sinit>
 800f78c:	69ab      	ldr	r3, [r5, #24]
 800f78e:	68ac      	ldr	r4, [r5, #8]
 800f790:	b913      	cbnz	r3, 800f798 <_puts_r+0x1c>
 800f792:	4628      	mov	r0, r5
 800f794:	f000 fa42 	bl	800fc1c <__sinit>
 800f798:	4b2c      	ldr	r3, [pc, #176]	; (800f84c <_puts_r+0xd0>)
 800f79a:	429c      	cmp	r4, r3
 800f79c:	d120      	bne.n	800f7e0 <_puts_r+0x64>
 800f79e:	686c      	ldr	r4, [r5, #4]
 800f7a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7a2:	07db      	lsls	r3, r3, #31
 800f7a4:	d405      	bmi.n	800f7b2 <_puts_r+0x36>
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	0598      	lsls	r0, r3, #22
 800f7aa:	d402      	bmi.n	800f7b2 <_puts_r+0x36>
 800f7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7ae:	f000 fad3 	bl	800fd58 <__retarget_lock_acquire_recursive>
 800f7b2:	89a3      	ldrh	r3, [r4, #12]
 800f7b4:	0719      	lsls	r1, r3, #28
 800f7b6:	d51d      	bpl.n	800f7f4 <_puts_r+0x78>
 800f7b8:	6923      	ldr	r3, [r4, #16]
 800f7ba:	b1db      	cbz	r3, 800f7f4 <_puts_r+0x78>
 800f7bc:	3e01      	subs	r6, #1
 800f7be:	68a3      	ldr	r3, [r4, #8]
 800f7c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	60a3      	str	r3, [r4, #8]
 800f7c8:	bb39      	cbnz	r1, 800f81a <_puts_r+0x9e>
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	da38      	bge.n	800f840 <_puts_r+0xc4>
 800f7ce:	4622      	mov	r2, r4
 800f7d0:	210a      	movs	r1, #10
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f000 f848 	bl	800f868 <__swbuf_r>
 800f7d8:	3001      	adds	r0, #1
 800f7da:	d011      	beq.n	800f800 <_puts_r+0x84>
 800f7dc:	250a      	movs	r5, #10
 800f7de:	e011      	b.n	800f804 <_puts_r+0x88>
 800f7e0:	4b1b      	ldr	r3, [pc, #108]	; (800f850 <_puts_r+0xd4>)
 800f7e2:	429c      	cmp	r4, r3
 800f7e4:	d101      	bne.n	800f7ea <_puts_r+0x6e>
 800f7e6:	68ac      	ldr	r4, [r5, #8]
 800f7e8:	e7da      	b.n	800f7a0 <_puts_r+0x24>
 800f7ea:	4b1a      	ldr	r3, [pc, #104]	; (800f854 <_puts_r+0xd8>)
 800f7ec:	429c      	cmp	r4, r3
 800f7ee:	bf08      	it	eq
 800f7f0:	68ec      	ldreq	r4, [r5, #12]
 800f7f2:	e7d5      	b.n	800f7a0 <_puts_r+0x24>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	f000 f888 	bl	800f90c <__swsetup_r>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	d0dd      	beq.n	800f7bc <_puts_r+0x40>
 800f800:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f806:	07da      	lsls	r2, r3, #31
 800f808:	d405      	bmi.n	800f816 <_puts_r+0x9a>
 800f80a:	89a3      	ldrh	r3, [r4, #12]
 800f80c:	059b      	lsls	r3, r3, #22
 800f80e:	d402      	bmi.n	800f816 <_puts_r+0x9a>
 800f810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f812:	f000 faa2 	bl	800fd5a <__retarget_lock_release_recursive>
 800f816:	4628      	mov	r0, r5
 800f818:	bd70      	pop	{r4, r5, r6, pc}
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	da04      	bge.n	800f828 <_puts_r+0xac>
 800f81e:	69a2      	ldr	r2, [r4, #24]
 800f820:	429a      	cmp	r2, r3
 800f822:	dc06      	bgt.n	800f832 <_puts_r+0xb6>
 800f824:	290a      	cmp	r1, #10
 800f826:	d004      	beq.n	800f832 <_puts_r+0xb6>
 800f828:	6823      	ldr	r3, [r4, #0]
 800f82a:	1c5a      	adds	r2, r3, #1
 800f82c:	6022      	str	r2, [r4, #0]
 800f82e:	7019      	strb	r1, [r3, #0]
 800f830:	e7c5      	b.n	800f7be <_puts_r+0x42>
 800f832:	4622      	mov	r2, r4
 800f834:	4628      	mov	r0, r5
 800f836:	f000 f817 	bl	800f868 <__swbuf_r>
 800f83a:	3001      	adds	r0, #1
 800f83c:	d1bf      	bne.n	800f7be <_puts_r+0x42>
 800f83e:	e7df      	b.n	800f800 <_puts_r+0x84>
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	250a      	movs	r5, #10
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	6022      	str	r2, [r4, #0]
 800f848:	701d      	strb	r5, [r3, #0]
 800f84a:	e7db      	b.n	800f804 <_puts_r+0x88>
 800f84c:	08010f8c 	.word	0x08010f8c
 800f850:	08010fac 	.word	0x08010fac
 800f854:	08010f6c 	.word	0x08010f6c

0800f858 <puts>:
 800f858:	4b02      	ldr	r3, [pc, #8]	; (800f864 <puts+0xc>)
 800f85a:	4601      	mov	r1, r0
 800f85c:	6818      	ldr	r0, [r3, #0]
 800f85e:	f7ff bf8d 	b.w	800f77c <_puts_r>
 800f862:	bf00      	nop
 800f864:	200000b8 	.word	0x200000b8

0800f868 <__swbuf_r>:
 800f868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f86a:	460e      	mov	r6, r1
 800f86c:	4614      	mov	r4, r2
 800f86e:	4605      	mov	r5, r0
 800f870:	b118      	cbz	r0, 800f87a <__swbuf_r+0x12>
 800f872:	6983      	ldr	r3, [r0, #24]
 800f874:	b90b      	cbnz	r3, 800f87a <__swbuf_r+0x12>
 800f876:	f000 f9d1 	bl	800fc1c <__sinit>
 800f87a:	4b21      	ldr	r3, [pc, #132]	; (800f900 <__swbuf_r+0x98>)
 800f87c:	429c      	cmp	r4, r3
 800f87e:	d12b      	bne.n	800f8d8 <__swbuf_r+0x70>
 800f880:	686c      	ldr	r4, [r5, #4]
 800f882:	69a3      	ldr	r3, [r4, #24]
 800f884:	60a3      	str	r3, [r4, #8]
 800f886:	89a3      	ldrh	r3, [r4, #12]
 800f888:	071a      	lsls	r2, r3, #28
 800f88a:	d52f      	bpl.n	800f8ec <__swbuf_r+0x84>
 800f88c:	6923      	ldr	r3, [r4, #16]
 800f88e:	b36b      	cbz	r3, 800f8ec <__swbuf_r+0x84>
 800f890:	6923      	ldr	r3, [r4, #16]
 800f892:	6820      	ldr	r0, [r4, #0]
 800f894:	1ac0      	subs	r0, r0, r3
 800f896:	6963      	ldr	r3, [r4, #20]
 800f898:	b2f6      	uxtb	r6, r6
 800f89a:	4283      	cmp	r3, r0
 800f89c:	4637      	mov	r7, r6
 800f89e:	dc04      	bgt.n	800f8aa <__swbuf_r+0x42>
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f000 f926 	bl	800faf4 <_fflush_r>
 800f8a8:	bb30      	cbnz	r0, 800f8f8 <__swbuf_r+0x90>
 800f8aa:	68a3      	ldr	r3, [r4, #8]
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	60a3      	str	r3, [r4, #8]
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	1c5a      	adds	r2, r3, #1
 800f8b4:	6022      	str	r2, [r4, #0]
 800f8b6:	701e      	strb	r6, [r3, #0]
 800f8b8:	6963      	ldr	r3, [r4, #20]
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	4283      	cmp	r3, r0
 800f8be:	d004      	beq.n	800f8ca <__swbuf_r+0x62>
 800f8c0:	89a3      	ldrh	r3, [r4, #12]
 800f8c2:	07db      	lsls	r3, r3, #31
 800f8c4:	d506      	bpl.n	800f8d4 <__swbuf_r+0x6c>
 800f8c6:	2e0a      	cmp	r6, #10
 800f8c8:	d104      	bne.n	800f8d4 <__swbuf_r+0x6c>
 800f8ca:	4621      	mov	r1, r4
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	f000 f911 	bl	800faf4 <_fflush_r>
 800f8d2:	b988      	cbnz	r0, 800f8f8 <__swbuf_r+0x90>
 800f8d4:	4638      	mov	r0, r7
 800f8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8d8:	4b0a      	ldr	r3, [pc, #40]	; (800f904 <__swbuf_r+0x9c>)
 800f8da:	429c      	cmp	r4, r3
 800f8dc:	d101      	bne.n	800f8e2 <__swbuf_r+0x7a>
 800f8de:	68ac      	ldr	r4, [r5, #8]
 800f8e0:	e7cf      	b.n	800f882 <__swbuf_r+0x1a>
 800f8e2:	4b09      	ldr	r3, [pc, #36]	; (800f908 <__swbuf_r+0xa0>)
 800f8e4:	429c      	cmp	r4, r3
 800f8e6:	bf08      	it	eq
 800f8e8:	68ec      	ldreq	r4, [r5, #12]
 800f8ea:	e7ca      	b.n	800f882 <__swbuf_r+0x1a>
 800f8ec:	4621      	mov	r1, r4
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f000 f80c 	bl	800f90c <__swsetup_r>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d0cb      	beq.n	800f890 <__swbuf_r+0x28>
 800f8f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f8fc:	e7ea      	b.n	800f8d4 <__swbuf_r+0x6c>
 800f8fe:	bf00      	nop
 800f900:	08010f8c 	.word	0x08010f8c
 800f904:	08010fac 	.word	0x08010fac
 800f908:	08010f6c 	.word	0x08010f6c

0800f90c <__swsetup_r>:
 800f90c:	4b32      	ldr	r3, [pc, #200]	; (800f9d8 <__swsetup_r+0xcc>)
 800f90e:	b570      	push	{r4, r5, r6, lr}
 800f910:	681d      	ldr	r5, [r3, #0]
 800f912:	4606      	mov	r6, r0
 800f914:	460c      	mov	r4, r1
 800f916:	b125      	cbz	r5, 800f922 <__swsetup_r+0x16>
 800f918:	69ab      	ldr	r3, [r5, #24]
 800f91a:	b913      	cbnz	r3, 800f922 <__swsetup_r+0x16>
 800f91c:	4628      	mov	r0, r5
 800f91e:	f000 f97d 	bl	800fc1c <__sinit>
 800f922:	4b2e      	ldr	r3, [pc, #184]	; (800f9dc <__swsetup_r+0xd0>)
 800f924:	429c      	cmp	r4, r3
 800f926:	d10f      	bne.n	800f948 <__swsetup_r+0x3c>
 800f928:	686c      	ldr	r4, [r5, #4]
 800f92a:	89a3      	ldrh	r3, [r4, #12]
 800f92c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f930:	0719      	lsls	r1, r3, #28
 800f932:	d42c      	bmi.n	800f98e <__swsetup_r+0x82>
 800f934:	06dd      	lsls	r5, r3, #27
 800f936:	d411      	bmi.n	800f95c <__swsetup_r+0x50>
 800f938:	2309      	movs	r3, #9
 800f93a:	6033      	str	r3, [r6, #0]
 800f93c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f940:	81a3      	strh	r3, [r4, #12]
 800f942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f946:	e03e      	b.n	800f9c6 <__swsetup_r+0xba>
 800f948:	4b25      	ldr	r3, [pc, #148]	; (800f9e0 <__swsetup_r+0xd4>)
 800f94a:	429c      	cmp	r4, r3
 800f94c:	d101      	bne.n	800f952 <__swsetup_r+0x46>
 800f94e:	68ac      	ldr	r4, [r5, #8]
 800f950:	e7eb      	b.n	800f92a <__swsetup_r+0x1e>
 800f952:	4b24      	ldr	r3, [pc, #144]	; (800f9e4 <__swsetup_r+0xd8>)
 800f954:	429c      	cmp	r4, r3
 800f956:	bf08      	it	eq
 800f958:	68ec      	ldreq	r4, [r5, #12]
 800f95a:	e7e6      	b.n	800f92a <__swsetup_r+0x1e>
 800f95c:	0758      	lsls	r0, r3, #29
 800f95e:	d512      	bpl.n	800f986 <__swsetup_r+0x7a>
 800f960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f962:	b141      	cbz	r1, 800f976 <__swsetup_r+0x6a>
 800f964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f968:	4299      	cmp	r1, r3
 800f96a:	d002      	beq.n	800f972 <__swsetup_r+0x66>
 800f96c:	4630      	mov	r0, r6
 800f96e:	f000 fa59 	bl	800fe24 <_free_r>
 800f972:	2300      	movs	r3, #0
 800f974:	6363      	str	r3, [r4, #52]	; 0x34
 800f976:	89a3      	ldrh	r3, [r4, #12]
 800f978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f97c:	81a3      	strh	r3, [r4, #12]
 800f97e:	2300      	movs	r3, #0
 800f980:	6063      	str	r3, [r4, #4]
 800f982:	6923      	ldr	r3, [r4, #16]
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	f043 0308 	orr.w	r3, r3, #8
 800f98c:	81a3      	strh	r3, [r4, #12]
 800f98e:	6923      	ldr	r3, [r4, #16]
 800f990:	b94b      	cbnz	r3, 800f9a6 <__swsetup_r+0x9a>
 800f992:	89a3      	ldrh	r3, [r4, #12]
 800f994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f99c:	d003      	beq.n	800f9a6 <__swsetup_r+0x9a>
 800f99e:	4621      	mov	r1, r4
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	f000 f9ff 	bl	800fda4 <__smakebuf_r>
 800f9a6:	89a0      	ldrh	r0, [r4, #12]
 800f9a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9ac:	f010 0301 	ands.w	r3, r0, #1
 800f9b0:	d00a      	beq.n	800f9c8 <__swsetup_r+0xbc>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60a3      	str	r3, [r4, #8]
 800f9b6:	6963      	ldr	r3, [r4, #20]
 800f9b8:	425b      	negs	r3, r3
 800f9ba:	61a3      	str	r3, [r4, #24]
 800f9bc:	6923      	ldr	r3, [r4, #16]
 800f9be:	b943      	cbnz	r3, 800f9d2 <__swsetup_r+0xc6>
 800f9c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9c4:	d1ba      	bne.n	800f93c <__swsetup_r+0x30>
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
 800f9c8:	0781      	lsls	r1, r0, #30
 800f9ca:	bf58      	it	pl
 800f9cc:	6963      	ldrpl	r3, [r4, #20]
 800f9ce:	60a3      	str	r3, [r4, #8]
 800f9d0:	e7f4      	b.n	800f9bc <__swsetup_r+0xb0>
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	e7f7      	b.n	800f9c6 <__swsetup_r+0xba>
 800f9d6:	bf00      	nop
 800f9d8:	200000b8 	.word	0x200000b8
 800f9dc:	08010f8c 	.word	0x08010f8c
 800f9e0:	08010fac 	.word	0x08010fac
 800f9e4:	08010f6c 	.word	0x08010f6c

0800f9e8 <__sflush_r>:
 800f9e8:	898a      	ldrh	r2, [r1, #12]
 800f9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ee:	4605      	mov	r5, r0
 800f9f0:	0710      	lsls	r0, r2, #28
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	d458      	bmi.n	800faa8 <__sflush_r+0xc0>
 800f9f6:	684b      	ldr	r3, [r1, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	dc05      	bgt.n	800fa08 <__sflush_r+0x20>
 800f9fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	dc02      	bgt.n	800fa08 <__sflush_r+0x20>
 800fa02:	2000      	movs	r0, #0
 800fa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa0a:	2e00      	cmp	r6, #0
 800fa0c:	d0f9      	beq.n	800fa02 <__sflush_r+0x1a>
 800fa0e:	2300      	movs	r3, #0
 800fa10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa14:	682f      	ldr	r7, [r5, #0]
 800fa16:	602b      	str	r3, [r5, #0]
 800fa18:	d032      	beq.n	800fa80 <__sflush_r+0x98>
 800fa1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	075a      	lsls	r2, r3, #29
 800fa20:	d505      	bpl.n	800fa2e <__sflush_r+0x46>
 800fa22:	6863      	ldr	r3, [r4, #4]
 800fa24:	1ac0      	subs	r0, r0, r3
 800fa26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa28:	b10b      	cbz	r3, 800fa2e <__sflush_r+0x46>
 800fa2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa2c:	1ac0      	subs	r0, r0, r3
 800fa2e:	2300      	movs	r3, #0
 800fa30:	4602      	mov	r2, r0
 800fa32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa34:	6a21      	ldr	r1, [r4, #32]
 800fa36:	4628      	mov	r0, r5
 800fa38:	47b0      	blx	r6
 800fa3a:	1c43      	adds	r3, r0, #1
 800fa3c:	89a3      	ldrh	r3, [r4, #12]
 800fa3e:	d106      	bne.n	800fa4e <__sflush_r+0x66>
 800fa40:	6829      	ldr	r1, [r5, #0]
 800fa42:	291d      	cmp	r1, #29
 800fa44:	d82c      	bhi.n	800faa0 <__sflush_r+0xb8>
 800fa46:	4a2a      	ldr	r2, [pc, #168]	; (800faf0 <__sflush_r+0x108>)
 800fa48:	40ca      	lsrs	r2, r1
 800fa4a:	07d6      	lsls	r6, r2, #31
 800fa4c:	d528      	bpl.n	800faa0 <__sflush_r+0xb8>
 800fa4e:	2200      	movs	r2, #0
 800fa50:	6062      	str	r2, [r4, #4]
 800fa52:	04d9      	lsls	r1, r3, #19
 800fa54:	6922      	ldr	r2, [r4, #16]
 800fa56:	6022      	str	r2, [r4, #0]
 800fa58:	d504      	bpl.n	800fa64 <__sflush_r+0x7c>
 800fa5a:	1c42      	adds	r2, r0, #1
 800fa5c:	d101      	bne.n	800fa62 <__sflush_r+0x7a>
 800fa5e:	682b      	ldr	r3, [r5, #0]
 800fa60:	b903      	cbnz	r3, 800fa64 <__sflush_r+0x7c>
 800fa62:	6560      	str	r0, [r4, #84]	; 0x54
 800fa64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa66:	602f      	str	r7, [r5, #0]
 800fa68:	2900      	cmp	r1, #0
 800fa6a:	d0ca      	beq.n	800fa02 <__sflush_r+0x1a>
 800fa6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa70:	4299      	cmp	r1, r3
 800fa72:	d002      	beq.n	800fa7a <__sflush_r+0x92>
 800fa74:	4628      	mov	r0, r5
 800fa76:	f000 f9d5 	bl	800fe24 <_free_r>
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	6360      	str	r0, [r4, #52]	; 0x34
 800fa7e:	e7c1      	b.n	800fa04 <__sflush_r+0x1c>
 800fa80:	6a21      	ldr	r1, [r4, #32]
 800fa82:	2301      	movs	r3, #1
 800fa84:	4628      	mov	r0, r5
 800fa86:	47b0      	blx	r6
 800fa88:	1c41      	adds	r1, r0, #1
 800fa8a:	d1c7      	bne.n	800fa1c <__sflush_r+0x34>
 800fa8c:	682b      	ldr	r3, [r5, #0]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d0c4      	beq.n	800fa1c <__sflush_r+0x34>
 800fa92:	2b1d      	cmp	r3, #29
 800fa94:	d001      	beq.n	800fa9a <__sflush_r+0xb2>
 800fa96:	2b16      	cmp	r3, #22
 800fa98:	d101      	bne.n	800fa9e <__sflush_r+0xb6>
 800fa9a:	602f      	str	r7, [r5, #0]
 800fa9c:	e7b1      	b.n	800fa02 <__sflush_r+0x1a>
 800fa9e:	89a3      	ldrh	r3, [r4, #12]
 800faa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faa4:	81a3      	strh	r3, [r4, #12]
 800faa6:	e7ad      	b.n	800fa04 <__sflush_r+0x1c>
 800faa8:	690f      	ldr	r7, [r1, #16]
 800faaa:	2f00      	cmp	r7, #0
 800faac:	d0a9      	beq.n	800fa02 <__sflush_r+0x1a>
 800faae:	0793      	lsls	r3, r2, #30
 800fab0:	680e      	ldr	r6, [r1, #0]
 800fab2:	bf08      	it	eq
 800fab4:	694b      	ldreq	r3, [r1, #20]
 800fab6:	600f      	str	r7, [r1, #0]
 800fab8:	bf18      	it	ne
 800faba:	2300      	movne	r3, #0
 800fabc:	eba6 0807 	sub.w	r8, r6, r7
 800fac0:	608b      	str	r3, [r1, #8]
 800fac2:	f1b8 0f00 	cmp.w	r8, #0
 800fac6:	dd9c      	ble.n	800fa02 <__sflush_r+0x1a>
 800fac8:	6a21      	ldr	r1, [r4, #32]
 800faca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800facc:	4643      	mov	r3, r8
 800face:	463a      	mov	r2, r7
 800fad0:	4628      	mov	r0, r5
 800fad2:	47b0      	blx	r6
 800fad4:	2800      	cmp	r0, #0
 800fad6:	dc06      	bgt.n	800fae6 <__sflush_r+0xfe>
 800fad8:	89a3      	ldrh	r3, [r4, #12]
 800fada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fade:	81a3      	strh	r3, [r4, #12]
 800fae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fae4:	e78e      	b.n	800fa04 <__sflush_r+0x1c>
 800fae6:	4407      	add	r7, r0
 800fae8:	eba8 0800 	sub.w	r8, r8, r0
 800faec:	e7e9      	b.n	800fac2 <__sflush_r+0xda>
 800faee:	bf00      	nop
 800faf0:	20400001 	.word	0x20400001

0800faf4 <_fflush_r>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	690b      	ldr	r3, [r1, #16]
 800faf8:	4605      	mov	r5, r0
 800fafa:	460c      	mov	r4, r1
 800fafc:	b913      	cbnz	r3, 800fb04 <_fflush_r+0x10>
 800fafe:	2500      	movs	r5, #0
 800fb00:	4628      	mov	r0, r5
 800fb02:	bd38      	pop	{r3, r4, r5, pc}
 800fb04:	b118      	cbz	r0, 800fb0e <_fflush_r+0x1a>
 800fb06:	6983      	ldr	r3, [r0, #24]
 800fb08:	b90b      	cbnz	r3, 800fb0e <_fflush_r+0x1a>
 800fb0a:	f000 f887 	bl	800fc1c <__sinit>
 800fb0e:	4b14      	ldr	r3, [pc, #80]	; (800fb60 <_fflush_r+0x6c>)
 800fb10:	429c      	cmp	r4, r3
 800fb12:	d11b      	bne.n	800fb4c <_fflush_r+0x58>
 800fb14:	686c      	ldr	r4, [r5, #4]
 800fb16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d0ef      	beq.n	800fafe <_fflush_r+0xa>
 800fb1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb20:	07d0      	lsls	r0, r2, #31
 800fb22:	d404      	bmi.n	800fb2e <_fflush_r+0x3a>
 800fb24:	0599      	lsls	r1, r3, #22
 800fb26:	d402      	bmi.n	800fb2e <_fflush_r+0x3a>
 800fb28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb2a:	f000 f915 	bl	800fd58 <__retarget_lock_acquire_recursive>
 800fb2e:	4628      	mov	r0, r5
 800fb30:	4621      	mov	r1, r4
 800fb32:	f7ff ff59 	bl	800f9e8 <__sflush_r>
 800fb36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb38:	07da      	lsls	r2, r3, #31
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	d4e0      	bmi.n	800fb00 <_fflush_r+0xc>
 800fb3e:	89a3      	ldrh	r3, [r4, #12]
 800fb40:	059b      	lsls	r3, r3, #22
 800fb42:	d4dd      	bmi.n	800fb00 <_fflush_r+0xc>
 800fb44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb46:	f000 f908 	bl	800fd5a <__retarget_lock_release_recursive>
 800fb4a:	e7d9      	b.n	800fb00 <_fflush_r+0xc>
 800fb4c:	4b05      	ldr	r3, [pc, #20]	; (800fb64 <_fflush_r+0x70>)
 800fb4e:	429c      	cmp	r4, r3
 800fb50:	d101      	bne.n	800fb56 <_fflush_r+0x62>
 800fb52:	68ac      	ldr	r4, [r5, #8]
 800fb54:	e7df      	b.n	800fb16 <_fflush_r+0x22>
 800fb56:	4b04      	ldr	r3, [pc, #16]	; (800fb68 <_fflush_r+0x74>)
 800fb58:	429c      	cmp	r4, r3
 800fb5a:	bf08      	it	eq
 800fb5c:	68ec      	ldreq	r4, [r5, #12]
 800fb5e:	e7da      	b.n	800fb16 <_fflush_r+0x22>
 800fb60:	08010f8c 	.word	0x08010f8c
 800fb64:	08010fac 	.word	0x08010fac
 800fb68:	08010f6c 	.word	0x08010f6c

0800fb6c <std>:
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	b510      	push	{r4, lr}
 800fb70:	4604      	mov	r4, r0
 800fb72:	e9c0 3300 	strd	r3, r3, [r0]
 800fb76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb7a:	6083      	str	r3, [r0, #8]
 800fb7c:	8181      	strh	r1, [r0, #12]
 800fb7e:	6643      	str	r3, [r0, #100]	; 0x64
 800fb80:	81c2      	strh	r2, [r0, #14]
 800fb82:	6183      	str	r3, [r0, #24]
 800fb84:	4619      	mov	r1, r3
 800fb86:	2208      	movs	r2, #8
 800fb88:	305c      	adds	r0, #92	; 0x5c
 800fb8a:	f7ff fdd7 	bl	800f73c <memset>
 800fb8e:	4b05      	ldr	r3, [pc, #20]	; (800fba4 <std+0x38>)
 800fb90:	6263      	str	r3, [r4, #36]	; 0x24
 800fb92:	4b05      	ldr	r3, [pc, #20]	; (800fba8 <std+0x3c>)
 800fb94:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb96:	4b05      	ldr	r3, [pc, #20]	; (800fbac <std+0x40>)
 800fb98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb9a:	4b05      	ldr	r3, [pc, #20]	; (800fbb0 <std+0x44>)
 800fb9c:	6224      	str	r4, [r4, #32]
 800fb9e:	6323      	str	r3, [r4, #48]	; 0x30
 800fba0:	bd10      	pop	{r4, pc}
 800fba2:	bf00      	nop
 800fba4:	08010575 	.word	0x08010575
 800fba8:	08010597 	.word	0x08010597
 800fbac:	080105cf 	.word	0x080105cf
 800fbb0:	080105f3 	.word	0x080105f3

0800fbb4 <_cleanup_r>:
 800fbb4:	4901      	ldr	r1, [pc, #4]	; (800fbbc <_cleanup_r+0x8>)
 800fbb6:	f000 b8af 	b.w	800fd18 <_fwalk_reent>
 800fbba:	bf00      	nop
 800fbbc:	0800faf5 	.word	0x0800faf5

0800fbc0 <__sfmoreglue>:
 800fbc0:	b570      	push	{r4, r5, r6, lr}
 800fbc2:	1e4a      	subs	r2, r1, #1
 800fbc4:	2568      	movs	r5, #104	; 0x68
 800fbc6:	4355      	muls	r5, r2
 800fbc8:	460e      	mov	r6, r1
 800fbca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fbce:	f000 f979 	bl	800fec4 <_malloc_r>
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	b140      	cbz	r0, 800fbe8 <__sfmoreglue+0x28>
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	e9c0 1600 	strd	r1, r6, [r0]
 800fbdc:	300c      	adds	r0, #12
 800fbde:	60a0      	str	r0, [r4, #8]
 800fbe0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fbe4:	f7ff fdaa 	bl	800f73c <memset>
 800fbe8:	4620      	mov	r0, r4
 800fbea:	bd70      	pop	{r4, r5, r6, pc}

0800fbec <__sfp_lock_acquire>:
 800fbec:	4801      	ldr	r0, [pc, #4]	; (800fbf4 <__sfp_lock_acquire+0x8>)
 800fbee:	f000 b8b3 	b.w	800fd58 <__retarget_lock_acquire_recursive>
 800fbf2:	bf00      	nop
 800fbf4:	2000fac8 	.word	0x2000fac8

0800fbf8 <__sfp_lock_release>:
 800fbf8:	4801      	ldr	r0, [pc, #4]	; (800fc00 <__sfp_lock_release+0x8>)
 800fbfa:	f000 b8ae 	b.w	800fd5a <__retarget_lock_release_recursive>
 800fbfe:	bf00      	nop
 800fc00:	2000fac8 	.word	0x2000fac8

0800fc04 <__sinit_lock_acquire>:
 800fc04:	4801      	ldr	r0, [pc, #4]	; (800fc0c <__sinit_lock_acquire+0x8>)
 800fc06:	f000 b8a7 	b.w	800fd58 <__retarget_lock_acquire_recursive>
 800fc0a:	bf00      	nop
 800fc0c:	2000fac3 	.word	0x2000fac3

0800fc10 <__sinit_lock_release>:
 800fc10:	4801      	ldr	r0, [pc, #4]	; (800fc18 <__sinit_lock_release+0x8>)
 800fc12:	f000 b8a2 	b.w	800fd5a <__retarget_lock_release_recursive>
 800fc16:	bf00      	nop
 800fc18:	2000fac3 	.word	0x2000fac3

0800fc1c <__sinit>:
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	4604      	mov	r4, r0
 800fc20:	f7ff fff0 	bl	800fc04 <__sinit_lock_acquire>
 800fc24:	69a3      	ldr	r3, [r4, #24]
 800fc26:	b11b      	cbz	r3, 800fc30 <__sinit+0x14>
 800fc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc2c:	f7ff bff0 	b.w	800fc10 <__sinit_lock_release>
 800fc30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fc34:	6523      	str	r3, [r4, #80]	; 0x50
 800fc36:	4b13      	ldr	r3, [pc, #76]	; (800fc84 <__sinit+0x68>)
 800fc38:	4a13      	ldr	r2, [pc, #76]	; (800fc88 <__sinit+0x6c>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fc3e:	42a3      	cmp	r3, r4
 800fc40:	bf04      	itt	eq
 800fc42:	2301      	moveq	r3, #1
 800fc44:	61a3      	streq	r3, [r4, #24]
 800fc46:	4620      	mov	r0, r4
 800fc48:	f000 f820 	bl	800fc8c <__sfp>
 800fc4c:	6060      	str	r0, [r4, #4]
 800fc4e:	4620      	mov	r0, r4
 800fc50:	f000 f81c 	bl	800fc8c <__sfp>
 800fc54:	60a0      	str	r0, [r4, #8]
 800fc56:	4620      	mov	r0, r4
 800fc58:	f000 f818 	bl	800fc8c <__sfp>
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	60e0      	str	r0, [r4, #12]
 800fc60:	2104      	movs	r1, #4
 800fc62:	6860      	ldr	r0, [r4, #4]
 800fc64:	f7ff ff82 	bl	800fb6c <std>
 800fc68:	68a0      	ldr	r0, [r4, #8]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	2109      	movs	r1, #9
 800fc6e:	f7ff ff7d 	bl	800fb6c <std>
 800fc72:	68e0      	ldr	r0, [r4, #12]
 800fc74:	2202      	movs	r2, #2
 800fc76:	2112      	movs	r1, #18
 800fc78:	f7ff ff78 	bl	800fb6c <std>
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	61a3      	str	r3, [r4, #24]
 800fc80:	e7d2      	b.n	800fc28 <__sinit+0xc>
 800fc82:	bf00      	nop
 800fc84:	08010f68 	.word	0x08010f68
 800fc88:	0800fbb5 	.word	0x0800fbb5

0800fc8c <__sfp>:
 800fc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc8e:	4607      	mov	r7, r0
 800fc90:	f7ff ffac 	bl	800fbec <__sfp_lock_acquire>
 800fc94:	4b1e      	ldr	r3, [pc, #120]	; (800fd10 <__sfp+0x84>)
 800fc96:	681e      	ldr	r6, [r3, #0]
 800fc98:	69b3      	ldr	r3, [r6, #24]
 800fc9a:	b913      	cbnz	r3, 800fca2 <__sfp+0x16>
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f7ff ffbd 	bl	800fc1c <__sinit>
 800fca2:	3648      	adds	r6, #72	; 0x48
 800fca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	d503      	bpl.n	800fcb4 <__sfp+0x28>
 800fcac:	6833      	ldr	r3, [r6, #0]
 800fcae:	b30b      	cbz	r3, 800fcf4 <__sfp+0x68>
 800fcb0:	6836      	ldr	r6, [r6, #0]
 800fcb2:	e7f7      	b.n	800fca4 <__sfp+0x18>
 800fcb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fcb8:	b9d5      	cbnz	r5, 800fcf0 <__sfp+0x64>
 800fcba:	4b16      	ldr	r3, [pc, #88]	; (800fd14 <__sfp+0x88>)
 800fcbc:	60e3      	str	r3, [r4, #12]
 800fcbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fcc2:	6665      	str	r5, [r4, #100]	; 0x64
 800fcc4:	f000 f847 	bl	800fd56 <__retarget_lock_init_recursive>
 800fcc8:	f7ff ff96 	bl	800fbf8 <__sfp_lock_release>
 800fccc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fcd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fcd4:	6025      	str	r5, [r4, #0]
 800fcd6:	61a5      	str	r5, [r4, #24]
 800fcd8:	2208      	movs	r2, #8
 800fcda:	4629      	mov	r1, r5
 800fcdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fce0:	f7ff fd2c 	bl	800f73c <memset>
 800fce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fcec:	4620      	mov	r0, r4
 800fcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcf0:	3468      	adds	r4, #104	; 0x68
 800fcf2:	e7d9      	b.n	800fca8 <__sfp+0x1c>
 800fcf4:	2104      	movs	r1, #4
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	f7ff ff62 	bl	800fbc0 <__sfmoreglue>
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	6030      	str	r0, [r6, #0]
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d1d5      	bne.n	800fcb0 <__sfp+0x24>
 800fd04:	f7ff ff78 	bl	800fbf8 <__sfp_lock_release>
 800fd08:	230c      	movs	r3, #12
 800fd0a:	603b      	str	r3, [r7, #0]
 800fd0c:	e7ee      	b.n	800fcec <__sfp+0x60>
 800fd0e:	bf00      	nop
 800fd10:	08010f68 	.word	0x08010f68
 800fd14:	ffff0001 	.word	0xffff0001

0800fd18 <_fwalk_reent>:
 800fd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd1c:	4606      	mov	r6, r0
 800fd1e:	4688      	mov	r8, r1
 800fd20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fd24:	2700      	movs	r7, #0
 800fd26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fd2a:	f1b9 0901 	subs.w	r9, r9, #1
 800fd2e:	d505      	bpl.n	800fd3c <_fwalk_reent+0x24>
 800fd30:	6824      	ldr	r4, [r4, #0]
 800fd32:	2c00      	cmp	r4, #0
 800fd34:	d1f7      	bne.n	800fd26 <_fwalk_reent+0xe>
 800fd36:	4638      	mov	r0, r7
 800fd38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd3c:	89ab      	ldrh	r3, [r5, #12]
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d907      	bls.n	800fd52 <_fwalk_reent+0x3a>
 800fd42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fd46:	3301      	adds	r3, #1
 800fd48:	d003      	beq.n	800fd52 <_fwalk_reent+0x3a>
 800fd4a:	4629      	mov	r1, r5
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	47c0      	blx	r8
 800fd50:	4307      	orrs	r7, r0
 800fd52:	3568      	adds	r5, #104	; 0x68
 800fd54:	e7e9      	b.n	800fd2a <_fwalk_reent+0x12>

0800fd56 <__retarget_lock_init_recursive>:
 800fd56:	4770      	bx	lr

0800fd58 <__retarget_lock_acquire_recursive>:
 800fd58:	4770      	bx	lr

0800fd5a <__retarget_lock_release_recursive>:
 800fd5a:	4770      	bx	lr

0800fd5c <__swhatbuf_r>:
 800fd5c:	b570      	push	{r4, r5, r6, lr}
 800fd5e:	460e      	mov	r6, r1
 800fd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd64:	2900      	cmp	r1, #0
 800fd66:	b096      	sub	sp, #88	; 0x58
 800fd68:	4614      	mov	r4, r2
 800fd6a:	461d      	mov	r5, r3
 800fd6c:	da07      	bge.n	800fd7e <__swhatbuf_r+0x22>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	602b      	str	r3, [r5, #0]
 800fd72:	89b3      	ldrh	r3, [r6, #12]
 800fd74:	061a      	lsls	r2, r3, #24
 800fd76:	d410      	bmi.n	800fd9a <__swhatbuf_r+0x3e>
 800fd78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd7c:	e00e      	b.n	800fd9c <__swhatbuf_r+0x40>
 800fd7e:	466a      	mov	r2, sp
 800fd80:	f000 fc5e 	bl	8010640 <_fstat_r>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	dbf2      	blt.n	800fd6e <__swhatbuf_r+0x12>
 800fd88:	9a01      	ldr	r2, [sp, #4]
 800fd8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd92:	425a      	negs	r2, r3
 800fd94:	415a      	adcs	r2, r3
 800fd96:	602a      	str	r2, [r5, #0]
 800fd98:	e7ee      	b.n	800fd78 <__swhatbuf_r+0x1c>
 800fd9a:	2340      	movs	r3, #64	; 0x40
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	6023      	str	r3, [r4, #0]
 800fda0:	b016      	add	sp, #88	; 0x58
 800fda2:	bd70      	pop	{r4, r5, r6, pc}

0800fda4 <__smakebuf_r>:
 800fda4:	898b      	ldrh	r3, [r1, #12]
 800fda6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fda8:	079d      	lsls	r5, r3, #30
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460c      	mov	r4, r1
 800fdae:	d507      	bpl.n	800fdc0 <__smakebuf_r+0x1c>
 800fdb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fdb4:	6023      	str	r3, [r4, #0]
 800fdb6:	6123      	str	r3, [r4, #16]
 800fdb8:	2301      	movs	r3, #1
 800fdba:	6163      	str	r3, [r4, #20]
 800fdbc:	b002      	add	sp, #8
 800fdbe:	bd70      	pop	{r4, r5, r6, pc}
 800fdc0:	ab01      	add	r3, sp, #4
 800fdc2:	466a      	mov	r2, sp
 800fdc4:	f7ff ffca 	bl	800fd5c <__swhatbuf_r>
 800fdc8:	9900      	ldr	r1, [sp, #0]
 800fdca:	4605      	mov	r5, r0
 800fdcc:	4630      	mov	r0, r6
 800fdce:	f000 f879 	bl	800fec4 <_malloc_r>
 800fdd2:	b948      	cbnz	r0, 800fde8 <__smakebuf_r+0x44>
 800fdd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdd8:	059a      	lsls	r2, r3, #22
 800fdda:	d4ef      	bmi.n	800fdbc <__smakebuf_r+0x18>
 800fddc:	f023 0303 	bic.w	r3, r3, #3
 800fde0:	f043 0302 	orr.w	r3, r3, #2
 800fde4:	81a3      	strh	r3, [r4, #12]
 800fde6:	e7e3      	b.n	800fdb0 <__smakebuf_r+0xc>
 800fde8:	4b0d      	ldr	r3, [pc, #52]	; (800fe20 <__smakebuf_r+0x7c>)
 800fdea:	62b3      	str	r3, [r6, #40]	; 0x28
 800fdec:	89a3      	ldrh	r3, [r4, #12]
 800fdee:	6020      	str	r0, [r4, #0]
 800fdf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdf4:	81a3      	strh	r3, [r4, #12]
 800fdf6:	9b00      	ldr	r3, [sp, #0]
 800fdf8:	6163      	str	r3, [r4, #20]
 800fdfa:	9b01      	ldr	r3, [sp, #4]
 800fdfc:	6120      	str	r0, [r4, #16]
 800fdfe:	b15b      	cbz	r3, 800fe18 <__smakebuf_r+0x74>
 800fe00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe04:	4630      	mov	r0, r6
 800fe06:	f000 fc2d 	bl	8010664 <_isatty_r>
 800fe0a:	b128      	cbz	r0, 800fe18 <__smakebuf_r+0x74>
 800fe0c:	89a3      	ldrh	r3, [r4, #12]
 800fe0e:	f023 0303 	bic.w	r3, r3, #3
 800fe12:	f043 0301 	orr.w	r3, r3, #1
 800fe16:	81a3      	strh	r3, [r4, #12]
 800fe18:	89a0      	ldrh	r0, [r4, #12]
 800fe1a:	4305      	orrs	r5, r0
 800fe1c:	81a5      	strh	r5, [r4, #12]
 800fe1e:	e7cd      	b.n	800fdbc <__smakebuf_r+0x18>
 800fe20:	0800fbb5 	.word	0x0800fbb5

0800fe24 <_free_r>:
 800fe24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe26:	2900      	cmp	r1, #0
 800fe28:	d048      	beq.n	800febc <_free_r+0x98>
 800fe2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe2e:	9001      	str	r0, [sp, #4]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f1a1 0404 	sub.w	r4, r1, #4
 800fe36:	bfb8      	it	lt
 800fe38:	18e4      	addlt	r4, r4, r3
 800fe3a:	f000 fc35 	bl	80106a8 <__malloc_lock>
 800fe3e:	4a20      	ldr	r2, [pc, #128]	; (800fec0 <_free_r+0x9c>)
 800fe40:	9801      	ldr	r0, [sp, #4]
 800fe42:	6813      	ldr	r3, [r2, #0]
 800fe44:	4615      	mov	r5, r2
 800fe46:	b933      	cbnz	r3, 800fe56 <_free_r+0x32>
 800fe48:	6063      	str	r3, [r4, #4]
 800fe4a:	6014      	str	r4, [r2, #0]
 800fe4c:	b003      	add	sp, #12
 800fe4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe52:	f000 bc2f 	b.w	80106b4 <__malloc_unlock>
 800fe56:	42a3      	cmp	r3, r4
 800fe58:	d90b      	bls.n	800fe72 <_free_r+0x4e>
 800fe5a:	6821      	ldr	r1, [r4, #0]
 800fe5c:	1862      	adds	r2, r4, r1
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	bf04      	itt	eq
 800fe62:	681a      	ldreq	r2, [r3, #0]
 800fe64:	685b      	ldreq	r3, [r3, #4]
 800fe66:	6063      	str	r3, [r4, #4]
 800fe68:	bf04      	itt	eq
 800fe6a:	1852      	addeq	r2, r2, r1
 800fe6c:	6022      	streq	r2, [r4, #0]
 800fe6e:	602c      	str	r4, [r5, #0]
 800fe70:	e7ec      	b.n	800fe4c <_free_r+0x28>
 800fe72:	461a      	mov	r2, r3
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	b10b      	cbz	r3, 800fe7c <_free_r+0x58>
 800fe78:	42a3      	cmp	r3, r4
 800fe7a:	d9fa      	bls.n	800fe72 <_free_r+0x4e>
 800fe7c:	6811      	ldr	r1, [r2, #0]
 800fe7e:	1855      	adds	r5, r2, r1
 800fe80:	42a5      	cmp	r5, r4
 800fe82:	d10b      	bne.n	800fe9c <_free_r+0x78>
 800fe84:	6824      	ldr	r4, [r4, #0]
 800fe86:	4421      	add	r1, r4
 800fe88:	1854      	adds	r4, r2, r1
 800fe8a:	42a3      	cmp	r3, r4
 800fe8c:	6011      	str	r1, [r2, #0]
 800fe8e:	d1dd      	bne.n	800fe4c <_free_r+0x28>
 800fe90:	681c      	ldr	r4, [r3, #0]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	6053      	str	r3, [r2, #4]
 800fe96:	4421      	add	r1, r4
 800fe98:	6011      	str	r1, [r2, #0]
 800fe9a:	e7d7      	b.n	800fe4c <_free_r+0x28>
 800fe9c:	d902      	bls.n	800fea4 <_free_r+0x80>
 800fe9e:	230c      	movs	r3, #12
 800fea0:	6003      	str	r3, [r0, #0]
 800fea2:	e7d3      	b.n	800fe4c <_free_r+0x28>
 800fea4:	6825      	ldr	r5, [r4, #0]
 800fea6:	1961      	adds	r1, r4, r5
 800fea8:	428b      	cmp	r3, r1
 800feaa:	bf04      	itt	eq
 800feac:	6819      	ldreq	r1, [r3, #0]
 800feae:	685b      	ldreq	r3, [r3, #4]
 800feb0:	6063      	str	r3, [r4, #4]
 800feb2:	bf04      	itt	eq
 800feb4:	1949      	addeq	r1, r1, r5
 800feb6:	6021      	streq	r1, [r4, #0]
 800feb8:	6054      	str	r4, [r2, #4]
 800feba:	e7c7      	b.n	800fe4c <_free_r+0x28>
 800febc:	b003      	add	sp, #12
 800febe:	bd30      	pop	{r4, r5, pc}
 800fec0:	20003598 	.word	0x20003598

0800fec4 <_malloc_r>:
 800fec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fec6:	1ccd      	adds	r5, r1, #3
 800fec8:	f025 0503 	bic.w	r5, r5, #3
 800fecc:	3508      	adds	r5, #8
 800fece:	2d0c      	cmp	r5, #12
 800fed0:	bf38      	it	cc
 800fed2:	250c      	movcc	r5, #12
 800fed4:	2d00      	cmp	r5, #0
 800fed6:	4606      	mov	r6, r0
 800fed8:	db01      	blt.n	800fede <_malloc_r+0x1a>
 800feda:	42a9      	cmp	r1, r5
 800fedc:	d903      	bls.n	800fee6 <_malloc_r+0x22>
 800fede:	230c      	movs	r3, #12
 800fee0:	6033      	str	r3, [r6, #0]
 800fee2:	2000      	movs	r0, #0
 800fee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fee6:	f000 fbdf 	bl	80106a8 <__malloc_lock>
 800feea:	4921      	ldr	r1, [pc, #132]	; (800ff70 <_malloc_r+0xac>)
 800feec:	680a      	ldr	r2, [r1, #0]
 800feee:	4614      	mov	r4, r2
 800fef0:	b99c      	cbnz	r4, 800ff1a <_malloc_r+0x56>
 800fef2:	4f20      	ldr	r7, [pc, #128]	; (800ff74 <_malloc_r+0xb0>)
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	b923      	cbnz	r3, 800ff02 <_malloc_r+0x3e>
 800fef8:	4621      	mov	r1, r4
 800fefa:	4630      	mov	r0, r6
 800fefc:	f000 fb2a 	bl	8010554 <_sbrk_r>
 800ff00:	6038      	str	r0, [r7, #0]
 800ff02:	4629      	mov	r1, r5
 800ff04:	4630      	mov	r0, r6
 800ff06:	f000 fb25 	bl	8010554 <_sbrk_r>
 800ff0a:	1c43      	adds	r3, r0, #1
 800ff0c:	d123      	bne.n	800ff56 <_malloc_r+0x92>
 800ff0e:	230c      	movs	r3, #12
 800ff10:	6033      	str	r3, [r6, #0]
 800ff12:	4630      	mov	r0, r6
 800ff14:	f000 fbce 	bl	80106b4 <__malloc_unlock>
 800ff18:	e7e3      	b.n	800fee2 <_malloc_r+0x1e>
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	1b5b      	subs	r3, r3, r5
 800ff1e:	d417      	bmi.n	800ff50 <_malloc_r+0x8c>
 800ff20:	2b0b      	cmp	r3, #11
 800ff22:	d903      	bls.n	800ff2c <_malloc_r+0x68>
 800ff24:	6023      	str	r3, [r4, #0]
 800ff26:	441c      	add	r4, r3
 800ff28:	6025      	str	r5, [r4, #0]
 800ff2a:	e004      	b.n	800ff36 <_malloc_r+0x72>
 800ff2c:	6863      	ldr	r3, [r4, #4]
 800ff2e:	42a2      	cmp	r2, r4
 800ff30:	bf0c      	ite	eq
 800ff32:	600b      	streq	r3, [r1, #0]
 800ff34:	6053      	strne	r3, [r2, #4]
 800ff36:	4630      	mov	r0, r6
 800ff38:	f000 fbbc 	bl	80106b4 <__malloc_unlock>
 800ff3c:	f104 000b 	add.w	r0, r4, #11
 800ff40:	1d23      	adds	r3, r4, #4
 800ff42:	f020 0007 	bic.w	r0, r0, #7
 800ff46:	1ac2      	subs	r2, r0, r3
 800ff48:	d0cc      	beq.n	800fee4 <_malloc_r+0x20>
 800ff4a:	1a1b      	subs	r3, r3, r0
 800ff4c:	50a3      	str	r3, [r4, r2]
 800ff4e:	e7c9      	b.n	800fee4 <_malloc_r+0x20>
 800ff50:	4622      	mov	r2, r4
 800ff52:	6864      	ldr	r4, [r4, #4]
 800ff54:	e7cc      	b.n	800fef0 <_malloc_r+0x2c>
 800ff56:	1cc4      	adds	r4, r0, #3
 800ff58:	f024 0403 	bic.w	r4, r4, #3
 800ff5c:	42a0      	cmp	r0, r4
 800ff5e:	d0e3      	beq.n	800ff28 <_malloc_r+0x64>
 800ff60:	1a21      	subs	r1, r4, r0
 800ff62:	4630      	mov	r0, r6
 800ff64:	f000 faf6 	bl	8010554 <_sbrk_r>
 800ff68:	3001      	adds	r0, #1
 800ff6a:	d1dd      	bne.n	800ff28 <_malloc_r+0x64>
 800ff6c:	e7cf      	b.n	800ff0e <_malloc_r+0x4a>
 800ff6e:	bf00      	nop
 800ff70:	20003598 	.word	0x20003598
 800ff74:	2000359c 	.word	0x2000359c

0800ff78 <__sfputc_r>:
 800ff78:	6893      	ldr	r3, [r2, #8]
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	b410      	push	{r4}
 800ff80:	6093      	str	r3, [r2, #8]
 800ff82:	da08      	bge.n	800ff96 <__sfputc_r+0x1e>
 800ff84:	6994      	ldr	r4, [r2, #24]
 800ff86:	42a3      	cmp	r3, r4
 800ff88:	db01      	blt.n	800ff8e <__sfputc_r+0x16>
 800ff8a:	290a      	cmp	r1, #10
 800ff8c:	d103      	bne.n	800ff96 <__sfputc_r+0x1e>
 800ff8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff92:	f7ff bc69 	b.w	800f868 <__swbuf_r>
 800ff96:	6813      	ldr	r3, [r2, #0]
 800ff98:	1c58      	adds	r0, r3, #1
 800ff9a:	6010      	str	r0, [r2, #0]
 800ff9c:	7019      	strb	r1, [r3, #0]
 800ff9e:	4608      	mov	r0, r1
 800ffa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <__sfputs_r>:
 800ffa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa8:	4606      	mov	r6, r0
 800ffaa:	460f      	mov	r7, r1
 800ffac:	4614      	mov	r4, r2
 800ffae:	18d5      	adds	r5, r2, r3
 800ffb0:	42ac      	cmp	r4, r5
 800ffb2:	d101      	bne.n	800ffb8 <__sfputs_r+0x12>
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	e007      	b.n	800ffc8 <__sfputs_r+0x22>
 800ffb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffbc:	463a      	mov	r2, r7
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f7ff ffda 	bl	800ff78 <__sfputc_r>
 800ffc4:	1c43      	adds	r3, r0, #1
 800ffc6:	d1f3      	bne.n	800ffb0 <__sfputs_r+0xa>
 800ffc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffcc <_vfiprintf_r>:
 800ffcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd0:	460d      	mov	r5, r1
 800ffd2:	b09d      	sub	sp, #116	; 0x74
 800ffd4:	4614      	mov	r4, r2
 800ffd6:	4698      	mov	r8, r3
 800ffd8:	4606      	mov	r6, r0
 800ffda:	b118      	cbz	r0, 800ffe4 <_vfiprintf_r+0x18>
 800ffdc:	6983      	ldr	r3, [r0, #24]
 800ffde:	b90b      	cbnz	r3, 800ffe4 <_vfiprintf_r+0x18>
 800ffe0:	f7ff fe1c 	bl	800fc1c <__sinit>
 800ffe4:	4b89      	ldr	r3, [pc, #548]	; (801020c <_vfiprintf_r+0x240>)
 800ffe6:	429d      	cmp	r5, r3
 800ffe8:	d11b      	bne.n	8010022 <_vfiprintf_r+0x56>
 800ffea:	6875      	ldr	r5, [r6, #4]
 800ffec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffee:	07d9      	lsls	r1, r3, #31
 800fff0:	d405      	bmi.n	800fffe <_vfiprintf_r+0x32>
 800fff2:	89ab      	ldrh	r3, [r5, #12]
 800fff4:	059a      	lsls	r2, r3, #22
 800fff6:	d402      	bmi.n	800fffe <_vfiprintf_r+0x32>
 800fff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fffa:	f7ff fead 	bl	800fd58 <__retarget_lock_acquire_recursive>
 800fffe:	89ab      	ldrh	r3, [r5, #12]
 8010000:	071b      	lsls	r3, r3, #28
 8010002:	d501      	bpl.n	8010008 <_vfiprintf_r+0x3c>
 8010004:	692b      	ldr	r3, [r5, #16]
 8010006:	b9eb      	cbnz	r3, 8010044 <_vfiprintf_r+0x78>
 8010008:	4629      	mov	r1, r5
 801000a:	4630      	mov	r0, r6
 801000c:	f7ff fc7e 	bl	800f90c <__swsetup_r>
 8010010:	b1c0      	cbz	r0, 8010044 <_vfiprintf_r+0x78>
 8010012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010014:	07dc      	lsls	r4, r3, #31
 8010016:	d50e      	bpl.n	8010036 <_vfiprintf_r+0x6a>
 8010018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801001c:	b01d      	add	sp, #116	; 0x74
 801001e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010022:	4b7b      	ldr	r3, [pc, #492]	; (8010210 <_vfiprintf_r+0x244>)
 8010024:	429d      	cmp	r5, r3
 8010026:	d101      	bne.n	801002c <_vfiprintf_r+0x60>
 8010028:	68b5      	ldr	r5, [r6, #8]
 801002a:	e7df      	b.n	800ffec <_vfiprintf_r+0x20>
 801002c:	4b79      	ldr	r3, [pc, #484]	; (8010214 <_vfiprintf_r+0x248>)
 801002e:	429d      	cmp	r5, r3
 8010030:	bf08      	it	eq
 8010032:	68f5      	ldreq	r5, [r6, #12]
 8010034:	e7da      	b.n	800ffec <_vfiprintf_r+0x20>
 8010036:	89ab      	ldrh	r3, [r5, #12]
 8010038:	0598      	lsls	r0, r3, #22
 801003a:	d4ed      	bmi.n	8010018 <_vfiprintf_r+0x4c>
 801003c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801003e:	f7ff fe8c 	bl	800fd5a <__retarget_lock_release_recursive>
 8010042:	e7e9      	b.n	8010018 <_vfiprintf_r+0x4c>
 8010044:	2300      	movs	r3, #0
 8010046:	9309      	str	r3, [sp, #36]	; 0x24
 8010048:	2320      	movs	r3, #32
 801004a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801004e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010052:	2330      	movs	r3, #48	; 0x30
 8010054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010218 <_vfiprintf_r+0x24c>
 8010058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801005c:	f04f 0901 	mov.w	r9, #1
 8010060:	4623      	mov	r3, r4
 8010062:	469a      	mov	sl, r3
 8010064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010068:	b10a      	cbz	r2, 801006e <_vfiprintf_r+0xa2>
 801006a:	2a25      	cmp	r2, #37	; 0x25
 801006c:	d1f9      	bne.n	8010062 <_vfiprintf_r+0x96>
 801006e:	ebba 0b04 	subs.w	fp, sl, r4
 8010072:	d00b      	beq.n	801008c <_vfiprintf_r+0xc0>
 8010074:	465b      	mov	r3, fp
 8010076:	4622      	mov	r2, r4
 8010078:	4629      	mov	r1, r5
 801007a:	4630      	mov	r0, r6
 801007c:	f7ff ff93 	bl	800ffa6 <__sfputs_r>
 8010080:	3001      	adds	r0, #1
 8010082:	f000 80aa 	beq.w	80101da <_vfiprintf_r+0x20e>
 8010086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010088:	445a      	add	r2, fp
 801008a:	9209      	str	r2, [sp, #36]	; 0x24
 801008c:	f89a 3000 	ldrb.w	r3, [sl]
 8010090:	2b00      	cmp	r3, #0
 8010092:	f000 80a2 	beq.w	80101da <_vfiprintf_r+0x20e>
 8010096:	2300      	movs	r3, #0
 8010098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801009c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100a0:	f10a 0a01 	add.w	sl, sl, #1
 80100a4:	9304      	str	r3, [sp, #16]
 80100a6:	9307      	str	r3, [sp, #28]
 80100a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100ac:	931a      	str	r3, [sp, #104]	; 0x68
 80100ae:	4654      	mov	r4, sl
 80100b0:	2205      	movs	r2, #5
 80100b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100b6:	4858      	ldr	r0, [pc, #352]	; (8010218 <_vfiprintf_r+0x24c>)
 80100b8:	f7f0 f892 	bl	80001e0 <memchr>
 80100bc:	9a04      	ldr	r2, [sp, #16]
 80100be:	b9d8      	cbnz	r0, 80100f8 <_vfiprintf_r+0x12c>
 80100c0:	06d1      	lsls	r1, r2, #27
 80100c2:	bf44      	itt	mi
 80100c4:	2320      	movmi	r3, #32
 80100c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100ca:	0713      	lsls	r3, r2, #28
 80100cc:	bf44      	itt	mi
 80100ce:	232b      	movmi	r3, #43	; 0x2b
 80100d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100d4:	f89a 3000 	ldrb.w	r3, [sl]
 80100d8:	2b2a      	cmp	r3, #42	; 0x2a
 80100da:	d015      	beq.n	8010108 <_vfiprintf_r+0x13c>
 80100dc:	9a07      	ldr	r2, [sp, #28]
 80100de:	4654      	mov	r4, sl
 80100e0:	2000      	movs	r0, #0
 80100e2:	f04f 0c0a 	mov.w	ip, #10
 80100e6:	4621      	mov	r1, r4
 80100e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100ec:	3b30      	subs	r3, #48	; 0x30
 80100ee:	2b09      	cmp	r3, #9
 80100f0:	d94e      	bls.n	8010190 <_vfiprintf_r+0x1c4>
 80100f2:	b1b0      	cbz	r0, 8010122 <_vfiprintf_r+0x156>
 80100f4:	9207      	str	r2, [sp, #28]
 80100f6:	e014      	b.n	8010122 <_vfiprintf_r+0x156>
 80100f8:	eba0 0308 	sub.w	r3, r0, r8
 80100fc:	fa09 f303 	lsl.w	r3, r9, r3
 8010100:	4313      	orrs	r3, r2
 8010102:	9304      	str	r3, [sp, #16]
 8010104:	46a2      	mov	sl, r4
 8010106:	e7d2      	b.n	80100ae <_vfiprintf_r+0xe2>
 8010108:	9b03      	ldr	r3, [sp, #12]
 801010a:	1d19      	adds	r1, r3, #4
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	9103      	str	r1, [sp, #12]
 8010110:	2b00      	cmp	r3, #0
 8010112:	bfbb      	ittet	lt
 8010114:	425b      	neglt	r3, r3
 8010116:	f042 0202 	orrlt.w	r2, r2, #2
 801011a:	9307      	strge	r3, [sp, #28]
 801011c:	9307      	strlt	r3, [sp, #28]
 801011e:	bfb8      	it	lt
 8010120:	9204      	strlt	r2, [sp, #16]
 8010122:	7823      	ldrb	r3, [r4, #0]
 8010124:	2b2e      	cmp	r3, #46	; 0x2e
 8010126:	d10c      	bne.n	8010142 <_vfiprintf_r+0x176>
 8010128:	7863      	ldrb	r3, [r4, #1]
 801012a:	2b2a      	cmp	r3, #42	; 0x2a
 801012c:	d135      	bne.n	801019a <_vfiprintf_r+0x1ce>
 801012e:	9b03      	ldr	r3, [sp, #12]
 8010130:	1d1a      	adds	r2, r3, #4
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	9203      	str	r2, [sp, #12]
 8010136:	2b00      	cmp	r3, #0
 8010138:	bfb8      	it	lt
 801013a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801013e:	3402      	adds	r4, #2
 8010140:	9305      	str	r3, [sp, #20]
 8010142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010228 <_vfiprintf_r+0x25c>
 8010146:	7821      	ldrb	r1, [r4, #0]
 8010148:	2203      	movs	r2, #3
 801014a:	4650      	mov	r0, sl
 801014c:	f7f0 f848 	bl	80001e0 <memchr>
 8010150:	b140      	cbz	r0, 8010164 <_vfiprintf_r+0x198>
 8010152:	2340      	movs	r3, #64	; 0x40
 8010154:	eba0 000a 	sub.w	r0, r0, sl
 8010158:	fa03 f000 	lsl.w	r0, r3, r0
 801015c:	9b04      	ldr	r3, [sp, #16]
 801015e:	4303      	orrs	r3, r0
 8010160:	3401      	adds	r4, #1
 8010162:	9304      	str	r3, [sp, #16]
 8010164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010168:	482c      	ldr	r0, [pc, #176]	; (801021c <_vfiprintf_r+0x250>)
 801016a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801016e:	2206      	movs	r2, #6
 8010170:	f7f0 f836 	bl	80001e0 <memchr>
 8010174:	2800      	cmp	r0, #0
 8010176:	d03f      	beq.n	80101f8 <_vfiprintf_r+0x22c>
 8010178:	4b29      	ldr	r3, [pc, #164]	; (8010220 <_vfiprintf_r+0x254>)
 801017a:	bb1b      	cbnz	r3, 80101c4 <_vfiprintf_r+0x1f8>
 801017c:	9b03      	ldr	r3, [sp, #12]
 801017e:	3307      	adds	r3, #7
 8010180:	f023 0307 	bic.w	r3, r3, #7
 8010184:	3308      	adds	r3, #8
 8010186:	9303      	str	r3, [sp, #12]
 8010188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801018a:	443b      	add	r3, r7
 801018c:	9309      	str	r3, [sp, #36]	; 0x24
 801018e:	e767      	b.n	8010060 <_vfiprintf_r+0x94>
 8010190:	fb0c 3202 	mla	r2, ip, r2, r3
 8010194:	460c      	mov	r4, r1
 8010196:	2001      	movs	r0, #1
 8010198:	e7a5      	b.n	80100e6 <_vfiprintf_r+0x11a>
 801019a:	2300      	movs	r3, #0
 801019c:	3401      	adds	r4, #1
 801019e:	9305      	str	r3, [sp, #20]
 80101a0:	4619      	mov	r1, r3
 80101a2:	f04f 0c0a 	mov.w	ip, #10
 80101a6:	4620      	mov	r0, r4
 80101a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101ac:	3a30      	subs	r2, #48	; 0x30
 80101ae:	2a09      	cmp	r2, #9
 80101b0:	d903      	bls.n	80101ba <_vfiprintf_r+0x1ee>
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d0c5      	beq.n	8010142 <_vfiprintf_r+0x176>
 80101b6:	9105      	str	r1, [sp, #20]
 80101b8:	e7c3      	b.n	8010142 <_vfiprintf_r+0x176>
 80101ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80101be:	4604      	mov	r4, r0
 80101c0:	2301      	movs	r3, #1
 80101c2:	e7f0      	b.n	80101a6 <_vfiprintf_r+0x1da>
 80101c4:	ab03      	add	r3, sp, #12
 80101c6:	9300      	str	r3, [sp, #0]
 80101c8:	462a      	mov	r2, r5
 80101ca:	4b16      	ldr	r3, [pc, #88]	; (8010224 <_vfiprintf_r+0x258>)
 80101cc:	a904      	add	r1, sp, #16
 80101ce:	4630      	mov	r0, r6
 80101d0:	f3af 8000 	nop.w
 80101d4:	4607      	mov	r7, r0
 80101d6:	1c78      	adds	r0, r7, #1
 80101d8:	d1d6      	bne.n	8010188 <_vfiprintf_r+0x1bc>
 80101da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101dc:	07d9      	lsls	r1, r3, #31
 80101de:	d405      	bmi.n	80101ec <_vfiprintf_r+0x220>
 80101e0:	89ab      	ldrh	r3, [r5, #12]
 80101e2:	059a      	lsls	r2, r3, #22
 80101e4:	d402      	bmi.n	80101ec <_vfiprintf_r+0x220>
 80101e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101e8:	f7ff fdb7 	bl	800fd5a <__retarget_lock_release_recursive>
 80101ec:	89ab      	ldrh	r3, [r5, #12]
 80101ee:	065b      	lsls	r3, r3, #25
 80101f0:	f53f af12 	bmi.w	8010018 <_vfiprintf_r+0x4c>
 80101f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101f6:	e711      	b.n	801001c <_vfiprintf_r+0x50>
 80101f8:	ab03      	add	r3, sp, #12
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	462a      	mov	r2, r5
 80101fe:	4b09      	ldr	r3, [pc, #36]	; (8010224 <_vfiprintf_r+0x258>)
 8010200:	a904      	add	r1, sp, #16
 8010202:	4630      	mov	r0, r6
 8010204:	f000 f880 	bl	8010308 <_printf_i>
 8010208:	e7e4      	b.n	80101d4 <_vfiprintf_r+0x208>
 801020a:	bf00      	nop
 801020c:	08010f8c 	.word	0x08010f8c
 8010210:	08010fac 	.word	0x08010fac
 8010214:	08010f6c 	.word	0x08010f6c
 8010218:	08010fcc 	.word	0x08010fcc
 801021c:	08010fd6 	.word	0x08010fd6
 8010220:	00000000 	.word	0x00000000
 8010224:	0800ffa7 	.word	0x0800ffa7
 8010228:	08010fd2 	.word	0x08010fd2

0801022c <_printf_common>:
 801022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010230:	4616      	mov	r6, r2
 8010232:	4699      	mov	r9, r3
 8010234:	688a      	ldr	r2, [r1, #8]
 8010236:	690b      	ldr	r3, [r1, #16]
 8010238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801023c:	4293      	cmp	r3, r2
 801023e:	bfb8      	it	lt
 8010240:	4613      	movlt	r3, r2
 8010242:	6033      	str	r3, [r6, #0]
 8010244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010248:	4607      	mov	r7, r0
 801024a:	460c      	mov	r4, r1
 801024c:	b10a      	cbz	r2, 8010252 <_printf_common+0x26>
 801024e:	3301      	adds	r3, #1
 8010250:	6033      	str	r3, [r6, #0]
 8010252:	6823      	ldr	r3, [r4, #0]
 8010254:	0699      	lsls	r1, r3, #26
 8010256:	bf42      	ittt	mi
 8010258:	6833      	ldrmi	r3, [r6, #0]
 801025a:	3302      	addmi	r3, #2
 801025c:	6033      	strmi	r3, [r6, #0]
 801025e:	6825      	ldr	r5, [r4, #0]
 8010260:	f015 0506 	ands.w	r5, r5, #6
 8010264:	d106      	bne.n	8010274 <_printf_common+0x48>
 8010266:	f104 0a19 	add.w	sl, r4, #25
 801026a:	68e3      	ldr	r3, [r4, #12]
 801026c:	6832      	ldr	r2, [r6, #0]
 801026e:	1a9b      	subs	r3, r3, r2
 8010270:	42ab      	cmp	r3, r5
 8010272:	dc26      	bgt.n	80102c2 <_printf_common+0x96>
 8010274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010278:	1e13      	subs	r3, r2, #0
 801027a:	6822      	ldr	r2, [r4, #0]
 801027c:	bf18      	it	ne
 801027e:	2301      	movne	r3, #1
 8010280:	0692      	lsls	r2, r2, #26
 8010282:	d42b      	bmi.n	80102dc <_printf_common+0xb0>
 8010284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010288:	4649      	mov	r1, r9
 801028a:	4638      	mov	r0, r7
 801028c:	47c0      	blx	r8
 801028e:	3001      	adds	r0, #1
 8010290:	d01e      	beq.n	80102d0 <_printf_common+0xa4>
 8010292:	6823      	ldr	r3, [r4, #0]
 8010294:	68e5      	ldr	r5, [r4, #12]
 8010296:	6832      	ldr	r2, [r6, #0]
 8010298:	f003 0306 	and.w	r3, r3, #6
 801029c:	2b04      	cmp	r3, #4
 801029e:	bf08      	it	eq
 80102a0:	1aad      	subeq	r5, r5, r2
 80102a2:	68a3      	ldr	r3, [r4, #8]
 80102a4:	6922      	ldr	r2, [r4, #16]
 80102a6:	bf0c      	ite	eq
 80102a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102ac:	2500      	movne	r5, #0
 80102ae:	4293      	cmp	r3, r2
 80102b0:	bfc4      	itt	gt
 80102b2:	1a9b      	subgt	r3, r3, r2
 80102b4:	18ed      	addgt	r5, r5, r3
 80102b6:	2600      	movs	r6, #0
 80102b8:	341a      	adds	r4, #26
 80102ba:	42b5      	cmp	r5, r6
 80102bc:	d11a      	bne.n	80102f4 <_printf_common+0xc8>
 80102be:	2000      	movs	r0, #0
 80102c0:	e008      	b.n	80102d4 <_printf_common+0xa8>
 80102c2:	2301      	movs	r3, #1
 80102c4:	4652      	mov	r2, sl
 80102c6:	4649      	mov	r1, r9
 80102c8:	4638      	mov	r0, r7
 80102ca:	47c0      	blx	r8
 80102cc:	3001      	adds	r0, #1
 80102ce:	d103      	bne.n	80102d8 <_printf_common+0xac>
 80102d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102d8:	3501      	adds	r5, #1
 80102da:	e7c6      	b.n	801026a <_printf_common+0x3e>
 80102dc:	18e1      	adds	r1, r4, r3
 80102de:	1c5a      	adds	r2, r3, #1
 80102e0:	2030      	movs	r0, #48	; 0x30
 80102e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102e6:	4422      	add	r2, r4
 80102e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102f0:	3302      	adds	r3, #2
 80102f2:	e7c7      	b.n	8010284 <_printf_common+0x58>
 80102f4:	2301      	movs	r3, #1
 80102f6:	4622      	mov	r2, r4
 80102f8:	4649      	mov	r1, r9
 80102fa:	4638      	mov	r0, r7
 80102fc:	47c0      	blx	r8
 80102fe:	3001      	adds	r0, #1
 8010300:	d0e6      	beq.n	80102d0 <_printf_common+0xa4>
 8010302:	3601      	adds	r6, #1
 8010304:	e7d9      	b.n	80102ba <_printf_common+0x8e>
	...

08010308 <_printf_i>:
 8010308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801030c:	460c      	mov	r4, r1
 801030e:	4691      	mov	r9, r2
 8010310:	7e27      	ldrb	r7, [r4, #24]
 8010312:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010314:	2f78      	cmp	r7, #120	; 0x78
 8010316:	4680      	mov	r8, r0
 8010318:	469a      	mov	sl, r3
 801031a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801031e:	d807      	bhi.n	8010330 <_printf_i+0x28>
 8010320:	2f62      	cmp	r7, #98	; 0x62
 8010322:	d80a      	bhi.n	801033a <_printf_i+0x32>
 8010324:	2f00      	cmp	r7, #0
 8010326:	f000 80d8 	beq.w	80104da <_printf_i+0x1d2>
 801032a:	2f58      	cmp	r7, #88	; 0x58
 801032c:	f000 80a3 	beq.w	8010476 <_printf_i+0x16e>
 8010330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010338:	e03a      	b.n	80103b0 <_printf_i+0xa8>
 801033a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801033e:	2b15      	cmp	r3, #21
 8010340:	d8f6      	bhi.n	8010330 <_printf_i+0x28>
 8010342:	a001      	add	r0, pc, #4	; (adr r0, 8010348 <_printf_i+0x40>)
 8010344:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010348:	080103a1 	.word	0x080103a1
 801034c:	080103b5 	.word	0x080103b5
 8010350:	08010331 	.word	0x08010331
 8010354:	08010331 	.word	0x08010331
 8010358:	08010331 	.word	0x08010331
 801035c:	08010331 	.word	0x08010331
 8010360:	080103b5 	.word	0x080103b5
 8010364:	08010331 	.word	0x08010331
 8010368:	08010331 	.word	0x08010331
 801036c:	08010331 	.word	0x08010331
 8010370:	08010331 	.word	0x08010331
 8010374:	080104c1 	.word	0x080104c1
 8010378:	080103e5 	.word	0x080103e5
 801037c:	080104a3 	.word	0x080104a3
 8010380:	08010331 	.word	0x08010331
 8010384:	08010331 	.word	0x08010331
 8010388:	080104e3 	.word	0x080104e3
 801038c:	08010331 	.word	0x08010331
 8010390:	080103e5 	.word	0x080103e5
 8010394:	08010331 	.word	0x08010331
 8010398:	08010331 	.word	0x08010331
 801039c:	080104ab 	.word	0x080104ab
 80103a0:	680b      	ldr	r3, [r1, #0]
 80103a2:	1d1a      	adds	r2, r3, #4
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	600a      	str	r2, [r1, #0]
 80103a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80103ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103b0:	2301      	movs	r3, #1
 80103b2:	e0a3      	b.n	80104fc <_printf_i+0x1f4>
 80103b4:	6825      	ldr	r5, [r4, #0]
 80103b6:	6808      	ldr	r0, [r1, #0]
 80103b8:	062e      	lsls	r6, r5, #24
 80103ba:	f100 0304 	add.w	r3, r0, #4
 80103be:	d50a      	bpl.n	80103d6 <_printf_i+0xce>
 80103c0:	6805      	ldr	r5, [r0, #0]
 80103c2:	600b      	str	r3, [r1, #0]
 80103c4:	2d00      	cmp	r5, #0
 80103c6:	da03      	bge.n	80103d0 <_printf_i+0xc8>
 80103c8:	232d      	movs	r3, #45	; 0x2d
 80103ca:	426d      	negs	r5, r5
 80103cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103d0:	485e      	ldr	r0, [pc, #376]	; (801054c <_printf_i+0x244>)
 80103d2:	230a      	movs	r3, #10
 80103d4:	e019      	b.n	801040a <_printf_i+0x102>
 80103d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80103da:	6805      	ldr	r5, [r0, #0]
 80103dc:	600b      	str	r3, [r1, #0]
 80103de:	bf18      	it	ne
 80103e0:	b22d      	sxthne	r5, r5
 80103e2:	e7ef      	b.n	80103c4 <_printf_i+0xbc>
 80103e4:	680b      	ldr	r3, [r1, #0]
 80103e6:	6825      	ldr	r5, [r4, #0]
 80103e8:	1d18      	adds	r0, r3, #4
 80103ea:	6008      	str	r0, [r1, #0]
 80103ec:	0628      	lsls	r0, r5, #24
 80103ee:	d501      	bpl.n	80103f4 <_printf_i+0xec>
 80103f0:	681d      	ldr	r5, [r3, #0]
 80103f2:	e002      	b.n	80103fa <_printf_i+0xf2>
 80103f4:	0669      	lsls	r1, r5, #25
 80103f6:	d5fb      	bpl.n	80103f0 <_printf_i+0xe8>
 80103f8:	881d      	ldrh	r5, [r3, #0]
 80103fa:	4854      	ldr	r0, [pc, #336]	; (801054c <_printf_i+0x244>)
 80103fc:	2f6f      	cmp	r7, #111	; 0x6f
 80103fe:	bf0c      	ite	eq
 8010400:	2308      	moveq	r3, #8
 8010402:	230a      	movne	r3, #10
 8010404:	2100      	movs	r1, #0
 8010406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801040a:	6866      	ldr	r6, [r4, #4]
 801040c:	60a6      	str	r6, [r4, #8]
 801040e:	2e00      	cmp	r6, #0
 8010410:	bfa2      	ittt	ge
 8010412:	6821      	ldrge	r1, [r4, #0]
 8010414:	f021 0104 	bicge.w	r1, r1, #4
 8010418:	6021      	strge	r1, [r4, #0]
 801041a:	b90d      	cbnz	r5, 8010420 <_printf_i+0x118>
 801041c:	2e00      	cmp	r6, #0
 801041e:	d04d      	beq.n	80104bc <_printf_i+0x1b4>
 8010420:	4616      	mov	r6, r2
 8010422:	fbb5 f1f3 	udiv	r1, r5, r3
 8010426:	fb03 5711 	mls	r7, r3, r1, r5
 801042a:	5dc7      	ldrb	r7, [r0, r7]
 801042c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010430:	462f      	mov	r7, r5
 8010432:	42bb      	cmp	r3, r7
 8010434:	460d      	mov	r5, r1
 8010436:	d9f4      	bls.n	8010422 <_printf_i+0x11a>
 8010438:	2b08      	cmp	r3, #8
 801043a:	d10b      	bne.n	8010454 <_printf_i+0x14c>
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	07df      	lsls	r7, r3, #31
 8010440:	d508      	bpl.n	8010454 <_printf_i+0x14c>
 8010442:	6923      	ldr	r3, [r4, #16]
 8010444:	6861      	ldr	r1, [r4, #4]
 8010446:	4299      	cmp	r1, r3
 8010448:	bfde      	ittt	le
 801044a:	2330      	movle	r3, #48	; 0x30
 801044c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010450:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010454:	1b92      	subs	r2, r2, r6
 8010456:	6122      	str	r2, [r4, #16]
 8010458:	f8cd a000 	str.w	sl, [sp]
 801045c:	464b      	mov	r3, r9
 801045e:	aa03      	add	r2, sp, #12
 8010460:	4621      	mov	r1, r4
 8010462:	4640      	mov	r0, r8
 8010464:	f7ff fee2 	bl	801022c <_printf_common>
 8010468:	3001      	adds	r0, #1
 801046a:	d14c      	bne.n	8010506 <_printf_i+0x1fe>
 801046c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010470:	b004      	add	sp, #16
 8010472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010476:	4835      	ldr	r0, [pc, #212]	; (801054c <_printf_i+0x244>)
 8010478:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801047c:	6823      	ldr	r3, [r4, #0]
 801047e:	680e      	ldr	r6, [r1, #0]
 8010480:	061f      	lsls	r7, r3, #24
 8010482:	f856 5b04 	ldr.w	r5, [r6], #4
 8010486:	600e      	str	r6, [r1, #0]
 8010488:	d514      	bpl.n	80104b4 <_printf_i+0x1ac>
 801048a:	07d9      	lsls	r1, r3, #31
 801048c:	bf44      	itt	mi
 801048e:	f043 0320 	orrmi.w	r3, r3, #32
 8010492:	6023      	strmi	r3, [r4, #0]
 8010494:	b91d      	cbnz	r5, 801049e <_printf_i+0x196>
 8010496:	6823      	ldr	r3, [r4, #0]
 8010498:	f023 0320 	bic.w	r3, r3, #32
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	2310      	movs	r3, #16
 80104a0:	e7b0      	b.n	8010404 <_printf_i+0xfc>
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	f043 0320 	orr.w	r3, r3, #32
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	2378      	movs	r3, #120	; 0x78
 80104ac:	4828      	ldr	r0, [pc, #160]	; (8010550 <_printf_i+0x248>)
 80104ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104b2:	e7e3      	b.n	801047c <_printf_i+0x174>
 80104b4:	065e      	lsls	r6, r3, #25
 80104b6:	bf48      	it	mi
 80104b8:	b2ad      	uxthmi	r5, r5
 80104ba:	e7e6      	b.n	801048a <_printf_i+0x182>
 80104bc:	4616      	mov	r6, r2
 80104be:	e7bb      	b.n	8010438 <_printf_i+0x130>
 80104c0:	680b      	ldr	r3, [r1, #0]
 80104c2:	6826      	ldr	r6, [r4, #0]
 80104c4:	6960      	ldr	r0, [r4, #20]
 80104c6:	1d1d      	adds	r5, r3, #4
 80104c8:	600d      	str	r5, [r1, #0]
 80104ca:	0635      	lsls	r5, r6, #24
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	d501      	bpl.n	80104d4 <_printf_i+0x1cc>
 80104d0:	6018      	str	r0, [r3, #0]
 80104d2:	e002      	b.n	80104da <_printf_i+0x1d2>
 80104d4:	0671      	lsls	r1, r6, #25
 80104d6:	d5fb      	bpl.n	80104d0 <_printf_i+0x1c8>
 80104d8:	8018      	strh	r0, [r3, #0]
 80104da:	2300      	movs	r3, #0
 80104dc:	6123      	str	r3, [r4, #16]
 80104de:	4616      	mov	r6, r2
 80104e0:	e7ba      	b.n	8010458 <_printf_i+0x150>
 80104e2:	680b      	ldr	r3, [r1, #0]
 80104e4:	1d1a      	adds	r2, r3, #4
 80104e6:	600a      	str	r2, [r1, #0]
 80104e8:	681e      	ldr	r6, [r3, #0]
 80104ea:	6862      	ldr	r2, [r4, #4]
 80104ec:	2100      	movs	r1, #0
 80104ee:	4630      	mov	r0, r6
 80104f0:	f7ef fe76 	bl	80001e0 <memchr>
 80104f4:	b108      	cbz	r0, 80104fa <_printf_i+0x1f2>
 80104f6:	1b80      	subs	r0, r0, r6
 80104f8:	6060      	str	r0, [r4, #4]
 80104fa:	6863      	ldr	r3, [r4, #4]
 80104fc:	6123      	str	r3, [r4, #16]
 80104fe:	2300      	movs	r3, #0
 8010500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010504:	e7a8      	b.n	8010458 <_printf_i+0x150>
 8010506:	6923      	ldr	r3, [r4, #16]
 8010508:	4632      	mov	r2, r6
 801050a:	4649      	mov	r1, r9
 801050c:	4640      	mov	r0, r8
 801050e:	47d0      	blx	sl
 8010510:	3001      	adds	r0, #1
 8010512:	d0ab      	beq.n	801046c <_printf_i+0x164>
 8010514:	6823      	ldr	r3, [r4, #0]
 8010516:	079b      	lsls	r3, r3, #30
 8010518:	d413      	bmi.n	8010542 <_printf_i+0x23a>
 801051a:	68e0      	ldr	r0, [r4, #12]
 801051c:	9b03      	ldr	r3, [sp, #12]
 801051e:	4298      	cmp	r0, r3
 8010520:	bfb8      	it	lt
 8010522:	4618      	movlt	r0, r3
 8010524:	e7a4      	b.n	8010470 <_printf_i+0x168>
 8010526:	2301      	movs	r3, #1
 8010528:	4632      	mov	r2, r6
 801052a:	4649      	mov	r1, r9
 801052c:	4640      	mov	r0, r8
 801052e:	47d0      	blx	sl
 8010530:	3001      	adds	r0, #1
 8010532:	d09b      	beq.n	801046c <_printf_i+0x164>
 8010534:	3501      	adds	r5, #1
 8010536:	68e3      	ldr	r3, [r4, #12]
 8010538:	9903      	ldr	r1, [sp, #12]
 801053a:	1a5b      	subs	r3, r3, r1
 801053c:	42ab      	cmp	r3, r5
 801053e:	dcf2      	bgt.n	8010526 <_printf_i+0x21e>
 8010540:	e7eb      	b.n	801051a <_printf_i+0x212>
 8010542:	2500      	movs	r5, #0
 8010544:	f104 0619 	add.w	r6, r4, #25
 8010548:	e7f5      	b.n	8010536 <_printf_i+0x22e>
 801054a:	bf00      	nop
 801054c:	08010fdd 	.word	0x08010fdd
 8010550:	08010fee 	.word	0x08010fee

08010554 <_sbrk_r>:
 8010554:	b538      	push	{r3, r4, r5, lr}
 8010556:	4d06      	ldr	r5, [pc, #24]	; (8010570 <_sbrk_r+0x1c>)
 8010558:	2300      	movs	r3, #0
 801055a:	4604      	mov	r4, r0
 801055c:	4608      	mov	r0, r1
 801055e:	602b      	str	r3, [r5, #0]
 8010560:	f7f2 faba 	bl	8002ad8 <_sbrk>
 8010564:	1c43      	adds	r3, r0, #1
 8010566:	d102      	bne.n	801056e <_sbrk_r+0x1a>
 8010568:	682b      	ldr	r3, [r5, #0]
 801056a:	b103      	cbz	r3, 801056e <_sbrk_r+0x1a>
 801056c:	6023      	str	r3, [r4, #0]
 801056e:	bd38      	pop	{r3, r4, r5, pc}
 8010570:	2000facc 	.word	0x2000facc

08010574 <__sread>:
 8010574:	b510      	push	{r4, lr}
 8010576:	460c      	mov	r4, r1
 8010578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801057c:	f000 f8a0 	bl	80106c0 <_read_r>
 8010580:	2800      	cmp	r0, #0
 8010582:	bfab      	itete	ge
 8010584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010586:	89a3      	ldrhlt	r3, [r4, #12]
 8010588:	181b      	addge	r3, r3, r0
 801058a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801058e:	bfac      	ite	ge
 8010590:	6563      	strge	r3, [r4, #84]	; 0x54
 8010592:	81a3      	strhlt	r3, [r4, #12]
 8010594:	bd10      	pop	{r4, pc}

08010596 <__swrite>:
 8010596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801059a:	461f      	mov	r7, r3
 801059c:	898b      	ldrh	r3, [r1, #12]
 801059e:	05db      	lsls	r3, r3, #23
 80105a0:	4605      	mov	r5, r0
 80105a2:	460c      	mov	r4, r1
 80105a4:	4616      	mov	r6, r2
 80105a6:	d505      	bpl.n	80105b4 <__swrite+0x1e>
 80105a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ac:	2302      	movs	r3, #2
 80105ae:	2200      	movs	r2, #0
 80105b0:	f000 f868 	bl	8010684 <_lseek_r>
 80105b4:	89a3      	ldrh	r3, [r4, #12]
 80105b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105be:	81a3      	strh	r3, [r4, #12]
 80105c0:	4632      	mov	r2, r6
 80105c2:	463b      	mov	r3, r7
 80105c4:	4628      	mov	r0, r5
 80105c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105ca:	f000 b817 	b.w	80105fc <_write_r>

080105ce <__sseek>:
 80105ce:	b510      	push	{r4, lr}
 80105d0:	460c      	mov	r4, r1
 80105d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105d6:	f000 f855 	bl	8010684 <_lseek_r>
 80105da:	1c43      	adds	r3, r0, #1
 80105dc:	89a3      	ldrh	r3, [r4, #12]
 80105de:	bf15      	itete	ne
 80105e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80105e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80105e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80105ea:	81a3      	strheq	r3, [r4, #12]
 80105ec:	bf18      	it	ne
 80105ee:	81a3      	strhne	r3, [r4, #12]
 80105f0:	bd10      	pop	{r4, pc}

080105f2 <__sclose>:
 80105f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105f6:	f000 b813 	b.w	8010620 <_close_r>
	...

080105fc <_write_r>:
 80105fc:	b538      	push	{r3, r4, r5, lr}
 80105fe:	4d07      	ldr	r5, [pc, #28]	; (801061c <_write_r+0x20>)
 8010600:	4604      	mov	r4, r0
 8010602:	4608      	mov	r0, r1
 8010604:	4611      	mov	r1, r2
 8010606:	2200      	movs	r2, #0
 8010608:	602a      	str	r2, [r5, #0]
 801060a:	461a      	mov	r2, r3
 801060c:	f7f2 fa13 	bl	8002a36 <_write>
 8010610:	1c43      	adds	r3, r0, #1
 8010612:	d102      	bne.n	801061a <_write_r+0x1e>
 8010614:	682b      	ldr	r3, [r5, #0]
 8010616:	b103      	cbz	r3, 801061a <_write_r+0x1e>
 8010618:	6023      	str	r3, [r4, #0]
 801061a:	bd38      	pop	{r3, r4, r5, pc}
 801061c:	2000facc 	.word	0x2000facc

08010620 <_close_r>:
 8010620:	b538      	push	{r3, r4, r5, lr}
 8010622:	4d06      	ldr	r5, [pc, #24]	; (801063c <_close_r+0x1c>)
 8010624:	2300      	movs	r3, #0
 8010626:	4604      	mov	r4, r0
 8010628:	4608      	mov	r0, r1
 801062a:	602b      	str	r3, [r5, #0]
 801062c:	f7f2 fa1f 	bl	8002a6e <_close>
 8010630:	1c43      	adds	r3, r0, #1
 8010632:	d102      	bne.n	801063a <_close_r+0x1a>
 8010634:	682b      	ldr	r3, [r5, #0]
 8010636:	b103      	cbz	r3, 801063a <_close_r+0x1a>
 8010638:	6023      	str	r3, [r4, #0]
 801063a:	bd38      	pop	{r3, r4, r5, pc}
 801063c:	2000facc 	.word	0x2000facc

08010640 <_fstat_r>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	4d07      	ldr	r5, [pc, #28]	; (8010660 <_fstat_r+0x20>)
 8010644:	2300      	movs	r3, #0
 8010646:	4604      	mov	r4, r0
 8010648:	4608      	mov	r0, r1
 801064a:	4611      	mov	r1, r2
 801064c:	602b      	str	r3, [r5, #0]
 801064e:	f7f2 fa1a 	bl	8002a86 <_fstat>
 8010652:	1c43      	adds	r3, r0, #1
 8010654:	d102      	bne.n	801065c <_fstat_r+0x1c>
 8010656:	682b      	ldr	r3, [r5, #0]
 8010658:	b103      	cbz	r3, 801065c <_fstat_r+0x1c>
 801065a:	6023      	str	r3, [r4, #0]
 801065c:	bd38      	pop	{r3, r4, r5, pc}
 801065e:	bf00      	nop
 8010660:	2000facc 	.word	0x2000facc

08010664 <_isatty_r>:
 8010664:	b538      	push	{r3, r4, r5, lr}
 8010666:	4d06      	ldr	r5, [pc, #24]	; (8010680 <_isatty_r+0x1c>)
 8010668:	2300      	movs	r3, #0
 801066a:	4604      	mov	r4, r0
 801066c:	4608      	mov	r0, r1
 801066e:	602b      	str	r3, [r5, #0]
 8010670:	f7f2 fa19 	bl	8002aa6 <_isatty>
 8010674:	1c43      	adds	r3, r0, #1
 8010676:	d102      	bne.n	801067e <_isatty_r+0x1a>
 8010678:	682b      	ldr	r3, [r5, #0]
 801067a:	b103      	cbz	r3, 801067e <_isatty_r+0x1a>
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	bd38      	pop	{r3, r4, r5, pc}
 8010680:	2000facc 	.word	0x2000facc

08010684 <_lseek_r>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4d07      	ldr	r5, [pc, #28]	; (80106a4 <_lseek_r+0x20>)
 8010688:	4604      	mov	r4, r0
 801068a:	4608      	mov	r0, r1
 801068c:	4611      	mov	r1, r2
 801068e:	2200      	movs	r2, #0
 8010690:	602a      	str	r2, [r5, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	f7f2 fa12 	bl	8002abc <_lseek>
 8010698:	1c43      	adds	r3, r0, #1
 801069a:	d102      	bne.n	80106a2 <_lseek_r+0x1e>
 801069c:	682b      	ldr	r3, [r5, #0]
 801069e:	b103      	cbz	r3, 80106a2 <_lseek_r+0x1e>
 80106a0:	6023      	str	r3, [r4, #0]
 80106a2:	bd38      	pop	{r3, r4, r5, pc}
 80106a4:	2000facc 	.word	0x2000facc

080106a8 <__malloc_lock>:
 80106a8:	4801      	ldr	r0, [pc, #4]	; (80106b0 <__malloc_lock+0x8>)
 80106aa:	f7ff bb55 	b.w	800fd58 <__retarget_lock_acquire_recursive>
 80106ae:	bf00      	nop
 80106b0:	2000fac4 	.word	0x2000fac4

080106b4 <__malloc_unlock>:
 80106b4:	4801      	ldr	r0, [pc, #4]	; (80106bc <__malloc_unlock+0x8>)
 80106b6:	f7ff bb50 	b.w	800fd5a <__retarget_lock_release_recursive>
 80106ba:	bf00      	nop
 80106bc:	2000fac4 	.word	0x2000fac4

080106c0 <_read_r>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	4d07      	ldr	r5, [pc, #28]	; (80106e0 <_read_r+0x20>)
 80106c4:	4604      	mov	r4, r0
 80106c6:	4608      	mov	r0, r1
 80106c8:	4611      	mov	r1, r2
 80106ca:	2200      	movs	r2, #0
 80106cc:	602a      	str	r2, [r5, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	f7f2 f994 	bl	80029fc <_read>
 80106d4:	1c43      	adds	r3, r0, #1
 80106d6:	d102      	bne.n	80106de <_read_r+0x1e>
 80106d8:	682b      	ldr	r3, [r5, #0]
 80106da:	b103      	cbz	r3, 80106de <_read_r+0x1e>
 80106dc:	6023      	str	r3, [r4, #0]
 80106de:	bd38      	pop	{r3, r4, r5, pc}
 80106e0:	2000facc 	.word	0x2000facc

080106e4 <_init>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	bf00      	nop
 80106e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ea:	bc08      	pop	{r3}
 80106ec:	469e      	mov	lr, r3
 80106ee:	4770      	bx	lr

080106f0 <_fini>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	bf00      	nop
 80106f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106f6:	bc08      	pop	{r3}
 80106f8:	469e      	mov	lr, r3
 80106fa:	4770      	bx	lr
