
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  08013b68  08013b68  00023b68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014648  08014648  000301c4  2**0
                  CONTENTS
  4 .ARM          00000008  08014648  08014648  00024648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014650  08014650  000301c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014650  08014650  00024650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014654  08014654  00024654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08014658  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010390  200001c4  0801481c  000301c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010554  0801481c  00030554  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000352d2  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fcf  00000000  00000000  000654c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026c8  00000000  00000000  0006b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002470  00000000  00000000  0006db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f447  00000000  00000000  0006ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002da0e  00000000  00000000  0009f417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a32d  00000000  00000000  000cce25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e7152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0d8  00000000  00000000  001e71a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013b4c 	.word	0x08013b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	08013b4c 	.word	0x08013b4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <SELECT+0x18>)
 8000f5e:	f005 f855 	bl	800600c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f003 f9b0 	bl	80042c8 <HAL_Delay>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	48000400 	.word	0x48000400

08000f70 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <DESELECT+0x18>)
 8000f7a:	f005 f847 	bl	800600c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f003 f9a2 	bl	80042c8 <HAL_Delay>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	48000400 	.word	0x48000400

08000f8c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f96:	bf00      	nop
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SPI_TxByte+0x30>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d1f8      	bne.n	8000f98 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fa6:	1df9      	adds	r1, r7, #7
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	2201      	movs	r2, #1
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <SPI_TxByte+0x30>)
 8000fae:	f006 fd4a 	bl	8007a46 <HAL_SPI_Transmit>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000d2c8 	.word	0x2000d2c8

08000fc0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fcc:	bf00      	nop
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <SPI_TxBuffer+0x30>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d1f8      	bne.n	8000fce <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fdc:	887a      	ldrh	r2, [r7, #2]
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	6879      	ldr	r1, [r7, #4]
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <SPI_TxBuffer+0x30>)
 8000fe4:	f006 fd2f 	bl	8007a46 <HAL_SPI_Transmit>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000d2c8 	.word	0x2000d2c8

08000ff4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
 8000ffc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ffe:	bf00      	nop
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <SPI_RxByte+0x34>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b02      	cmp	r3, #2
 800100c:	d1f8      	bne.n	8001000 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800100e:	1dba      	adds	r2, r7, #6
 8001010:	1df9      	adds	r1, r7, #7
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <SPI_RxByte+0x34>)
 800101a:	f006 fe82 	bl	8007d22 <HAL_SPI_TransmitReceive>

	return data;
 800101e:	79bb      	ldrb	r3, [r7, #6]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000d2c8 	.word	0x2000d2c8

0800102c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001034:	f7ff ffde 	bl	8000ff4 <SPI_RxByte>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	701a      	strb	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <SD_ReadyWait+0x30>)
 8001050:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001054:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001056:	f7ff ffcd 	bl	8000ff4 <SPI_RxByte>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2bff      	cmp	r3, #255	; 0xff
 8001062:	d003      	beq.n	800106c <SD_ReadyWait+0x24>
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SD_ReadyWait+0x30>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f4      	bne.n	8001056 <SD_ReadyWait+0xe>

	return res;
 800106c:	79fb      	ldrb	r3, [r7, #7]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000364c 	.word	0x2000364c

0800107c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001082:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001086:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001088:	f7ff ff72 	bl	8000f70 <DESELECT>
	for(int i = 0; i < 10; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	e005      	b.n	800109e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001092:	20ff      	movs	r0, #255	; 0xff
 8001094:	f7ff ff7a 	bl	8000f8c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3301      	adds	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	ddf6      	ble.n	8001092 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80010a4:	f7ff ff56 	bl	8000f54 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010bc:	2395      	movs	r3, #149	; 0x95
 80010be:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010c0:	463b      	mov	r3, r7
 80010c2:	2106      	movs	r1, #6
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff7b 	bl	8000fc0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ca:	e002      	b.n	80010d2 <SD_PowerOn+0x56>
	{
		cnt--;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010d2:	f7ff ff8f 	bl	8000ff4 <SPI_RxByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d002      	beq.n	80010e2 <SD_PowerOn+0x66>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f4      	bne.n	80010cc <SD_PowerOn+0x50>
	}

	DESELECT();
 80010e2:	f7ff ff45 	bl	8000f70 <DESELECT>
	SPI_TxByte(0XFF);
 80010e6:	20ff      	movs	r0, #255	; 0xff
 80010e8:	f7ff ff50 	bl	8000f8c <SPI_TxByte>

	PowerFlag = 1;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <SD_PowerOn+0x80>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001e1 	.word	0x200001e1

08001100 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <SD_PowerOff+0x14>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	200001e1 	.word	0x200001e1

08001118 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <SD_CheckPower+0x14>)
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	200001e1 	.word	0x200001e1

08001130 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <SD_RxDataBlock+0x58>)
 800113c:	22c8      	movs	r2, #200	; 0xc8
 800113e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001140:	f7ff ff58 	bl	8000ff4 <SPI_RxByte>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d103      	bne.n	8001156 <SD_RxDataBlock+0x26>
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <SD_RxDataBlock+0x58>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f4      	bne.n	8001140 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2bfe      	cmp	r3, #254	; 0xfe
 800115a:	d001      	beq.n	8001160 <SD_RxDataBlock+0x30>
 800115c:	2300      	movs	r3, #0
 800115e:	e00f      	b.n	8001180 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff60 	bl	800102c <SPI_RxBytePtr>
	} while(len--);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	603a      	str	r2, [r7, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f4      	bne.n	8001160 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001176:	f7ff ff3d 	bl	8000ff4 <SPI_RxByte>
	SPI_RxByte();
 800117a:	f7ff ff3b 	bl	8000ff4 <SPI_RxByte>

	return TRUE;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000364e 	.word	0x2000364e

0800118c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800119c:	f7ff ff54 	bl	8001048 <SD_ReadyWait>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2bff      	cmp	r3, #255	; 0xff
 80011a4:	d001      	beq.n	80011aa <SD_TxDataBlock+0x1e>
 80011a6:	2300      	movs	r3, #0
 80011a8:	e02f      	b.n	800120a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff feed 	bl	8000f8c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	2bfd      	cmp	r3, #253	; 0xfd
 80011b6:	d020      	beq.n	80011fa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff feff 	bl	8000fc0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011c2:	f7ff ff17 	bl	8000ff4 <SPI_RxByte>
		SPI_RxByte();
 80011c6:	f7ff ff15 	bl	8000ff4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011ca:	e00b      	b.n	80011e4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011cc:	f7ff ff12 	bl	8000ff4 <SPI_RxByte>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d006      	beq.n	80011ec <SD_TxDataBlock+0x60>
			i++;
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d9f0      	bls.n	80011cc <SD_TxDataBlock+0x40>
 80011ea:	e000      	b.n	80011ee <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011ec:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011ee:	bf00      	nop
 80011f0:	f7ff ff00 	bl	8000ff4 <SPI_RxByte>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0fa      	beq.n	80011f0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b05      	cmp	r3, #5
 8001202:	d101      	bne.n	8001208 <SD_TxDataBlock+0x7c>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	6039      	str	r1, [r7, #0]
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800121e:	f7ff ff13 	bl	8001048 <SD_ReadyWait>
 8001222:	4603      	mov	r3, r0
 8001224:	2bff      	cmp	r3, #255	; 0xff
 8001226:	d001      	beq.n	800122c <SD_SendCmd+0x1a>
 8001228:	23ff      	movs	r3, #255	; 0xff
 800122a:	e042      	b.n	80012b2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff feac 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	0e1b      	lsrs	r3, r3, #24
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fea6 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fea0 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fe9a 	bl	8000f8c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe95 	bl	8000f8c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b40      	cmp	r3, #64	; 0x40
 8001266:	d102      	bne.n	800126e <SD_SendCmd+0x5c>
 8001268:	2395      	movs	r3, #149	; 0x95
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e007      	b.n	800127e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b48      	cmp	r3, #72	; 0x48
 8001272:	d102      	bne.n	800127a <SD_SendCmd+0x68>
 8001274:	2387      	movs	r3, #135	; 0x87
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e001      	b.n	800127e <SD_SendCmd+0x6c>
	else crc = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe83 	bl	8000f8c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b4c      	cmp	r3, #76	; 0x4c
 800128a:	d101      	bne.n	8001290 <SD_SendCmd+0x7e>
 800128c:	f7ff feb2 	bl	8000ff4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001290:	230a      	movs	r3, #10
 8001292:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001294:	f7ff feae 	bl	8000ff4 <SPI_RxByte>
 8001298:	4603      	mov	r3, r0
 800129a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800129c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da05      	bge.n	80012b0 <SD_SendCmd+0x9e>
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	73bb      	strb	r3, [r7, #14]
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f1      	bne.n	8001294 <SD_SendCmd+0x82>

	return res;
 80012b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SD_disk_initialize+0x14>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d1      	b.n	8001474 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012d0:	4b6a      	ldr	r3, [pc, #424]	; (800147c <SD_disk_initialize+0x1c0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <SD_disk_initialize+0x2a>
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <SD_disk_initialize+0x1c0>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	e0c6      	b.n	8001474 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80012e6:	f7ff fec9 	bl	800107c <SD_PowerOn>

	/* slave select */
	SELECT();
 80012ea:	f7ff fe33 	bl	8000f54 <SELECT>

	/* check disk type */
	type = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012f2:	2100      	movs	r1, #0
 80012f4:	2040      	movs	r0, #64	; 0x40
 80012f6:	f7ff ff8c 	bl	8001212 <SD_SendCmd>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 80a1 	bne.w	8001444 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001302:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <SD_disk_initialize+0x1c4>)
 8001304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001308:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800130a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800130e:	2048      	movs	r0, #72	; 0x48
 8001310:	f7ff ff7f 	bl	8001212 <SD_SendCmd>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d155      	bne.n	80013c6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e00c      	b.n	800133a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001320:	7bfc      	ldrb	r4, [r7, #15]
 8001322:	f7ff fe67 	bl	8000ff4 <SPI_RxByte>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4423      	add	r3, r4
 8001330:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3301      	adds	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d9ef      	bls.n	8001320 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d17e      	bne.n	8001444 <SD_disk_initialize+0x188>
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	2baa      	cmp	r3, #170	; 0xaa
 800134a:	d17b      	bne.n	8001444 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800134c:	2100      	movs	r1, #0
 800134e:	2077      	movs	r0, #119	; 0x77
 8001350:	f7ff ff5f 	bl	8001212 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d807      	bhi.n	800136a <SD_disk_initialize+0xae>
 800135a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800135e:	2069      	movs	r0, #105	; 0x69
 8001360:	f7ff ff57 	bl	8001212 <SD_SendCmd>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <SD_disk_initialize+0x1c4>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ec      	bne.n	800134c <SD_disk_initialize+0x90>
 8001372:	e000      	b.n	8001376 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001374:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <SD_disk_initialize+0x1c4>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d062      	beq.n	8001444 <SD_disk_initialize+0x188>
 800137e:	2100      	movs	r1, #0
 8001380:	207a      	movs	r0, #122	; 0x7a
 8001382:	f7ff ff46 	bl	8001212 <SD_SendCmd>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d15b      	bne.n	8001444 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e00c      	b.n	80013ac <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001392:	7bfc      	ldrb	r4, [r7, #15]
 8001394:	f7ff fe2e 	bl	8000ff4 <SPI_RxByte>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4423      	add	r3, r4
 80013a2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9ef      	bls.n	8001392 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013b2:	7a3b      	ldrb	r3, [r7, #8]
 80013b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SD_disk_initialize+0x104>
 80013bc:	230c      	movs	r3, #12
 80013be:	e000      	b.n	80013c2 <SD_disk_initialize+0x106>
 80013c0:	2304      	movs	r3, #4
 80013c2:	73bb      	strb	r3, [r7, #14]
 80013c4:	e03e      	b.n	8001444 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013c6:	2100      	movs	r1, #0
 80013c8:	2077      	movs	r0, #119	; 0x77
 80013ca:	f7ff ff22 	bl	8001212 <SD_SendCmd>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d808      	bhi.n	80013e6 <SD_disk_initialize+0x12a>
 80013d4:	2100      	movs	r1, #0
 80013d6:	2069      	movs	r0, #105	; 0x69
 80013d8:	f7ff ff1b 	bl	8001212 <SD_SendCmd>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d801      	bhi.n	80013e6 <SD_disk_initialize+0x12a>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e000      	b.n	80013e8 <SD_disk_initialize+0x12c>
 80013e6:	2301      	movs	r3, #1
 80013e8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d10e      	bne.n	800140e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013f0:	2100      	movs	r1, #0
 80013f2:	2077      	movs	r0, #119	; 0x77
 80013f4:	f7ff ff0d 	bl	8001212 <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d80e      	bhi.n	800141c <SD_disk_initialize+0x160>
 80013fe:	2100      	movs	r1, #0
 8001400:	2069      	movs	r0, #105	; 0x69
 8001402:	f7ff ff06 	bl	8001212 <SD_SendCmd>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <SD_disk_initialize+0x160>
 800140c:	e00c      	b.n	8001428 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800140e:	2100      	movs	r1, #0
 8001410:	2041      	movs	r0, #65	; 0x41
 8001412:	f7ff fefe 	bl	8001212 <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <SD_disk_initialize+0x1c4>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e2      	bne.n	80013ea <SD_disk_initialize+0x12e>
 8001424:	e000      	b.n	8001428 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001426:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <SD_disk_initialize+0x1c4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <SD_disk_initialize+0x184>
 8001430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001434:	2050      	movs	r0, #80	; 0x50
 8001436:	f7ff feec 	bl	8001212 <SD_SendCmd>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SD_disk_initialize+0x188>
 8001440:	2300      	movs	r3, #0
 8001442:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <SD_disk_initialize+0x1c8>)
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800144a:	f7ff fd91 	bl	8000f70 <DESELECT>
	SPI_RxByte();
 800144e:	f7ff fdd1 	bl	8000ff4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <SD_disk_initialize+0x1c0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SD_disk_initialize+0x1c0>)
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e001      	b.n	800146e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800146a:	f7ff fe49 	bl	8001100 <SD_PowerOff>
	}

	return Stat;
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <SD_disk_initialize+0x1c0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	20000000 	.word	0x20000000
 8001480:	2000364e 	.word	0x2000364e
 8001484:	200001e0 	.word	0x200001e0

08001488 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SD_disk_status+0x14>
 8001498:	2301      	movs	r3, #1
 800149a:	e002      	b.n	80014a2 <SD_disk_status+0x1a>
	return Stat;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SD_disk_status+0x28>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000

080014b4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <SD_disk_read+0x1c>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <SD_disk_read+0x20>
 80014d0:	2304      	movs	r3, #4
 80014d2:	e051      	b.n	8001578 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <SD_disk_read+0xcc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SD_disk_read+0x32>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e048      	b.n	8001578 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <SD_disk_read+0xd0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <SD_disk_read+0x44>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	607b      	str	r3, [r7, #4]

	SELECT();
 80014f8:	f7ff fd2c 	bl	8000f54 <SELECT>

	if (count == 1)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d111      	bne.n	8001526 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2051      	movs	r0, #81	; 0x51
 8001506:	f7ff fe84 	bl	8001212 <SD_SendCmd>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d129      	bne.n	8001564 <SD_disk_read+0xb0>
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff fe0b 	bl	8001130 <SD_RxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d021      	beq.n	8001564 <SD_disk_read+0xb0>
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	e01e      	b.n	8001564 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	2052      	movs	r0, #82	; 0x52
 800152a:	f7ff fe72 	bl	8001212 <SD_SendCmd>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d117      	bne.n	8001564 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff fdf9 	bl	8001130 <SD_RxDataBlock>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00a      	beq.n	800155a <SD_disk_read+0xa6>
				buff += 512;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800154a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ed      	bne.n	8001534 <SD_disk_read+0x80>
 8001558:	e000      	b.n	800155c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800155a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800155c:	2100      	movs	r1, #0
 800155e:	204c      	movs	r0, #76	; 0x4c
 8001560:	f7ff fe57 	bl	8001212 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001564:	f7ff fd04 	bl	8000f70 <DESELECT>
	SPI_RxByte();
 8001568:	f7ff fd44 	bl	8000ff4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf14      	ite	ne
 8001572:	2301      	movne	r3, #1
 8001574:	2300      	moveq	r3, #0
 8001576:	b2db      	uxtb	r3, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000000 	.word	0x20000000
 8001584:	200001e0 	.word	0x200001e0

08001588 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <SD_disk_write+0x1c>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <SD_disk_write+0x20>
 80015a4:	2304      	movs	r3, #4
 80015a6:	e06b      	b.n	8001680 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <SD_disk_write+0x100>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SD_disk_write+0x32>
 80015b6:	2303      	movs	r3, #3
 80015b8:	e062      	b.n	8001680 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <SD_disk_write+0x100>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SD_disk_write+0x44>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e059      	b.n	8001680 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <SD_disk_write+0x104>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <SD_disk_write+0x56>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	607b      	str	r3, [r7, #4]

	SELECT();
 80015de:	f7ff fcb9 	bl	8000f54 <SELECT>

	if (count == 1)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d110      	bne.n	800160a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	2058      	movs	r0, #88	; 0x58
 80015ec:	f7ff fe11 	bl	8001212 <SD_SendCmd>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d13a      	bne.n	800166c <SD_disk_write+0xe4>
 80015f6:	21fe      	movs	r1, #254	; 0xfe
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f7ff fdc7 	bl	800118c <SD_TxDataBlock>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d033      	beq.n	800166c <SD_disk_write+0xe4>
			count = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	e030      	b.n	800166c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <SD_disk_write+0x104>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001616:	2100      	movs	r1, #0
 8001618:	2077      	movs	r0, #119	; 0x77
 800161a:	f7ff fdfa 	bl	8001212 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	2057      	movs	r0, #87	; 0x57
 8001622:	f7ff fdf6 	bl	8001212 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	2059      	movs	r0, #89	; 0x59
 800162a:	f7ff fdf2 	bl	8001212 <SD_SendCmd>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11b      	bne.n	800166c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001634:	21fc      	movs	r1, #252	; 0xfc
 8001636:	68b8      	ldr	r0, [r7, #8]
 8001638:	f7ff fda8 	bl	800118c <SD_TxDataBlock>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <SD_disk_write+0xd0>
				buff += 512;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001648:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3b01      	subs	r3, #1
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ee      	bne.n	8001634 <SD_disk_write+0xac>
 8001656:	e000      	b.n	800165a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001658:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800165a:	21fd      	movs	r1, #253	; 0xfd
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fd95 	bl	800118c <SD_TxDataBlock>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <SD_disk_write+0xe4>
			{
				count = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800166c:	f7ff fc80 	bl	8000f70 <DESELECT>
	SPI_RxByte();
 8001670:	f7ff fcc0 	bl	8000ff4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	200001e0 	.word	0x200001e0

08001690 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	603a      	str	r2, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	460b      	mov	r3, r1
 800169e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SD_disk_ioctl+0x1e>
 80016aa:	2304      	movs	r3, #4
 80016ac:	e115      	b.n	80018da <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	d124      	bne.n	8001704 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d012      	beq.n	80016e8 <SD_disk_ioctl+0x58>
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	dc1a      	bgt.n	80016fc <SD_disk_ioctl+0x6c>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <SD_disk_ioctl+0x40>
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d006      	beq.n	80016dc <SD_disk_ioctl+0x4c>
 80016ce:	e015      	b.n	80016fc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016d0:	f7ff fd16 	bl	8001100 <SD_PowerOff>
			res = RES_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016da:	e0fc      	b.n	80018d6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016dc:	f7ff fcce 	bl	800107c <SD_PowerOn>
			res = RES_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016e6:	e0f6      	b.n	80018d6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	1c5c      	adds	r4, r3, #1
 80016ec:	f7ff fd14 	bl	8001118 <SD_CheckPower>
 80016f0:	4603      	mov	r3, r0
 80016f2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016fa:	e0ec      	b.n	80018d6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016fc:	2304      	movs	r3, #4
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001702:	e0e8      	b.n	80018d6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001704:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <SD_disk_ioctl+0x254>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SD_disk_ioctl+0x86>
 8001712:	2303      	movs	r3, #3
 8001714:	e0e1      	b.n	80018da <SD_disk_ioctl+0x24a>

		SELECT();
 8001716:	f7ff fc1d 	bl	8000f54 <SELECT>

		switch (ctrl)
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	2b0d      	cmp	r3, #13
 800171e:	f200 80cb 	bhi.w	80018b8 <SD_disk_ioctl+0x228>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <SD_disk_ioctl+0x98>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001823 	.word	0x08001823
 800172c:	08001761 	.word	0x08001761
 8001730:	08001813 	.word	0x08001813
 8001734:	080018b9 	.word	0x080018b9
 8001738:	080018b9 	.word	0x080018b9
 800173c:	080018b9 	.word	0x080018b9
 8001740:	080018b9 	.word	0x080018b9
 8001744:	080018b9 	.word	0x080018b9
 8001748:	080018b9 	.word	0x080018b9
 800174c:	080018b9 	.word	0x080018b9
 8001750:	080018b9 	.word	0x080018b9
 8001754:	08001835 	.word	0x08001835
 8001758:	08001859 	.word	0x08001859
 800175c:	0800187d 	.word	0x0800187d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001760:	2100      	movs	r1, #0
 8001762:	2049      	movs	r0, #73	; 0x49
 8001764:	f7ff fd55 	bl	8001212 <SD_SendCmd>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80a8 	bne.w	80018c0 <SD_disk_ioctl+0x230>
 8001770:	f107 030c 	add.w	r3, r7, #12
 8001774:	2110      	movs	r1, #16
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fcda 	bl	8001130 <SD_RxDataBlock>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 809e 	beq.w	80018c0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001784:	7b3b      	ldrb	r3, [r7, #12]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10e      	bne.n	80017ac <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800178e:	7d7b      	ldrb	r3, [r7, #21]
 8001790:	b29a      	uxth	r2, r3
 8001792:	7d3b      	ldrb	r3, [r7, #20]
 8001794:	b29b      	uxth	r3, r3
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	4413      	add	r3, r2
 800179c:	b29b      	uxth	r3, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80017a2:	8bfb      	ldrh	r3, [r7, #30]
 80017a4:	029a      	lsls	r2, r3, #10
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e02e      	b.n	800180a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017ac:	7c7b      	ldrb	r3, [r7, #17]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	7dbb      	ldrb	r3, [r7, #22]
 80017b6:	09db      	lsrs	r3, r3, #7
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	7d7b      	ldrb	r3, [r7, #21]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0306 	and.w	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3302      	adds	r3, #2
 80017d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017d4:	7d3b      	ldrb	r3, [r7, #20]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b29a      	uxth	r2, r3
 80017dc:	7cfb      	ldrb	r3, [r7, #19]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	7cbb      	ldrb	r3, [r7, #18]
 80017ea:	029b      	lsls	r3, r3, #10
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017fc:	8bfa      	ldrh	r2, [r7, #30]
 80017fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001802:	3b09      	subs	r3, #9
 8001804:	409a      	lsls	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001810:	e056      	b.n	80018c0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001820:	e055      	b.n	80018ce <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001822:	f7ff fc11 	bl	8001048 <SD_ReadyWait>
 8001826:	4603      	mov	r3, r0
 8001828:	2bff      	cmp	r3, #255	; 0xff
 800182a:	d14b      	bne.n	80018c4 <SD_disk_ioctl+0x234>
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001832:	e047      	b.n	80018c4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001834:	2100      	movs	r1, #0
 8001836:	2049      	movs	r0, #73	; 0x49
 8001838:	f7ff fceb 	bl	8001212 <SD_SendCmd>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d142      	bne.n	80018c8 <SD_disk_ioctl+0x238>
 8001842:	2110      	movs	r1, #16
 8001844:	6a38      	ldr	r0, [r7, #32]
 8001846:	f7ff fc73 	bl	8001130 <SD_RxDataBlock>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03b      	beq.n	80018c8 <SD_disk_ioctl+0x238>
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001856:	e037      	b.n	80018c8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001858:	2100      	movs	r1, #0
 800185a:	204a      	movs	r0, #74	; 0x4a
 800185c:	f7ff fcd9 	bl	8001212 <SD_SendCmd>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d132      	bne.n	80018cc <SD_disk_ioctl+0x23c>
 8001866:	2110      	movs	r1, #16
 8001868:	6a38      	ldr	r0, [r7, #32]
 800186a:	f7ff fc61 	bl	8001130 <SD_RxDataBlock>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02b      	beq.n	80018cc <SD_disk_ioctl+0x23c>
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800187a:	e027      	b.n	80018cc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800187c:	2100      	movs	r1, #0
 800187e:	207a      	movs	r0, #122	; 0x7a
 8001880:	f7ff fcc7 	bl	8001212 <SD_SendCmd>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d116      	bne.n	80018b8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001890:	e00b      	b.n	80018aa <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001892:	6a3c      	ldr	r4, [r7, #32]
 8001894:	1c63      	adds	r3, r4, #1
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	f7ff fbac 	bl	8000ff4 <SPI_RxByte>
 800189c:	4603      	mov	r3, r0
 800189e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80018a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018a4:	3301      	adds	r3, #1
 80018a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d9ef      	bls.n	8001892 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80018b8:	2304      	movs	r3, #4
 80018ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018be:	e006      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018c0:	bf00      	nop
 80018c2:	e004      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018c4:	bf00      	nop
 80018c6:	e002      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018c8:	bf00      	nop
 80018ca:	e000      	b.n	80018ce <SD_disk_ioctl+0x23e>
			break;
 80018cc:	bf00      	nop
		}

		DESELECT();
 80018ce:	f7ff fb4f 	bl	8000f70 <DESELECT>
		SPI_RxByte();
 80018d2:	f7ff fb8f 	bl	8000ff4 <SPI_RxByte>
	}

	return res;
 80018d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018da:	4618      	mov	r0, r3
 80018dc:	372c      	adds	r7, #44	; 0x2c
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000

080018e8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 80018f0:	1d39      	adds	r1, r7, #4
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	2201      	movs	r2, #1
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <__io_putchar+0x20>)
 80018f8:	f008 fc12 	bl	800a120 <HAL_UART_Transmit>
	return ch;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000d32c 	.word	0x2000d32c

0800190c <transmit_uart>:

void transmit_uart(char *string) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7fe fc5b 	bl	80001d0 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, pdMS_TO_TICKS(100));
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	b29a      	uxth	r2, r3
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <transmit_uart+0x28>)
 8001928:	f008 fbfa 	bl	800a120 <HAL_UART_Transmit>
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000d32c 	.word	0x2000d32c

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800193e:	f002 fc83 	bl	8004248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001942:	f000 f877 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001946:	f000 fd9f 	bl	8002488 <MX_GPIO_Init>
  MX_DMA_Init();
 800194a:	f000 fd53 	bl	80023f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800194e:	f000 fd21 	bl	8002394 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001952:	f000 f8f7 	bl	8001b44 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001956:	f000 fa19 	bl	8001d8c <MX_TIM1_Init>
  MX_FATFS_Init();
 800195a:	f009 f867 	bl	800aa2c <MX_FATFS_Init>
  MX_SPI1_Init();
 800195e:	f000 f9d7 	bl	8001d10 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001962:	f000 fba3 	bl	80020ac <MX_TIM15_Init>
  MX_TIM16_Init();
 8001966:	f000 fc25 	bl	80021b4 <MX_TIM16_Init>
  MX_TIM17_Init();
 800196a:	f000 fc9b 	bl	80022a4 <MX_TIM17_Init>
  MX_I2C1_Init();
 800196e:	f000 f98f 	bl	8001c90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001972:	f000 fa9b 	bl	8001eac <MX_TIM3_Init>
  MX_TIM8_Init();
 8001976:	f000 fb09 	bl	8001f8c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_vInit(&xWS2812B, &htim3, &htim8, &hdma_tim3_ch1_trig, &hdma_tim3_ch3, &hdma_tim3_ch4_up, &hdma_tim8_ch2);
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <main+0xac>)
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <main+0xb0>)
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <main+0xb4>)
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <main+0xb8>)
 8001988:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <main+0xbc>)
 800198a:	491b      	ldr	r1, [pc, #108]	; (80019f8 <main+0xc0>)
 800198c:	481b      	ldr	r0, [pc, #108]	; (80019fc <main+0xc4>)
 800198e:	f002 fa49 	bl	8003e24 <WS2812B_vInit>

	//[!] Care for HAL_ADC_START_DMA sampling too fast due to small array for DMA (ex: 4 instead of 400. Reduce sampling time of ADC if such case or filter more samples)
  HAL_ADC_Start_DMA(&hadc1, adcValue, ADC_CHANNEL_COUNT);
 8001992:	2204      	movs	r2, #4
 8001994:	491a      	ldr	r1, [pc, #104]	; (8001a00 <main+0xc8>)
 8001996:	481b      	ldr	r0, [pc, #108]	; (8001a04 <main+0xcc>)
 8001998:	f002 ffe6 	bl	8004968 <HAL_ADC_Start_DMA>
  //HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800199c:	f00c f930 	bl	800dc00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <main+0xd0>)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4819      	ldr	r0, [pc, #100]	; (8001a0c <main+0xd4>)
 80019a6:	f00c f98a 	bl	800dcbe <osThreadNew>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <main+0xd8>)
 80019ae:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 80019b0:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <main+0xdc>)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4818      	ldr	r0, [pc, #96]	; (8001a18 <main+0xe0>)
 80019b6:	f00c f982 	bl	800dcbe <osThreadNew>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <main+0xe4>)
 80019be:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <main+0xe8>)
 80019c2:	2100      	movs	r1, #0
 80019c4:	4817      	ldr	r0, [pc, #92]	; (8001a24 <main+0xec>)
 80019c6:	f00c f97a 	bl	800dcbe <osThreadNew>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <main+0xf0>)
 80019ce:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 80019d0:	4816      	ldr	r0, [pc, #88]	; (8001a2c <main+0xf4>)
 80019d2:	f00c fa4e 	bl	800de72 <osEventFlagsNew>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <main+0xf8>)
 80019da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019dc:	f00c f934 	bl	800dc48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <main+0xa8>
 80019e2:	bf00      	nop
 80019e4:	20003654 	.word	0x20003654
 80019e8:	2000d278 	.word	0x2000d278
 80019ec:	20004f94 	.word	0x20004f94
 80019f0:	2000513c 	.word	0x2000513c
 80019f4:	200036a0 	.word	0x200036a0
 80019f8:	20004fdc 	.word	0x20004fdc
 80019fc:	200047c8 	.word	0x200047c8
 8001a00:	2000d3b4 	.word	0x2000d3b4
 8001a04:	20005028 	.word	0x20005028
 8001a08:	08013ec4 	.word	0x08013ec4
 8001a0c:	08002561 	.word	0x08002561
 8001a10:	2000508c 	.word	0x2000508c
 8001a14:	08013ee8 	.word	0x08013ee8
 8001a18:	080026d5 	.word	0x080026d5
 8001a1c:	2000369c 	.word	0x2000369c
 8001a20:	08013f0c 	.word	0x08013f0c
 8001a24:	08002739 	.word	0x08002739
 8001a28:	2000d2c0 	.word	0x2000d2c0
 8001a2c:	08013f30 	.word	0x08013f30
 8001a30:	200036ec 	.word	0x200036ec

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0b8      	sub	sp, #224	; 0xe0
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3e:	2244      	movs	r2, #68	; 0x44
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f010 f84a 	bl	8011adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2288      	movs	r2, #136	; 0x88
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f010 f83c 	bl	8011adc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a84:	230a      	movs	r3, #10
 8001a86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fc55 	bl	8006350 <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001aac:	f000 fe78 	bl	80027a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ace:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 f821 	bl	8006b1c <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ae0:	f000 fe5e 	bl	80027a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001ae4:	f244 0342 	movw	r3, #16450	; 0x4042
 8001ae8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001aee:	2300      	movs	r3, #0
 8001af0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001af6:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001af8:	2303      	movs	r3, #3
 8001afa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b00:	2308      	movs	r3, #8
 8001b02:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b04:	2307      	movs	r3, #7
 8001b06:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b14:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f005 fa35 	bl	8006f88 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001b24:	f000 fe3c 	bl	80027a0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b2c:	f004 fbba 	bl	80062a4 <HAL_PWREx_ControlVoltageScaling>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001b36:	f000 fe33 	bl	80027a0 <Error_Handler>
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	37e0      	adds	r7, #224	; 0xe0
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b68:	4a44      	ldr	r2, [pc, #272]	; (8001c7c <MX_ADC1_Init+0x138>)
 8001b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b84:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b86:	2204      	movs	r2, #4
 8001b88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b98:	2204      	movs	r2, #4
 8001b9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001baa:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc6:	482c      	ldr	r0, [pc, #176]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001bc8:	f002 fd78 	bl	80046bc <HAL_ADC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001bd2:	f000 fde5 	bl	80027a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	4825      	ldr	r0, [pc, #148]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001be2:	f003 fc9f 	bl	8005524 <HAL_ADCEx_MultiModeConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bec:	f000 fdd8 	bl	80027a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <MX_ADC1_Init+0x13c>)
 8001bf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf4:	2306      	movs	r3, #6
 8001bf6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bfc:	237f      	movs	r3, #127	; 0x7f
 8001bfe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c00:	2304      	movs	r3, #4
 8001c02:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481a      	ldr	r0, [pc, #104]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c0e:	f002 ff7d 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001c18:	f000 fdc2 	bl	80027a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <MX_ADC1_Init+0x140>)
 8001c1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c20:	230c      	movs	r3, #12
 8001c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c2a:	f002 ff6f 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001c34:	f000 fdb4 	bl	80027a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_ADC1_Init+0x144>)
 8001c3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c3c:	2312      	movs	r3, #18
 8001c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c46:	f002 ff61 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001c50:	f000 fda6 	bl	80027a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <MX_ADC1_Init+0x148>)
 8001c56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c58:	2318      	movs	r3, #24
 8001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_ADC1_Init+0x134>)
 8001c62:	f002 ff53 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001c6c:	f000 fd98 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20005028 	.word	0x20005028
 8001c7c:	50040000 	.word	0x50040000
 8001c80:	04300002 	.word	0x04300002
 8001c84:	08600004 	.word	0x08600004
 8001c88:	0c900008 	.word	0x0c900008
 8001c8c:	10c00010 	.word	0x10c00010

08001c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <MX_I2C1_Init+0x78>)
 8001c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <MX_I2C1_Init+0x7c>)
 8001c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cca:	480e      	ldr	r0, [pc, #56]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001ccc:	f004 f9b6 	bl	800603c <HAL_I2C_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cd6:	f000 fd63 	bl	80027a0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cde:	f004 fa3c 	bl	800615a <HAL_I2CEx_ConfigAnalogFilter>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f000 fd5a 	bl	80027a0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_I2C1_Init+0x74>)
 8001cf0:	f004 fa7e 	bl	80061f0 <HAL_I2CEx_ConfigDigitalFilter>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cfa:	f000 fd51 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000472c 	.word	0x2000472c
 8001d08:	40005400 	.word	0x40005400
 8001d0c:	10909cec 	.word	0x10909cec

08001d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d16:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <MX_SPI1_Init+0x78>)
 8001d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d46:	2220      	movs	r2, #32
 8001d48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d5e:	2207      	movs	r2, #7
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_SPI1_Init+0x74>)
 8001d70:	f005 fdc6 	bl	8007900 <HAL_SPI_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d7a:	f000 fd11 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000d2c8 	.word	0x2000d2c8
 8001d88:	40013000 	.word	0x40013000

08001d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b096      	sub	sp, #88	; 0x58
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	222c      	movs	r2, #44	; 0x2c
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00f fe8f 	bl	8011adc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dc0:	4a39      	ldr	r2, [pc, #228]	; (8001ea8 <MX_TIM1_Init+0x11c>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8001dc4:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dea:	482e      	ldr	r0, [pc, #184]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001dec:	f006 fbd4 	bl	8008598 <HAL_TIM_PWM_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001df6:	f000 fcd3 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4825      	ldr	r0, [pc, #148]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e0e:	f008 f815 	bl	8009e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e18:	f000 fcc2 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e1c:	2360      	movs	r3, #96	; 0x60
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e24:	2300      	movs	r3, #0
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4818      	ldr	r0, [pc, #96]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e42:	f007 fa51 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e4c:	f000 fca8 	bl	80027a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e86:	f008 f861 	bl	8009f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e90:	f000 fc86 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <MX_TIM1_Init+0x118>)
 8001e96:	f001 fccd 	bl	8003834 <HAL_TIM_MspPostInit>

}
 8001e9a:	bf00      	nop
 8001e9c:	3758      	adds	r7, #88	; 0x58
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000d228 	.word	0x2000d228
 8001ea8:	40012c00 	.word	0x40012c00

08001eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ebe:	463b      	mov	r3, r7
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	615a      	str	r2, [r3, #20]
 8001ece:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ed2:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <MX_TIM3_Init+0xdc>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ef6:	4823      	ldr	r0, [pc, #140]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001ef8:	f006 fb4e 	bl	8008598 <HAL_TIM_PWM_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001f02:	f000 fc4d 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	481b      	ldr	r0, [pc, #108]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f16:	f007 ff91 	bl	8009e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001f20:	f000 fc3e 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f24:	2360      	movs	r3, #96	; 0x60
 8001f26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f34:	463b      	mov	r3, r7
 8001f36:	2200      	movs	r2, #0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f3c:	f007 f9d4 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f46:	f000 fc2b 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f52:	f007 f9c9 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001f5c:	f000 fc20 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	220c      	movs	r2, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f68:	f007 f9be 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001f72:	f000 fc15 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM3_Init+0xd8>)
 8001f78:	f001 fc5c 	bl	8003834 <HAL_TIM_MspPostInit>

}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20004fdc 	.word	0x20004fdc
 8001f88:	40000400 	.word	0x40000400

08001f8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b096      	sub	sp, #88	; 0x58
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	615a      	str	r2, [r3, #20]
 8001fb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	222c      	movs	r2, #44	; 0x2c
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00f fd8f 	bl	8011adc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fc0:	4a39      	ldr	r2, [pc, #228]	; (80020a8 <MX_TIM8_Init+0x11c>)
 8001fc2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fea:	482e      	ldr	r0, [pc, #184]	; (80020a4 <MX_TIM8_Init+0x118>)
 8001fec:	f006 fad4 	bl	8008598 <HAL_TIM_PWM_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001ff6:	f000 fbd3 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002006:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800200a:	4619      	mov	r1, r3
 800200c:	4825      	ldr	r0, [pc, #148]	; (80020a4 <MX_TIM8_Init+0x118>)
 800200e:	f007 ff15 	bl	8009e3c <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002018:	f000 fbc2 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201c:	2360      	movs	r3, #96	; 0x60
 800201e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800203c:	2204      	movs	r2, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4818      	ldr	r0, [pc, #96]	; (80020a4 <MX_TIM8_Init+0x118>)
 8002042:	f007 f951 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800204c:	f000 fba8 	bl	80027a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM8_Init+0x118>)
 8002086:	f007 ff61 	bl	8009f4c <HAL_TIMEx_ConfigBreakDeadTime>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002090:	f000 fb86 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM8_Init+0x118>)
 8002096:	f001 fbcd 	bl	8003834 <HAL_TIM_MspPostInit>

}
 800209a:	bf00      	nop
 800209c:	3758      	adds	r7, #88	; 0x58
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200036a0 	.word	0x200036a0
 80020a8:	40013400 	.word	0x40013400

080020ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b096      	sub	sp, #88	; 0x58
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	615a      	str	r2, [r3, #20]
 80020d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	222c      	movs	r2, #44	; 0x2c
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f00f fcff 	bl	8011adc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <MX_TIM15_Init+0x100>)
 80020e0:	4a33      	ldr	r2, [pc, #204]	; (80021b0 <MX_TIM15_Init+0x104>)
 80020e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <MX_TIM15_Init+0x100>)
 80020e6:	2207      	movs	r2, #7
 80020e8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <MX_TIM15_Init+0x100>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <MX_TIM15_Init+0x100>)
 80020f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <MX_TIM15_Init+0x100>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <MX_TIM15_Init+0x100>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <MX_TIM15_Init+0x100>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800210a:	4828      	ldr	r0, [pc, #160]	; (80021ac <MX_TIM15_Init+0x100>)
 800210c:	f006 fa44 	bl	8008598 <HAL_TIM_PWM_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002116:	f000 fb43 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002122:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002126:	4619      	mov	r1, r3
 8002128:	4820      	ldr	r0, [pc, #128]	; (80021ac <MX_TIM15_Init+0x100>)
 800212a:	f007 fe87 	bl	8009e3c <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002134:	f000 fb34 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002138:	2360      	movs	r3, #96	; 0x60
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002144:	2300      	movs	r3, #0
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002158:	2200      	movs	r2, #0
 800215a:	4619      	mov	r1, r3
 800215c:	4813      	ldr	r0, [pc, #76]	; (80021ac <MX_TIM15_Init+0x100>)
 800215e:	f007 f8c3 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002168:	f000 fb1a 	bl	80027a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4807      	ldr	r0, [pc, #28]	; (80021ac <MX_TIM15_Init+0x100>)
 8002190:	f007 fedc 	bl	8009f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800219a:	f000 fb01 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800219e:	4803      	ldr	r0, [pc, #12]	; (80021ac <MX_TIM15_Init+0x100>)
 80021a0:	f001 fb48 	bl	8003834 <HAL_TIM_MspPostInit>

}
 80021a4:	bf00      	nop
 80021a6:	3758      	adds	r7, #88	; 0x58
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20004778 	.word	0x20004778
 80021b0:	40014000 	.word	0x40014000

080021b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b092      	sub	sp, #72	; 0x48
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ce:	463b      	mov	r3, r7
 80021d0:	222c      	movs	r2, #44	; 0x2c
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f00f fc81 	bl	8011adc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <MX_TIM16_Init+0xe8>)
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <MX_TIM16_Init+0xec>)
 80021de:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <MX_TIM16_Init+0xe8>)
 80021e2:	2207      	movs	r2, #7
 80021e4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <MX_TIM16_Init+0xe8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <MX_TIM16_Init+0xe8>)
 80021ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <MX_TIM16_Init+0xe8>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <MX_TIM16_Init+0xe8>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <MX_TIM16_Init+0xe8>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002206:	4825      	ldr	r0, [pc, #148]	; (800229c <MX_TIM16_Init+0xe8>)
 8002208:	f006 f8fe 	bl	8008408 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002212:	f000 fac5 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002216:	4821      	ldr	r0, [pc, #132]	; (800229c <MX_TIM16_Init+0xe8>)
 8002218:	f006 f9be 	bl	8008598 <HAL_TIM_PWM_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002222:	f000 fabd 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002226:	2360      	movs	r3, #96	; 0x60
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222e:	2300      	movs	r3, #0
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002246:	2200      	movs	r2, #0
 8002248:	4619      	mov	r1, r3
 800224a:	4814      	ldr	r0, [pc, #80]	; (800229c <MX_TIM16_Init+0xe8>)
 800224c:	f007 f84c 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002256:	f000 faa3 	bl	80027a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800226e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002272:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002278:	463b      	mov	r3, r7
 800227a:	4619      	mov	r1, r3
 800227c:	4807      	ldr	r0, [pc, #28]	; (800229c <MX_TIM16_Init+0xe8>)
 800227e:	f007 fe65 	bl	8009f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8002288:	f000 fa8a 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <MX_TIM16_Init+0xe8>)
 800228e:	f001 fad1 	bl	8003834 <HAL_TIM_MspPostInit>

}
 8002292:	bf00      	nop
 8002294:	3748      	adds	r7, #72	; 0x48
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000e3f4 	.word	0x2000e3f4
 80022a0:	40014400 	.word	0x40014400

080022a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b092      	sub	sp, #72	; 0x48
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022be:	463b      	mov	r3, r7
 80022c0:	222c      	movs	r2, #44	; 0x2c
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f00f fc09 	bl	8011adc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <MX_TIM17_Init+0xe8>)
 80022cc:	4a30      	ldr	r2, [pc, #192]	; (8002390 <MX_TIM17_Init+0xec>)
 80022ce:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <MX_TIM17_Init+0xe8>)
 80022d2:	2207      	movs	r2, #7
 80022d4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <MX_TIM17_Init+0xe8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <MX_TIM17_Init+0xe8>)
 80022de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_TIM17_Init+0xe8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <MX_TIM17_Init+0xe8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f0:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_TIM17_Init+0xe8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80022f6:	4825      	ldr	r0, [pc, #148]	; (800238c <MX_TIM17_Init+0xe8>)
 80022f8:	f006 f886 	bl	8008408 <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002302:	f000 fa4d 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002306:	4821      	ldr	r0, [pc, #132]	; (800238c <MX_TIM17_Init+0xe8>)
 8002308:	f006 f946 	bl	8008598 <HAL_TIM_PWM_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002312:	f000 fa45 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002316:	2360      	movs	r3, #96	; 0x60
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002322:	2300      	movs	r3, #0
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <MX_TIM17_Init+0xe8>)
 800233c:	f006 ffd4 	bl	80092e8 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002346:	f000 fa2b 	bl	80027a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800235e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002362:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <MX_TIM17_Init+0xe8>)
 800236e:	f007 fded 	bl	8009f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8002378:	f000 fa12 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <MX_TIM17_Init+0xe8>)
 800237e:	f001 fa59 	bl	8003834 <HAL_TIM_MspPostInit>

}
 8002382:	bf00      	nop
 8002384:	3748      	adds	r7, #72	; 0x48
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20004f48 	.word	0x20004f48
 8002390:	40014800 	.word	0x40014800

08002394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <MX_USART2_UART_Init+0x58>)
 800239a:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <MX_USART2_UART_Init+0x5c>)
 800239c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023ba:	220c      	movs	r2, #12
 80023bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_USART2_UART_Init+0x58>)
 80023d8:	f007 fe54 	bl	800a084 <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023e2:	f000 f9dd 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000d32c 	.word	0x2000d32c
 80023f0:	40004400 	.word	0x40004400

080023f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <MX_DMA_Init+0x90>)
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	4a21      	ldr	r2, [pc, #132]	; (8002484 <MX_DMA_Init+0x90>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6493      	str	r3, [r2, #72]	; 0x48
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_DMA_Init+0x90>)
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_DMA_Init+0x90>)
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <MX_DMA_Init+0x90>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6493      	str	r3, [r2, #72]	; 0x48
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <MX_DMA_Init+0x90>)
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2105      	movs	r1, #5
 800242e:	200b      	movs	r0, #11
 8002430:	f003 f9e0 	bl	80057f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002434:	200b      	movs	r0, #11
 8002436:	f003 f9f9 	bl	800582c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2105      	movs	r1, #5
 800243e:	200c      	movs	r0, #12
 8002440:	f003 f9d8 	bl	80057f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002444:	200c      	movs	r0, #12
 8002446:	f003 f9f1 	bl	800582c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2105      	movs	r1, #5
 800244e:	200d      	movs	r0, #13
 8002450:	f003 f9d0 	bl	80057f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002454:	200d      	movs	r0, #13
 8002456:	f003 f9e9 	bl	800582c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2105      	movs	r1, #5
 800245e:	2010      	movs	r0, #16
 8002460:	f003 f9c8 	bl	80057f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002464:	2010      	movs	r0, #16
 8002466:	f003 f9e1 	bl	800582c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2105      	movs	r1, #5
 800246e:	2045      	movs	r0, #69	; 0x45
 8002470:	f003 f9c0 	bl	80057f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002474:	2045      	movs	r0, #69	; 0x45
 8002476:	f003 f9d9 	bl	800582c <HAL_NVIC_EnableIRQ>

}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024aa:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a27      	ldr	r2, [pc, #156]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	4b22      	ldr	r3, [pc, #136]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ea:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <MX_GPIO_Init+0xd0>)
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80024fe:	2200      	movs	r2, #0
 8002500:	2103      	movs	r1, #3
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f003 fd81 	bl	800600c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800250a:	2201      	movs	r2, #1
 800250c:	2140      	movs	r1, #64	; 0x40
 800250e:	4813      	ldr	r0, [pc, #76]	; (800255c <MX_GPIO_Init+0xd4>)
 8002510:	f003 fd7c 	bl	800600c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002514:	2303      	movs	r3, #3
 8002516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002518:	2301      	movs	r3, #1
 800251a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252e:	f003 fbc3 	bl	8005cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2301      	movs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800253e:	2301      	movs	r3, #1
 8002540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4804      	ldr	r0, [pc, #16]	; (800255c <MX_GPIO_Init+0xd4>)
 800254a:	f003 fbb5 	bl	8005cb8 <HAL_GPIO_Init>

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	48000400 	.word	0x48000400

08002560 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8002568:	4843      	ldr	r0, [pc, #268]	; (8002678 <StartMainMenuTask+0x118>)
 800256a:	f00f fb45 	bl	8011bf8 <puts>





    printf("Reading song\r\n");
 800256e:	4843      	ldr	r0, [pc, #268]	; (800267c <StartMainMenuTask+0x11c>)
 8002570:	f00f fb42 	bl	8011bf8 <puts>


    // Mount
		fres = f_mount(&fs, "", 0);
 8002574:	2200      	movs	r2, #0
 8002576:	4942      	ldr	r1, [pc, #264]	; (8002680 <StartMainMenuTask+0x120>)
 8002578:	4842      	ldr	r0, [pc, #264]	; (8002684 <StartMainMenuTask+0x124>)
 800257a:	f00a fceb 	bl	800cf54 <f_mount>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <StartMainMenuTask+0x128>)
 8002584:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8002586:	4b40      	ldr	r3, [pc, #256]	; (8002688 <StartMainMenuTask+0x128>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <StartMainMenuTask+0x36>
			transmit_uart("Micro SD card is mounted successfully!\n");
 800258e:	483f      	ldr	r0, [pc, #252]	; (800268c <StartMainMenuTask+0x12c>)
 8002590:	f7ff f9bc 	bl	800190c <transmit_uart>
 8002594:	e006      	b.n	80025a4 <StartMainMenuTask+0x44>
		} else if (fres != FR_OK) {
 8002596:	4b3c      	ldr	r3, [pc, #240]	; (8002688 <StartMainMenuTask+0x128>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <StartMainMenuTask+0x44>
			transmit_uart("Micro SD card's mount error!\n");
 800259e:	483c      	ldr	r0, [pc, #240]	; (8002690 <StartMainMenuTask+0x130>)
 80025a0:	f7ff f9b4 	bl	800190c <transmit_uart>



		//fres = f_open(&fil, "glazunov_violin_concerto.piece", FA_READ);
		//fres = f_open(&fil, "glazunov.txt", FA_READ);
		fres = f_open(&fil, "test2.bin", FA_READ);
 80025a4:	2201      	movs	r2, #1
 80025a6:	493b      	ldr	r1, [pc, #236]	; (8002694 <StartMainMenuTask+0x134>)
 80025a8:	483b      	ldr	r0, [pc, #236]	; (8002698 <StartMainMenuTask+0x138>)
 80025aa:	f00a fd37 	bl	800d01c <f_open>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b35      	ldr	r3, [pc, #212]	; (8002688 <StartMainMenuTask+0x128>)
 80025b4:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <StartMainMenuTask+0x128>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <StartMainMenuTask+0x66>
			transmit_uart("File opened for reading.\n");
 80025be:	4837      	ldr	r0, [pc, #220]	; (800269c <StartMainMenuTask+0x13c>)
 80025c0:	f7ff f9a4 	bl	800190c <transmit_uart>
 80025c4:	e006      	b.n	80025d4 <StartMainMenuTask+0x74>
		} else if (fres != FR_OK) {
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <StartMainMenuTask+0x128>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <StartMainMenuTask+0x74>
			transmit_uart("File was not opened for reading!\n");
 80025ce:	4834      	ldr	r0, [pc, #208]	; (80026a0 <StartMainMenuTask+0x140>)
 80025d0:	f7ff f99c 	bl	800190c <transmit_uart>





		Piece_vInit(&xPiece, &fil);
 80025d4:	4930      	ldr	r1, [pc, #192]	; (8002698 <StartMainMenuTask+0x138>)
 80025d6:	4833      	ldr	r0, [pc, #204]	; (80026a4 <StartMainMenuTask+0x144>)
 80025d8:	f000 f8e8 	bl	80027ac <Piece_vInit>
		Piece_vSetComposition(&xPiece, &fil);
 80025dc:	492e      	ldr	r1, [pc, #184]	; (8002698 <StartMainMenuTask+0x138>)
 80025de:	4831      	ldr	r0, [pc, #196]	; (80026a4 <StartMainMenuTask+0x144>)
 80025e0:	f000 f91a 	bl	8002818 <Piece_vSetComposition>


		// Close file
		fres = f_close(&fil);
 80025e4:	482c      	ldr	r0, [pc, #176]	; (8002698 <StartMainMenuTask+0x138>)
 80025e6:	f00b f918 	bl	800d81a <f_close>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b26      	ldr	r3, [pc, #152]	; (8002688 <StartMainMenuTask+0x128>)
 80025f0:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80025f2:	4b25      	ldr	r3, [pc, #148]	; (8002688 <StartMainMenuTask+0x128>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <StartMainMenuTask+0xa2>
			transmit_uart("The file is closed.\n");
 80025fa:	482b      	ldr	r0, [pc, #172]	; (80026a8 <StartMainMenuTask+0x148>)
 80025fc:	f7ff f986 	bl	800190c <transmit_uart>
 8002600:	e006      	b.n	8002610 <StartMainMenuTask+0xb0>
		} else if (fres != FR_OK) {
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <StartMainMenuTask+0x128>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <StartMainMenuTask+0xb0>
			transmit_uart("The file was not closed.\n");
 800260a:	4828      	ldr	r0, [pc, #160]	; (80026ac <StartMainMenuTask+0x14c>)
 800260c:	f7ff f97e 	bl	800190c <transmit_uart>
		}

		f_mount(NULL, "", 1);
 8002610:	2201      	movs	r2, #1
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <StartMainMenuTask+0x120>)
 8002614:	2000      	movs	r0, #0
 8002616:	f00a fc9d 	bl	800cf54 <f_mount>
		if (fres == FR_OK) {
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <StartMainMenuTask+0x128>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <StartMainMenuTask+0xca>
			transmit_uart("The Micro SD card is unmounted!\n");
 8002622:	4823      	ldr	r0, [pc, #140]	; (80026b0 <StartMainMenuTask+0x150>)
 8002624:	f7ff f972 	bl	800190c <transmit_uart>
 8002628:	e006      	b.n	8002638 <StartMainMenuTask+0xd8>
		} else if (fres != FR_OK) {
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <StartMainMenuTask+0x128>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <StartMainMenuTask+0xd8>
			transmit_uart("The Micro SD was not unmounted!");
 8002632:	4820      	ldr	r0, [pc, #128]	; (80026b4 <StartMainMenuTask+0x154>)
 8002634:	f7ff f96a 	bl	800190c <transmit_uart>
		}



		// Initial Command
	  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8002638:	2100      	movs	r1, #0
 800263a:	481f      	ldr	r0, [pc, #124]	; (80026b8 <StartMainMenuTask+0x158>)
 800263c:	f006 f804 	bl	8008648 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8002640:	2100      	movs	r1, #0
 8002642:	481e      	ldr	r0, [pc, #120]	; (80026bc <StartMainMenuTask+0x15c>)
 8002644:	f006 f800 	bl	8008648 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim16, TIM_CHANNEL_1);
 8002648:	2100      	movs	r1, #0
 800264a:	481d      	ldr	r0, [pc, #116]	; (80026c0 <StartMainMenuTask+0x160>)
 800264c:	f005 fffc 	bl	8008648 <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
 8002650:	2100      	movs	r1, #0
 8002652:	481c      	ldr	r0, [pc, #112]	; (80026c4 <StartMainMenuTask+0x164>)
 8002654:	f005 fff8 	bl	8008648 <HAL_TIM_PWM_Start_IT>

	  //HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);


		xSynchWakeTime = xTaskGetTickCount();
 8002658:	f00d fc82 	bl	800ff60 <xTaskGetTickCount>
 800265c:	4603      	mov	r3, r0
 800265e:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <StartMainMenuTask+0x168>)
 8002660:	6013      	str	r3, [r2, #0]
		osEventFlagsSet(xEmbeddedViolinEventGroupHandle, (EB_PLAY_TICK | EB_PLAY_STATE));
 8002662:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <StartMainMenuTask+0x16c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2106      	movs	r1, #6
 8002668:	4618      	mov	r0, r3
 800266a:	f00b fc41 	bl	800def0 <osEventFlagsSet>


		// WAIT EVENT SYNCHRONIZE?

    osDelay(7000000000);
 800266e:	4818      	ldr	r0, [pc, #96]	; (80026d0 <StartMainMenuTask+0x170>)
 8002670:	f00b fbb7 	bl	800dde2 <osDelay>
  	printf("Main Menu\r\n");
 8002674:	e778      	b.n	8002568 <StartMainMenuTask+0x8>
 8002676:	bf00      	nop
 8002678:	08013bb4 	.word	0x08013bb4
 800267c:	08013bc0 	.word	0x08013bc0
 8002680:	08013bd0 	.word	0x08013bd0
 8002684:	200036f0 	.word	0x200036f0
 8002688:	2000d3b0 	.word	0x2000d3b0
 800268c:	08013bd4 	.word	0x08013bd4
 8002690:	08013bfc 	.word	0x08013bfc
 8002694:	08013c1c 	.word	0x08013c1c
 8002698:	2000d3c4 	.word	0x2000d3c4
 800269c:	08013c28 	.word	0x08013c28
 80026a0:	08013c44 	.word	0x08013c44
 80026a4:	20005184 	.word	0x20005184
 80026a8:	08013c68 	.word	0x08013c68
 80026ac:	08013c80 	.word	0x08013c80
 80026b0:	08013c9c 	.word	0x08013c9c
 80026b4:	08013cc0 	.word	0x08013cc0
 80026b8:	2000d228 	.word	0x2000d228
 80026bc:	20004778 	.word	0x20004778
 80026c0:	2000e3f4 	.word	0x2000e3f4
 80026c4:	20004f48 	.word	0x20004f48
 80026c8:	200047c4 	.word	0x200047c4
 80026cc:	200036ec 	.word	0x200036ec
 80026d0:	a13b8600 	.word	0xa13b8600

080026d4 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <StartPlayTickTask+0x4c>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <StartPlayTickTask+0x50>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ea:	2200      	movs	r2, #0
 80026ec:	f00b fc44 	bl	800df78 <osEventFlagsWait>
 80026f0:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dbf1      	blt.n	80026dc <StartPlayTickTask+0x8>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ec      	beq.n	80026dc <StartPlayTickTask+0x8>
		{
			while (running)
 8002702:	e008      	b.n	8002716 <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8002704:	4808      	ldr	r0, [pc, #32]	; (8002728 <StartPlayTickTask+0x54>)
 8002706:	f00f fa77 	bl	8011bf8 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <StartPlayTickTask+0x58>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4807      	ldr	r0, [pc, #28]	; (8002730 <StartPlayTickTask+0x5c>)
 8002712:	f00d fa61 	bl	800fbd8 <vTaskDelayUntil>
			while (running)
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <StartPlayTickTask+0x60>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f2      	bne.n	8002704 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 800271e:	e7dd      	b.n	80026dc <StartPlayTickTask+0x8>
 8002720:	200036ec 	.word	0x200036ec
 8002724:	08013f40 	.word	0x08013f40
 8002728:	08013ce0 	.word	0x08013ce0
 800272c:	08013f44 	.word	0x08013f44
 8002730:	200047c4 	.word	0x200047c4
 8002734:	200001e4 	.word	0x200001e4

08002738 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <StartPlayState+0x38>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <StartPlayState+0x3c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274e:	2200      	movs	r2, #0
 8002750:	f00b fc12 	bl	800df78 <osEventFlagsWait>
 8002754:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	dbf1      	blt.n	8002740 <StartPlayState+0x8>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ec      	beq.n	8002740 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 8002766:	4804      	ldr	r0, [pc, #16]	; (8002778 <StartPlayState+0x40>)
 8002768:	f000 f8a2 	bl	80028b0 <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 800276c:	e7e8      	b.n	8002740 <StartPlayState+0x8>
 800276e:	bf00      	nop
 8002770:	200036ec 	.word	0x200036ec
 8002774:	08013f48 	.word	0x08013f48
 8002778:	20005184 	.word	0x20005184

0800277c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800278e:	f001 fd7b 	bl	8004288 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40001000 	.word	0x40001000

080027a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a4:	b672      	cpsid	i
}
 80027a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <Error_Handler+0x8>
	...

080027ac <Piece_vInit>:




void Piece_vInit(PieceHandle_t *pxPiece, FIL *pFil)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xPieceInformation.pusName, sizeof(pxPiece->xPieceInformation.pusName), &ulNumBytesRead);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f103 0108 	add.w	r1, r3, #8
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	6838      	ldr	r0, [r7, #0]
 80027c4:	f00a fe12 	bl	800d3ec <f_read>
	printf("Name: %s\r\n", pxPiece->xPieceInformation.pusName);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3308      	adds	r3, #8
 80027cc:	4619      	mov	r1, r3
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <Piece_vInit+0x30>)
 80027d0:	f00f f98c 	bl	8011aec <iprintf>
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	08013cf0 	.word	0x08013cf0

080027e0 <Piece_vSetCompositionByteSize>:


void Piece_vSetCompositionByteSize(PieceHandle_t *pxPiece, FIL *pFil)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, &(pxPiece->xComposition.ulCompositionByteSize), sizeof(pxPiece->xComposition.ulCompositionByteSize), &ulNumBytesRead);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2204      	movs	r2, #4
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	f00a fdf8 	bl	800d3ec <f_read>
	printf("Composition size: %u\r\n", pxPiece->xComposition.ulCompositionByteSize);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	4619      	mov	r1, r3
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <Piece_vSetCompositionByteSize+0x34>)
 8002806:	f00f f971 	bl	8011aec <iprintf>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	08013cfc 	.word	0x08013cfc

08002818 <Piece_vSetComposition>:


void Piece_vSetComposition(PieceHandle_t *pxPiece, FIL *pFil)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	Piece_vSetCompositionByteSize(pxPiece, pFil);
 8002822:	6839      	ldr	r1, [r7, #0]
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ffdb 	bl	80027e0 <Piece_vSetCompositionByteSize>

	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xComposition.pusComposition,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 0194 	add.w	r1, r3, #148	; 0x94
			pxPiece->xComposition.ulCompositionByteSize < sizeof(pxPiece->xComposition.pusComposition) ? pxPiece->xComposition.ulCompositionByteSize : sizeof(pxPiece->xComposition.pusComposition),
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283a:	bf28      	it	cs
 800283c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8002840:	461a      	mov	r2, r3
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	6838      	ldr	r0, [r7, #0]
 8002848:	f00a fdd0 	bl	800d3ec <f_read>
			&ulNumBytesRead);


	printf("Number of bytes read: %lu\r\n", ulNumBytesRead);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4619      	mov	r1, r3
 8002850:	4808      	ldr	r0, [pc, #32]	; (8002874 <Piece_vSetComposition+0x5c>)
 8002852:	f00f f94b 	bl	8011aec <iprintf>

	pxPiece->xPieceInstruction.ulInstructionCounter = 0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

	pxPiece->xCapture.ulTick = osKernelGetTickCount();
 800285c:	f00b fa1a 	bl	800dc94 <osKernelGetTickCount>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002868:	3394      	adds	r3, #148	; 0x94
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	08013d14 	.word	0x08013d14

08002878 <Piece_ucParseBeatValue>:


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3305      	adds	r3, #5
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	f102 0194 	add.w	r1, r2, #148	; 0x94
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	440a      	add	r2, r1
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	795b      	ldrb	r3, [r3, #5]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 80028bc:	e045      	b.n	800294a <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	f102 0194 	add.w	r1, r2, #148	; 0x94
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	440a      	add	r2, r1
 80028ce:	7812      	ldrb	r2, [r2, #0]
 80028d0:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	4827      	ldr	r0, [pc, #156]	; (8002980 <Piece_vParseCommand+0xd0>)
 80028e4:	f00f f902 	bl	8011aec <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	791b      	ldrb	r3, [r3, #4]
 80028ec:	4619      	mov	r1, r3
 80028ee:	4825      	ldr	r0, [pc, #148]	; (8002984 <Piece_vParseCommand+0xd4>)
 80028f0:	f00f f8fc 	bl	8011aec <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	791b      	ldrb	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <Piece_vParseCommand+0x52>
 80028fc:	2b7f      	cmp	r3, #127	; 0x7f
 80028fe:	d003      	beq.n	8002908 <Piece_vParseCommand+0x58>
 8002900:	e006      	b.n	8002910 <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
			break;
 8002906:	e020      	b.n	800294a <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f891 	bl	8002a30 <Piece_vConfigureAll>
			break;
 800290e:	e01c      	b.n	800294a <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fb4b 	bl	8002fb0 <bIsPlayCommand>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	791b      	ldrb	r3, [r3, #4]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa4 	bl	8002878 <Piece_ucParseBeatValue>
 8002930:	4603      	mov	r3, r0
 8002932:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8002934:	7bba      	ldrb	r2, [r7, #14]
 8002936:	7b7b      	ldrb	r3, [r7, #13]
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9d8 	bl	8002cf0 <Piece_vPlayNotes>
 8002940:	e002      	b.n	8002948 <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8002942:	4811      	ldr	r0, [pc, #68]	; (8002988 <Piece_vParseCommand+0xd8>)
 8002944:	f00f f958 	bl	8011bf8 <puts>
			}
			break;
 8002948:	bf00      	nop
	while (!endCommand)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0b6      	beq.n	80028be <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8002950:	480e      	ldr	r0, [pc, #56]	; (800298c <Piece_vParseCommand+0xdc>)
 8002952:	f00f f951 	bl	8011bf8 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002956:	2100      	movs	r1, #0
 8002958:	480d      	ldr	r0, [pc, #52]	; (8002990 <Piece_vParseCommand+0xe0>)
 800295a:	f005 ffc1 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 800295e:	2100      	movs	r1, #0
 8002960:	480c      	ldr	r0, [pc, #48]	; (8002994 <Piece_vParseCommand+0xe4>)
 8002962:	f005 ffbd 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8002966:	2100      	movs	r1, #0
 8002968:	480b      	ldr	r0, [pc, #44]	; (8002998 <Piece_vParseCommand+0xe8>)
 800296a:	f005 ffb9 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 800296e:	2100      	movs	r1, #0
 8002970:	480a      	ldr	r0, [pc, #40]	; (800299c <Piece_vParseCommand+0xec>)
 8002972:	f005 ffb5 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	08013d30 	.word	0x08013d30
 8002984:	08013d44 	.word	0x08013d44
 8002988:	08013d54 	.word	0x08013d54
 800298c:	08013d68 	.word	0x08013d68
 8002990:	2000d228 	.word	0x2000d228
 8002994:	20004778 	.word	0x20004778
 8002998:	2000e3f4 	.word	0x2000e3f4
 800299c:	20004f48 	.word	0x20004f48

080029a0 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80029ba:	4619      	mov	r1, r3
 80029bc:	4803      	ldr	r0, [pc, #12]	; (80029cc <Piece_vSetMovement+0x2c>)
 80029be:	f00f f895 	bl	8011aec <iprintf>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	08013d7c 	.word	0x08013d7c

080029d0 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80029ea:	4619      	mov	r1, r3
 80029ec:	4803      	ldr	r0, [pc, #12]	; (80029fc <Piece_vSetBPM+0x2c>)
 80029ee:	f00f f87d 	bl	8011aec <iprintf>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	08013d8c 	.word	0x08013d8c

08002a00 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <Piece_vSetDynamic+0x2c>)
 8002a1e:	f00f f865 	bl	8011aec <iprintf>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	08013d98 	.word	0x08013d98

08002a30 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8002a38:	481e      	ldr	r0, [pc, #120]	; (8002ab4 <Piece_vConfigureAll+0x84>)
 8002a3a:	f00f f8dd 	bl	8011bf8 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1c9a      	adds	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ff84 	bl	80029a0 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8002a98:	89bb      	ldrh	r3, [r7, #12]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff97 	bl	80029d0 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffaa 	bl	8002a00 <Piece_vSetDynamic>
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	08013da8 	.word	0x08013da8

08002ab8 <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	int count = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002ac6:	e01e      	b.n	8002b06 <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ace:	3394      	adds	r3, #148	; 0x94
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002adc:	3394      	adds	r3, #148	; 0x94
 8002ade:	601a      	str	r2, [r3, #0]
		count++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3b32      	subs	r3, #50	; 0x32
 8002aea:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 8002aec:	2232      	movs	r2, #50	; 0x32
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	4819      	ldr	r0, [pc, #100]	; (8002b58 <Piece_vCaptureFragment+0xa0>)
 8002af2:	f00e fffb 	bl	8011aec <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002afc:	3394      	adds	r3, #148	; 0x94
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00b f989 	bl	800de18 <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b31      	cmp	r3, #49	; 0x31
 8002b0a:	dcdd      	bgt.n	8002ac8 <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	dd1b      	ble.n	8002b4a <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b18:	3394      	adds	r3, #148	; 0x94
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b26:	3394      	adds	r3, #148	; 0x94
 8002b28:	601a      	str	r2, [r3, #0]

		count++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	68f9      	ldr	r1, [r7, #12]
 8002b34:	4808      	ldr	r0, [pc, #32]	; (8002b58 <Piece_vCaptureFragment+0xa0>)
 8002b36:	f00e ffd9 	bl	8011aec <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b40:	3394      	adds	r3, #148	; 0x94
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00b f967 	bl	800de18 <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	603b      	str	r3, [r7, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	08013dc4 	.word	0x08013dc4

08002b5c <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b6a:	3398      	adds	r3, #152	; 0x98
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b76:	339b      	adds	r3, #155	; 0x9b
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b82:	339e      	adds	r3, #158	; 0x9e
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b8e:	33a1      	adds	r3, #161	; 0xa1
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3306      	adds	r3, #6
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	440a      	add	r2, r1
 8002bb8:	8812      	ldrh	r2, [r2, #0]
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c9a      	adds	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	88db      	ldrh	r3, [r3, #6]
 8002bcc:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	88db      	ldrh	r3, [r3, #6]
 8002bd2:	0b9b      	lsrs	r3, r3, #14
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	88db      	ldrh	r3, [r3, #6]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be6:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d856      	bhi.n	8002c9c <Piece_vParseNoteGoal+0xfc>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <Piece_vParseNoteGoal+0x54>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c2b 	.word	0x08002c2b
 8002bfc:	08002c51 	.word	0x08002c51
 8002c00:	08002c77 	.word	0x08002c77
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c0a:	3398      	adds	r3, #152	; 0x98
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c16:	3399      	adds	r3, #153	; 0x99
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c22:	339a      	adds	r3, #154	; 0x9a
 8002c24:	7b7a      	ldrb	r2, [r7, #13]
 8002c26:	701a      	strb	r2, [r3, #0]
		break;
 8002c28:	e039      	b.n	8002c9e <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c30:	339b      	adds	r3, #155	; 0x9b
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c3c:	339c      	adds	r3, #156	; 0x9c
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c48:	339d      	adds	r3, #157	; 0x9d
 8002c4a:	7b7a      	ldrb	r2, [r7, #13]
 8002c4c:	701a      	strb	r2, [r3, #0]
		break;
 8002c4e:	e026      	b.n	8002c9e <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c56:	339e      	adds	r3, #158	; 0x9e
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c62:	339f      	adds	r3, #159	; 0x9f
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c6e:	33a0      	adds	r3, #160	; 0xa0
 8002c70:	7b7a      	ldrb	r2, [r7, #13]
 8002c72:	701a      	strb	r2, [r3, #0]
		break;
 8002c74:	e013      	b.n	8002c9e <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c7c:	33a1      	adds	r3, #161	; 0xa1
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c88:	33a2      	adds	r3, #162	; 0xa2
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c94:	33a3      	adds	r3, #163	; 0xa3
 8002c96:	7b7a      	ldrb	r2, [r7, #13]
 8002c98:	701a      	strb	r2, [r3, #0]
		break;
 8002c9a:	e000      	b.n	8002c9e <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 8002c9c:	bf00      	nop
	}
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d901      	bls.n	8002cc2 <Piece_vParseGoal+0x16>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	81fb      	strh	r3, [r7, #14]
 8002cc6:	e008      	b.n	8002cda <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff69 	bl	8002ba0 <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 8002cce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	81fb      	strh	r3, [r7, #14]
 8002cda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dbf1      	blt.n	8002cc8 <Piece_vParseGoal+0x1c>
	}
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 8002d00:	78bb      	ldrb	r3, [r7, #2]
 8002d02:	4619      	mov	r1, r3
 8002d04:	48a0      	ldr	r0, [pc, #640]	; (8002f88 <Piece_vPlayNotes+0x298>)
 8002d06:	f00e fef1 	bl	8011aec <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	489f      	ldr	r0, [pc, #636]	; (8002f8c <Piece_vPlayNotes+0x29c>)
 8002d10:	f00e feec 	bl	8011aec <iprintf>

	Piece_vResetGoal(pxPiece);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ff21 	bl	8002b5c <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 8002d1a:	78bb      	ldrb	r3, [r7, #2]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffc4 	bl	8002cac <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f9d1 	bl	80030cc <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d820      	bhi.n	8002d72 <Piece_vPlayNotes+0x82>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <Piece_vPlayNotes+0x48>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d4d 	.word	0x08002d4d
 8002d3c:	08002d55 	.word	0x08002d55
 8002d40:	08002d5b 	.word	0x08002d5b
 8002d44:	08002d63 	.word	0x08002d63
 8002d48:	08002d6b 	.word	0x08002d6b
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 8002d4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d50:	617b      	str	r3, [r7, #20]
		break;
 8002d52:	e012      	b.n	8002d7a <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8002d54:	4b8e      	ldr	r3, [pc, #568]	; (8002f90 <Piece_vPlayNotes+0x2a0>)
 8002d56:	617b      	str	r3, [r7, #20]
		break;
 8002d58:	e00f      	b.n	8002d7a <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 8002d5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d5e:	617b      	str	r3, [r7, #20]
		break;
 8002d60:	e00b      	b.n	8002d7a <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8002d62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d66:	617b      	str	r3, [r7, #20]
		break;
 8002d68:	e007      	b.n	8002d7a <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 8002d6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d6e:	617b      	str	r3, [r7, #20]
		break;
 8002d70:	e003      	b.n	8002d7a <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8002d72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d76:	617b      	str	r3, [r7, #20]
		break;
 8002d78:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d88:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002f94 <Piece_vPlayNotes+0x2a4>
 8002d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d90:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002f98 <Piece_vPlayNotes+0x2a8>
 8002d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d98:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	2b0b      	cmp	r3, #11
 8002da0:	f200 80d6 	bhi.w	8002f50 <Piece_vPlayNotes+0x260>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <Piece_vPlayNotes+0xbc>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002ddd 	.word	0x08002ddd
 8002db0:	08002dfd 	.word	0x08002dfd
 8002db4:	08002e1d 	.word	0x08002e1d
 8002db8:	08002e3d 	.word	0x08002e3d
 8002dbc:	08002e5d 	.word	0x08002e5d
 8002dc0:	08002e79 	.word	0x08002e79
 8002dc4:	08002e91 	.word	0x08002e91
 8002dc8:	08002eb1 	.word	0x08002eb1
 8002dcc:	08002ed1 	.word	0x08002ed1
 8002dd0:	08002ef1 	.word	0x08002ef1
 8002dd4:	08002f11 	.word	0x08002f11
 8002dd8:	08002f31 	.word	0x08002f31
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 8002ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002f9c <Piece_vPlayNotes+0x2ac>
 8002de4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df4:	ee17 3a90 	vmov	r3, s15
 8002df8:	613b      	str	r3, [r7, #16]
		break;
 8002dfa:	e0b5      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 8002dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e00:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e08:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e14:	ee17 3a90 	vmov	r3, s15
 8002e18:	613b      	str	r3, [r7, #16]
		break;
 8002e1a:	e0a5      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 8002e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e20:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002e24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e34:	ee17 3a90 	vmov	r3, s15
 8002e38:	613b      	str	r3, [r7, #16]
		break;
 8002e3a:	e095      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 8002e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e40:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002e44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e54:	ee17 3a90 	vmov	r3, s15
 8002e58:	613b      	str	r3, [r7, #16]
		break;
 8002e5a:	e085      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 8002e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e70:	ee17 3a90 	vmov	r3, s15
 8002e74:	613b      	str	r3, [r7, #16]
		break;
 8002e76:	e077      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002e78:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e88:	ee17 3a90 	vmov	r3, s15
 8002e8c:	613b      	str	r3, [r7, #16]
		break;
 8002e8e:	e06b      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 8002e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ea8:	ee17 3a90 	vmov	r3, s15
 8002eac:	613b      	str	r3, [r7, #16]
		break;
 8002eae:	e05b      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 8002eb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002eb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ebc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec8:	ee17 3a90 	vmov	r3, s15
 8002ecc:	613b      	str	r3, [r7, #16]
		break;
 8002ece:	e04b      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 8002ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed4:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002edc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee8:	ee17 3a90 	vmov	r3, s15
 8002eec:	613b      	str	r3, [r7, #16]
		break;
 8002eee:	e03b      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002ef0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ef4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002fa0 <Piece_vPlayNotes+0x2b0>
 8002ef8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002efc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f08:	ee17 3a90 	vmov	r3, s15
 8002f0c:	613b      	str	r3, [r7, #16]
		break;
 8002f0e:	e02b      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f14:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002fa4 <Piece_vPlayNotes+0x2b4>
 8002f18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f28:	ee17 3a90 	vmov	r3, s15
 8002f2c:	613b      	str	r3, [r7, #16]
		break;
 8002f2e:	e01b      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f34:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002fa8 <Piece_vPlayNotes+0x2b8>
 8002f38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f48:	ee17 3a90 	vmov	r3, s15
 8002f4c:	613b      	str	r3, [r7, #16]
		break;
 8002f4e:	e00b      	b.n	8002f68 <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002f50:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f54:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f60:	ee17 3a90 	vmov	r3, s15
 8002f64:	613b      	str	r3, [r7, #16]
		break;
 8002f66:	bf00      	nop
	}


	if (ucNumNotes == 0)
 8002f68:	78bb      	ldrb	r3, [r7, #2]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 8002f6e:	480f      	ldr	r0, [pc, #60]	; (8002fac <Piece_vPlayNotes+0x2bc>)
 8002f70:	f00e fe42 	bl	8011bf8 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fd9d 	bl	8002ab8 <Piece_vCaptureFragment>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	08013ddc 	.word	0x08013ddc
 8002f8c:	08013df0 	.word	0x08013df0
 8002f90:	3f2aaaab 	.word	0x3f2aaaab
 8002f94:	42700000 	.word	0x42700000
 8002f98:	447a0000 	.word	0x447a0000
 8002f9c:	42000000 	.word	0x42000000
 8002fa0:	3d800000 	.word	0x3d800000
 8002fa4:	3d000000 	.word	0x3d000000
 8002fa8:	3c800000 	.word	0x3c800000
 8002fac:	08013e04 	.word	0x08013e04

08002fb0 <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	09db      	lsrs	r3, r3, #7
 8002fc2:	b2db      	uxtb	r3, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460a      	mov	r2, r1
 8002fda:	71fb      	strb	r3, [r7, #7]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d816      	bhi.n	8003014 <Piece_usGetPitchTick+0x44>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <Piece_usGetPitchTick+0x1c>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	08003003 	.word	0x08003003
 8002ff4:	08003009 	.word	0x08003009
 8002ff8:	0800300f 	.word	0x0800300f
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
		break;
 8003000:	e00b      	b.n	800301a <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 8003002:	230a      	movs	r3, #10
 8003004:	73fb      	strb	r3, [r7, #15]
		break;
 8003006:	e008      	b.n	800301a <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 8003008:	2314      	movs	r3, #20
 800300a:	73fb      	strb	r3, [r7, #15]
		break;
 800300c:	e005      	b.n	800301a <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 800300e:	231e      	movs	r3, #30
 8003010:	73fb      	strb	r3, [r7, #15]
		break;
 8003012:	e002      	b.n	800301a <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]
		break;
 8003018:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	79bb      	ldrb	r3, [r7, #6]
 800301e:	4413      	add	r3, r2
 8003020:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b47      	cmp	r3, #71	; 0x47
 8003026:	bf28      	it	cs
 8003028:	2347      	movcs	r3, #71	; 0x47
 800302a:	73fb      	strb	r3, [r7, #15]

	return pusNoteToPitchMap[ucPitchTickIndex];
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <Piece_usGetPitchTick+0x70>)
 8003030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	20000004 	.word	0x20000004

08003044 <Piece_ucGetFingeringIndex>:



uint8_t Piece_ucGetFingeringIndex(uint8_t ucString, uint8_t ucOffset)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	460a      	mov	r2, r1
 800304e:	71fb      	strb	r3, [r7, #7]
 8003050:	4613      	mov	r3, r2
 8003052:	71bb      	strb	r3, [r7, #6]
	uint8_t ucFingeringIndex;

	// [!] assert ucOffset [0, 29]

	switch (ucString)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d82b      	bhi.n	80030b2 <Piece_ucGetFingeringIndex+0x6e>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <Piece_ucGetFingeringIndex+0x1c>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	08003081 	.word	0x08003081
 8003068:	08003091 	.word	0x08003091
 800306c:	080030a3 	.word	0x080030a3
	{
	case G_STRING:
		ucFingeringIndex = G_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucG;
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	4a15      	ldr	r2, [pc, #84]	; (80030c8 <Piece_ucGetFingeringIndex+0x84>)
 8003074:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003078:	f1c3 031d 	rsb	r3, r3, #29
 800307c:	73fb      	strb	r3, [r7, #15]
		break;
 800307e:	e01b      	b.n	80030b8 <Piece_ucGetFingeringIndex+0x74>
	case D_STRING:
		ucFingeringIndex = D_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucD;
 8003080:	79bb      	ldrb	r3, [r7, #6]
 8003082:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <Piece_ucGetFingeringIndex+0x84>)
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	331e      	adds	r3, #30
 800308c:	73fb      	strb	r3, [r7, #15]
		break;
 800308e:	e013      	b.n	80030b8 <Piece_ucGetFingeringIndex+0x74>
	case A_STRING:
		ucFingeringIndex = A_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucA;
 8003090:	79bb      	ldrb	r3, [r7, #6]
 8003092:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <Piece_ucGetFingeringIndex+0x84>)
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	789b      	ldrb	r3, [r3, #2]
 800309a:	f1c3 0359 	rsb	r3, r3, #89	; 0x59
 800309e:	73fb      	strb	r3, [r7, #15]
		break;
 80030a0:	e00a      	b.n	80030b8 <Piece_ucGetFingeringIndex+0x74>
	case E_STRING:
		ucFingeringIndex = E_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucE;
 80030a2:	79bb      	ldrb	r3, [r7, #6]
 80030a4:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <Piece_ucGetFingeringIndex+0x84>)
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	78db      	ldrb	r3, [r3, #3]
 80030ac:	335a      	adds	r3, #90	; 0x5a
 80030ae:	73fb      	strb	r3, [r7, #15]
		break;
 80030b0:	e002      	b.n	80030b8 <Piece_ucGetFingeringIndex+0x74>
	default:
		// [!] error light
		ucFingeringIndex = G_STRING_FINGER_OFFSET;
 80030b2:	231d      	movs	r3, #29
 80030b4:	73fb      	strb	r3, [r7, #15]
		break;
 80030b6:	bf00      	nop
	}

	return ucFingeringIndex;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000094 	.word	0x20000094

080030cc <Piece_Debug_vPrintGoal>:

extern WS2812BHandle_t xWS2812B;


void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 80030d4:	4885      	ldr	r0, [pc, #532]	; (80032ec <Piece_Debug_vPrintGoal+0x220>)
 80030d6:	f00e fd8f 	bl	8011bf8 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030e0:	3398      	adds	r3, #152	; 0x98
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d04b      	beq.n	8003180 <Piece_Debug_vPrintGoal+0xb4>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030ee:	339a      	adds	r3, #154	; 0x9a
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461c      	mov	r4, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030fa:	339a      	adds	r3, #154	; 0x9a
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff ff65 	bl	8002fd0 <Piece_usGetPitchTick>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	4621      	mov	r1, r4
 800310c:	4878      	ldr	r0, [pc, #480]	; (80032f0 <Piece_Debug_vPrintGoal+0x224>)
 800310e:	f00e fced 	bl	8011aec <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003118:	339a      	adds	r3, #154	; 0x9a
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	2000      	movs	r0, #0
 8003120:	f7ff ff56 	bl	8002fd0 <Piece_usGetPitchTick>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b72      	ldr	r3, [pc, #456]	; (80032f4 <Piece_Debug_vPrintGoal+0x228>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 800312e:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <Piece_Debug_vPrintGoal+0x228>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <Piece_Debug_vPrintGoal+0x228>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	0852      	lsrs	r2, r2, #1
 800313a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 800313c:	2100      	movs	r1, #0
 800313e:	486d      	ldr	r0, [pc, #436]	; (80032f4 <Piece_Debug_vPrintGoal+0x228>)
 8003140:	f005 fa82 	bl	8008648 <HAL_TIM_PWM_Start_IT>


		uint8_t ucGFingeringOffset = Piece_ucGetFingeringIndex(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800314a:	339a      	adds	r3, #154	; 0x9a
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	2000      	movs	r0, #0
 8003152:	f7ff ff77 	bl	8003044 <Piece_ucGetFingeringIndex>
 8003156:	4603      	mov	r3, r0
 8003158:	73fb      	strb	r3, [r7, #15]
		WS2812B_vSetLED(&xWS2812B, ucGFingeringOffset, 255, 0, 0);
 800315a:	7bf9      	ldrb	r1, [r7, #15]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	22ff      	movs	r2, #255	; 0xff
 8003164:	4864      	ldr	r0, [pc, #400]	; (80032f8 <Piece_Debug_vPrintGoal+0x22c>)
 8003166:	f000 fe86 	bl	8003e76 <WS2812B_vSetLED>
    WS2812B_vSetBrightness(&xWS2812B, 1);
 800316a:	2101      	movs	r1, #1
 800316c:	4862      	ldr	r0, [pc, #392]	; (80032f8 <Piece_Debug_vPrintGoal+0x22c>)
 800316e:	f000 feff 	bl	8003f70 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 8003172:	4861      	ldr	r0, [pc, #388]	; (80032f8 <Piece_Debug_vPrintGoal+0x22c>)
 8003174:	f000 ffce 	bl	8004114 <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 8003178:	485f      	ldr	r0, [pc, #380]	; (80032f8 <Piece_Debug_vPrintGoal+0x22c>)
 800317a:	f000 fedb 	bl	8003f34 <WS2812B_vResetLEDs>
 800317e:	e003      	b.n	8003188 <Piece_Debug_vPrintGoal+0xbc>

	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8003180:	2100      	movs	r1, #0
 8003182:	485c      	ldr	r0, [pc, #368]	; (80032f4 <Piece_Debug_vPrintGoal+0x228>)
 8003184:	f005 fbac 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800318e:	339b      	adds	r3, #155	; 0x9b
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02e      	beq.n	80031f4 <Piece_Debug_vPrintGoal+0x128>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800319c:	339d      	adds	r3, #157	; 0x9d
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	461c      	mov	r4, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031a8:	339d      	adds	r3, #157	; 0x9d
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff ff0e 	bl	8002fd0 <Piece_usGetPitchTick>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4621      	mov	r1, r4
 80031ba:	4850      	ldr	r0, [pc, #320]	; (80032fc <Piece_Debug_vPrintGoal+0x230>)
 80031bc:	f00e fc96 	bl	8011aec <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031c6:	339d      	adds	r3, #157	; 0x9d
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	2001      	movs	r0, #1
 80031ce:	f7ff feff 	bl	8002fd0 <Piece_usGetPitchTick>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <Piece_Debug_vPrintGoal+0x234>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 80031dc:	4b48      	ldr	r3, [pc, #288]	; (8003300 <Piece_Debug_vPrintGoal+0x234>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <Piece_Debug_vPrintGoal+0x234>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0852      	lsrs	r2, r2, #1
 80031e8:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80031ea:	2100      	movs	r1, #0
 80031ec:	4844      	ldr	r0, [pc, #272]	; (8003300 <Piece_Debug_vPrintGoal+0x234>)
 80031ee:	f005 fa2b 	bl	8008648 <HAL_TIM_PWM_Start_IT>
 80031f2:	e003      	b.n	80031fc <Piece_Debug_vPrintGoal+0x130>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80031f4:	2100      	movs	r1, #0
 80031f6:	4842      	ldr	r0, [pc, #264]	; (8003300 <Piece_Debug_vPrintGoal+0x234>)
 80031f8:	f005 fb72 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003202:	339e      	adds	r3, #158	; 0x9e
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d02e      	beq.n	8003268 <Piece_Debug_vPrintGoal+0x19c>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003210:	33a0      	adds	r3, #160	; 0xa0
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461c      	mov	r4, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800321c:	33a0      	adds	r3, #160	; 0xa0
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	4619      	mov	r1, r3
 8003222:	2002      	movs	r0, #2
 8003224:	f7ff fed4 	bl	8002fd0 <Piece_usGetPitchTick>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	4621      	mov	r1, r4
 800322e:	4835      	ldr	r0, [pc, #212]	; (8003304 <Piece_Debug_vPrintGoal+0x238>)
 8003230:	f00e fc5c 	bl	8011aec <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800323a:	33a0      	adds	r3, #160	; 0xa0
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	2002      	movs	r0, #2
 8003242:	f7ff fec5 	bl	8002fd0 <Piece_usGetPitchTick>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <Piece_Debug_vPrintGoal+0x23c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <Piece_Debug_vPrintGoal+0x23c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <Piece_Debug_vPrintGoal+0x23c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0852      	lsrs	r2, r2, #1
 800325c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800325e:	2100      	movs	r1, #0
 8003260:	4829      	ldr	r0, [pc, #164]	; (8003308 <Piece_Debug_vPrintGoal+0x23c>)
 8003262:	f005 f9f1 	bl	8008648 <HAL_TIM_PWM_Start_IT>
 8003266:	e003      	b.n	8003270 <Piece_Debug_vPrintGoal+0x1a4>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8003268:	2100      	movs	r1, #0
 800326a:	4827      	ldr	r0, [pc, #156]	; (8003308 <Piece_Debug_vPrintGoal+0x23c>)
 800326c:	f005 fb38 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003276:	33a1      	adds	r3, #161	; 0xa1
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02e      	beq.n	80032dc <Piece_Debug_vPrintGoal+0x210>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003284:	33a3      	adds	r3, #163	; 0xa3
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	461c      	mov	r4, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003290:	33a3      	adds	r3, #163	; 0xa3
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	4619      	mov	r1, r3
 8003296:	2003      	movs	r0, #3
 8003298:	f7ff fe9a 	bl	8002fd0 <Piece_usGetPitchTick>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	4621      	mov	r1, r4
 80032a2:	481a      	ldr	r0, [pc, #104]	; (800330c <Piece_Debug_vPrintGoal+0x240>)
 80032a4:	f00e fc22 	bl	8011aec <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80032ae:	33a3      	adds	r3, #163	; 0xa3
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	2003      	movs	r0, #3
 80032b6:	f7ff fe8b 	bl	8002fd0 <Piece_usGetPitchTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <Piece_Debug_vPrintGoal+0x244>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <Piece_Debug_vPrintGoal+0x244>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <Piece_Debug_vPrintGoal+0x244>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80032d2:	2100      	movs	r1, #0
 80032d4:	480e      	ldr	r0, [pc, #56]	; (8003310 <Piece_Debug_vPrintGoal+0x244>)
 80032d6:	f005 f9b7 	bl	8008648 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 80032da:	e003      	b.n	80032e4 <Piece_Debug_vPrintGoal+0x218>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80032dc:	2100      	movs	r1, #0
 80032de:	480c      	ldr	r0, [pc, #48]	; (8003310 <Piece_Debug_vPrintGoal+0x244>)
 80032e0:	f005 fafe 	bl	80088e0 <HAL_TIM_PWM_Stop_IT>
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd90      	pop	{r4, r7, pc}
 80032ec:	08013e1c 	.word	0x08013e1c
 80032f0:	08013e24 	.word	0x08013e24
 80032f4:	2000d228 	.word	0x2000d228
 80032f8:	200047c8 	.word	0x200047c8
 80032fc:	08013e34 	.word	0x08013e34
 8003300:	20004778 	.word	0x20004778
 8003304:	08013e44 	.word	0x08013e44
 8003308:	2000e3f4 	.word	0x2000e3f4
 800330c:	08013e54 	.word	0x08013e54
 8003310:	20004f48 	.word	0x20004f48

08003314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_MspInit+0x4c>)
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	4a10      	ldr	r2, [pc, #64]	; (8003360 <HAL_MspInit+0x4c>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6613      	str	r3, [r2, #96]	; 0x60
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <HAL_MspInit+0x4c>)
 8003328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_MspInit+0x4c>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_MspInit+0x4c>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	; 0x58
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_MspInit+0x4c>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	210f      	movs	r1, #15
 800334e:	f06f 0001 	mvn.w	r0, #1
 8003352:	f002 fa4f 	bl	80057f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000

08003364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2a      	ldr	r2, [pc, #168]	; (800342c <HAL_ADC_MspInit+0xc8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d14e      	bne.n	8003424 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003386:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_ADC_MspInit+0xcc>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	4a29      	ldr	r2, [pc, #164]	; (8003430 <HAL_ADC_MspInit+0xcc>)
 800338c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003392:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_ADC_MspInit+0xcc>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800339e:	4b24      	ldr	r3, [pc, #144]	; (8003430 <HAL_ADC_MspInit+0xcc>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	4a23      	ldr	r2, [pc, #140]	; (8003430 <HAL_ADC_MspInit+0xcc>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033aa:	4b21      	ldr	r3, [pc, #132]	; (8003430 <HAL_ADC_MspInit+0xcc>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80033b6:	230f      	movs	r3, #15
 80033b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80033ba:	230b      	movs	r3, #11
 80033bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c2:	f107 0314 	add.w	r3, r7, #20
 80033c6:	4619      	mov	r1, r3
 80033c8:	481a      	ldr	r0, [pc, #104]	; (8003434 <HAL_ADC_MspInit+0xd0>)
 80033ca:	f002 fc75 	bl	8005cb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033d0:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_ADC_MspInit+0xd8>)
 80033d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e0:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 80033fe:	2220      	movs	r2, #32
 8003400:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 8003404:	2200      	movs	r2, #0
 8003406:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003408:	480b      	ldr	r0, [pc, #44]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 800340a:	f002 fa1d 	bl	8005848 <HAL_DMA_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8003414:	f7ff f9c4 	bl	80027a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
 800341e:	4a06      	ldr	r2, [pc, #24]	; (8003438 <HAL_ADC_MspInit+0xd4>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003424:	bf00      	nop
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	50040000 	.word	0x50040000
 8003430:	40021000 	.word	0x40021000
 8003434:	48000800 	.word	0x48000800
 8003438:	200050f4 	.word	0x200050f4
 800343c:	40020008 	.word	0x40020008

08003440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a17      	ldr	r2, [pc, #92]	; (80034bc <HAL_I2C_MspInit+0x7c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d128      	bne.n	80034b4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <HAL_I2C_MspInit+0x80>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <HAL_I2C_MspInit+0x80>)
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_I2C_MspInit+0x80>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800347a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800347e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003480:	2312      	movs	r3, #18
 8003482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003484:	2301      	movs	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800348c:	2304      	movs	r3, #4
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	4619      	mov	r1, r3
 8003496:	480b      	ldr	r0, [pc, #44]	; (80034c4 <HAL_I2C_MspInit+0x84>)
 8003498:	f002 fc0e 	bl	8005cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_I2C_MspInit+0x80>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <HAL_I2C_MspInit+0x80>)
 80034a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034a6:	6593      	str	r3, [r2, #88]	; 0x58
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_I2C_MspInit+0x80>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034b4:	bf00      	nop
 80034b6:	3728      	adds	r7, #40	; 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40005400 	.word	0x40005400
 80034c0:	40021000 	.word	0x40021000
 80034c4:	48000400 	.word	0x48000400

080034c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a25      	ldr	r2, [pc, #148]	; (800357c <HAL_SPI_MspInit+0xb4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d144      	bne.n	8003574 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	4a24      	ldr	r2, [pc, #144]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 80034f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034f4:	6613      	str	r3, [r2, #96]	; 0x60
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_SPI_MspInit+0xb8>)
 8003528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003532:	2320      	movs	r3, #32
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003542:	2305      	movs	r3, #5
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003550:	f002 fbb2 	bl	8005cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003554:	2330      	movs	r3, #48	; 0x30
 8003556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003564:	2305      	movs	r3, #5
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003568:	f107 0314 	add.w	r3, r7, #20
 800356c:	4619      	mov	r1, r3
 800356e:	4805      	ldr	r0, [pc, #20]	; (8003584 <HAL_SPI_MspInit+0xbc>)
 8003570:	f002 fba2 	bl	8005cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003574:	bf00      	nop
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013000 	.word	0x40013000
 8003580:	40021000 	.word	0x40021000
 8003584:	48000400 	.word	0x48000400

08003588 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a80      	ldr	r2, [pc, #512]	; (8003798 <HAL_TIM_PWM_MspInit+0x210>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800359a:	4b80      	ldr	r3, [pc, #512]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	4a7f      	ldr	r2, [pc, #508]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 80035a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035a4:	6613      	str	r3, [r2, #96]	; 0x60
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 80035a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80035b2:	e0ed      	b.n	8003790 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a79      	ldr	r2, [pc, #484]	; (80037a0 <HAL_TIM_PWM_MspInit+0x218>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f040 809a 	bne.w	80036f4 <HAL_TIM_PWM_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035c0:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	6593      	str	r3, [r2, #88]	; 0x58
 80035cc:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80035d8:	4b72      	ldr	r3, [pc, #456]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 80035da:	4a73      	ldr	r2, [pc, #460]	; (80037a8 <HAL_TIM_PWM_MspInit+0x220>)
 80035dc:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80035de:	4b71      	ldr	r3, [pc, #452]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 80035e0:	2205      	movs	r2, #5
 80035e2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 80035e6:	2210      	movs	r2, #16
 80035e8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ea:	4b6e      	ldr	r3, [pc, #440]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80035f0:	4b6c      	ldr	r3, [pc, #432]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035f6:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 80035f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035fe:	4b69      	ldr	r3, [pc, #420]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003604:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003608:	2200      	movs	r2, #0
 800360a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800360c:	4b65      	ldr	r3, [pc, #404]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 800360e:	2200      	movs	r2, #0
 8003610:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003612:	4864      	ldr	r0, [pc, #400]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003614:	f002 f918 	bl	8005848 <HAL_DMA_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_TIM_PWM_MspInit+0x9a>
      Error_Handler();
 800361e:	f7ff f8bf 	bl	80027a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a5f      	ldr	r2, [pc, #380]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
 8003628:	4a5e      	ldr	r2, [pc, #376]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a5c      	ldr	r2, [pc, #368]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
 8003634:	4a5b      	ldr	r2, [pc, #364]	; (80037a4 <HAL_TIM_PWM_MspInit+0x21c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800363a:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 800363c:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_TIM_PWM_MspInit+0x228>)
 800363e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 8003640:	4b5a      	ldr	r3, [pc, #360]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 8003642:	2205      	movs	r2, #5
 8003644:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003646:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 8003648:	2210      	movs	r2, #16
 800364a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800364c:	4b57      	ldr	r3, [pc, #348]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 800364e:	2200      	movs	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003652:	4b56      	ldr	r3, [pc, #344]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003658:	4b54      	ldr	r3, [pc, #336]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 800365a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800365e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003660:	4b52      	ldr	r3, [pc, #328]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 8003662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003666:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8003668:	4b50      	ldr	r3, [pc, #320]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800366e:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003674:	484d      	ldr	r0, [pc, #308]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 8003676:	f002 f8e7 	bl	8005848 <HAL_DMA_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_TIM_PWM_MspInit+0xfc>
      Error_Handler();
 8003680:	f7ff f88e 	bl	80027a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a49      	ldr	r2, [pc, #292]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
 800368a:	4a48      	ldr	r2, [pc, #288]	; (80037ac <HAL_TIM_PWM_MspInit+0x224>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8003690:	4b48      	ldr	r3, [pc, #288]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 8003692:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <HAL_TIM_PWM_MspInit+0x230>)
 8003694:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 8003698:	2205      	movs	r2, #5
 800369a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800369c:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 800369e:	2210      	movs	r2, #16
 80036a0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a2:	4b44      	ldr	r3, [pc, #272]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80036a8:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036b6:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036bc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80036be:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80036c4:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80036ca:	483a      	ldr	r0, [pc, #232]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036cc:	f002 f8bc 	bl	8005848 <HAL_DMA_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_TIM_PWM_MspInit+0x152>
      Error_Handler();
 80036d6:	f7ff f863 	bl	80027a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a35      	ldr	r2, [pc, #212]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
 80036e0:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036ea:	621a      	str	r2, [r3, #32]
 80036ec:	4a31      	ldr	r2, [pc, #196]	; (80037b4 <HAL_TIM_PWM_MspInit+0x22c>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80036f2:	e04d      	b.n	8003790 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM8)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a30      	ldr	r2, [pc, #192]	; (80037bc <HAL_TIM_PWM_MspInit+0x234>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d137      	bne.n	800376e <HAL_TIM_PWM_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036fe:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 8003704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003708:	6613      	str	r3, [r2, #96]	; 0x60
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Channel7;
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003718:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <HAL_TIM_PWM_MspInit+0x23c>)
 800371a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_7;
 800371c:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 800371e:	2207      	movs	r2, #7
 8003720:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003724:	2210      	movs	r2, #16
 8003726:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800372e:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003730:	2280      	movs	r2, #128	; 0x80
 8003732:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800373a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 800373e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003742:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003746:	2200      	movs	r2, #0
 8003748:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 800374c:	2200      	movs	r2, #0
 800374e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8003750:	481b      	ldr	r0, [pc, #108]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003752:	f002 f879 	bl	8005848 <HAL_DMA_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_TIM_PWM_MspInit+0x1d8>
      Error_Handler();
 800375c:	f7ff f820 	bl	80027a0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
 8003766:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIM_PWM_MspInit+0x238>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800376c:	e010      	b.n	8003790 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM15)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_TIM_PWM_MspInit+0x240>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10b      	bne.n	8003790 <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6613      	str	r3, [r2, #96]	; 0x60
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_TIM_PWM_MspInit+0x214>)
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
}
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40021000 	.word	0x40021000
 80037a0:	40000400 	.word	0x40000400
 80037a4:	2000513c 	.word	0x2000513c
 80037a8:	4002006c 	.word	0x4002006c
 80037ac:	20004f94 	.word	0x20004f94
 80037b0:	4002001c 	.word	0x4002001c
 80037b4:	2000d278 	.word	0x2000d278
 80037b8:	40020030 	.word	0x40020030
 80037bc:	40013400 	.word	0x40013400
 80037c0:	20003654 	.word	0x20003654
 80037c4:	40020480 	.word	0x40020480
 80037c8:	40014000 	.word	0x40014000

080037cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_TIM_Base_MspInit+0x5c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10c      	bne.n	80037f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <HAL_TIM_Base_MspInit+0x60>)
 80037e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e2:	4a12      	ldr	r2, [pc, #72]	; (800382c <HAL_TIM_Base_MspInit+0x60>)
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	6613      	str	r3, [r2, #96]	; 0x60
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_TIM_Base_MspInit+0x60>)
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80037f6:	e010      	b.n	800381a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0c      	ldr	r2, [pc, #48]	; (8003830 <HAL_TIM_Base_MspInit+0x64>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10b      	bne.n	800381a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_TIM_Base_MspInit+0x60>)
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_TIM_Base_MspInit+0x60>)
 8003808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380c:	6613      	str	r3, [r2, #96]	; 0x60
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_TIM_Base_MspInit+0x60>)
 8003810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40014400 	.word	0x40014400
 800382c:	40021000 	.word	0x40021000
 8003830:	40014800 	.word	0x40014800

08003834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a76      	ldr	r2, [pc, #472]	; (8003a2c <HAL_TIM_MspPostInit+0x1f8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d11e      	bne.n	8003894 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003862:	4b73      	ldr	r3, [pc, #460]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800386e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003880:	2301      	movs	r3, #1
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003888:	4619      	mov	r1, r3
 800388a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388e:	f002 fa13 	bl	8005cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003892:	e0c7      	b.n	8003a24 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a66      	ldr	r2, [pc, #408]	; (8003a34 <HAL_TIM_MspPostInit+0x200>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d138      	bne.n	8003910 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	4b64      	ldr	r3, [pc, #400]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	4a63      	ldr	r2, [pc, #396]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038aa:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b6:	4b5e      	ldr	r3, [pc, #376]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	4a5d      	ldr	r2, [pc, #372]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c2:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038ce:	2303      	movs	r3, #3
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	2300      	movs	r3, #0
 80038dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038de:	2302      	movs	r3, #2
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e6:	4619      	mov	r1, r3
 80038e8:	4853      	ldr	r0, [pc, #332]	; (8003a38 <HAL_TIM_MspPostInit+0x204>)
 80038ea:	f002 f9e5 	bl	8005cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038ee:	2340      	movs	r3, #64	; 0x40
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	2302      	movs	r3, #2
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fa:	2300      	movs	r3, #0
 80038fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038fe:	2302      	movs	r3, #2
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003906:	4619      	mov	r1, r3
 8003908:	484c      	ldr	r0, [pc, #304]	; (8003a3c <HAL_TIM_MspPostInit+0x208>)
 800390a:	f002 f9d5 	bl	8005cb8 <HAL_GPIO_Init>
}
 800390e:	e089      	b.n	8003a24 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM8)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a4a      	ldr	r2, [pc, #296]	; (8003a40 <HAL_TIM_MspPostInit+0x20c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d11c      	bne.n	8003954 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800391a:	4b45      	ldr	r3, [pc, #276]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391e:	4a44      	ldr	r2, [pc, #272]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003926:	4b42      	ldr	r3, [pc, #264]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	2300      	movs	r3, #0
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003942:	2303      	movs	r3, #3
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394a:	4619      	mov	r1, r3
 800394c:	483b      	ldr	r0, [pc, #236]	; (8003a3c <HAL_TIM_MspPostInit+0x208>)
 800394e:	f002 f9b3 	bl	8005cb8 <HAL_GPIO_Init>
}
 8003952:	e067      	b.n	8003a24 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM15)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_TIM_MspPostInit+0x210>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d11d      	bne.n	800399a <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800395e:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4a33      	ldr	r2, [pc, #204]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003984:	2300      	movs	r3, #0
 8003986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003988:	230e      	movs	r3, #14
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003990:	4619      	mov	r1, r3
 8003992:	4829      	ldr	r0, [pc, #164]	; (8003a38 <HAL_TIM_MspPostInit+0x204>)
 8003994:	f002 f990 	bl	8005cb8 <HAL_GPIO_Init>
}
 8003998:	e044      	b.n	8003a24 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM16)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <HAL_TIM_MspPostInit+0x214>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d11d      	bne.n	80039e0 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a4:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80039b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039bc:	2340      	movs	r3, #64	; 0x40
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c8:	2300      	movs	r3, #0
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80039cc:	230e      	movs	r3, #14
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d4:	4619      	mov	r1, r3
 80039d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039da:	f002 f96d 	bl	8005cb8 <HAL_GPIO_Init>
}
 80039de:	e021      	b.n	8003a24 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM17)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_TIM_MspPostInit+0x218>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d11c      	bne.n	8003a24 <HAL_TIM_MspPostInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_TIM_MspPostInit+0x1fc>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8003a12:	230e      	movs	r3, #14
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a20:	f002 f94a 	bl	8005cb8 <HAL_GPIO_Init>
}
 8003a24:	bf00      	nop
 8003a26:	3738      	adds	r7, #56	; 0x38
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	48000400 	.word	0x48000400
 8003a3c:	48000800 	.word	0x48000800
 8003a40:	40013400 	.word	0x40013400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800

08003a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a17      	ldr	r2, [pc, #92]	; (8003acc <HAL_UART_MspInit+0x7c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d128      	bne.n	8003ac4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <HAL_UART_MspInit+0x80>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	4a16      	ldr	r2, [pc, #88]	; (8003ad0 <HAL_UART_MspInit+0x80>)
 8003a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <HAL_UART_MspInit+0x80>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_UART_MspInit+0x80>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <HAL_UART_MspInit+0x80>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <HAL_UART_MspInit+0x80>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003aa2:	230c      	movs	r3, #12
 8003aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ab2:	2307      	movs	r3, #7
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	f107 0314 	add.w	r3, r7, #20
 8003aba:	4619      	mov	r1, r3
 8003abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ac0:	f002 f8fa 	bl	8005cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ac4:	bf00      	nop
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40021000 	.word	0x40021000

08003ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08c      	sub	sp, #48	; 0x30
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	2036      	movs	r0, #54	; 0x36
 8003aea:	f001 fe83 	bl	80057f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003aee:	2036      	movs	r0, #54	; 0x36
 8003af0:	f001 fe9c 	bl	800582c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_InitTick+0x9c>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_InitTick+0x9c>)
 8003afa:	f043 0310 	orr.w	r3, r3, #16
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_InitTick+0x9c>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b0c:	f107 0210 	add.w	r2, r7, #16
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 f9a4 	bl	8006e64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f003 f976 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 8003b20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <HAL_InitTick+0xa0>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0c9b      	lsrs	r3, r3, #18
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_InitTick+0xa4>)
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <HAL_InitTick+0xa8>)
 8003b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <HAL_InitTick+0xa4>)
 8003b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <HAL_InitTick+0xa4>)
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <HAL_InitTick+0xa4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_InitTick+0xa4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003b50:	4809      	ldr	r0, [pc, #36]	; (8003b78 <HAL_InitTick+0xa4>)
 8003b52:	f004 fc59 	bl	8008408 <HAL_TIM_Base_Init>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003b5c:	4806      	ldr	r0, [pc, #24]	; (8003b78 <HAL_InitTick+0xa4>)
 8003b5e:	f004 fcab 	bl	80084b8 <HAL_TIM_Base_Start_IT>
 8003b62:	4603      	mov	r3, r0
 8003b64:	e000      	b.n	8003b68 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3730      	adds	r7, #48	; 0x30
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	431bde83 	.word	0x431bde83
 8003b78:	2000e440 	.word	0x2000e440
 8003b7c:	40001000 	.word	0x40001000

08003b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <NMI_Handler+0x4>

08003b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8a:	e7fe      	b.n	8003b8a <HardFault_Handler+0x4>

08003b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b90:	e7fe      	b.n	8003b90 <MemManage_Handler+0x4>

08003b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b96:	e7fe      	b.n	8003b96 <BusFault_Handler+0x4>

08003b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b9c:	e7fe      	b.n	8003b9c <UsageFault_Handler+0x4>

08003b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <DMA1_Channel1_IRQHandler+0x10>)
 8003bb2:	f001 ffa2 	bl	8005afa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200050f4 	.word	0x200050f4

08003bc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <DMA1_Channel2_IRQHandler+0x10>)
 8003bc6:	f001 ff98 	bl	8005afa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20004f94 	.word	0x20004f94

08003bd4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <DMA1_Channel3_IRQHandler+0x10>)
 8003bda:	f001 ff8e 	bl	8005afa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	2000d278 	.word	0x2000d278

08003be8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <DMA1_Channel6_IRQHandler+0x10>)
 8003bee:	f001 ff84 	bl	8005afa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2000513c 	.word	0x2000513c

08003bfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <TIM6_DAC_IRQHandler+0x38>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <TIM6_DAC_IRQHandler+0x38>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <TIM6_DAC_IRQHandler+0x38>)
 8003c12:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <TIM6_DAC_IRQHandler+0x3c>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <TIM6_DAC_IRQHandler+0x3c>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <TIM6_DAC_IRQHandler+0x3c>)
 8003c26:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c28:	4804      	ldr	r0, [pc, #16]	; (8003c3c <TIM6_DAC_IRQHandler+0x40>)
 8003c2a:	f005 fa3d 	bl	80090a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	2000364e 	.word	0x2000364e
 8003c38:	2000364c 	.word	0x2000364c
 8003c3c:	2000e440 	.word	0x2000e440

08003c40 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003c44:	4802      	ldr	r0, [pc, #8]	; (8003c50 <DMA2_Channel7_IRQHandler+0x10>)
 8003c46:	f001 ff58 	bl	8005afa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20003654 	.word	0x20003654

08003c54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e00a      	b.n	8003c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c66:	f3af 8000 	nop.w
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	60ba      	str	r2, [r7, #8]
 8003c72:	b2ca      	uxtb	r2, r1
 8003c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	dbf0      	blt.n	8003c66 <_read+0x12>
	}

return len;
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e009      	b.n	8003cb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	60ba      	str	r2, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd fe1d 	bl	80018e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbf1      	blt.n	8003ca0 <_write+0x12>
	}
	return len;
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <_close>:

int _close(int file)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cee:	605a      	str	r2, [r3, #4]
	return 0;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_isatty>:

int _isatty(int file)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
	return 1;
 8003d06:	2301      	movs	r3, #1
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <_sbrk+0x5c>)
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <_sbrk+0x60>)
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <_sbrk+0x64>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <_sbrk+0x64>)
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <_sbrk+0x68>)
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <_sbrk+0x64>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d207      	bcs.n	8003d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d60:	f00d fe84 	bl	8011a6c <__errno>
 8003d64:	4603      	mov	r3, r0
 8003d66:	220c      	movs	r2, #12
 8003d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d6e:	e009      	b.n	8003d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <_sbrk+0x64>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <_sbrk+0x64>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <_sbrk+0x64>)
 8003d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20018000 	.word	0x20018000
 8003d90:	00000400 	.word	0x00000400
 8003d94:	200001e8 	.word	0x200001e8
 8003d98:	20010558 	.word	0x20010558

08003d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <SystemInit+0x5c>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <SystemInit+0x5c>)
 8003da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <SystemInit+0x60>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <SystemInit+0x60>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <SystemInit+0x60>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <SystemInit+0x60>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <SystemInit+0x60>)
 8003dc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003dcc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <SystemInit+0x60>)
 8003dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <SystemInit+0x60>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <SystemInit+0x60>)
 8003de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <SystemInit+0x60>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	619a      	str	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	e000ed00 	.word	0xe000ed00
 8003dfc:	40021000 	.word	0x40021000

08003e00 <HAL_TIM_PWM_PulseFinishedCallback>:
extern TIM_HandleTypeDef htim3;

volatile uint8_t ucDataSentFlag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8003e10:	2100      	movs	r1, #0
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f005 f858 	bl	8008ec8 <HAL_TIM_PWM_Stop_DMA>
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20004fdc 	.word	0x20004fdc

08003e24 <WS2812B_vInit>:
		DMA_HandleTypeDef *pxDMA1Channel1,
		DMA_HandleTypeDef *pxDMA1Channel2,
		DMA_HandleTypeDef *pxDMA1Channel3,
		DMA_HandleTypeDef *pxDMA2Channel1
	)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
	pxWS28182B->pxTimer1 = pxTimer1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	601a      	str	r2, [r3, #0]
	pxWS28182B->pxTimer2 = pxTimer2;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	605a      	str	r2, [r3, #4]
	pxWS28182B->pxTimer1->Instance->ARR = WS2812B_ARR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2264      	movs	r2, #100	; 0x64
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c
	pxWS28182B->pxTimer2->Instance->ARR = WS2812B_ARR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2264      	movs	r2, #100	; 0x64
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c

	pxWS28182B->pxDMA1Channel1 = pxDMA1Channel1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	609a      	str	r2, [r3, #8]
	pxWS28182B->pxDMA1Channel2 = pxDMA1Channel2;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	60da      	str	r2, [r3, #12]
	pxWS28182B->pxDMA1Channel3 = pxDMA1Channel3;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	611a      	str	r2, [r3, #16]
	pxWS28182B->pxDMA2Channel1 = pxDMA2Channel1;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a3a      	ldr	r2, [r7, #32]
 8003e68:	615a      	str	r2, [r3, #20]
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <WS2812B_vSetLED>:



void WS2812B_vSetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex, uint8_t ucRed, uint8_t ucGreen, uint8_t ucBlue)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	4608      	mov	r0, r1
 8003e80:	4611      	mov	r1, r2
 8003e82:	461a      	mov	r2, r3
 8003e84:	4603      	mov	r3, r0
 8003e86:	70fb      	strb	r3, [r7, #3]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70bb      	strb	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	711a      	strb	r2, [r3, #4]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = ucGreen;
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	787a      	ldrb	r2, [r7, #1]
 8003eae:	715a      	strb	r2, [r3, #5]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = ucRed;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	78ba      	ldrb	r2, [r7, #2]
 8003ebe:	719a      	strb	r2, [r3, #6]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = ucBlue;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	7c3a      	ldrb	r2, [r7, #16]
 8003ece:	71da      	strb	r2, [r3, #7]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <WS2812B_vResetLED>:


void WS2812B_vResetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	711a      	strb	r2, [r3, #4]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = 0;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	2200      	movs	r2, #0
 8003f06:	715a      	strb	r2, [r3, #5]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = 0;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	2200      	movs	r2, #0
 8003f16:	719a      	strb	r2, [r3, #6]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = 0;
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	2200      	movs	r2, #0
 8003f26:	71da      	strb	r2, [r3, #7]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <WS2812B_vResetLEDs>:


void WS2812B_vResetLEDs(WS2812BHandle_t *pxWS28182B)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	// [!] faster way to reset with memclr
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e00a      	b.n	8003f58 <WS2812B_vResetLEDs+0x24>
	{
		WS2812B_vResetLED(pxWS28182B, i);
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ffc8 	bl	8003edc <WS2812B_vResetLED>
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5c:	2b1f      	cmp	r3, #31
 8003f5e:	ddf0      	ble.n	8003f42 <WS2812B_vResetLEDs+0xe>
	}
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	0000      	movs	r0, r0
 8003f6c:	0000      	movs	r0, r0
	...

08003f70 <WS2812B_vSetBrightness>:


// Credits to Controllers Tech
void WS2812B_vSetBrightness(WS2812BHandle_t *pxWS28182B, int brightness)
{
 8003f70:	b5b0      	push	{r4, r5, r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b2d      	cmp	r3, #45	; 0x2d
 8003f7e:	dd01      	ble.n	8003f84 <WS2812B_vSetBrightness+0x14>
 8003f80:	232d      	movs	r3, #45	; 0x2d
 8003f82:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < LED_COUNT; i++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e0b4      	b.n	80040f4 <WS2812B_vSetBrightness+0x184>
	{
		pxWS28182B->pxLEDBrightness[i].ucIndex = pxWS28182B->pxLEDData[i].ucIndex;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	7919      	ldrb	r1, [r3, #4]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	711a      	strb	r2, [r3, #4]

		float angle = 90 - brightness;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb6:	edc7 7a02 	vstr	s15, [r7, #8]
		angle = angle*M_PI / 180;
 8003fba:	68b8      	ldr	r0, [r7, #8]
 8003fbc:	f7fc fac4 	bl	8000548 <__aeabi_f2d>
 8003fc0:	a352      	add	r3, pc, #328	; (adr r3, 800410c <WS2812B_vSetBrightness+0x19c>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	f7fc fb17 	bl	80005f8 <__aeabi_dmul>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <WS2812B_vSetBrightness+0x198>)
 8003fd8:	f7fc fc38 	bl	800084c <__aeabi_ddiv>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc fdea 	bl	8000bbc <__aeabi_d2f>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60bb      	str	r3, [r7, #8]
		pxWS28182B->pxLEDBrightness[i].ucGreen = (pxWS28182B->pxLEDData[i].ucGreen)/(tan(angle));
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	795b      	ldrb	r3, [r3, #5]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc fa92 	bl	8000524 <__aeabi_i2d>
 8004000:	4604      	mov	r4, r0
 8004002:	460d      	mov	r5, r1
 8004004:	68b8      	ldr	r0, [r7, #8]
 8004006:	f7fc fa9f 	bl	8000548 <__aeabi_f2d>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	ec43 2b10 	vmov	d0, r2, r3
 8004012:	f00e fd39 	bl	8012a88 <tan>
 8004016:	ec53 2b10 	vmov	r2, r3, d0
 800401a:	4620      	mov	r0, r4
 800401c:	4629      	mov	r1, r5
 800401e:	f7fc fc15 	bl	800084c <__aeabi_ddiv>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7fc fda7 	bl	8000b7c <__aeabi_d2uiz>
 800402e:	4603      	mov	r3, r0
 8004030:	b2d9      	uxtb	r1, r3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	460a      	mov	r2, r1
 8004040:	715a      	strb	r2, [r3, #5]
		pxWS28182B->pxLEDBrightness[i].ucRed = (pxWS28182B->pxLEDData[i].ucRed)/(tan(angle));
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	799b      	ldrb	r3, [r3, #6]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fa67 	bl	8000524 <__aeabi_i2d>
 8004056:	4604      	mov	r4, r0
 8004058:	460d      	mov	r5, r1
 800405a:	68b8      	ldr	r0, [r7, #8]
 800405c:	f7fc fa74 	bl	8000548 <__aeabi_f2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	ec43 2b10 	vmov	d0, r2, r3
 8004068:	f00e fd0e 	bl	8012a88 <tan>
 800406c:	ec53 2b10 	vmov	r2, r3, d0
 8004070:	4620      	mov	r0, r4
 8004072:	4629      	mov	r1, r5
 8004074:	f7fc fbea 	bl	800084c <__aeabi_ddiv>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	f7fc fd7c 	bl	8000b7c <__aeabi_d2uiz>
 8004084:	4603      	mov	r3, r0
 8004086:	b2d9      	uxtb	r1, r3
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	460a      	mov	r2, r1
 8004096:	719a      	strb	r2, [r3, #6]
		pxWS28182B->pxLEDBrightness[i].ucBlue = (pxWS28182B->pxLEDData[i].ucBlue)/(tan(angle));
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f503 73cf 	add.w	r3, r3, #414	; 0x19e
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	79db      	ldrb	r3, [r3, #7]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fa3c 	bl	8000524 <__aeabi_i2d>
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	68b8      	ldr	r0, [r7, #8]
 80040b2:	f7fc fa49 	bl	8000548 <__aeabi_f2d>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	ec43 2b10 	vmov	d0, r2, r3
 80040be:	f00e fce3 	bl	8012a88 <tan>
 80040c2:	ec53 2b10 	vmov	r2, r3, d0
 80040c6:	4620      	mov	r0, r4
 80040c8:	4629      	mov	r1, r5
 80040ca:	f7fc fbbf 	bl	800084c <__aeabi_ddiv>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	f7fc fd51 	bl	8000b7c <__aeabi_d2uiz>
 80040da:	4603      	mov	r3, r0
 80040dc:	b2d9      	uxtb	r1, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	460a      	mov	r2, r1
 80040ec:	71da      	strb	r2, [r3, #7]
	for (int i = 0; i < LED_COUNT; i++)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3301      	adds	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b1f      	cmp	r3, #31
 80040f8:	f77f af47 	ble.w	8003f8a <WS2812B_vSetBrightness+0x1a>
	}
#endif
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bdb0      	pop	{r4, r5, r7, pc}
 8004106:	bf00      	nop
 8004108:	40668000 	.word	0x40668000
 800410c:	54442d18 	.word	0x54442d18
 8004110:	400921fb 	.word	0x400921fb

08004114 <WS2812B_vSend>:




void WS2812B_vSend(WS2812BHandle_t *pxWS28182B)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
	uint32_t color;

	for (int i = 0; i < LED_COUNT; i++)
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e03e      	b.n	80041a4 <WS2812B_vSend+0x90>
	{
		color = ((pxWS28182B->pxLEDBrightness[i].ucGreen<<16) | (pxWS28182B->pxLEDBrightness[i].ucRed<<8) | (pxWS28182B->pxLEDBrightness[i].ucBlue));
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	795b      	ldrb	r3, [r3, #5]
 8004134:	041a      	lsls	r2, r3, #16
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	799b      	ldrb	r3, [r3, #6]
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	431a      	orrs	r2, r3
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	79db      	ldrb	r3, [r3, #7]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--)
 800415a:	2317      	movs	r3, #23
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e01b      	b.n	8004198 <WS2812B_vSend+0x84>
		{
			if (color & (1 << i))
 8004160:	2201      	movs	r2, #1
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	461a      	mov	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <WS2812B_vSend+0x6c>
			{
				pxWS28182B->pwmData[indx] = WS2812B_T1H_TICKS;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	320c      	adds	r2, #12
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800417e:	e005      	b.n	800418c <WS2812B_vSend+0x78>
			}
			else
			{
				pxWS28182B->pwmData[indx] = WS2812B_T0H_TICKS;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	320c      	adds	r2, #12
 8004186:	2120      	movs	r1, #32
 8004188:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			indx++;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	3301      	adds	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	3b01      	subs	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	dae0      	bge.n	8004160 <WS2812B_vSend+0x4c>
	for (int i = 0; i < LED_COUNT; i++)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	3301      	adds	r3, #1
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b1f      	cmp	r3, #31
 80041a8:	ddbd      	ble.n	8004126 <WS2812B_vSend+0x12>
		}
	}

	for (int i = 0; i < 50; i++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	e00b      	b.n	80041c8 <WS2812B_vSend+0xb4>
	{
		pxWS28182B->pwmData[indx] = 0;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	320c      	adds	r2, #12
 80041b6:	2100      	movs	r1, #0
 80041b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3301      	adds	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 50; i++)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3301      	adds	r3, #1
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b31      	cmp	r3, #49	; 0x31
 80041cc:	ddf0      	ble.n	80041b0 <WS2812B_vSend+0x9c>
	}

	HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_1, (uint32_t *)pxWS28182B->pwmData, indx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f103 0218 	add.w	r2, r3, #24
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2100      	movs	r1, #0
 80041de:	f004 fc5b 	bl	8008a98 <HAL_TIM_PWM_Start_DMA>
	// [!] semaphore wait or osdelay
	//while (!ucDataSentFlag) {};
	ucDataSentFlag = 0;
 80041e2:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <WS2812B_vSend+0xdc>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200001ec 	.word	0x200001ec

080041f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80041f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800422c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80041f8:	f7ff fdd0 	bl	8003d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80041fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80041fe:	e003      	b.n	8004208 <LoopCopyDataInit>

08004200 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004202:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004204:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004206:	3104      	adds	r1, #4

08004208 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004208:	480a      	ldr	r0, [pc, #40]	; (8004234 <LoopForever+0xa>)
	ldr	r3, =_edata
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <LoopForever+0xe>)
	adds	r2, r0, r1
 800420c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800420e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004210:	d3f6      	bcc.n	8004200 <CopyDataInit>
	ldr	r2, =_sbss
 8004212:	4a0a      	ldr	r2, [pc, #40]	; (800423c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004214:	e002      	b.n	800421c <LoopFillZerobss>

08004216 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004216:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004218:	f842 3b04 	str.w	r3, [r2], #4

0800421c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <LoopForever+0x16>)
	cmp	r2, r3
 800421e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004220:	d3f9      	bcc.n	8004216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004222:	f00d fc29 	bl	8011a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004226:	f7fd fb87 	bl	8001938 <main>

0800422a <LoopForever>:

LoopForever:
    b LoopForever
 800422a:	e7fe      	b.n	800422a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800422c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004230:	08014658 	.word	0x08014658
	ldr	r0, =_sdata
 8004234:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004238:	200001c4 	.word	0x200001c4
	ldr	r2, =_sbss
 800423c:	200001c4 	.word	0x200001c4
	ldr	r3, = _ebss
 8004240:	20010554 	.word	0x20010554

08004244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004244:	e7fe      	b.n	8004244 <ADC1_2_IRQHandler>
	...

08004248 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_Init+0x3c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0b      	ldr	r2, [pc, #44]	; (8004284 <HAL_Init+0x3c>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800425e:	2003      	movs	r0, #3
 8004260:	f001 fabd 	bl	80057de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004264:	2000      	movs	r0, #0
 8004266:	f7ff fc35 	bl	8003ad4 <HAL_InitTick>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	71fb      	strb	r3, [r7, #7]
 8004274:	e001      	b.n	800427a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004276:	f7ff f84d 	bl	8003314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800427a:	79fb      	ldrb	r3, [r7, #7]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40022000 	.word	0x40022000

08004288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_IncTick+0x20>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_IncTick+0x24>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4413      	add	r3, r2
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <HAL_IncTick+0x24>)
 800429a:	6013      	str	r3, [r2, #0]
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000144 	.word	0x20000144
 80042ac:	2000e48c 	.word	0x2000e48c

080042b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return uwTick;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_GetTick+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000e48c 	.word	0x2000e48c

080042c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042d0:	f7ff ffee 	bl	80042b0 <HAL_GetTick>
 80042d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e0:	d005      	beq.n	80042ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_Delay+0x44>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ee:	bf00      	nop
 80042f0:	f7ff ffde 	bl	80042b0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d8f7      	bhi.n	80042f0 <HAL_Delay+0x28>
  {
  }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000144 	.word	0x20000144

08004310 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3360      	adds	r3, #96	; 0x60
 800438a:	461a      	mov	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <LL_ADC_SetOffset+0x44>)
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	03fff000 	.word	0x03fff000

080043c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3360      	adds	r3, #96	; 0x60
 80043ce:	461a      	mov	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3360      	adds	r3, #96	; 0x60
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	431a      	orrs	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3330      	adds	r3, #48	; 0x30
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	4413      	add	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	211f      	movs	r1, #31
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	401a      	ands	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	0e9b      	lsrs	r3, r3, #26
 8004480:	f003 011f 	and.w	r1, r3, #31
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	431a      	orrs	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3314      	adds	r3, #20
 80044b0:	461a      	mov	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	0e5b      	lsrs	r3, r3, #25
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	4413      	add	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	0d1b      	lsrs	r3, r3, #20
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	2107      	movs	r1, #7
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	401a      	ands	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0d1b      	lsrs	r3, r3, #20
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	431a      	orrs	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004510:	43db      	mvns	r3, r3
 8004512:	401a      	ands	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0318 	and.w	r3, r3, #24
 800451a:	4908      	ldr	r1, [pc, #32]	; (800453c <LL_ADC_SetChannelSingleDiff+0x44>)
 800451c:	40d9      	lsrs	r1, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	400b      	ands	r3, r1
 8004522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004526:	431a      	orrs	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	0007ffff 	.word	0x0007ffff

08004540 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 031f 	and.w	r3, r3, #31
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800456c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6093      	str	r3, [r2, #8]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004594:	d101      	bne.n	800459a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80045b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045e4:	d101      	bne.n	80045ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800460c:	f043 0201 	orr.w	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <LL_ADC_IsEnabled+0x18>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <LL_ADC_IsEnabled+0x1a>
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004656:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800465a:	f043 0204 	orr.w	r2, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b04      	cmp	r3, #4
 8004680:	d101      	bne.n	8004686 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d101      	bne.n	80046ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e136      	b.n	8004944 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fe fe3d 	bl	8003364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff3f 	bl	8004580 <LL_ADC_IsDeepPowerDownEnabled>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff25 	bl	800455c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff5a 	bl	80045d0 <LL_ADC_IsInternalRegulatorEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d115      	bne.n	800474e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ff3e 	bl	80045a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800472c:	4b87      	ldr	r3, [pc, #540]	; (800494c <HAL_ADC_Init+0x290>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	4a87      	ldr	r2, [pc, #540]	; (8004950 <HAL_ADC_Init+0x294>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	099b      	lsrs	r3, r3, #6
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004740:	e002      	b.n	8004748 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3b01      	subs	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f9      	bne.n	8004742 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff3c 	bl	80045d0 <LL_ADC_IsInternalRegulatorEnabled>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10d      	bne.n	800477a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f043 0210 	orr.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff ff75 	bl	800466e <LL_ADC_REG_IsConversionOngoing>
 8004784:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 80cf 	bne.w	8004932 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 80cb 	bne.w	8004932 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80047a4:	f043 0202 	orr.w	r2, r3, #2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff35 	bl	8004620 <LL_ADC_IsEnabled>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d115      	bne.n	80047e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047bc:	4865      	ldr	r0, [pc, #404]	; (8004954 <HAL_ADC_Init+0x298>)
 80047be:	f7ff ff2f 	bl	8004620 <LL_ADC_IsEnabled>
 80047c2:	4604      	mov	r4, r0
 80047c4:	4864      	ldr	r0, [pc, #400]	; (8004958 <HAL_ADC_Init+0x29c>)
 80047c6:	f7ff ff2b 	bl	8004620 <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	431c      	orrs	r4, r3
 80047ce:	4863      	ldr	r0, [pc, #396]	; (800495c <HAL_ADC_Init+0x2a0>)
 80047d0:	f7ff ff26 	bl	8004620 <LL_ADC_IsEnabled>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4323      	orrs	r3, r4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4619      	mov	r1, r3
 80047e2:	485f      	ldr	r0, [pc, #380]	; (8004960 <HAL_ADC_Init+0x2a4>)
 80047e4:	f7ff fd94 	bl	8004310 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7e5b      	ldrb	r3, [r3, #25]
 80047ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80047f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80047fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004806:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d106      	bne.n	8004824 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	3b01      	subs	r3, #1
 800481c:	045b      	lsls	r3, r3, #17
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	d009      	beq.n	8004840 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_ADC_Init+0x2a8>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	69b9      	ldr	r1, [r7, #24]
 8004850:	430b      	orrs	r3, r1
 8004852:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff08 	bl	800466e <LL_ADC_REG_IsConversionOngoing>
 800485e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ff15 	bl	8004694 <LL_ADC_INJ_IsConversionOngoing>
 800486a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d13d      	bne.n	80048ee <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d13a      	bne.n	80048ee <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800487c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004884:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004894:	f023 0302 	bic.w	r3, r3, #2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	430b      	orrs	r3, r1
 80048a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d118      	bne.n	80048de <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048b6:	f023 0304 	bic.w	r3, r3, #4
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048ce:	430a      	orrs	r2, r1
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	611a      	str	r2, [r3, #16]
 80048dc:	e007      	b.n	80048ee <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10c      	bne.n	8004910 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f023 010f 	bic.w	r1, r3, #15
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	1e5a      	subs	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
 800490e:	e007      	b.n	8004920 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 020f 	bic.w	r2, r2, #15
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	f023 0303 	bic.w	r3, r3, #3
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
 8004930:	e007      	b.n	8004942 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f043 0210 	orr.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004942:	7ffb      	ldrb	r3, [r7, #31]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3724      	adds	r7, #36	; 0x24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}
 800494c:	2000013c 	.word	0x2000013c
 8004950:	053e2d63 	.word	0x053e2d63
 8004954:	50040000 	.word	0x50040000
 8004958:	50040100 	.word	0x50040100
 800495c:	50040200 	.word	0x50040200
 8004960:	50040300 	.word	0x50040300
 8004964:	fff0c007 	.word	0xfff0c007

08004968 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004974:	4850      	ldr	r0, [pc, #320]	; (8004ab8 <HAL_ADC_Start_DMA+0x150>)
 8004976:	f7ff fde3 	bl	8004540 <LL_ADC_GetMultimode>
 800497a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fe74 	bl	800466e <LL_ADC_REG_IsConversionOngoing>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	f040 808e 	bne.w	8004aaa <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_ADC_Start_DMA+0x34>
 8004998:	2302      	movs	r3, #2
 800499a:	e089      	b.n	8004ab0 <HAL_ADC_Start_DMA+0x148>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d002      	beq.n	80049b6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b09      	cmp	r3, #9
 80049b4:	d172      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fc98 	bl	80052ec <ADC_Enable>
 80049bc:	4603      	mov	r3, r0
 80049be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d165      	bne.n	8004a92 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a37      	ldr	r2, [pc, #220]	; (8004abc <HAL_ADC_Start_DMA+0x154>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d002      	beq.n	80049ea <HAL_ADC_Start_DMA+0x82>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	e000      	b.n	80049ec <HAL_ADC_Start_DMA+0x84>
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_ADC_Start_DMA+0x158>)
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d002      	beq.n	80049fa <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d105      	bne.n	8004a06 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f023 0206 	bic.w	r2, r3, #6
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a1e:	e002      	b.n	8004a26 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2a:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <HAL_ADC_Start_DMA+0x15c>)
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <HAL_ADC_Start_DMA+0x160>)
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	4a24      	ldr	r2, [pc, #144]	; (8004acc <HAL_ADC_Start_DMA+0x164>)
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	221c      	movs	r2, #28
 8004a44:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0210 	orr.w	r2, r2, #16
 8004a5c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0201 	orr.w	r2, r2, #1
 8004a6c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3340      	adds	r3, #64	; 0x40
 8004a78:	4619      	mov	r1, r3
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f000 ff9b 	bl	80059b8 <HAL_DMA_Start_IT>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fddb 	bl	8004646 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a90:	e00d      	b.n	8004aae <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004a9a:	e008      	b.n	8004aae <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004aa8:	e001      	b.n	8004aae <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	50040300 	.word	0x50040300
 8004abc:	50040100 	.word	0x50040100
 8004ac0:	50040000 	.word	0x50040000
 8004ac4:	080053b1 	.word	0x080053b1
 8004ac8:	08005489 	.word	0x08005489
 8004acc:	080054a5 	.word	0x080054a5

08004ad0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b0b6      	sub	sp, #216	; 0xd8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x22>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e3c7      	b.n	80052be <HAL_ADC_ConfigChannel+0x7b2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fd97 	bl	800466e <LL_ADC_REG_IsConversionOngoing>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f040 83a8 	bne.w	8005298 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b05      	cmp	r3, #5
 8004b4e:	d824      	bhi.n	8004b9a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	3b02      	subs	r3, #2
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d81b      	bhi.n	8004b92 <HAL_ADC_ConfigChannel+0x86>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <HAL_ADC_ConfigChannel+0x54>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b79 	.word	0x08004b79
 8004b68:	08004b81 	.word	0x08004b81
 8004b6c:	08004b89 	.word	0x08004b89
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	220c      	movs	r2, #12
 8004b74:	605a      	str	r2, [r3, #4]
          break;
 8004b76:	e011      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2212      	movs	r2, #18
 8004b7c:	605a      	str	r2, [r3, #4]
          break;
 8004b7e:	e00d      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2218      	movs	r2, #24
 8004b84:	605a      	str	r2, [r3, #4]
          break;
 8004b86:	e009      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b8e:	605a      	str	r2, [r3, #4]
          break;
 8004b90:	e004      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2206      	movs	r2, #6
 8004b96:	605a      	str	r2, [r3, #4]
          break;
 8004b98:	e000      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b9a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f7ff fc4d 	bl	8004448 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fd5b 	bl	800466e <LL_ADC_REG_IsConversionOngoing>
 8004bb8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fd67 	bl	8004694 <LL_ADC_INJ_IsConversionOngoing>
 8004bc6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f040 81a6 	bne.w	8004f20 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 81a1 	bne.w	8004f20 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f7ff fc58 	bl	80044a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	08db      	lsrs	r3, r3, #3
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d00a      	beq.n	8004c28 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6919      	ldr	r1, [r3, #16]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c22:	f7ff fba9 	bl	8004378 <LL_ADC_SetOffset>
 8004c26:	e17b      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fbc6 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x148>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fbbb 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	0e9b      	lsrs	r3, r3, #26
 8004c4e:	f003 021f 	and.w	r2, r3, #31
 8004c52:	e01e      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x186>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fbb0 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c6a:	fa93 f3a3 	rbit	r3, r3
 8004c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004c82:	2320      	movs	r3, #32
 8004c84:	e004      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004c86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x19e>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	0e9b      	lsrs	r3, r3, #26
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	e018      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x1d0>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004cce:	2320      	movs	r3, #32
 8004cd0:	e004      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d106      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fb7f 	bl	80043ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fb63 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x20e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fb58 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004d10:	4603      	mov	r3, r0
 8004d12:	0e9b      	lsrs	r3, r3, #26
 8004d14:	f003 021f 	and.w	r2, r3, #31
 8004d18:	e01e      	b.n	8004d58 <HAL_ADC_ConfigChannel+0x24c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fb4d 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d30:	fa93 f3a3 	rbit	r3, r3
 8004d34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004d48:	2320      	movs	r3, #32
 8004d4a:	e004      	b.n	8004d56 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004d4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x264>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0e9b      	lsrs	r3, r3, #26
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	e018      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x296>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d94:	2320      	movs	r3, #32
 8004d96:	e004      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d9c:	fab3 f383 	clz	r3, r3
 8004da0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d106      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fb1c 	bl	80043ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2102      	movs	r1, #2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff fb00 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x2d4>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2102      	movs	r1, #2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff faf5 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	0e9b      	lsrs	r3, r3, #26
 8004dda:	f003 021f 	and.w	r2, r3, #31
 8004dde:	e01e      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x312>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff faea 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004df6:	fa93 f3a3 	rbit	r3, r3
 8004dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004e0e:	2320      	movs	r3, #32
 8004e10:	e004      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <HAL_ADC_ConfigChannel+0x32a>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	0e9b      	lsrs	r3, r3, #26
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	e016      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x358>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e42:	fa93 f3a3 	rbit	r3, r3
 8004e46:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004e56:	2320      	movs	r3, #32
 8004e58:	e004      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d106      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2102      	movs	r1, #2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fabb 	bl	80043ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2103      	movs	r1, #3
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fa9f 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004e82:	4603      	mov	r3, r0
 8004e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x396>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2103      	movs	r1, #3
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fa94 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	0e9b      	lsrs	r3, r3, #26
 8004e9c:	f003 021f 	and.w	r2, r3, #31
 8004ea0:	e017      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x3c6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2103      	movs	r1, #3
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fa89 	bl	80043c0 <LL_ADC_GetOffsetChannel>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ebc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	e003      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x3de>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	0e9b      	lsrs	r3, r3, #26
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	e011      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x402>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef2:	fa93 f3a3 	rbit	r3, r3
 8004ef6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004efa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004f02:	2320      	movs	r3, #32
 8004f04:	e003      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	fab3 f383 	clz	r3, r3
 8004f0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d106      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2103      	movs	r1, #3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fa66 	bl	80043ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff fb7b 	bl	8004620 <LL_ADC_IsEnabled>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 813f 	bne.w	80051b0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f7ff fada 	bl	80044f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a8e      	ldr	r2, [pc, #568]	; (8005184 <HAL_ADC_ConfigChannel+0x678>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	f040 8130 	bne.w	80051b0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x46c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	0e9b      	lsrs	r3, r3, #26
 8004f66:	3301      	adds	r3, #1
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	2b09      	cmp	r3, #9
 8004f6e:	bf94      	ite	ls
 8004f70:	2301      	movls	r3, #1
 8004f72:	2300      	movhi	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	e019      	b.n	8004fac <HAL_ADC_ConfigChannel+0x4a0>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f80:	fa93 f3a3 	rbit	r3, r3
 8004f84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f90:	2320      	movs	r3, #32
 8004f92:	e003      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	bf94      	ite	ls
 8004fa6:	2301      	movls	r3, #1
 8004fa8:	2300      	movhi	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d079      	beq.n	80050a4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x4c0>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0e9b      	lsrs	r3, r3, #26
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	069b      	lsls	r3, r3, #26
 8004fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fca:	e015      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x4ec>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd4:	fa93 f3a3 	rbit	r3, r3
 8004fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	e003      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	069b      	lsls	r3, r3, #26
 8004ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x50c>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	0e9b      	lsrs	r3, r3, #26
 800500a:	3301      	adds	r3, #1
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2101      	movs	r1, #1
 8005012:	fa01 f303 	lsl.w	r3, r1, r3
 8005016:	e017      	b.n	8005048 <HAL_ADC_ConfigChannel+0x53c>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800502a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005030:	2320      	movs	r3, #32
 8005032:	e003      	b.n	800503c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005036:	fab3 f383 	clz	r3, r3
 800503a:	b2db      	uxtb	r3, r3
 800503c:	3301      	adds	r3, #1
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	2101      	movs	r1, #1
 8005044:	fa01 f303 	lsl.w	r3, r1, r3
 8005048:	ea42 0103 	orr.w	r1, r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10a      	bne.n	800506e <HAL_ADC_ConfigChannel+0x562>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	0e9b      	lsrs	r3, r3, #26
 800505e:	3301      	adds	r3, #1
 8005060:	f003 021f 	and.w	r2, r3, #31
 8005064:	4613      	mov	r3, r2
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4413      	add	r3, r2
 800506a:	051b      	lsls	r3, r3, #20
 800506c:	e018      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x594>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005076:	fa93 f3a3 	rbit	r3, r3
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005086:	2320      	movs	r3, #32
 8005088:	e003      	b.n	8005092 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800508a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508c:	fab3 f383 	clz	r3, r3
 8005090:	b2db      	uxtb	r3, r3
 8005092:	3301      	adds	r3, #1
 8005094:	f003 021f 	and.w	r2, r3, #31
 8005098:	4613      	mov	r3, r2
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4413      	add	r3, r2
 800509e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050a0:	430b      	orrs	r3, r1
 80050a2:	e080      	b.n	80051a6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x5b4>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0e9b      	lsrs	r3, r3, #26
 80050b6:	3301      	adds	r3, #1
 80050b8:	069b      	lsls	r3, r3, #26
 80050ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050be:	e015      	b.n	80050ec <HAL_ADC_ConfigChannel+0x5e0>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	fa93 f3a3 	rbit	r3, r3
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80050d8:	2320      	movs	r3, #32
 80050da:	e003      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	fab3 f383 	clz	r3, r3
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	3301      	adds	r3, #1
 80050e6:	069b      	lsls	r3, r3, #26
 80050e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_ADC_ConfigChannel+0x600>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	0e9b      	lsrs	r3, r3, #26
 80050fe:	3301      	adds	r3, #1
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	e017      	b.n	800513c <HAL_ADC_ConfigChannel+0x630>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	fa93 f3a3 	rbit	r3, r3
 8005118:	61fb      	str	r3, [r7, #28]
  return result;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	e003      	b.n	8005130 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	fab3 f383 	clz	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	3301      	adds	r3, #1
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	2101      	movs	r1, #1
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	ea42 0103 	orr.w	r1, r2, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10d      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x65c>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	0e9b      	lsrs	r3, r3, #26
 8005152:	3301      	adds	r3, #1
 8005154:	f003 021f 	and.w	r2, r3, #31
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	3b1e      	subs	r3, #30
 8005160:	051b      	lsls	r3, r3, #20
 8005162:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005166:	e01d      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x698>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	fa93 f3a3 	rbit	r3, r3
 8005174:	613b      	str	r3, [r7, #16]
  return result;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005180:	2320      	movs	r3, #32
 8005182:	e005      	b.n	8005190 <HAL_ADC_ConfigChannel+0x684>
 8005184:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	fab3 f383 	clz	r3, r3
 800518e:	b2db      	uxtb	r3, r3
 8005190:	3301      	adds	r3, #1
 8005192:	f003 021f 	and.w	r2, r3, #31
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	3b1e      	subs	r3, #30
 800519e:	051b      	lsls	r3, r3, #20
 80051a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051a4:	430b      	orrs	r3, r1
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	6892      	ldr	r2, [r2, #8]
 80051aa:	4619      	mov	r1, r3
 80051ac:	f7ff f978 	bl	80044a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d07a      	beq.n	80052b2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051bc:	4843      	ldr	r0, [pc, #268]	; (80052cc <HAL_ADC_ConfigChannel+0x7c0>)
 80051be:	f7ff f8cd 	bl	800435c <LL_ADC_GetCommonPathInternalCh>
 80051c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a41      	ldr	r2, [pc, #260]	; (80052d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d12c      	bne.n	800522a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d126      	bne.n	800522a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a3c      	ldr	r2, [pc, #240]	; (80052d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_ADC_ConfigChannel+0x6e4>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <HAL_ADC_ConfigChannel+0x7cc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d15d      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051f8:	4619      	mov	r1, r3
 80051fa:	4834      	ldr	r0, [pc, #208]	; (80052cc <HAL_ADC_ConfigChannel+0x7c0>)
 80051fc:	f7ff f89b 	bl	8004336 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005200:	4b36      	ldr	r3, [pc, #216]	; (80052dc <HAL_ADC_ConfigChannel+0x7d0>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	4a36      	ldr	r2, [pc, #216]	; (80052e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800521a:	e002      	b.n	8005222 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3b01      	subs	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f9      	bne.n	800521c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005228:	e040      	b.n	80052ac <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <HAL_ADC_ConfigChannel+0x7d8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d118      	bne.n	8005266 <HAL_ADC_ConfigChannel+0x75a>
 8005234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d112      	bne.n	8005266 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a23      	ldr	r2, [pc, #140]	; (80052d4 <HAL_ADC_ConfigChannel+0x7c8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_ADC_ConfigChannel+0x748>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d12d      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525c:	4619      	mov	r1, r3
 800525e:	481b      	ldr	r0, [pc, #108]	; (80052cc <HAL_ADC_ConfigChannel+0x7c0>)
 8005260:	f7ff f869 	bl	8004336 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005264:	e024      	b.n	80052b0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1f      	ldr	r2, [pc, #124]	; (80052e8 <HAL_ADC_ConfigChannel+0x7dc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d120      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11a      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <HAL_ADC_ConfigChannel+0x7c8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d115      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800528a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800528e:	4619      	mov	r1, r3
 8005290:	480e      	ldr	r0, [pc, #56]	; (80052cc <HAL_ADC_ConfigChannel+0x7c0>)
 8005292:	f7ff f850 	bl	8004336 <LL_ADC_SetCommonPathInternalCh>
 8005296:	e00c      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80052aa:	e002      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80052ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80052be:	4618      	mov	r0, r3
 80052c0:	37d8      	adds	r7, #216	; 0xd8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	80080000 	.word	0x80080000
 80052cc:	50040300 	.word	0x50040300
 80052d0:	c7520000 	.word	0xc7520000
 80052d4:	50040000 	.word	0x50040000
 80052d8:	50040200 	.word	0x50040200
 80052dc:	2000013c 	.word	0x2000013c
 80052e0:	053e2d63 	.word	0x053e2d63
 80052e4:	cb840000 	.word	0xcb840000
 80052e8:	80000001 	.word	0x80000001

080052ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff f991 	bl	8004620 <LL_ADC_IsEnabled>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d14d      	bne.n	80053a0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	4b28      	ldr	r3, [pc, #160]	; (80053ac <ADC_Enable+0xc0>)
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00d      	beq.n	800532e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	f043 0210 	orr.w	r2, r3, #16
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005322:	f043 0201 	orr.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e039      	b.n	80053a2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff f960 	bl	80045f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005338:	f7fe ffba 	bl	80042b0 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800533e:	e028      	b.n	8005392 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff f96b 	bl	8004620 <LL_ADC_IsEnabled>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff f94f 	bl	80045f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800535a:	f7fe ffa9 	bl	80042b0 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d914      	bls.n	8005392 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d00d      	beq.n	8005392 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537a:	f043 0210 	orr.w	r2, r3, #16
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	f043 0201 	orr.w	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e007      	b.n	80053a2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b01      	cmp	r3, #1
 800539e:	d1cf      	bne.n	8005340 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	8000003f 	.word	0x8000003f

080053b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d14b      	bne.n	8005462 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d021      	beq.n	8005428 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff f81a 	bl	8004422 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d032      	beq.n	800545a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d12b      	bne.n	800545a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d11f      	bne.n	800545a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	f043 0201 	orr.w	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
 8005426:	e018      	b.n	800545a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d111      	bne.n	800545a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f043 0201 	orr.w	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff fb38 	bl	8004ad0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005460:	e00e      	b.n	8005480 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff fb42 	bl	8004af8 <HAL_ADC_ErrorCallback>
}
 8005474:	e004      	b.n	8005480 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff fb24 	bl	8004ae4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	f043 0204 	orr.w	r2, r3, #4
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff fb14 	bl	8004af8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <LL_ADC_IsEnabled>:
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <LL_ADC_IsEnabled+0x18>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <LL_ADC_IsEnabled+0x1a>
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <LL_ADC_REG_IsConversionOngoing>:
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d101      	bne.n	8005516 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b09f      	sub	sp, #124	; 0x7c
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800553e:	2302      	movs	r3, #2
 8005540:	e093      	b.n	800566a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800554a:	2300      	movs	r3, #0
 800554c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800554e:	2300      	movs	r3, #0
 8005550:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a47      	ldr	r2, [pc, #284]	; (8005674 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d102      	bne.n	8005562 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800555c:	4b46      	ldr	r3, [pc, #280]	; (8005678 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	e001      	b.n	8005566 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005562:	2300      	movs	r3, #0
 8005564:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e072      	b.n	800566a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff ffb9 	bl	80054fe <LL_ADC_REG_IsConversionOngoing>
 800558c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ffb3 	bl	80054fe <LL_ADC_REG_IsConversionOngoing>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d154      	bne.n	8005648 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800559e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d151      	bne.n	8005648 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055a4:	4b35      	ldr	r3, [pc, #212]	; (800567c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80055a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d02c      	beq.n	800560a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80055b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055c2:	035b      	lsls	r3, r3, #13
 80055c4:	430b      	orrs	r3, r1
 80055c6:	431a      	orrs	r2, r3
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055cc:	4829      	ldr	r0, [pc, #164]	; (8005674 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80055ce:	f7ff ff83 	bl	80054d8 <LL_ADC_IsEnabled>
 80055d2:	4604      	mov	r4, r0
 80055d4:	4828      	ldr	r0, [pc, #160]	; (8005678 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80055d6:	f7ff ff7f 	bl	80054d8 <LL_ADC_IsEnabled>
 80055da:	4603      	mov	r3, r0
 80055dc:	431c      	orrs	r4, r3
 80055de:	4828      	ldr	r0, [pc, #160]	; (8005680 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055e0:	f7ff ff7a 	bl	80054d8 <LL_ADC_IsEnabled>
 80055e4:	4603      	mov	r3, r0
 80055e6:	4323      	orrs	r3, r4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d137      	bne.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055f4:	f023 030f 	bic.w	r3, r3, #15
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	6811      	ldr	r1, [r2, #0]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	6892      	ldr	r2, [r2, #8]
 8005600:	430a      	orrs	r2, r1
 8005602:	431a      	orrs	r2, r3
 8005604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005606:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005608:	e028      	b.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800560a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005614:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005616:	4817      	ldr	r0, [pc, #92]	; (8005674 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005618:	f7ff ff5e 	bl	80054d8 <LL_ADC_IsEnabled>
 800561c:	4604      	mov	r4, r0
 800561e:	4816      	ldr	r0, [pc, #88]	; (8005678 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005620:	f7ff ff5a 	bl	80054d8 <LL_ADC_IsEnabled>
 8005624:	4603      	mov	r3, r0
 8005626:	431c      	orrs	r4, r3
 8005628:	4815      	ldr	r0, [pc, #84]	; (8005680 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800562a:	f7ff ff55 	bl	80054d8 <LL_ADC_IsEnabled>
 800562e:	4603      	mov	r3, r0
 8005630:	4323      	orrs	r3, r4
 8005632:	2b00      	cmp	r3, #0
 8005634:	d112      	bne.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800563e:	f023 030f 	bic.w	r3, r3, #15
 8005642:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005644:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005646:	e009      	b.n	800565c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800565a:	e000      	b.n	800565e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800565c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005666:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800566a:	4618      	mov	r0, r3
 800566c:	377c      	adds	r7, #124	; 0x7c
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	50040000 	.word	0x50040000
 8005678:	50040100 	.word	0x50040100
 800567c:	50040300 	.word	0x50040300
 8005680:	50040200 	.word	0x50040200

08005684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056a0:	4013      	ands	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056b6:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <__NVIC_SetPriorityGrouping+0x44>)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	60d3      	str	r3, [r2, #12]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	e000ed00 	.word	0xe000ed00

080056cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <__NVIC_GetPriorityGrouping+0x18>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	0a1b      	lsrs	r3, r3, #8
 80056d6:	f003 0307 	and.w	r3, r3, #7
}
 80056da:	4618      	mov	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	db0b      	blt.n	8005712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	f003 021f 	and.w	r2, r3, #31
 8005700:	4907      	ldr	r1, [pc, #28]	; (8005720 <__NVIC_EnableIRQ+0x38>)
 8005702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2001      	movs	r0, #1
 800570a:	fa00 f202 	lsl.w	r2, r0, r2
 800570e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000e100 	.word	0xe000e100

08005724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005734:	2b00      	cmp	r3, #0
 8005736:	db0a      	blt.n	800574e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	490c      	ldr	r1, [pc, #48]	; (8005770 <__NVIC_SetPriority+0x4c>)
 800573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005742:	0112      	lsls	r2, r2, #4
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	440b      	add	r3, r1
 8005748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800574c:	e00a      	b.n	8005764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	4908      	ldr	r1, [pc, #32]	; (8005774 <__NVIC_SetPriority+0x50>)
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	3b04      	subs	r3, #4
 800575c:	0112      	lsls	r2, r2, #4
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	440b      	add	r3, r1
 8005762:	761a      	strb	r2, [r3, #24]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	e000e100 	.word	0xe000e100
 8005774:	e000ed00 	.word	0xe000ed00

08005778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005778:	b480      	push	{r7}
 800577a:	b089      	sub	sp, #36	; 0x24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f1c3 0307 	rsb	r3, r3, #7
 8005792:	2b04      	cmp	r3, #4
 8005794:	bf28      	it	cs
 8005796:	2304      	movcs	r3, #4
 8005798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3304      	adds	r3, #4
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d902      	bls.n	80057a8 <NVIC_EncodePriority+0x30>
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	3b03      	subs	r3, #3
 80057a6:	e000      	b.n	80057aa <NVIC_EncodePriority+0x32>
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43da      	mvns	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	401a      	ands	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ca:	43d9      	mvns	r1, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d0:	4313      	orrs	r3, r2
         );
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3724      	adds	r7, #36	; 0x24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff ff4c 	bl	8005684 <__NVIC_SetPriorityGrouping>
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005806:	f7ff ff61 	bl	80056cc <__NVIC_GetPriorityGrouping>
 800580a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	6978      	ldr	r0, [r7, #20]
 8005812:	f7ff ffb1 	bl	8005778 <NVIC_EncodePriority>
 8005816:	4602      	mov	r2, r0
 8005818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff ff80 	bl	8005724 <__NVIC_SetPriority>
}
 8005824:	bf00      	nop
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ff54 	bl	80056e8 <__NVIC_EnableIRQ>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e098      	b.n	800598c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	4b4d      	ldr	r3, [pc, #308]	; (8005998 <HAL_DMA_Init+0x150>)
 8005862:	429a      	cmp	r2, r3
 8005864:	d80f      	bhi.n	8005886 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4b4b      	ldr	r3, [pc, #300]	; (800599c <HAL_DMA_Init+0x154>)
 800586e:	4413      	add	r3, r2
 8005870:	4a4b      	ldr	r2, [pc, #300]	; (80059a0 <HAL_DMA_Init+0x158>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	009a      	lsls	r2, r3, #2
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a48      	ldr	r2, [pc, #288]	; (80059a4 <HAL_DMA_Init+0x15c>)
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
 8005884:	e00e      	b.n	80058a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <HAL_DMA_Init+0x160>)
 800588e:	4413      	add	r3, r2
 8005890:	4a43      	ldr	r2, [pc, #268]	; (80059a0 <HAL_DMA_Init+0x158>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	009a      	lsls	r2, r3, #2
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a42      	ldr	r2, [pc, #264]	; (80059ac <HAL_DMA_Init+0x164>)
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058fe:	d039      	beq.n	8005974 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	4a27      	ldr	r2, [pc, #156]	; (80059a4 <HAL_DMA_Init+0x15c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d11a      	bne.n	8005940 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800590a:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <HAL_DMA_Init+0x168>)
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f003 031c 	and.w	r3, r3, #28
 8005916:	210f      	movs	r1, #15
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	4924      	ldr	r1, [pc, #144]	; (80059b0 <HAL_DMA_Init+0x168>)
 8005920:	4013      	ands	r3, r2
 8005922:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005924:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <HAL_DMA_Init+0x168>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6859      	ldr	r1, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f003 031c 	and.w	r3, r3, #28
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	491d      	ldr	r1, [pc, #116]	; (80059b0 <HAL_DMA_Init+0x168>)
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
 800593e:	e019      	b.n	8005974 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005940:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <HAL_DMA_Init+0x16c>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005948:	f003 031c 	and.w	r3, r3, #28
 800594c:	210f      	movs	r1, #15
 800594e:	fa01 f303 	lsl.w	r3, r1, r3
 8005952:	43db      	mvns	r3, r3
 8005954:	4917      	ldr	r1, [pc, #92]	; (80059b4 <HAL_DMA_Init+0x16c>)
 8005956:	4013      	ands	r3, r2
 8005958:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <HAL_DMA_Init+0x16c>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f003 031c 	and.w	r3, r3, #28
 800596a:	fa01 f303 	lsl.w	r3, r1, r3
 800596e:	4911      	ldr	r1, [pc, #68]	; (80059b4 <HAL_DMA_Init+0x16c>)
 8005970:	4313      	orrs	r3, r2
 8005972:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40020407 	.word	0x40020407
 800599c:	bffdfff8 	.word	0xbffdfff8
 80059a0:	cccccccd 	.word	0xcccccccd
 80059a4:	40020000 	.word	0x40020000
 80059a8:	bffdfbf8 	.word	0xbffdfbf8
 80059ac:	40020400 	.word	0x40020400
 80059b0:	400200a8 	.word	0x400200a8
 80059b4:	400204a8 	.word	0x400204a8

080059b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_DMA_Start_IT+0x20>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e04b      	b.n	8005a70 <HAL_DMA_Start_IT+0xb8>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d13a      	bne.n	8005a62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 0201 	bic.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f921 	bl	8005c58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f042 020e 	orr.w	r2, r2, #14
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	e00f      	b.n	8005a50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0204 	bic.w	r2, r2, #4
 8005a3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 020a 	orr.w	r2, r2, #10
 8005a4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e005      	b.n	8005a6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d005      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2204      	movs	r2, #4
 8005a94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e029      	b.n	8005af0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 020e 	bic.w	r2, r2, #14
 8005aaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0201 	bic.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac0:	f003 021c 	and.w	r2, r3, #28
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f202 	lsl.w	r2, r1, r2
 8005ace:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
    }
  }
  return status;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f003 031c 	and.w	r3, r3, #28
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d026      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x7a>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d021      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0204 	bic.w	r2, r2, #4
 8005b4c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f003 021c 	and.w	r2, r3, #28
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	2104      	movs	r1, #4
 8005b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b60:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d071      	beq.n	8005c4e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005b72:	e06c      	b.n	8005c4e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b78:	f003 031c 	and.w	r3, r3, #28
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d02e      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xec>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d029      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 020a 	bic.w	r2, r2, #10
 8005bae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f003 021c 	and.w	r2, r3, #28
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d038      	beq.n	8005c4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005be4:	e033      	b.n	8005c4e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f003 031c 	and.w	r3, r3, #28
 8005bee:	2208      	movs	r2, #8
 8005bf0:	409a      	lsls	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d02a      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x156>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d025      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 020e 	bic.w	r2, r2, #14
 8005c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	f003 021c 	and.w	r2, r3, #28
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f202 	lsl.w	r2, r1, r2
 8005c26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
}
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f003 021c 	and.w	r2, r3, #28
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	2101      	movs	r1, #1
 8005c74:	fa01 f202 	lsl.w	r2, r1, r2
 8005c78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d108      	bne.n	8005c9c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c9a:	e007      	b.n	8005cac <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
}
 8005cac:	bf00      	nop
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cc6:	e17f      	b.n	8005fc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	2101      	movs	r1, #1
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8171 	beq.w	8005fc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d00b      	beq.n	8005d00 <HAL_GPIO_Init+0x48>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d007      	beq.n	8005d00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cf4:	2b11      	cmp	r3, #17
 8005cf6:	d003      	beq.n	8005d00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b12      	cmp	r3, #18
 8005cfe:	d130      	bne.n	8005d62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4013      	ands	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d36:	2201      	movs	r2, #1
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4013      	ands	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	f003 0201 	and.w	r2, r3, #1
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d118      	bne.n	8005da0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d74:	2201      	movs	r2, #1
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4013      	ands	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	08db      	lsrs	r3, r3, #3
 8005d8a:	f003 0201 	and.w	r2, r3, #1
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	2203      	movs	r2, #3
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4013      	ands	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d003      	beq.n	8005de0 <HAL_GPIO_Init+0x128>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b12      	cmp	r3, #18
 8005dde:	d123      	bne.n	8005e28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	08da      	lsrs	r2, r3, #3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3208      	adds	r2, #8
 8005de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	220f      	movs	r2, #15
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4013      	ands	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	08da      	lsrs	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3208      	adds	r2, #8
 8005e22:	6939      	ldr	r1, [r7, #16]
 8005e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	2203      	movs	r2, #3
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 0203 	and.w	r2, r3, #3
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80ac 	beq.w	8005fc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e6a:	4b5f      	ldr	r3, [pc, #380]	; (8005fe8 <HAL_GPIO_Init+0x330>)
 8005e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6e:	4a5e      	ldr	r2, [pc, #376]	; (8005fe8 <HAL_GPIO_Init+0x330>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	6613      	str	r3, [r2, #96]	; 0x60
 8005e76:	4b5c      	ldr	r3, [pc, #368]	; (8005fe8 <HAL_GPIO_Init+0x330>)
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e82:	4a5a      	ldr	r2, [pc, #360]	; (8005fec <HAL_GPIO_Init+0x334>)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	3302      	adds	r3, #2
 8005e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	220f      	movs	r2, #15
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005eac:	d025      	beq.n	8005efa <HAL_GPIO_Init+0x242>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a4f      	ldr	r2, [pc, #316]	; (8005ff0 <HAL_GPIO_Init+0x338>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01f      	beq.n	8005ef6 <HAL_GPIO_Init+0x23e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a4e      	ldr	r2, [pc, #312]	; (8005ff4 <HAL_GPIO_Init+0x33c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d019      	beq.n	8005ef2 <HAL_GPIO_Init+0x23a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a4d      	ldr	r2, [pc, #308]	; (8005ff8 <HAL_GPIO_Init+0x340>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <HAL_GPIO_Init+0x236>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a4c      	ldr	r2, [pc, #304]	; (8005ffc <HAL_GPIO_Init+0x344>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00d      	beq.n	8005eea <HAL_GPIO_Init+0x232>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a4b      	ldr	r2, [pc, #300]	; (8006000 <HAL_GPIO_Init+0x348>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <HAL_GPIO_Init+0x22e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a4a      	ldr	r2, [pc, #296]	; (8006004 <HAL_GPIO_Init+0x34c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <HAL_GPIO_Init+0x22a>
 8005ede:	2306      	movs	r3, #6
 8005ee0:	e00c      	b.n	8005efc <HAL_GPIO_Init+0x244>
 8005ee2:	2307      	movs	r3, #7
 8005ee4:	e00a      	b.n	8005efc <HAL_GPIO_Init+0x244>
 8005ee6:	2305      	movs	r3, #5
 8005ee8:	e008      	b.n	8005efc <HAL_GPIO_Init+0x244>
 8005eea:	2304      	movs	r3, #4
 8005eec:	e006      	b.n	8005efc <HAL_GPIO_Init+0x244>
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e004      	b.n	8005efc <HAL_GPIO_Init+0x244>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e002      	b.n	8005efc <HAL_GPIO_Init+0x244>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_GPIO_Init+0x244>
 8005efa:	2300      	movs	r3, #0
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	f002 0203 	and.w	r2, r2, #3
 8005f02:	0092      	lsls	r2, r2, #2
 8005f04:	4093      	lsls	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f0c:	4937      	ldr	r1, [pc, #220]	; (8005fec <HAL_GPIO_Init+0x334>)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	089b      	lsrs	r3, r3, #2
 8005f12:	3302      	adds	r3, #2
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f1a:	4b3b      	ldr	r3, [pc, #236]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4013      	ands	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f3e:	4a32      	ldr	r2, [pc, #200]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005f44:	4b30      	ldr	r3, [pc, #192]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4013      	ands	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f68:	4a27      	ldr	r2, [pc, #156]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f6e:	4b26      	ldr	r3, [pc, #152]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005fbc:	4a12      	ldr	r2, [pc, #72]	; (8006008 <HAL_GPIO_Init+0x350>)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f47f ae78 	bne.w	8005cc8 <HAL_GPIO_Init+0x10>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	48000400 	.word	0x48000400
 8005ff4:	48000800 	.word	0x48000800
 8005ff8:	48000c00 	.word	0x48000c00
 8005ffc:	48001000 	.word	0x48001000
 8006000:	48001400 	.word	0x48001400
 8006004:	48001800 	.word	0x48001800
 8006008:	40010400 	.word	0x40010400

0800600c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	807b      	strh	r3, [r7, #2]
 8006018:	4613      	mov	r3, r2
 800601a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800601c:	787b      	ldrb	r3, [r7, #1]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006022:	887a      	ldrh	r2, [r7, #2]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006028:	e002      	b.n	8006030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800602a:	887a      	ldrh	r2, [r7, #2]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e081      	b.n	8006152 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fd f9ec 	bl	8003440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	; 0x24
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800608c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800609c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d107      	bne.n	80060b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b2:	609a      	str	r2, [r3, #8]
 80060b4:	e006      	b.n	80060c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d104      	bne.n	80060d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	ea42 0103 	orr.w	r1, r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	021a      	lsls	r2, r3, #8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69d9      	ldr	r1, [r3, #28]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b20      	cmp	r3, #32
 800616e:	d138      	bne.n	80061e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800617a:	2302      	movs	r3, #2
 800617c:	e032      	b.n	80061e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2224      	movs	r2, #36	; 0x24
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0201 	orr.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	e000      	b.n	80061e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061e2:	2302      	movs	r3, #2
  }
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b20      	cmp	r3, #32
 8006204:	d139      	bne.n	800627a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006210:	2302      	movs	r3, #2
 8006212:	e033      	b.n	800627c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	; 0x24
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006242:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e000      	b.n	800627c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800627a:	2302      	movs	r3, #2
  }
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800628c:	4b04      	ldr	r3, [pc, #16]	; (80062a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006294:	4618      	mov	r0, r3
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40007000 	.word	0x40007000

080062a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b2:	d130      	bne.n	8006316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80062b4:	4b23      	ldr	r3, [pc, #140]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c0:	d038      	beq.n	8006334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062c2:	4b20      	ldr	r3, [pc, #128]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062ca:	4a1e      	ldr	r2, [pc, #120]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062d2:	4b1d      	ldr	r3, [pc, #116]	; (8006348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2232      	movs	r2, #50	; 0x32
 80062d8:	fb02 f303 	mul.w	r3, r2, r3
 80062dc:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	0c9b      	lsrs	r3, r3, #18
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062e8:	e002      	b.n	80062f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062f0:	4b14      	ldr	r3, [pc, #80]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fc:	d102      	bne.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f2      	bne.n	80062ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800630c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006310:	d110      	bne.n	8006334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00f      	b.n	8006336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006316:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800631e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006322:	d007      	beq.n	8006334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006324:	4b07      	ldr	r3, [pc, #28]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800632c:	4a05      	ldr	r2, [pc, #20]	; (8006344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800632e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40007000 	.word	0x40007000
 8006348:	2000013c 	.word	0x2000013c
 800634c:	431bde83 	.word	0x431bde83

08006350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e3d4      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006362:	4ba1      	ldr	r3, [pc, #644]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 030c 	and.w	r3, r3, #12
 800636a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800636c:	4b9e      	ldr	r3, [pc, #632]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80e4 	beq.w	800654c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <HAL_RCC_OscConfig+0x4a>
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b0c      	cmp	r3, #12
 800638e:	f040 808b 	bne.w	80064a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b01      	cmp	r3, #1
 8006396:	f040 8087 	bne.w	80064a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800639a:	4b93      	ldr	r3, [pc, #588]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_RCC_OscConfig+0x62>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e3ac      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <HAL_RCC_OscConfig+0x7c>
 80063c2:	4b89      	ldr	r3, [pc, #548]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ca:	e005      	b.n	80063d8 <HAL_RCC_OscConfig+0x88>
 80063cc:	4b86      	ldr	r3, [pc, #536]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80063ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d8:	4293      	cmp	r3, r2
 80063da:	d223      	bcs.n	8006424 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fd71 	bl	8006ec8 <RCC_SetFlashLatencyFromMSIRange>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e38d      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063f0:	4b7d      	ldr	r3, [pc, #500]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a7c      	ldr	r2, [pc, #496]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80063f6:	f043 0308 	orr.w	r3, r3, #8
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b7a      	ldr	r3, [pc, #488]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	4977      	ldr	r1, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800640a:	4313      	orrs	r3, r2
 800640c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800640e:	4b76      	ldr	r3, [pc, #472]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	4972      	ldr	r1, [pc, #456]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800641e:	4313      	orrs	r3, r2
 8006420:	604b      	str	r3, [r1, #4]
 8006422:	e025      	b.n	8006470 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006424:	4b70      	ldr	r3, [pc, #448]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a6f      	ldr	r2, [pc, #444]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800642a:	f043 0308 	orr.w	r3, r3, #8
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	4b6d      	ldr	r3, [pc, #436]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	496a      	ldr	r1, [pc, #424]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006442:	4b69      	ldr	r3, [pc, #420]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	4965      	ldr	r1, [pc, #404]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006452:	4313      	orrs	r3, r2
 8006454:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fd31 	bl	8006ec8 <RCC_SetFlashLatencyFromMSIRange>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e34d      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006470:	f000 fc36 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b5c      	ldr	r3, [pc, #368]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	495a      	ldr	r1, [pc, #360]	; (80065ec <HAL_RCC_OscConfig+0x29c>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
 800648c:	4a58      	ldr	r2, [pc, #352]	; (80065f0 <HAL_RCC_OscConfig+0x2a0>)
 800648e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006490:	4b58      	ldr	r3, [pc, #352]	; (80065f4 <HAL_RCC_OscConfig+0x2a4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7fd fb1d 	bl	8003ad4 <HAL_InitTick>
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d052      	beq.n	800654a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	e331      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d032      	beq.n	8006516 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064b0:	4b4d      	ldr	r3, [pc, #308]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a4c      	ldr	r2, [pc, #304]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064bc:	f7fd fef8 	bl	80042b0 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064c4:	f7fd fef4 	bl	80042b0 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e31a      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064d6:	4b44      	ldr	r3, [pc, #272]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064e2:	4b41      	ldr	r3, [pc, #260]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a40      	ldr	r2, [pc, #256]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80064e8:	f043 0308 	orr.w	r3, r3, #8
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	4b3e      	ldr	r3, [pc, #248]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	493b      	ldr	r1, [pc, #236]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006500:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	4936      	ldr	r1, [pc, #216]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
 8006514:	e01a      	b.n	800654c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006516:	4b34      	ldr	r3, [pc, #208]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a33      	ldr	r2, [pc, #204]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006522:	f7fd fec5 	bl	80042b0 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800652a:	f7fd fec1 	bl	80042b0 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e2e7      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800653c:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <HAL_RCC_OscConfig+0x1da>
 8006548:	e000      	b.n	800654c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800654a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d074      	beq.n	8006642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d005      	beq.n	800656a <HAL_RCC_OscConfig+0x21a>
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	d10e      	bne.n	8006582 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b03      	cmp	r3, #3
 8006568:	d10b      	bne.n	8006582 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656a:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d064      	beq.n	8006640 <HAL_RCC_OscConfig+0x2f0>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d160      	bne.n	8006640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e2c4      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658a:	d106      	bne.n	800659a <HAL_RCC_OscConfig+0x24a>
 800658c:	4b16      	ldr	r3, [pc, #88]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 8006592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e01d      	b.n	80065d6 <HAL_RCC_OscConfig+0x286>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a2:	d10c      	bne.n	80065be <HAL_RCC_OscConfig+0x26e>
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a0f      	ldr	r2, [pc, #60]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a0c      	ldr	r2, [pc, #48]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	e00b      	b.n	80065d6 <HAL_RCC_OscConfig+0x286>
 80065be:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a09      	ldr	r2, [pc, #36]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a06      	ldr	r2, [pc, #24]	; (80065e8 <HAL_RCC_OscConfig+0x298>)
 80065d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01c      	beq.n	8006618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065de:	f7fd fe67 	bl	80042b0 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065e4:	e011      	b.n	800660a <HAL_RCC_OscConfig+0x2ba>
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	08013f4c 	.word	0x08013f4c
 80065f0:	2000013c 	.word	0x2000013c
 80065f4:	20000140 	.word	0x20000140
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f8:	f7fd fe5a 	bl	80042b0 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e280      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800660a:	4baf      	ldr	r3, [pc, #700]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f0      	beq.n	80065f8 <HAL_RCC_OscConfig+0x2a8>
 8006616:	e014      	b.n	8006642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006618:	f7fd fe4a 	bl	80042b0 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006620:	f7fd fe46 	bl	80042b0 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	; 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e26c      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006632:	4ba5      	ldr	r3, [pc, #660]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x2d0>
 800663e:	e000      	b.n	8006642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d060      	beq.n	8006710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d005      	beq.n	8006660 <HAL_RCC_OscConfig+0x310>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b0c      	cmp	r3, #12
 8006658:	d119      	bne.n	800668e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d116      	bne.n	800668e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006660:	4b99      	ldr	r3, [pc, #612]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <HAL_RCC_OscConfig+0x328>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e249      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006678:	4b93      	ldr	r3, [pc, #588]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	4990      	ldr	r1, [pc, #576]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800668c:	e040      	b.n	8006710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d023      	beq.n	80066de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006696:	4b8c      	ldr	r3, [pc, #560]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a8b      	ldr	r2, [pc, #556]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a2:	f7fd fe05 	bl	80042b0 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066aa:	f7fd fe01 	bl	80042b0 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e227      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066bc:	4b82      	ldr	r3, [pc, #520]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0f0      	beq.n	80066aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c8:	4b7f      	ldr	r3, [pc, #508]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	061b      	lsls	r3, r3, #24
 80066d6:	497c      	ldr	r1, [pc, #496]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	604b      	str	r3, [r1, #4]
 80066dc:	e018      	b.n	8006710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066de:	4b7a      	ldr	r3, [pc, #488]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a79      	ldr	r2, [pc, #484]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80066e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ea:	f7fd fde1 	bl	80042b0 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f2:	f7fd fddd 	bl	80042b0 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e203      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006704:	4b70      	ldr	r3, [pc, #448]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f0      	bne.n	80066f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d03c      	beq.n	8006796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01c      	beq.n	800675e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006724:	4b68      	ldr	r3, [pc, #416]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800672a:	4a67      	ldr	r2, [pc, #412]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fd fdbc 	bl	80042b0 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800673c:	f7fd fdb8 	bl	80042b0 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e1de      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800674e:	4b5e      	ldr	r3, [pc, #376]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ef      	beq.n	800673c <HAL_RCC_OscConfig+0x3ec>
 800675c:	e01b      	b.n	8006796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800675e:	4b5a      	ldr	r3, [pc, #360]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006764:	4a58      	ldr	r2, [pc, #352]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fd fd9f 	bl	80042b0 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7fd fd9b 	bl	80042b0 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e1c1      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006788:	4b4f      	ldr	r3, [pc, #316]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800678a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ef      	bne.n	8006776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80a6 	beq.w	80068f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067a4:	2300      	movs	r3, #0
 80067a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067a8:	4b47      	ldr	r3, [pc, #284]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80067aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10d      	bne.n	80067d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b4:	4b44      	ldr	r3, [pc, #272]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80067b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b8:	4a43      	ldr	r2, [pc, #268]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80067ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067be:	6593      	str	r3, [r2, #88]	; 0x58
 80067c0:	4b41      	ldr	r3, [pc, #260]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067cc:	2301      	movs	r3, #1
 80067ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d0:	4b3e      	ldr	r3, [pc, #248]	; (80068cc <HAL_RCC_OscConfig+0x57c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d118      	bne.n	800680e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067dc:	4b3b      	ldr	r3, [pc, #236]	; (80068cc <HAL_RCC_OscConfig+0x57c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a3a      	ldr	r2, [pc, #232]	; (80068cc <HAL_RCC_OscConfig+0x57c>)
 80067e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067e8:	f7fd fd62 	bl	80042b0 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f0:	f7fd fd5e 	bl	80042b0 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e184      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006802:	4b32      	ldr	r3, [pc, #200]	; (80068cc <HAL_RCC_OscConfig+0x57c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d108      	bne.n	8006828 <HAL_RCC_OscConfig+0x4d8>
 8006816:	4b2c      	ldr	r3, [pc, #176]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681c:	4a2a      	ldr	r2, [pc, #168]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006826:	e024      	b.n	8006872 <HAL_RCC_OscConfig+0x522>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b05      	cmp	r3, #5
 800682e:	d110      	bne.n	8006852 <HAL_RCC_OscConfig+0x502>
 8006830:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006836:	4a24      	ldr	r2, [pc, #144]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006840:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006850:	e00f      	b.n	8006872 <HAL_RCC_OscConfig+0x522>
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006858:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800685a:	f023 0301 	bic.w	r3, r3, #1
 800685e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006868:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800686a:	f023 0304 	bic.w	r3, r3, #4
 800686e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d016      	beq.n	80068a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687a:	f7fd fd19 	bl	80042b0 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006880:	e00a      	b.n	8006898 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006882:	f7fd fd15 	bl	80042b0 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e139      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCC_OscConfig+0x578>)
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0ed      	beq.n	8006882 <HAL_RCC_OscConfig+0x532>
 80068a6:	e01a      	b.n	80068de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a8:	f7fd fd02 	bl	80042b0 <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068ae:	e00f      	b.n	80068d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b0:	f7fd fcfe 	bl	80042b0 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80068be:	4293      	cmp	r3, r2
 80068c0:	d906      	bls.n	80068d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e122      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
 80068c6:	bf00      	nop
 80068c8:	40021000 	.word	0x40021000
 80068cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068d0:	4b90      	ldr	r3, [pc, #576]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 80068d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e8      	bne.n	80068b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068de:	7ffb      	ldrb	r3, [r7, #31]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d105      	bne.n	80068f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e4:	4b8b      	ldr	r3, [pc, #556]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 80068e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e8:	4a8a      	ldr	r2, [pc, #552]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 80068ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8108 	beq.w	8006b0a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	2b02      	cmp	r3, #2
 8006900:	f040 80d0 	bne.w	8006aa4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006904:	4b83      	ldr	r3, [pc, #524]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 0203 	and.w	r2, r3, #3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d130      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	3b01      	subs	r3, #1
 8006924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d127      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d11f      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006944:	2a07      	cmp	r2, #7
 8006946:	bf14      	ite	ne
 8006948:	2201      	movne	r2, #1
 800694a:	2200      	moveq	r2, #0
 800694c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800694e:	4293      	cmp	r3, r2
 8006950:	d113      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	3b01      	subs	r3, #1
 8006960:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006962:	429a      	cmp	r2, r3
 8006964:	d109      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d06e      	beq.n	8006a58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b0c      	cmp	r3, #12
 800697e:	d069      	beq.n	8006a54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006980:	4b64      	ldr	r3, [pc, #400]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800698c:	4b61      	ldr	r3, [pc, #388]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0b7      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800699c:	4b5d      	ldr	r3, [pc, #372]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a5c      	ldr	r2, [pc, #368]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 80069a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069a8:	f7fd fc82 	bl	80042b0 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fd fc7e 	bl	80042b0 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e0a4      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069c2:	4b54      	ldr	r3, [pc, #336]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ce:	4b51      	ldr	r3, [pc, #324]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	4b51      	ldr	r3, [pc, #324]	; (8006b18 <HAL_RCC_OscConfig+0x7c8>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069de:	3a01      	subs	r2, #1
 80069e0:	0112      	lsls	r2, r2, #4
 80069e2:	4311      	orrs	r1, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069e8:	0212      	lsls	r2, r2, #8
 80069ea:	4311      	orrs	r1, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069f0:	0852      	lsrs	r2, r2, #1
 80069f2:	3a01      	subs	r2, #1
 80069f4:	0552      	lsls	r2, r2, #21
 80069f6:	4311      	orrs	r1, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069fc:	0852      	lsrs	r2, r2, #1
 80069fe:	3a01      	subs	r2, #1
 8006a00:	0652      	lsls	r2, r2, #25
 8006a02:	4311      	orrs	r1, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a08:	0912      	lsrs	r2, r2, #4
 8006a0a:	0452      	lsls	r2, r2, #17
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	4941      	ldr	r1, [pc, #260]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a14:	4b3f      	ldr	r3, [pc, #252]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a3e      	ldr	r2, [pc, #248]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a20:	4b3c      	ldr	r3, [pc, #240]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a3b      	ldr	r2, [pc, #236]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a2c:	f7fd fc40 	bl	80042b0 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fd fc3c 	bl	80042b0 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e062      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a46:	4b33      	ldr	r3, [pc, #204]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a52:	e05a      	b.n	8006b0a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e059      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a58:	4b2e      	ldr	r3, [pc, #184]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d152      	bne.n	8006b0a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a64:	4b2b      	ldr	r3, [pc, #172]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a70:	4b28      	ldr	r3, [pc, #160]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a27      	ldr	r2, [pc, #156]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a7c:	f7fd fc18 	bl	80042b0 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a84:	f7fd fc14 	bl	80042b0 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e03a      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a96:	4b1f      	ldr	r3, [pc, #124]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0x734>
 8006aa2:	e032      	b.n	8006b0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b0c      	cmp	r3, #12
 8006aa8:	d02d      	beq.n	8006b06 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006ab6:	4b17      	ldr	r3, [pc, #92]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006ac2:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	4a13      	ldr	r2, [pc, #76]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006ac8:	f023 0303 	bic.w	r3, r3, #3
 8006acc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	4a10      	ldr	r2, [pc, #64]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006ad4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006adc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7fd fbe7 	bl	80042b0 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae6:	f7fd fbe3 	bl	80042b0 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e009      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af8:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <HAL_RCC_OscConfig+0x7c4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x796>
 8006b04:	e001      	b.n	8006b0a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40021000 	.word	0x40021000
 8006b18:	f99d808c 	.word	0xf99d808c

08006b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0c8      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b30:	4b66      	ldr	r3, [pc, #408]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d910      	bls.n	8006b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b3e:	4b63      	ldr	r3, [pc, #396]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 0207 	bic.w	r2, r3, #7
 8006b46:	4961      	ldr	r1, [pc, #388]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b4e:	4b5f      	ldr	r3, [pc, #380]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0b0      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d04c      	beq.n	8006c06 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b74:	4b56      	ldr	r3, [pc, #344]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d121      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e09e      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b8c:	4b50      	ldr	r3, [pc, #320]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d115      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e092      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ba4:	4b4a      	ldr	r3, [pc, #296]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d109      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e086      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bb4:	4b46      	ldr	r3, [pc, #280]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e07e      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bc4:	4b42      	ldr	r3, [pc, #264]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f023 0203 	bic.w	r2, r3, #3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	493f      	ldr	r1, [pc, #252]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd6:	f7fd fb6b 	bl	80042b0 <HAL_GetTick>
 8006bda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bdc:	e00a      	b.n	8006bf4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bde:	f7fd fb67 	bl	80042b0 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e066      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf4:	4b36      	ldr	r3, [pc, #216]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 020c 	and.w	r2, r3, #12
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d1eb      	bne.n	8006bde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d008      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c12:	4b2f      	ldr	r3, [pc, #188]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	492c      	ldr	r1, [pc, #176]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c24:	4b29      	ldr	r3, [pc, #164]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d210      	bcs.n	8006c54 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 0207 	bic.w	r2, r3, #7
 8006c3a:	4924      	ldr	r1, [pc, #144]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b22      	ldr	r3, [pc, #136]	; (8006ccc <HAL_RCC_ClockConfig+0x1b0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e036      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c60:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4918      	ldr	r1, [pc, #96]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c7e:	4b14      	ldr	r3, [pc, #80]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	4910      	ldr	r1, [pc, #64]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c92:	f000 f825 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006c96:	4602      	mov	r2, r0
 8006c98:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	091b      	lsrs	r3, r3, #4
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	490c      	ldr	r1, [pc, #48]	; (8006cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca4:	5ccb      	ldrb	r3, [r1, r3]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <HAL_RCC_ClockConfig+0x1c0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fc ff0c 	bl	8003ad4 <HAL_InitTick>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	72fb      	strb	r3, [r7, #11]

  return status;
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40022000 	.word	0x40022000
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	08013f4c 	.word	0x08013f4c
 8006cd8:	2000013c 	.word	0x2000013c
 8006cdc:	20000140 	.word	0x20000140

08006ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b089      	sub	sp, #36	; 0x24
 8006ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cee:	4b3e      	ldr	r3, [pc, #248]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
 8006cf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cf8:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_RCC_GetSysClockFreq+0x34>
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	2b0c      	cmp	r3, #12
 8006d0c:	d121      	bne.n	8006d52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d11e      	bne.n	8006d52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d14:	4b34      	ldr	r3, [pc, #208]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d20:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	e005      	b.n	8006d3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d30:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d3c:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d50:	e00a      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d102      	bne.n	8006d5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	e004      	b.n	8006d68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d101      	bne.n	8006d68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d64:	4b22      	ldr	r3, [pc, #136]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b0c      	cmp	r3, #12
 8006d6c:	d134      	bne.n	8006dd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d6e:	4b1e      	ldr	r3, [pc, #120]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d003      	beq.n	8006d8c <HAL_RCC_GetSysClockFreq+0xac>
 8006d84:	e005      	b.n	8006d92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d86:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d88:	617b      	str	r3, [r7, #20]
      break;
 8006d8a:	e005      	b.n	8006d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d8c:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d8e:	617b      	str	r3, [r7, #20]
      break;
 8006d90:	e002      	b.n	8006d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	617b      	str	r3, [r7, #20]
      break;
 8006d96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d98:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	091b      	lsrs	r3, r3, #4
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	3301      	adds	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	fb02 f203 	mul.w	r2, r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	0e5b      	lsrs	r3, r3, #25
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	3301      	adds	r3, #1
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3724      	adds	r7, #36	; 0x24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40021000 	.word	0x40021000
 8006dec:	08013f64 	.word	0x08013f64
 8006df0:	00f42400 	.word	0x00f42400

08006df4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006df8:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	2000013c 	.word	0x2000013c

08006e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e10:	f7ff fff0 	bl	8006df4 <HAL_RCC_GetHCLKFreq>
 8006e14:	4602      	mov	r2, r0
 8006e16:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	4904      	ldr	r1, [pc, #16]	; (8006e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e22:	5ccb      	ldrb	r3, [r1, r3]
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40021000 	.word	0x40021000
 8006e34:	08013f5c 	.word	0x08013f5c

08006e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e3c:	f7ff ffda 	bl	8006df4 <HAL_RCC_GetHCLKFreq>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	0adb      	lsrs	r3, r3, #11
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	4904      	ldr	r1, [pc, #16]	; (8006e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e4e:	5ccb      	ldrb	r3, [r1, r3]
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	08013f5c 	.word	0x08013f5c

08006e64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	220f      	movs	r2, #15
 8006e72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006e74:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 0203 	and.w	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ea6:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <HAL_RCC_GetClockConfig+0x60>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0207 	and.w	r2, r3, #7
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	40022000 	.word	0x40022000

08006ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ed4:	4b2a      	ldr	r3, [pc, #168]	; (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ee0:	f7ff f9d2 	bl	8006288 <HAL_PWREx_GetVoltageRange>
 8006ee4:	6178      	str	r0, [r7, #20]
 8006ee6:	e014      	b.n	8006f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ee8:	4b25      	ldr	r3, [pc, #148]	; (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	4a24      	ldr	r2, [pc, #144]	; (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef4:	4b22      	ldr	r3, [pc, #136]	; (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f00:	f7ff f9c2 	bl	8006288 <HAL_PWREx_GetVoltageRange>
 8006f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f06:	4b1e      	ldr	r3, [pc, #120]	; (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0a:	4a1d      	ldr	r2, [pc, #116]	; (8006f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f18:	d10b      	bne.n	8006f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b80      	cmp	r3, #128	; 0x80
 8006f1e:	d919      	bls.n	8006f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2ba0      	cmp	r3, #160	; 0xa0
 8006f24:	d902      	bls.n	8006f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f26:	2302      	movs	r3, #2
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	e013      	b.n	8006f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	e010      	b.n	8006f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b80      	cmp	r3, #128	; 0x80
 8006f36:	d902      	bls.n	8006f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f38:	2303      	movs	r3, #3
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	e00a      	b.n	8006f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b80      	cmp	r3, #128	; 0x80
 8006f42:	d102      	bne.n	8006f4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f44:	2302      	movs	r3, #2
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	e004      	b.n	8006f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b70      	cmp	r3, #112	; 0x70
 8006f4e:	d101      	bne.n	8006f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f50:	2301      	movs	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f54:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f023 0207 	bic.w	r2, r3, #7
 8006f5c:	4909      	ldr	r1, [pc, #36]	; (8006f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d001      	beq.n	8006f76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40021000 	.word	0x40021000
 8006f84:	40022000 	.word	0x40022000

08006f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f90:	2300      	movs	r3, #0
 8006f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f94:	2300      	movs	r3, #0
 8006f96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d041      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fac:	d02a      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006fae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fb2:	d824      	bhi.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fb8:	d008      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fbe:	d81e      	bhi.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fc8:	d010      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fca:	e018      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fcc:	4b86      	ldr	r3, [pc, #536]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	4a85      	ldr	r2, [pc, #532]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fd8:	e015      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fabb 	bl	800755c <RCCEx_PLLSAI1_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fea:	e00c      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3320      	adds	r3, #32
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fba6 	bl	8007744 <RCCEx_PLLSAI2_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ffc:	e003      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	74fb      	strb	r3, [r7, #19]
      break;
 8007002:	e000      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007006:	7cfb      	ldrb	r3, [r7, #19]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10b      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800700c:	4b76      	ldr	r3, [pc, #472]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800701a:	4973      	ldr	r1, [pc, #460]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007022:	e001      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007024:	7cfb      	ldrb	r3, [r7, #19]
 8007026:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d041      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800703c:	d02a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800703e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007042:	d824      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007048:	d008      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800704a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800704e:	d81e      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007058:	d010      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800705a:	e018      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800705c:	4b62      	ldr	r3, [pc, #392]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4a61      	ldr	r2, [pc, #388]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007066:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007068:	e015      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3304      	adds	r3, #4
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fa73 	bl	800755c <RCCEx_PLLSAI1_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800707a:	e00c      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3320      	adds	r3, #32
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f000 fb5e 	bl	8007744 <RCCEx_PLLSAI2_Config>
 8007088:	4603      	mov	r3, r0
 800708a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800708c:	e003      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	74fb      	strb	r3, [r7, #19]
      break;
 8007092:	e000      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007096:	7cfb      	ldrb	r3, [r7, #19]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10b      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800709c:	4b52      	ldr	r3, [pc, #328]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070aa:	494f      	ldr	r1, [pc, #316]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070b2:	e001      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	7cfb      	ldrb	r3, [r7, #19]
 80070b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80a0 	beq.w	8007206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c6:	2300      	movs	r3, #0
 80070c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e000      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80070da:	2300      	movs	r3, #0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00d      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070e0:	4b41      	ldr	r3, [pc, #260]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e4:	4a40      	ldr	r2, [pc, #256]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ea:	6593      	str	r3, [r2, #88]	; 0x58
 80070ec:	4b3e      	ldr	r3, [pc, #248]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f4:	60bb      	str	r3, [r7, #8]
 80070f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f8:	2301      	movs	r3, #1
 80070fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070fc:	4b3b      	ldr	r3, [pc, #236]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a3a      	ldr	r2, [pc, #232]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007106:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007108:	f7fd f8d2 	bl	80042b0 <HAL_GetTick>
 800710c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800710e:	e009      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007110:	f7fd f8ce 	bl	80042b0 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d902      	bls.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	74fb      	strb	r3, [r7, #19]
        break;
 8007122:	e005      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007124:	4b31      	ldr	r3, [pc, #196]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0ef      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007130:	7cfb      	ldrb	r3, [r7, #19]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d15c      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007136:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007140:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01f      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	429a      	cmp	r2, r3
 8007152:	d019      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007154:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800715e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007160:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	4a20      	ldr	r2, [pc, #128]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800716c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007170:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800717c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007180:	4a19      	ldr	r2, [pc, #100]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d016      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007192:	f7fd f88d 	bl	80042b0 <HAL_GetTick>
 8007196:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007198:	e00b      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800719a:	f7fd f889 	bl	80042b0 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d902      	bls.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	74fb      	strb	r3, [r7, #19]
            break;
 80071b0:	e006      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0ec      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10c      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d6:	4904      	ldr	r1, [pc, #16]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071de:	e009      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071e0:	7cfb      	ldrb	r3, [r7, #19]
 80071e2:	74bb      	strb	r3, [r7, #18]
 80071e4:	e006      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80071e6:	bf00      	nop
 80071e8:	40021000 	.word	0x40021000
 80071ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071f4:	7c7b      	ldrb	r3, [r7, #17]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d105      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071fa:	4b9e      	ldr	r3, [pc, #632]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	4a9d      	ldr	r2, [pc, #628]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007204:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007212:	4b98      	ldr	r3, [pc, #608]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007218:	f023 0203 	bic.w	r2, r3, #3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	4994      	ldr	r1, [pc, #592]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007234:	4b8f      	ldr	r3, [pc, #572]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723a:	f023 020c 	bic.w	r2, r3, #12
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	498c      	ldr	r1, [pc, #560]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007256:	4b87      	ldr	r3, [pc, #540]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	4983      	ldr	r1, [pc, #524]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007278:	4b7e      	ldr	r3, [pc, #504]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	497b      	ldr	r1, [pc, #492]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800729a:	4b76      	ldr	r3, [pc, #472]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a8:	4972      	ldr	r1, [pc, #456]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072bc:	4b6d      	ldr	r3, [pc, #436]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ca:	496a      	ldr	r1, [pc, #424]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072de:	4b65      	ldr	r3, [pc, #404]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	4961      	ldr	r1, [pc, #388]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007300:	4b5c      	ldr	r3, [pc, #368]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730e:	4959      	ldr	r1, [pc, #356]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007322:	4b54      	ldr	r3, [pc, #336]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007328:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007330:	4950      	ldr	r1, [pc, #320]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007344:	4b4b      	ldr	r3, [pc, #300]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	4948      	ldr	r1, [pc, #288]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007366:	4b43      	ldr	r3, [pc, #268]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007374:	493f      	ldr	r1, [pc, #252]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d028      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007388:	4b3a      	ldr	r3, [pc, #232]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007396:	4937      	ldr	r1, [pc, #220]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073a6:	d106      	bne.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073a8:	4b32      	ldr	r3, [pc, #200]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4a31      	ldr	r2, [pc, #196]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073b2:	60d3      	str	r3, [r2, #12]
 80073b4:	e011      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073be:	d10c      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3304      	adds	r3, #4
 80073c4:	2101      	movs	r1, #1
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 f8c8 	bl	800755c <RCCEx_PLLSAI1_Config>
 80073cc:	4603      	mov	r3, r0
 80073ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073d0:	7cfb      	ldrb	r3, [r7, #19]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80073d6:	7cfb      	ldrb	r3, [r7, #19]
 80073d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d028      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073e6:	4b23      	ldr	r3, [pc, #140]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	491f      	ldr	r1, [pc, #124]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007404:	d106      	bne.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007406:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	4a1a      	ldr	r2, [pc, #104]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800740c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007410:	60d3      	str	r3, [r2, #12]
 8007412:	e011      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800741c:	d10c      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3304      	adds	r3, #4
 8007422:	2101      	movs	r1, #1
 8007424:	4618      	mov	r0, r3
 8007426:	f000 f899 	bl	800755c <RCCEx_PLLSAI1_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800742e:	7cfb      	ldrb	r3, [r7, #19]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007434:	7cfb      	ldrb	r3, [r7, #19]
 8007436:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d02b      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007444:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007452:	4908      	ldr	r1, [pc, #32]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007462:	d109      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007464:	4b03      	ldr	r3, [pc, #12]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4a02      	ldr	r2, [pc, #8]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800746a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800746e:	60d3      	str	r3, [r2, #12]
 8007470:	e014      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007472:	bf00      	nop
 8007474:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007480:	d10c      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3304      	adds	r3, #4
 8007486:	2101      	movs	r1, #1
 8007488:	4618      	mov	r0, r3
 800748a:	f000 f867 	bl	800755c <RCCEx_PLLSAI1_Config>
 800748e:	4603      	mov	r3, r0
 8007490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007492:	7cfb      	ldrb	r3, [r7, #19]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007498:	7cfb      	ldrb	r3, [r7, #19]
 800749a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d02f      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074a8:	4b2b      	ldr	r3, [pc, #172]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074b6:	4928      	ldr	r1, [pc, #160]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074c6:	d10d      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	2102      	movs	r1, #2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f844 	bl	800755c <RCCEx_PLLSAI1_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d014      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074de:	7cfb      	ldrb	r3, [r7, #19]
 80074e0:	74bb      	strb	r3, [r7, #18]
 80074e2:	e011      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ec:	d10c      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3320      	adds	r3, #32
 80074f2:	2102      	movs	r1, #2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f925 	bl	8007744 <RCCEx_PLLSAI2_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074fe:	7cfb      	ldrb	r3, [r7, #19]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007504:	7cfb      	ldrb	r3, [r7, #19]
 8007506:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007514:	4b10      	ldr	r3, [pc, #64]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007522:	490d      	ldr	r1, [pc, #52]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007546:	4904      	ldr	r1, [pc, #16]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800754e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40021000 	.word	0x40021000

0800755c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800756a:	4b75      	ldr	r3, [pc, #468]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f003 0303 	and.w	r3, r3, #3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d018      	beq.n	80075a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007576:	4b72      	ldr	r3, [pc, #456]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0203 	and.w	r2, r3, #3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d10d      	bne.n	80075a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
       ||
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800758e:	4b6c      	ldr	r3, [pc, #432]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	091b      	lsrs	r3, r3, #4
 8007594:	f003 0307 	and.w	r3, r3, #7
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
       ||
 800759e:	429a      	cmp	r2, r3
 80075a0:	d047      	beq.n	8007632 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	73fb      	strb	r3, [r7, #15]
 80075a6:	e044      	b.n	8007632 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d018      	beq.n	80075e2 <RCCEx_PLLSAI1_Config+0x86>
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d825      	bhi.n	8007600 <RCCEx_PLLSAI1_Config+0xa4>
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d002      	beq.n	80075be <RCCEx_PLLSAI1_Config+0x62>
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d009      	beq.n	80075d0 <RCCEx_PLLSAI1_Config+0x74>
 80075bc:	e020      	b.n	8007600 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075be:	4b60      	ldr	r3, [pc, #384]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d11d      	bne.n	8007606 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ce:	e01a      	b.n	8007606 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075d0:	4b5b      	ldr	r3, [pc, #364]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d116      	bne.n	800760a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075e0:	e013      	b.n	800760a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075e2:	4b57      	ldr	r3, [pc, #348]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10f      	bne.n	800760e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075ee:	4b54      	ldr	r3, [pc, #336]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075fe:	e006      	b.n	800760e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]
      break;
 8007604:	e004      	b.n	8007610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007606:	bf00      	nop
 8007608:	e002      	b.n	8007610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800760a:	bf00      	nop
 800760c:	e000      	b.n	8007610 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800760e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10d      	bne.n	8007632 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007616:	4b4a      	ldr	r3, [pc, #296]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	3b01      	subs	r3, #1
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	430b      	orrs	r3, r1
 800762c:	4944      	ldr	r1, [pc, #272]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800762e:	4313      	orrs	r3, r2
 8007630:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d17d      	bne.n	8007734 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007638:	4b41      	ldr	r3, [pc, #260]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a40      	ldr	r2, [pc, #256]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800763e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007644:	f7fc fe34 	bl	80042b0 <HAL_GetTick>
 8007648:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800764a:	e009      	b.n	8007660 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800764c:	f7fc fe30 	bl	80042b0 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d902      	bls.n	8007660 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	73fb      	strb	r3, [r7, #15]
        break;
 800765e:	e005      	b.n	800766c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007660:	4b37      	ldr	r3, [pc, #220]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1ef      	bne.n	800764c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d160      	bne.n	8007734 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d111      	bne.n	800769c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007678:	4b31      	ldr	r3, [pc, #196]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	6892      	ldr	r2, [r2, #8]
 8007688:	0211      	lsls	r1, r2, #8
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68d2      	ldr	r2, [r2, #12]
 800768e:	0912      	lsrs	r2, r2, #4
 8007690:	0452      	lsls	r2, r2, #17
 8007692:	430a      	orrs	r2, r1
 8007694:	492a      	ldr	r1, [pc, #168]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007696:	4313      	orrs	r3, r2
 8007698:	610b      	str	r3, [r1, #16]
 800769a:	e027      	b.n	80076ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d112      	bne.n	80076c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076a2:	4b27      	ldr	r3, [pc, #156]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80076aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6892      	ldr	r2, [r2, #8]
 80076b2:	0211      	lsls	r1, r2, #8
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6912      	ldr	r2, [r2, #16]
 80076b8:	0852      	lsrs	r2, r2, #1
 80076ba:	3a01      	subs	r2, #1
 80076bc:	0552      	lsls	r2, r2, #21
 80076be:	430a      	orrs	r2, r1
 80076c0:	491f      	ldr	r1, [pc, #124]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	610b      	str	r3, [r1, #16]
 80076c6:	e011      	b.n	80076ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6892      	ldr	r2, [r2, #8]
 80076d8:	0211      	lsls	r1, r2, #8
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6952      	ldr	r2, [r2, #20]
 80076de:	0852      	lsrs	r2, r2, #1
 80076e0:	3a01      	subs	r2, #1
 80076e2:	0652      	lsls	r2, r2, #25
 80076e4:	430a      	orrs	r2, r1
 80076e6:	4916      	ldr	r1, [pc, #88]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f8:	f7fc fdda 	bl	80042b0 <HAL_GetTick>
 80076fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076fe:	e009      	b.n	8007714 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007700:	f7fc fdd6 	bl	80042b0 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d902      	bls.n	8007714 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	73fb      	strb	r3, [r7, #15]
          break;
 8007712:	e005      	b.n	8007720 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0ef      	beq.n	8007700 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007720:	7bfb      	ldrb	r3, [r7, #15]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007728:	691a      	ldr	r2, [r3, #16]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	4904      	ldr	r1, [pc, #16]	; (8007740 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007730:	4313      	orrs	r3, r2
 8007732:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40021000 	.word	0x40021000

08007744 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007752:	4b6a      	ldr	r3, [pc, #424]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d018      	beq.n	8007790 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800775e:	4b67      	ldr	r3, [pc, #412]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0203 	and.w	r2, r3, #3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d10d      	bne.n	800778a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
       ||
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007776:	4b61      	ldr	r3, [pc, #388]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	091b      	lsrs	r3, r3, #4
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
       ||
 8007786:	429a      	cmp	r2, r3
 8007788:	d047      	beq.n	800781a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
 800778e:	e044      	b.n	800781a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b03      	cmp	r3, #3
 8007796:	d018      	beq.n	80077ca <RCCEx_PLLSAI2_Config+0x86>
 8007798:	2b03      	cmp	r3, #3
 800779a:	d825      	bhi.n	80077e8 <RCCEx_PLLSAI2_Config+0xa4>
 800779c:	2b01      	cmp	r3, #1
 800779e:	d002      	beq.n	80077a6 <RCCEx_PLLSAI2_Config+0x62>
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d009      	beq.n	80077b8 <RCCEx_PLLSAI2_Config+0x74>
 80077a4:	e020      	b.n	80077e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80077a6:	4b55      	ldr	r3, [pc, #340]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d11d      	bne.n	80077ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077b6:	e01a      	b.n	80077ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077b8:	4b50      	ldr	r3, [pc, #320]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d116      	bne.n	80077f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077c8:	e013      	b.n	80077f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077ca:	4b4c      	ldr	r3, [pc, #304]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10f      	bne.n	80077f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077d6:	4b49      	ldr	r3, [pc, #292]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077e6:	e006      	b.n	80077f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
      break;
 80077ec:	e004      	b.n	80077f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077ee:	bf00      	nop
 80077f0:	e002      	b.n	80077f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10d      	bne.n	800781a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077fe:	4b3f      	ldr	r3, [pc, #252]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	3b01      	subs	r3, #1
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	430b      	orrs	r3, r1
 8007814:	4939      	ldr	r1, [pc, #228]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007816:	4313      	orrs	r3, r2
 8007818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d167      	bne.n	80078f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007820:	4b36      	ldr	r3, [pc, #216]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a35      	ldr	r2, [pc, #212]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800782a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782c:	f7fc fd40 	bl	80042b0 <HAL_GetTick>
 8007830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007832:	e009      	b.n	8007848 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007834:	f7fc fd3c 	bl	80042b0 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d902      	bls.n	8007848 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	73fb      	strb	r3, [r7, #15]
        break;
 8007846:	e005      	b.n	8007854 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007848:	4b2c      	ldr	r3, [pc, #176]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1ef      	bne.n	8007834 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d14a      	bne.n	80078f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d111      	bne.n	8007884 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007860:	4b26      	ldr	r3, [pc, #152]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6892      	ldr	r2, [r2, #8]
 8007870:	0211      	lsls	r1, r2, #8
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	68d2      	ldr	r2, [r2, #12]
 8007876:	0912      	lsrs	r2, r2, #4
 8007878:	0452      	lsls	r2, r2, #17
 800787a:	430a      	orrs	r2, r1
 800787c:	491f      	ldr	r1, [pc, #124]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800787e:	4313      	orrs	r3, r2
 8007880:	614b      	str	r3, [r1, #20]
 8007882:	e011      	b.n	80078a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800788c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6892      	ldr	r2, [r2, #8]
 8007894:	0211      	lsls	r1, r2, #8
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6912      	ldr	r2, [r2, #16]
 800789a:	0852      	lsrs	r2, r2, #1
 800789c:	3a01      	subs	r2, #1
 800789e:	0652      	lsls	r2, r2, #25
 80078a0:	430a      	orrs	r2, r1
 80078a2:	4916      	ldr	r1, [pc, #88]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80078a8:	4b14      	ldr	r3, [pc, #80]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a13      	ldr	r2, [pc, #76]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b4:	f7fc fcfc 	bl	80042b0 <HAL_GetTick>
 80078b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078ba:	e009      	b.n	80078d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078bc:	f7fc fcf8 	bl	80042b0 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d902      	bls.n	80078d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	73fb      	strb	r3, [r7, #15]
          break;
 80078ce:	e005      	b.n	80078dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ef      	beq.n	80078bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078e2:	4b06      	ldr	r3, [pc, #24]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	4904      	ldr	r1, [pc, #16]	; (80078fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	40021000 	.word	0x40021000

08007900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e095      	b.n	8007a3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	d108      	bne.n	800792c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007922:	d009      	beq.n	8007938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	61da      	str	r2, [r3, #28]
 800792a:	e005      	b.n	8007938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fb fdb8 	bl	80034c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007978:	d902      	bls.n	8007980 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	e002      	b.n	8007986 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007984:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800798e:	d007      	beq.n	80079a0 <HAL_SPI_Init+0xa0>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007998:	d002      	beq.n	80079a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	ea42 0103 	orr.w	r1, r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	f003 0204 	and.w	r2, r3, #4
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a1c:	ea42 0103 	orr.w	r1, r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b088      	sub	sp, #32
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	603b      	str	r3, [r7, #0]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_SPI_Transmit+0x22>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e158      	b.n	8007d1a <HAL_SPI_Transmit+0x2d4>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a70:	f7fc fc1e 	bl	80042b0 <HAL_GetTick>
 8007a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d002      	beq.n	8007a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a86:	2302      	movs	r3, #2
 8007a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a8a:	e13d      	b.n	8007d08 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <HAL_SPI_Transmit+0x52>
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a9c:	e134      	b.n	8007d08 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	88fa      	ldrh	r2, [r7, #6]
 8007ab6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	88fa      	ldrh	r2, [r7, #6]
 8007abc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae8:	d10f      	bne.n	8007b0a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d007      	beq.n	8007b28 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b30:	d94b      	bls.n	8007bca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <HAL_SPI_Transmit+0xfa>
 8007b3a:	8afb      	ldrh	r3, [r7, #22]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d13e      	bne.n	8007bbe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	881a      	ldrh	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	1c9a      	adds	r2, r3, #2
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b64:	e02b      	b.n	8007bbe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d112      	bne.n	8007b9a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b78:	881a      	ldrh	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	1c9a      	adds	r2, r3, #2
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	3b01      	subs	r3, #1
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b98:	e011      	b.n	8007bbe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b9a:	f7fc fb89 	bl	80042b0 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d803      	bhi.n	8007bb2 <HAL_SPI_Transmit+0x16c>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bb0:	d102      	bne.n	8007bb8 <HAL_SPI_Transmit+0x172>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bbc:	e0a4      	b.n	8007d08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1ce      	bne.n	8007b66 <HAL_SPI_Transmit+0x120>
 8007bc8:	e07c      	b.n	8007cc4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_SPI_Transmit+0x192>
 8007bd2:	8afb      	ldrh	r3, [r7, #22]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d170      	bne.n	8007cba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d912      	bls.n	8007c08 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	881a      	ldrh	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	1c9a      	adds	r2, r3, #2
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b02      	subs	r3, #2
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c06:	e058      	b.n	8007cba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007c2e:	e044      	b.n	8007cba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d12b      	bne.n	8007c96 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d912      	bls.n	8007c6e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	881a      	ldrh	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	1c9a      	adds	r2, r3, #2
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	3b02      	subs	r3, #2
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c6c:	e025      	b.n	8007cba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	330c      	adds	r3, #12
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c94:	e011      	b.n	8007cba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c96:	f7fc fb0b 	bl	80042b0 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d803      	bhi.n	8007cae <HAL_SPI_Transmit+0x268>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cac:	d102      	bne.n	8007cb4 <HAL_SPI_Transmit+0x26e>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007cb8:	e026      	b.n	8007d08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1b5      	bne.n	8007c30 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fb57 	bl	800837c <SPI_EndRxTxTransaction>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e000      	b.n	8007d08 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007d06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d18:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b08a      	sub	sp, #40	; 0x28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d30:	2301      	movs	r3, #1
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_SPI_TransmitReceive+0x26>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e1fb      	b.n	8008140 <HAL_SPI_TransmitReceive+0x41e>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d50:	f7fc faae 	bl	80042b0 <HAL_GetTick>
 8007d54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d64:	887b      	ldrh	r3, [r7, #2]
 8007d66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d68:	887b      	ldrh	r3, [r7, #2]
 8007d6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d6c:	7efb      	ldrb	r3, [r7, #27]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d00e      	beq.n	8007d90 <HAL_SPI_TransmitReceive+0x6e>
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d78:	d106      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x66>
 8007d82:	7efb      	ldrb	r3, [r7, #27]
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d003      	beq.n	8007d90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d8e:	e1cd      	b.n	800812c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <HAL_SPI_TransmitReceive+0x80>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_SPI_TransmitReceive+0x80>
 8007d9c:	887b      	ldrh	r3, [r7, #2]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007da8:	e1c0      	b.n	800812c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d003      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2205      	movs	r2, #5
 8007dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	887a      	ldrh	r2, [r7, #2]
 8007dce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	887a      	ldrh	r2, [r7, #2]
 8007dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	887a      	ldrh	r2, [r7, #2]
 8007de4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	887a      	ldrh	r2, [r7, #2]
 8007dea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e00:	d802      	bhi.n	8007e08 <HAL_SPI_TransmitReceive+0xe6>
 8007e02:	8a3b      	ldrh	r3, [r7, #16]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d908      	bls.n	8007e1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e16:	605a      	str	r2, [r3, #4]
 8007e18:	e007      	b.n	8007e2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b40      	cmp	r3, #64	; 0x40
 8007e36:	d007      	beq.n	8007e48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e50:	d97c      	bls.n	8007f4c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_SPI_TransmitReceive+0x13e>
 8007e5a:	8a7b      	ldrh	r3, [r7, #18]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d169      	bne.n	8007f34 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e64:	881a      	ldrh	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	1c9a      	adds	r2, r3, #2
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e84:	e056      	b.n	8007f34 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d11b      	bne.n	8007ecc <HAL_SPI_TransmitReceive+0x1aa>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d016      	beq.n	8007ecc <HAL_SPI_TransmitReceive+0x1aa>
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d113      	bne.n	8007ecc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	881a      	ldrh	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	1c9a      	adds	r2, r3, #2
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d11c      	bne.n	8007f14 <HAL_SPI_TransmitReceive+0x1f2>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d016      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	b292      	uxth	r2, r2
 8007ef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef8:	1c9a      	adds	r2, r3, #2
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f10:	2301      	movs	r3, #1
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f14:	f7fc f9cc 	bl	80042b0 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d807      	bhi.n	8007f34 <HAL_SPI_TransmitReceive+0x212>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f2a:	d003      	beq.n	8007f34 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f32:	e0fb      	b.n	800812c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1a3      	bne.n	8007e86 <HAL_SPI_TransmitReceive+0x164>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d19d      	bne.n	8007e86 <HAL_SPI_TransmitReceive+0x164>
 8007f4a:	e0df      	b.n	800810c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <HAL_SPI_TransmitReceive+0x23a>
 8007f54:	8a7b      	ldrh	r3, [r7, #18]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	f040 80cb 	bne.w	80080f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d912      	bls.n	8007f8c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6a:	881a      	ldrh	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	1c9a      	adds	r2, r3, #2
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b02      	subs	r3, #2
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f8a:	e0b2      	b.n	80080f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	7812      	ldrb	r2, [r2, #0]
 8007f98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	3b01      	subs	r3, #1
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fb2:	e09e      	b.n	80080f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d134      	bne.n	800802c <HAL_SPI_TransmitReceive+0x30a>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02f      	beq.n	800802c <HAL_SPI_TransmitReceive+0x30a>
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d12c      	bne.n	800802c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d912      	bls.n	8008002 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	881a      	ldrh	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	1c9a      	adds	r2, r3, #2
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3b02      	subs	r3, #2
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008000:	e012      	b.n	8008028 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	330c      	adds	r3, #12
 800800c:	7812      	ldrb	r2, [r2, #0]
 800800e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b01      	cmp	r3, #1
 8008038:	d148      	bne.n	80080cc <HAL_SPI_TransmitReceive+0x3aa>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d042      	beq.n	80080cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b01      	cmp	r3, #1
 8008050:	d923      	bls.n	800809a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	b292      	uxth	r2, r2
 800805e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	1c9a      	adds	r2, r3, #2
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b02      	subs	r3, #2
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008082:	b29b      	uxth	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	d81f      	bhi.n	80080c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008096:	605a      	str	r2, [r3, #4]
 8008098:	e016      	b.n	80080c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f103 020c 	add.w	r2, r3, #12
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	7812      	ldrb	r2, [r2, #0]
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080c8:	2301      	movs	r3, #1
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080cc:	f7fc f8f0 	bl	80042b0 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d8:	429a      	cmp	r2, r3
 80080da:	d803      	bhi.n	80080e4 <HAL_SPI_TransmitReceive+0x3c2>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e2:	d102      	bne.n	80080ea <HAL_SPI_TransmitReceive+0x3c8>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080f0:	e01c      	b.n	800812c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f47f af5b 	bne.w	8007fb4 <HAL_SPI_TransmitReceive+0x292>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	f47f af54 	bne.w	8007fb4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f933 	bl	800837c <SPI_EndRxTxTransaction>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2220      	movs	r2, #32
 8008126:	661a      	str	r2, [r3, #96]	; 0x60
 8008128:	e000      	b.n	800812c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800812a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800813c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008140:	4618      	mov	r0, r3
 8008142:	3728      	adds	r7, #40	; 0x28
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	4613      	mov	r3, r2
 8008156:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008158:	f7fc f8aa 	bl	80042b0 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	4413      	add	r3, r2
 8008166:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008168:	f7fc f8a2 	bl	80042b0 <HAL_GetTick>
 800816c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800816e:	4b39      	ldr	r3, [pc, #228]	; (8008254 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	015b      	lsls	r3, r3, #5
 8008174:	0d1b      	lsrs	r3, r3, #20
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	fb02 f303 	mul.w	r3, r2, r3
 800817c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800817e:	e054      	b.n	800822a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008186:	d050      	beq.n	800822a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008188:	f7fc f892 	bl	80042b0 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	429a      	cmp	r2, r3
 8008196:	d902      	bls.n	800819e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d13d      	bne.n	800821a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081b6:	d111      	bne.n	80081dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c0:	d004      	beq.n	80081cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ca:	d107      	bne.n	80081dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e4:	d10f      	bne.n	8008206 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e017      	b.n	800824a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	3b01      	subs	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4013      	ands	r3, r2
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	429a      	cmp	r2, r3
 8008238:	bf0c      	ite	eq
 800823a:	2301      	moveq	r3, #1
 800823c:	2300      	movne	r3, #0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	461a      	mov	r2, r3
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	429a      	cmp	r2, r3
 8008246:	d19b      	bne.n	8008180 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	2000013c 	.word	0x2000013c

08008258 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008266:	f7fc f823 	bl	80042b0 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826e:	1a9b      	subs	r3, r3, r2
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	4413      	add	r3, r2
 8008274:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008276:	f7fc f81b 	bl	80042b0 <HAL_GetTick>
 800827a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800827c:	4b3e      	ldr	r3, [pc, #248]	; (8008378 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	00da      	lsls	r2, r3, #3
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	0d1b      	lsrs	r3, r3, #20
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	fb02 f303 	mul.w	r3, r2, r3
 8008292:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008294:	e062      	b.n	800835c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800829c:	d109      	bne.n	80082b2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d106      	bne.n	80082b2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80082b0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b8:	d050      	beq.n	800835c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082ba:	f7fb fff9 	bl	80042b0 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d902      	bls.n	80082d0 <SPI_WaitFifoStateUntilTimeout+0x78>
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d13d      	bne.n	800834c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082e8:	d111      	bne.n	800830e <SPI_WaitFifoStateUntilTimeout+0xb6>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f2:	d004      	beq.n	80082fe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082fc:	d107      	bne.n	800830e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008316:	d10f      	bne.n	8008338 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008336:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e010      	b.n	800836e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3b01      	subs	r3, #1
 800835a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	4013      	ands	r3, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d194      	bne.n	8008296 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	2000013c 	.word	0x2000013c

0800837c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af02      	add	r7, sp, #8
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2200      	movs	r2, #0
 8008390:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff ff5f 	bl	8008258 <SPI_WaitFifoStateUntilTimeout>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d007      	beq.n	80083b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a4:	f043 0220 	orr.w	r2, r3, #32
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e027      	b.n	8008400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2200      	movs	r2, #0
 80083b8:	2180      	movs	r1, #128	; 0x80
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7ff fec4 	bl	8008148 <SPI_WaitFlagStateUntilTimeout>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ca:	f043 0220 	orr.w	r2, r3, #32
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e014      	b.n	8008400 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2200      	movs	r2, #0
 80083de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff ff38 	bl	8008258 <SPI_WaitFifoStateUntilTimeout>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f2:	f043 0220 	orr.w	r2, r3, #32
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e000      	b.n	8008400 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e049      	b.n	80084ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008420:	b2db      	uxtb	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	d106      	bne.n	8008434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7fb f9cc 	bl	80037cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f001 f962 	bl	8009710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d001      	beq.n	80084d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e04f      	b.n	8008570 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0201 	orr.w	r2, r2, #1
 80084e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a23      	ldr	r2, [pc, #140]	; (800857c <HAL_TIM_Base_Start_IT+0xc4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d01d      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x76>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fa:	d018      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x76>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <HAL_TIM_Base_Start_IT+0xc8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x76>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <HAL_TIM_Base_Start_IT+0xcc>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d00e      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x76>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <HAL_TIM_Base_Start_IT+0xd0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d009      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x76>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1b      	ldr	r2, [pc, #108]	; (800858c <HAL_TIM_Base_Start_IT+0xd4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d004      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x76>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a19      	ldr	r2, [pc, #100]	; (8008590 <HAL_TIM_Base_Start_IT+0xd8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d115      	bne.n	800855a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	4b17      	ldr	r3, [pc, #92]	; (8008594 <HAL_TIM_Base_Start_IT+0xdc>)
 8008536:	4013      	ands	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b06      	cmp	r3, #6
 800853e:	d015      	beq.n	800856c <HAL_TIM_Base_Start_IT+0xb4>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008546:	d011      	beq.n	800856c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008558:	e008      	b.n	800856c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e000      	b.n	800856e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	40012c00 	.word	0x40012c00
 8008580:	40000400 	.word	0x40000400
 8008584:	40000800 	.word	0x40000800
 8008588:	40000c00 	.word	0x40000c00
 800858c:	40013400 	.word	0x40013400
 8008590:	40014000 	.word	0x40014000
 8008594:	00010007 	.word	0x00010007

08008598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e049      	b.n	800863e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fa ffe2 	bl	8003588 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f001 f89a 	bl	8009710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d109      	bne.n	800866c <HAL_TIM_PWM_Start_IT+0x24>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b01      	cmp	r3, #1
 8008662:	bf14      	ite	ne
 8008664:	2301      	movne	r3, #1
 8008666:	2300      	moveq	r3, #0
 8008668:	b2db      	uxtb	r3, r3
 800866a:	e03c      	b.n	80086e6 <HAL_TIM_PWM_Start_IT+0x9e>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b04      	cmp	r3, #4
 8008670:	d109      	bne.n	8008686 <HAL_TIM_PWM_Start_IT+0x3e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b01      	cmp	r3, #1
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	e02f      	b.n	80086e6 <HAL_TIM_PWM_Start_IT+0x9e>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b08      	cmp	r3, #8
 800868a:	d109      	bne.n	80086a0 <HAL_TIM_PWM_Start_IT+0x58>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b01      	cmp	r3, #1
 8008696:	bf14      	ite	ne
 8008698:	2301      	movne	r3, #1
 800869a:	2300      	moveq	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	e022      	b.n	80086e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b0c      	cmp	r3, #12
 80086a4:	d109      	bne.n	80086ba <HAL_TIM_PWM_Start_IT+0x72>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	bf14      	ite	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	2300      	moveq	r3, #0
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	e015      	b.n	80086e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d109      	bne.n	80086d4 <HAL_TIM_PWM_Start_IT+0x8c>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	bf14      	ite	ne
 80086cc:	2301      	movne	r3, #1
 80086ce:	2300      	moveq	r3, #0
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	e008      	b.n	80086e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	bf14      	ite	ne
 80086e0:	2301      	movne	r3, #1
 80086e2:	2300      	moveq	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e0e2      	b.n	80088b4 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <HAL_TIM_PWM_Start_IT+0xb6>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086fc:	e023      	b.n	8008746 <HAL_TIM_PWM_Start_IT+0xfe>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b04      	cmp	r3, #4
 8008702:	d104      	bne.n	800870e <HAL_TIM_PWM_Start_IT+0xc6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800870c:	e01b      	b.n	8008746 <HAL_TIM_PWM_Start_IT+0xfe>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b08      	cmp	r3, #8
 8008712:	d104      	bne.n	800871e <HAL_TIM_PWM_Start_IT+0xd6>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871c:	e013      	b.n	8008746 <HAL_TIM_PWM_Start_IT+0xfe>
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b0c      	cmp	r3, #12
 8008722:	d104      	bne.n	800872e <HAL_TIM_PWM_Start_IT+0xe6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800872c:	e00b      	b.n	8008746 <HAL_TIM_PWM_Start_IT+0xfe>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b10      	cmp	r3, #16
 8008732:	d104      	bne.n	800873e <HAL_TIM_PWM_Start_IT+0xf6>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800873c:	e003      	b.n	8008746 <HAL_TIM_PWM_Start_IT+0xfe>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2202      	movs	r2, #2
 8008742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b0c      	cmp	r3, #12
 800874a:	d841      	bhi.n	80087d0 <HAL_TIM_PWM_Start_IT+0x188>
 800874c:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <HAL_TIM_PWM_Start_IT+0x10c>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	08008789 	.word	0x08008789
 8008758:	080087d1 	.word	0x080087d1
 800875c:	080087d1 	.word	0x080087d1
 8008760:	080087d1 	.word	0x080087d1
 8008764:	0800879b 	.word	0x0800879b
 8008768:	080087d1 	.word	0x080087d1
 800876c:	080087d1 	.word	0x080087d1
 8008770:	080087d1 	.word	0x080087d1
 8008774:	080087ad 	.word	0x080087ad
 8008778:	080087d1 	.word	0x080087d1
 800877c:	080087d1 	.word	0x080087d1
 8008780:	080087d1 	.word	0x080087d1
 8008784:	080087bf 	.word	0x080087bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0202 	orr.w	r2, r2, #2
 8008796:	60da      	str	r2, [r3, #12]
      break;
 8008798:	e01b      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0204 	orr.w	r2, r2, #4
 80087a8:	60da      	str	r2, [r3, #12]
      break;
 80087aa:	e012      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0208 	orr.w	r2, r2, #8
 80087ba:	60da      	str	r2, [r3, #12]
      break;
 80087bc:	e009      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68da      	ldr	r2, [r3, #12]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0210 	orr.w	r2, r2, #16
 80087cc:	60da      	str	r2, [r3, #12]
      break;
 80087ce:	e000      	b.n	80087d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80087d0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2201      	movs	r2, #1
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 fb08 	bl	8009df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a35      	ldr	r2, [pc, #212]	; (80088bc <HAL_TIM_PWM_Start_IT+0x274>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a34      	ldr	r2, [pc, #208]	; (80088c0 <HAL_TIM_PWM_Start_IT+0x278>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00e      	beq.n	8008812 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a32      	ldr	r2, [pc, #200]	; (80088c4 <HAL_TIM_PWM_Start_IT+0x27c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d009      	beq.n	8008812 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a31      	ldr	r2, [pc, #196]	; (80088c8 <HAL_TIM_PWM_Start_IT+0x280>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d004      	beq.n	8008812 <HAL_TIM_PWM_Start_IT+0x1ca>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2f      	ldr	r2, [pc, #188]	; (80088cc <HAL_TIM_PWM_Start_IT+0x284>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d101      	bne.n	8008816 <HAL_TIM_PWM_Start_IT+0x1ce>
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008816:	2300      	movs	r3, #0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800882a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a22      	ldr	r2, [pc, #136]	; (80088bc <HAL_TIM_PWM_Start_IT+0x274>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01d      	beq.n	8008872 <HAL_TIM_PWM_Start_IT+0x22a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d018      	beq.n	8008872 <HAL_TIM_PWM_Start_IT+0x22a>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a22      	ldr	r2, [pc, #136]	; (80088d0 <HAL_TIM_PWM_Start_IT+0x288>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_TIM_PWM_Start_IT+0x22a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a21      	ldr	r2, [pc, #132]	; (80088d4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_PWM_Start_IT+0x22a>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1f      	ldr	r2, [pc, #124]	; (80088d8 <HAL_TIM_PWM_Start_IT+0x290>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIM_PWM_Start_IT+0x22a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a17      	ldr	r2, [pc, #92]	; (80088c0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIM_PWM_Start_IT+0x22a>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a15      	ldr	r2, [pc, #84]	; (80088c4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d115      	bne.n	800889e <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	4b18      	ldr	r3, [pc, #96]	; (80088dc <HAL_TIM_PWM_Start_IT+0x294>)
 800887a:	4013      	ands	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b06      	cmp	r3, #6
 8008882:	d015      	beq.n	80088b0 <HAL_TIM_PWM_Start_IT+0x268>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d011      	beq.n	80088b0 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889c:	e008      	b.n	80088b0 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e000      	b.n	80088b2 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40012c00 	.word	0x40012c00
 80088c0:	40013400 	.word	0x40013400
 80088c4:	40014000 	.word	0x40014000
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800
 80088d0:	40000400 	.word	0x40000400
 80088d4:	40000800 	.word	0x40000800
 80088d8:	40000c00 	.word	0x40000c00
 80088dc:	00010007 	.word	0x00010007

080088e0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b0c      	cmp	r3, #12
 80088ee:	d841      	bhi.n	8008974 <HAL_TIM_PWM_Stop_IT+0x94>
 80088f0:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <HAL_TIM_PWM_Stop_IT+0x18>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	0800892d 	.word	0x0800892d
 80088fc:	08008975 	.word	0x08008975
 8008900:	08008975 	.word	0x08008975
 8008904:	08008975 	.word	0x08008975
 8008908:	0800893f 	.word	0x0800893f
 800890c:	08008975 	.word	0x08008975
 8008910:	08008975 	.word	0x08008975
 8008914:	08008975 	.word	0x08008975
 8008918:	08008951 	.word	0x08008951
 800891c:	08008975 	.word	0x08008975
 8008920:	08008975 	.word	0x08008975
 8008924:	08008975 	.word	0x08008975
 8008928:	08008963 	.word	0x08008963
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0202 	bic.w	r2, r2, #2
 800893a:	60da      	str	r2, [r3, #12]
      break;
 800893c:	e01b      	b.n	8008976 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0204 	bic.w	r2, r2, #4
 800894c:	60da      	str	r2, [r3, #12]
      break;
 800894e:	e012      	b.n	8008976 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0208 	bic.w	r2, r2, #8
 800895e:	60da      	str	r2, [r3, #12]
      break;
 8008960:	e009      	b.n	8008976 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0210 	bic.w	r2, r2, #16
 8008970:	60da      	str	r2, [r3, #12]
      break;
 8008972:	e000      	b.n	8008976 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8008974:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2200      	movs	r2, #0
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fa36 	bl	8009df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a3e      	ldr	r2, [pc, #248]	; (8008a84 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d013      	beq.n	80089b6 <HAL_TIM_PWM_Stop_IT+0xd6>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a3d      	ldr	r2, [pc, #244]	; (8008a88 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d00e      	beq.n	80089b6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a3b      	ldr	r2, [pc, #236]	; (8008a8c <HAL_TIM_PWM_Stop_IT+0x1ac>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d009      	beq.n	80089b6 <HAL_TIM_PWM_Stop_IT+0xd6>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a3a      	ldr	r2, [pc, #232]	; (8008a90 <HAL_TIM_PWM_Stop_IT+0x1b0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d004      	beq.n	80089b6 <HAL_TIM_PWM_Stop_IT+0xd6>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a38      	ldr	r2, [pc, #224]	; (8008a94 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d101      	bne.n	80089ba <HAL_TIM_PWM_Stop_IT+0xda>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <HAL_TIM_PWM_Stop_IT+0xdc>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d017      	beq.n	80089f0 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6a1a      	ldr	r2, [r3, #32]
 80089c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10f      	bne.n	80089f0 <HAL_TIM_PWM_Stop_IT+0x110>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6a1a      	ldr	r2, [r3, #32]
 80089d6:	f240 4344 	movw	r3, #1092	; 0x444
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d107      	bne.n	80089f0 <HAL_TIM_PWM_Stop_IT+0x110>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6a1a      	ldr	r2, [r3, #32]
 80089f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10f      	bne.n	8008a20 <HAL_TIM_PWM_Stop_IT+0x140>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	f240 4344 	movw	r3, #1092	; 0x444
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d107      	bne.n	8008a20 <HAL_TIM_PWM_Stop_IT+0x140>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f022 0201 	bic.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d104      	bne.n	8008a30 <HAL_TIM_PWM_Stop_IT+0x150>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a2e:	e023      	b.n	8008a78 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d104      	bne.n	8008a40 <HAL_TIM_PWM_Stop_IT+0x160>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a3e:	e01b      	b.n	8008a78 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b08      	cmp	r3, #8
 8008a44:	d104      	bne.n	8008a50 <HAL_TIM_PWM_Stop_IT+0x170>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a4e:	e013      	b.n	8008a78 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2b0c      	cmp	r3, #12
 8008a54:	d104      	bne.n	8008a60 <HAL_TIM_PWM_Stop_IT+0x180>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a5e:	e00b      	b.n	8008a78 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b10      	cmp	r3, #16
 8008a64:	d104      	bne.n	8008a70 <HAL_TIM_PWM_Stop_IT+0x190>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a6e:	e003      	b.n	8008a78 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40012c00 	.word	0x40012c00
 8008a88:	40013400 	.word	0x40013400
 8008a8c:	40014000 	.word	0x40014000
 8008a90:	40014400 	.word	0x40014400
 8008a94:	40014800 	.word	0x40014800

08008a98 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d109      	bne.n	8008ac0 <HAL_TIM_PWM_Start_DMA+0x28>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2301      	moveq	r3, #1
 8008aba:	2300      	movne	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	e03c      	b.n	8008b3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d109      	bne.n	8008ada <HAL_TIM_PWM_Start_DMA+0x42>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	bf0c      	ite	eq
 8008ad2:	2301      	moveq	r3, #1
 8008ad4:	2300      	movne	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	e02f      	b.n	8008b3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d109      	bne.n	8008af4 <HAL_TIM_PWM_Start_DMA+0x5c>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	bf0c      	ite	eq
 8008aec:	2301      	moveq	r3, #1
 8008aee:	2300      	movne	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	e022      	b.n	8008b3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b0c      	cmp	r3, #12
 8008af8:	d109      	bne.n	8008b0e <HAL_TIM_PWM_Start_DMA+0x76>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	bf0c      	ite	eq
 8008b06:	2301      	moveq	r3, #1
 8008b08:	2300      	movne	r3, #0
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	e015      	b.n	8008b3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d109      	bne.n	8008b28 <HAL_TIM_PWM_Start_DMA+0x90>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	bf0c      	ite	eq
 8008b20:	2301      	moveq	r3, #1
 8008b22:	2300      	movne	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	e008      	b.n	8008b3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	bf0c      	ite	eq
 8008b34:	2301      	moveq	r3, #1
 8008b36:	2300      	movne	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e1a6      	b.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d109      	bne.n	8008b5c <HAL_TIM_PWM_Start_DMA+0xc4>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	bf0c      	ite	eq
 8008b54:	2301      	moveq	r3, #1
 8008b56:	2300      	movne	r3, #0
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	e03c      	b.n	8008bd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	d109      	bne.n	8008b76 <HAL_TIM_PWM_Start_DMA+0xde>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	bf0c      	ite	eq
 8008b6e:	2301      	moveq	r3, #1
 8008b70:	2300      	movne	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	e02f      	b.n	8008bd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d109      	bne.n	8008b90 <HAL_TIM_PWM_Start_DMA+0xf8>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	bf0c      	ite	eq
 8008b88:	2301      	moveq	r3, #1
 8008b8a:	2300      	movne	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	e022      	b.n	8008bd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b0c      	cmp	r3, #12
 8008b94:	d109      	bne.n	8008baa <HAL_TIM_PWM_Start_DMA+0x112>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	e015      	b.n	8008bd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b10      	cmp	r3, #16
 8008bae:	d109      	bne.n	8008bc4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	bf0c      	ite	eq
 8008bbc:	2301      	moveq	r3, #1
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	e008      	b.n	8008bd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	bf0c      	ite	eq
 8008bd0:	2301      	moveq	r3, #1
 8008bd2:	2300      	movne	r3, #0
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d034      	beq.n	8008c44 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_PWM_Start_DMA+0x152>
 8008be0:	887b      	ldrh	r3, [r7, #2]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e152      	b.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Start_DMA+0x162>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf8:	e026      	b.n	8008c48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_PWM_Start_DMA+0x172>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c08:	e01e      	b.n	8008c48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d104      	bne.n	8008c1a <HAL_TIM_PWM_Start_DMA+0x182>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c18:	e016      	b.n	8008c48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b0c      	cmp	r3, #12
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_PWM_Start_DMA+0x192>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c28:	e00e      	b.n	8008c48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b10      	cmp	r3, #16
 8008c2e:	d104      	bne.n	8008c3a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c38:	e006      	b.n	8008c48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c42:	e001      	b.n	8008c48 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e123      	b.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b0c      	cmp	r3, #12
 8008c4c:	f200 80ae 	bhi.w	8008dac <HAL_TIM_PWM_Start_DMA+0x314>
 8008c50:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8008c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c56:	bf00      	nop
 8008c58:	08008c8d 	.word	0x08008c8d
 8008c5c:	08008dad 	.word	0x08008dad
 8008c60:	08008dad 	.word	0x08008dad
 8008c64:	08008dad 	.word	0x08008dad
 8008c68:	08008cd5 	.word	0x08008cd5
 8008c6c:	08008dad 	.word	0x08008dad
 8008c70:	08008dad 	.word	0x08008dad
 8008c74:	08008dad 	.word	0x08008dad
 8008c78:	08008d1d 	.word	0x08008d1d
 8008c7c:	08008dad 	.word	0x08008dad
 8008c80:	08008dad 	.word	0x08008dad
 8008c84:	08008dad 	.word	0x08008dad
 8008c88:	08008d65 	.word	0x08008d65
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	4a81      	ldr	r2, [pc, #516]	; (8008e98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008c92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	4a80      	ldr	r2, [pc, #512]	; (8008e9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008c9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	4a7f      	ldr	r2, [pc, #508]	; (8008ea0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008ca2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3334      	adds	r3, #52	; 0x34
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	887b      	ldrh	r3, [r7, #2]
 8008cb4:	f7fc fe80 	bl	80059b8 <HAL_DMA_Start_IT>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e0e6      	b.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd0:	60da      	str	r2, [r3, #12]
      break;
 8008cd2:	e06c      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	4a6f      	ldr	r2, [pc, #444]	; (8008e98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008cda:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce0:	4a6e      	ldr	r2, [pc, #440]	; (8008e9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008ce2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	4a6d      	ldr	r2, [pc, #436]	; (8008ea0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008cea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3338      	adds	r3, #56	; 0x38
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	887b      	ldrh	r3, [r7, #2]
 8008cfc:	f7fc fe5c 	bl	80059b8 <HAL_DMA_Start_IT>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e0c2      	b.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d18:	60da      	str	r2, [r3, #12]
      break;
 8008d1a:	e048      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a5d      	ldr	r2, [pc, #372]	; (8008e98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	4a5c      	ldr	r2, [pc, #368]	; (8008e9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	4a5b      	ldr	r2, [pc, #364]	; (8008ea0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	333c      	adds	r3, #60	; 0x3c
 8008d40:	461a      	mov	r2, r3
 8008d42:	887b      	ldrh	r3, [r7, #2]
 8008d44:	f7fc fe38 	bl	80059b8 <HAL_DMA_Start_IT>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e09e      	b.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d60:	60da      	str	r2, [r3, #12]
      break;
 8008d62:	e024      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d68:	4a4b      	ldr	r2, [pc, #300]	; (8008e98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	4a4a      	ldr	r2, [pc, #296]	; (8008e9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8008d72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d78:	4a49      	ldr	r2, [pc, #292]	; (8008ea0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3340      	adds	r3, #64	; 0x40
 8008d88:	461a      	mov	r2, r3
 8008d8a:	887b      	ldrh	r3, [r7, #2]
 8008d8c:	f7fc fe14 	bl	80059b8 <HAL_DMA_Start_IT>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e07a      	b.n	8008e90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008da8:	60da      	str	r2, [r3, #12]
      break;
 8008daa:	e000      	b.n	8008dae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8008dac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2201      	movs	r2, #1
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 f81a 	bl	8009df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a38      	ldr	r2, [pc, #224]	; (8008ea4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d013      	beq.n	8008dee <HAL_TIM_PWM_Start_DMA+0x356>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a37      	ldr	r2, [pc, #220]	; (8008ea8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00e      	beq.n	8008dee <HAL_TIM_PWM_Start_DMA+0x356>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a35      	ldr	r2, [pc, #212]	; (8008eac <HAL_TIM_PWM_Start_DMA+0x414>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d009      	beq.n	8008dee <HAL_TIM_PWM_Start_DMA+0x356>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a34      	ldr	r2, [pc, #208]	; (8008eb0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d004      	beq.n	8008dee <HAL_TIM_PWM_Start_DMA+0x356>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a32      	ldr	r2, [pc, #200]	; (8008eb4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d101      	bne.n	8008df2 <HAL_TIM_PWM_Start_DMA+0x35a>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <HAL_TIM_PWM_Start_DMA+0x35c>
 8008df2:	2300      	movs	r3, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d007      	beq.n	8008e08 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a25      	ldr	r2, [pc, #148]	; (8008ea4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d01d      	beq.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1a:	d018      	beq.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a25      	ldr	r2, [pc, #148]	; (8008eb8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d013      	beq.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a24      	ldr	r2, [pc, #144]	; (8008ebc <HAL_TIM_PWM_Start_DMA+0x424>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00e      	beq.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a22      	ldr	r2, [pc, #136]	; (8008ec0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d009      	beq.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1a      	ldr	r2, [pc, #104]	; (8008ea8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d004      	beq.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a18      	ldr	r2, [pc, #96]	; (8008eac <HAL_TIM_PWM_Start_DMA+0x414>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d115      	bne.n	8008e7a <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	4b1b      	ldr	r3, [pc, #108]	; (8008ec4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b06      	cmp	r3, #6
 8008e5e:	d015      	beq.n	8008e8c <HAL_TIM_PWM_Start_DMA+0x3f4>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e66:	d011      	beq.n	8008e8c <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e78:	e008      	b.n	8008e8c <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0201 	orr.w	r2, r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	e000      	b.n	8008e8e <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	080095ff 	.word	0x080095ff
 8008e9c:	080096a7 	.word	0x080096a7
 8008ea0:	0800956d 	.word	0x0800956d
 8008ea4:	40012c00 	.word	0x40012c00
 8008ea8:	40013400 	.word	0x40013400
 8008eac:	40014000 	.word	0x40014000
 8008eb0:	40014400 	.word	0x40014400
 8008eb4:	40014800 	.word	0x40014800
 8008eb8:	40000400 	.word	0x40000400
 8008ebc:	40000800 	.word	0x40000800
 8008ec0:	40000c00 	.word	0x40000c00
 8008ec4:	00010007 	.word	0x00010007

08008ec8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b0c      	cmp	r3, #12
 8008ed6:	d855      	bhi.n	8008f84 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008f15 	.word	0x08008f15
 8008ee4:	08008f85 	.word	0x08008f85
 8008ee8:	08008f85 	.word	0x08008f85
 8008eec:	08008f85 	.word	0x08008f85
 8008ef0:	08008f31 	.word	0x08008f31
 8008ef4:	08008f85 	.word	0x08008f85
 8008ef8:	08008f85 	.word	0x08008f85
 8008efc:	08008f85 	.word	0x08008f85
 8008f00:	08008f4d 	.word	0x08008f4d
 8008f04:	08008f85 	.word	0x08008f85
 8008f08:	08008f85 	.word	0x08008f85
 8008f0c:	08008f85 	.word	0x08008f85
 8008f10:	08008f69 	.word	0x08008f69
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fc fda5 	bl	8005a78 <HAL_DMA_Abort_IT>
      break;
 8008f2e:	e02a      	b.n	8008f86 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fc fd97 	bl	8005a78 <HAL_DMA_Abort_IT>
      break;
 8008f4a:	e01c      	b.n	8008f86 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fc fd89 	bl	8005a78 <HAL_DMA_Abort_IT>
      break;
 8008f66:	e00e      	b.n	8008f86 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fc fd7b 	bl	8005a78 <HAL_DMA_Abort_IT>
      break;
 8008f82:	e000      	b.n	8008f86 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8008f84:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 ff2e 	bl	8009df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a3e      	ldr	r2, [pc, #248]	; (8009094 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d013      	beq.n	8008fc6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a3d      	ldr	r2, [pc, #244]	; (8009098 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d00e      	beq.n	8008fc6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a3b      	ldr	r2, [pc, #236]	; (800909c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d009      	beq.n	8008fc6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a3a      	ldr	r2, [pc, #232]	; (80090a0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d004      	beq.n	8008fc6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a38      	ldr	r2, [pc, #224]	; (80090a4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d101      	bne.n	8008fca <HAL_TIM_PWM_Stop_DMA+0x102>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <HAL_TIM_PWM_Stop_DMA+0x104>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d017      	beq.n	8009000 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6a1a      	ldr	r2, [r3, #32]
 8008fd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fda:	4013      	ands	r3, r2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10f      	bne.n	8009000 <HAL_TIM_PWM_Stop_DMA+0x138>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6a1a      	ldr	r2, [r3, #32]
 8008fe6:	f240 4344 	movw	r3, #1092	; 0x444
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d107      	bne.n	8009000 <HAL_TIM_PWM_Stop_DMA+0x138>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ffe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6a1a      	ldr	r2, [r3, #32]
 8009006:	f241 1311 	movw	r3, #4369	; 0x1111
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10f      	bne.n	8009030 <HAL_TIM_PWM_Stop_DMA+0x168>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	f240 4344 	movw	r3, #1092	; 0x444
 800901a:	4013      	ands	r3, r2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d107      	bne.n	8009030 <HAL_TIM_PWM_Stop_DMA+0x168>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0201 	bic.w	r2, r2, #1
 800902e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800903e:	e023      	b.n	8009088 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b04      	cmp	r3, #4
 8009044:	d104      	bne.n	8009050 <HAL_TIM_PWM_Stop_DMA+0x188>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800904e:	e01b      	b.n	8009088 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b08      	cmp	r3, #8
 8009054:	d104      	bne.n	8009060 <HAL_TIM_PWM_Stop_DMA+0x198>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800905e:	e013      	b.n	8009088 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b0c      	cmp	r3, #12
 8009064:	d104      	bne.n	8009070 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800906e:	e00b      	b.n	8009088 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b10      	cmp	r3, #16
 8009074:	d104      	bne.n	8009080 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800907e:	e003      	b.n	8009088 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40013400 	.word	0x40013400
 800909c:	40014000 	.word	0x40014000
 80090a0:	40014400 	.word	0x40014400
 80090a4:	40014800 	.word	0x40014800

080090a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d122      	bne.n	8009104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d11b      	bne.n	8009104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0202 	mvn.w	r2, #2
 80090d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa16 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa08 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7fa fe81 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b04      	cmp	r3, #4
 8009110:	d122      	bne.n	8009158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b04      	cmp	r3, #4
 800911e:	d11b      	bne.n	8009158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f06f 0204 	mvn.w	r2, #4
 8009128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2202      	movs	r2, #2
 800912e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f9ec 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 8009144:	e005      	b.n	8009152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9de 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7fa fe57 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b08      	cmp	r3, #8
 8009164:	d122      	bne.n	80091ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b08      	cmp	r3, #8
 8009172:	d11b      	bne.n	80091ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0208 	mvn.w	r2, #8
 800917c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2204      	movs	r2, #4
 8009182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f9c2 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 8009198:	e005      	b.n	80091a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f9b4 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7fa fe2d 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b10      	cmp	r3, #16
 80091b8:	d122      	bne.n	8009200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d11b      	bne.n	8009200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0210 	mvn.w	r2, #16
 80091d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2208      	movs	r2, #8
 80091d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f998 	bl	800951c <HAL_TIM_IC_CaptureCallback>
 80091ec:	e005      	b.n	80091fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f98a 	bl	8009508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7fa fe03 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b01      	cmp	r3, #1
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b01      	cmp	r3, #1
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0201 	mvn.w	r2, #1
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7f9 faa8 	bl	800277c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009236:	2b80      	cmp	r3, #128	; 0x80
 8009238:	d10e      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009244:	2b80      	cmp	r3, #128	; 0x80
 8009246:	d107      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 ff02 	bl	800a05c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009266:	d10e      	bne.n	8009286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009272:	2b80      	cmp	r3, #128	; 0x80
 8009274:	d107      	bne.n	8009286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800927e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fef5 	bl	800a070 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009290:	2b40      	cmp	r3, #64	; 0x40
 8009292:	d10e      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929e:	2b40      	cmp	r3, #64	; 0x40
 80092a0:	d107      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f949 	bl	8009544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d10e      	bne.n	80092de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d107      	bne.n	80092de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f06f 0220 	mvn.w	r2, #32
 80092d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 feb5 	bl	800a048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80092fe:	2302      	movs	r3, #2
 8009300:	e0fd      	b.n	80094fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b14      	cmp	r3, #20
 800930e:	f200 80f0 	bhi.w	80094f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009312:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	0800936d 	.word	0x0800936d
 800931c:	080094f3 	.word	0x080094f3
 8009320:	080094f3 	.word	0x080094f3
 8009324:	080094f3 	.word	0x080094f3
 8009328:	080093ad 	.word	0x080093ad
 800932c:	080094f3 	.word	0x080094f3
 8009330:	080094f3 	.word	0x080094f3
 8009334:	080094f3 	.word	0x080094f3
 8009338:	080093ef 	.word	0x080093ef
 800933c:	080094f3 	.word	0x080094f3
 8009340:	080094f3 	.word	0x080094f3
 8009344:	080094f3 	.word	0x080094f3
 8009348:	0800942f 	.word	0x0800942f
 800934c:	080094f3 	.word	0x080094f3
 8009350:	080094f3 	.word	0x080094f3
 8009354:	080094f3 	.word	0x080094f3
 8009358:	08009471 	.word	0x08009471
 800935c:	080094f3 	.word	0x080094f3
 8009360:	080094f3 	.word	0x080094f3
 8009364:	080094f3 	.word	0x080094f3
 8009368:	080094b1 	.word	0x080094b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68b9      	ldr	r1, [r7, #8]
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fa66 	bl	8009844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699a      	ldr	r2, [r3, #24]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f042 0208 	orr.w	r2, r2, #8
 8009386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 0204 	bic.w	r2, r2, #4
 8009396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6999      	ldr	r1, [r3, #24]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	619a      	str	r2, [r3, #24]
      break;
 80093aa:	e0a3      	b.n	80094f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68b9      	ldr	r1, [r7, #8]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fad6 	bl	8009964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699a      	ldr	r2, [r3, #24]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6999      	ldr	r1, [r3, #24]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	021a      	lsls	r2, r3, #8
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	619a      	str	r2, [r3, #24]
      break;
 80093ec:	e082      	b.n	80094f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 fb3f 	bl	8009a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	69da      	ldr	r2, [r3, #28]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0208 	orr.w	r2, r2, #8
 8009408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69da      	ldr	r2, [r3, #28]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0204 	bic.w	r2, r2, #4
 8009418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69d9      	ldr	r1, [r3, #28]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	691a      	ldr	r2, [r3, #16]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	61da      	str	r2, [r3, #28]
      break;
 800942c:	e062      	b.n	80094f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fba7 	bl	8009b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	69da      	ldr	r2, [r3, #28]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69d9      	ldr	r1, [r3, #28]
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	021a      	lsls	r2, r3, #8
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	61da      	str	r2, [r3, #28]
      break;
 800946e:	e041      	b.n	80094f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fbf0 	bl	8009c5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f042 0208 	orr.w	r2, r2, #8
 800948a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 0204 	bic.w	r2, r2, #4
 800949a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	691a      	ldr	r2, [r3, #16]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094ae:	e021      	b.n	80094f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fc34 	bl	8009d24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	021a      	lsls	r2, r3, #8
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	430a      	orrs	r2, r1
 80094ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094f0:	e000      	b.n	80094f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80094f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop

08009508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009578:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d107      	bne.n	8009594 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009592:	e02a      	b.n	80095ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	429a      	cmp	r2, r3
 800959c:	d107      	bne.n	80095ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2202      	movs	r2, #2
 80095a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095ac:	e01d      	b.n	80095ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d107      	bne.n	80095c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2204      	movs	r2, #4
 80095bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095c6:	e010      	b.n	80095ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d107      	bne.n	80095e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2208      	movs	r2, #8
 80095d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095e0:	e003      	b.n	80095ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff ffb4 	bl	8009558 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	771a      	strb	r2, [r3, #28]
}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d10b      	bne.n	800962e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d136      	bne.n	8009692 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800962c:	e031      	b.n	8009692 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	429a      	cmp	r2, r3
 8009636:	d10b      	bne.n	8009650 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2202      	movs	r2, #2
 800963c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d125      	bne.n	8009692 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800964e:	e020      	b.n	8009692 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d10b      	bne.n	8009672 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2204      	movs	r2, #4
 800965e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d114      	bne.n	8009692 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009670:	e00f      	b.n	8009692 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	429a      	cmp	r2, r3
 800967a:	d10a      	bne.n	8009692 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2208      	movs	r2, #8
 8009680:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d103      	bne.n	8009692 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7fa fbb4 	bl	8003e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	771a      	strb	r2, [r3, #28]
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d103      	bne.n	80096c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	771a      	strb	r2, [r3, #28]
 80096c4:	e019      	b.n	80096fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d103      	bne.n	80096d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2202      	movs	r2, #2
 80096d4:	771a      	strb	r2, [r3, #28]
 80096d6:	e010      	b.n	80096fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d103      	bne.n	80096ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2204      	movs	r2, #4
 80096e6:	771a      	strb	r2, [r3, #28]
 80096e8:	e007      	b.n	80096fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d102      	bne.n	80096fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2208      	movs	r2, #8
 80096f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f7ff ff18 	bl	8009530 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	771a      	strb	r2, [r3, #28]
}
 8009706:	bf00      	nop
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a40      	ldr	r2, [pc, #256]	; (8009824 <TIM_Base_SetConfig+0x114>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d013      	beq.n	8009750 <TIM_Base_SetConfig+0x40>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800972e:	d00f      	beq.n	8009750 <TIM_Base_SetConfig+0x40>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a3d      	ldr	r2, [pc, #244]	; (8009828 <TIM_Base_SetConfig+0x118>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d00b      	beq.n	8009750 <TIM_Base_SetConfig+0x40>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a3c      	ldr	r2, [pc, #240]	; (800982c <TIM_Base_SetConfig+0x11c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d007      	beq.n	8009750 <TIM_Base_SetConfig+0x40>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a3b      	ldr	r2, [pc, #236]	; (8009830 <TIM_Base_SetConfig+0x120>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <TIM_Base_SetConfig+0x40>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a3a      	ldr	r2, [pc, #232]	; (8009834 <TIM_Base_SetConfig+0x124>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d108      	bne.n	8009762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a2f      	ldr	r2, [pc, #188]	; (8009824 <TIM_Base_SetConfig+0x114>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d01f      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009770:	d01b      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a2c      	ldr	r2, [pc, #176]	; (8009828 <TIM_Base_SetConfig+0x118>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d017      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a2b      	ldr	r2, [pc, #172]	; (800982c <TIM_Base_SetConfig+0x11c>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d013      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a2a      	ldr	r2, [pc, #168]	; (8009830 <TIM_Base_SetConfig+0x120>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00f      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a29      	ldr	r2, [pc, #164]	; (8009834 <TIM_Base_SetConfig+0x124>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d00b      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a28      	ldr	r2, [pc, #160]	; (8009838 <TIM_Base_SetConfig+0x128>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d007      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a27      	ldr	r2, [pc, #156]	; (800983c <TIM_Base_SetConfig+0x12c>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d003      	beq.n	80097aa <TIM_Base_SetConfig+0x9a>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a26      	ldr	r2, [pc, #152]	; (8009840 <TIM_Base_SetConfig+0x130>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d108      	bne.n	80097bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	689a      	ldr	r2, [r3, #8]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a10      	ldr	r2, [pc, #64]	; (8009824 <TIM_Base_SetConfig+0x114>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00f      	beq.n	8009808 <TIM_Base_SetConfig+0xf8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a12      	ldr	r2, [pc, #72]	; (8009834 <TIM_Base_SetConfig+0x124>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d00b      	beq.n	8009808 <TIM_Base_SetConfig+0xf8>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a11      	ldr	r2, [pc, #68]	; (8009838 <TIM_Base_SetConfig+0x128>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d007      	beq.n	8009808 <TIM_Base_SetConfig+0xf8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a10      	ldr	r2, [pc, #64]	; (800983c <TIM_Base_SetConfig+0x12c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d003      	beq.n	8009808 <TIM_Base_SetConfig+0xf8>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <TIM_Base_SetConfig+0x130>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d103      	bne.n	8009810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	691a      	ldr	r2, [r3, #16]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	615a      	str	r2, [r3, #20]
}
 8009816:	bf00      	nop
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40012c00 	.word	0x40012c00
 8009828:	40000400 	.word	0x40000400
 800982c:	40000800 	.word	0x40000800
 8009830:	40000c00 	.word	0x40000c00
 8009834:	40013400 	.word	0x40013400
 8009838:	40014000 	.word	0x40014000
 800983c:	40014400 	.word	0x40014400
 8009840:	40014800 	.word	0x40014800

08009844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f023 0201 	bic.w	r2, r3, #1
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f023 0302 	bic.w	r3, r3, #2
 8009890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	4313      	orrs	r3, r2
 800989a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a2c      	ldr	r2, [pc, #176]	; (8009950 <TIM_OC1_SetConfig+0x10c>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00f      	beq.n	80098c4 <TIM_OC1_SetConfig+0x80>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a2b      	ldr	r2, [pc, #172]	; (8009954 <TIM_OC1_SetConfig+0x110>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00b      	beq.n	80098c4 <TIM_OC1_SetConfig+0x80>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a2a      	ldr	r2, [pc, #168]	; (8009958 <TIM_OC1_SetConfig+0x114>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d007      	beq.n	80098c4 <TIM_OC1_SetConfig+0x80>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a29      	ldr	r2, [pc, #164]	; (800995c <TIM_OC1_SetConfig+0x118>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d003      	beq.n	80098c4 <TIM_OC1_SetConfig+0x80>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a28      	ldr	r2, [pc, #160]	; (8009960 <TIM_OC1_SetConfig+0x11c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d10c      	bne.n	80098de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f023 0308 	bic.w	r3, r3, #8
 80098ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f023 0304 	bic.w	r3, r3, #4
 80098dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a1b      	ldr	r2, [pc, #108]	; (8009950 <TIM_OC1_SetConfig+0x10c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00f      	beq.n	8009906 <TIM_OC1_SetConfig+0xc2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a1a      	ldr	r2, [pc, #104]	; (8009954 <TIM_OC1_SetConfig+0x110>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00b      	beq.n	8009906 <TIM_OC1_SetConfig+0xc2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a19      	ldr	r2, [pc, #100]	; (8009958 <TIM_OC1_SetConfig+0x114>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d007      	beq.n	8009906 <TIM_OC1_SetConfig+0xc2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a18      	ldr	r2, [pc, #96]	; (800995c <TIM_OC1_SetConfig+0x118>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d003      	beq.n	8009906 <TIM_OC1_SetConfig+0xc2>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a17      	ldr	r2, [pc, #92]	; (8009960 <TIM_OC1_SetConfig+0x11c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d111      	bne.n	800992a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800990c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	4313      	orrs	r3, r2
 800991e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	4313      	orrs	r3, r2
 8009928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	621a      	str	r2, [r3, #32]
}
 8009944:	bf00      	nop
 8009946:	371c      	adds	r7, #28
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	40012c00 	.word	0x40012c00
 8009954:	40013400 	.word	0x40013400
 8009958:	40014000 	.word	0x40014000
 800995c:	40014400 	.word	0x40014400
 8009960:	40014800 	.word	0x40014800

08009964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	f023 0210 	bic.w	r2, r3, #16
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800999e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f023 0320 	bic.w	r3, r3, #32
 80099b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4313      	orrs	r3, r2
 80099be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a28      	ldr	r2, [pc, #160]	; (8009a64 <TIM_OC2_SetConfig+0x100>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d003      	beq.n	80099d0 <TIM_OC2_SetConfig+0x6c>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a27      	ldr	r2, [pc, #156]	; (8009a68 <TIM_OC2_SetConfig+0x104>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d10d      	bne.n	80099ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a1d      	ldr	r2, [pc, #116]	; (8009a64 <TIM_OC2_SetConfig+0x100>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00f      	beq.n	8009a14 <TIM_OC2_SetConfig+0xb0>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a1c      	ldr	r2, [pc, #112]	; (8009a68 <TIM_OC2_SetConfig+0x104>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00b      	beq.n	8009a14 <TIM_OC2_SetConfig+0xb0>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a1b      	ldr	r2, [pc, #108]	; (8009a6c <TIM_OC2_SetConfig+0x108>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d007      	beq.n	8009a14 <TIM_OC2_SetConfig+0xb0>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1a      	ldr	r2, [pc, #104]	; (8009a70 <TIM_OC2_SetConfig+0x10c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d003      	beq.n	8009a14 <TIM_OC2_SetConfig+0xb0>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a19      	ldr	r2, [pc, #100]	; (8009a74 <TIM_OC2_SetConfig+0x110>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d113      	bne.n	8009a3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	621a      	str	r2, [r3, #32]
}
 8009a56:	bf00      	nop
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40012c00 	.word	0x40012c00
 8009a68:	40013400 	.word	0x40013400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40014400 	.word	0x40014400
 8009a74:	40014800 	.word	0x40014800

08009a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f023 0303 	bic.w	r3, r3, #3
 8009ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	021b      	lsls	r3, r3, #8
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a27      	ldr	r2, [pc, #156]	; (8009b74 <TIM_OC3_SetConfig+0xfc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d003      	beq.n	8009ae2 <TIM_OC3_SetConfig+0x6a>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a26      	ldr	r2, [pc, #152]	; (8009b78 <TIM_OC3_SetConfig+0x100>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d10d      	bne.n	8009afe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	021b      	lsls	r3, r3, #8
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a1c      	ldr	r2, [pc, #112]	; (8009b74 <TIM_OC3_SetConfig+0xfc>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00f      	beq.n	8009b26 <TIM_OC3_SetConfig+0xae>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a1b      	ldr	r2, [pc, #108]	; (8009b78 <TIM_OC3_SetConfig+0x100>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00b      	beq.n	8009b26 <TIM_OC3_SetConfig+0xae>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a1a      	ldr	r2, [pc, #104]	; (8009b7c <TIM_OC3_SetConfig+0x104>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d007      	beq.n	8009b26 <TIM_OC3_SetConfig+0xae>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a19      	ldr	r2, [pc, #100]	; (8009b80 <TIM_OC3_SetConfig+0x108>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d003      	beq.n	8009b26 <TIM_OC3_SetConfig+0xae>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a18      	ldr	r2, [pc, #96]	; (8009b84 <TIM_OC3_SetConfig+0x10c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d113      	bne.n	8009b4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	011b      	lsls	r3, r3, #4
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	011b      	lsls	r3, r3, #4
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	621a      	str	r2, [r3, #32]
}
 8009b68:	bf00      	nop
 8009b6a:	371c      	adds	r7, #28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	40012c00 	.word	0x40012c00
 8009b78:	40013400 	.word	0x40013400
 8009b7c:	40014000 	.word	0x40014000
 8009b80:	40014400 	.word	0x40014400
 8009b84:	40014800 	.word	0x40014800

08009b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	031b      	lsls	r3, r3, #12
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a18      	ldr	r2, [pc, #96]	; (8009c48 <TIM_OC4_SetConfig+0xc0>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00f      	beq.n	8009c0c <TIM_OC4_SetConfig+0x84>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <TIM_OC4_SetConfig+0xc4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00b      	beq.n	8009c0c <TIM_OC4_SetConfig+0x84>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a16      	ldr	r2, [pc, #88]	; (8009c50 <TIM_OC4_SetConfig+0xc8>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d007      	beq.n	8009c0c <TIM_OC4_SetConfig+0x84>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a15      	ldr	r2, [pc, #84]	; (8009c54 <TIM_OC4_SetConfig+0xcc>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d003      	beq.n	8009c0c <TIM_OC4_SetConfig+0x84>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a14      	ldr	r2, [pc, #80]	; (8009c58 <TIM_OC4_SetConfig+0xd0>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d109      	bne.n	8009c20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	019b      	lsls	r3, r3, #6
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	621a      	str	r2, [r3, #32]
}
 8009c3a:	bf00      	nop
 8009c3c:	371c      	adds	r7, #28
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	40012c00 	.word	0x40012c00
 8009c4c:	40013400 	.word	0x40013400
 8009c50:	40014000 	.word	0x40014000
 8009c54:	40014400 	.word	0x40014400
 8009c58:	40014800 	.word	0x40014800

08009c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	041b      	lsls	r3, r3, #16
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a17      	ldr	r2, [pc, #92]	; (8009d10 <TIM_OC5_SetConfig+0xb4>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d00f      	beq.n	8009cd6 <TIM_OC5_SetConfig+0x7a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a16      	ldr	r2, [pc, #88]	; (8009d14 <TIM_OC5_SetConfig+0xb8>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00b      	beq.n	8009cd6 <TIM_OC5_SetConfig+0x7a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <TIM_OC5_SetConfig+0xbc>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d007      	beq.n	8009cd6 <TIM_OC5_SetConfig+0x7a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a14      	ldr	r2, [pc, #80]	; (8009d1c <TIM_OC5_SetConfig+0xc0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d003      	beq.n	8009cd6 <TIM_OC5_SetConfig+0x7a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a13      	ldr	r2, [pc, #76]	; (8009d20 <TIM_OC5_SetConfig+0xc4>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d109      	bne.n	8009cea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	021b      	lsls	r3, r3, #8
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	621a      	str	r2, [r3, #32]
}
 8009d04:	bf00      	nop
 8009d06:	371c      	adds	r7, #28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	40012c00 	.word	0x40012c00
 8009d14:	40013400 	.word	0x40013400
 8009d18:	40014000 	.word	0x40014000
 8009d1c:	40014400 	.word	0x40014400
 8009d20:	40014800 	.word	0x40014800

08009d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b087      	sub	sp, #28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	021b      	lsls	r3, r3, #8
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	051b      	lsls	r3, r3, #20
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a18      	ldr	r2, [pc, #96]	; (8009ddc <TIM_OC6_SetConfig+0xb8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d00f      	beq.n	8009da0 <TIM_OC6_SetConfig+0x7c>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a17      	ldr	r2, [pc, #92]	; (8009de0 <TIM_OC6_SetConfig+0xbc>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d00b      	beq.n	8009da0 <TIM_OC6_SetConfig+0x7c>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a16      	ldr	r2, [pc, #88]	; (8009de4 <TIM_OC6_SetConfig+0xc0>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d007      	beq.n	8009da0 <TIM_OC6_SetConfig+0x7c>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a15      	ldr	r2, [pc, #84]	; (8009de8 <TIM_OC6_SetConfig+0xc4>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d003      	beq.n	8009da0 <TIM_OC6_SetConfig+0x7c>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a14      	ldr	r2, [pc, #80]	; (8009dec <TIM_OC6_SetConfig+0xc8>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d109      	bne.n	8009db4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	029b      	lsls	r3, r3, #10
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	621a      	str	r2, [r3, #32]
}
 8009dce:	bf00      	nop
 8009dd0:	371c      	adds	r7, #28
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	40012c00 	.word	0x40012c00
 8009de0:	40013400 	.word	0x40013400
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40014400 	.word	0x40014400
 8009dec:	40014800 	.word	0x40014800

08009df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f003 031f 	and.w	r3, r3, #31
 8009e02:	2201      	movs	r2, #1
 8009e04:	fa02 f303 	lsl.w	r3, r2, r3
 8009e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6a1a      	ldr	r2, [r3, #32]
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	43db      	mvns	r3, r3
 8009e12:	401a      	ands	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a1a      	ldr	r2, [r3, #32]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f003 031f 	and.w	r3, r3, #31
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	fa01 f303 	lsl.w	r3, r1, r3
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	621a      	str	r2, [r3, #32]
}
 8009e2e:	bf00      	nop
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
	...

08009e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d101      	bne.n	8009e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e50:	2302      	movs	r3, #2
 8009e52:	e068      	b.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a2e      	ldr	r2, [pc, #184]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d004      	beq.n	8009e88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a2d      	ldr	r2, [pc, #180]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d108      	bne.n	8009e9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a1e      	ldr	r2, [pc, #120]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d01d      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec6:	d018      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a1b      	ldr	r2, [pc, #108]	; (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d013      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a1a      	ldr	r2, [pc, #104]	; (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00e      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a18      	ldr	r2, [pc, #96]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d009      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a13      	ldr	r2, [pc, #76]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d004      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a14      	ldr	r2, [pc, #80]	; (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d10c      	bne.n	8009f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	40012c00 	.word	0x40012c00
 8009f38:	40013400 	.word	0x40013400
 8009f3c:	40000400 	.word	0x40000400
 8009f40:	40000800 	.word	0x40000800
 8009f44:	40000c00 	.word	0x40000c00
 8009f48:	40014000 	.word	0x40014000

08009f4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d101      	bne.n	8009f68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f64:	2302      	movs	r3, #2
 8009f66:	e065      	b.n	800a034 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	041b      	lsls	r3, r3, #16
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a16      	ldr	r2, [pc, #88]	; (800a040 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d004      	beq.n	8009ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a14      	ldr	r2, [pc, #80]	; (800a044 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d115      	bne.n	800a022 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	051b      	lsls	r3, r3, #20
 800a002:	4313      	orrs	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	4313      	orrs	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	40012c00 	.word	0x40012c00
 800a044:	40013400 	.word	0x40013400

0800a048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e040      	b.n	800a118 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d106      	bne.n	800a0ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7f9 fcd2 	bl	8003a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2224      	movs	r2, #36	; 0x24
 800a0b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 0201 	bic.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f8c0 	bl	800a248 <UART_SetConfig>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d101      	bne.n	800a0d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e022      	b.n	800a118 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fb3e 	bl	800a75c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f042 0201 	orr.w	r2, r2, #1
 800a10e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fbc5 	bl	800a8a0 <UART_CheckIdleState>
 800a116:	4603      	mov	r3, r0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08a      	sub	sp, #40	; 0x28
 800a124:	af02      	add	r7, sp, #8
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	4613      	mov	r3, r2
 800a12e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a134:	2b20      	cmp	r3, #32
 800a136:	f040 8082 	bne.w	800a23e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <HAL_UART_Transmit+0x26>
 800a140:	88fb      	ldrh	r3, [r7, #6]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e07a      	b.n	800a240 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a150:	2b01      	cmp	r3, #1
 800a152:	d101      	bne.n	800a158 <HAL_UART_Transmit+0x38>
 800a154:	2302      	movs	r3, #2
 800a156:	e073      	b.n	800a240 <HAL_UART_Transmit+0x120>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2221      	movs	r2, #33	; 0x21
 800a16c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a16e:	f7fa f89f 	bl	80042b0 <HAL_GetTick>
 800a172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	88fa      	ldrh	r2, [r7, #6]
 800a178:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	88fa      	ldrh	r2, [r7, #6]
 800a180:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a18c:	d108      	bne.n	800a1a0 <HAL_UART_Transmit+0x80>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d104      	bne.n	800a1a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	61bb      	str	r3, [r7, #24]
 800a19e:	e003      	b.n	800a1a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a1b0:	e02d      	b.n	800a20e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2180      	movs	r1, #128	; 0x80
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f000 fbb8 	bl	800a932 <UART_WaitOnFlagUntilTimeout>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e039      	b.n	800a240 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10b      	bne.n	800a1ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	881a      	ldrh	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1de:	b292      	uxth	r2, r2
 800a1e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	3302      	adds	r3, #2
 800a1e6:	61bb      	str	r3, [r7, #24]
 800a1e8:	e008      	b.n	800a1fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	781a      	ldrb	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	b292      	uxth	r2, r2
 800a1f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a202:	b29b      	uxth	r3, r3
 800a204:	3b01      	subs	r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a214:	b29b      	uxth	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1cb      	bne.n	800a1b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2200      	movs	r2, #0
 800a222:	2140      	movs	r1, #64	; 0x40
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 fb84 	bl	800a932 <UART_WaitOnFlagUntilTimeout>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e005      	b.n	800a240 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2220      	movs	r2, #32
 800a238:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e000      	b.n	800a240 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a23e:	2302      	movs	r3, #2
  }
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a248:	b5b0      	push	{r4, r5, r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	431a      	orrs	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	431a      	orrs	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	4313      	orrs	r3, r2
 800a26a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4bad      	ldr	r3, [pc, #692]	; (800a528 <UART_SetConfig+0x2e0>)
 800a274:	4013      	ands	r3, r2
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	6812      	ldr	r2, [r2, #0]
 800a27a:	69f9      	ldr	r1, [r7, #28]
 800a27c:	430b      	orrs	r3, r1
 800a27e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4aa2      	ldr	r2, [pc, #648]	; (800a52c <UART_SetConfig+0x2e4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d004      	beq.n	800a2b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a99      	ldr	r2, [pc, #612]	; (800a530 <UART_SetConfig+0x2e8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d121      	bne.n	800a312 <UART_SetConfig+0xca>
 800a2ce:	4b99      	ldr	r3, [pc, #612]	; (800a534 <UART_SetConfig+0x2ec>)
 800a2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d4:	f003 0303 	and.w	r3, r3, #3
 800a2d8:	2b03      	cmp	r3, #3
 800a2da:	d817      	bhi.n	800a30c <UART_SetConfig+0xc4>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <UART_SetConfig+0x9c>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a2f5 	.word	0x0800a2f5
 800a2e8:	0800a301 	.word	0x0800a301
 800a2ec:	0800a2fb 	.word	0x0800a2fb
 800a2f0:	0800a307 	.word	0x0800a307
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	76fb      	strb	r3, [r7, #27]
 800a2f8:	e0e7      	b.n	800a4ca <UART_SetConfig+0x282>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	76fb      	strb	r3, [r7, #27]
 800a2fe:	e0e4      	b.n	800a4ca <UART_SetConfig+0x282>
 800a300:	2304      	movs	r3, #4
 800a302:	76fb      	strb	r3, [r7, #27]
 800a304:	e0e1      	b.n	800a4ca <UART_SetConfig+0x282>
 800a306:	2308      	movs	r3, #8
 800a308:	76fb      	strb	r3, [r7, #27]
 800a30a:	e0de      	b.n	800a4ca <UART_SetConfig+0x282>
 800a30c:	2310      	movs	r3, #16
 800a30e:	76fb      	strb	r3, [r7, #27]
 800a310:	e0db      	b.n	800a4ca <UART_SetConfig+0x282>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a88      	ldr	r2, [pc, #544]	; (800a538 <UART_SetConfig+0x2f0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d132      	bne.n	800a382 <UART_SetConfig+0x13a>
 800a31c:	4b85      	ldr	r3, [pc, #532]	; (800a534 <UART_SetConfig+0x2ec>)
 800a31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a322:	f003 030c 	and.w	r3, r3, #12
 800a326:	2b0c      	cmp	r3, #12
 800a328:	d828      	bhi.n	800a37c <UART_SetConfig+0x134>
 800a32a:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <UART_SetConfig+0xe8>)
 800a32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a330:	0800a365 	.word	0x0800a365
 800a334:	0800a37d 	.word	0x0800a37d
 800a338:	0800a37d 	.word	0x0800a37d
 800a33c:	0800a37d 	.word	0x0800a37d
 800a340:	0800a371 	.word	0x0800a371
 800a344:	0800a37d 	.word	0x0800a37d
 800a348:	0800a37d 	.word	0x0800a37d
 800a34c:	0800a37d 	.word	0x0800a37d
 800a350:	0800a36b 	.word	0x0800a36b
 800a354:	0800a37d 	.word	0x0800a37d
 800a358:	0800a37d 	.word	0x0800a37d
 800a35c:	0800a37d 	.word	0x0800a37d
 800a360:	0800a377 	.word	0x0800a377
 800a364:	2300      	movs	r3, #0
 800a366:	76fb      	strb	r3, [r7, #27]
 800a368:	e0af      	b.n	800a4ca <UART_SetConfig+0x282>
 800a36a:	2302      	movs	r3, #2
 800a36c:	76fb      	strb	r3, [r7, #27]
 800a36e:	e0ac      	b.n	800a4ca <UART_SetConfig+0x282>
 800a370:	2304      	movs	r3, #4
 800a372:	76fb      	strb	r3, [r7, #27]
 800a374:	e0a9      	b.n	800a4ca <UART_SetConfig+0x282>
 800a376:	2308      	movs	r3, #8
 800a378:	76fb      	strb	r3, [r7, #27]
 800a37a:	e0a6      	b.n	800a4ca <UART_SetConfig+0x282>
 800a37c:	2310      	movs	r3, #16
 800a37e:	76fb      	strb	r3, [r7, #27]
 800a380:	e0a3      	b.n	800a4ca <UART_SetConfig+0x282>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a6d      	ldr	r2, [pc, #436]	; (800a53c <UART_SetConfig+0x2f4>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d120      	bne.n	800a3ce <UART_SetConfig+0x186>
 800a38c:	4b69      	ldr	r3, [pc, #420]	; (800a534 <UART_SetConfig+0x2ec>)
 800a38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a392:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a396:	2b30      	cmp	r3, #48	; 0x30
 800a398:	d013      	beq.n	800a3c2 <UART_SetConfig+0x17a>
 800a39a:	2b30      	cmp	r3, #48	; 0x30
 800a39c:	d814      	bhi.n	800a3c8 <UART_SetConfig+0x180>
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d009      	beq.n	800a3b6 <UART_SetConfig+0x16e>
 800a3a2:	2b20      	cmp	r3, #32
 800a3a4:	d810      	bhi.n	800a3c8 <UART_SetConfig+0x180>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <UART_SetConfig+0x168>
 800a3aa:	2b10      	cmp	r3, #16
 800a3ac:	d006      	beq.n	800a3bc <UART_SetConfig+0x174>
 800a3ae:	e00b      	b.n	800a3c8 <UART_SetConfig+0x180>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	76fb      	strb	r3, [r7, #27]
 800a3b4:	e089      	b.n	800a4ca <UART_SetConfig+0x282>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	76fb      	strb	r3, [r7, #27]
 800a3ba:	e086      	b.n	800a4ca <UART_SetConfig+0x282>
 800a3bc:	2304      	movs	r3, #4
 800a3be:	76fb      	strb	r3, [r7, #27]
 800a3c0:	e083      	b.n	800a4ca <UART_SetConfig+0x282>
 800a3c2:	2308      	movs	r3, #8
 800a3c4:	76fb      	strb	r3, [r7, #27]
 800a3c6:	e080      	b.n	800a4ca <UART_SetConfig+0x282>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	76fb      	strb	r3, [r7, #27]
 800a3cc:	e07d      	b.n	800a4ca <UART_SetConfig+0x282>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a5b      	ldr	r2, [pc, #364]	; (800a540 <UART_SetConfig+0x2f8>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d120      	bne.n	800a41a <UART_SetConfig+0x1d2>
 800a3d8:	4b56      	ldr	r3, [pc, #344]	; (800a534 <UART_SetConfig+0x2ec>)
 800a3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3e2:	2bc0      	cmp	r3, #192	; 0xc0
 800a3e4:	d013      	beq.n	800a40e <UART_SetConfig+0x1c6>
 800a3e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a3e8:	d814      	bhi.n	800a414 <UART_SetConfig+0x1cc>
 800a3ea:	2b80      	cmp	r3, #128	; 0x80
 800a3ec:	d009      	beq.n	800a402 <UART_SetConfig+0x1ba>
 800a3ee:	2b80      	cmp	r3, #128	; 0x80
 800a3f0:	d810      	bhi.n	800a414 <UART_SetConfig+0x1cc>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <UART_SetConfig+0x1b4>
 800a3f6:	2b40      	cmp	r3, #64	; 0x40
 800a3f8:	d006      	beq.n	800a408 <UART_SetConfig+0x1c0>
 800a3fa:	e00b      	b.n	800a414 <UART_SetConfig+0x1cc>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	76fb      	strb	r3, [r7, #27]
 800a400:	e063      	b.n	800a4ca <UART_SetConfig+0x282>
 800a402:	2302      	movs	r3, #2
 800a404:	76fb      	strb	r3, [r7, #27]
 800a406:	e060      	b.n	800a4ca <UART_SetConfig+0x282>
 800a408:	2304      	movs	r3, #4
 800a40a:	76fb      	strb	r3, [r7, #27]
 800a40c:	e05d      	b.n	800a4ca <UART_SetConfig+0x282>
 800a40e:	2308      	movs	r3, #8
 800a410:	76fb      	strb	r3, [r7, #27]
 800a412:	e05a      	b.n	800a4ca <UART_SetConfig+0x282>
 800a414:	2310      	movs	r3, #16
 800a416:	76fb      	strb	r3, [r7, #27]
 800a418:	e057      	b.n	800a4ca <UART_SetConfig+0x282>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a49      	ldr	r2, [pc, #292]	; (800a544 <UART_SetConfig+0x2fc>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d125      	bne.n	800a470 <UART_SetConfig+0x228>
 800a424:	4b43      	ldr	r3, [pc, #268]	; (800a534 <UART_SetConfig+0x2ec>)
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a42e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a432:	d017      	beq.n	800a464 <UART_SetConfig+0x21c>
 800a434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a438:	d817      	bhi.n	800a46a <UART_SetConfig+0x222>
 800a43a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a43e:	d00b      	beq.n	800a458 <UART_SetConfig+0x210>
 800a440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a444:	d811      	bhi.n	800a46a <UART_SetConfig+0x222>
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <UART_SetConfig+0x20a>
 800a44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a44e:	d006      	beq.n	800a45e <UART_SetConfig+0x216>
 800a450:	e00b      	b.n	800a46a <UART_SetConfig+0x222>
 800a452:	2300      	movs	r3, #0
 800a454:	76fb      	strb	r3, [r7, #27]
 800a456:	e038      	b.n	800a4ca <UART_SetConfig+0x282>
 800a458:	2302      	movs	r3, #2
 800a45a:	76fb      	strb	r3, [r7, #27]
 800a45c:	e035      	b.n	800a4ca <UART_SetConfig+0x282>
 800a45e:	2304      	movs	r3, #4
 800a460:	76fb      	strb	r3, [r7, #27]
 800a462:	e032      	b.n	800a4ca <UART_SetConfig+0x282>
 800a464:	2308      	movs	r3, #8
 800a466:	76fb      	strb	r3, [r7, #27]
 800a468:	e02f      	b.n	800a4ca <UART_SetConfig+0x282>
 800a46a:	2310      	movs	r3, #16
 800a46c:	76fb      	strb	r3, [r7, #27]
 800a46e:	e02c      	b.n	800a4ca <UART_SetConfig+0x282>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a2d      	ldr	r2, [pc, #180]	; (800a52c <UART_SetConfig+0x2e4>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d125      	bne.n	800a4c6 <UART_SetConfig+0x27e>
 800a47a:	4b2e      	ldr	r3, [pc, #184]	; (800a534 <UART_SetConfig+0x2ec>)
 800a47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a488:	d017      	beq.n	800a4ba <UART_SetConfig+0x272>
 800a48a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a48e:	d817      	bhi.n	800a4c0 <UART_SetConfig+0x278>
 800a490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a494:	d00b      	beq.n	800a4ae <UART_SetConfig+0x266>
 800a496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a49a:	d811      	bhi.n	800a4c0 <UART_SetConfig+0x278>
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d003      	beq.n	800a4a8 <UART_SetConfig+0x260>
 800a4a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a4:	d006      	beq.n	800a4b4 <UART_SetConfig+0x26c>
 800a4a6:	e00b      	b.n	800a4c0 <UART_SetConfig+0x278>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	76fb      	strb	r3, [r7, #27]
 800a4ac:	e00d      	b.n	800a4ca <UART_SetConfig+0x282>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	76fb      	strb	r3, [r7, #27]
 800a4b2:	e00a      	b.n	800a4ca <UART_SetConfig+0x282>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	76fb      	strb	r3, [r7, #27]
 800a4b8:	e007      	b.n	800a4ca <UART_SetConfig+0x282>
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	76fb      	strb	r3, [r7, #27]
 800a4be:	e004      	b.n	800a4ca <UART_SetConfig+0x282>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	76fb      	strb	r3, [r7, #27]
 800a4c4:	e001      	b.n	800a4ca <UART_SetConfig+0x282>
 800a4c6:	2310      	movs	r3, #16
 800a4c8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a17      	ldr	r2, [pc, #92]	; (800a52c <UART_SetConfig+0x2e4>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	f040 8087 	bne.w	800a5e4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4d6:	7efb      	ldrb	r3, [r7, #27]
 800a4d8:	2b08      	cmp	r3, #8
 800a4da:	d837      	bhi.n	800a54c <UART_SetConfig+0x304>
 800a4dc:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <UART_SetConfig+0x29c>)
 800a4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e2:	bf00      	nop
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a54d 	.word	0x0800a54d
 800a4ec:	0800a511 	.word	0x0800a511
 800a4f0:	0800a54d 	.word	0x0800a54d
 800a4f4:	0800a517 	.word	0x0800a517
 800a4f8:	0800a54d 	.word	0x0800a54d
 800a4fc:	0800a54d 	.word	0x0800a54d
 800a500:	0800a54d 	.word	0x0800a54d
 800a504:	0800a51f 	.word	0x0800a51f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a508:	f7fc fc80 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 800a50c:	6178      	str	r0, [r7, #20]
        break;
 800a50e:	e022      	b.n	800a556 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a510:	4b0d      	ldr	r3, [pc, #52]	; (800a548 <UART_SetConfig+0x300>)
 800a512:	617b      	str	r3, [r7, #20]
        break;
 800a514:	e01f      	b.n	800a556 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a516:	f7fc fbe3 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 800a51a:	6178      	str	r0, [r7, #20]
        break;
 800a51c:	e01b      	b.n	800a556 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a51e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a522:	617b      	str	r3, [r7, #20]
        break;
 800a524:	e017      	b.n	800a556 <UART_SetConfig+0x30e>
 800a526:	bf00      	nop
 800a528:	efff69f3 	.word	0xefff69f3
 800a52c:	40008000 	.word	0x40008000
 800a530:	40013800 	.word	0x40013800
 800a534:	40021000 	.word	0x40021000
 800a538:	40004400 	.word	0x40004400
 800a53c:	40004800 	.word	0x40004800
 800a540:	40004c00 	.word	0x40004c00
 800a544:	40005000 	.word	0x40005000
 800a548:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	76bb      	strb	r3, [r7, #26]
        break;
 800a554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80f1 	beq.w	800a740 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	4613      	mov	r3, r2
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	4413      	add	r3, r2
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d305      	bcc.n	800a57a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	429a      	cmp	r2, r3
 800a578:	d902      	bls.n	800a580 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	76bb      	strb	r3, [r7, #26]
 800a57e:	e0df      	b.n	800a740 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	4618      	mov	r0, r3
 800a584:	f04f 0100 	mov.w	r1, #0
 800a588:	f04f 0200 	mov.w	r2, #0
 800a58c:	f04f 0300 	mov.w	r3, #0
 800a590:	020b      	lsls	r3, r1, #8
 800a592:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a596:	0202      	lsls	r2, r0, #8
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	6849      	ldr	r1, [r1, #4]
 800a59c:	0849      	lsrs	r1, r1, #1
 800a59e:	4608      	mov	r0, r1
 800a5a0:	f04f 0100 	mov.w	r1, #0
 800a5a4:	1814      	adds	r4, r2, r0
 800a5a6:	eb43 0501 	adc.w	r5, r3, r1
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f04f 0300 	mov.w	r3, #0
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f7f6 fb50 	bl	8000c5c <__aeabi_uldivmod>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5ca:	d308      	bcc.n	800a5de <UART_SetConfig+0x396>
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5d2:	d204      	bcs.n	800a5de <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	60da      	str	r2, [r3, #12]
 800a5dc:	e0b0      	b.n	800a740 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	76bb      	strb	r3, [r7, #26]
 800a5e2:	e0ad      	b.n	800a740 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ec:	d15c      	bne.n	800a6a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a5ee:	7efb      	ldrb	r3, [r7, #27]
 800a5f0:	2b08      	cmp	r3, #8
 800a5f2:	d828      	bhi.n	800a646 <UART_SetConfig+0x3fe>
 800a5f4:	a201      	add	r2, pc, #4	; (adr r2, 800a5fc <UART_SetConfig+0x3b4>)
 800a5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fa:	bf00      	nop
 800a5fc:	0800a621 	.word	0x0800a621
 800a600:	0800a629 	.word	0x0800a629
 800a604:	0800a631 	.word	0x0800a631
 800a608:	0800a647 	.word	0x0800a647
 800a60c:	0800a637 	.word	0x0800a637
 800a610:	0800a647 	.word	0x0800a647
 800a614:	0800a647 	.word	0x0800a647
 800a618:	0800a647 	.word	0x0800a647
 800a61c:	0800a63f 	.word	0x0800a63f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a620:	f7fc fbf4 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 800a624:	6178      	str	r0, [r7, #20]
        break;
 800a626:	e013      	b.n	800a650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a628:	f7fc fc06 	bl	8006e38 <HAL_RCC_GetPCLK2Freq>
 800a62c:	6178      	str	r0, [r7, #20]
        break;
 800a62e:	e00f      	b.n	800a650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a630:	4b49      	ldr	r3, [pc, #292]	; (800a758 <UART_SetConfig+0x510>)
 800a632:	617b      	str	r3, [r7, #20]
        break;
 800a634:	e00c      	b.n	800a650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a636:	f7fc fb53 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 800a63a:	6178      	str	r0, [r7, #20]
        break;
 800a63c:	e008      	b.n	800a650 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a63e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a642:	617b      	str	r3, [r7, #20]
        break;
 800a644:	e004      	b.n	800a650 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	76bb      	strb	r3, [r7, #26]
        break;
 800a64e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d074      	beq.n	800a740 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	005a      	lsls	r2, r3, #1
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	085b      	lsrs	r3, r3, #1
 800a660:	441a      	add	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	fbb2 f3f3 	udiv	r3, r2, r3
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	2b0f      	cmp	r3, #15
 800a672:	d916      	bls.n	800a6a2 <UART_SetConfig+0x45a>
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a67a:	d212      	bcs.n	800a6a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f023 030f 	bic.w	r3, r3, #15
 800a684:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	b29a      	uxth	r2, r3
 800a692:	89fb      	ldrh	r3, [r7, #14]
 800a694:	4313      	orrs	r3, r2
 800a696:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	89fa      	ldrh	r2, [r7, #14]
 800a69e:	60da      	str	r2, [r3, #12]
 800a6a0:	e04e      	b.n	800a740 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	76bb      	strb	r3, [r7, #26]
 800a6a6:	e04b      	b.n	800a740 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6a8:	7efb      	ldrb	r3, [r7, #27]
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	d827      	bhi.n	800a6fe <UART_SetConfig+0x4b6>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <UART_SetConfig+0x46c>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a6d9 	.word	0x0800a6d9
 800a6b8:	0800a6e1 	.word	0x0800a6e1
 800a6bc:	0800a6e9 	.word	0x0800a6e9
 800a6c0:	0800a6ff 	.word	0x0800a6ff
 800a6c4:	0800a6ef 	.word	0x0800a6ef
 800a6c8:	0800a6ff 	.word	0x0800a6ff
 800a6cc:	0800a6ff 	.word	0x0800a6ff
 800a6d0:	0800a6ff 	.word	0x0800a6ff
 800a6d4:	0800a6f7 	.word	0x0800a6f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6d8:	f7fc fb98 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 800a6dc:	6178      	str	r0, [r7, #20]
        break;
 800a6de:	e013      	b.n	800a708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6e0:	f7fc fbaa 	bl	8006e38 <HAL_RCC_GetPCLK2Freq>
 800a6e4:	6178      	str	r0, [r7, #20]
        break;
 800a6e6:	e00f      	b.n	800a708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6e8:	4b1b      	ldr	r3, [pc, #108]	; (800a758 <UART_SetConfig+0x510>)
 800a6ea:	617b      	str	r3, [r7, #20]
        break;
 800a6ec:	e00c      	b.n	800a708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ee:	f7fc faf7 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 800a6f2:	6178      	str	r0, [r7, #20]
        break;
 800a6f4:	e008      	b.n	800a708 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6fa:	617b      	str	r3, [r7, #20]
        break;
 800a6fc:	e004      	b.n	800a708 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	76bb      	strb	r3, [r7, #26]
        break;
 800a706:	bf00      	nop
    }

    if (pclk != 0U)
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d018      	beq.n	800a740 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	085a      	lsrs	r2, r3, #1
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	441a      	add	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a720:	b29b      	uxth	r3, r3
 800a722:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2b0f      	cmp	r3, #15
 800a728:	d908      	bls.n	800a73c <UART_SetConfig+0x4f4>
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a730:	d204      	bcs.n	800a73c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	60da      	str	r2, [r3, #12]
 800a73a:	e001      	b.n	800a740 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a74c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3720      	adds	r7, #32
 800a752:	46bd      	mov	sp, r7
 800a754:	bdb0      	pop	{r4, r5, r7, pc}
 800a756:	bf00      	nop
 800a758:	00f42400 	.word	0x00f42400

0800a75c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	f003 0308 	and.w	r3, r3, #8
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	f003 0320 	and.w	r3, r3, #32
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01a      	beq.n	800a872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a85a:	d10a      	bne.n	800a872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	430a      	orrs	r2, r1
 800a870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00a      	beq.n	800a894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	430a      	orrs	r2, r1
 800a892:	605a      	str	r2, [r3, #4]
  }
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8b0:	f7f9 fcfe 	bl	80042b0 <HAL_GetTick>
 800a8b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0308 	and.w	r3, r3, #8
 800a8c0:	2b08      	cmp	r3, #8
 800a8c2:	d10e      	bne.n	800a8e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f82d 	bl	800a932 <UART_WaitOnFlagUntilTimeout>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e023      	b.n	800a92a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d10e      	bne.n	800a90e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f817 	bl	800a932 <UART_WaitOnFlagUntilTimeout>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e00d      	b.n	800a92a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2220      	movs	r2, #32
 800a912:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	603b      	str	r3, [r7, #0]
 800a93e:	4613      	mov	r3, r2
 800a940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a942:	e05e      	b.n	800aa02 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a94a:	d05a      	beq.n	800aa02 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a94c:	f7f9 fcb0 	bl	80042b0 <HAL_GetTick>
 800a950:	4602      	mov	r2, r0
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d302      	bcc.n	800a962 <UART_WaitOnFlagUntilTimeout+0x30>
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d11b      	bne.n	800a99a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a970:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	689a      	ldr	r2, [r3, #8]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f022 0201 	bic.w	r2, r2, #1
 800a980:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2220      	movs	r2, #32
 800a986:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2220      	movs	r2, #32
 800a98c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a996:	2303      	movs	r3, #3
 800a998:	e043      	b.n	800aa22 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d02c      	beq.n	800aa02 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9b6:	d124      	bne.n	800aa02 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 0201 	bic.w	r2, r2, #1
 800a9e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2220      	movs	r2, #32
 800a9e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e00f      	b.n	800aa22 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	69da      	ldr	r2, [r3, #28]
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	bf0c      	ite	eq
 800aa12:	2301      	moveq	r3, #1
 800aa14:	2300      	movne	r3, #0
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	461a      	mov	r2, r3
 800aa1a:	79fb      	ldrb	r3, [r7, #7]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d091      	beq.n	800a944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa30:	4904      	ldr	r1, [pc, #16]	; (800aa44 <MX_FATFS_Init+0x18>)
 800aa32:	4805      	ldr	r0, [pc, #20]	; (800aa48 <MX_FATFS_Init+0x1c>)
 800aa34:	f002 ff6c 	bl	800d910 <FATFS_LinkDriver>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <MX_FATFS_Init+0x20>)
 800aa3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa40:	bf00      	nop
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	2000e490 	.word	0x2000e490
 800aa48:	20000148 	.word	0x20000148
 800aa4c:	2000e494 	.word	0x2000e494

0800aa50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7f6 fc25 	bl	80012bc <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800aa72:	bf00      	nop
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7f6 fcfd 	bl	8001488 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800aa8e:	bf00      	nop
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	607a      	str	r2, [r7, #4]
 800aaa2:	603b      	str	r3, [r7, #0]
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 800aaa8:	7bf8      	ldrb	r0, [r7, #15]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	f7f6 fd00 	bl	80014b4 <SD_disk_read>
  /* USER CODE END READ */
}
 800aab4:	bf00      	nop
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 800aace:	7bf8      	ldrb	r0, [r7, #15]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	f7f6 fd57 	bl	8001588 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800aada:	bf00      	nop
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	603a      	str	r2, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	79b9      	ldrb	r1, [r7, #6]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7f6 fdc8 	bl	8001690 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800ab00:	bf00      	nop
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	4a08      	ldr	r2, [pc, #32]	; (800ab3c <disk_status+0x30>)
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	79fa      	ldrb	r2, [r7, #7]
 800ab24:	4905      	ldr	r1, [pc, #20]	; (800ab3c <disk_status+0x30>)
 800ab26:	440a      	add	r2, r1
 800ab28:	7a12      	ldrb	r2, [r2, #8]
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20000218 	.word	0x20000218

0800ab40 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	4a0d      	ldr	r2, [pc, #52]	; (800ab88 <disk_initialize+0x48>)
 800ab52:	5cd3      	ldrb	r3, [r2, r3]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d111      	bne.n	800ab7c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	4a0b      	ldr	r2, [pc, #44]	; (800ab88 <disk_initialize+0x48>)
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab60:	79fb      	ldrb	r3, [r7, #7]
 800ab62:	4a09      	ldr	r2, [pc, #36]	; (800ab88 <disk_initialize+0x48>)
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	79fa      	ldrb	r2, [r7, #7]
 800ab6e:	4906      	ldr	r1, [pc, #24]	; (800ab88 <disk_initialize+0x48>)
 800ab70:	440a      	add	r2, r1
 800ab72:	7a12      	ldrb	r2, [r2, #8]
 800ab74:	4610      	mov	r0, r2
 800ab76:	4798      	blx	r3
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000218 	.word	0x20000218

0800ab8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	4a0a      	ldr	r2, [pc, #40]	; (800abc8 <disk_read+0x3c>)
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	689c      	ldr	r4, [r3, #8]
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	4a07      	ldr	r2, [pc, #28]	; (800abc8 <disk_read+0x3c>)
 800abac:	4413      	add	r3, r2
 800abae:	7a18      	ldrb	r0, [r3, #8]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	68b9      	ldr	r1, [r7, #8]
 800abb6:	47a0      	blx	r4
 800abb8:	4603      	mov	r3, r0
 800abba:	75fb      	strb	r3, [r7, #23]
  return res;
 800abbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	371c      	adds	r7, #28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd90      	pop	{r4, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000218 	.word	0x20000218

0800abcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60b9      	str	r1, [r7, #8]
 800abd4:	607a      	str	r2, [r7, #4]
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	4a0a      	ldr	r2, [pc, #40]	; (800ac08 <disk_write+0x3c>)
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	68dc      	ldr	r4, [r3, #12]
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	4a07      	ldr	r2, [pc, #28]	; (800ac08 <disk_write+0x3c>)
 800abec:	4413      	add	r3, r2
 800abee:	7a18      	ldrb	r0, [r3, #8]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	68b9      	ldr	r1, [r7, #8]
 800abf6:	47a0      	blx	r4
 800abf8:	4603      	mov	r3, r0
 800abfa:	75fb      	strb	r3, [r7, #23]
  return res;
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	371c      	adds	r7, #28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd90      	pop	{r4, r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20000218 	.word	0x20000218

0800ac0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	603a      	str	r2, [r7, #0]
 800ac16:	71fb      	strb	r3, [r7, #7]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	4a09      	ldr	r2, [pc, #36]	; (800ac44 <disk_ioctl+0x38>)
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	79fa      	ldrb	r2, [r7, #7]
 800ac2a:	4906      	ldr	r1, [pc, #24]	; (800ac44 <disk_ioctl+0x38>)
 800ac2c:	440a      	add	r2, r1
 800ac2e:	7a10      	ldrb	r0, [r2, #8]
 800ac30:	79b9      	ldrb	r1, [r7, #6]
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	4798      	blx	r3
 800ac36:	4603      	mov	r3, r0
 800ac38:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20000218 	.word	0x20000218

0800ac48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3301      	adds	r3, #1
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac58:	89fb      	ldrh	r3, [r7, #14]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	b21a      	sxth	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	b21b      	sxth	r3, r3
 800ac64:	4313      	orrs	r3, r2
 800ac66:	b21b      	sxth	r3, r3
 800ac68:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac6a:	89fb      	ldrh	r3, [r7, #14]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3303      	adds	r3, #3
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	021b      	lsls	r3, r3, #8
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	3202      	adds	r2, #2
 800ac90:	7812      	ldrb	r2, [r2, #0]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	021b      	lsls	r3, r3, #8
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	3201      	adds	r2, #1
 800ac9e:	7812      	ldrb	r2, [r2, #0]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	021b      	lsls	r3, r3, #8
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	7812      	ldrb	r2, [r2, #0]
 800acac:	4313      	orrs	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
	return rv;
 800acb0:	68fb      	ldr	r3, [r7, #12]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	460b      	mov	r3, r1
 800acc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	887a      	ldrh	r2, [r7, #2]
 800acd2:	b2d2      	uxtb	r2, r2
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	887b      	ldrh	r3, [r7, #2]
 800acd8:	0a1b      	lsrs	r3, r3, #8
 800acda:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	607a      	str	r2, [r7, #4]
 800ace2:	887a      	ldrh	r2, [r7, #2]
 800ace4:	b2d2      	uxtb	r2, r2
 800ace6:	701a      	strb	r2, [r3, #0]
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	b2d2      	uxtb	r2, r2
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	0a1b      	lsrs	r3, r3, #8
 800ad0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	1c5a      	adds	r2, r3, #1
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	b2d2      	uxtb	r2, r2
 800ad1a:	701a      	strb	r2, [r3, #0]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	0a1b      	lsrs	r3, r3, #8
 800ad20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	0a1b      	lsrs	r3, r3, #8
 800ad32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	607a      	str	r2, [r7, #4]
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	b2d2      	uxtb	r2, r2
 800ad3e:	701a      	strb	r2, [r3, #0]
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00d      	beq.n	800ad82 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	1c53      	adds	r3, r2, #1
 800ad6a:	613b      	str	r3, [r7, #16]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	6179      	str	r1, [r7, #20]
 800ad72:	7812      	ldrb	r2, [r2, #0]
 800ad74:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	607b      	str	r3, [r7, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f1      	bne.n	800ad66 <mem_cpy+0x1a>
	}
}
 800ad82:	bf00      	nop
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad8e:	b480      	push	{r7}
 800ad90:	b087      	sub	sp, #28
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	617a      	str	r2, [r7, #20]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	3b01      	subs	r3, #1
 800adae:	607b      	str	r3, [r7, #4]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1f3      	bne.n	800ad9e <mem_set+0x10>
}
 800adb6:	bf00      	nop
 800adb8:	bf00      	nop
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800adc4:	b480      	push	{r7}
 800adc6:	b089      	sub	sp, #36	; 0x24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	61fb      	str	r3, [r7, #28]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800add8:	2300      	movs	r3, #0
 800adda:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	61fa      	str	r2, [r7, #28]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	4619      	mov	r1, r3
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	61ba      	str	r2, [r7, #24]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	1acb      	subs	r3, r1, r3
 800adf0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	607b      	str	r3, [r7, #4]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <mem_cmp+0x40>
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d0eb      	beq.n	800addc <mem_cmp+0x18>

	return r;
 800ae04:	697b      	ldr	r3, [r7, #20]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3724      	adds	r7, #36	; 0x24
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae12:	b480      	push	{r7}
 800ae14:	b083      	sub	sp, #12
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae1c:	e002      	b.n	800ae24 <chk_chr+0x12>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3301      	adds	r3, #1
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d005      	beq.n	800ae38 <chk_chr+0x26>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d1f2      	bne.n	800ae1e <chk_chr+0xc>
	return *str;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d009      	beq.n	800ae6a <lock_fs+0x22>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f002 fe55 	bl	800db0a <ff_req_grant>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <lock_fs+0x22>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <lock_fs+0x24>
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00d      	beq.n	800aea2 <unlock_fs+0x2e>
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	2b0c      	cmp	r3, #12
 800ae8a:	d00a      	beq.n	800aea2 <unlock_fs+0x2e>
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	2b0b      	cmp	r3, #11
 800ae90:	d007      	beq.n	800aea2 <unlock_fs+0x2e>
 800ae92:	78fb      	ldrb	r3, [r7, #3]
 800ae94:	2b0f      	cmp	r3, #15
 800ae96:	d004      	beq.n	800aea2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f002 fe49 	bl	800db34 <ff_rel_grant>
	}
}
 800aea2:	bf00      	nop
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60bb      	str	r3, [r7, #8]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e029      	b.n	800af14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aec0:	4a27      	ldr	r2, [pc, #156]	; (800af60 <chk_lock+0xb4>)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	4413      	add	r3, r2
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d01d      	beq.n	800af0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aece:	4a24      	ldr	r2, [pc, #144]	; (800af60 <chk_lock+0xb4>)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	4413      	add	r3, r2
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d116      	bne.n	800af0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aee0:	4a1f      	ldr	r2, [pc, #124]	; (800af60 <chk_lock+0xb4>)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	4413      	add	r3, r2
 800aee8:	3304      	adds	r3, #4
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d10c      	bne.n	800af0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aef4:	4a1a      	ldr	r2, [pc, #104]	; (800af60 <chk_lock+0xb4>)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	011b      	lsls	r3, r3, #4
 800aefa:	4413      	add	r3, r2
 800aefc:	3308      	adds	r3, #8
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800af04:	429a      	cmp	r2, r3
 800af06:	d102      	bne.n	800af0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800af08:	e007      	b.n	800af1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800af0a:	2301      	movs	r3, #1
 800af0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3301      	adds	r3, #1
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d9d2      	bls.n	800aec0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d109      	bne.n	800af34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d102      	bne.n	800af2c <chk_lock+0x80>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d101      	bne.n	800af30 <chk_lock+0x84>
 800af2c:	2300      	movs	r3, #0
 800af2e:	e010      	b.n	800af52 <chk_lock+0xa6>
 800af30:	2312      	movs	r3, #18
 800af32:	e00e      	b.n	800af52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d108      	bne.n	800af4c <chk_lock+0xa0>
 800af3a:	4a09      	ldr	r2, [pc, #36]	; (800af60 <chk_lock+0xb4>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	4413      	add	r3, r2
 800af42:	330c      	adds	r3, #12
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af4a:	d101      	bne.n	800af50 <chk_lock+0xa4>
 800af4c:	2310      	movs	r3, #16
 800af4e:	e000      	b.n	800af52 <chk_lock+0xa6>
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	200001f8 	.word	0x200001f8

0800af64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af6a:	2300      	movs	r3, #0
 800af6c:	607b      	str	r3, [r7, #4]
 800af6e:	e002      	b.n	800af76 <enq_lock+0x12>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3301      	adds	r3, #1
 800af74:	607b      	str	r3, [r7, #4]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d806      	bhi.n	800af8a <enq_lock+0x26>
 800af7c:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <enq_lock+0x40>)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	4413      	add	r3, r2
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1f2      	bne.n	800af70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	bf14      	ite	ne
 800af90:	2301      	movne	r3, #1
 800af92:	2300      	moveq	r3, #0
 800af94:	b2db      	uxtb	r3, r3
}
 800af96:	4618      	mov	r0, r3
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	200001f8 	.word	0x200001f8

0800afa8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	e01f      	b.n	800aff8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800afb8:	4a41      	ldr	r2, [pc, #260]	; (800b0c0 <inc_lock+0x118>)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	011b      	lsls	r3, r3, #4
 800afbe:	4413      	add	r3, r2
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d113      	bne.n	800aff2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800afca:	4a3d      	ldr	r2, [pc, #244]	; (800b0c0 <inc_lock+0x118>)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	4413      	add	r3, r2
 800afd2:	3304      	adds	r3, #4
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afda:	429a      	cmp	r2, r3
 800afdc:	d109      	bne.n	800aff2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afde:	4a38      	ldr	r2, [pc, #224]	; (800b0c0 <inc_lock+0x118>)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	4413      	add	r3, r2
 800afe6:	3308      	adds	r3, #8
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afee:	429a      	cmp	r2, r3
 800aff0:	d006      	beq.n	800b000 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d9dc      	bls.n	800afb8 <inc_lock+0x10>
 800affe:	e000      	b.n	800b002 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b000:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b02      	cmp	r3, #2
 800b006:	d132      	bne.n	800b06e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e002      	b.n	800b014 <inc_lock+0x6c>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d806      	bhi.n	800b028 <inc_lock+0x80>
 800b01a:	4a29      	ldr	r2, [pc, #164]	; (800b0c0 <inc_lock+0x118>)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	4413      	add	r3, r2
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1f2      	bne.n	800b00e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d101      	bne.n	800b032 <inc_lock+0x8a>
 800b02e:	2300      	movs	r3, #0
 800b030:	e040      	b.n	800b0b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	4922      	ldr	r1, [pc, #136]	; (800b0c0 <inc_lock+0x118>)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	440b      	add	r3, r1
 800b03e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689a      	ldr	r2, [r3, #8]
 800b044:	491e      	ldr	r1, [pc, #120]	; (800b0c0 <inc_lock+0x118>)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	011b      	lsls	r3, r3, #4
 800b04a:	440b      	add	r3, r1
 800b04c:	3304      	adds	r3, #4
 800b04e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	695a      	ldr	r2, [r3, #20]
 800b054:	491a      	ldr	r1, [pc, #104]	; (800b0c0 <inc_lock+0x118>)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	011b      	lsls	r3, r3, #4
 800b05a:	440b      	add	r3, r1
 800b05c:	3308      	adds	r3, #8
 800b05e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b060:	4a17      	ldr	r2, [pc, #92]	; (800b0c0 <inc_lock+0x118>)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	4413      	add	r3, r2
 800b068:	330c      	adds	r3, #12
 800b06a:	2200      	movs	r2, #0
 800b06c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <inc_lock+0xe0>
 800b074:	4a12      	ldr	r2, [pc, #72]	; (800b0c0 <inc_lock+0x118>)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	011b      	lsls	r3, r3, #4
 800b07a:	4413      	add	r3, r2
 800b07c:	330c      	adds	r3, #12
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <inc_lock+0xe0>
 800b084:	2300      	movs	r3, #0
 800b086:	e015      	b.n	800b0b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d108      	bne.n	800b0a0 <inc_lock+0xf8>
 800b08e:	4a0c      	ldr	r2, [pc, #48]	; (800b0c0 <inc_lock+0x118>)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	011b      	lsls	r3, r3, #4
 800b094:	4413      	add	r3, r2
 800b096:	330c      	adds	r3, #12
 800b098:	881b      	ldrh	r3, [r3, #0]
 800b09a:	3301      	adds	r3, #1
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	e001      	b.n	800b0a4 <inc_lock+0xfc>
 800b0a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0a4:	4906      	ldr	r1, [pc, #24]	; (800b0c0 <inc_lock+0x118>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	011b      	lsls	r3, r3, #4
 800b0aa:	440b      	add	r3, r1
 800b0ac:	330c      	adds	r3, #12
 800b0ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3301      	adds	r3, #1
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	200001f8 	.word	0x200001f8

0800b0c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	607b      	str	r3, [r7, #4]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d825      	bhi.n	800b124 <dec_lock+0x60>
		n = Files[i].ctr;
 800b0d8:	4a17      	ldr	r2, [pc, #92]	; (800b138 <dec_lock+0x74>)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	011b      	lsls	r3, r3, #4
 800b0de:	4413      	add	r3, r2
 800b0e0:	330c      	adds	r3, #12
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0e6:	89fb      	ldrh	r3, [r7, #14]
 800b0e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ec:	d101      	bne.n	800b0f2 <dec_lock+0x2e>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0f2:	89fb      	ldrh	r3, [r7, #14]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <dec_lock+0x3a>
 800b0f8:	89fb      	ldrh	r3, [r7, #14]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0fe:	4a0e      	ldr	r2, [pc, #56]	; (800b138 <dec_lock+0x74>)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	4413      	add	r3, r2
 800b106:	330c      	adds	r3, #12
 800b108:	89fa      	ldrh	r2, [r7, #14]
 800b10a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b10c:	89fb      	ldrh	r3, [r7, #14]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d105      	bne.n	800b11e <dec_lock+0x5a>
 800b112:	4a09      	ldr	r2, [pc, #36]	; (800b138 <dec_lock+0x74>)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	011b      	lsls	r3, r3, #4
 800b118:	4413      	add	r3, r2
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	737b      	strb	r3, [r7, #13]
 800b122:	e001      	b.n	800b128 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b124:	2302      	movs	r3, #2
 800b126:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b128:	7b7b      	ldrb	r3, [r7, #13]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	200001f8 	.word	0x200001f8

0800b13c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b144:	2300      	movs	r3, #0
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e010      	b.n	800b16c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b14a:	4a0d      	ldr	r2, [pc, #52]	; (800b180 <clear_lock+0x44>)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	011b      	lsls	r3, r3, #4
 800b150:	4413      	add	r3, r2
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	429a      	cmp	r2, r3
 800b158:	d105      	bne.n	800b166 <clear_lock+0x2a>
 800b15a:	4a09      	ldr	r2, [pc, #36]	; (800b180 <clear_lock+0x44>)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	4413      	add	r3, r2
 800b162:	2200      	movs	r2, #0
 800b164:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3301      	adds	r3, #1
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d9eb      	bls.n	800b14a <clear_lock+0xe>
	}
}
 800b172:	bf00      	nop
 800b174:	bf00      	nop
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	200001f8 	.word	0x200001f8

0800b184 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	78db      	ldrb	r3, [r3, #3]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d034      	beq.n	800b202 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	7858      	ldrb	r0, [r3, #1]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	f7ff fd0e 	bl	800abcc <disk_write>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	73fb      	strb	r3, [r7, #15]
 800b1ba:	e022      	b.n	800b202 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	1ad2      	subs	r2, r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d217      	bcs.n	800b202 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	789b      	ldrb	r3, [r3, #2]
 800b1d6:	613b      	str	r3, [r7, #16]
 800b1d8:	e010      	b.n	800b1fc <sync_window+0x78>
					wsect += fs->fsize;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	7858      	ldrb	r0, [r3, #1]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	f7ff fceb 	bl	800abcc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d8eb      	bhi.n	800b1da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	429a      	cmp	r2, r3
 800b222:	d01b      	beq.n	800b25c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff ffad 	bl	800b184 <sync_window>
 800b22a:	4603      	mov	r3, r0
 800b22c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d113      	bne.n	800b25c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	7858      	ldrb	r0, [r3, #1]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b23e:	2301      	movs	r3, #1
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	f7ff fca3 	bl	800ab8c <disk_read>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b250:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b252:	2301      	movs	r3, #1
 800b254:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff ff87 	bl	800b184 <sync_window>
 800b276:	4603      	mov	r3, r0
 800b278:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d159      	bne.n	800b334 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b03      	cmp	r3, #3
 800b286:	d149      	bne.n	800b31c <sync_fs+0xb4>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	791b      	ldrb	r3, [r3, #4]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d145      	bne.n	800b31c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	899b      	ldrh	r3, [r3, #12]
 800b29a:	461a      	mov	r2, r3
 800b29c:	2100      	movs	r1, #0
 800b29e:	f7ff fd76 	bl	800ad8e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	333c      	adds	r3, #60	; 0x3c
 800b2a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b2aa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff fd05 	bl	800acbe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	333c      	adds	r3, #60	; 0x3c
 800b2b8:	4921      	ldr	r1, [pc, #132]	; (800b340 <sync_fs+0xd8>)
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7ff fd1a 	bl	800acf4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	333c      	adds	r3, #60	; 0x3c
 800b2c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2c8:	491e      	ldr	r1, [pc, #120]	; (800b344 <sync_fs+0xdc>)
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff fd12 	bl	800acf4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	333c      	adds	r3, #60	; 0x3c
 800b2d4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	4610      	mov	r0, r2
 800b2e0:	f7ff fd08 	bl	800acf4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	333c      	adds	r3, #60	; 0x3c
 800b2e8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	f7ff fcfe 	bl	800acf4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	7858      	ldrb	r0, [r3, #1]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b310:	2301      	movs	r3, #1
 800b312:	f7ff fc5b 	bl	800abcc <disk_write>
			fs->fsi_flag = 0;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	785b      	ldrb	r3, [r3, #1]
 800b320:	2200      	movs	r2, #0
 800b322:	2100      	movs	r1, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff fc71 	bl	800ac0c <disk_ioctl>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <sync_fs+0xcc>
 800b330:	2301      	movs	r3, #1
 800b332:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	41615252 	.word	0x41615252
 800b344:	61417272 	.word	0x61417272

0800b348 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	3b02      	subs	r3, #2
 800b356:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	3b02      	subs	r3, #2
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d301      	bcc.n	800b368 <clust2sect+0x20>
 800b364:	2300      	movs	r3, #0
 800b366:	e008      	b.n	800b37a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	895b      	ldrh	r3, [r3, #10]
 800b36c:	461a      	mov	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	fb03 f202 	mul.w	r2, r3, r2
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b378:	4413      	add	r3, r2
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b086      	sub	sp, #24
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d904      	bls.n	800b3a6 <get_fat+0x20>
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	6a1b      	ldr	r3, [r3, #32]
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d302      	bcc.n	800b3ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	e0bb      	b.n	800b524 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b3ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	f000 8083 	beq.w	800b4c2 <get_fat+0x13c>
 800b3bc:	2b03      	cmp	r3, #3
 800b3be:	f300 80a7 	bgt.w	800b510 <get_fat+0x18a>
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d002      	beq.n	800b3cc <get_fat+0x46>
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d056      	beq.n	800b478 <get_fat+0xf2>
 800b3ca:	e0a1      	b.n	800b510 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	085b      	lsrs	r3, r3, #1
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	899b      	ldrh	r3, [r3, #12]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3ea:	4413      	add	r3, r2
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6938      	ldr	r0, [r7, #16]
 800b3f0:	f7ff ff0c 	bl	800b20c <move_window>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f040 808d 	bne.w	800b516 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	60fa      	str	r2, [r7, #12]
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	8992      	ldrh	r2, [r2, #12]
 800b406:	fbb3 f1f2 	udiv	r1, r3, r2
 800b40a:	fb02 f201 	mul.w	r2, r2, r1
 800b40e:	1a9b      	subs	r3, r3, r2
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	4413      	add	r3, r2
 800b414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b418:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	899b      	ldrh	r3, [r3, #12]
 800b422:	4619      	mov	r1, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	fbb3 f3f1 	udiv	r3, r3, r1
 800b42a:	4413      	add	r3, r2
 800b42c:	4619      	mov	r1, r3
 800b42e:	6938      	ldr	r0, [r7, #16]
 800b430:	f7ff feec 	bl	800b20c <move_window>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d16f      	bne.n	800b51a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	899b      	ldrh	r3, [r3, #12]
 800b43e:	461a      	mov	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	fbb3 f1f2 	udiv	r1, r3, r2
 800b446:	fb02 f201 	mul.w	r2, r2, r1
 800b44a:	1a9b      	subs	r3, r3, r2
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	4413      	add	r3, r2
 800b450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	461a      	mov	r2, r3
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <get_fat+0xe8>
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	091b      	lsrs	r3, r3, #4
 800b46c:	e002      	b.n	800b474 <get_fat+0xee>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b474:	617b      	str	r3, [r7, #20]
			break;
 800b476:	e055      	b.n	800b524 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	899b      	ldrh	r3, [r3, #12]
 800b480:	085b      	lsrs	r3, r3, #1
 800b482:	b29b      	uxth	r3, r3
 800b484:	4619      	mov	r1, r3
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	fbb3 f3f1 	udiv	r3, r3, r1
 800b48c:	4413      	add	r3, r2
 800b48e:	4619      	mov	r1, r3
 800b490:	6938      	ldr	r0, [r7, #16]
 800b492:	f7ff febb 	bl	800b20c <move_window>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d140      	bne.n	800b51e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	8992      	ldrh	r2, [r2, #12]
 800b4aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4ae:	fb02 f200 	mul.w	r2, r2, r0
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff fbc6 	bl	800ac48 <ld_word>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	617b      	str	r3, [r7, #20]
			break;
 800b4c0:	e030      	b.n	800b524 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	899b      	ldrh	r3, [r3, #12]
 800b4ca:	089b      	lsrs	r3, r3, #2
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4d6:	4413      	add	r3, r2
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6938      	ldr	r0, [r7, #16]
 800b4dc:	f7ff fe96 	bl	800b20c <move_window>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d11d      	bne.n	800b522 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	8992      	ldrh	r2, [r2, #12]
 800b4f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4f8:	fb02 f200 	mul.w	r2, r2, r0
 800b4fc:	1a9b      	subs	r3, r3, r2
 800b4fe:	440b      	add	r3, r1
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff fbb9 	bl	800ac78 <ld_dword>
 800b506:	4603      	mov	r3, r0
 800b508:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b50c:	617b      	str	r3, [r7, #20]
			break;
 800b50e:	e009      	b.n	800b524 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b510:	2301      	movs	r3, #1
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	e006      	b.n	800b524 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b516:	bf00      	nop
 800b518:	e004      	b.n	800b524 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b51a:	bf00      	nop
 800b51c:	e002      	b.n	800b524 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b51e:	bf00      	nop
 800b520:	e000      	b.n	800b524 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b522:	bf00      	nop
		}
	}

	return val;
 800b524:	697b      	ldr	r3, [r7, #20]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b52e:	b590      	push	{r4, r7, lr}
 800b530:	b089      	sub	sp, #36	; 0x24
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	60b9      	str	r1, [r7, #8]
 800b538:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b53a:	2302      	movs	r3, #2
 800b53c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2b01      	cmp	r3, #1
 800b542:	f240 8102 	bls.w	800b74a <put_fat+0x21c>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	f080 80fc 	bcs.w	800b74a <put_fat+0x21c>
		switch (fs->fs_type) {
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	2b03      	cmp	r3, #3
 800b558:	f000 80b6 	beq.w	800b6c8 <put_fat+0x19a>
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	f300 80fd 	bgt.w	800b75c <put_fat+0x22e>
 800b562:	2b01      	cmp	r3, #1
 800b564:	d003      	beq.n	800b56e <put_fat+0x40>
 800b566:	2b02      	cmp	r3, #2
 800b568:	f000 8083 	beq.w	800b672 <put_fat+0x144>
 800b56c:	e0f6      	b.n	800b75c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	61bb      	str	r3, [r7, #24]
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	085b      	lsrs	r3, r3, #1
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	4413      	add	r3, r2
 800b57a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	899b      	ldrh	r3, [r3, #12]
 800b584:	4619      	mov	r1, r3
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	fbb3 f3f1 	udiv	r3, r3, r1
 800b58c:	4413      	add	r3, r2
 800b58e:	4619      	mov	r1, r3
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7ff fe3b 	bl	800b20c <move_window>
 800b596:	4603      	mov	r3, r0
 800b598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b59a:	7ffb      	ldrb	r3, [r7, #31]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f040 80d6 	bne.w	800b74e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	1c5a      	adds	r2, r3, #1
 800b5ac:	61ba      	str	r2, [r7, #24]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	8992      	ldrh	r2, [r2, #12]
 800b5b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5b6:	fb02 f200 	mul.w	r2, r2, r0
 800b5ba:	1a9b      	subs	r3, r3, r2
 800b5bc:	440b      	add	r3, r1
 800b5be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00d      	beq.n	800b5e6 <put_fat+0xb8>
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	b25b      	sxtb	r3, r3
 800b5d0:	f003 030f 	and.w	r3, r3, #15
 800b5d4:	b25a      	sxtb	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	011b      	lsls	r3, r3, #4
 800b5dc:	b25b      	sxtb	r3, r3
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	b25b      	sxtb	r3, r3
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	e001      	b.n	800b5ea <put_fat+0xbc>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	899b      	ldrh	r3, [r3, #12]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	fbb3 f3f1 	udiv	r3, r3, r1
 800b604:	4413      	add	r3, r2
 800b606:	4619      	mov	r1, r3
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f7ff fdff 	bl	800b20c <move_window>
 800b60e:	4603      	mov	r3, r0
 800b610:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b612:	7ffb      	ldrb	r3, [r7, #31]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f040 809c 	bne.w	800b752 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	899b      	ldrh	r3, [r3, #12]
 800b624:	461a      	mov	r2, r3
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	fbb3 f0f2 	udiv	r0, r3, r2
 800b62c:	fb02 f200 	mul.w	r2, r2, r0
 800b630:	1a9b      	subs	r3, r3, r2
 800b632:	440b      	add	r3, r1
 800b634:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d003      	beq.n	800b648 <put_fat+0x11a>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	091b      	lsrs	r3, r3, #4
 800b644:	b2db      	uxtb	r3, r3
 800b646:	e00e      	b.n	800b666 <put_fat+0x138>
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	b25b      	sxtb	r3, r3
 800b64e:	f023 030f 	bic.w	r3, r3, #15
 800b652:	b25a      	sxtb	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	0a1b      	lsrs	r3, r3, #8
 800b658:	b25b      	sxtb	r3, r3
 800b65a:	f003 030f 	and.w	r3, r3, #15
 800b65e:	b25b      	sxtb	r3, r3
 800b660:	4313      	orrs	r3, r2
 800b662:	b25b      	sxtb	r3, r3
 800b664:	b2db      	uxtb	r3, r3
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	70da      	strb	r2, [r3, #3]
			break;
 800b670:	e074      	b.n	800b75c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	899b      	ldrh	r3, [r3, #12]
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	4619      	mov	r1, r3
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	fbb3 f3f1 	udiv	r3, r3, r1
 800b686:	4413      	add	r3, r2
 800b688:	4619      	mov	r1, r3
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7ff fdbe 	bl	800b20c <move_window>
 800b690:	4603      	mov	r3, r0
 800b692:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b694:	7ffb      	ldrb	r3, [r7, #31]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d15d      	bne.n	800b756 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	8992      	ldrh	r2, [r2, #12]
 800b6a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6ac:	fb02 f200 	mul.w	r2, r2, r0
 800b6b0:	1a9b      	subs	r3, r3, r2
 800b6b2:	440b      	add	r3, r1
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff faff 	bl	800acbe <st_word>
			fs->wflag = 1;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	70da      	strb	r2, [r3, #3]
			break;
 800b6c6:	e049      	b.n	800b75c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	899b      	ldrh	r3, [r3, #12]
 800b6d0:	089b      	lsrs	r3, r3, #2
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6dc:	4413      	add	r3, r2
 800b6de:	4619      	mov	r1, r3
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff fd93 	bl	800b20c <move_window>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6ea:	7ffb      	ldrb	r3, [r7, #31]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d134      	bne.n	800b75a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	8992      	ldrh	r2, [r2, #12]
 800b704:	fbb3 f0f2 	udiv	r0, r3, r2
 800b708:	fb02 f200 	mul.w	r2, r2, r0
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	440b      	add	r3, r1
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fab1 	bl	800ac78 <ld_dword>
 800b716:	4603      	mov	r3, r0
 800b718:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b71c:	4323      	orrs	r3, r4
 800b71e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	8992      	ldrh	r2, [r2, #12]
 800b72e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b732:	fb02 f200 	mul.w	r2, r2, r0
 800b736:	1a9b      	subs	r3, r3, r2
 800b738:	440b      	add	r3, r1
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff fad9 	bl	800acf4 <st_dword>
			fs->wflag = 1;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2201      	movs	r2, #1
 800b746:	70da      	strb	r2, [r3, #3]
			break;
 800b748:	e008      	b.n	800b75c <put_fat+0x22e>
		}
	}
 800b74a:	bf00      	nop
 800b74c:	e006      	b.n	800b75c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b74e:	bf00      	nop
 800b750:	e004      	b.n	800b75c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b752:	bf00      	nop
 800b754:	e002      	b.n	800b75c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b756:	bf00      	nop
 800b758:	e000      	b.n	800b75c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b75a:	bf00      	nop
	return res;
 800b75c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3724      	adds	r7, #36	; 0x24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd90      	pop	{r4, r7, pc}

0800b766 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b088      	sub	sp, #32
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d904      	bls.n	800b78c <remove_chain+0x26>
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d301      	bcc.n	800b790 <remove_chain+0x2a>
 800b78c:	2302      	movs	r3, #2
 800b78e:	e04b      	b.n	800b828 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00c      	beq.n	800b7b0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b79a:	6879      	ldr	r1, [r7, #4]
 800b79c:	69b8      	ldr	r0, [r7, #24]
 800b79e:	f7ff fec6 	bl	800b52e <put_fat>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b7a6:	7ffb      	ldrb	r3, [r7, #31]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <remove_chain+0x4a>
 800b7ac:	7ffb      	ldrb	r3, [r7, #31]
 800b7ae:	e03b      	b.n	800b828 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff fde7 	bl	800b386 <get_fat>
 800b7b8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d031      	beq.n	800b824 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d101      	bne.n	800b7ca <remove_chain+0x64>
 800b7c6:	2302      	movs	r3, #2
 800b7c8:	e02e      	b.n	800b828 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7d0:	d101      	bne.n	800b7d6 <remove_chain+0x70>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e028      	b.n	800b828 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	69b8      	ldr	r0, [r7, #24]
 800b7dc:	f7ff fea7 	bl	800b52e <put_fat>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b7e4:	7ffb      	ldrb	r3, [r7, #31]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <remove_chain+0x88>
 800b7ea:	7ffb      	ldrb	r3, [r7, #31]
 800b7ec:	e01c      	b.n	800b828 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	69da      	ldr	r2, [r3, #28]
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	3b02      	subs	r3, #2
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d20b      	bcs.n	800b814 <remove_chain+0xae>
			fs->free_clst++;
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	69db      	ldr	r3, [r3, #28]
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	791b      	ldrb	r3, [r3, #4]
 800b80a:	f043 0301 	orr.w	r3, r3, #1
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d3c6      	bcc.n	800b7b0 <remove_chain+0x4a>
 800b822:	e000      	b.n	800b826 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b824:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3720      	adds	r7, #32
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10d      	bne.n	800b862 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d004      	beq.n	800b85c <create_chain+0x2c>
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d31b      	bcc.n	800b894 <create_chain+0x64>
 800b85c:	2301      	movs	r3, #1
 800b85e:	61bb      	str	r3, [r7, #24]
 800b860:	e018      	b.n	800b894 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff fd8e 	bl	800b386 <get_fat>
 800b86a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d801      	bhi.n	800b876 <create_chain+0x46>
 800b872:	2301      	movs	r3, #1
 800b874:	e070      	b.n	800b958 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b87c:	d101      	bne.n	800b882 <create_chain+0x52>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	e06a      	b.n	800b958 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d201      	bcs.n	800b890 <create_chain+0x60>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	e063      	b.n	800b958 <create_chain+0x128>
		scl = clst;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	3301      	adds	r3, #1
 800b89c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d307      	bcc.n	800b8b8 <create_chain+0x88>
				ncl = 2;
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b8ac:	69fa      	ldr	r2, [r7, #28]
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d901      	bls.n	800b8b8 <create_chain+0x88>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e04f      	b.n	800b958 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b8b8:	69f9      	ldr	r1, [r7, #28]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff fd63 	bl	800b386 <get_fat>
 800b8c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d003      	beq.n	800b8d6 <create_chain+0xa6>
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8d4:	d101      	bne.n	800b8da <create_chain+0xaa>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	e03e      	b.n	800b958 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d1da      	bne.n	800b898 <create_chain+0x68>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	e038      	b.n	800b958 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b8e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b8e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8ec:	69f9      	ldr	r1, [r7, #28]
 800b8ee:	6938      	ldr	r0, [r7, #16]
 800b8f0:	f7ff fe1d 	bl	800b52e <put_fat>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d109      	bne.n	800b912 <create_chain+0xe2>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d006      	beq.n	800b912 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6938      	ldr	r0, [r7, #16]
 800b90a:	f7ff fe10 	bl	800b52e <put_fat>
 800b90e:	4603      	mov	r3, r0
 800b910:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d116      	bne.n	800b946 <create_chain+0x116>
		fs->last_clst = ncl;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	69da      	ldr	r2, [r3, #28]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	3b02      	subs	r3, #2
 800b928:	429a      	cmp	r2, r3
 800b92a:	d804      	bhi.n	800b936 <create_chain+0x106>
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	1e5a      	subs	r2, r3, #1
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	791b      	ldrb	r3, [r3, #4]
 800b93a:	f043 0301 	orr.w	r3, r3, #1
 800b93e:	b2da      	uxtb	r2, r3
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	711a      	strb	r2, [r3, #4]
 800b944:	e007      	b.n	800b956 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d102      	bne.n	800b952 <create_chain+0x122>
 800b94c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b950:	e000      	b.n	800b954 <create_chain+0x124>
 800b952:	2301      	movs	r3, #1
 800b954:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b956:	69fb      	ldr	r3, [r7, #28]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3720      	adds	r7, #32
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b960:	b480      	push	{r7}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b974:	3304      	adds	r3, #4
 800b976:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	899b      	ldrh	r3, [r3, #12]
 800b97c:	461a      	mov	r2, r3
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	fbb3 f3f2 	udiv	r3, r3, r2
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	8952      	ldrh	r2, [r2, #10]
 800b988:	fbb3 f3f2 	udiv	r3, r3, r2
 800b98c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	1d1a      	adds	r2, r3, #4
 800b992:	613a      	str	r2, [r7, #16]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <clmt_clust+0x42>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e010      	b.n	800b9c4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d307      	bcc.n	800b9ba <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	617b      	str	r3, [r7, #20]
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b9b8:	e7e9      	b.n	800b98e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b9ba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	4413      	add	r3, r2
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	371c      	adds	r7, #28
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9e6:	d204      	bcs.n	800b9f2 <dir_sdi+0x22>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	f003 031f 	and.w	r3, r3, #31
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	e071      	b.n	800bada <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <dir_sdi+0x46>
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d902      	bls.n	800ba16 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10c      	bne.n	800ba36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	095b      	lsrs	r3, r3, #5
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	8912      	ldrh	r2, [r2, #8]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d301      	bcc.n	800ba2c <dir_sdi+0x5c>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	e056      	b.n	800bada <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	61da      	str	r2, [r3, #28]
 800ba34:	e02d      	b.n	800ba92 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	895b      	ldrh	r3, [r3, #10]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	899b      	ldrh	r3, [r3, #12]
 800ba40:	fb03 f302 	mul.w	r3, r3, r2
 800ba44:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba46:	e019      	b.n	800ba7c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6979      	ldr	r1, [r7, #20]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7ff fc9a 	bl	800b386 <get_fat>
 800ba52:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5a:	d101      	bne.n	800ba60 <dir_sdi+0x90>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e03c      	b.n	800bada <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d904      	bls.n	800ba70 <dir_sdi+0xa0>
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d301      	bcc.n	800ba74 <dir_sdi+0xa4>
 800ba70:	2302      	movs	r3, #2
 800ba72:	e032      	b.n	800bada <dir_sdi+0x10a>
			ofs -= csz;
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d2e1      	bcs.n	800ba48 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ba84:	6979      	ldr	r1, [r7, #20]
 800ba86:	6938      	ldr	r0, [r7, #16]
 800ba88:	f7ff fc5e 	bl	800b348 <clust2sect>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <dir_sdi+0xd4>
 800baa0:	2302      	movs	r3, #2
 800baa2:	e01a      	b.n	800bada <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	69da      	ldr	r2, [r3, #28]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	899b      	ldrh	r3, [r3, #12]
 800baac:	4619      	mov	r1, r3
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bab4:	441a      	add	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	899b      	ldrh	r3, [r3, #12]
 800bac4:	461a      	mov	r2, r3
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	fbb3 f0f2 	udiv	r0, r3, r2
 800bacc:	fb02 f200 	mul.w	r2, r2, r0
 800bad0:	1a9b      	subs	r3, r3, r2
 800bad2:	18ca      	adds	r2, r1, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3718      	adds	r7, #24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b086      	sub	sp, #24
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	3320      	adds	r3, #32
 800baf8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <dir_next+0x28>
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb08:	d301      	bcc.n	800bb0e <dir_next+0x2c>
 800bb0a:	2304      	movs	r3, #4
 800bb0c:	e0bb      	b.n	800bc86 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	899b      	ldrh	r3, [r3, #12]
 800bb12:	461a      	mov	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb1a:	fb02 f201 	mul.w	r2, r2, r1
 800bb1e:	1a9b      	subs	r3, r3, r2
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f040 809d 	bne.w	800bc60 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10b      	bne.n	800bb50 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	095b      	lsrs	r3, r3, #5
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	8912      	ldrh	r2, [r2, #8]
 800bb40:	4293      	cmp	r3, r2
 800bb42:	f0c0 808d 	bcc.w	800bc60 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	61da      	str	r2, [r3, #28]
 800bb4c:	2304      	movs	r3, #4
 800bb4e:	e09a      	b.n	800bc86 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	899b      	ldrh	r3, [r3, #12]
 800bb54:	461a      	mov	r2, r3
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	8952      	ldrh	r2, [r2, #10]
 800bb60:	3a01      	subs	r2, #1
 800bb62:	4013      	ands	r3, r2
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d17b      	bne.n	800bc60 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f7ff fc08 	bl	800b386 <get_fat>
 800bb76:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d801      	bhi.n	800bb82 <dir_next+0xa0>
 800bb7e:	2302      	movs	r3, #2
 800bb80:	e081      	b.n	800bc86 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb88:	d101      	bne.n	800bb8e <dir_next+0xac>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e07b      	b.n	800bc86 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d359      	bcc.n	800bc4c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d104      	bne.n	800bba8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	61da      	str	r2, [r3, #28]
 800bba4:	2304      	movs	r3, #4
 800bba6:	e06e      	b.n	800bc86 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	4610      	mov	r0, r2
 800bbb2:	f7ff fe3d 	bl	800b830 <create_chain>
 800bbb6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <dir_next+0xe0>
 800bbbe:	2307      	movs	r3, #7
 800bbc0:	e061      	b.n	800bc86 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d101      	bne.n	800bbcc <dir_next+0xea>
 800bbc8:	2302      	movs	r3, #2
 800bbca:	e05c      	b.n	800bc86 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbd2:	d101      	bne.n	800bbd8 <dir_next+0xf6>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e056      	b.n	800bc86 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f7ff fad3 	bl	800b184 <sync_window>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <dir_next+0x106>
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e04e      	b.n	800bc86 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	899b      	ldrh	r3, [r3, #12]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	f7ff f8ca 	bl	800ad8e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	613b      	str	r3, [r7, #16]
 800bbfe:	6979      	ldr	r1, [r7, #20]
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff fba1 	bl	800b348 <clust2sect>
 800bc06:	4602      	mov	r2, r0
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	639a      	str	r2, [r3, #56]	; 0x38
 800bc0c:	e012      	b.n	800bc34 <dir_next+0x152>
						fs->wflag = 1;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2201      	movs	r2, #1
 800bc12:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f7ff fab5 	bl	800b184 <sync_window>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <dir_next+0x142>
 800bc20:	2301      	movs	r3, #1
 800bc22:	e030      	b.n	800bc86 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	3301      	adds	r3, #1
 800bc28:	613b      	str	r3, [r7, #16]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	639a      	str	r2, [r3, #56]	; 0x38
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	895b      	ldrh	r3, [r3, #10]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d3e6      	bcc.n	800bc0e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	1ad2      	subs	r2, r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bc52:	6979      	ldr	r1, [r7, #20]
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7ff fb77 	bl	800b348 <clust2sect>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	899b      	ldrh	r3, [r3, #12]
 800bc70:	461a      	mov	r2, r3
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc78:	fb02 f200 	mul.w	r2, r2, r0
 800bc7c:	1a9b      	subs	r3, r3, r2
 800bc7e:	18ca      	adds	r2, r1, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b086      	sub	sp, #24
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bc9e:	2100      	movs	r1, #0
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff fe95 	bl	800b9d0 <dir_sdi>
 800bca6:	4603      	mov	r3, r0
 800bca8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d12b      	bne.n	800bd08 <dir_alloc+0x7a>
		n = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7ff faa6 	bl	800b20c <move_window>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d11d      	bne.n	800bd06 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	2be5      	cmp	r3, #229	; 0xe5
 800bcd2:	d004      	beq.n	800bcde <dir_alloc+0x50>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a1b      	ldr	r3, [r3, #32]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d107      	bne.n	800bcee <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	3301      	adds	r3, #1
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d102      	bne.n	800bcf2 <dir_alloc+0x64>
 800bcec:	e00c      	b.n	800bd08 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bcee:	2300      	movs	r3, #0
 800bcf0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bcf2:	2101      	movs	r1, #1
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff fef4 	bl	800bae2 <dir_next>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d0d7      	beq.n	800bcb4 <dir_alloc+0x26>
 800bd04:	e000      	b.n	800bd08 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bd06:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	2b04      	cmp	r3, #4
 800bd0c:	d101      	bne.n	800bd12 <dir_alloc+0x84>
 800bd0e:	2307      	movs	r3, #7
 800bd10:	75fb      	strb	r3, [r7, #23]
	return res;
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	331a      	adds	r3, #26
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe ff8c 	bl	800ac48 <ld_word>
 800bd30:	4603      	mov	r3, r0
 800bd32:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d109      	bne.n	800bd50 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	3314      	adds	r3, #20
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fe ff81 	bl	800ac48 <ld_word>
 800bd46:	4603      	mov	r3, r0
 800bd48:	041b      	lsls	r3, r3, #16
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bd50:	68fb      	ldr	r3, [r7, #12]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	60b9      	str	r1, [r7, #8]
 800bd64:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	331a      	adds	r3, #26
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	b292      	uxth	r2, r2
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fe ffa4 	bl	800acbe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d109      	bne.n	800bd92 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	f103 0214 	add.w	r2, r3, #20
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	0c1b      	lsrs	r3, r3, #16
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f7fe ff96 	bl	800acbe <st_word>
	}
}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bd9c:	b590      	push	{r4, r7, lr}
 800bd9e:	b087      	sub	sp, #28
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	331a      	adds	r3, #26
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe ff4c 	bl	800ac48 <ld_word>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <cmp_lfn+0x1e>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e059      	b.n	800be6e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc2:	1e5a      	subs	r2, r3, #1
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	4413      	add	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	81fb      	strh	r3, [r7, #14]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	613b      	str	r3, [r7, #16]
 800bdd8:	e033      	b.n	800be42 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bdda:	4a27      	ldr	r2, [pc, #156]	; (800be78 <cmp_lfn+0xdc>)
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	4413      	add	r3, r2
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	4413      	add	r3, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fe ff2d 	bl	800ac48 <ld_word>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bdf2:	89fb      	ldrh	r3, [r7, #14]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d01a      	beq.n	800be2e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2bfe      	cmp	r3, #254	; 0xfe
 800bdfc:	d812      	bhi.n	800be24 <cmp_lfn+0x88>
 800bdfe:	89bb      	ldrh	r3, [r7, #12]
 800be00:	4618      	mov	r0, r3
 800be02:	f001 fdd1 	bl	800d9a8 <ff_wtoupper>
 800be06:	4603      	mov	r3, r0
 800be08:	461c      	mov	r4, r3
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	617a      	str	r2, [r7, #20]
 800be10:	005b      	lsls	r3, r3, #1
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	4413      	add	r3, r2
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	4618      	mov	r0, r3
 800be1a:	f001 fdc5 	bl	800d9a8 <ff_wtoupper>
 800be1e:	4603      	mov	r3, r0
 800be20:	429c      	cmp	r4, r3
 800be22:	d001      	beq.n	800be28 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800be24:	2300      	movs	r3, #0
 800be26:	e022      	b.n	800be6e <cmp_lfn+0xd2>
			}
			wc = uc;
 800be28:	89bb      	ldrh	r3, [r7, #12]
 800be2a:	81fb      	strh	r3, [r7, #14]
 800be2c:	e006      	b.n	800be3c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800be2e:	89bb      	ldrh	r3, [r7, #12]
 800be30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be34:	4293      	cmp	r3, r2
 800be36:	d001      	beq.n	800be3c <cmp_lfn+0xa0>
 800be38:	2300      	movs	r3, #0
 800be3a:	e018      	b.n	800be6e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	3301      	adds	r3, #1
 800be40:	613b      	str	r3, [r7, #16]
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	2b0c      	cmp	r3, #12
 800be46:	d9c8      	bls.n	800bdda <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00b      	beq.n	800be6c <cmp_lfn+0xd0>
 800be54:	89fb      	ldrh	r3, [r7, #14]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d008      	beq.n	800be6c <cmp_lfn+0xd0>
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	005b      	lsls	r3, r3, #1
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	4413      	add	r3, r2
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <cmp_lfn+0xd0>
 800be68:	2300      	movs	r3, #0
 800be6a:	e000      	b.n	800be6e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800be6c:	2301      	movs	r3, #1
}
 800be6e:	4618      	mov	r0, r3
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	bd90      	pop	{r4, r7, pc}
 800be76:	bf00      	nop
 800be78:	08014014 	.word	0x08014014

0800be7c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	4611      	mov	r1, r2
 800be88:	461a      	mov	r2, r3
 800be8a:	460b      	mov	r3, r1
 800be8c:	71fb      	strb	r3, [r7, #7]
 800be8e:	4613      	mov	r3, r2
 800be90:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	330d      	adds	r3, #13
 800be96:	79ba      	ldrb	r2, [r7, #6]
 800be98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	330b      	adds	r3, #11
 800be9e:	220f      	movs	r2, #15
 800bea0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	330c      	adds	r3, #12
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	331a      	adds	r3, #26
 800beae:	2100      	movs	r1, #0
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe ff04 	bl	800acbe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800beb6:	79fb      	ldrb	r3, [r7, #7]
 800beb8:	1e5a      	subs	r2, r3, #1
 800beba:	4613      	mov	r3, r2
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4413      	add	r3, r2
 800bec4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	82fb      	strh	r3, [r7, #22]
 800beca:	2300      	movs	r3, #0
 800becc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bece:	8afb      	ldrh	r3, [r7, #22]
 800bed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d007      	beq.n	800bee8 <put_lfn+0x6c>
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	61fa      	str	r2, [r7, #28]
 800bede:	005b      	lsls	r3, r3, #1
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4413      	add	r3, r2
 800bee4:	881b      	ldrh	r3, [r3, #0]
 800bee6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bee8:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <put_lfn+0xcc>)
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	4413      	add	r3, r2
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	4413      	add	r3, r2
 800bef6:	8afa      	ldrh	r2, [r7, #22]
 800bef8:	4611      	mov	r1, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe fedf 	bl	800acbe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bf00:	8afb      	ldrh	r3, [r7, #22]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d102      	bne.n	800bf0c <put_lfn+0x90>
 800bf06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf0a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	61bb      	str	r3, [r7, #24]
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	2b0c      	cmp	r3, #12
 800bf16:	d9da      	bls.n	800bece <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bf18:	8afb      	ldrh	r3, [r7, #22]
 800bf1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d006      	beq.n	800bf30 <put_lfn+0xb4>
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	4413      	add	r3, r2
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d103      	bne.n	800bf38 <put_lfn+0xbc>
 800bf30:	79fb      	ldrb	r3, [r7, #7]
 800bf32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf36:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	79fa      	ldrb	r2, [r7, #7]
 800bf3c:	701a      	strb	r2, [r3, #0]
}
 800bf3e:	bf00      	nop
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	08014014 	.word	0x08014014

0800bf4c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b08c      	sub	sp, #48	; 0x30
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bf5a:	220b      	movs	r2, #11
 800bf5c:	68b9      	ldr	r1, [r7, #8]
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f7fe fef4 	bl	800ad4c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b05      	cmp	r3, #5
 800bf68:	d92b      	bls.n	800bfc2 <gen_numname+0x76>
		sr = seq;
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bf6e:	e022      	b.n	800bfb6 <gen_numname+0x6a>
			wc = *lfn++;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	1c9a      	adds	r2, r3, #2
 800bf74:	607a      	str	r2, [r7, #4]
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf7e:	e017      	b.n	800bfb0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	005a      	lsls	r2, r3, #1
 800bf84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	4413      	add	r3, r2
 800bf8c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bf8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf90:	085b      	lsrs	r3, r3, #1
 800bf92:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d005      	beq.n	800bfaa <gen_numname+0x5e>
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bfa4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bfa8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	3301      	adds	r3, #1
 800bfae:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	2b0f      	cmp	r3, #15
 800bfb4:	d9e4      	bls.n	800bf80 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1d8      	bne.n	800bf70 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bfc2:	2307      	movs	r3, #7
 800bfc4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	f003 030f 	and.w	r3, r3, #15
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	3330      	adds	r3, #48	; 0x30
 800bfd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bfd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfda:	2b39      	cmp	r3, #57	; 0x39
 800bfdc:	d904      	bls.n	800bfe8 <gen_numname+0x9c>
 800bfde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfe2:	3307      	adds	r3, #7
 800bfe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfea:	1e5a      	subs	r2, r3, #1
 800bfec:	62ba      	str	r2, [r7, #40]	; 0x28
 800bfee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bff2:	4413      	add	r3, r2
 800bff4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bff8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	091b      	lsrs	r3, r3, #4
 800c000:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1de      	bne.n	800bfc6 <gen_numname+0x7a>
	ns[i] = '~';
 800c008:	f107 0214 	add.w	r2, r7, #20
 800c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00e:	4413      	add	r3, r2
 800c010:	227e      	movs	r2, #126	; 0x7e
 800c012:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c014:	2300      	movs	r3, #0
 800c016:	627b      	str	r3, [r7, #36]	; 0x24
 800c018:	e002      	b.n	800c020 <gen_numname+0xd4>
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	3301      	adds	r3, #1
 800c01e:	627b      	str	r3, [r7, #36]	; 0x24
 800c020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c024:	429a      	cmp	r2, r3
 800c026:	d205      	bcs.n	800c034 <gen_numname+0xe8>
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	4413      	add	r3, r2
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b20      	cmp	r3, #32
 800c032:	d1f2      	bne.n	800c01a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	2b07      	cmp	r3, #7
 800c038:	d808      	bhi.n	800c04c <gen_numname+0x100>
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	62ba      	str	r2, [r7, #40]	; 0x28
 800c040:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c044:	4413      	add	r3, r2
 800c046:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c04a:	e000      	b.n	800c04e <gen_numname+0x102>
 800c04c:	2120      	movs	r1, #32
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	627a      	str	r2, [r7, #36]	; 0x24
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	4413      	add	r3, r2
 800c058:	460a      	mov	r2, r1
 800c05a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	2b07      	cmp	r3, #7
 800c060:	d9e8      	bls.n	800c034 <gen_numname+0xe8>
}
 800c062:	bf00      	nop
 800c064:	bf00      	nop
 800c066:	3730      	adds	r7, #48	; 0x30
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c078:	230b      	movs	r3, #11
 800c07a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	0852      	lsrs	r2, r2, #1
 800c082:	01db      	lsls	r3, r3, #7
 800c084:	4313      	orrs	r3, r2
 800c086:	b2da      	uxtb	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	1c59      	adds	r1, r3, #1
 800c08c:	6079      	str	r1, [r7, #4]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	4413      	add	r3, r2
 800c092:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	3b01      	subs	r3, #1
 800c098:	60bb      	str	r3, [r7, #8]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1ed      	bne.n	800c07c <sum_sfn+0x10>
	return sum;
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b086      	sub	sp, #24
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0bc:	2100      	movs	r1, #0
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff fc86 	bl	800b9d0 <dir_sdi>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d001      	beq.n	800c0d2 <dir_find+0x24>
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	e0a9      	b.n	800c226 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0d2:	23ff      	movs	r3, #255	; 0xff
 800c0d4:	753b      	strb	r3, [r7, #20]
 800c0d6:	7d3b      	ldrb	r3, [r7, #20]
 800c0d8:	757b      	strb	r3, [r7, #21]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6938      	ldr	r0, [r7, #16]
 800c0ea:	f7ff f88f 	bl	800b20c <move_window>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 8090 	bne.w	800c21a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c102:	7dbb      	ldrb	r3, [r7, #22]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d102      	bne.n	800c10e <dir_find+0x60>
 800c108:	2304      	movs	r3, #4
 800c10a:	75fb      	strb	r3, [r7, #23]
 800c10c:	e08a      	b.n	800c224 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	330b      	adds	r3, #11
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c11a:	73fb      	strb	r3, [r7, #15]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	7bfa      	ldrb	r2, [r7, #15]
 800c120:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c122:	7dbb      	ldrb	r3, [r7, #22]
 800c124:	2be5      	cmp	r3, #229	; 0xe5
 800c126:	d007      	beq.n	800c138 <dir_find+0x8a>
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	f003 0308 	and.w	r3, r3, #8
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d009      	beq.n	800c146 <dir_find+0x98>
 800c132:	7bfb      	ldrb	r3, [r7, #15]
 800c134:	2b0f      	cmp	r3, #15
 800c136:	d006      	beq.n	800c146 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c138:	23ff      	movs	r3, #255	; 0xff
 800c13a:	757b      	strb	r3, [r7, #21]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c142:	631a      	str	r2, [r3, #48]	; 0x30
 800c144:	e05e      	b.n	800c204 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	2b0f      	cmp	r3, #15
 800c14a:	d136      	bne.n	800c1ba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c156:	2b00      	cmp	r3, #0
 800c158:	d154      	bne.n	800c204 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c15a:	7dbb      	ldrb	r3, [r7, #22]
 800c15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00d      	beq.n	800c180 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	7b5b      	ldrb	r3, [r3, #13]
 800c16a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c16c:	7dbb      	ldrb	r3, [r7, #22]
 800c16e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c172:	75bb      	strb	r3, [r7, #22]
 800c174:	7dbb      	ldrb	r3, [r7, #22]
 800c176:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	695a      	ldr	r2, [r3, #20]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c180:	7dba      	ldrb	r2, [r7, #22]
 800c182:	7d7b      	ldrb	r3, [r7, #21]
 800c184:	429a      	cmp	r2, r3
 800c186:	d115      	bne.n	800c1b4 <dir_find+0x106>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a1b      	ldr	r3, [r3, #32]
 800c18c:	330d      	adds	r3, #13
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	7d3a      	ldrb	r2, [r7, #20]
 800c192:	429a      	cmp	r2, r3
 800c194:	d10e      	bne.n	800c1b4 <dir_find+0x106>
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	691a      	ldr	r2, [r3, #16]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f7ff fdfb 	bl	800bd9c <cmp_lfn>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <dir_find+0x106>
 800c1ac:	7d7b      	ldrb	r3, [r7, #21]
 800c1ae:	3b01      	subs	r3, #1
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	e000      	b.n	800c1b6 <dir_find+0x108>
 800c1b4:	23ff      	movs	r3, #255	; 0xff
 800c1b6:	757b      	strb	r3, [r7, #21]
 800c1b8:	e024      	b.n	800c204 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c1ba:	7d7b      	ldrb	r3, [r7, #21]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d109      	bne.n	800c1d4 <dir_find+0x126>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a1b      	ldr	r3, [r3, #32]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7ff ff51 	bl	800c06c <sum_sfn>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	7d3b      	ldrb	r3, [r7, #20]
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d024      	beq.n	800c21e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d10a      	bne.n	800c1f8 <dir_find+0x14a>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a18      	ldr	r0, [r3, #32]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3324      	adds	r3, #36	; 0x24
 800c1ea:	220b      	movs	r2, #11
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	f7fe fde9 	bl	800adc4 <mem_cmp>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d014      	beq.n	800c222 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1f8:	23ff      	movs	r3, #255	; 0xff
 800c1fa:	757b      	strb	r3, [r7, #21]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c202:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c204:	2100      	movs	r1, #0
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fc6b 	bl	800bae2 <dir_next>
 800c20c:	4603      	mov	r3, r0
 800c20e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c210:	7dfb      	ldrb	r3, [r7, #23]
 800c212:	2b00      	cmp	r3, #0
 800c214:	f43f af65 	beq.w	800c0e2 <dir_find+0x34>
 800c218:	e004      	b.n	800c224 <dir_find+0x176>
		if (res != FR_OK) break;
 800c21a:	bf00      	nop
 800c21c:	e002      	b.n	800c224 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c21e:	bf00      	nop
 800c220:	e000      	b.n	800c224 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c222:	bf00      	nop

	return res;
 800c224:	7dfb      	ldrb	r3, [r7, #23]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08c      	sub	sp, #48	; 0x30
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c244:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <dir_register+0x20>
 800c24c:	2306      	movs	r3, #6
 800c24e:	e0e0      	b.n	800c412 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c250:	2300      	movs	r3, #0
 800c252:	627b      	str	r3, [r7, #36]	; 0x24
 800c254:	e002      	b.n	800c25c <dir_register+0x2c>
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	3301      	adds	r3, #1
 800c25a:	627b      	str	r3, [r7, #36]	; 0x24
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	691a      	ldr	r2, [r3, #16]
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1f4      	bne.n	800c256 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c272:	f107 030c 	add.w	r3, r7, #12
 800c276:	220c      	movs	r2, #12
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fe fd67 	bl	800ad4c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c27e:	7dfb      	ldrb	r3, [r7, #23]
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d032      	beq.n	800c2ee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2240      	movs	r2, #64	; 0x40
 800c28c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c290:	2301      	movs	r3, #1
 800c292:	62bb      	str	r3, [r7, #40]	; 0x28
 800c294:	e016      	b.n	800c2c4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	691a      	ldr	r2, [r3, #16]
 800c2a0:	f107 010c 	add.w	r1, r7, #12
 800c2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a6:	f7ff fe51 	bl	800bf4c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7ff feff 	bl	800c0ae <dir_find>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d106      	bne.n	800c2cc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	2b63      	cmp	r3, #99	; 0x63
 800c2c8:	d9e5      	bls.n	800c296 <dir_register+0x66>
 800c2ca:	e000      	b.n	800c2ce <dir_register+0x9e>
			if (res != FR_OK) break;
 800c2cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	2b64      	cmp	r3, #100	; 0x64
 800c2d2:	d101      	bne.n	800c2d8 <dir_register+0xa8>
 800c2d4:	2307      	movs	r3, #7
 800c2d6:	e09c      	b.n	800c412 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c2d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2dc:	2b04      	cmp	r3, #4
 800c2de:	d002      	beq.n	800c2e6 <dir_register+0xb6>
 800c2e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2e4:	e095      	b.n	800c412 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c2e6:	7dfa      	ldrb	r2, [r7, #23]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	f003 0302 	and.w	r3, r3, #2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d007      	beq.n	800c308 <dir_register+0xd8>
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	330c      	adds	r3, #12
 800c2fc:	4a47      	ldr	r2, [pc, #284]	; (800c41c <dir_register+0x1ec>)
 800c2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c302:	089b      	lsrs	r3, r3, #2
 800c304:	3301      	adds	r3, #1
 800c306:	e000      	b.n	800c30a <dir_register+0xda>
 800c308:	2301      	movs	r3, #1
 800c30a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c30c:	6a39      	ldr	r1, [r7, #32]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff fcbd 	bl	800bc8e <dir_alloc>
 800c314:	4603      	mov	r3, r0
 800c316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c31a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d148      	bne.n	800c3b4 <dir_register+0x184>
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	3b01      	subs	r3, #1
 800c326:	623b      	str	r3, [r7, #32]
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d042      	beq.n	800c3b4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	695a      	ldr	r2, [r3, #20]
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	015b      	lsls	r3, r3, #5
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff fb48 	bl	800b9d0 <dir_sdi>
 800c340:	4603      	mov	r3, r0
 800c342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d132      	bne.n	800c3b4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	3324      	adds	r3, #36	; 0x24
 800c352:	4618      	mov	r0, r3
 800c354:	f7ff fe8a 	bl	800c06c <sum_sfn>
 800c358:	4603      	mov	r3, r0
 800c35a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	69db      	ldr	r3, [r3, #28]
 800c360:	4619      	mov	r1, r3
 800c362:	69f8      	ldr	r0, [r7, #28]
 800c364:	f7fe ff52 	bl	800b20c <move_window>
 800c368:	4603      	mov	r3, r0
 800c36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c36e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c372:	2b00      	cmp	r3, #0
 800c374:	d11d      	bne.n	800c3b2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c376:	69fb      	ldr	r3, [r7, #28]
 800c378:	6918      	ldr	r0, [r3, #16]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a19      	ldr	r1, [r3, #32]
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	b2da      	uxtb	r2, r3
 800c382:	7efb      	ldrb	r3, [r7, #27]
 800c384:	f7ff fd7a 	bl	800be7c <put_lfn>
				fs->wflag = 1;
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	2201      	movs	r2, #1
 800c38c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c38e:	2100      	movs	r1, #0
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff fba6 	bl	800bae2 <dir_next>
 800c396:	4603      	mov	r3, r0
 800c398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c39c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d107      	bne.n	800c3b4 <dir_register+0x184>
 800c3a4:	6a3b      	ldr	r3, [r7, #32]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	623b      	str	r3, [r7, #32]
 800c3aa:	6a3b      	ldr	r3, [r7, #32]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1d5      	bne.n	800c35c <dir_register+0x12c>
 800c3b0:	e000      	b.n	800c3b4 <dir_register+0x184>
				if (res != FR_OK) break;
 800c3b2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d128      	bne.n	800c40e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	69db      	ldr	r3, [r3, #28]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	69f8      	ldr	r0, [r7, #28]
 800c3c4:	f7fe ff22 	bl	800b20c <move_window>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c3ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d11b      	bne.n	800c40e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	2220      	movs	r2, #32
 800c3dc:	2100      	movs	r1, #0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fcd5 	bl	800ad8e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a18      	ldr	r0, [r3, #32]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3324      	adds	r3, #36	; 0x24
 800c3ec:	220b      	movs	r2, #11
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	f7fe fcac 	bl	800ad4c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	330c      	adds	r3, #12
 800c400:	f002 0218 	and.w	r2, r2, #24
 800c404:	b2d2      	uxtb	r2, r2
 800c406:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	2201      	movs	r2, #1
 800c40c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c40e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c412:	4618      	mov	r0, r3
 800c414:	3730      	adds	r7, #48	; 0x30
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	4ec4ec4f 	.word	0x4ec4ec4f

0800c420 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b08a      	sub	sp, #40	; 0x28
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	613b      	str	r3, [r7, #16]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	60fb      	str	r3, [r7, #12]
 800c438:	2300      	movs	r3, #0
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	61ba      	str	r2, [r7, #24]
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	4413      	add	r3, r2
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c450:	2b1f      	cmp	r3, #31
 800c452:	d940      	bls.n	800c4d6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c456:	2b2f      	cmp	r3, #47	; 0x2f
 800c458:	d006      	beq.n	800c468 <create_name+0x48>
 800c45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45c:	2b5c      	cmp	r3, #92	; 0x5c
 800c45e:	d110      	bne.n	800c482 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c460:	e002      	b.n	800c468 <create_name+0x48>
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	3301      	adds	r3, #1
 800c466:	61bb      	str	r3, [r7, #24]
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	4413      	add	r3, r2
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b2f      	cmp	r3, #47	; 0x2f
 800c472:	d0f6      	beq.n	800c462 <create_name+0x42>
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	4413      	add	r3, r2
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b5c      	cmp	r3, #92	; 0x5c
 800c47e:	d0f0      	beq.n	800c462 <create_name+0x42>
			break;
 800c480:	e02a      	b.n	800c4d8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2bfe      	cmp	r3, #254	; 0xfe
 800c486:	d901      	bls.n	800c48c <create_name+0x6c>
 800c488:	2306      	movs	r3, #6
 800c48a:	e177      	b.n	800c77c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c48c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c494:	2101      	movs	r1, #1
 800c496:	4618      	mov	r0, r3
 800c498:	f001 fa4a 	bl	800d930 <ff_convert>
 800c49c:	4603      	mov	r3, r0
 800c49e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c4a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d101      	bne.n	800c4aa <create_name+0x8a>
 800c4a6:	2306      	movs	r3, #6
 800c4a8:	e168      	b.n	800c77c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c4aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ac:	2b7f      	cmp	r3, #127	; 0x7f
 800c4ae:	d809      	bhi.n	800c4c4 <create_name+0xa4>
 800c4b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	48b3      	ldr	r0, [pc, #716]	; (800c784 <create_name+0x364>)
 800c4b6:	f7fe fcac 	bl	800ae12 <chk_chr>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d001      	beq.n	800c4c4 <create_name+0xa4>
 800c4c0:	2306      	movs	r3, #6
 800c4c2:	e15b      	b.n	800c77c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	617a      	str	r2, [r7, #20]
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4d2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c4d4:	e7b4      	b.n	800c440 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c4d6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	441a      	add	r2, r3
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e4:	2b1f      	cmp	r3, #31
 800c4e6:	d801      	bhi.n	800c4ec <create_name+0xcc>
 800c4e8:	2304      	movs	r3, #4
 800c4ea:	e000      	b.n	800c4ee <create_name+0xce>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c4f2:	e011      	b.n	800c518 <create_name+0xf8>
		w = lfn[di - 1];
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	4413      	add	r3, r2
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c508:	2b20      	cmp	r3, #32
 800c50a:	d002      	beq.n	800c512 <create_name+0xf2>
 800c50c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c50e:	2b2e      	cmp	r3, #46	; 0x2e
 800c510:	d106      	bne.n	800c520 <create_name+0x100>
		di--;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	3b01      	subs	r3, #1
 800c516:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1ea      	bne.n	800c4f4 <create_name+0xd4>
 800c51e:	e000      	b.n	800c522 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c520:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	4413      	add	r3, r2
 800c52a:	2200      	movs	r2, #0
 800c52c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <create_name+0x118>
 800c534:	2306      	movs	r3, #6
 800c536:	e121      	b.n	800c77c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3324      	adds	r3, #36	; 0x24
 800c53c:	220b      	movs	r2, #11
 800c53e:	2120      	movs	r1, #32
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fc24 	bl	800ad8e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c546:	2300      	movs	r3, #0
 800c548:	61bb      	str	r3, [r7, #24]
 800c54a:	e002      	b.n	800c552 <create_name+0x132>
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	3301      	adds	r3, #1
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	881b      	ldrh	r3, [r3, #0]
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	d0f5      	beq.n	800c54c <create_name+0x12c>
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	4413      	add	r3, r2
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	2b2e      	cmp	r3, #46	; 0x2e
 800c56c:	d0ee      	beq.n	800c54c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d009      	beq.n	800c588 <create_name+0x168>
 800c574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c578:	f043 0303 	orr.w	r3, r3, #3
 800c57c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c580:	e002      	b.n	800c588 <create_name+0x168>
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	3b01      	subs	r3, #1
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <create_name+0x182>
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c594:	3b01      	subs	r3, #1
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4413      	add	r3, r2
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a0:	d1ef      	bne.n	800c582 <create_name+0x162>

	i = b = 0; ni = 8;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	623b      	str	r3, [r7, #32]
 800c5ac:	2308      	movs	r3, #8
 800c5ae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	1c5a      	adds	r2, r3, #1
 800c5b4:	61ba      	str	r2, [r7, #24]
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c5c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 8090 	beq.w	800c6e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c5c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ca:	2b20      	cmp	r3, #32
 800c5cc:	d006      	beq.n	800c5dc <create_name+0x1bc>
 800c5ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5d2:	d10a      	bne.n	800c5ea <create_name+0x1ca>
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d006      	beq.n	800c5ea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5e0:	f043 0303 	orr.w	r3, r3, #3
 800c5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5e8:	e07d      	b.n	800c6e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c5ea:	6a3a      	ldr	r2, [r7, #32]
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d203      	bcs.n	800c5fa <create_name+0x1da>
 800c5f2:	69ba      	ldr	r2, [r7, #24]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d123      	bne.n	800c642 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	2b0b      	cmp	r3, #11
 800c5fe:	d106      	bne.n	800c60e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c604:	f043 0303 	orr.w	r3, r3, #3
 800c608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c60c:	e06f      	b.n	800c6ee <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	429a      	cmp	r2, r3
 800c614:	d005      	beq.n	800c622 <create_name+0x202>
 800c616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c61a:	f043 0303 	orr.w	r3, r3, #3
 800c61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c622:	69ba      	ldr	r2, [r7, #24]
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	429a      	cmp	r2, r3
 800c628:	d860      	bhi.n	800c6ec <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	61bb      	str	r3, [r7, #24]
 800c62e:	2308      	movs	r3, #8
 800c630:	623b      	str	r3, [r7, #32]
 800c632:	230b      	movs	r3, #11
 800c634:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c636:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c640:	e051      	b.n	800c6e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c644:	2b7f      	cmp	r3, #127	; 0x7f
 800c646:	d914      	bls.n	800c672 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c64a:	2100      	movs	r1, #0
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 f96f 	bl	800d930 <ff_convert>
 800c652:	4603      	mov	r3, r0
 800c654:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <create_name+0x246>
 800c65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c65e:	3b80      	subs	r3, #128	; 0x80
 800c660:	4a49      	ldr	r2, [pc, #292]	; (800c788 <create_name+0x368>)
 800c662:	5cd3      	ldrb	r3, [r2, r3]
 800c664:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c66a:	f043 0302 	orr.w	r3, r3, #2
 800c66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c674:	2b00      	cmp	r3, #0
 800c676:	d007      	beq.n	800c688 <create_name+0x268>
 800c678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c67a:	4619      	mov	r1, r3
 800c67c:	4843      	ldr	r0, [pc, #268]	; (800c78c <create_name+0x36c>)
 800c67e:	f7fe fbc8 	bl	800ae12 <chk_chr>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d008      	beq.n	800c69a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c688:	235f      	movs	r3, #95	; 0x5f
 800c68a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c690:	f043 0303 	orr.w	r3, r3, #3
 800c694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c698:	e01b      	b.n	800c6d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c69a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c69c:	2b40      	cmp	r3, #64	; 0x40
 800c69e:	d909      	bls.n	800c6b4 <create_name+0x294>
 800c6a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6a2:	2b5a      	cmp	r3, #90	; 0x5a
 800c6a4:	d806      	bhi.n	800c6b4 <create_name+0x294>
					b |= 2;
 800c6a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6aa:	f043 0302 	orr.w	r3, r3, #2
 800c6ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c6b2:	e00e      	b.n	800c6d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6b6:	2b60      	cmp	r3, #96	; 0x60
 800c6b8:	d90b      	bls.n	800c6d2 <create_name+0x2b2>
 800c6ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6bc:	2b7a      	cmp	r3, #122	; 0x7a
 800c6be:	d808      	bhi.n	800c6d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c6c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6c4:	f043 0301 	orr.w	r3, r3, #1
 800c6c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c6cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6ce:	3b20      	subs	r3, #32
 800c6d0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	623a      	str	r2, [r7, #32]
 800c6d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c6da:	b2d1      	uxtb	r1, r2
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	4413      	add	r3, r2
 800c6e0:	460a      	mov	r2, r1
 800c6e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c6e6:	e763      	b.n	800c5b0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c6e8:	bf00      	nop
 800c6ea:	e000      	b.n	800c6ee <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800c6ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6f4:	2be5      	cmp	r3, #229	; 0xe5
 800c6f6:	d103      	bne.n	800c700 <create_name+0x2e0>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2205      	movs	r2, #5
 800c6fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	2b08      	cmp	r3, #8
 800c704:	d104      	bne.n	800c710 <create_name+0x2f0>
 800c706:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c710:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c714:	f003 030c 	and.w	r3, r3, #12
 800c718:	2b0c      	cmp	r3, #12
 800c71a:	d005      	beq.n	800c728 <create_name+0x308>
 800c71c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	2b03      	cmp	r3, #3
 800c726:	d105      	bne.n	800c734 <create_name+0x314>
 800c728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c72c:	f043 0302 	orr.w	r3, r3, #2
 800c730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c738:	f003 0302 	and.w	r3, r3, #2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d117      	bne.n	800c770 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c744:	f003 0303 	and.w	r3, r3, #3
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d105      	bne.n	800c758 <create_name+0x338>
 800c74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c750:	f043 0310 	orr.w	r3, r3, #16
 800c754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c75c:	f003 030c 	and.w	r3, r3, #12
 800c760:	2b04      	cmp	r3, #4
 800c762:	d105      	bne.n	800c770 <create_name+0x350>
 800c764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c768:	f043 0308 	orr.w	r3, r3, #8
 800c76c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c776:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c77a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3728      	adds	r7, #40	; 0x28
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	08013e64 	.word	0x08013e64
 800c788:	08013f94 	.word	0x08013f94
 800c78c:	08013e70 	.word	0x08013e70

0800c790 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c7a4:	e002      	b.n	800c7ac <follow_path+0x1c>
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	603b      	str	r3, [r7, #0]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2b2f      	cmp	r3, #47	; 0x2f
 800c7b2:	d0f8      	beq.n	800c7a6 <follow_path+0x16>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b5c      	cmp	r3, #92	; 0x5c
 800c7ba:	d0f4      	beq.n	800c7a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	2b1f      	cmp	r3, #31
 800c7c8:	d80a      	bhi.n	800c7e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2280      	movs	r2, #128	; 0x80
 800c7ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff f8fb 	bl	800b9d0 <dir_sdi>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	75fb      	strb	r3, [r7, #23]
 800c7de:	e048      	b.n	800c872 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7e0:	463b      	mov	r3, r7
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7ff fe1b 	bl	800c420 <create_name>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d139      	bne.n	800c868 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f7ff fc5a 	bl	800c0ae <dir_find>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c804:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00a      	beq.n	800c822 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
 800c80e:	2b04      	cmp	r3, #4
 800c810:	d12c      	bne.n	800c86c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c812:	7afb      	ldrb	r3, [r7, #11]
 800c814:	f003 0304 	and.w	r3, r3, #4
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d127      	bne.n	800c86c <follow_path+0xdc>
 800c81c:	2305      	movs	r3, #5
 800c81e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c820:	e024      	b.n	800c86c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	f003 0304 	and.w	r3, r3, #4
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d121      	bne.n	800c870 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	799b      	ldrb	r3, [r3, #6]
 800c830:	f003 0310 	and.w	r3, r3, #16
 800c834:	2b00      	cmp	r3, #0
 800c836:	d102      	bne.n	800c83e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c838:	2305      	movs	r3, #5
 800c83a:	75fb      	strb	r3, [r7, #23]
 800c83c:	e019      	b.n	800c872 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	8992      	ldrh	r2, [r2, #12]
 800c84c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c850:	fb02 f200 	mul.w	r2, r2, r0
 800c854:	1a9b      	subs	r3, r3, r2
 800c856:	440b      	add	r3, r1
 800c858:	4619      	mov	r1, r3
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7ff fa5e 	bl	800bd1c <ld_clust>
 800c860:	4602      	mov	r2, r0
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c866:	e7bb      	b.n	800c7e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c868:	bf00      	nop
 800c86a:	e002      	b.n	800c872 <follow_path+0xe2>
				break;
 800c86c:	bf00      	nop
 800c86e:	e000      	b.n	800c872 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c870:	bf00      	nop
			}
		}
	}

	return res;
 800c872:	7dfb      	ldrb	r3, [r7, #23]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c888:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d031      	beq.n	800c8f6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	e002      	b.n	800c8a0 <get_ldnumber+0x24>
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	3301      	adds	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2b1f      	cmp	r3, #31
 800c8a6:	d903      	bls.n	800c8b0 <get_ldnumber+0x34>
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b3a      	cmp	r3, #58	; 0x3a
 800c8ae:	d1f4      	bne.n	800c89a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b3a      	cmp	r3, #58	; 0x3a
 800c8b6:	d11c      	bne.n	800c8f2 <get_ldnumber+0x76>
			tp = *path;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	60fa      	str	r2, [r7, #12]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	3b30      	subs	r3, #48	; 0x30
 800c8c8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b09      	cmp	r3, #9
 800c8ce:	d80e      	bhi.n	800c8ee <get_ldnumber+0x72>
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d10a      	bne.n	800c8ee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d107      	bne.n	800c8ee <get_ldnumber+0x72>
					vol = (int)i;
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	e002      	b.n	800c8f8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8f6:	693b      	ldr	r3, [r7, #16]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	371c      	adds	r7, #28
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	70da      	strb	r2, [r3, #3]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c91a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f7fe fc74 	bl	800b20c <move_window>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <check_fs+0x2a>
 800c92a:	2304      	movs	r3, #4
 800c92c:	e038      	b.n	800c9a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	333c      	adds	r3, #60	; 0x3c
 800c932:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c936:	4618      	mov	r0, r3
 800c938:	f7fe f986 	bl	800ac48 <ld_word>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c944:	429a      	cmp	r2, r3
 800c946:	d001      	beq.n	800c94c <check_fs+0x48>
 800c948:	2303      	movs	r3, #3
 800c94a:	e029      	b.n	800c9a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c952:	2be9      	cmp	r3, #233	; 0xe9
 800c954:	d009      	beq.n	800c96a <check_fs+0x66>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c95c:	2beb      	cmp	r3, #235	; 0xeb
 800c95e:	d11e      	bne.n	800c99e <check_fs+0x9a>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c966:	2b90      	cmp	r3, #144	; 0x90
 800c968:	d119      	bne.n	800c99e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	333c      	adds	r3, #60	; 0x3c
 800c96e:	3336      	adds	r3, #54	; 0x36
 800c970:	4618      	mov	r0, r3
 800c972:	f7fe f981 	bl	800ac78 <ld_dword>
 800c976:	4603      	mov	r3, r0
 800c978:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c97c:	4a0a      	ldr	r2, [pc, #40]	; (800c9a8 <check_fs+0xa4>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d101      	bne.n	800c986 <check_fs+0x82>
 800c982:	2300      	movs	r3, #0
 800c984:	e00c      	b.n	800c9a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	333c      	adds	r3, #60	; 0x3c
 800c98a:	3352      	adds	r3, #82	; 0x52
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fe f973 	bl	800ac78 <ld_dword>
 800c992:	4603      	mov	r3, r0
 800c994:	4a05      	ldr	r2, [pc, #20]	; (800c9ac <check_fs+0xa8>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d101      	bne.n	800c99e <check_fs+0x9a>
 800c99a:	2300      	movs	r3, #0
 800c99c:	e000      	b.n	800c9a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c99e:	2302      	movs	r3, #2
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	00544146 	.word	0x00544146
 800c9ac:	33544146 	.word	0x33544146

0800c9b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b096      	sub	sp, #88	; 0x58
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7ff ff59 	bl	800c87c <get_ldnumber>
 800c9ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	da01      	bge.n	800c9d6 <find_volume+0x26>
 800c9d2:	230b      	movs	r3, #11
 800c9d4:	e26c      	b.n	800ceb0 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c9d6:	4aa4      	ldr	r2, [pc, #656]	; (800cc68 <find_volume+0x2b8>)
 800c9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d101      	bne.n	800c9ea <find_volume+0x3a>
 800c9e6:	230c      	movs	r3, #12
 800c9e8:	e262      	b.n	800ceb0 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800c9ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9ec:	f7fe fa2c 	bl	800ae48 <lock_fs>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <find_volume+0x4a>
 800c9f6:	230f      	movs	r3, #15
 800c9f8:	e25a      	b.n	800ceb0 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	f023 0301 	bic.w	r3, r3, #1
 800ca06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d01a      	beq.n	800ca46 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ca10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca12:	785b      	ldrb	r3, [r3, #1]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe f879 	bl	800ab0c <disk_status>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca24:	f003 0301 	and.w	r3, r3, #1
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10c      	bne.n	800ca46 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d007      	beq.n	800ca42 <find_volume+0x92>
 800ca32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca36:	f003 0304 	and.w	r3, r3, #4
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ca3e:	230a      	movs	r3, #10
 800ca40:	e236      	b.n	800ceb0 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800ca42:	2300      	movs	r3, #0
 800ca44:	e234      	b.n	800ceb0 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca48:	2200      	movs	r2, #0
 800ca4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	785b      	ldrb	r3, [r3, #1]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe f871 	bl	800ab40 <disk_initialize>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca70:	2303      	movs	r3, #3
 800ca72:	e21d      	b.n	800ceb0 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d007      	beq.n	800ca8a <find_volume+0xda>
 800ca7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca7e:	f003 0304 	and.w	r3, r3, #4
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ca86:	230a      	movs	r3, #10
 800ca88:	e212      	b.n	800ceb0 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	7858      	ldrb	r0, [r3, #1]
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca90:	330c      	adds	r3, #12
 800ca92:	461a      	mov	r2, r3
 800ca94:	2102      	movs	r1, #2
 800ca96:	f7fe f8b9 	bl	800ac0c <disk_ioctl>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <find_volume+0xf4>
 800caa0:	2301      	movs	r3, #1
 800caa2:	e205      	b.n	800ceb0 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800caa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa6:	899b      	ldrh	r3, [r3, #12]
 800caa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caac:	d80d      	bhi.n	800caca <find_volume+0x11a>
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	899b      	ldrh	r3, [r3, #12]
 800cab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cab6:	d308      	bcc.n	800caca <find_volume+0x11a>
 800cab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caba:	899b      	ldrh	r3, [r3, #12]
 800cabc:	461a      	mov	r2, r3
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	899b      	ldrh	r3, [r3, #12]
 800cac2:	3b01      	subs	r3, #1
 800cac4:	4013      	ands	r3, r2
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <find_volume+0x11e>
 800caca:	2301      	movs	r3, #1
 800cacc:	e1f0      	b.n	800ceb0 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cad2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cad4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cad6:	f7ff ff15 	bl	800c904 <check_fs>
 800cada:	4603      	mov	r3, r0
 800cadc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d14b      	bne.n	800cb80 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cae8:	2300      	movs	r3, #0
 800caea:	643b      	str	r3, [r7, #64]	; 0x40
 800caec:	e01f      	b.n	800cb2e <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800caf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cafc:	4413      	add	r3, r2
 800cafe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	3304      	adds	r3, #4
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d006      	beq.n	800cb18 <find_volume+0x168>
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe f8b2 	bl	800ac78 <ld_dword>
 800cb14:	4602      	mov	r2, r0
 800cb16:	e000      	b.n	800cb1a <find_volume+0x16a>
 800cb18:	2200      	movs	r2, #0
 800cb1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cb22:	440b      	add	r3, r1
 800cb24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	643b      	str	r3, [r7, #64]	; 0x40
 800cb2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb30:	2b03      	cmp	r3, #3
 800cb32:	d9dc      	bls.n	800caee <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb34:	2300      	movs	r3, #0
 800cb36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <find_volume+0x194>
 800cb3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb40:	3b01      	subs	r3, #1
 800cb42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d005      	beq.n	800cb66 <find_volume+0x1b6>
 800cb5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb5e:	f7ff fed1 	bl	800c904 <check_fs>
 800cb62:	4603      	mov	r3, r0
 800cb64:	e000      	b.n	800cb68 <find_volume+0x1b8>
 800cb66:	2303      	movs	r3, #3
 800cb68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d905      	bls.n	800cb80 <find_volume+0x1d0>
 800cb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb76:	3301      	adds	r3, #1
 800cb78:	643b      	str	r3, [r7, #64]	; 0x40
 800cb7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d9e1      	bls.n	800cb44 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	d101      	bne.n	800cb8c <find_volume+0x1dc>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e191      	b.n	800ceb0 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d901      	bls.n	800cb98 <find_volume+0x1e8>
 800cb94:	230d      	movs	r3, #13
 800cb96:	e18b      	b.n	800ceb0 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	333c      	adds	r3, #60	; 0x3c
 800cb9c:	330b      	adds	r3, #11
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe f852 	bl	800ac48 <ld_word>
 800cba4:	4603      	mov	r3, r0
 800cba6:	461a      	mov	r2, r3
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	899b      	ldrh	r3, [r3, #12]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d001      	beq.n	800cbb4 <find_volume+0x204>
 800cbb0:	230d      	movs	r3, #13
 800cbb2:	e17d      	b.n	800ceb0 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	333c      	adds	r3, #60	; 0x3c
 800cbb8:	3316      	adds	r3, #22
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe f844 	bl	800ac48 <ld_word>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d106      	bne.n	800cbd8 <find_volume+0x228>
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	333c      	adds	r3, #60	; 0x3c
 800cbce:	3324      	adds	r3, #36	; 0x24
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fe f851 	bl	800ac78 <ld_dword>
 800cbd6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbdc:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	789b      	ldrb	r3, [r3, #2]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d005      	beq.n	800cbfc <find_volume+0x24c>
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	789b      	ldrb	r3, [r3, #2]
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d001      	beq.n	800cbfc <find_volume+0x24c>
 800cbf8:	230d      	movs	r3, #13
 800cbfa:	e159      	b.n	800ceb0 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfe:	789b      	ldrb	r3, [r3, #2]
 800cc00:	461a      	mov	r2, r3
 800cc02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc04:	fb02 f303 	mul.w	r3, r2, r3
 800cc08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	895b      	ldrh	r3, [r3, #10]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d008      	beq.n	800cc30 <find_volume+0x280>
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	895b      	ldrh	r3, [r3, #10]
 800cc22:	461a      	mov	r2, r3
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	895b      	ldrh	r3, [r3, #10]
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <find_volume+0x284>
 800cc30:	230d      	movs	r3, #13
 800cc32:	e13d      	b.n	800ceb0 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	333c      	adds	r3, #60	; 0x3c
 800cc38:	3311      	adds	r3, #17
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe f804 	bl	800ac48 <ld_word>
 800cc40:	4603      	mov	r3, r0
 800cc42:	461a      	mov	r2, r3
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	891b      	ldrh	r3, [r3, #8]
 800cc4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc4e:	8992      	ldrh	r2, [r2, #12]
 800cc50:	0952      	lsrs	r2, r2, #5
 800cc52:	b292      	uxth	r2, r2
 800cc54:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc58:	fb02 f201 	mul.w	r2, r2, r1
 800cc5c:	1a9b      	subs	r3, r3, r2
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d003      	beq.n	800cc6c <find_volume+0x2bc>
 800cc64:	230d      	movs	r3, #13
 800cc66:	e123      	b.n	800ceb0 <find_volume+0x500>
 800cc68:	200001f0 	.word	0x200001f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	333c      	adds	r3, #60	; 0x3c
 800cc70:	3313      	adds	r3, #19
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fd ffe8 	bl	800ac48 <ld_word>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d106      	bne.n	800cc90 <find_volume+0x2e0>
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	333c      	adds	r3, #60	; 0x3c
 800cc86:	3320      	adds	r3, #32
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7fd fff5 	bl	800ac78 <ld_dword>
 800cc8e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc92:	333c      	adds	r3, #60	; 0x3c
 800cc94:	330e      	adds	r3, #14
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fd ffd6 	bl	800ac48 <ld_word>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <find_volume+0x2fa>
 800cca6:	230d      	movs	r3, #13
 800cca8:	e102      	b.n	800ceb0 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ccaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccae:	4413      	add	r3, r2
 800ccb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccb2:	8911      	ldrh	r1, [r2, #8]
 800ccb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccb6:	8992      	ldrh	r2, [r2, #12]
 800ccb8:	0952      	lsrs	r2, r2, #5
 800ccba:	b292      	uxth	r2, r2
 800ccbc:	fbb1 f2f2 	udiv	r2, r1, r2
 800ccc0:	b292      	uxth	r2, r2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ccc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d201      	bcs.n	800ccd2 <find_volume+0x322>
 800ccce:	230d      	movs	r3, #13
 800ccd0:	e0ee      	b.n	800ceb0 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	1ad3      	subs	r3, r2, r3
 800ccd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccda:	8952      	ldrh	r2, [r2, #10]
 800ccdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <find_volume+0x33c>
 800cce8:	230d      	movs	r3, #13
 800ccea:	e0e1      	b.n	800ceb0 <find_volume+0x500>
		fmt = FS_FAT32;
 800ccec:	2303      	movs	r3, #3
 800ccee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d802      	bhi.n	800cd02 <find_volume+0x352>
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd04:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d802      	bhi.n	800cd12 <find_volume+0x362>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	1c9a      	adds	r2, r3, #2
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd1e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd24:	441a      	add	r2, r3
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800cd2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	441a      	add	r2, r3
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800cd34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d11e      	bne.n	800cd7a <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	333c      	adds	r3, #60	; 0x3c
 800cd40:	332a      	adds	r3, #42	; 0x2a
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fd ff80 	bl	800ac48 <ld_word>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <find_volume+0x3a2>
 800cd4e:	230d      	movs	r3, #13
 800cd50:	e0ae      	b.n	800ceb0 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	891b      	ldrh	r3, [r3, #8]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d001      	beq.n	800cd5e <find_volume+0x3ae>
 800cd5a:	230d      	movs	r3, #13
 800cd5c:	e0a8      	b.n	800ceb0 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd60:	333c      	adds	r3, #60	; 0x3c
 800cd62:	332c      	adds	r3, #44	; 0x2c
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fd ff87 	bl	800ac78 <ld_dword>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	647b      	str	r3, [r7, #68]	; 0x44
 800cd78:	e01f      	b.n	800cdba <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	891b      	ldrh	r3, [r3, #8]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <find_volume+0x3d6>
 800cd82:	230d      	movs	r3, #13
 800cd84:	e094      	b.n	800ceb0 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd8c:	441a      	add	r2, r3
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d103      	bne.n	800cda2 <find_volume+0x3f2>
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	e00a      	b.n	800cdb8 <find_volume+0x408>
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	6a1a      	ldr	r2, [r3, #32]
 800cda6:	4613      	mov	r3, r2
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	4413      	add	r3, r2
 800cdac:	085a      	lsrs	r2, r3, #1
 800cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb0:	6a1b      	ldr	r3, [r3, #32]
 800cdb2:	f003 0301 	and.w	r3, r3, #1
 800cdb6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cdb8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	899b      	ldrh	r3, [r3, #12]
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdc6:	440b      	add	r3, r1
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdcc:	8989      	ldrh	r1, [r1, #12]
 800cdce:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d201      	bcs.n	800cdda <find_volume+0x42a>
 800cdd6:	230d      	movs	r3, #13
 800cdd8:	e06a      	b.n	800ceb0 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cde0:	61da      	str	r2, [r3, #28]
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	69da      	ldr	r2, [r3, #28]
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800cdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdec:	2280      	movs	r2, #128	; 0x80
 800cdee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cdf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d149      	bne.n	800ce8c <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	333c      	adds	r3, #60	; 0x3c
 800cdfc:	3330      	adds	r3, #48	; 0x30
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fd ff22 	bl	800ac48 <ld_word>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d140      	bne.n	800ce8c <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce12:	f7fe f9fb 	bl	800b20c <move_window>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d137      	bne.n	800ce8c <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	2200      	movs	r2, #0
 800ce20:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	333c      	adds	r3, #60	; 0x3c
 800ce26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fd ff0c 	bl	800ac48 <ld_word>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461a      	mov	r2, r3
 800ce34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d127      	bne.n	800ce8c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	333c      	adds	r3, #60	; 0x3c
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fd ff19 	bl	800ac78 <ld_dword>
 800ce46:	4603      	mov	r3, r0
 800ce48:	4a1b      	ldr	r2, [pc, #108]	; (800ceb8 <find_volume+0x508>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d11e      	bne.n	800ce8c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	333c      	adds	r3, #60	; 0x3c
 800ce52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fd ff0e 	bl	800ac78 <ld_dword>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	4a17      	ldr	r2, [pc, #92]	; (800cebc <find_volume+0x50c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d113      	bne.n	800ce8c <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	333c      	adds	r3, #60	; 0x3c
 800ce68:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fd ff03 	bl	800ac78 <ld_dword>
 800ce72:	4602      	mov	r2, r0
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7a:	333c      	adds	r3, #60	; 0x3c
 800ce7c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fd fef9 	bl	800ac78 <ld_dword>
 800ce86:	4602      	mov	r2, r0
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ce92:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce94:	4b0a      	ldr	r3, [pc, #40]	; (800cec0 <find_volume+0x510>)
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	4b08      	ldr	r3, [pc, #32]	; (800cec0 <find_volume+0x510>)
 800ce9e:	801a      	strh	r2, [r3, #0]
 800cea0:	4b07      	ldr	r3, [pc, #28]	; (800cec0 <find_volume+0x510>)
 800cea2:	881a      	ldrh	r2, [r3, #0]
 800cea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ceaa:	f7fe f947 	bl	800b13c <clear_lock>
#endif
	return FR_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3758      	adds	r7, #88	; 0x58
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	41615252 	.word	0x41615252
 800cebc:	61417272 	.word	0x61417272
 800cec0:	200001f4 	.word	0x200001f4

0800cec4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cece:	2309      	movs	r3, #9
 800ced0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d02e      	beq.n	800cf36 <validate+0x72>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d02a      	beq.n	800cf36 <validate+0x72>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d025      	beq.n	800cf36 <validate+0x72>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	889a      	ldrh	r2, [r3, #4]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	88db      	ldrh	r3, [r3, #6]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d11e      	bne.n	800cf36 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fd ffa3 	bl	800ae48 <lock_fs>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d014      	beq.n	800cf32 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	785b      	ldrb	r3, [r3, #1]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fd fdfc 	bl	800ab0c <disk_status>
 800cf14:	4603      	mov	r3, r0
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d102      	bne.n	800cf24 <validate+0x60>
				res = FR_OK;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	73fb      	strb	r3, [r7, #15]
 800cf22:	e008      	b.n	800cf36 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2100      	movs	r1, #0
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fd ffa2 	bl	800ae74 <unlock_fs>
 800cf30:	e001      	b.n	800cf36 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800cf32:	230f      	movs	r3, #15
 800cf34:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf36:	7bfb      	ldrb	r3, [r7, #15]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <validate+0x7e>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	e000      	b.n	800cf44 <validate+0x80>
 800cf42:	2300      	movs	r3, #0
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	6013      	str	r3, [r2, #0]
	return res;
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf66:	f107 0310 	add.w	r3, r7, #16
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff fc86 	bl	800c87c <get_ldnumber>
 800cf70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	da01      	bge.n	800cf7c <f_mount+0x28>
 800cf78:	230b      	movs	r3, #11
 800cf7a:	e048      	b.n	800d00e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf7c:	4a26      	ldr	r2, [pc, #152]	; (800d018 <f_mount+0xc4>)
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00f      	beq.n	800cfac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf8c:	69b8      	ldr	r0, [r7, #24]
 800cf8e:	f7fe f8d5 	bl	800b13c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	695b      	ldr	r3, [r3, #20]
 800cf96:	4618      	mov	r0, r3
 800cf98:	f000 fdab 	bl	800daf2 <ff_del_syncobj>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <f_mount+0x52>
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	e033      	b.n	800d00e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00f      	beq.n	800cfd2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3314      	adds	r3, #20
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	f000 fd7a 	bl	800dabc <ff_cre_syncobj>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <f_mount+0x7e>
 800cfce:	2302      	movs	r3, #2
 800cfd0:	e01d      	b.n	800d00e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	4910      	ldr	r1, [pc, #64]	; (800d018 <f_mount+0xc4>)
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d002      	beq.n	800cfe8 <f_mount+0x94>
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d001      	beq.n	800cfec <f_mount+0x98>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e010      	b.n	800d00e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cfec:	f107 010c 	add.w	r1, r7, #12
 800cff0:	f107 0308 	add.w	r3, r7, #8
 800cff4:	2200      	movs	r2, #0
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fcda 	bl	800c9b0 <find_volume>
 800cffc:	4603      	mov	r3, r0
 800cffe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	7dfa      	ldrb	r2, [r7, #23]
 800d004:	4611      	mov	r1, r2
 800d006:	4618      	mov	r0, r3
 800d008:	f7fd ff34 	bl	800ae74 <unlock_fs>
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3720      	adds	r7, #32
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	200001f0 	.word	0x200001f0

0800d01c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b09a      	sub	sp, #104	; 0x68
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	4613      	mov	r3, r2
 800d028:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <f_open+0x18>
 800d030:	2309      	movs	r3, #9
 800d032:	e1d7      	b.n	800d3e4 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d03a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d03c:	79fa      	ldrb	r2, [r7, #7]
 800d03e:	f107 0110 	add.w	r1, r7, #16
 800d042:	f107 0308 	add.w	r3, r7, #8
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff fcb2 	bl	800c9b0 <find_volume>
 800d04c:	4603      	mov	r3, r0
 800d04e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d052:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d056:	2b00      	cmp	r3, #0
 800d058:	f040 81b4 	bne.w	800d3c4 <f_open+0x3a8>
		dj.obj.fs = fs;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d060:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d064:	f000 fd71 	bl	800db4a <ff_memalloc>
 800d068:	65b8      	str	r0, [r7, #88]	; 0x58
 800d06a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d106      	bne.n	800d07e <f_open+0x62>
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	2111      	movs	r1, #17
 800d074:	4618      	mov	r0, r3
 800d076:	f7fd fefd 	bl	800ae74 <unlock_fs>
 800d07a:	2311      	movs	r3, #17
 800d07c:	e1b2      	b.n	800d3e4 <f_open+0x3c8>
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d082:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	f107 0314 	add.w	r3, r7, #20
 800d08a:	4611      	mov	r1, r2
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7ff fb7f 	bl	800c790 <follow_path>
 800d092:	4603      	mov	r3, r0
 800d094:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d098:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d11a      	bne.n	800d0d6 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d0a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d0a4:	b25b      	sxtb	r3, r3
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	da03      	bge.n	800d0b2 <f_open+0x96>
				res = FR_INVALID_NAME;
 800d0aa:	2306      	movs	r3, #6
 800d0ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0b0:	e011      	b.n	800d0d6 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	f023 0301 	bic.w	r3, r3, #1
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	bf14      	ite	ne
 800d0bc:	2301      	movne	r3, #1
 800d0be:	2300      	moveq	r3, #0
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	f107 0314 	add.w	r3, r7, #20
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fd feee 	bl	800aeac <chk_lock>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	f003 031c 	and.w	r3, r3, #28
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d07f      	beq.n	800d1e0 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800d0e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d017      	beq.n	800d118 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d0e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d10e      	bne.n	800d10e <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d0f0:	f7fd ff38 	bl	800af64 <enq_lock>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d006      	beq.n	800d108 <f_open+0xec>
 800d0fa:	f107 0314 	add.w	r3, r7, #20
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff f896 	bl	800c230 <dir_register>
 800d104:	4603      	mov	r3, r0
 800d106:	e000      	b.n	800d10a <f_open+0xee>
 800d108:	2312      	movs	r3, #18
 800d10a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d10e:	79fb      	ldrb	r3, [r7, #7]
 800d110:	f043 0308 	orr.w	r3, r3, #8
 800d114:	71fb      	strb	r3, [r7, #7]
 800d116:	e010      	b.n	800d13a <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d118:	7ebb      	ldrb	r3, [r7, #26]
 800d11a:	f003 0311 	and.w	r3, r3, #17
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <f_open+0x10e>
					res = FR_DENIED;
 800d122:	2307      	movs	r3, #7
 800d124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d128:	e007      	b.n	800d13a <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d12a:	79fb      	ldrb	r3, [r7, #7]
 800d12c:	f003 0304 	and.w	r3, r3, #4
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <f_open+0x11e>
 800d134:	2308      	movs	r3, #8
 800d136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d13a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d168      	bne.n	800d214 <f_open+0x1f8>
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	f003 0308 	and.w	r3, r3, #8
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d063      	beq.n	800d214 <f_open+0x1f8>
				dw = GET_FATTIME();
 800d14c:	f7fd fc80 	bl	800aa50 <get_fattime>
 800d150:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d154:	330e      	adds	r3, #14
 800d156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fd fdcb 	bl	800acf4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d160:	3316      	adds	r3, #22
 800d162:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d164:	4618      	mov	r0, r3
 800d166:	f7fd fdc5 	bl	800acf4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16c:	330b      	adds	r3, #11
 800d16e:	2220      	movs	r2, #32
 800d170:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d176:	4611      	mov	r1, r2
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fe fdcf 	bl	800bd1c <ld_clust>
 800d17e:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d184:	2200      	movs	r2, #0
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fde7 	bl	800bd5a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d18e:	331c      	adds	r3, #28
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7fd fdae 	bl	800acf4 <st_dword>
					fs->wflag = 1;
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	2201      	movs	r2, #1
 800d19c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d037      	beq.n	800d214 <f_open+0x1f8>
						dw = fs->winsect;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a8:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800d1aa:	f107 0314 	add.w	r3, r7, #20
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe fad7 	bl	800b766 <remove_chain>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d1be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d126      	bne.n	800d214 <f_open+0x1f8>
							res = move_window(fs, dw);
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe f81e 	bl	800b20c <move_window>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1da:	3a01      	subs	r2, #1
 800d1dc:	619a      	str	r2, [r3, #24]
 800d1de:	e019      	b.n	800d214 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d1e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d115      	bne.n	800d214 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d1e8:	7ebb      	ldrb	r3, [r7, #26]
 800d1ea:	f003 0310 	and.w	r3, r3, #16
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d003      	beq.n	800d1fa <f_open+0x1de>
					res = FR_NO_FILE;
 800d1f2:	2304      	movs	r3, #4
 800d1f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d1f8:	e00c      	b.n	800d214 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d007      	beq.n	800d214 <f_open+0x1f8>
 800d204:	7ebb      	ldrb	r3, [r7, #26]
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d002      	beq.n	800d214 <f_open+0x1f8>
						res = FR_DENIED;
 800d20e:	2307      	movs	r3, #7
 800d210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d214:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d128      	bne.n	800d26e <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	f003 0308 	and.w	r3, r3, #8
 800d222:	2b00      	cmp	r3, #0
 800d224:	d003      	beq.n	800d22e <f_open+0x212>
				mode |= FA_MODIFIED;
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d22c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d23c:	79fb      	ldrb	r3, [r7, #7]
 800d23e:	f023 0301 	bic.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	bf14      	ite	ne
 800d246:	2301      	movne	r3, #1
 800d248:	2300      	moveq	r3, #0
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	461a      	mov	r2, r3
 800d24e:	f107 0314 	add.w	r3, r7, #20
 800d252:	4611      	mov	r1, r2
 800d254:	4618      	mov	r0, r3
 800d256:	f7fd fea7 	bl	800afa8 <inc_lock>
 800d25a:	4602      	mov	r2, r0
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d102      	bne.n	800d26e <f_open+0x252>
 800d268:	2302      	movs	r3, #2
 800d26a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d26e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d272:	2b00      	cmp	r3, #0
 800d274:	f040 80a3 	bne.w	800d3be <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fd4c 	bl	800bd1c <ld_clust>
 800d284:	4602      	mov	r2, r0
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28c:	331c      	adds	r3, #28
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fd fcf2 	bl	800ac78 <ld_dword>
 800d294:	4602      	mov	r2, r0
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	88da      	ldrh	r2, [r3, #6]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	79fa      	ldrb	r2, [r7, #7]
 800d2b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	3330      	adds	r3, #48	; 0x30
 800d2ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fd fd5c 	bl	800ad8e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d2d6:	79fb      	ldrb	r3, [r7, #7]
 800d2d8:	f003 0320 	and.w	r3, r3, #32
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d06e      	beq.n	800d3be <f_open+0x3a2>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d06a      	beq.n	800d3be <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	895b      	ldrh	r3, [r3, #10]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	899b      	ldrh	r3, [r3, #12]
 800d2fa:	fb03 f302 	mul.w	r3, r3, r2
 800d2fe:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d30c:	e016      	b.n	800d33c <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d312:	4618      	mov	r0, r3
 800d314:	f7fe f837 	bl	800b386 <get_fat>
 800d318:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d31a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d802      	bhi.n	800d326 <f_open+0x30a>
 800d320:	2302      	movs	r3, #2
 800d322:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d32c:	d102      	bne.n	800d334 <f_open+0x318>
 800d32e:	2301      	movs	r3, #1
 800d330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d33c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <f_open+0x330>
 800d344:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d348:	429a      	cmp	r2, r3
 800d34a:	d8e0      	bhi.n	800d30e <f_open+0x2f2>
				}
				fp->clust = clst;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d350:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d356:	2b00      	cmp	r3, #0
 800d358:	d131      	bne.n	800d3be <f_open+0x3a2>
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	899b      	ldrh	r3, [r3, #12]
 800d35e:	461a      	mov	r2, r3
 800d360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d362:	fbb3 f1f2 	udiv	r1, r3, r2
 800d366:	fb02 f201 	mul.w	r2, r2, r1
 800d36a:	1a9b      	subs	r3, r3, r2
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d026      	beq.n	800d3be <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d374:	4618      	mov	r0, r3
 800d376:	f7fd ffe7 	bl	800b348 <clust2sect>
 800d37a:	64b8      	str	r0, [r7, #72]	; 0x48
 800d37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d103      	bne.n	800d38a <f_open+0x36e>
						res = FR_INT_ERR;
 800d382:	2302      	movs	r3, #2
 800d384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d388:	e019      	b.n	800d3be <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	899b      	ldrh	r3, [r3, #12]
 800d38e:	461a      	mov	r2, r3
 800d390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d392:	fbb3 f2f2 	udiv	r2, r3, r2
 800d396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d398:	441a      	add	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	7858      	ldrb	r0, [r3, #1]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a1a      	ldr	r2, [r3, #32]
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	f7fd fbed 	bl	800ab8c <disk_read>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <f_open+0x3a2>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d3be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d3c0:	f000 fbcf 	bl	800db62 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d3c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <f_open+0x3b6>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800d3d8:	4611      	mov	r1, r2
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fd fd4a 	bl	800ae74 <unlock_fs>
 800d3e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3768      	adds	r7, #104	; 0x68
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08e      	sub	sp, #56	; 0x38
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2200      	movs	r2, #0
 800d402:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f107 0214 	add.w	r2, r7, #20
 800d40a:	4611      	mov	r1, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff fd59 	bl	800cec4 <validate>
 800d412:	4603      	mov	r3, r0
 800d414:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d107      	bne.n	800d430 <f_read+0x44>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	7d5b      	ldrb	r3, [r3, #21]
 800d424:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d009      	beq.n	800d444 <f_read+0x58>
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f7fd fd1b 	bl	800ae74 <unlock_fs>
 800d43e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d442:	e15d      	b.n	800d700 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	7d1b      	ldrb	r3, [r3, #20]
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d106      	bne.n	800d45e <f_read+0x72>
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	2107      	movs	r1, #7
 800d454:	4618      	mov	r0, r3
 800d456:	f7fd fd0d 	bl	800ae74 <unlock_fs>
 800d45a:	2307      	movs	r3, #7
 800d45c:	e150      	b.n	800d700 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	68da      	ldr	r2, [r3, #12]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	699b      	ldr	r3, [r3, #24]
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	6a3b      	ldr	r3, [r7, #32]
 800d46e:	429a      	cmp	r2, r3
 800d470:	f240 813c 	bls.w	800d6ec <f_read+0x300>
 800d474:	6a3b      	ldr	r3, [r7, #32]
 800d476:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d478:	e138      	b.n	800d6ec <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	699b      	ldr	r3, [r3, #24]
 800d47e:	697a      	ldr	r2, [r7, #20]
 800d480:	8992      	ldrh	r2, [r2, #12]
 800d482:	fbb3 f1f2 	udiv	r1, r3, r2
 800d486:	fb02 f201 	mul.w	r2, r2, r1
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f040 80f3 	bne.w	800d678 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	8992      	ldrh	r2, [r2, #12]
 800d49a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	8952      	ldrh	r2, [r2, #10]
 800d4a2:	3a01      	subs	r2, #1
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d139      	bne.n	800d522 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d103      	bne.n	800d4be <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	633b      	str	r3, [r7, #48]	; 0x30
 800d4bc:	e013      	b.n	800d4e6 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d007      	beq.n	800d4d6 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7fe fa47 	bl	800b960 <clmt_clust>
 800d4d2:	6338      	str	r0, [r7, #48]	; 0x30
 800d4d4:	e007      	b.n	800d4e6 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4610      	mov	r0, r2
 800d4e0:	f7fd ff51 	bl	800b386 <get_fat>
 800d4e4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d809      	bhi.n	800d500 <f_read+0x114>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	755a      	strb	r2, [r3, #21]
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	2102      	movs	r1, #2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fd fcbc 	bl	800ae74 <unlock_fs>
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	e0ff      	b.n	800d700 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d506:	d109      	bne.n	800d51c <f_read+0x130>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2201      	movs	r2, #1
 800d50c:	755a      	strb	r2, [r3, #21]
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	2101      	movs	r1, #1
 800d512:	4618      	mov	r0, r3
 800d514:	f7fd fcae 	bl	800ae74 <unlock_fs>
 800d518:	2301      	movs	r3, #1
 800d51a:	e0f1      	b.n	800d700 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d520:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	69db      	ldr	r3, [r3, #28]
 800d528:	4619      	mov	r1, r3
 800d52a:	4610      	mov	r0, r2
 800d52c:	f7fd ff0c 	bl	800b348 <clust2sect>
 800d530:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d109      	bne.n	800d54c <f_read+0x160>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2202      	movs	r2, #2
 800d53c:	755a      	strb	r2, [r3, #21]
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2102      	movs	r1, #2
 800d542:	4618      	mov	r0, r3
 800d544:	f7fd fc96 	bl	800ae74 <unlock_fs>
 800d548:	2302      	movs	r3, #2
 800d54a:	e0d9      	b.n	800d700 <f_read+0x314>
			sect += csect;
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	4413      	add	r3, r2
 800d552:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	899b      	ldrh	r3, [r3, #12]
 800d558:	461a      	mov	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d560:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d564:	2b00      	cmp	r3, #0
 800d566:	d046      	beq.n	800d5f6 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d568:	69fa      	ldr	r2, [r7, #28]
 800d56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56c:	4413      	add	r3, r2
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	8952      	ldrh	r2, [r2, #10]
 800d572:	4293      	cmp	r3, r2
 800d574:	d905      	bls.n	800d582 <f_read+0x196>
					cc = fs->csize - csect;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	895b      	ldrh	r3, [r3, #10]
 800d57a:	461a      	mov	r2, r3
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	7858      	ldrb	r0, [r3, #1]
 800d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d588:	69ba      	ldr	r2, [r7, #24]
 800d58a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d58c:	f7fd fafe 	bl	800ab8c <disk_read>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d009      	beq.n	800d5aa <f_read+0x1be>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2201      	movs	r2, #1
 800d59a:	755a      	strb	r2, [r3, #21]
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	2101      	movs	r1, #1
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fd fc67 	bl	800ae74 <unlock_fs>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e0aa      	b.n	800d700 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	7d1b      	ldrb	r3, [r3, #20]
 800d5ae:	b25b      	sxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	da18      	bge.n	800d5e6 <f_read+0x1fa>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6a1a      	ldr	r2, [r3, #32]
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d911      	bls.n	800d5e6 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6a1a      	ldr	r2, [r3, #32]
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	8992      	ldrh	r2, [r2, #12]
 800d5ce:	fb02 f303 	mul.w	r3, r2, r3
 800d5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5d4:	18d0      	adds	r0, r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	899b      	ldrh	r3, [r3, #12]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f7fd fbb3 	bl	800ad4c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	899b      	ldrh	r3, [r3, #12]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ee:	fb02 f303 	mul.w	r3, r2, r3
 800d5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d5f4:	e066      	b.n	800d6c4 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	6a1b      	ldr	r3, [r3, #32]
 800d5fa:	69ba      	ldr	r2, [r7, #24]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d038      	beq.n	800d672 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	7d1b      	ldrb	r3, [r3, #20]
 800d604:	b25b      	sxtb	r3, r3
 800d606:	2b00      	cmp	r3, #0
 800d608:	da1d      	bge.n	800d646 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	7858      	ldrb	r0, [r3, #1]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6a1a      	ldr	r2, [r3, #32]
 800d618:	2301      	movs	r3, #1
 800d61a:	f7fd fad7 	bl	800abcc <disk_write>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d009      	beq.n	800d638 <f_read+0x24c>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2201      	movs	r2, #1
 800d628:	755a      	strb	r2, [r3, #21]
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2101      	movs	r1, #1
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd fc20 	bl	800ae74 <unlock_fs>
 800d634:	2301      	movs	r3, #1
 800d636:	e063      	b.n	800d700 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	7d1b      	ldrb	r3, [r3, #20]
 800d63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d640:	b2da      	uxtb	r2, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	7858      	ldrb	r0, [r3, #1]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d650:	2301      	movs	r3, #1
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	f7fd fa9a 	bl	800ab8c <disk_read>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d009      	beq.n	800d672 <f_read+0x286>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2201      	movs	r2, #1
 800d662:	755a      	strb	r2, [r3, #21]
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	2101      	movs	r1, #1
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fd fc03 	bl	800ae74 <unlock_fs>
 800d66e:	2301      	movs	r3, #1
 800d670:	e046      	b.n	800d700 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	69ba      	ldr	r2, [r7, #24]
 800d676:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	899b      	ldrh	r3, [r3, #12]
 800d67c:	4618      	mov	r0, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	8992      	ldrh	r2, [r2, #12]
 800d686:	fbb3 f1f2 	udiv	r1, r3, r2
 800d68a:	fb02 f201 	mul.w	r2, r2, r1
 800d68e:	1a9b      	subs	r3, r3, r2
 800d690:	1ac3      	subs	r3, r0, r3
 800d692:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d901      	bls.n	800d6a0 <f_read+0x2b4>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	697a      	ldr	r2, [r7, #20]
 800d6ac:	8992      	ldrh	r2, [r2, #12]
 800d6ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800d6b2:	fb02 f200 	mul.w	r2, r2, r0
 800d6b6:	1a9b      	subs	r3, r3, r2
 800d6b8:	440b      	add	r3, r1
 800d6ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6c0:	f7fd fb44 	bl	800ad4c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	4413      	add	r3, r2
 800d6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	699a      	ldr	r2, [r3, #24]
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	441a      	add	r2, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	619a      	str	r2, [r3, #24]
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6de:	441a      	add	r2, r3
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f47f aec3 	bne.w	800d47a <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fd fbbb 	bl	800ae74 <unlock_fs>
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3738      	adds	r7, #56	; 0x38
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f107 0208 	add.w	r2, r7, #8
 800d716:	4611      	mov	r1, r2
 800d718:	4618      	mov	r0, r3
 800d71a:	f7ff fbd3 	bl	800cec4 <validate>
 800d71e:	4603      	mov	r3, r0
 800d720:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d722:	7dfb      	ldrb	r3, [r7, #23]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d16d      	bne.n	800d804 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	7d1b      	ldrb	r3, [r3, #20]
 800d72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d730:	2b00      	cmp	r3, #0
 800d732:	d067      	beq.n	800d804 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	7d1b      	ldrb	r3, [r3, #20]
 800d738:	b25b      	sxtb	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	da1a      	bge.n	800d774 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	7858      	ldrb	r0, [r3, #1]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a1a      	ldr	r2, [r3, #32]
 800d74c:	2301      	movs	r3, #1
 800d74e:	f7fd fa3d 	bl	800abcc <disk_write>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <f_sync+0x5e>
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	2101      	movs	r1, #1
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fd fb89 	bl	800ae74 <unlock_fs>
 800d762:	2301      	movs	r3, #1
 800d764:	e055      	b.n	800d812 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	7d1b      	ldrb	r3, [r3, #20]
 800d76a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d774:	f7fd f96c 	bl	800aa50 <get_fattime>
 800d778:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	4619      	mov	r1, r3
 800d782:	4610      	mov	r0, r2
 800d784:	f7fd fd42 	bl	800b20c <move_window>
 800d788:	4603      	mov	r3, r0
 800d78a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d78c:	7dfb      	ldrb	r3, [r7, #23]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d138      	bne.n	800d804 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d796:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	330b      	adds	r3, #11
 800d79c:	781a      	ldrb	r2, [r3, #0]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	330b      	adds	r3, #11
 800d7a2:	f042 0220 	orr.w	r2, r2, #32
 800d7a6:	b2d2      	uxtb	r2, r2
 800d7a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6818      	ldr	r0, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	68f9      	ldr	r1, [r7, #12]
 800d7b6:	f7fe fad0 	bl	800bd5a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f103 021c 	add.w	r2, r3, #28
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	f7fd fa94 	bl	800acf4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3316      	adds	r3, #22
 800d7d0:	6939      	ldr	r1, [r7, #16]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fd fa8e 	bl	800acf4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3312      	adds	r3, #18
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fd fa6d 	bl	800acbe <st_word>
					fs->wflag = 1;
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fd fd3b 	bl	800b268 <sync_fs>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7d1b      	ldrb	r3, [r3, #20]
 800d7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	7dfa      	ldrb	r2, [r7, #23]
 800d808:	4611      	mov	r1, r2
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fd fb32 	bl	800ae74 <unlock_fs>
 800d810:	7dfb      	ldrb	r3, [r7, #23]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b084      	sub	sp, #16
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff ff70 	bl	800d708 <f_sync>
 800d828:	4603      	mov	r3, r0
 800d82a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d82c:	7bfb      	ldrb	r3, [r7, #15]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d11d      	bne.n	800d86e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f107 0208 	add.w	r2, r7, #8
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff fb42 	bl	800cec4 <validate>
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d844:	7bfb      	ldrb	r3, [r7, #15]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d111      	bne.n	800d86e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fd fc38 	bl	800b0c4 <dec_lock>
 800d854:	4603      	mov	r3, r0
 800d856:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d858:	7bfb      	ldrb	r3, [r7, #15]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d102      	bne.n	800d864 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2100      	movs	r1, #0
 800d868:	4618      	mov	r0, r3
 800d86a:	f7fd fb03 	bl	800ae74 <unlock_fs>
#endif
		}
	}
	return res;
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d878:	b480      	push	{r7}
 800d87a:	b087      	sub	sp, #28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	4613      	mov	r3, r2
 800d884:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d886:	2301      	movs	r3, #1
 800d888:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d88e:	4b1f      	ldr	r3, [pc, #124]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d890:	7a5b      	ldrb	r3, [r3, #9]
 800d892:	b2db      	uxtb	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d131      	bne.n	800d8fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d898:	4b1c      	ldr	r3, [pc, #112]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d89a:	7a5b      	ldrb	r3, [r3, #9]
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	461a      	mov	r2, r3
 800d8a0:	4b1a      	ldr	r3, [pc, #104]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d8a6:	4b19      	ldr	r3, [pc, #100]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d8a8:	7a5b      	ldrb	r3, [r3, #9]
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	4a17      	ldr	r2, [pc, #92]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	4413      	add	r3, r2
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d8b6:	4b15      	ldr	r3, [pc, #84]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d8b8:	7a5b      	ldrb	r3, [r3, #9]
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	461a      	mov	r2, r3
 800d8be:	4b13      	ldr	r3, [pc, #76]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d8c0:	4413      	add	r3, r2
 800d8c2:	79fa      	ldrb	r2, [r7, #7]
 800d8c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d8c6:	4b11      	ldr	r3, [pc, #68]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d8c8:	7a5b      	ldrb	r3, [r3, #9]
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	1c5a      	adds	r2, r3, #1
 800d8ce:	b2d1      	uxtb	r1, r2
 800d8d0:	4a0e      	ldr	r2, [pc, #56]	; (800d90c <FATFS_LinkDriverEx+0x94>)
 800d8d2:	7251      	strb	r1, [r2, #9]
 800d8d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8d6:	7dbb      	ldrb	r3, [r7, #22]
 800d8d8:	3330      	adds	r3, #48	; 0x30
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	223a      	movs	r2, #58	; 0x3a
 800d8e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	3302      	adds	r3, #2
 800d8ec:	222f      	movs	r2, #47	; 0x2f
 800d8ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	3303      	adds	r3, #3
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	371c      	adds	r7, #28
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	20000218 	.word	0x20000218

0800d910 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d91a:	2200      	movs	r2, #0
 800d91c:	6839      	ldr	r1, [r7, #0]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7ff ffaa 	bl	800d878 <FATFS_LinkDriverEx>
 800d924:	4603      	mov	r3, r0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	6039      	str	r1, [r7, #0]
 800d93a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d93c:	88fb      	ldrh	r3, [r7, #6]
 800d93e:	2b7f      	cmp	r3, #127	; 0x7f
 800d940:	d802      	bhi.n	800d948 <ff_convert+0x18>
		c = chr;
 800d942:	88fb      	ldrh	r3, [r7, #6]
 800d944:	81fb      	strh	r3, [r7, #14]
 800d946:	e025      	b.n	800d994 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00b      	beq.n	800d966 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d94e:	88fb      	ldrh	r3, [r7, #6]
 800d950:	2bff      	cmp	r3, #255	; 0xff
 800d952:	d805      	bhi.n	800d960 <ff_convert+0x30>
 800d954:	88fb      	ldrh	r3, [r7, #6]
 800d956:	3b80      	subs	r3, #128	; 0x80
 800d958:	4a12      	ldr	r2, [pc, #72]	; (800d9a4 <ff_convert+0x74>)
 800d95a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d95e:	e000      	b.n	800d962 <ff_convert+0x32>
 800d960:	2300      	movs	r3, #0
 800d962:	81fb      	strh	r3, [r7, #14]
 800d964:	e016      	b.n	800d994 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d966:	2300      	movs	r3, #0
 800d968:	81fb      	strh	r3, [r7, #14]
 800d96a:	e009      	b.n	800d980 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d96c:	89fb      	ldrh	r3, [r7, #14]
 800d96e:	4a0d      	ldr	r2, [pc, #52]	; (800d9a4 <ff_convert+0x74>)
 800d970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d974:	88fa      	ldrh	r2, [r7, #6]
 800d976:	429a      	cmp	r2, r3
 800d978:	d006      	beq.n	800d988 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d97a:	89fb      	ldrh	r3, [r7, #14]
 800d97c:	3301      	adds	r3, #1
 800d97e:	81fb      	strh	r3, [r7, #14]
 800d980:	89fb      	ldrh	r3, [r7, #14]
 800d982:	2b7f      	cmp	r3, #127	; 0x7f
 800d984:	d9f2      	bls.n	800d96c <ff_convert+0x3c>
 800d986:	e000      	b.n	800d98a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d988:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d98a:	89fb      	ldrh	r3, [r7, #14]
 800d98c:	3380      	adds	r3, #128	; 0x80
 800d98e:	b29b      	uxth	r3, r3
 800d990:	b2db      	uxtb	r3, r3
 800d992:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d994:	89fb      	ldrh	r3, [r7, #14]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	08014024 	.word	0x08014024

0800d9a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b087      	sub	sp, #28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d9b2:	88fb      	ldrh	r3, [r7, #6]
 800d9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9b8:	d201      	bcs.n	800d9be <ff_wtoupper+0x16>
 800d9ba:	4b3e      	ldr	r3, [pc, #248]	; (800dab4 <ff_wtoupper+0x10c>)
 800d9bc:	e000      	b.n	800d9c0 <ff_wtoupper+0x18>
 800d9be:	4b3e      	ldr	r3, [pc, #248]	; (800dab8 <ff_wtoupper+0x110>)
 800d9c0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	1c9a      	adds	r2, r3, #2
 800d9c6:	617a      	str	r2, [r7, #20]
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d9cc:	8a7b      	ldrh	r3, [r7, #18]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d068      	beq.n	800daa4 <ff_wtoupper+0xfc>
 800d9d2:	88fa      	ldrh	r2, [r7, #6]
 800d9d4:	8a7b      	ldrh	r3, [r7, #18]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d364      	bcc.n	800daa4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	1c9a      	adds	r2, r3, #2
 800d9de:	617a      	str	r2, [r7, #20]
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	823b      	strh	r3, [r7, #16]
 800d9e4:	8a3b      	ldrh	r3, [r7, #16]
 800d9e6:	0a1b      	lsrs	r3, r3, #8
 800d9e8:	81fb      	strh	r3, [r7, #14]
 800d9ea:	8a3b      	ldrh	r3, [r7, #16]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d9f0:	88fa      	ldrh	r2, [r7, #6]
 800d9f2:	8a79      	ldrh	r1, [r7, #18]
 800d9f4:	8a3b      	ldrh	r3, [r7, #16]
 800d9f6:	440b      	add	r3, r1
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	da49      	bge.n	800da90 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d9fc:	89fb      	ldrh	r3, [r7, #14]
 800d9fe:	2b08      	cmp	r3, #8
 800da00:	d84f      	bhi.n	800daa2 <ff_wtoupper+0xfa>
 800da02:	a201      	add	r2, pc, #4	; (adr r2, 800da08 <ff_wtoupper+0x60>)
 800da04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da08:	0800da2d 	.word	0x0800da2d
 800da0c:	0800da3f 	.word	0x0800da3f
 800da10:	0800da55 	.word	0x0800da55
 800da14:	0800da5d 	.word	0x0800da5d
 800da18:	0800da65 	.word	0x0800da65
 800da1c:	0800da6d 	.word	0x0800da6d
 800da20:	0800da75 	.word	0x0800da75
 800da24:	0800da7d 	.word	0x0800da7d
 800da28:	0800da85 	.word	0x0800da85
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800da2c:	88fa      	ldrh	r2, [r7, #6]
 800da2e:	8a7b      	ldrh	r3, [r7, #18]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	005b      	lsls	r3, r3, #1
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	4413      	add	r3, r2
 800da38:	881b      	ldrh	r3, [r3, #0]
 800da3a:	80fb      	strh	r3, [r7, #6]
 800da3c:	e027      	b.n	800da8e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800da3e:	88fa      	ldrh	r2, [r7, #6]
 800da40:	8a7b      	ldrh	r3, [r7, #18]
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	b29b      	uxth	r3, r3
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	88fa      	ldrh	r2, [r7, #6]
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	80fb      	strh	r3, [r7, #6]
 800da52:	e01c      	b.n	800da8e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800da54:	88fb      	ldrh	r3, [r7, #6]
 800da56:	3b10      	subs	r3, #16
 800da58:	80fb      	strh	r3, [r7, #6]
 800da5a:	e018      	b.n	800da8e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800da5c:	88fb      	ldrh	r3, [r7, #6]
 800da5e:	3b20      	subs	r3, #32
 800da60:	80fb      	strh	r3, [r7, #6]
 800da62:	e014      	b.n	800da8e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800da64:	88fb      	ldrh	r3, [r7, #6]
 800da66:	3b30      	subs	r3, #48	; 0x30
 800da68:	80fb      	strh	r3, [r7, #6]
 800da6a:	e010      	b.n	800da8e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800da6c:	88fb      	ldrh	r3, [r7, #6]
 800da6e:	3b1a      	subs	r3, #26
 800da70:	80fb      	strh	r3, [r7, #6]
 800da72:	e00c      	b.n	800da8e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800da74:	88fb      	ldrh	r3, [r7, #6]
 800da76:	3308      	adds	r3, #8
 800da78:	80fb      	strh	r3, [r7, #6]
 800da7a:	e008      	b.n	800da8e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800da7c:	88fb      	ldrh	r3, [r7, #6]
 800da7e:	3b50      	subs	r3, #80	; 0x50
 800da80:	80fb      	strh	r3, [r7, #6]
 800da82:	e004      	b.n	800da8e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800da84:	88fb      	ldrh	r3, [r7, #6]
 800da86:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800da8a:	80fb      	strh	r3, [r7, #6]
 800da8c:	bf00      	nop
			}
			break;
 800da8e:	e008      	b.n	800daa2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800da90:	89fb      	ldrh	r3, [r7, #14]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d195      	bne.n	800d9c2 <ff_wtoupper+0x1a>
 800da96:	8a3b      	ldrh	r3, [r7, #16]
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	4413      	add	r3, r2
 800da9e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800daa0:	e78f      	b.n	800d9c2 <ff_wtoupper+0x1a>
			break;
 800daa2:	bf00      	nop
	}

	return chr;
 800daa4:	88fb      	ldrh	r3, [r7, #6]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	371c      	adds	r7, #28
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	08014124 	.word	0x08014124
 800dab8:	08014318 	.word	0x08014318

0800dabc <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	6039      	str	r1, [r7, #0]
 800dac6:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800dac8:	2200      	movs	r2, #0
 800daca:	2101      	movs	r1, #1
 800dacc:	2001      	movs	r0, #1
 800dace:	f000 fab9 	bl	800e044 <osSemaphoreNew>
 800dad2:	4602      	mov	r2, r0
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	bf14      	ite	ne
 800dae0:	2301      	movne	r3, #1
 800dae2:	2300      	moveq	r3, #0
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	60fb      	str	r3, [r7, #12]

    return ret;
 800dae8:	68fb      	ldr	r3, [r7, #12]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b082      	sub	sp, #8
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 fbc2 	bl	800e284 <osSemaphoreDelete>
#endif
    return 1;
 800db00:	2301      	movs	r3, #1
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800db0a:	b580      	push	{r7, lr}
 800db0c:	b084      	sub	sp, #16
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800db16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 fb1c 	bl	800e158 <osSemaphoreAcquire>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d101      	bne.n	800db2a <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800db26:	2301      	movs	r3, #1
 800db28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800db2a:	68fb      	ldr	r3, [r7, #12]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fb5d 	bl	800e1fc <osSemaphoreRelease>
#endif
}
 800db42:	bf00      	nop
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f003 fda0 	bl	8011698 <pvPortMalloc>
 800db58:	4603      	mov	r3, r0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b082      	sub	sp, #8
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f003 fe60 	bl	8011830 <vPortFree>
}
 800db70:	bf00      	nop
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <__NVIC_SetPriority>:
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	4603      	mov	r3, r0
 800db80:	6039      	str	r1, [r7, #0]
 800db82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	db0a      	blt.n	800dba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	490c      	ldr	r1, [pc, #48]	; (800dbc4 <__NVIC_SetPriority+0x4c>)
 800db92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db96:	0112      	lsls	r2, r2, #4
 800db98:	b2d2      	uxtb	r2, r2
 800db9a:	440b      	add	r3, r1
 800db9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dba0:	e00a      	b.n	800dbb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	4908      	ldr	r1, [pc, #32]	; (800dbc8 <__NVIC_SetPriority+0x50>)
 800dba8:	79fb      	ldrb	r3, [r7, #7]
 800dbaa:	f003 030f 	and.w	r3, r3, #15
 800dbae:	3b04      	subs	r3, #4
 800dbb0:	0112      	lsls	r2, r2, #4
 800dbb2:	b2d2      	uxtb	r2, r2
 800dbb4:	440b      	add	r3, r1
 800dbb6:	761a      	strb	r2, [r3, #24]
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	e000e100 	.word	0xe000e100
 800dbc8:	e000ed00 	.word	0xe000ed00

0800dbcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dbd0:	4b05      	ldr	r3, [pc, #20]	; (800dbe8 <SysTick_Handler+0x1c>)
 800dbd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dbd4:	f002 fdaa 	bl	801072c <xTaskGetSchedulerState>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d001      	beq.n	800dbe2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dbde:	f003 fccb 	bl	8011578 <xPortSysTickHandler>
  }
}
 800dbe2:	bf00      	nop
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	e000e010 	.word	0xe000e010

0800dbec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	f06f 0004 	mvn.w	r0, #4
 800dbf6:	f7ff ffbf 	bl	800db78 <__NVIC_SetPriority>
#endif
}
 800dbfa:	bf00      	nop
 800dbfc:	bd80      	pop	{r7, pc}
	...

0800dc00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc06:	f3ef 8305 	mrs	r3, IPSR
 800dc0a:	603b      	str	r3, [r7, #0]
  return(result);
 800dc0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d003      	beq.n	800dc1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc12:	f06f 0305 	mvn.w	r3, #5
 800dc16:	607b      	str	r3, [r7, #4]
 800dc18:	e00c      	b.n	800dc34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc1a:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <osKernelInitialize+0x44>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d105      	bne.n	800dc2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc22:	4b08      	ldr	r3, [pc, #32]	; (800dc44 <osKernelInitialize+0x44>)
 800dc24:	2201      	movs	r2, #1
 800dc26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	607b      	str	r3, [r7, #4]
 800dc2c:	e002      	b.n	800dc34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc34:	687b      	ldr	r3, [r7, #4]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	20000224 	.word	0x20000224

0800dc48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc4e:	f3ef 8305 	mrs	r3, IPSR
 800dc52:	603b      	str	r3, [r7, #0]
  return(result);
 800dc54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d003      	beq.n	800dc62 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc5a:	f06f 0305 	mvn.w	r3, #5
 800dc5e:	607b      	str	r3, [r7, #4]
 800dc60:	e010      	b.n	800dc84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc62:	4b0b      	ldr	r3, [pc, #44]	; (800dc90 <osKernelStart+0x48>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d109      	bne.n	800dc7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc6a:	f7ff ffbf 	bl	800dbec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc6e:	4b08      	ldr	r3, [pc, #32]	; (800dc90 <osKernelStart+0x48>)
 800dc70:	2202      	movs	r2, #2
 800dc72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc74:	f002 f862 	bl	800fd3c <vTaskStartScheduler>
      stat = osOK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	607b      	str	r3, [r7, #4]
 800dc7c:	e002      	b.n	800dc84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc84:	687b      	ldr	r3, [r7, #4]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3708      	adds	r7, #8
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	20000224 	.word	0x20000224

0800dc94 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc9a:	f3ef 8305 	mrs	r3, IPSR
 800dc9e:	603b      	str	r3, [r7, #0]
  return(result);
 800dca0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d003      	beq.n	800dcae <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800dca6:	f002 f96b 	bl	800ff80 <xTaskGetTickCountFromISR>
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	e002      	b.n	800dcb4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800dcae:	f002 f957 	bl	800ff60 <xTaskGetTickCount>
 800dcb2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800dcb4:	687b      	ldr	r3, [r7, #4]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b08e      	sub	sp, #56	; 0x38
 800dcc2:	af04      	add	r7, sp, #16
 800dcc4:	60f8      	str	r0, [r7, #12]
 800dcc6:	60b9      	str	r1, [r7, #8]
 800dcc8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcce:	f3ef 8305 	mrs	r3, IPSR
 800dcd2:	617b      	str	r3, [r7, #20]
  return(result);
 800dcd4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d17e      	bne.n	800ddd8 <osThreadNew+0x11a>
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d07b      	beq.n	800ddd8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dce0:	2380      	movs	r3, #128	; 0x80
 800dce2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dce4:	2318      	movs	r3, #24
 800dce6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dce8:	2300      	movs	r3, #0
 800dcea:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dcec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d045      	beq.n	800dd84 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d002      	beq.n	800dd06 <osThreadNew+0x48>
        name = attr->name;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	699b      	ldr	r3, [r3, #24]
 800dd12:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d008      	beq.n	800dd2c <osThreadNew+0x6e>
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	2b38      	cmp	r3, #56	; 0x38
 800dd1e:	d805      	bhi.n	800dd2c <osThreadNew+0x6e>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <osThreadNew+0x72>
        return (NULL);
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	e054      	b.n	800ddda <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	695b      	ldr	r3, [r3, #20]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	695b      	ldr	r3, [r3, #20]
 800dd3c:	089b      	lsrs	r3, r3, #2
 800dd3e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d00e      	beq.n	800dd66 <osThreadNew+0xa8>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	2b5b      	cmp	r3, #91	; 0x5b
 800dd4e:	d90a      	bls.n	800dd66 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d006      	beq.n	800dd66 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	695b      	ldr	r3, [r3, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <osThreadNew+0xa8>
        mem = 1;
 800dd60:	2301      	movs	r3, #1
 800dd62:	61bb      	str	r3, [r7, #24]
 800dd64:	e010      	b.n	800dd88 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10c      	bne.n	800dd88 <osThreadNew+0xca>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	68db      	ldr	r3, [r3, #12]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d108      	bne.n	800dd88 <osThreadNew+0xca>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d104      	bne.n	800dd88 <osThreadNew+0xca>
          mem = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	61bb      	str	r3, [r7, #24]
 800dd82:	e001      	b.n	800dd88 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d110      	bne.n	800ddb0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd96:	9202      	str	r2, [sp, #8]
 800dd98:	9301      	str	r3, [sp, #4]
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	6a3a      	ldr	r2, [r7, #32]
 800dda2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f001 fd75 	bl	800f894 <xTaskCreateStatic>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	613b      	str	r3, [r7, #16]
 800ddae:	e013      	b.n	800ddd8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d110      	bne.n	800ddd8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ddb6:	6a3b      	ldr	r3, [r7, #32]
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	f107 0310 	add.w	r3, r7, #16
 800ddbe:	9301      	str	r3, [sp, #4]
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f001 fdc0 	bl	800f94e <xTaskCreate>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d001      	beq.n	800ddd8 <osThreadNew+0x11a>
            hTask = NULL;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ddd8:	693b      	ldr	r3, [r7, #16]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3728      	adds	r7, #40	; 0x28
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b084      	sub	sp, #16
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddea:	f3ef 8305 	mrs	r3, IPSR
 800ddee:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <osDelay+0x1c>
    stat = osErrorISR;
 800ddf6:	f06f 0305 	mvn.w	r3, #5
 800ddfa:	60fb      	str	r3, [r7, #12]
 800ddfc:	e007      	b.n	800de0e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <osDelay+0x2c>
      vTaskDelay(ticks);
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f001 ff63 	bl	800fcd4 <vTaskDelay>
    }
  }

  return (stat);
 800de0e:	68fb      	ldr	r3, [r7, #12]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de20:	f3ef 8305 	mrs	r3, IPSR
 800de24:	60fb      	str	r3, [r7, #12]
  return(result);
 800de26:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d003      	beq.n	800de34 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800de2c:	f06f 0305 	mvn.w	r3, #5
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	e019      	b.n	800de68 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800de34:	2300      	movs	r3, #0
 800de36:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800de38:	f002 f892 	bl	800ff60 <xTaskGetTickCount>
 800de3c:	4603      	mov	r3, r0
 800de3e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	1ad3      	subs	r3, r2, r3
 800de46:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d009      	beq.n	800de62 <osDelayUntil+0x4a>
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	db06      	blt.n	800de62 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800de54:	f107 0308 	add.w	r3, r7, #8
 800de58:	6939      	ldr	r1, [r7, #16]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f001 febc 	bl	800fbd8 <vTaskDelayUntil>
 800de60:	e002      	b.n	800de68 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800de62:	f06f 0303 	mvn.w	r3, #3
 800de66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800de68:	697b      	ldr	r3, [r7, #20]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800de72:	b580      	push	{r7, lr}
 800de74:	b086      	sub	sp, #24
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800de7a:	2300      	movs	r3, #0
 800de7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de7e:	f3ef 8305 	mrs	r3, IPSR
 800de82:	60fb      	str	r3, [r7, #12]
  return(result);
 800de84:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800de86:	2b00      	cmp	r3, #0
 800de88:	d12d      	bne.n	800dee6 <osEventFlagsNew+0x74>
    mem = -1;
 800de8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de8e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d015      	beq.n	800dec2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d006      	beq.n	800deac <osEventFlagsNew+0x3a>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	2b1f      	cmp	r3, #31
 800dea4:	d902      	bls.n	800deac <osEventFlagsNew+0x3a>
        mem = 1;
 800dea6:	2301      	movs	r3, #1
 800dea8:	613b      	str	r3, [r7, #16]
 800deaa:	e00c      	b.n	800dec6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d108      	bne.n	800dec6 <osEventFlagsNew+0x54>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d104      	bne.n	800dec6 <osEventFlagsNew+0x54>
          mem = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	613b      	str	r3, [r7, #16]
 800dec0:	e001      	b.n	800dec6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800dec2:	2300      	movs	r3, #0
 800dec4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d106      	bne.n	800deda <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 fa2f 	bl	800e334 <xEventGroupCreateStatic>
 800ded6:	6178      	str	r0, [r7, #20]
 800ded8:	e005      	b.n	800dee6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d102      	bne.n	800dee6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800dee0:	f000 fa5f 	bl	800e3a2 <xEventGroupCreate>
 800dee4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800dee6:	697b      	ldr	r3, [r7, #20]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800def0:	b580      	push	{r7, lr}
 800def2:	b086      	sub	sp, #24
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <osEventFlagsSet+0x1e>
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d003      	beq.n	800df16 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800df0e:	f06f 0303 	mvn.w	r3, #3
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e028      	b.n	800df68 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df16:	f3ef 8305 	mrs	r3, IPSR
 800df1a:	60fb      	str	r3, [r7, #12]
  return(result);
 800df1c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d01d      	beq.n	800df5e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800df22:	2300      	movs	r3, #0
 800df24:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800df26:	f107 0308 	add.w	r3, r7, #8
 800df2a:	461a      	mov	r2, r3
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6938      	ldr	r0, [r7, #16]
 800df30:	f000 fbda 	bl	800e6e8 <xEventGroupSetBitsFromISR>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d103      	bne.n	800df42 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800df3a:	f06f 0302 	mvn.w	r3, #2
 800df3e:	617b      	str	r3, [r7, #20]
 800df40:	e012      	b.n	800df68 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00d      	beq.n	800df68 <osEventFlagsSet+0x78>
 800df4c:	4b09      	ldr	r3, [pc, #36]	; (800df74 <osEventFlagsSet+0x84>)
 800df4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	e004      	b.n	800df68 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	6938      	ldr	r0, [r7, #16]
 800df62:	f000 fb07 	bl	800e574 <xEventGroupSetBits>
 800df66:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800df68:	697b      	ldr	r3, [r7, #20]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3718      	adds	r7, #24
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	e000ed04 	.word	0xe000ed04

0800df78 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08c      	sub	sp, #48	; 0x30
 800df7c:	af02      	add	r7, sp, #8
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d004      	beq.n	800df9a <osEventFlagsWait+0x22>
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800df9a:	f06f 0303 	mvn.w	r3, #3
 800df9e:	61fb      	str	r3, [r7, #28]
 800dfa0:	e04b      	b.n	800e03a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfa2:	f3ef 8305 	mrs	r3, IPSR
 800dfa6:	617b      	str	r3, [r7, #20]
  return(result);
 800dfa8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d003      	beq.n	800dfb6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800dfae:	f06f 0305 	mvn.w	r3, #5
 800dfb2:	61fb      	str	r3, [r7, #28]
 800dfb4:	e041      	b.n	800e03a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	627b      	str	r3, [r7, #36]	; 0x24
 800dfc4:	e001      	b.n	800dfca <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f003 0302 	and.w	r3, r3, #2
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	623b      	str	r3, [r7, #32]
 800dfd8:	e001      	b.n	800dfde <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe4:	6a3a      	ldr	r2, [r7, #32]
 800dfe6:	68b9      	ldr	r1, [r7, #8]
 800dfe8:	69b8      	ldr	r0, [r7, #24]
 800dfea:	f000 f9f5 	bl	800e3d8 <xEventGroupWaitBits>
 800dfee:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d010      	beq.n	800e01c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	4013      	ands	r3, r2
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	429a      	cmp	r2, r3
 800e004:	d019      	beq.n	800e03a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d003      	beq.n	800e014 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800e00c:	f06f 0301 	mvn.w	r3, #1
 800e010:	61fb      	str	r3, [r7, #28]
 800e012:	e012      	b.n	800e03a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e014:	f06f 0302 	mvn.w	r3, #2
 800e018:	61fb      	str	r3, [r7, #28]
 800e01a:	e00e      	b.n	800e03a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	4013      	ands	r3, r2
 800e022:	2b00      	cmp	r3, #0
 800e024:	d109      	bne.n	800e03a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800e02c:	f06f 0301 	mvn.w	r3, #1
 800e030:	61fb      	str	r3, [r7, #28]
 800e032:	e002      	b.n	800e03a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e034:	f06f 0302 	mvn.w	r3, #2
 800e038:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e03a:	69fb      	ldr	r3, [r7, #28]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3728      	adds	r7, #40	; 0x28
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e044:	b580      	push	{r7, lr}
 800e046:	b08a      	sub	sp, #40	; 0x28
 800e048:	af02      	add	r7, sp, #8
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e050:	2300      	movs	r3, #0
 800e052:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e054:	f3ef 8305 	mrs	r3, IPSR
 800e058:	613b      	str	r3, [r7, #16]
  return(result);
 800e05a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d175      	bne.n	800e14c <osSemaphoreNew+0x108>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d072      	beq.n	800e14c <osSemaphoreNew+0x108>
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d86e      	bhi.n	800e14c <osSemaphoreNew+0x108>
    mem = -1;
 800e06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d015      	beq.n	800e0a6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d006      	beq.n	800e090 <osSemaphoreNew+0x4c>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	2b4f      	cmp	r3, #79	; 0x4f
 800e088:	d902      	bls.n	800e090 <osSemaphoreNew+0x4c>
        mem = 1;
 800e08a:	2301      	movs	r3, #1
 800e08c:	61bb      	str	r3, [r7, #24]
 800e08e:	e00c      	b.n	800e0aa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d108      	bne.n	800e0aa <osSemaphoreNew+0x66>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d104      	bne.n	800e0aa <osSemaphoreNew+0x66>
          mem = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	61bb      	str	r3, [r7, #24]
 800e0a4:	e001      	b.n	800e0aa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0b0:	d04c      	beq.n	800e14c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d128      	bne.n	800e10a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d10a      	bne.n	800e0d4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	2203      	movs	r2, #3
 800e0c4:	9200      	str	r2, [sp, #0]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	2001      	movs	r0, #1
 800e0cc:	f000 fc3c 	bl	800e948 <xQueueGenericCreateStatic>
 800e0d0:	61f8      	str	r0, [r7, #28]
 800e0d2:	e005      	b.n	800e0e0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e0d4:	2203      	movs	r2, #3
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	2001      	movs	r0, #1
 800e0da:	f000 fcad 	bl	800ea38 <xQueueGenericCreate>
 800e0de:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d022      	beq.n	800e12c <osSemaphoreNew+0xe8>
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d01f      	beq.n	800e12c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	69f8      	ldr	r0, [r7, #28]
 800e0f4:	f000 fd68 	bl	800ebc8 <xQueueGenericSend>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d016      	beq.n	800e12c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e0fe:	69f8      	ldr	r0, [r7, #28]
 800e100:	f001 f9f4 	bl	800f4ec <vQueueDelete>
            hSemaphore = NULL;
 800e104:	2300      	movs	r3, #0
 800e106:	61fb      	str	r3, [r7, #28]
 800e108:	e010      	b.n	800e12c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e10a:	69bb      	ldr	r3, [r7, #24]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d108      	bne.n	800e122 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	461a      	mov	r2, r3
 800e116:	68b9      	ldr	r1, [r7, #8]
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f000 fcea 	bl	800eaf2 <xQueueCreateCountingSemaphoreStatic>
 800e11e:	61f8      	str	r0, [r7, #28]
 800e120:	e004      	b.n	800e12c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e122:	68b9      	ldr	r1, [r7, #8]
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f000 fd1b 	bl	800eb60 <xQueueCreateCountingSemaphore>
 800e12a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00c      	beq.n	800e14c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d003      	beq.n	800e140 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	617b      	str	r3, [r7, #20]
 800e13e:	e001      	b.n	800e144 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e140:	2300      	movs	r3, #0
 800e142:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e144:	6979      	ldr	r1, [r7, #20]
 800e146:	69f8      	ldr	r0, [r7, #28]
 800e148:	f001 fb1c 	bl	800f784 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e14c:	69fb      	ldr	r3, [r7, #28]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3720      	adds	r7, #32
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e166:	2300      	movs	r3, #0
 800e168:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d103      	bne.n	800e178 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e170:	f06f 0303 	mvn.w	r3, #3
 800e174:	617b      	str	r3, [r7, #20]
 800e176:	e039      	b.n	800e1ec <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e178:	f3ef 8305 	mrs	r3, IPSR
 800e17c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e17e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e180:	2b00      	cmp	r3, #0
 800e182:	d022      	beq.n	800e1ca <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e18a:	f06f 0303 	mvn.w	r3, #3
 800e18e:	617b      	str	r3, [r7, #20]
 800e190:	e02c      	b.n	800e1ec <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e192:	2300      	movs	r3, #0
 800e194:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e196:	f107 0308 	add.w	r3, r7, #8
 800e19a:	461a      	mov	r2, r3
 800e19c:	2100      	movs	r1, #0
 800e19e:	6938      	ldr	r0, [r7, #16]
 800e1a0:	f001 f924 	bl	800f3ec <xQueueReceiveFromISR>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d003      	beq.n	800e1b2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e1aa:	f06f 0302 	mvn.w	r3, #2
 800e1ae:	617b      	str	r3, [r7, #20]
 800e1b0:	e01c      	b.n	800e1ec <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d019      	beq.n	800e1ec <osSemaphoreAcquire+0x94>
 800e1b8:	4b0f      	ldr	r3, [pc, #60]	; (800e1f8 <osSemaphoreAcquire+0xa0>)
 800e1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1be:	601a      	str	r2, [r3, #0]
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	e010      	b.n	800e1ec <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e1ca:	6839      	ldr	r1, [r7, #0]
 800e1cc:	6938      	ldr	r0, [r7, #16]
 800e1ce:	f001 f801 	bl	800f1d4 <xQueueSemaphoreTake>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b01      	cmp	r3, #1
 800e1d6:	d009      	beq.n	800e1ec <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d003      	beq.n	800e1e6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e1de:	f06f 0301 	mvn.w	r3, #1
 800e1e2:	617b      	str	r3, [r7, #20]
 800e1e4:	e002      	b.n	800e1ec <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e1e6:	f06f 0302 	mvn.w	r3, #2
 800e1ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e1ec:	697b      	ldr	r3, [r7, #20]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3718      	adds	r7, #24
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	e000ed04 	.word	0xe000ed04

0800e1fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e208:	2300      	movs	r3, #0
 800e20a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d103      	bne.n	800e21a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e212:	f06f 0303 	mvn.w	r3, #3
 800e216:	617b      	str	r3, [r7, #20]
 800e218:	e02c      	b.n	800e274 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e21a:	f3ef 8305 	mrs	r3, IPSR
 800e21e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e220:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e222:	2b00      	cmp	r3, #0
 800e224:	d01a      	beq.n	800e25c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e226:	2300      	movs	r3, #0
 800e228:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e22a:	f107 0308 	add.w	r3, r7, #8
 800e22e:	4619      	mov	r1, r3
 800e230:	6938      	ldr	r0, [r7, #16]
 800e232:	f000 fe62 	bl	800eefa <xQueueGiveFromISR>
 800e236:	4603      	mov	r3, r0
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d003      	beq.n	800e244 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e23c:	f06f 0302 	mvn.w	r3, #2
 800e240:	617b      	str	r3, [r7, #20]
 800e242:	e017      	b.n	800e274 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d014      	beq.n	800e274 <osSemaphoreRelease+0x78>
 800e24a:	4b0d      	ldr	r3, [pc, #52]	; (800e280 <osSemaphoreRelease+0x84>)
 800e24c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	f3bf 8f4f 	dsb	sy
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	e00b      	b.n	800e274 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e25c:	2300      	movs	r3, #0
 800e25e:	2200      	movs	r2, #0
 800e260:	2100      	movs	r1, #0
 800e262:	6938      	ldr	r0, [r7, #16]
 800e264:	f000 fcb0 	bl	800ebc8 <xQueueGenericSend>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d002      	beq.n	800e274 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e26e:	f06f 0302 	mvn.w	r3, #2
 800e272:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e274:	697b      	ldr	r3, [r7, #20]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	e000ed04 	.word	0xe000ed04

0800e284 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e290:	f3ef 8305 	mrs	r3, IPSR
 800e294:	60fb      	str	r3, [r7, #12]
  return(result);
 800e296:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800e29c:	f06f 0305 	mvn.w	r3, #5
 800e2a0:	617b      	str	r3, [r7, #20]
 800e2a2:	e00e      	b.n	800e2c2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d103      	bne.n	800e2b2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800e2aa:	f06f 0303 	mvn.w	r3, #3
 800e2ae:	617b      	str	r3, [r7, #20]
 800e2b0:	e007      	b.n	800e2c2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800e2b2:	6938      	ldr	r0, [r7, #16]
 800e2b4:	f001 fa90 	bl	800f7d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800e2bc:	6938      	ldr	r0, [r7, #16]
 800e2be:	f001 f915 	bl	800f4ec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e2c2:	697b      	ldr	r3, [r7, #20]
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3718      	adds	r7, #24
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	4a07      	ldr	r2, [pc, #28]	; (800e2f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800e2dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	4a06      	ldr	r2, [pc, #24]	; (800e2fc <vApplicationGetIdleTaskMemory+0x30>)
 800e2e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2280      	movs	r2, #128	; 0x80
 800e2e8:	601a      	str	r2, [r3, #0]
}
 800e2ea:	bf00      	nop
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	20000228 	.word	0x20000228
 800e2fc:	20000284 	.word	0x20000284

0800e300 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	4a07      	ldr	r2, [pc, #28]	; (800e32c <vApplicationGetTimerTaskMemory+0x2c>)
 800e310:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	4a06      	ldr	r2, [pc, #24]	; (800e330 <vApplicationGetTimerTaskMemory+0x30>)
 800e316:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e31e:	601a      	str	r2, [r3, #0]
}
 800e320:	bf00      	nop
 800e322:	3714      	adds	r7, #20
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	20000484 	.word	0x20000484
 800e330:	200004e0 	.word	0x200004e0

0800e334 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10a      	bne.n	800e358 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e346:	f383 8811 	msr	BASEPRI, r3
 800e34a:	f3bf 8f6f 	isb	sy
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e354:	bf00      	nop
 800e356:	e7fe      	b.n	800e356 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800e358:	2320      	movs	r3, #32
 800e35a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2b20      	cmp	r3, #32
 800e360:	d00a      	beq.n	800e378 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	60fb      	str	r3, [r7, #12]
}
 800e374:	bf00      	nop
 800e376:	e7fe      	b.n	800e376 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d00a      	beq.n	800e398 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	3304      	adds	r3, #4
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 f9bf 	bl	800e710 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2201      	movs	r2, #1
 800e396:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800e398:	697b      	ldr	r3, [r7, #20]
	}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3718      	adds	r7, #24
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800e3a8:	2020      	movs	r0, #32
 800e3aa:	f003 f975 	bl	8011698 <pvPortMalloc>
 800e3ae:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 f9a5 	bl	800e710 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800e3cc:	687b      	ldr	r3, [r7, #4]
	}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
	...

0800e3d8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b090      	sub	sp, #64	; 0x40
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10a      	bne.n	800e40e <xEventGroupWaitBits+0x36>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	623b      	str	r3, [r7, #32]
}
 800e40a:	bf00      	nop
 800e40c:	e7fe      	b.n	800e40c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00a      	beq.n	800e42e <xEventGroupWaitBits+0x56>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	61fb      	str	r3, [r7, #28]
}
 800e42a:	bf00      	nop
 800e42c:	e7fe      	b.n	800e42c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10a      	bne.n	800e44a <xEventGroupWaitBits+0x72>
	__asm volatile
 800e434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	61bb      	str	r3, [r7, #24]
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e44a:	f002 f96f 	bl	801072c <xTaskGetSchedulerState>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <xEventGroupWaitBits+0x82>
 800e454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <xEventGroupWaitBits+0x86>
 800e45a:	2301      	movs	r3, #1
 800e45c:	e000      	b.n	800e460 <xEventGroupWaitBits+0x88>
 800e45e:	2300      	movs	r3, #0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10a      	bne.n	800e47a <xEventGroupWaitBits+0xa2>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	617b      	str	r3, [r7, #20]
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e47a:	f001 fcc5 	bl	800fe08 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	68b9      	ldr	r1, [r7, #8]
 800e488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e48a:	f000 f90b 	bl	800e6a4 <prvTestWaitCondition>
 800e48e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00e      	beq.n	800e4b4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d028      	beq.n	800e4f6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	43db      	mvns	r3, r3
 800e4ac:	401a      	ands	r2, r3
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	e020      	b.n	800e4f6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e4b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d104      	bne.n	800e4c4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e4c2:	e018      	b.n	800e4f6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e4d0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d003      	beq.n	800e4e0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4de:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e2:	1d18      	adds	r0, r3, #4
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	f001 fe95 	bl	801021c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e4f6:	f001 fc95 	bl	800fe24 <xTaskResumeAll>
 800e4fa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e4fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d031      	beq.n	800e566 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	2b00      	cmp	r3, #0
 800e506:	d107      	bne.n	800e518 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e508:	4b19      	ldr	r3, [pc, #100]	; (800e570 <xEventGroupWaitBits+0x198>)
 800e50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e50e:	601a      	str	r2, [r3, #0]
 800e510:	f3bf 8f4f 	dsb	sy
 800e514:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e518:	f002 fa7e 	bl	8010a18 <uxTaskResetEventItemValue>
 800e51c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e524:	2b00      	cmp	r3, #0
 800e526:	d11a      	bne.n	800e55e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e528:	f002 ff94 	bl	8011454 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	68b9      	ldr	r1, [r7, #8]
 800e536:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e538:	f000 f8b4 	bl	800e6a4 <prvTestWaitCondition>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d009      	beq.n	800e556 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d006      	beq.n	800e556 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	43db      	mvns	r3, r3
 800e550:	401a      	ands	r2, r3
 800e552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e554:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e556:	2301      	movs	r3, #1
 800e558:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e55a:	f002 ffab 	bl	80114b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e564:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3740      	adds	r7, #64	; 0x40
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	e000ed04 	.word	0xe000ed04

0800e574 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b08e      	sub	sp, #56	; 0x38
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e57e:	2300      	movs	r3, #0
 800e580:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e586:	2300      	movs	r3, #0
 800e588:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10a      	bne.n	800e5a6 <xEventGroupSetBits+0x32>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	613b      	str	r3, [r7, #16]
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00a      	beq.n	800e5c6 <xEventGroupSetBits+0x52>
	__asm volatile
 800e5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	60fb      	str	r3, [r7, #12]
}
 800e5c2:	bf00      	nop
 800e5c4:	e7fe      	b.n	800e5c4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	3308      	adds	r3, #8
 800e5d0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e5d2:	f001 fc19 	bl	800fe08 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e5e8:	e03c      	b.n	800e664 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e600:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e608:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d108      	bne.n	800e626 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	4013      	ands	r3, r2
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00b      	beq.n	800e638 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800e620:	2301      	movs	r3, #1
 800e622:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e624:	e008      	b.n	800e638 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	4013      	ands	r3, r2
 800e62e:	69ba      	ldr	r2, [r7, #24]
 800e630:	429a      	cmp	r2, r3
 800e632:	d101      	bne.n	800e638 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e634:	2301      	movs	r3, #1
 800e636:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d010      	beq.n	800e660 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e658:	4619      	mov	r1, r3
 800e65a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e65c:	f001 feaa 	bl	80103b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800e664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e666:	6a3b      	ldr	r3, [r7, #32]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d1be      	bne.n	800e5ea <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e672:	43db      	mvns	r3, r3
 800e674:	401a      	ands	r2, r3
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e67a:	f001 fbd3 	bl	800fe24 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e680:	681b      	ldr	r3, [r3, #0]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3738      	adds	r7, #56	; 0x38
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b082      	sub	sp, #8
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
 800e692:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e694:	6839      	ldr	r1, [r7, #0]
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff ff6c 	bl	800e574 <xEventGroupSetBits>
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b087      	sub	sp, #28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	60b9      	str	r1, [r7, #8]
 800e6ae:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d107      	bne.n	800e6ca <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	4013      	ands	r3, r2
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00a      	beq.n	800e6da <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	617b      	str	r3, [r7, #20]
 800e6c8:	e007      	b.n	800e6da <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	68ba      	ldr	r2, [r7, #8]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d101      	bne.n	800e6da <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e6da:	697b      	ldr	r3, [r7, #20]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	371c      	adds	r7, #28
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b086      	sub	sp, #24
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	68f9      	ldr	r1, [r7, #12]
 800e6fa:	4804      	ldr	r0, [pc, #16]	; (800e70c <xEventGroupSetBitsFromISR+0x24>)
 800e6fc:	f002 fd5a 	bl	80111b4 <xTimerPendFunctionCallFromISR>
 800e700:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e702:	697b      	ldr	r3, [r7, #20]
	}
 800e704:	4618      	mov	r0, r3
 800e706:	3718      	adds	r7, #24
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	0800e68b 	.word	0x0800e68b

0800e710 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f103 0208 	add.w	r2, r3, #8
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e728:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f103 0208 	add.w	r2, r3, #8
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f103 0208 	add.w	r2, r3, #8
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e75e:	bf00      	nop
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e76a:	b480      	push	{r7}
 800e76c:	b085      	sub	sp, #20
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	689a      	ldr	r2, [r3, #8]
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	689b      	ldr	r3, [r3, #8]
 800e78c:	683a      	ldr	r2, [r7, #0]
 800e78e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	1c5a      	adds	r2, r3, #1
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	601a      	str	r2, [r3, #0]
}
 800e7a6:	bf00      	nop
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr

0800e7b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b085      	sub	sp, #20
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7c8:	d103      	bne.n	800e7d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	691b      	ldr	r3, [r3, #16]
 800e7ce:	60fb      	str	r3, [r7, #12]
 800e7d0:	e00c      	b.n	800e7ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	3308      	adds	r3, #8
 800e7d6:	60fb      	str	r3, [r7, #12]
 800e7d8:	e002      	b.n	800e7e0 <vListInsert+0x2e>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	68ba      	ldr	r2, [r7, #8]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d2f6      	bcs.n	800e7da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	683a      	ldr	r2, [r7, #0]
 800e7fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	1c5a      	adds	r2, r3, #1
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	601a      	str	r2, [r3, #0]
}
 800e818:	bf00      	nop
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	6892      	ldr	r2, [r2, #8]
 800e83a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	689b      	ldr	r3, [r3, #8]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	6852      	ldr	r2, [r2, #4]
 800e844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d103      	bne.n	800e858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	689a      	ldr	r2, [r3, #8]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	1e5a      	subs	r2, r3, #1
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <xQueueGenericReset+0x2a>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	60bb      	str	r3, [r7, #8]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e8a2:	f002 fdd7 	bl	8011454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ae:	68f9      	ldr	r1, [r7, #12]
 800e8b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8b2:	fb01 f303 	mul.w	r3, r1, r3
 800e8b6:	441a      	add	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	68f9      	ldr	r1, [r7, #12]
 800e8d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e8d8:	fb01 f303 	mul.w	r3, r1, r3
 800e8dc:	441a      	add	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	22ff      	movs	r2, #255	; 0xff
 800e8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	22ff      	movs	r2, #255	; 0xff
 800e8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d114      	bne.n	800e922 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d01a      	beq.n	800e936 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3310      	adds	r3, #16
 800e904:	4618      	mov	r0, r3
 800e906:	f001 fcf1 	bl	80102ec <xTaskRemoveFromEventList>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d012      	beq.n	800e936 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e910:	4b0c      	ldr	r3, [pc, #48]	; (800e944 <xQueueGenericReset+0xcc>)
 800e912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e916:	601a      	str	r2, [r3, #0]
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	e009      	b.n	800e936 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	3310      	adds	r3, #16
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff fef2 	bl	800e710 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	3324      	adds	r3, #36	; 0x24
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff feed 	bl	800e710 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e936:	f002 fdbd 	bl	80114b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e93a:	2301      	movs	r3, #1
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	e000ed04 	.word	0xe000ed04

0800e948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08e      	sub	sp, #56	; 0x38
 800e94c:	af02      	add	r7, sp, #8
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	607a      	str	r2, [r7, #4]
 800e954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10a      	bne.n	800e972 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e960:	f383 8811 	msr	BASEPRI, r3
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	f3bf 8f4f 	dsb	sy
 800e96c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e96e:	bf00      	nop
 800e970:	e7fe      	b.n	800e970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10a      	bne.n	800e98e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97c:	f383 8811 	msr	BASEPRI, r3
 800e980:	f3bf 8f6f 	isb	sy
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e98a:	bf00      	nop
 800e98c:	e7fe      	b.n	800e98c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <xQueueGenericCreateStatic+0x52>
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <xQueueGenericCreateStatic+0x56>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e000      	b.n	800e9a0 <xQueueGenericCreateStatic+0x58>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10a      	bne.n	800e9ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	623b      	str	r3, [r7, #32]
}
 800e9b6:	bf00      	nop
 800e9b8:	e7fe      	b.n	800e9b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <xQueueGenericCreateStatic+0x7e>
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d101      	bne.n	800e9ca <xQueueGenericCreateStatic+0x82>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e000      	b.n	800e9cc <xQueueGenericCreateStatic+0x84>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d10a      	bne.n	800e9e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	61fb      	str	r3, [r7, #28]
}
 800e9e2:	bf00      	nop
 800e9e4:	e7fe      	b.n	800e9e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e9e6:	2350      	movs	r3, #80	; 0x50
 800e9e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	2b50      	cmp	r3, #80	; 0x50
 800e9ee:	d00a      	beq.n	800ea06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	61bb      	str	r3, [r7, #24]
}
 800ea02:	bf00      	nop
 800ea04:	e7fe      	b.n	800ea04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ea06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00d      	beq.n	800ea2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	4613      	mov	r3, r2
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	68b9      	ldr	r1, [r7, #8]
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f000 f83f 	bl	800eaac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3730      	adds	r7, #48	; 0x30
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08a      	sub	sp, #40	; 0x28
 800ea3c:	af02      	add	r7, sp, #8
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	4613      	mov	r3, r2
 800ea44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10a      	bne.n	800ea62 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	613b      	str	r3, [r7, #16]
}
 800ea5e:	bf00      	nop
 800ea60:	e7fe      	b.n	800ea60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	fb02 f303 	mul.w	r3, r2, r3
 800ea6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	3350      	adds	r3, #80	; 0x50
 800ea70:	4618      	mov	r0, r3
 800ea72:	f002 fe11 	bl	8011698 <pvPortMalloc>
 800ea76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d011      	beq.n	800eaa2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	3350      	adds	r3, #80	; 0x50
 800ea86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea90:	79fa      	ldrb	r2, [r7, #7]
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	4613      	mov	r3, r2
 800ea98:	697a      	ldr	r2, [r7, #20]
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f000 f805 	bl	800eaac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eaa2:	69bb      	ldr	r3, [r7, #24]
	}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3720      	adds	r7, #32
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
 800eab8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d103      	bne.n	800eac8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	69ba      	ldr	r2, [r7, #24]
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	e002      	b.n	800eace <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eada:	2101      	movs	r1, #1
 800eadc:	69b8      	ldr	r0, [r7, #24]
 800eade:	f7ff fecb 	bl	800e878 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	78fa      	ldrb	r2, [r7, #3]
 800eae6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800eaea:	bf00      	nop
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b08a      	sub	sp, #40	; 0x28
 800eaf6:	af02      	add	r7, sp, #8
 800eaf8:	60f8      	str	r0, [r7, #12]
 800eafa:	60b9      	str	r1, [r7, #8]
 800eafc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10a      	bne.n	800eb1a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800eb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb08:	f383 8811 	msr	BASEPRI, r3
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	f3bf 8f4f 	dsb	sy
 800eb14:	61bb      	str	r3, [r7, #24]
}
 800eb16:	bf00      	nop
 800eb18:	e7fe      	b.n	800eb18 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eb1a:	68ba      	ldr	r2, [r7, #8]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d90a      	bls.n	800eb38 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	617b      	str	r3, [r7, #20]
}
 800eb34:	bf00      	nop
 800eb36:	e7fe      	b.n	800eb36 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eb38:	2302      	movs	r3, #2
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	2100      	movs	r1, #0
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7ff ff00 	bl	800e948 <xQueueGenericCreateStatic>
 800eb48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d002      	beq.n	800eb56 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eb56:	69fb      	ldr	r3, [r7, #28]
	}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3720      	adds	r7, #32
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10a      	bne.n	800eb86 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800eb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	613b      	str	r3, [r7, #16]
}
 800eb82:	bf00      	nop
 800eb84:	e7fe      	b.n	800eb84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eb86:	683a      	ldr	r2, [r7, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d90a      	bls.n	800eba4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800eb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	60fb      	str	r3, [r7, #12]
}
 800eba0:	bf00      	nop
 800eba2:	e7fe      	b.n	800eba2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eba4:	2202      	movs	r2, #2
 800eba6:	2100      	movs	r1, #0
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7ff ff45 	bl	800ea38 <xQueueGenericCreate>
 800ebae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d002      	beq.n	800ebbc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	683a      	ldr	r2, [r7, #0]
 800ebba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ebbc:	697b      	ldr	r3, [r7, #20]
	}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3718      	adds	r7, #24
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
	...

0800ebc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08e      	sub	sp, #56	; 0x38
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
 800ebd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d10a      	bne.n	800ebfa <xQueueGenericSend+0x32>
	__asm volatile
 800ebe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe8:	f383 8811 	msr	BASEPRI, r3
 800ebec:	f3bf 8f6f 	isb	sy
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ebf6:	bf00      	nop
 800ebf8:	e7fe      	b.n	800ebf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d103      	bne.n	800ec08 <xQueueGenericSend+0x40>
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <xQueueGenericSend+0x44>
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e000      	b.n	800ec0e <xQueueGenericSend+0x46>
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d10a      	bne.n	800ec28 <xQueueGenericSend+0x60>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec24:	bf00      	nop
 800ec26:	e7fe      	b.n	800ec26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d103      	bne.n	800ec36 <xQueueGenericSend+0x6e>
 800ec2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d101      	bne.n	800ec3a <xQueueGenericSend+0x72>
 800ec36:	2301      	movs	r3, #1
 800ec38:	e000      	b.n	800ec3c <xQueueGenericSend+0x74>
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10a      	bne.n	800ec56 <xQueueGenericSend+0x8e>
	__asm volatile
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	623b      	str	r3, [r7, #32]
}
 800ec52:	bf00      	nop
 800ec54:	e7fe      	b.n	800ec54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec56:	f001 fd69 	bl	801072c <xTaskGetSchedulerState>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d102      	bne.n	800ec66 <xQueueGenericSend+0x9e>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <xQueueGenericSend+0xa2>
 800ec66:	2301      	movs	r3, #1
 800ec68:	e000      	b.n	800ec6c <xQueueGenericSend+0xa4>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10a      	bne.n	800ec86 <xQueueGenericSend+0xbe>
	__asm volatile
 800ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	61fb      	str	r3, [r7, #28]
}
 800ec82:	bf00      	nop
 800ec84:	e7fe      	b.n	800ec84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec86:	f002 fbe5 	bl	8011454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d302      	bcc.n	800ec9c <xQueueGenericSend+0xd4>
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d129      	bne.n	800ecf0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec9c:	683a      	ldr	r2, [r7, #0]
 800ec9e:	68b9      	ldr	r1, [r7, #8]
 800eca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eca2:	f000 fc5e 	bl	800f562 <prvCopyDataToQueue>
 800eca6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d010      	beq.n	800ecd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb2:	3324      	adds	r3, #36	; 0x24
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f001 fb19 	bl	80102ec <xTaskRemoveFromEventList>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d013      	beq.n	800ece8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ecc0:	4b3f      	ldr	r3, [pc, #252]	; (800edc0 <xQueueGenericSend+0x1f8>)
 800ecc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc6:	601a      	str	r2, [r3, #0]
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	e00a      	b.n	800ece8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ecd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d007      	beq.n	800ece8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ecd8:	4b39      	ldr	r3, [pc, #228]	; (800edc0 <xQueueGenericSend+0x1f8>)
 800ecda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecde:	601a      	str	r2, [r3, #0]
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ece8:	f002 fbe4 	bl	80114b4 <vPortExitCritical>
				return pdPASS;
 800ecec:	2301      	movs	r3, #1
 800ecee:	e063      	b.n	800edb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d103      	bne.n	800ecfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ecf6:	f002 fbdd 	bl	80114b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	e05c      	b.n	800edb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ecfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d106      	bne.n	800ed12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed04:	f107 0314 	add.w	r3, r7, #20
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f001 fbb5 	bl	8010478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed12:	f002 fbcf 	bl	80114b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed16:	f001 f877 	bl	800fe08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed1a:	f002 fb9b 	bl	8011454 <vPortEnterCritical>
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed24:	b25b      	sxtb	r3, r3
 800ed26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed2a:	d103      	bne.n	800ed34 <xQueueGenericSend+0x16c>
 800ed2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed3a:	b25b      	sxtb	r3, r3
 800ed3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed40:	d103      	bne.n	800ed4a <xQueueGenericSend+0x182>
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	2200      	movs	r2, #0
 800ed46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed4a:	f002 fbb3 	bl	80114b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed4e:	1d3a      	adds	r2, r7, #4
 800ed50:	f107 0314 	add.w	r3, r7, #20
 800ed54:	4611      	mov	r1, r2
 800ed56:	4618      	mov	r0, r3
 800ed58:	f001 fba4 	bl	80104a4 <xTaskCheckForTimeOut>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d124      	bne.n	800edac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ed62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed64:	f000 fcf5 	bl	800f752 <prvIsQueueFull>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d018      	beq.n	800eda0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	3310      	adds	r3, #16
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	4611      	mov	r1, r2
 800ed76:	4618      	mov	r0, r3
 800ed78:	f001 fa2c 	bl	80101d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed7e:	f000 fc80 	bl	800f682 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed82:	f001 f84f 	bl	800fe24 <xTaskResumeAll>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f47f af7c 	bne.w	800ec86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ed8e:	4b0c      	ldr	r3, [pc, #48]	; (800edc0 <xQueueGenericSend+0x1f8>)
 800ed90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	f3bf 8f4f 	dsb	sy
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	e772      	b.n	800ec86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eda2:	f000 fc6e 	bl	800f682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eda6:	f001 f83d 	bl	800fe24 <xTaskResumeAll>
 800edaa:	e76c      	b.n	800ec86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800edac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800edae:	f000 fc68 	bl	800f682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800edb2:	f001 f837 	bl	800fe24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800edb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3738      	adds	r7, #56	; 0x38
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	e000ed04 	.word	0xe000ed04

0800edc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b090      	sub	sp, #64	; 0x40
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
 800edd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800edd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10a      	bne.n	800edf2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800edee:	bf00      	nop
 800edf0:	e7fe      	b.n	800edf0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d103      	bne.n	800ee00 <xQueueGenericSendFromISR+0x3c>
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d101      	bne.n	800ee04 <xQueueGenericSendFromISR+0x40>
 800ee00:	2301      	movs	r3, #1
 800ee02:	e000      	b.n	800ee06 <xQueueGenericSendFromISR+0x42>
 800ee04:	2300      	movs	r3, #0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d10a      	bne.n	800ee20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ee0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0e:	f383 8811 	msr	BASEPRI, r3
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee1c:	bf00      	nop
 800ee1e:	e7fe      	b.n	800ee1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d103      	bne.n	800ee2e <xQueueGenericSendFromISR+0x6a>
 800ee26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d101      	bne.n	800ee32 <xQueueGenericSendFromISR+0x6e>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e000      	b.n	800ee34 <xQueueGenericSendFromISR+0x70>
 800ee32:	2300      	movs	r3, #0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10a      	bne.n	800ee4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ee38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3c:	f383 8811 	msr	BASEPRI, r3
 800ee40:	f3bf 8f6f 	isb	sy
 800ee44:	f3bf 8f4f 	dsb	sy
 800ee48:	623b      	str	r3, [r7, #32]
}
 800ee4a:	bf00      	nop
 800ee4c:	e7fe      	b.n	800ee4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee4e:	f002 fbe3 	bl	8011618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ee52:	f3ef 8211 	mrs	r2, BASEPRI
 800ee56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5a:	f383 8811 	msr	BASEPRI, r3
 800ee5e:	f3bf 8f6f 	isb	sy
 800ee62:	f3bf 8f4f 	dsb	sy
 800ee66:	61fa      	str	r2, [r7, #28]
 800ee68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ee6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d302      	bcc.n	800ee80 <xQueueGenericSendFromISR+0xbc>
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d12f      	bne.n	800eee0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	68b9      	ldr	r1, [r7, #8]
 800ee94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee96:	f000 fb64 	bl	800f562 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ee9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eea2:	d112      	bne.n	800eeca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d016      	beq.n	800eeda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeae:	3324      	adds	r3, #36	; 0x24
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f001 fa1b 	bl	80102ec <xTaskRemoveFromEventList>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00e      	beq.n	800eeda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00b      	beq.n	800eeda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2201      	movs	r2, #1
 800eec6:	601a      	str	r2, [r3, #0]
 800eec8:	e007      	b.n	800eeda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eeca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eece:	3301      	adds	r3, #1
 800eed0:	b2db      	uxtb	r3, r3
 800eed2:	b25a      	sxtb	r2, r3
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eeda:	2301      	movs	r3, #1
 800eedc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800eede:	e001      	b.n	800eee4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eee0:	2300      	movs	r3, #0
 800eee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eee6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800eeee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3740      	adds	r7, #64	; 0x40
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}

0800eefa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eefa:	b580      	push	{r7, lr}
 800eefc:	b08e      	sub	sp, #56	; 0x38
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	6078      	str	r0, [r7, #4]
 800ef02:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ef08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10a      	bne.n	800ef24 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	623b      	str	r3, [r7, #32]
}
 800ef20:	bf00      	nop
 800ef22:	e7fe      	b.n	800ef22 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00a      	beq.n	800ef42 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ef2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	61fb      	str	r3, [r7, #28]
}
 800ef3e:	bf00      	nop
 800ef40:	e7fe      	b.n	800ef40 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d103      	bne.n	800ef52 <xQueueGiveFromISR+0x58>
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d101      	bne.n	800ef56 <xQueueGiveFromISR+0x5c>
 800ef52:	2301      	movs	r3, #1
 800ef54:	e000      	b.n	800ef58 <xQueueGiveFromISR+0x5e>
 800ef56:	2300      	movs	r3, #0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10a      	bne.n	800ef72 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ef5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef60:	f383 8811 	msr	BASEPRI, r3
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	61bb      	str	r3, [r7, #24]
}
 800ef6e:	bf00      	nop
 800ef70:	e7fe      	b.n	800ef70 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef72:	f002 fb51 	bl	8011618 <vPortValidateInterruptPriority>
	__asm volatile
 800ef76:	f3ef 8211 	mrs	r2, BASEPRI
 800ef7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7e:	f383 8811 	msr	BASEPRI, r3
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	f3bf 8f4f 	dsb	sy
 800ef8a:	617a      	str	r2, [r7, #20]
 800ef8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ef8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ef98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d22b      	bcs.n	800effa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800efac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efae:	1c5a      	adds	r2, r3, #1
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800efb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efbc:	d112      	bne.n	800efe4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d016      	beq.n	800eff4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	3324      	adds	r3, #36	; 0x24
 800efca:	4618      	mov	r0, r3
 800efcc:	f001 f98e 	bl	80102ec <xTaskRemoveFromEventList>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00e      	beq.n	800eff4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00b      	beq.n	800eff4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	2201      	movs	r2, #1
 800efe0:	601a      	str	r2, [r3, #0]
 800efe2:	e007      	b.n	800eff4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800efe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efe8:	3301      	adds	r3, #1
 800efea:	b2db      	uxtb	r3, r3
 800efec:	b25a      	sxtb	r2, r3
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eff4:	2301      	movs	r3, #1
 800eff6:	637b      	str	r3, [r7, #52]	; 0x34
 800eff8:	e001      	b.n	800effe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800effa:	2300      	movs	r3, #0
 800effc:	637b      	str	r3, [r7, #52]	; 0x34
 800effe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f000:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f383 8811 	msr	BASEPRI, r3
}
 800f008:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3738      	adds	r7, #56	; 0x38
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08c      	sub	sp, #48	; 0x30
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f020:	2300      	movs	r3, #0
 800f022:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <xQueueReceive+0x30>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	623b      	str	r3, [r7, #32]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d103      	bne.n	800f052 <xQueueReceive+0x3e>
 800f04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <xQueueReceive+0x42>
 800f052:	2301      	movs	r3, #1
 800f054:	e000      	b.n	800f058 <xQueueReceive+0x44>
 800f056:	2300      	movs	r3, #0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d10a      	bne.n	800f072 <xQueueReceive+0x5e>
	__asm volatile
 800f05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	61fb      	str	r3, [r7, #28]
}
 800f06e:	bf00      	nop
 800f070:	e7fe      	b.n	800f070 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f072:	f001 fb5b 	bl	801072c <xTaskGetSchedulerState>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d102      	bne.n	800f082 <xQueueReceive+0x6e>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d101      	bne.n	800f086 <xQueueReceive+0x72>
 800f082:	2301      	movs	r3, #1
 800f084:	e000      	b.n	800f088 <xQueueReceive+0x74>
 800f086:	2300      	movs	r3, #0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10a      	bne.n	800f0a2 <xQueueReceive+0x8e>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	61bb      	str	r3, [r7, #24]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0a2:	f002 f9d7 	bl	8011454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d01f      	beq.n	800f0f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f0b2:	68b9      	ldr	r1, [r7, #8]
 800f0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0b6:	f000 fabe 	bl	800f636 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	1e5a      	subs	r2, r3, #1
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00f      	beq.n	800f0ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0cc:	3310      	adds	r3, #16
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f001 f90c 	bl	80102ec <xTaskRemoveFromEventList>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d007      	beq.n	800f0ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f0da:	4b3d      	ldr	r3, [pc, #244]	; (800f1d0 <xQueueReceive+0x1bc>)
 800f0dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	f3bf 8f4f 	dsb	sy
 800f0e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f0ea:	f002 f9e3 	bl	80114b4 <vPortExitCritical>
				return pdPASS;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e069      	b.n	800f1c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d103      	bne.n	800f100 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f0f8:	f002 f9dc 	bl	80114b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	e062      	b.n	800f1c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	2b00      	cmp	r3, #0
 800f104:	d106      	bne.n	800f114 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f106:	f107 0310 	add.w	r3, r7, #16
 800f10a:	4618      	mov	r0, r3
 800f10c:	f001 f9b4 	bl	8010478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f110:	2301      	movs	r3, #1
 800f112:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f114:	f002 f9ce 	bl	80114b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f118:	f000 fe76 	bl	800fe08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f11c:	f002 f99a 	bl	8011454 <vPortEnterCritical>
 800f120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f126:	b25b      	sxtb	r3, r3
 800f128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f12c:	d103      	bne.n	800f136 <xQueueReceive+0x122>
 800f12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f130:	2200      	movs	r2, #0
 800f132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f13c:	b25b      	sxtb	r3, r3
 800f13e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f142:	d103      	bne.n	800f14c <xQueueReceive+0x138>
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	2200      	movs	r2, #0
 800f148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f14c:	f002 f9b2 	bl	80114b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f150:	1d3a      	adds	r2, r7, #4
 800f152:	f107 0310 	add.w	r3, r7, #16
 800f156:	4611      	mov	r1, r2
 800f158:	4618      	mov	r0, r3
 800f15a:	f001 f9a3 	bl	80104a4 <xTaskCheckForTimeOut>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d123      	bne.n	800f1ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f166:	f000 fade 	bl	800f726 <prvIsQueueEmpty>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d017      	beq.n	800f1a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f172:	3324      	adds	r3, #36	; 0x24
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	4611      	mov	r1, r2
 800f178:	4618      	mov	r0, r3
 800f17a:	f001 f82b 	bl	80101d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f180:	f000 fa7f 	bl	800f682 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f184:	f000 fe4e 	bl	800fe24 <xTaskResumeAll>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d189      	bne.n	800f0a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f18e:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <xQueueReceive+0x1bc>)
 800f190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f194:	601a      	str	r2, [r3, #0]
 800f196:	f3bf 8f4f 	dsb	sy
 800f19a:	f3bf 8f6f 	isb	sy
 800f19e:	e780      	b.n	800f0a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f1a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1a2:	f000 fa6e 	bl	800f682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1a6:	f000 fe3d 	bl	800fe24 <xTaskResumeAll>
 800f1aa:	e77a      	b.n	800f0a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1ae:	f000 fa68 	bl	800f682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f1b2:	f000 fe37 	bl	800fe24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1b8:	f000 fab5 	bl	800f726 <prvIsQueueEmpty>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f43f af6f 	beq.w	800f0a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f1c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3730      	adds	r7, #48	; 0x30
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	e000ed04 	.word	0xe000ed04

0800f1d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b08e      	sub	sp, #56	; 0x38
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d10a      	bne.n	800f206 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f4:	f383 8811 	msr	BASEPRI, r3
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	623b      	str	r3, [r7, #32]
}
 800f202:	bf00      	nop
 800f204:	e7fe      	b.n	800f204 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00a      	beq.n	800f224 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	61fb      	str	r3, [r7, #28]
}
 800f220:	bf00      	nop
 800f222:	e7fe      	b.n	800f222 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f224:	f001 fa82 	bl	801072c <xTaskGetSchedulerState>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d102      	bne.n	800f234 <xQueueSemaphoreTake+0x60>
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d101      	bne.n	800f238 <xQueueSemaphoreTake+0x64>
 800f234:	2301      	movs	r3, #1
 800f236:	e000      	b.n	800f23a <xQueueSemaphoreTake+0x66>
 800f238:	2300      	movs	r3, #0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d10a      	bne.n	800f254 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f242:	f383 8811 	msr	BASEPRI, r3
 800f246:	f3bf 8f6f 	isb	sy
 800f24a:	f3bf 8f4f 	dsb	sy
 800f24e:	61bb      	str	r3, [r7, #24]
}
 800f250:	bf00      	nop
 800f252:	e7fe      	b.n	800f252 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f254:	f002 f8fe 	bl	8011454 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f25c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f260:	2b00      	cmp	r3, #0
 800f262:	d024      	beq.n	800f2ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f266:	1e5a      	subs	r2, r3, #1
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d104      	bne.n	800f27e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f274:	f001 fbe8 	bl	8010a48 <pvTaskIncrementMutexHeldCount>
 800f278:	4602      	mov	r2, r0
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f280:	691b      	ldr	r3, [r3, #16]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00f      	beq.n	800f2a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	3310      	adds	r3, #16
 800f28a:	4618      	mov	r0, r3
 800f28c:	f001 f82e 	bl	80102ec <xTaskRemoveFromEventList>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d007      	beq.n	800f2a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f296:	4b54      	ldr	r3, [pc, #336]	; (800f3e8 <xQueueSemaphoreTake+0x214>)
 800f298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f29c:	601a      	str	r2, [r3, #0]
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f2a6:	f002 f905 	bl	80114b4 <vPortExitCritical>
				return pdPASS;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e097      	b.n	800f3de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d111      	bne.n	800f2d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00a      	beq.n	800f2d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	617b      	str	r3, [r7, #20]
}
 800f2cc:	bf00      	nop
 800f2ce:	e7fe      	b.n	800f2ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f2d0:	f002 f8f0 	bl	80114b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	e082      	b.n	800f3de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d106      	bne.n	800f2ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f2de:	f107 030c 	add.w	r3, r7, #12
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f001 f8c8 	bl	8010478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f2ec:	f002 f8e2 	bl	80114b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2f0:	f000 fd8a 	bl	800fe08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2f4:	f002 f8ae 	bl	8011454 <vPortEnterCritical>
 800f2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2fe:	b25b      	sxtb	r3, r3
 800f300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f304:	d103      	bne.n	800f30e <xQueueSemaphoreTake+0x13a>
 800f306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f308:	2200      	movs	r2, #0
 800f30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f314:	b25b      	sxtb	r3, r3
 800f316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f31a:	d103      	bne.n	800f324 <xQueueSemaphoreTake+0x150>
 800f31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f324:	f002 f8c6 	bl	80114b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f328:	463a      	mov	r2, r7
 800f32a:	f107 030c 	add.w	r3, r7, #12
 800f32e:	4611      	mov	r1, r2
 800f330:	4618      	mov	r0, r3
 800f332:	f001 f8b7 	bl	80104a4 <xTaskCheckForTimeOut>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d132      	bne.n	800f3a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f33c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f33e:	f000 f9f2 	bl	800f726 <prvIsQueueEmpty>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	d026      	beq.n	800f396 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d109      	bne.n	800f364 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f350:	f002 f880 	bl	8011454 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	4618      	mov	r0, r3
 800f35a:	f001 fa05 	bl	8010768 <xTaskPriorityInherit>
 800f35e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f360:	f002 f8a8 	bl	80114b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f366:	3324      	adds	r3, #36	; 0x24
 800f368:	683a      	ldr	r2, [r7, #0]
 800f36a:	4611      	mov	r1, r2
 800f36c:	4618      	mov	r0, r3
 800f36e:	f000 ff31 	bl	80101d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f374:	f000 f985 	bl	800f682 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f378:	f000 fd54 	bl	800fe24 <xTaskResumeAll>
 800f37c:	4603      	mov	r3, r0
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f47f af68 	bne.w	800f254 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f384:	4b18      	ldr	r3, [pc, #96]	; (800f3e8 <xQueueSemaphoreTake+0x214>)
 800f386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f38a:	601a      	str	r2, [r3, #0]
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	e75e      	b.n	800f254 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f398:	f000 f973 	bl	800f682 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f39c:	f000 fd42 	bl	800fe24 <xTaskResumeAll>
 800f3a0:	e758      	b.n	800f254 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f3a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3a4:	f000 f96d 	bl	800f682 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3a8:	f000 fd3c 	bl	800fe24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3ae:	f000 f9ba 	bl	800f726 <prvIsQueueEmpty>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f43f af4d 	beq.w	800f254 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00d      	beq.n	800f3dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f3c0:	f002 f848 	bl	8011454 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f3c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3c6:	f000 f8b4 	bl	800f532 <prvGetDisinheritPriorityAfterTimeout>
 800f3ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f001 fa9e 	bl	8010914 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f3d8:	f002 f86c 	bl	80114b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3738      	adds	r7, #56	; 0x38
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	e000ed04 	.word	0xe000ed04

0800f3ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b08e      	sub	sp, #56	; 0x38
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10a      	bne.n	800f418 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f406:	f383 8811 	msr	BASEPRI, r3
 800f40a:	f3bf 8f6f 	isb	sy
 800f40e:	f3bf 8f4f 	dsb	sy
 800f412:	623b      	str	r3, [r7, #32]
}
 800f414:	bf00      	nop
 800f416:	e7fe      	b.n	800f416 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d103      	bne.n	800f426 <xQueueReceiveFromISR+0x3a>
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <xQueueReceiveFromISR+0x3e>
 800f426:	2301      	movs	r3, #1
 800f428:	e000      	b.n	800f42c <xQueueReceiveFromISR+0x40>
 800f42a:	2300      	movs	r3, #0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10a      	bne.n	800f446 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	61fb      	str	r3, [r7, #28]
}
 800f442:	bf00      	nop
 800f444:	e7fe      	b.n	800f444 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f446:	f002 f8e7 	bl	8011618 <vPortValidateInterruptPriority>
	__asm volatile
 800f44a:	f3ef 8211 	mrs	r2, BASEPRI
 800f44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f452:	f383 8811 	msr	BASEPRI, r3
 800f456:	f3bf 8f6f 	isb	sy
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	61ba      	str	r2, [r7, #24]
 800f460:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f462:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f464:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f46a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d02f      	beq.n	800f4d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f47c:	68b9      	ldr	r1, [r7, #8]
 800f47e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f480:	f000 f8d9 	bl	800f636 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f486:	1e5a      	subs	r2, r3, #1
 800f488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f48c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f494:	d112      	bne.n	800f4bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d016      	beq.n	800f4cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	3310      	adds	r3, #16
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f000 ff22 	bl	80102ec <xTaskRemoveFromEventList>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00e      	beq.n	800f4cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00b      	beq.n	800f4cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	601a      	str	r2, [r3, #0]
 800f4ba:	e007      	b.n	800f4cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	b25a      	sxtb	r2, r3
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f4d0:	e001      	b.n	800f4d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	f383 8811 	msr	BASEPRI, r3
}
 800f4e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3738      	adds	r7, #56	; 0x38
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10a      	bne.n	800f514 <vQueueDelete+0x28>
	__asm volatile
 800f4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	60bb      	str	r3, [r7, #8]
}
 800f510:	bf00      	nop
 800f512:	e7fe      	b.n	800f512 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f000 f95f 	bl	800f7d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f520:	2b00      	cmp	r3, #0
 800f522:	d102      	bne.n	800f52a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f002 f983 	bl	8011830 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f52a:	bf00      	nop
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f532:	b480      	push	{r7}
 800f534:	b085      	sub	sp, #20
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d006      	beq.n	800f550 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f54c:	60fb      	str	r3, [r7, #12]
 800f54e:	e001      	b.n	800f554 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f550:	2300      	movs	r3, #0
 800f552:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f554:	68fb      	ldr	r3, [r7, #12]
	}
 800f556:	4618      	mov	r0, r3
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr

0800f562 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b086      	sub	sp, #24
 800f566:	af00      	add	r7, sp, #0
 800f568:	60f8      	str	r0, [r7, #12]
 800f56a:	60b9      	str	r1, [r7, #8]
 800f56c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f56e:	2300      	movs	r3, #0
 800f570:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f576:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10d      	bne.n	800f59c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d14d      	bne.n	800f624 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f001 f953 	bl	8010838 <xTaskPriorityDisinherit>
 800f592:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2200      	movs	r2, #0
 800f598:	609a      	str	r2, [r3, #8]
 800f59a:	e043      	b.n	800f624 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d119      	bne.n	800f5d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6858      	ldr	r0, [r3, #4]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	68b9      	ldr	r1, [r7, #8]
 800f5ae:	f002 fa87 	bl	8011ac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ba:	441a      	add	r2, r3
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d32b      	bcc.n	800f624 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	605a      	str	r2, [r3, #4]
 800f5d4:	e026      	b.n	800f624 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	68d8      	ldr	r0, [r3, #12]
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5de:	461a      	mov	r2, r3
 800f5e0:	68b9      	ldr	r1, [r7, #8]
 800f5e2:	f002 fa6d 	bl	8011ac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	68da      	ldr	r2, [r3, #12]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ee:	425b      	negs	r3, r3
 800f5f0:	441a      	add	r2, r3
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	68da      	ldr	r2, [r3, #12]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d207      	bcs.n	800f612 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	689a      	ldr	r2, [r3, #8]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f60a:	425b      	negs	r3, r3
 800f60c:	441a      	add	r2, r3
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2b02      	cmp	r3, #2
 800f616:	d105      	bne.n	800f624 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d002      	beq.n	800f624 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	3b01      	subs	r3, #1
 800f622:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f62c:	697b      	ldr	r3, [r7, #20]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3718      	adds	r7, #24
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f636:	b580      	push	{r7, lr}
 800f638:	b082      	sub	sp, #8
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
 800f63e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f644:	2b00      	cmp	r3, #0
 800f646:	d018      	beq.n	800f67a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	68da      	ldr	r2, [r3, #12]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f650:	441a      	add	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	68da      	ldr	r2, [r3, #12]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d303      	bcc.n	800f66a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68d9      	ldr	r1, [r3, #12]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f672:	461a      	mov	r2, r3
 800f674:	6838      	ldr	r0, [r7, #0]
 800f676:	f002 fa23 	bl	8011ac0 <memcpy>
	}
}
 800f67a:	bf00      	nop
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b084      	sub	sp, #16
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f68a:	f001 fee3 	bl	8011454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f694:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f696:	e011      	b.n	800f6bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d012      	beq.n	800f6c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	3324      	adds	r3, #36	; 0x24
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f000 fe21 	bl	80102ec <xTaskRemoveFromEventList>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f6b0:	f000 ff5a 	bl	8010568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	dce9      	bgt.n	800f698 <prvUnlockQueue+0x16>
 800f6c4:	e000      	b.n	800f6c8 <prvUnlockQueue+0x46>
					break;
 800f6c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	22ff      	movs	r2, #255	; 0xff
 800f6cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f6d0:	f001 fef0 	bl	80114b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f6d4:	f001 febe 	bl	8011454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6e0:	e011      	b.n	800f706 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	691b      	ldr	r3, [r3, #16]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d012      	beq.n	800f710 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	3310      	adds	r3, #16
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 fdfc 	bl	80102ec <xTaskRemoveFromEventList>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d001      	beq.n	800f6fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f6fa:	f000 ff35 	bl	8010568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f6fe:	7bbb      	ldrb	r3, [r7, #14]
 800f700:	3b01      	subs	r3, #1
 800f702:	b2db      	uxtb	r3, r3
 800f704:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	dce9      	bgt.n	800f6e2 <prvUnlockQueue+0x60>
 800f70e:	e000      	b.n	800f712 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f710:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	22ff      	movs	r2, #255	; 0xff
 800f716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f71a:	f001 fecb 	bl	80114b4 <vPortExitCritical>
}
 800f71e:	bf00      	nop
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b084      	sub	sp, #16
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f72e:	f001 fe91 	bl	8011454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f736:	2b00      	cmp	r3, #0
 800f738:	d102      	bne.n	800f740 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f73a:	2301      	movs	r3, #1
 800f73c:	60fb      	str	r3, [r7, #12]
 800f73e:	e001      	b.n	800f744 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f740:	2300      	movs	r3, #0
 800f742:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f744:	f001 feb6 	bl	80114b4 <vPortExitCritical>

	return xReturn;
 800f748:	68fb      	ldr	r3, [r7, #12]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b084      	sub	sp, #16
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f75a:	f001 fe7b 	bl	8011454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f766:	429a      	cmp	r2, r3
 800f768:	d102      	bne.n	800f770 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f76a:	2301      	movs	r3, #1
 800f76c:	60fb      	str	r3, [r7, #12]
 800f76e:	e001      	b.n	800f774 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f770:	2300      	movs	r3, #0
 800f772:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f774:	f001 fe9e 	bl	80114b4 <vPortExitCritical>

	return xReturn;
 800f778:	68fb      	ldr	r3, [r7, #12]
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3710      	adds	r7, #16
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
	...

0800f784 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f784:	b480      	push	{r7}
 800f786:	b085      	sub	sp, #20
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f78e:	2300      	movs	r3, #0
 800f790:	60fb      	str	r3, [r7, #12]
 800f792:	e014      	b.n	800f7be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f794:	4a0f      	ldr	r2, [pc, #60]	; (800f7d4 <vQueueAddToRegistry+0x50>)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10b      	bne.n	800f7b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f7a0:	490c      	ldr	r1, [pc, #48]	; (800f7d4 <vQueueAddToRegistry+0x50>)
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	683a      	ldr	r2, [r7, #0]
 800f7a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f7aa:	4a0a      	ldr	r2, [pc, #40]	; (800f7d4 <vQueueAddToRegistry+0x50>)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	00db      	lsls	r3, r3, #3
 800f7b0:	4413      	add	r3, r2
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f7b6:	e006      	b.n	800f7c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	60fb      	str	r3, [r7, #12]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2b07      	cmp	r3, #7
 800f7c2:	d9e7      	bls.n	800f794 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f7c4:	bf00      	nop
 800f7c6:	bf00      	nop
 800f7c8:	3714      	adds	r7, #20
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	20010504 	.word	0x20010504

0800f7d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f7d8:	b480      	push	{r7}
 800f7da:	b085      	sub	sp, #20
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	60fb      	str	r3, [r7, #12]
 800f7e4:	e016      	b.n	800f814 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f7e6:	4a10      	ldr	r2, [pc, #64]	; (800f828 <vQueueUnregisterQueue+0x50>)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	4413      	add	r3, r2
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d10b      	bne.n	800f80e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f7f6:	4a0c      	ldr	r2, [pc, #48]	; (800f828 <vQueueUnregisterQueue+0x50>)
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f800:	4a09      	ldr	r2, [pc, #36]	; (800f828 <vQueueUnregisterQueue+0x50>)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	00db      	lsls	r3, r3, #3
 800f806:	4413      	add	r3, r2
 800f808:	2200      	movs	r2, #0
 800f80a:	605a      	str	r2, [r3, #4]
				break;
 800f80c:	e006      	b.n	800f81c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	3301      	adds	r3, #1
 800f812:	60fb      	str	r3, [r7, #12]
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2b07      	cmp	r3, #7
 800f818:	d9e5      	bls.n	800f7e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f81a:	bf00      	nop
 800f81c:	bf00      	nop
 800f81e:	3714      	adds	r7, #20
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr
 800f828:	20010504 	.word	0x20010504

0800f82c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f83c:	f001 fe0a 	bl	8011454 <vPortEnterCritical>
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f846:	b25b      	sxtb	r3, r3
 800f848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f84c:	d103      	bne.n	800f856 <vQueueWaitForMessageRestricted+0x2a>
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f85c:	b25b      	sxtb	r3, r3
 800f85e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f862:	d103      	bne.n	800f86c <vQueueWaitForMessageRestricted+0x40>
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2200      	movs	r2, #0
 800f868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f86c:	f001 fe22 	bl	80114b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f874:	2b00      	cmp	r3, #0
 800f876:	d106      	bne.n	800f886 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	3324      	adds	r3, #36	; 0x24
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	68b9      	ldr	r1, [r7, #8]
 800f880:	4618      	mov	r0, r3
 800f882:	f000 fd07 	bl	8010294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f886:	6978      	ldr	r0, [r7, #20]
 800f888:	f7ff fefb 	bl	800f682 <prvUnlockQueue>
	}
 800f88c:	bf00      	nop
 800f88e:	3718      	adds	r7, #24
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f894:	b580      	push	{r7, lr}
 800f896:	b08e      	sub	sp, #56	; 0x38
 800f898:	af04      	add	r7, sp, #16
 800f89a:	60f8      	str	r0, [r7, #12]
 800f89c:	60b9      	str	r1, [r7, #8]
 800f89e:	607a      	str	r2, [r7, #4]
 800f8a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f8a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d10a      	bne.n	800f8be <xTaskCreateStatic+0x2a>
	__asm volatile
 800f8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ac:	f383 8811 	msr	BASEPRI, r3
 800f8b0:	f3bf 8f6f 	isb	sy
 800f8b4:	f3bf 8f4f 	dsb	sy
 800f8b8:	623b      	str	r3, [r7, #32]
}
 800f8ba:	bf00      	nop
 800f8bc:	e7fe      	b.n	800f8bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d10a      	bne.n	800f8da <xTaskCreateStatic+0x46>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	61fb      	str	r3, [r7, #28]
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f8da:	235c      	movs	r3, #92	; 0x5c
 800f8dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	2b5c      	cmp	r3, #92	; 0x5c
 800f8e2:	d00a      	beq.n	800f8fa <xTaskCreateStatic+0x66>
	__asm volatile
 800f8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e8:	f383 8811 	msr	BASEPRI, r3
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	61bb      	str	r3, [r7, #24]
}
 800f8f6:	bf00      	nop
 800f8f8:	e7fe      	b.n	800f8f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f8fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d01e      	beq.n	800f940 <xTaskCreateStatic+0xac>
 800f902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f904:	2b00      	cmp	r3, #0
 800f906:	d01b      	beq.n	800f940 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f910:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f914:	2202      	movs	r2, #2
 800f916:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f91a:	2300      	movs	r3, #0
 800f91c:	9303      	str	r3, [sp, #12]
 800f91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f920:	9302      	str	r3, [sp, #8]
 800f922:	f107 0314 	add.w	r3, r7, #20
 800f926:	9301      	str	r3, [sp, #4]
 800f928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92a:	9300      	str	r3, [sp, #0]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	68b9      	ldr	r1, [r7, #8]
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f000 f850 	bl	800f9d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f93a:	f000 f8dd 	bl	800faf8 <prvAddNewTaskToReadyList>
 800f93e:	e001      	b.n	800f944 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f940:	2300      	movs	r3, #0
 800f942:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f944:	697b      	ldr	r3, [r7, #20]
	}
 800f946:	4618      	mov	r0, r3
 800f948:	3728      	adds	r7, #40	; 0x28
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b08c      	sub	sp, #48	; 0x30
 800f952:	af04      	add	r7, sp, #16
 800f954:	60f8      	str	r0, [r7, #12]
 800f956:	60b9      	str	r1, [r7, #8]
 800f958:	603b      	str	r3, [r7, #0]
 800f95a:	4613      	mov	r3, r2
 800f95c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f95e:	88fb      	ldrh	r3, [r7, #6]
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	4618      	mov	r0, r3
 800f964:	f001 fe98 	bl	8011698 <pvPortMalloc>
 800f968:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d00e      	beq.n	800f98e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f970:	205c      	movs	r0, #92	; 0x5c
 800f972:	f001 fe91 	bl	8011698 <pvPortMalloc>
 800f976:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d003      	beq.n	800f986 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	631a      	str	r2, [r3, #48]	; 0x30
 800f984:	e005      	b.n	800f992 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f986:	6978      	ldr	r0, [r7, #20]
 800f988:	f001 ff52 	bl	8011830 <vPortFree>
 800f98c:	e001      	b.n	800f992 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f98e:	2300      	movs	r3, #0
 800f990:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d017      	beq.n	800f9c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	2200      	movs	r2, #0
 800f99c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f9a0:	88fa      	ldrh	r2, [r7, #6]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	9303      	str	r3, [sp, #12]
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	9302      	str	r3, [sp, #8]
 800f9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ac:	9301      	str	r3, [sp, #4]
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	68b9      	ldr	r1, [r7, #8]
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f000 f80e 	bl	800f9d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f9bc:	69f8      	ldr	r0, [r7, #28]
 800f9be:	f000 f89b 	bl	800faf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	61bb      	str	r3, [r7, #24]
 800f9c6:	e002      	b.n	800f9ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f9ce:	69bb      	ldr	r3, [r7, #24]
	}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3720      	adds	r7, #32
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b088      	sub	sp, #32
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	21a5      	movs	r1, #165	; 0xa5
 800f9f2:	f002 f873 	bl	8011adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fa00:	3b01      	subs	r3, #1
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	f023 0307 	bic.w	r3, r3, #7
 800fa0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	f003 0307 	and.w	r3, r3, #7
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00a      	beq.n	800fa30 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	617b      	str	r3, [r7, #20]
}
 800fa2c:	bf00      	nop
 800fa2e:	e7fe      	b.n	800fa2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d01f      	beq.n	800fa76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa36:	2300      	movs	r3, #0
 800fa38:	61fb      	str	r3, [r7, #28]
 800fa3a:	e012      	b.n	800fa62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	4413      	add	r3, r2
 800fa42:	7819      	ldrb	r1, [r3, #0]
 800fa44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	4413      	add	r3, r2
 800fa4a:	3334      	adds	r3, #52	; 0x34
 800fa4c:	460a      	mov	r2, r1
 800fa4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fa50:	68ba      	ldr	r2, [r7, #8]
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	4413      	add	r3, r2
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d006      	beq.n	800fa6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	61fb      	str	r3, [r7, #28]
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	2b0f      	cmp	r3, #15
 800fa66:	d9e9      	bls.n	800fa3c <prvInitialiseNewTask+0x64>
 800fa68:	e000      	b.n	800fa6c <prvInitialiseNewTask+0x94>
			{
				break;
 800fa6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa74:	e003      	b.n	800fa7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa80:	2b37      	cmp	r3, #55	; 0x37
 800fa82:	d901      	bls.n	800fa88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fa84:	2337      	movs	r3, #55	; 0x37
 800fa86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa96:	2200      	movs	r2, #0
 800fa98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe fe56 	bl	800e750 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800faa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa6:	3318      	adds	r3, #24
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fe fe51 	bl	800e750 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fab2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800faba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fac2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac6:	2200      	movs	r2, #0
 800fac8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800faca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800facc:	2200      	movs	r2, #0
 800face:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fad2:	683a      	ldr	r2, [r7, #0]
 800fad4:	68f9      	ldr	r1, [r7, #12]
 800fad6:	69b8      	ldr	r0, [r7, #24]
 800fad8:	f001 fb8c 	bl	80111f4 <pxPortInitialiseStack>
 800fadc:	4602      	mov	r2, r0
 800fade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d002      	beq.n	800faee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800faee:	bf00      	nop
 800faf0:	3720      	adds	r7, #32
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
	...

0800faf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fb00:	f001 fca8 	bl	8011454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fb04:	4b2d      	ldr	r3, [pc, #180]	; (800fbbc <prvAddNewTaskToReadyList+0xc4>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	4a2c      	ldr	r2, [pc, #176]	; (800fbbc <prvAddNewTaskToReadyList+0xc4>)
 800fb0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fb0e:	4b2c      	ldr	r3, [pc, #176]	; (800fbc0 <prvAddNewTaskToReadyList+0xc8>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d109      	bne.n	800fb2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fb16:	4a2a      	ldr	r2, [pc, #168]	; (800fbc0 <prvAddNewTaskToReadyList+0xc8>)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fb1c:	4b27      	ldr	r3, [pc, #156]	; (800fbbc <prvAddNewTaskToReadyList+0xc4>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d110      	bne.n	800fb46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fb24:	f000 fd44 	bl	80105b0 <prvInitialiseTaskLists>
 800fb28:	e00d      	b.n	800fb46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fb2a:	4b26      	ldr	r3, [pc, #152]	; (800fbc4 <prvAddNewTaskToReadyList+0xcc>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d109      	bne.n	800fb46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fb32:	4b23      	ldr	r3, [pc, #140]	; (800fbc0 <prvAddNewTaskToReadyList+0xc8>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d802      	bhi.n	800fb46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fb40:	4a1f      	ldr	r2, [pc, #124]	; (800fbc0 <prvAddNewTaskToReadyList+0xc8>)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fb46:	4b20      	ldr	r3, [pc, #128]	; (800fbc8 <prvAddNewTaskToReadyList+0xd0>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	4a1e      	ldr	r2, [pc, #120]	; (800fbc8 <prvAddNewTaskToReadyList+0xd0>)
 800fb4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fb50:	4b1d      	ldr	r3, [pc, #116]	; (800fbc8 <prvAddNewTaskToReadyList+0xd0>)
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb5c:	4b1b      	ldr	r3, [pc, #108]	; (800fbcc <prvAddNewTaskToReadyList+0xd4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d903      	bls.n	800fb6c <prvAddNewTaskToReadyList+0x74>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb68:	4a18      	ldr	r2, [pc, #96]	; (800fbcc <prvAddNewTaskToReadyList+0xd4>)
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb70:	4613      	mov	r3, r2
 800fb72:	009b      	lsls	r3, r3, #2
 800fb74:	4413      	add	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4a15      	ldr	r2, [pc, #84]	; (800fbd0 <prvAddNewTaskToReadyList+0xd8>)
 800fb7a:	441a      	add	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	3304      	adds	r3, #4
 800fb80:	4619      	mov	r1, r3
 800fb82:	4610      	mov	r0, r2
 800fb84:	f7fe fdf1 	bl	800e76a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb88:	f001 fc94 	bl	80114b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb8c:	4b0d      	ldr	r3, [pc, #52]	; (800fbc4 <prvAddNewTaskToReadyList+0xcc>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00e      	beq.n	800fbb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fb94:	4b0a      	ldr	r3, [pc, #40]	; (800fbc0 <prvAddNewTaskToReadyList+0xc8>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d207      	bcs.n	800fbb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fba2:	4b0c      	ldr	r3, [pc, #48]	; (800fbd4 <prvAddNewTaskToReadyList+0xdc>)
 800fba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbb2:	bf00      	nop
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	20000db4 	.word	0x20000db4
 800fbc0:	200008e0 	.word	0x200008e0
 800fbc4:	20000dc0 	.word	0x20000dc0
 800fbc8:	20000dd0 	.word	0x20000dd0
 800fbcc:	20000dbc 	.word	0x20000dbc
 800fbd0:	200008e4 	.word	0x200008e4
 800fbd4:	e000ed04 	.word	0xe000ed04

0800fbd8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b08a      	sub	sp, #40	; 0x28
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d10a      	bne.n	800fc02 <vTaskDelayUntil+0x2a>
	__asm volatile
 800fbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	617b      	str	r3, [r7, #20]
}
 800fbfe:	bf00      	nop
 800fc00:	e7fe      	b.n	800fc00 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10a      	bne.n	800fc1e <vTaskDelayUntil+0x46>
	__asm volatile
 800fc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0c:	f383 8811 	msr	BASEPRI, r3
 800fc10:	f3bf 8f6f 	isb	sy
 800fc14:	f3bf 8f4f 	dsb	sy
 800fc18:	613b      	str	r3, [r7, #16]
}
 800fc1a:	bf00      	nop
 800fc1c:	e7fe      	b.n	800fc1c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800fc1e:	4b2a      	ldr	r3, [pc, #168]	; (800fcc8 <vTaskDelayUntil+0xf0>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00a      	beq.n	800fc3c <vTaskDelayUntil+0x64>
	__asm volatile
 800fc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	60fb      	str	r3, [r7, #12]
}
 800fc38:	bf00      	nop
 800fc3a:	e7fe      	b.n	800fc3a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800fc3c:	f000 f8e4 	bl	800fe08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800fc40:	4b22      	ldr	r3, [pc, #136]	; (800fccc <vTaskDelayUntil+0xf4>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	683a      	ldr	r2, [r7, #0]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	6a3a      	ldr	r2, [r7, #32]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d20b      	bcs.n	800fc72 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	69fa      	ldr	r2, [r7, #28]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d211      	bcs.n	800fc88 <vTaskDelayUntil+0xb0>
 800fc64:	69fa      	ldr	r2, [r7, #28]
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d90d      	bls.n	800fc88 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc70:	e00a      	b.n	800fc88 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	69fa      	ldr	r2, [r7, #28]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d303      	bcc.n	800fc84 <vTaskDelayUntil+0xac>
 800fc7c:	69fa      	ldr	r2, [r7, #28]
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d901      	bls.n	800fc88 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800fc84:	2301      	movs	r3, #1
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	69fa      	ldr	r2, [r7, #28]
 800fc8c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800fc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d006      	beq.n	800fca2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800fc94:	69fa      	ldr	r2, [r7, #28]
 800fc96:	6a3b      	ldr	r3, [r7, #32]
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f000 fee7 	bl	8010a70 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800fca2:	f000 f8bf 	bl	800fe24 <xTaskResumeAll>
 800fca6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d107      	bne.n	800fcbe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800fcae:	4b08      	ldr	r3, [pc, #32]	; (800fcd0 <vTaskDelayUntil+0xf8>)
 800fcb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcbe:	bf00      	nop
 800fcc0:	3728      	adds	r7, #40	; 0x28
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20000ddc 	.word	0x20000ddc
 800fccc:	20000db8 	.word	0x20000db8
 800fcd0:	e000ed04 	.word	0xe000ed04

0800fcd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d017      	beq.n	800fd16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fce6:	4b13      	ldr	r3, [pc, #76]	; (800fd34 <vTaskDelay+0x60>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00a      	beq.n	800fd04 <vTaskDelay+0x30>
	__asm volatile
 800fcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	60bb      	str	r3, [r7, #8]
}
 800fd00:	bf00      	nop
 800fd02:	e7fe      	b.n	800fd02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fd04:	f000 f880 	bl	800fe08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd08:	2100      	movs	r1, #0
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 feb0 	bl	8010a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd10:	f000 f888 	bl	800fe24 <xTaskResumeAll>
 800fd14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d107      	bne.n	800fd2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fd1c:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <vTaskDelay+0x64>)
 800fd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd2c:	bf00      	nop
 800fd2e:	3710      	adds	r7, #16
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}
 800fd34:	20000ddc 	.word	0x20000ddc
 800fd38:	e000ed04 	.word	0xe000ed04

0800fd3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08a      	sub	sp, #40	; 0x28
 800fd40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fd46:	2300      	movs	r3, #0
 800fd48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fd4a:	463a      	mov	r2, r7
 800fd4c:	1d39      	adds	r1, r7, #4
 800fd4e:	f107 0308 	add.w	r3, r7, #8
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe faba 	bl	800e2cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fd58:	6839      	ldr	r1, [r7, #0]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68ba      	ldr	r2, [r7, #8]
 800fd5e:	9202      	str	r2, [sp, #8]
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	2300      	movs	r3, #0
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	2300      	movs	r3, #0
 800fd68:	460a      	mov	r2, r1
 800fd6a:	4921      	ldr	r1, [pc, #132]	; (800fdf0 <vTaskStartScheduler+0xb4>)
 800fd6c:	4821      	ldr	r0, [pc, #132]	; (800fdf4 <vTaskStartScheduler+0xb8>)
 800fd6e:	f7ff fd91 	bl	800f894 <xTaskCreateStatic>
 800fd72:	4603      	mov	r3, r0
 800fd74:	4a20      	ldr	r2, [pc, #128]	; (800fdf8 <vTaskStartScheduler+0xbc>)
 800fd76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fd78:	4b1f      	ldr	r3, [pc, #124]	; (800fdf8 <vTaskStartScheduler+0xbc>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d002      	beq.n	800fd86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fd80:	2301      	movs	r3, #1
 800fd82:	617b      	str	r3, [r7, #20]
 800fd84:	e001      	b.n	800fd8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fd86:	2300      	movs	r3, #0
 800fd88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d102      	bne.n	800fd96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fd90:	f000 fec2 	bl	8010b18 <xTimerCreateTimerTask>
 800fd94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d116      	bne.n	800fdca <vTaskStartScheduler+0x8e>
	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	613b      	str	r3, [r7, #16]
}
 800fdae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fdb0:	4b12      	ldr	r3, [pc, #72]	; (800fdfc <vTaskStartScheduler+0xc0>)
 800fdb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fdb8:	4b11      	ldr	r3, [pc, #68]	; (800fe00 <vTaskStartScheduler+0xc4>)
 800fdba:	2201      	movs	r2, #1
 800fdbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fdbe:	4b11      	ldr	r3, [pc, #68]	; (800fe04 <vTaskStartScheduler+0xc8>)
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fdc4:	f001 faa4 	bl	8011310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fdc8:	e00e      	b.n	800fde8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdd0:	d10a      	bne.n	800fde8 <vTaskStartScheduler+0xac>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	60fb      	str	r3, [r7, #12]
}
 800fde4:	bf00      	nop
 800fde6:	e7fe      	b.n	800fde6 <vTaskStartScheduler+0xaa>
}
 800fde8:	bf00      	nop
 800fdea:	3718      	adds	r7, #24
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	08013eac 	.word	0x08013eac
 800fdf4:	08010581 	.word	0x08010581
 800fdf8:	20000dd8 	.word	0x20000dd8
 800fdfc:	20000dd4 	.word	0x20000dd4
 800fe00:	20000dc0 	.word	0x20000dc0
 800fe04:	20000db8 	.word	0x20000db8

0800fe08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fe08:	b480      	push	{r7}
 800fe0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fe0c:	4b04      	ldr	r3, [pc, #16]	; (800fe20 <vTaskSuspendAll+0x18>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	3301      	adds	r3, #1
 800fe12:	4a03      	ldr	r2, [pc, #12]	; (800fe20 <vTaskSuspendAll+0x18>)
 800fe14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fe16:	bf00      	nop
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	20000ddc 	.word	0x20000ddc

0800fe24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fe32:	4b42      	ldr	r3, [pc, #264]	; (800ff3c <xTaskResumeAll+0x118>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d10a      	bne.n	800fe50 <xTaskResumeAll+0x2c>
	__asm volatile
 800fe3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3e:	f383 8811 	msr	BASEPRI, r3
 800fe42:	f3bf 8f6f 	isb	sy
 800fe46:	f3bf 8f4f 	dsb	sy
 800fe4a:	603b      	str	r3, [r7, #0]
}
 800fe4c:	bf00      	nop
 800fe4e:	e7fe      	b.n	800fe4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fe50:	f001 fb00 	bl	8011454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fe54:	4b39      	ldr	r3, [pc, #228]	; (800ff3c <xTaskResumeAll+0x118>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	4a38      	ldr	r2, [pc, #224]	; (800ff3c <xTaskResumeAll+0x118>)
 800fe5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe5e:	4b37      	ldr	r3, [pc, #220]	; (800ff3c <xTaskResumeAll+0x118>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d162      	bne.n	800ff2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe66:	4b36      	ldr	r3, [pc, #216]	; (800ff40 <xTaskResumeAll+0x11c>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d05e      	beq.n	800ff2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe6e:	e02f      	b.n	800fed0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe70:	4b34      	ldr	r3, [pc, #208]	; (800ff44 <xTaskResumeAll+0x120>)
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	3318      	adds	r3, #24
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7fe fcd1 	bl	800e824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	3304      	adds	r3, #4
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fe fccc 	bl	800e824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe90:	4b2d      	ldr	r3, [pc, #180]	; (800ff48 <xTaskResumeAll+0x124>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d903      	bls.n	800fea0 <xTaskResumeAll+0x7c>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9c:	4a2a      	ldr	r2, [pc, #168]	; (800ff48 <xTaskResumeAll+0x124>)
 800fe9e:	6013      	str	r3, [r2, #0]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fea4:	4613      	mov	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4413      	add	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	4a27      	ldr	r2, [pc, #156]	; (800ff4c <xTaskResumeAll+0x128>)
 800feae:	441a      	add	r2, r3
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	3304      	adds	r3, #4
 800feb4:	4619      	mov	r1, r3
 800feb6:	4610      	mov	r0, r2
 800feb8:	f7fe fc57 	bl	800e76a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec0:	4b23      	ldr	r3, [pc, #140]	; (800ff50 <xTaskResumeAll+0x12c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d302      	bcc.n	800fed0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800feca:	4b22      	ldr	r3, [pc, #136]	; (800ff54 <xTaskResumeAll+0x130>)
 800fecc:	2201      	movs	r2, #1
 800fece:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fed0:	4b1c      	ldr	r3, [pc, #112]	; (800ff44 <xTaskResumeAll+0x120>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d1cb      	bne.n	800fe70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d001      	beq.n	800fee2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fede:	f000 fc05 	bl	80106ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fee2:	4b1d      	ldr	r3, [pc, #116]	; (800ff58 <xTaskResumeAll+0x134>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d010      	beq.n	800ff10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800feee:	f000 f859 	bl	800ffa4 <xTaskIncrementTick>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d002      	beq.n	800fefe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fef8:	4b16      	ldr	r3, [pc, #88]	; (800ff54 <xTaskResumeAll+0x130>)
 800fefa:	2201      	movs	r2, #1
 800fefc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	3b01      	subs	r3, #1
 800ff02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d1f1      	bne.n	800feee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ff0a:	4b13      	ldr	r3, [pc, #76]	; (800ff58 <xTaskResumeAll+0x134>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ff10:	4b10      	ldr	r3, [pc, #64]	; (800ff54 <xTaskResumeAll+0x130>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d009      	beq.n	800ff2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ff1c:	4b0f      	ldr	r3, [pc, #60]	; (800ff5c <xTaskResumeAll+0x138>)
 800ff1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff22:	601a      	str	r2, [r3, #0]
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ff2c:	f001 fac2 	bl	80114b4 <vPortExitCritical>

	return xAlreadyYielded;
 800ff30:	68bb      	ldr	r3, [r7, #8]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3710      	adds	r7, #16
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	20000ddc 	.word	0x20000ddc
 800ff40:	20000db4 	.word	0x20000db4
 800ff44:	20000d74 	.word	0x20000d74
 800ff48:	20000dbc 	.word	0x20000dbc
 800ff4c:	200008e4 	.word	0x200008e4
 800ff50:	200008e0 	.word	0x200008e0
 800ff54:	20000dc8 	.word	0x20000dc8
 800ff58:	20000dc4 	.word	0x20000dc4
 800ff5c:	e000ed04 	.word	0xe000ed04

0800ff60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ff66:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <xTaskGetTickCount+0x1c>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ff6c:	687b      	ldr	r3, [r7, #4]
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	20000db8 	.word	0x20000db8

0800ff80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff86:	f001 fb47 	bl	8011618 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ff8e:	4b04      	ldr	r3, [pc, #16]	; (800ffa0 <xTaskGetTickCountFromISR+0x20>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff94:	683b      	ldr	r3, [r7, #0]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	20000db8 	.word	0x20000db8

0800ffa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffae:	4b4f      	ldr	r3, [pc, #316]	; (80100ec <xTaskIncrementTick+0x148>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f040 808f 	bne.w	80100d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ffb8:	4b4d      	ldr	r3, [pc, #308]	; (80100f0 <xTaskIncrementTick+0x14c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ffc0:	4a4b      	ldr	r2, [pc, #300]	; (80100f0 <xTaskIncrementTick+0x14c>)
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d120      	bne.n	801000e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ffcc:	4b49      	ldr	r3, [pc, #292]	; (80100f4 <xTaskIncrementTick+0x150>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00a      	beq.n	800ffec <xTaskIncrementTick+0x48>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	603b      	str	r3, [r7, #0]
}
 800ffe8:	bf00      	nop
 800ffea:	e7fe      	b.n	800ffea <xTaskIncrementTick+0x46>
 800ffec:	4b41      	ldr	r3, [pc, #260]	; (80100f4 <xTaskIncrementTick+0x150>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	60fb      	str	r3, [r7, #12]
 800fff2:	4b41      	ldr	r3, [pc, #260]	; (80100f8 <xTaskIncrementTick+0x154>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	4a3f      	ldr	r2, [pc, #252]	; (80100f4 <xTaskIncrementTick+0x150>)
 800fff8:	6013      	str	r3, [r2, #0]
 800fffa:	4a3f      	ldr	r2, [pc, #252]	; (80100f8 <xTaskIncrementTick+0x154>)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6013      	str	r3, [r2, #0]
 8010000:	4b3e      	ldr	r3, [pc, #248]	; (80100fc <xTaskIncrementTick+0x158>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	3301      	adds	r3, #1
 8010006:	4a3d      	ldr	r2, [pc, #244]	; (80100fc <xTaskIncrementTick+0x158>)
 8010008:	6013      	str	r3, [r2, #0]
 801000a:	f000 fb6f 	bl	80106ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801000e:	4b3c      	ldr	r3, [pc, #240]	; (8010100 <xTaskIncrementTick+0x15c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	429a      	cmp	r2, r3
 8010016:	d349      	bcc.n	80100ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010018:	4b36      	ldr	r3, [pc, #216]	; (80100f4 <xTaskIncrementTick+0x150>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d104      	bne.n	801002c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010022:	4b37      	ldr	r3, [pc, #220]	; (8010100 <xTaskIncrementTick+0x15c>)
 8010024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010028:	601a      	str	r2, [r3, #0]
					break;
 801002a:	e03f      	b.n	80100ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801002c:	4b31      	ldr	r3, [pc, #196]	; (80100f4 <xTaskIncrementTick+0x150>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801003c:	693a      	ldr	r2, [r7, #16]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	429a      	cmp	r2, r3
 8010042:	d203      	bcs.n	801004c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010044:	4a2e      	ldr	r2, [pc, #184]	; (8010100 <xTaskIncrementTick+0x15c>)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801004a:	e02f      	b.n	80100ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	3304      	adds	r3, #4
 8010050:	4618      	mov	r0, r3
 8010052:	f7fe fbe7 	bl	800e824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005a:	2b00      	cmp	r3, #0
 801005c:	d004      	beq.n	8010068 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	3318      	adds	r3, #24
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fbde 	bl	800e824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	4b25      	ldr	r3, [pc, #148]	; (8010104 <xTaskIncrementTick+0x160>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d903      	bls.n	801007c <xTaskIncrementTick+0xd8>
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010078:	4a22      	ldr	r2, [pc, #136]	; (8010104 <xTaskIncrementTick+0x160>)
 801007a:	6013      	str	r3, [r2, #0]
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010080:	4613      	mov	r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	4413      	add	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4a1f      	ldr	r2, [pc, #124]	; (8010108 <xTaskIncrementTick+0x164>)
 801008a:	441a      	add	r2, r3
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	3304      	adds	r3, #4
 8010090:	4619      	mov	r1, r3
 8010092:	4610      	mov	r0, r2
 8010094:	f7fe fb69 	bl	800e76a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009c:	4b1b      	ldr	r3, [pc, #108]	; (801010c <xTaskIncrementTick+0x168>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d3b8      	bcc.n	8010018 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80100a6:	2301      	movs	r3, #1
 80100a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100aa:	e7b5      	b.n	8010018 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80100ac:	4b17      	ldr	r3, [pc, #92]	; (801010c <xTaskIncrementTick+0x168>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100b2:	4915      	ldr	r1, [pc, #84]	; (8010108 <xTaskIncrementTick+0x164>)
 80100b4:	4613      	mov	r3, r2
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	4413      	add	r3, r2
 80100ba:	009b      	lsls	r3, r3, #2
 80100bc:	440b      	add	r3, r1
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d901      	bls.n	80100c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80100c8:	4b11      	ldr	r3, [pc, #68]	; (8010110 <xTaskIncrementTick+0x16c>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d007      	beq.n	80100e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80100d0:	2301      	movs	r3, #1
 80100d2:	617b      	str	r3, [r7, #20]
 80100d4:	e004      	b.n	80100e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80100d6:	4b0f      	ldr	r3, [pc, #60]	; (8010114 <xTaskIncrementTick+0x170>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3301      	adds	r3, #1
 80100dc:	4a0d      	ldr	r2, [pc, #52]	; (8010114 <xTaskIncrementTick+0x170>)
 80100de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80100e0:	697b      	ldr	r3, [r7, #20]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3718      	adds	r7, #24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	20000ddc 	.word	0x20000ddc
 80100f0:	20000db8 	.word	0x20000db8
 80100f4:	20000d6c 	.word	0x20000d6c
 80100f8:	20000d70 	.word	0x20000d70
 80100fc:	20000dcc 	.word	0x20000dcc
 8010100:	20000dd4 	.word	0x20000dd4
 8010104:	20000dbc 	.word	0x20000dbc
 8010108:	200008e4 	.word	0x200008e4
 801010c:	200008e0 	.word	0x200008e0
 8010110:	20000dc8 	.word	0x20000dc8
 8010114:	20000dc4 	.word	0x20000dc4

08010118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010118:	b480      	push	{r7}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801011e:	4b28      	ldr	r3, [pc, #160]	; (80101c0 <vTaskSwitchContext+0xa8>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d003      	beq.n	801012e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010126:	4b27      	ldr	r3, [pc, #156]	; (80101c4 <vTaskSwitchContext+0xac>)
 8010128:	2201      	movs	r2, #1
 801012a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801012c:	e041      	b.n	80101b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801012e:	4b25      	ldr	r3, [pc, #148]	; (80101c4 <vTaskSwitchContext+0xac>)
 8010130:	2200      	movs	r2, #0
 8010132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010134:	4b24      	ldr	r3, [pc, #144]	; (80101c8 <vTaskSwitchContext+0xb0>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	60fb      	str	r3, [r7, #12]
 801013a:	e010      	b.n	801015e <vTaskSwitchContext+0x46>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d10a      	bne.n	8010158 <vTaskSwitchContext+0x40>
	__asm volatile
 8010142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010146:	f383 8811 	msr	BASEPRI, r3
 801014a:	f3bf 8f6f 	isb	sy
 801014e:	f3bf 8f4f 	dsb	sy
 8010152:	607b      	str	r3, [r7, #4]
}
 8010154:	bf00      	nop
 8010156:	e7fe      	b.n	8010156 <vTaskSwitchContext+0x3e>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	3b01      	subs	r3, #1
 801015c:	60fb      	str	r3, [r7, #12]
 801015e:	491b      	ldr	r1, [pc, #108]	; (80101cc <vTaskSwitchContext+0xb4>)
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	4613      	mov	r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	440b      	add	r3, r1
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d0e4      	beq.n	801013c <vTaskSwitchContext+0x24>
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	4613      	mov	r3, r2
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	4413      	add	r3, r2
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	4a13      	ldr	r2, [pc, #76]	; (80101cc <vTaskSwitchContext+0xb4>)
 801017e:	4413      	add	r3, r2
 8010180:	60bb      	str	r3, [r7, #8]
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	605a      	str	r2, [r3, #4]
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	685a      	ldr	r2, [r3, #4]
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	3308      	adds	r3, #8
 8010194:	429a      	cmp	r2, r3
 8010196:	d104      	bne.n	80101a2 <vTaskSwitchContext+0x8a>
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	685a      	ldr	r2, [r3, #4]
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	605a      	str	r2, [r3, #4]
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	4a09      	ldr	r2, [pc, #36]	; (80101d0 <vTaskSwitchContext+0xb8>)
 80101aa:	6013      	str	r3, [r2, #0]
 80101ac:	4a06      	ldr	r2, [pc, #24]	; (80101c8 <vTaskSwitchContext+0xb0>)
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6013      	str	r3, [r2, #0]
}
 80101b2:	bf00      	nop
 80101b4:	3714      	adds	r7, #20
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	20000ddc 	.word	0x20000ddc
 80101c4:	20000dc8 	.word	0x20000dc8
 80101c8:	20000dbc 	.word	0x20000dbc
 80101cc:	200008e4 	.word	0x200008e4
 80101d0:	200008e0 	.word	0x200008e0

080101d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b084      	sub	sp, #16
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10a      	bne.n	80101fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	60fb      	str	r3, [r7, #12]
}
 80101f6:	bf00      	nop
 80101f8:	e7fe      	b.n	80101f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80101fa:	4b07      	ldr	r3, [pc, #28]	; (8010218 <vTaskPlaceOnEventList+0x44>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	3318      	adds	r3, #24
 8010200:	4619      	mov	r1, r3
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7fe fad5 	bl	800e7b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010208:	2101      	movs	r1, #1
 801020a:	6838      	ldr	r0, [r7, #0]
 801020c:	f000 fc30 	bl	8010a70 <prvAddCurrentTaskToDelayedList>
}
 8010210:	bf00      	nop
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	200008e0 	.word	0x200008e0

0801021c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b086      	sub	sp, #24
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d10a      	bne.n	8010244 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801022e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010232:	f383 8811 	msr	BASEPRI, r3
 8010236:	f3bf 8f6f 	isb	sy
 801023a:	f3bf 8f4f 	dsb	sy
 801023e:	617b      	str	r3, [r7, #20]
}
 8010240:	bf00      	nop
 8010242:	e7fe      	b.n	8010242 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010244:	4b11      	ldr	r3, [pc, #68]	; (801028c <vTaskPlaceOnUnorderedEventList+0x70>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10a      	bne.n	8010262 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801024c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010250:	f383 8811 	msr	BASEPRI, r3
 8010254:	f3bf 8f6f 	isb	sy
 8010258:	f3bf 8f4f 	dsb	sy
 801025c:	613b      	str	r3, [r7, #16]
}
 801025e:	bf00      	nop
 8010260:	e7fe      	b.n	8010260 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010262:	4b0b      	ldr	r3, [pc, #44]	; (8010290 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	68ba      	ldr	r2, [r7, #8]
 8010268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801026c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801026e:	4b08      	ldr	r3, [pc, #32]	; (8010290 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3318      	adds	r3, #24
 8010274:	4619      	mov	r1, r3
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f7fe fa77 	bl	800e76a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801027c:	2101      	movs	r1, #1
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f000 fbf6 	bl	8010a70 <prvAddCurrentTaskToDelayedList>
}
 8010284:	bf00      	nop
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	20000ddc 	.word	0x20000ddc
 8010290:	200008e0 	.word	0x200008e0

08010294 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010294:	b580      	push	{r7, lr}
 8010296:	b086      	sub	sp, #24
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d10a      	bne.n	80102bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80102a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102aa:	f383 8811 	msr	BASEPRI, r3
 80102ae:	f3bf 8f6f 	isb	sy
 80102b2:	f3bf 8f4f 	dsb	sy
 80102b6:	617b      	str	r3, [r7, #20]
}
 80102b8:	bf00      	nop
 80102ba:	e7fe      	b.n	80102ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102bc:	4b0a      	ldr	r3, [pc, #40]	; (80102e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3318      	adds	r3, #24
 80102c2:	4619      	mov	r1, r3
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f7fe fa50 	bl	800e76a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d002      	beq.n	80102d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80102d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	68b8      	ldr	r0, [r7, #8]
 80102da:	f000 fbc9 	bl	8010a70 <prvAddCurrentTaskToDelayedList>
	}
 80102de:	bf00      	nop
 80102e0:	3718      	adds	r7, #24
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	200008e0 	.word	0x200008e0

080102ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d10a      	bne.n	8010318 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	f383 8811 	msr	BASEPRI, r3
 801030a:	f3bf 8f6f 	isb	sy
 801030e:	f3bf 8f4f 	dsb	sy
 8010312:	60fb      	str	r3, [r7, #12]
}
 8010314:	bf00      	nop
 8010316:	e7fe      	b.n	8010316 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	3318      	adds	r3, #24
 801031c:	4618      	mov	r0, r3
 801031e:	f7fe fa81 	bl	800e824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010322:	4b1e      	ldr	r3, [pc, #120]	; (801039c <xTaskRemoveFromEventList+0xb0>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d11d      	bne.n	8010366 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	3304      	adds	r3, #4
 801032e:	4618      	mov	r0, r3
 8010330:	f7fe fa78 	bl	800e824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010334:	693b      	ldr	r3, [r7, #16]
 8010336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010338:	4b19      	ldr	r3, [pc, #100]	; (80103a0 <xTaskRemoveFromEventList+0xb4>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	429a      	cmp	r2, r3
 801033e:	d903      	bls.n	8010348 <xTaskRemoveFromEventList+0x5c>
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010344:	4a16      	ldr	r2, [pc, #88]	; (80103a0 <xTaskRemoveFromEventList+0xb4>)
 8010346:	6013      	str	r3, [r2, #0]
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034c:	4613      	mov	r3, r2
 801034e:	009b      	lsls	r3, r3, #2
 8010350:	4413      	add	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	4a13      	ldr	r2, [pc, #76]	; (80103a4 <xTaskRemoveFromEventList+0xb8>)
 8010356:	441a      	add	r2, r3
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	3304      	adds	r3, #4
 801035c:	4619      	mov	r1, r3
 801035e:	4610      	mov	r0, r2
 8010360:	f7fe fa03 	bl	800e76a <vListInsertEnd>
 8010364:	e005      	b.n	8010372 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	3318      	adds	r3, #24
 801036a:	4619      	mov	r1, r3
 801036c:	480e      	ldr	r0, [pc, #56]	; (80103a8 <xTaskRemoveFromEventList+0xbc>)
 801036e:	f7fe f9fc 	bl	800e76a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010376:	4b0d      	ldr	r3, [pc, #52]	; (80103ac <xTaskRemoveFromEventList+0xc0>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037c:	429a      	cmp	r2, r3
 801037e:	d905      	bls.n	801038c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010380:	2301      	movs	r3, #1
 8010382:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010384:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <xTaskRemoveFromEventList+0xc4>)
 8010386:	2201      	movs	r2, #1
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	e001      	b.n	8010390 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801038c:	2300      	movs	r3, #0
 801038e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010390:	697b      	ldr	r3, [r7, #20]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	20000ddc 	.word	0x20000ddc
 80103a0:	20000dbc 	.word	0x20000dbc
 80103a4:	200008e4 	.word	0x200008e4
 80103a8:	20000d74 	.word	0x20000d74
 80103ac:	200008e0 	.word	0x200008e0
 80103b0:	20000dc8 	.word	0x20000dc8

080103b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b086      	sub	sp, #24
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80103be:	4b29      	ldr	r3, [pc, #164]	; (8010464 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d10a      	bne.n	80103dc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80103c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ca:	f383 8811 	msr	BASEPRI, r3
 80103ce:	f3bf 8f6f 	isb	sy
 80103d2:	f3bf 8f4f 	dsb	sy
 80103d6:	613b      	str	r3, [r7, #16]
}
 80103d8:	bf00      	nop
 80103da:	e7fe      	b.n	80103da <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d10a      	bne.n	8010408 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	60fb      	str	r3, [r7, #12]
}
 8010404:	bf00      	nop
 8010406:	e7fe      	b.n	8010406 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7fe fa0b 	bl	800e824 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	3304      	adds	r3, #4
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe fa06 	bl	800e824 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801041c:	4b12      	ldr	r3, [pc, #72]	; (8010468 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	429a      	cmp	r2, r3
 8010422:	d903      	bls.n	801042c <vTaskRemoveFromUnorderedEventList+0x78>
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010428:	4a0f      	ldr	r2, [pc, #60]	; (8010468 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801042a:	6013      	str	r3, [r2, #0]
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010430:	4613      	mov	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4413      	add	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4a0c      	ldr	r2, [pc, #48]	; (801046c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801043a:	441a      	add	r2, r3
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	3304      	adds	r3, #4
 8010440:	4619      	mov	r1, r3
 8010442:	4610      	mov	r0, r2
 8010444:	f7fe f991 	bl	800e76a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044c:	4b08      	ldr	r3, [pc, #32]	; (8010470 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010452:	429a      	cmp	r2, r3
 8010454:	d902      	bls.n	801045c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8010456:	4b07      	ldr	r3, [pc, #28]	; (8010474 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8010458:	2201      	movs	r2, #1
 801045a:	601a      	str	r2, [r3, #0]
	}
}
 801045c:	bf00      	nop
 801045e:	3718      	adds	r7, #24
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	20000ddc 	.word	0x20000ddc
 8010468:	20000dbc 	.word	0x20000dbc
 801046c:	200008e4 	.word	0x200008e4
 8010470:	200008e0 	.word	0x200008e0
 8010474:	20000dc8 	.word	0x20000dc8

08010478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010480:	4b06      	ldr	r3, [pc, #24]	; (801049c <vTaskInternalSetTimeOutState+0x24>)
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010488:	4b05      	ldr	r3, [pc, #20]	; (80104a0 <vTaskInternalSetTimeOutState+0x28>)
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	605a      	str	r2, [r3, #4]
}
 8010490:	bf00      	nop
 8010492:	370c      	adds	r7, #12
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr
 801049c:	20000dcc 	.word	0x20000dcc
 80104a0:	20000db8 	.word	0x20000db8

080104a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10a      	bne.n	80104ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80104b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b8:	f383 8811 	msr	BASEPRI, r3
 80104bc:	f3bf 8f6f 	isb	sy
 80104c0:	f3bf 8f4f 	dsb	sy
 80104c4:	613b      	str	r3, [r7, #16]
}
 80104c6:	bf00      	nop
 80104c8:	e7fe      	b.n	80104c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d10a      	bne.n	80104e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80104d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d4:	f383 8811 	msr	BASEPRI, r3
 80104d8:	f3bf 8f6f 	isb	sy
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	60fb      	str	r3, [r7, #12]
}
 80104e2:	bf00      	nop
 80104e4:	e7fe      	b.n	80104e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80104e6:	f000 ffb5 	bl	8011454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80104ea:	4b1d      	ldr	r3, [pc, #116]	; (8010560 <xTaskCheckForTimeOut+0xbc>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	69ba      	ldr	r2, [r7, #24]
 80104f6:	1ad3      	subs	r3, r2, r3
 80104f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010502:	d102      	bne.n	801050a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010504:	2300      	movs	r3, #0
 8010506:	61fb      	str	r3, [r7, #28]
 8010508:	e023      	b.n	8010552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	4b15      	ldr	r3, [pc, #84]	; (8010564 <xTaskCheckForTimeOut+0xc0>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	429a      	cmp	r2, r3
 8010514:	d007      	beq.n	8010526 <xTaskCheckForTimeOut+0x82>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	69ba      	ldr	r2, [r7, #24]
 801051c:	429a      	cmp	r2, r3
 801051e:	d302      	bcc.n	8010526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010520:	2301      	movs	r3, #1
 8010522:	61fb      	str	r3, [r7, #28]
 8010524:	e015      	b.n	8010552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	697a      	ldr	r2, [r7, #20]
 801052c:	429a      	cmp	r2, r3
 801052e:	d20b      	bcs.n	8010548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	1ad2      	subs	r2, r2, r3
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7ff ff9b 	bl	8010478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010542:	2300      	movs	r3, #0
 8010544:	61fb      	str	r3, [r7, #28]
 8010546:	e004      	b.n	8010552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	2200      	movs	r2, #0
 801054c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801054e:	2301      	movs	r3, #1
 8010550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010552:	f000 ffaf 	bl	80114b4 <vPortExitCritical>

	return xReturn;
 8010556:	69fb      	ldr	r3, [r7, #28]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3720      	adds	r7, #32
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}
 8010560:	20000db8 	.word	0x20000db8
 8010564:	20000dcc 	.word	0x20000dcc

08010568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010568:	b480      	push	{r7}
 801056a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801056c:	4b03      	ldr	r3, [pc, #12]	; (801057c <vTaskMissedYield+0x14>)
 801056e:	2201      	movs	r2, #1
 8010570:	601a      	str	r2, [r3, #0]
}
 8010572:	bf00      	nop
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr
 801057c:	20000dc8 	.word	0x20000dc8

08010580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010588:	f000 f852 	bl	8010630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801058c:	4b06      	ldr	r3, [pc, #24]	; (80105a8 <prvIdleTask+0x28>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d9f9      	bls.n	8010588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010594:	4b05      	ldr	r3, [pc, #20]	; (80105ac <prvIdleTask+0x2c>)
 8010596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801059a:	601a      	str	r2, [r3, #0]
 801059c:	f3bf 8f4f 	dsb	sy
 80105a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105a4:	e7f0      	b.n	8010588 <prvIdleTask+0x8>
 80105a6:	bf00      	nop
 80105a8:	200008e4 	.word	0x200008e4
 80105ac:	e000ed04 	.word	0xe000ed04

080105b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105b6:	2300      	movs	r3, #0
 80105b8:	607b      	str	r3, [r7, #4]
 80105ba:	e00c      	b.n	80105d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	4613      	mov	r3, r2
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	4413      	add	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	4a12      	ldr	r2, [pc, #72]	; (8010610 <prvInitialiseTaskLists+0x60>)
 80105c8:	4413      	add	r3, r2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fe f8a0 	bl	800e710 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	3301      	adds	r3, #1
 80105d4:	607b      	str	r3, [r7, #4]
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b37      	cmp	r3, #55	; 0x37
 80105da:	d9ef      	bls.n	80105bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80105dc:	480d      	ldr	r0, [pc, #52]	; (8010614 <prvInitialiseTaskLists+0x64>)
 80105de:	f7fe f897 	bl	800e710 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80105e2:	480d      	ldr	r0, [pc, #52]	; (8010618 <prvInitialiseTaskLists+0x68>)
 80105e4:	f7fe f894 	bl	800e710 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80105e8:	480c      	ldr	r0, [pc, #48]	; (801061c <prvInitialiseTaskLists+0x6c>)
 80105ea:	f7fe f891 	bl	800e710 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80105ee:	480c      	ldr	r0, [pc, #48]	; (8010620 <prvInitialiseTaskLists+0x70>)
 80105f0:	f7fe f88e 	bl	800e710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80105f4:	480b      	ldr	r0, [pc, #44]	; (8010624 <prvInitialiseTaskLists+0x74>)
 80105f6:	f7fe f88b 	bl	800e710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80105fa:	4b0b      	ldr	r3, [pc, #44]	; (8010628 <prvInitialiseTaskLists+0x78>)
 80105fc:	4a05      	ldr	r2, [pc, #20]	; (8010614 <prvInitialiseTaskLists+0x64>)
 80105fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010600:	4b0a      	ldr	r3, [pc, #40]	; (801062c <prvInitialiseTaskLists+0x7c>)
 8010602:	4a05      	ldr	r2, [pc, #20]	; (8010618 <prvInitialiseTaskLists+0x68>)
 8010604:	601a      	str	r2, [r3, #0]
}
 8010606:	bf00      	nop
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	200008e4 	.word	0x200008e4
 8010614:	20000d44 	.word	0x20000d44
 8010618:	20000d58 	.word	0x20000d58
 801061c:	20000d74 	.word	0x20000d74
 8010620:	20000d88 	.word	0x20000d88
 8010624:	20000da0 	.word	0x20000da0
 8010628:	20000d6c 	.word	0x20000d6c
 801062c:	20000d70 	.word	0x20000d70

08010630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010636:	e019      	b.n	801066c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010638:	f000 ff0c 	bl	8011454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801063c:	4b10      	ldr	r3, [pc, #64]	; (8010680 <prvCheckTasksWaitingTermination+0x50>)
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	3304      	adds	r3, #4
 8010648:	4618      	mov	r0, r3
 801064a:	f7fe f8eb 	bl	800e824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801064e:	4b0d      	ldr	r3, [pc, #52]	; (8010684 <prvCheckTasksWaitingTermination+0x54>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	3b01      	subs	r3, #1
 8010654:	4a0b      	ldr	r2, [pc, #44]	; (8010684 <prvCheckTasksWaitingTermination+0x54>)
 8010656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010658:	4b0b      	ldr	r3, [pc, #44]	; (8010688 <prvCheckTasksWaitingTermination+0x58>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	3b01      	subs	r3, #1
 801065e:	4a0a      	ldr	r2, [pc, #40]	; (8010688 <prvCheckTasksWaitingTermination+0x58>)
 8010660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010662:	f000 ff27 	bl	80114b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 f810 	bl	801068c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801066c:	4b06      	ldr	r3, [pc, #24]	; (8010688 <prvCheckTasksWaitingTermination+0x58>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1e1      	bne.n	8010638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010674:	bf00      	nop
 8010676:	bf00      	nop
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	20000d88 	.word	0x20000d88
 8010684:	20000db4 	.word	0x20000db4
 8010688:	20000d9c 	.word	0x20000d9c

0801068c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801069a:	2b00      	cmp	r3, #0
 801069c:	d108      	bne.n	80106b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a2:	4618      	mov	r0, r3
 80106a4:	f001 f8c4 	bl	8011830 <vPortFree>
				vPortFree( pxTCB );
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f001 f8c1 	bl	8011830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106ae:	e018      	b.n	80106e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80106b6:	2b01      	cmp	r3, #1
 80106b8:	d103      	bne.n	80106c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f001 f8b8 	bl	8011830 <vPortFree>
	}
 80106c0:	e00f      	b.n	80106e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80106c8:	2b02      	cmp	r3, #2
 80106ca:	d00a      	beq.n	80106e2 <prvDeleteTCB+0x56>
	__asm volatile
 80106cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d0:	f383 8811 	msr	BASEPRI, r3
 80106d4:	f3bf 8f6f 	isb	sy
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	60fb      	str	r3, [r7, #12]
}
 80106de:	bf00      	nop
 80106e0:	e7fe      	b.n	80106e0 <prvDeleteTCB+0x54>
	}
 80106e2:	bf00      	nop
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
	...

080106ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80106ec:	b480      	push	{r7}
 80106ee:	b083      	sub	sp, #12
 80106f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106f2:	4b0c      	ldr	r3, [pc, #48]	; (8010724 <prvResetNextTaskUnblockTime+0x38>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d104      	bne.n	8010706 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80106fc:	4b0a      	ldr	r3, [pc, #40]	; (8010728 <prvResetNextTaskUnblockTime+0x3c>)
 80106fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010702:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010704:	e008      	b.n	8010718 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010706:	4b07      	ldr	r3, [pc, #28]	; (8010724 <prvResetNextTaskUnblockTime+0x38>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	4a04      	ldr	r2, [pc, #16]	; (8010728 <prvResetNextTaskUnblockTime+0x3c>)
 8010716:	6013      	str	r3, [r2, #0]
}
 8010718:	bf00      	nop
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr
 8010724:	20000d6c 	.word	0x20000d6c
 8010728:	20000dd4 	.word	0x20000dd4

0801072c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801072c:	b480      	push	{r7}
 801072e:	b083      	sub	sp, #12
 8010730:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010732:	4b0b      	ldr	r3, [pc, #44]	; (8010760 <xTaskGetSchedulerState+0x34>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d102      	bne.n	8010740 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801073a:	2301      	movs	r3, #1
 801073c:	607b      	str	r3, [r7, #4]
 801073e:	e008      	b.n	8010752 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010740:	4b08      	ldr	r3, [pc, #32]	; (8010764 <xTaskGetSchedulerState+0x38>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d102      	bne.n	801074e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010748:	2302      	movs	r3, #2
 801074a:	607b      	str	r3, [r7, #4]
 801074c:	e001      	b.n	8010752 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801074e:	2300      	movs	r3, #0
 8010750:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010752:	687b      	ldr	r3, [r7, #4]
	}
 8010754:	4618      	mov	r0, r3
 8010756:	370c      	adds	r7, #12
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr
 8010760:	20000dc0 	.word	0x20000dc0
 8010764:	20000ddc 	.word	0x20000ddc

08010768 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010774:	2300      	movs	r3, #0
 8010776:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d051      	beq.n	8010822 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010782:	4b2a      	ldr	r3, [pc, #168]	; (801082c <xTaskPriorityInherit+0xc4>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010788:	429a      	cmp	r2, r3
 801078a:	d241      	bcs.n	8010810 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	699b      	ldr	r3, [r3, #24]
 8010790:	2b00      	cmp	r3, #0
 8010792:	db06      	blt.n	80107a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010794:	4b25      	ldr	r3, [pc, #148]	; (801082c <xTaskPriorityInherit+0xc4>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801079a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	6959      	ldr	r1, [r3, #20]
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107aa:	4613      	mov	r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	4413      	add	r3, r2
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	4a1f      	ldr	r2, [pc, #124]	; (8010830 <xTaskPriorityInherit+0xc8>)
 80107b4:	4413      	add	r3, r2
 80107b6:	4299      	cmp	r1, r3
 80107b8:	d122      	bne.n	8010800 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	3304      	adds	r3, #4
 80107be:	4618      	mov	r0, r3
 80107c0:	f7fe f830 	bl	800e824 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80107c4:	4b19      	ldr	r3, [pc, #100]	; (801082c <xTaskPriorityInherit+0xc4>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107d2:	4b18      	ldr	r3, [pc, #96]	; (8010834 <xTaskPriorityInherit+0xcc>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d903      	bls.n	80107e2 <xTaskPriorityInherit+0x7a>
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107de:	4a15      	ldr	r2, [pc, #84]	; (8010834 <xTaskPriorityInherit+0xcc>)
 80107e0:	6013      	str	r3, [r2, #0]
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107e6:	4613      	mov	r3, r2
 80107e8:	009b      	lsls	r3, r3, #2
 80107ea:	4413      	add	r3, r2
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	4a10      	ldr	r2, [pc, #64]	; (8010830 <xTaskPriorityInherit+0xc8>)
 80107f0:	441a      	add	r2, r3
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	3304      	adds	r3, #4
 80107f6:	4619      	mov	r1, r3
 80107f8:	4610      	mov	r0, r2
 80107fa:	f7fd ffb6 	bl	800e76a <vListInsertEnd>
 80107fe:	e004      	b.n	801080a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010800:	4b0a      	ldr	r3, [pc, #40]	; (801082c <xTaskPriorityInherit+0xc4>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801080a:	2301      	movs	r3, #1
 801080c:	60fb      	str	r3, [r7, #12]
 801080e:	e008      	b.n	8010822 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010814:	4b05      	ldr	r3, [pc, #20]	; (801082c <xTaskPriorityInherit+0xc4>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081a:	429a      	cmp	r2, r3
 801081c:	d201      	bcs.n	8010822 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801081e:	2301      	movs	r3, #1
 8010820:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010822:	68fb      	ldr	r3, [r7, #12]
	}
 8010824:	4618      	mov	r0, r3
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	200008e0 	.word	0x200008e0
 8010830:	200008e4 	.word	0x200008e4
 8010834:	20000dbc 	.word	0x20000dbc

08010838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010844:	2300      	movs	r3, #0
 8010846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d056      	beq.n	80108fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801084e:	4b2e      	ldr	r3, [pc, #184]	; (8010908 <xTaskPriorityDisinherit+0xd0>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	693a      	ldr	r2, [r7, #16]
 8010854:	429a      	cmp	r2, r3
 8010856:	d00a      	beq.n	801086e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085c:	f383 8811 	msr	BASEPRI, r3
 8010860:	f3bf 8f6f 	isb	sy
 8010864:	f3bf 8f4f 	dsb	sy
 8010868:	60fb      	str	r3, [r7, #12]
}
 801086a:	bf00      	nop
 801086c:	e7fe      	b.n	801086c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010872:	2b00      	cmp	r3, #0
 8010874:	d10a      	bne.n	801088c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087a:	f383 8811 	msr	BASEPRI, r3
 801087e:	f3bf 8f6f 	isb	sy
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	60bb      	str	r3, [r7, #8]
}
 8010888:	bf00      	nop
 801088a:	e7fe      	b.n	801088a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010890:	1e5a      	subs	r2, r3, #1
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801089e:	429a      	cmp	r2, r3
 80108a0:	d02c      	beq.n	80108fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d128      	bne.n	80108fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	3304      	adds	r3, #4
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fd ffb8 	bl	800e824 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108cc:	4b0f      	ldr	r3, [pc, #60]	; (801090c <xTaskPriorityDisinherit+0xd4>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d903      	bls.n	80108dc <xTaskPriorityDisinherit+0xa4>
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d8:	4a0c      	ldr	r2, [pc, #48]	; (801090c <xTaskPriorityDisinherit+0xd4>)
 80108da:	6013      	str	r3, [r2, #0]
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108e0:	4613      	mov	r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4413      	add	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4a09      	ldr	r2, [pc, #36]	; (8010910 <xTaskPriorityDisinherit+0xd8>)
 80108ea:	441a      	add	r2, r3
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	3304      	adds	r3, #4
 80108f0:	4619      	mov	r1, r3
 80108f2:	4610      	mov	r0, r2
 80108f4:	f7fd ff39 	bl	800e76a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80108f8:	2301      	movs	r3, #1
 80108fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80108fc:	697b      	ldr	r3, [r7, #20]
	}
 80108fe:	4618      	mov	r0, r3
 8010900:	3718      	adds	r7, #24
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	200008e0 	.word	0x200008e0
 801090c:	20000dbc 	.word	0x20000dbc
 8010910:	200008e4 	.word	0x200008e4

08010914 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010914:	b580      	push	{r7, lr}
 8010916:	b088      	sub	sp, #32
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010922:	2301      	movs	r3, #1
 8010924:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d06a      	beq.n	8010a02 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010930:	2b00      	cmp	r3, #0
 8010932:	d10a      	bne.n	801094a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	60fb      	str	r3, [r7, #12]
}
 8010946:	bf00      	nop
 8010948:	e7fe      	b.n	8010948 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	429a      	cmp	r2, r3
 8010952:	d902      	bls.n	801095a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	61fb      	str	r3, [r7, #28]
 8010958:	e002      	b.n	8010960 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801095e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010964:	69fa      	ldr	r2, [r7, #28]
 8010966:	429a      	cmp	r2, r3
 8010968:	d04b      	beq.n	8010a02 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	429a      	cmp	r2, r3
 8010972:	d146      	bne.n	8010a02 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010974:	4b25      	ldr	r3, [pc, #148]	; (8010a0c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	69ba      	ldr	r2, [r7, #24]
 801097a:	429a      	cmp	r2, r3
 801097c:	d10a      	bne.n	8010994 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	60bb      	str	r3, [r7, #8]
}
 8010990:	bf00      	nop
 8010992:	e7fe      	b.n	8010992 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010994:	69bb      	ldr	r3, [r7, #24]
 8010996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010998:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	69fa      	ldr	r2, [r7, #28]
 801099e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	699b      	ldr	r3, [r3, #24]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	db04      	blt.n	80109b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80109ae:	69bb      	ldr	r3, [r7, #24]
 80109b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	6959      	ldr	r1, [r3, #20]
 80109b6:	693a      	ldr	r2, [r7, #16]
 80109b8:	4613      	mov	r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	4413      	add	r3, r2
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	4a13      	ldr	r2, [pc, #76]	; (8010a10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80109c2:	4413      	add	r3, r2
 80109c4:	4299      	cmp	r1, r3
 80109c6:	d11c      	bne.n	8010a02 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	3304      	adds	r3, #4
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fd ff29 	bl	800e824 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109d6:	4b0f      	ldr	r3, [pc, #60]	; (8010a14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d903      	bls.n	80109e6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80109de:	69bb      	ldr	r3, [r7, #24]
 80109e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109e2:	4a0c      	ldr	r2, [pc, #48]	; (8010a14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80109e4:	6013      	str	r3, [r2, #0]
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109ea:	4613      	mov	r3, r2
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	009b      	lsls	r3, r3, #2
 80109f2:	4a07      	ldr	r2, [pc, #28]	; (8010a10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80109f4:	441a      	add	r2, r3
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	3304      	adds	r3, #4
 80109fa:	4619      	mov	r1, r3
 80109fc:	4610      	mov	r0, r2
 80109fe:	f7fd feb4 	bl	800e76a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a02:	bf00      	nop
 8010a04:	3720      	adds	r7, #32
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	200008e0 	.word	0x200008e0
 8010a10:	200008e4 	.word	0x200008e4
 8010a14:	20000dbc 	.word	0x20000dbc

08010a18 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b083      	sub	sp, #12
 8010a1c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8010a1e:	4b09      	ldr	r3, [pc, #36]	; (8010a44 <uxTaskResetEventItemValue+0x2c>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	699b      	ldr	r3, [r3, #24]
 8010a24:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a26:	4b07      	ldr	r3, [pc, #28]	; (8010a44 <uxTaskResetEventItemValue+0x2c>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a2c:	4b05      	ldr	r3, [pc, #20]	; (8010a44 <uxTaskResetEventItemValue+0x2c>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010a34:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8010a36:	687b      	ldr	r3, [r7, #4]
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr
 8010a44:	200008e0 	.word	0x200008e0

08010a48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010a48:	b480      	push	{r7}
 8010a4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010a4c:	4b07      	ldr	r3, [pc, #28]	; (8010a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d004      	beq.n	8010a5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010a54:	4b05      	ldr	r3, [pc, #20]	; (8010a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a5a:	3201      	adds	r2, #1
 8010a5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010a5e:	4b03      	ldr	r3, [pc, #12]	; (8010a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8010a60:	681b      	ldr	r3, [r3, #0]
	}
 8010a62:	4618      	mov	r0, r3
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr
 8010a6c:	200008e0 	.word	0x200008e0

08010a70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a7a:	4b21      	ldr	r3, [pc, #132]	; (8010b00 <prvAddCurrentTaskToDelayedList+0x90>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a80:	4b20      	ldr	r3, [pc, #128]	; (8010b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	3304      	adds	r3, #4
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fd fecc 	bl	800e824 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a92:	d10a      	bne.n	8010aaa <prvAddCurrentTaskToDelayedList+0x3a>
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d007      	beq.n	8010aaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a9a:	4b1a      	ldr	r3, [pc, #104]	; (8010b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	3304      	adds	r3, #4
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	4819      	ldr	r0, [pc, #100]	; (8010b08 <prvAddCurrentTaskToDelayedList+0x98>)
 8010aa4:	f7fd fe61 	bl	800e76a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010aa8:	e026      	b.n	8010af8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010aaa:	68fa      	ldr	r2, [r7, #12]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	4413      	add	r3, r2
 8010ab0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010ab2:	4b14      	ldr	r3, [pc, #80]	; (8010b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68ba      	ldr	r2, [r7, #8]
 8010ab8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d209      	bcs.n	8010ad6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ac2:	4b12      	ldr	r3, [pc, #72]	; (8010b0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	4b0f      	ldr	r3, [pc, #60]	; (8010b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	3304      	adds	r3, #4
 8010acc:	4619      	mov	r1, r3
 8010ace:	4610      	mov	r0, r2
 8010ad0:	f7fd fe6f 	bl	800e7b2 <vListInsert>
}
 8010ad4:	e010      	b.n	8010af8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ad6:	4b0e      	ldr	r3, [pc, #56]	; (8010b10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	4b0a      	ldr	r3, [pc, #40]	; (8010b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	3304      	adds	r3, #4
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	f7fd fe65 	bl	800e7b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ae8:	4b0a      	ldr	r3, [pc, #40]	; (8010b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68ba      	ldr	r2, [r7, #8]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d202      	bcs.n	8010af8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010af2:	4a08      	ldr	r2, [pc, #32]	; (8010b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	6013      	str	r3, [r2, #0]
}
 8010af8:	bf00      	nop
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	20000db8 	.word	0x20000db8
 8010b04:	200008e0 	.word	0x200008e0
 8010b08:	20000da0 	.word	0x20000da0
 8010b0c:	20000d70 	.word	0x20000d70
 8010b10:	20000d6c 	.word	0x20000d6c
 8010b14:	20000dd4 	.word	0x20000dd4

08010b18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b08a      	sub	sp, #40	; 0x28
 8010b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010b22:	f000 fb07 	bl	8011134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010b26:	4b1c      	ldr	r3, [pc, #112]	; (8010b98 <xTimerCreateTimerTask+0x80>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d021      	beq.n	8010b72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b32:	2300      	movs	r3, #0
 8010b34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b36:	1d3a      	adds	r2, r7, #4
 8010b38:	f107 0108 	add.w	r1, r7, #8
 8010b3c:	f107 030c 	add.w	r3, r7, #12
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fd fbdd 	bl	800e300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b46:	6879      	ldr	r1, [r7, #4]
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	9202      	str	r2, [sp, #8]
 8010b4e:	9301      	str	r3, [sp, #4]
 8010b50:	2302      	movs	r3, #2
 8010b52:	9300      	str	r3, [sp, #0]
 8010b54:	2300      	movs	r3, #0
 8010b56:	460a      	mov	r2, r1
 8010b58:	4910      	ldr	r1, [pc, #64]	; (8010b9c <xTimerCreateTimerTask+0x84>)
 8010b5a:	4811      	ldr	r0, [pc, #68]	; (8010ba0 <xTimerCreateTimerTask+0x88>)
 8010b5c:	f7fe fe9a 	bl	800f894 <xTaskCreateStatic>
 8010b60:	4603      	mov	r3, r0
 8010b62:	4a10      	ldr	r2, [pc, #64]	; (8010ba4 <xTimerCreateTimerTask+0x8c>)
 8010b64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b66:	4b0f      	ldr	r3, [pc, #60]	; (8010ba4 <xTimerCreateTimerTask+0x8c>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d001      	beq.n	8010b72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d10a      	bne.n	8010b8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	613b      	str	r3, [r7, #16]
}
 8010b8a:	bf00      	nop
 8010b8c:	e7fe      	b.n	8010b8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010b8e:	697b      	ldr	r3, [r7, #20]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3718      	adds	r7, #24
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	20000e10 	.word	0x20000e10
 8010b9c:	08013eb4 	.word	0x08013eb4
 8010ba0:	08010cdd 	.word	0x08010cdd
 8010ba4:	20000e14 	.word	0x20000e14

08010ba8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b08a      	sub	sp, #40	; 0x28
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
 8010bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d10a      	bne.n	8010bd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	623b      	str	r3, [r7, #32]
}
 8010bd2:	bf00      	nop
 8010bd4:	e7fe      	b.n	8010bd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010bd6:	4b1a      	ldr	r3, [pc, #104]	; (8010c40 <xTimerGenericCommand+0x98>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d02a      	beq.n	8010c34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	2b05      	cmp	r3, #5
 8010bee:	dc18      	bgt.n	8010c22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010bf0:	f7ff fd9c 	bl	801072c <xTaskGetSchedulerState>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b02      	cmp	r3, #2
 8010bf8:	d109      	bne.n	8010c0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010bfa:	4b11      	ldr	r3, [pc, #68]	; (8010c40 <xTimerGenericCommand+0x98>)
 8010bfc:	6818      	ldr	r0, [r3, #0]
 8010bfe:	f107 0110 	add.w	r1, r7, #16
 8010c02:	2300      	movs	r3, #0
 8010c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c06:	f7fd ffdf 	bl	800ebc8 <xQueueGenericSend>
 8010c0a:	6278      	str	r0, [r7, #36]	; 0x24
 8010c0c:	e012      	b.n	8010c34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c0e:	4b0c      	ldr	r3, [pc, #48]	; (8010c40 <xTimerGenericCommand+0x98>)
 8010c10:	6818      	ldr	r0, [r3, #0]
 8010c12:	f107 0110 	add.w	r1, r7, #16
 8010c16:	2300      	movs	r3, #0
 8010c18:	2200      	movs	r2, #0
 8010c1a:	f7fd ffd5 	bl	800ebc8 <xQueueGenericSend>
 8010c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8010c20:	e008      	b.n	8010c34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c22:	4b07      	ldr	r3, [pc, #28]	; (8010c40 <xTimerGenericCommand+0x98>)
 8010c24:	6818      	ldr	r0, [r3, #0]
 8010c26:	f107 0110 	add.w	r1, r7, #16
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	683a      	ldr	r2, [r7, #0]
 8010c2e:	f7fe f8c9 	bl	800edc4 <xQueueGenericSendFromISR>
 8010c32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3728      	adds	r7, #40	; 0x28
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	20000e10 	.word	0x20000e10

08010c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b088      	sub	sp, #32
 8010c48:	af02      	add	r7, sp, #8
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c4e:	4b22      	ldr	r3, [pc, #136]	; (8010cd8 <prvProcessExpiredTimer+0x94>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	3304      	adds	r3, #4
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7fd fde1 	bl	800e824 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c68:	f003 0304 	and.w	r3, r3, #4
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d022      	beq.n	8010cb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	699a      	ldr	r2, [r3, #24]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	18d1      	adds	r1, r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	683a      	ldr	r2, [r7, #0]
 8010c7c:	6978      	ldr	r0, [r7, #20]
 8010c7e:	f000 f8d1 	bl	8010e24 <prvInsertTimerInActiveList>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d01f      	beq.n	8010cc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c88:	2300      	movs	r3, #0
 8010c8a:	9300      	str	r3, [sp, #0]
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	2100      	movs	r1, #0
 8010c92:	6978      	ldr	r0, [r7, #20]
 8010c94:	f7ff ff88 	bl	8010ba8 <xTimerGenericCommand>
 8010c98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d113      	bne.n	8010cc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca4:	f383 8811 	msr	BASEPRI, r3
 8010ca8:	f3bf 8f6f 	isb	sy
 8010cac:	f3bf 8f4f 	dsb	sy
 8010cb0:	60fb      	str	r3, [r7, #12]
}
 8010cb2:	bf00      	nop
 8010cb4:	e7fe      	b.n	8010cb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cbc:	f023 0301 	bic.w	r3, r3, #1
 8010cc0:	b2da      	uxtb	r2, r3
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	6a1b      	ldr	r3, [r3, #32]
 8010ccc:	6978      	ldr	r0, [r7, #20]
 8010cce:	4798      	blx	r3
}
 8010cd0:	bf00      	nop
 8010cd2:	3718      	adds	r7, #24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	20000e08 	.word	0x20000e08

08010cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010ce4:	f107 0308 	add.w	r3, r7, #8
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f000 f857 	bl	8010d9c <prvGetNextExpireTime>
 8010cee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	68f8      	ldr	r0, [r7, #12]
 8010cf6:	f000 f803 	bl	8010d00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010cfa:	f000 f8d5 	bl	8010ea8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010cfe:	e7f1      	b.n	8010ce4 <prvTimerTask+0x8>

08010d00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010d0a:	f7ff f87d 	bl	800fe08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d0e:	f107 0308 	add.w	r3, r7, #8
 8010d12:	4618      	mov	r0, r3
 8010d14:	f000 f866 	bl	8010de4 <prvSampleTimeNow>
 8010d18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d130      	bne.n	8010d82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10a      	bne.n	8010d3c <prvProcessTimerOrBlockTask+0x3c>
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d806      	bhi.n	8010d3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010d2e:	f7ff f879 	bl	800fe24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010d32:	68f9      	ldr	r1, [r7, #12]
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff ff85 	bl	8010c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010d3a:	e024      	b.n	8010d86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d008      	beq.n	8010d54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010d42:	4b13      	ldr	r3, [pc, #76]	; (8010d90 <prvProcessTimerOrBlockTask+0x90>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <prvProcessTimerOrBlockTask+0x50>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e000      	b.n	8010d52 <prvProcessTimerOrBlockTask+0x52>
 8010d50:	2300      	movs	r3, #0
 8010d52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010d54:	4b0f      	ldr	r3, [pc, #60]	; (8010d94 <prvProcessTimerOrBlockTask+0x94>)
 8010d56:	6818      	ldr	r0, [r3, #0]
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	683a      	ldr	r2, [r7, #0]
 8010d60:	4619      	mov	r1, r3
 8010d62:	f7fe fd63 	bl	800f82c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010d66:	f7ff f85d 	bl	800fe24 <xTaskResumeAll>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d10a      	bne.n	8010d86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d70:	4b09      	ldr	r3, [pc, #36]	; (8010d98 <prvProcessTimerOrBlockTask+0x98>)
 8010d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d76:	601a      	str	r2, [r3, #0]
 8010d78:	f3bf 8f4f 	dsb	sy
 8010d7c:	f3bf 8f6f 	isb	sy
}
 8010d80:	e001      	b.n	8010d86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010d82:	f7ff f84f 	bl	800fe24 <xTaskResumeAll>
}
 8010d86:	bf00      	nop
 8010d88:	3710      	adds	r7, #16
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	20000e0c 	.word	0x20000e0c
 8010d94:	20000e10 	.word	0x20000e10
 8010d98:	e000ed04 	.word	0xe000ed04

08010d9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b085      	sub	sp, #20
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010da4:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <prvGetNextExpireTime+0x44>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d101      	bne.n	8010db2 <prvGetNextExpireTime+0x16>
 8010dae:	2201      	movs	r2, #1
 8010db0:	e000      	b.n	8010db4 <prvGetNextExpireTime+0x18>
 8010db2:	2200      	movs	r2, #0
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d105      	bne.n	8010dcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010dc0:	4b07      	ldr	r3, [pc, #28]	; (8010de0 <prvGetNextExpireTime+0x44>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	60fb      	str	r3, [r7, #12]
 8010dca:	e001      	b.n	8010dd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3714      	adds	r7, #20
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	20000e08 	.word	0x20000e08

08010de4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010dec:	f7ff f8b8 	bl	800ff60 <xTaskGetTickCount>
 8010df0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010df2:	4b0b      	ldr	r3, [pc, #44]	; (8010e20 <prvSampleTimeNow+0x3c>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68fa      	ldr	r2, [r7, #12]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d205      	bcs.n	8010e08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010dfc:	f000 f936 	bl	801106c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2201      	movs	r2, #1
 8010e04:	601a      	str	r2, [r3, #0]
 8010e06:	e002      	b.n	8010e0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010e0e:	4a04      	ldr	r2, [pc, #16]	; (8010e20 <prvSampleTimeNow+0x3c>)
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010e14:	68fb      	ldr	r3, [r7, #12]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	20000e18 	.word	0x20000e18

08010e24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	607a      	str	r2, [r7, #4]
 8010e30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010e32:	2300      	movs	r3, #0
 8010e34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	68ba      	ldr	r2, [r7, #8]
 8010e3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d812      	bhi.n	8010e70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	1ad2      	subs	r2, r2, r3
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	699b      	ldr	r3, [r3, #24]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d302      	bcc.n	8010e5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	617b      	str	r3, [r7, #20]
 8010e5c:	e01b      	b.n	8010e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010e5e:	4b10      	ldr	r3, [pc, #64]	; (8010ea0 <prvInsertTimerInActiveList+0x7c>)
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3304      	adds	r3, #4
 8010e66:	4619      	mov	r1, r3
 8010e68:	4610      	mov	r0, r2
 8010e6a:	f7fd fca2 	bl	800e7b2 <vListInsert>
 8010e6e:	e012      	b.n	8010e96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d206      	bcs.n	8010e86 <prvInsertTimerInActiveList+0x62>
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d302      	bcc.n	8010e86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010e80:	2301      	movs	r3, #1
 8010e82:	617b      	str	r3, [r7, #20]
 8010e84:	e007      	b.n	8010e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e86:	4b07      	ldr	r3, [pc, #28]	; (8010ea4 <prvInsertTimerInActiveList+0x80>)
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	3304      	adds	r3, #4
 8010e8e:	4619      	mov	r1, r3
 8010e90:	4610      	mov	r0, r2
 8010e92:	f7fd fc8e 	bl	800e7b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010e96:	697b      	ldr	r3, [r7, #20]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3718      	adds	r7, #24
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	20000e0c 	.word	0x20000e0c
 8010ea4:	20000e08 	.word	0x20000e08

08010ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08e      	sub	sp, #56	; 0x38
 8010eac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010eae:	e0ca      	b.n	8011046 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	da18      	bge.n	8010ee8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010eb6:	1d3b      	adds	r3, r7, #4
 8010eb8:	3304      	adds	r3, #4
 8010eba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d10a      	bne.n	8010ed8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec6:	f383 8811 	msr	BASEPRI, r3
 8010eca:	f3bf 8f6f 	isb	sy
 8010ece:	f3bf 8f4f 	dsb	sy
 8010ed2:	61fb      	str	r3, [r7, #28]
}
 8010ed4:	bf00      	nop
 8010ed6:	e7fe      	b.n	8010ed6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ede:	6850      	ldr	r0, [r2, #4]
 8010ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ee2:	6892      	ldr	r2, [r2, #8]
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f2c0 80aa 	blt.w	8011044 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	695b      	ldr	r3, [r3, #20]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d004      	beq.n	8010f06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efe:	3304      	adds	r3, #4
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7fd fc8f 	bl	800e824 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010f06:	463b      	mov	r3, r7
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7ff ff6b 	bl	8010de4 <prvSampleTimeNow>
 8010f0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2b09      	cmp	r3, #9
 8010f14:	f200 8097 	bhi.w	8011046 <prvProcessReceivedCommands+0x19e>
 8010f18:	a201      	add	r2, pc, #4	; (adr r2, 8010f20 <prvProcessReceivedCommands+0x78>)
 8010f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f1e:	bf00      	nop
 8010f20:	08010f49 	.word	0x08010f49
 8010f24:	08010f49 	.word	0x08010f49
 8010f28:	08010f49 	.word	0x08010f49
 8010f2c:	08010fbd 	.word	0x08010fbd
 8010f30:	08010fd1 	.word	0x08010fd1
 8010f34:	0801101b 	.word	0x0801101b
 8010f38:	08010f49 	.word	0x08010f49
 8010f3c:	08010f49 	.word	0x08010f49
 8010f40:	08010fbd 	.word	0x08010fbd
 8010f44:	08010fd1 	.word	0x08010fd1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f4e:	f043 0301 	orr.w	r3, r3, #1
 8010f52:	b2da      	uxtb	r2, r3
 8010f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f5a:	68ba      	ldr	r2, [r7, #8]
 8010f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5e:	699b      	ldr	r3, [r3, #24]
 8010f60:	18d1      	adds	r1, r2, r3
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f68:	f7ff ff5c 	bl	8010e24 <prvInsertTimerInActiveList>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d069      	beq.n	8011046 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f74:	6a1b      	ldr	r3, [r3, #32]
 8010f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f80:	f003 0304 	and.w	r3, r3, #4
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d05e      	beq.n	8011046 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8c:	699b      	ldr	r3, [r3, #24]
 8010f8e:	441a      	add	r2, r3
 8010f90:	2300      	movs	r3, #0
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	2300      	movs	r3, #0
 8010f96:	2100      	movs	r1, #0
 8010f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f9a:	f7ff fe05 	bl	8010ba8 <xTimerGenericCommand>
 8010f9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010fa0:	6a3b      	ldr	r3, [r7, #32]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d14f      	bne.n	8011046 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	61bb      	str	r3, [r7, #24]
}
 8010fb8:	bf00      	nop
 8010fba:	e7fe      	b.n	8010fba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fc2:	f023 0301 	bic.w	r3, r3, #1
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010fce:	e03a      	b.n	8011046 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fd6:	f043 0301 	orr.w	r3, r3, #1
 8010fda:	b2da      	uxtb	r2, r3
 8010fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fea:	699b      	ldr	r3, [r3, #24]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10a      	bne.n	8011006 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff4:	f383 8811 	msr	BASEPRI, r3
 8010ff8:	f3bf 8f6f 	isb	sy
 8010ffc:	f3bf 8f4f 	dsb	sy
 8011000:	617b      	str	r3, [r7, #20]
}
 8011002:	bf00      	nop
 8011004:	e7fe      	b.n	8011004 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011008:	699a      	ldr	r2, [r3, #24]
 801100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100c:	18d1      	adds	r1, r2, r3
 801100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011014:	f7ff ff06 	bl	8010e24 <prvInsertTimerInActiveList>
					break;
 8011018:	e015      	b.n	8011046 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011020:	f003 0302 	and.w	r3, r3, #2
 8011024:	2b00      	cmp	r3, #0
 8011026:	d103      	bne.n	8011030 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801102a:	f000 fc01 	bl	8011830 <vPortFree>
 801102e:	e00a      	b.n	8011046 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011036:	f023 0301 	bic.w	r3, r3, #1
 801103a:	b2da      	uxtb	r2, r3
 801103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011042:	e000      	b.n	8011046 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011044:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011046:	4b08      	ldr	r3, [pc, #32]	; (8011068 <prvProcessReceivedCommands+0x1c0>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	1d39      	adds	r1, r7, #4
 801104c:	2200      	movs	r2, #0
 801104e:	4618      	mov	r0, r3
 8011050:	f7fd ffe0 	bl	800f014 <xQueueReceive>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	f47f af2a 	bne.w	8010eb0 <prvProcessReceivedCommands+0x8>
	}
}
 801105c:	bf00      	nop
 801105e:	bf00      	nop
 8011060:	3730      	adds	r7, #48	; 0x30
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	20000e10 	.word	0x20000e10

0801106c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b088      	sub	sp, #32
 8011070:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011072:	e048      	b.n	8011106 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011074:	4b2d      	ldr	r3, [pc, #180]	; (801112c <prvSwitchTimerLists+0xc0>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	68db      	ldr	r3, [r3, #12]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801107e:	4b2b      	ldr	r3, [pc, #172]	; (801112c <prvSwitchTimerLists+0xc0>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	3304      	adds	r3, #4
 801108c:	4618      	mov	r0, r3
 801108e:	f7fd fbc9 	bl	800e824 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6a1b      	ldr	r3, [r3, #32]
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110a0:	f003 0304 	and.w	r3, r3, #4
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d02e      	beq.n	8011106 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	699b      	ldr	r3, [r3, #24]
 80110ac:	693a      	ldr	r2, [r7, #16]
 80110ae:	4413      	add	r3, r2
 80110b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d90e      	bls.n	80110d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	68fa      	ldr	r2, [r7, #12]
 80110c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80110c6:	4b19      	ldr	r3, [pc, #100]	; (801112c <prvSwitchTimerLists+0xc0>)
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3304      	adds	r3, #4
 80110ce:	4619      	mov	r1, r3
 80110d0:	4610      	mov	r0, r2
 80110d2:	f7fd fb6e 	bl	800e7b2 <vListInsert>
 80110d6:	e016      	b.n	8011106 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110d8:	2300      	movs	r3, #0
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	2300      	movs	r3, #0
 80110de:	693a      	ldr	r2, [r7, #16]
 80110e0:	2100      	movs	r1, #0
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	f7ff fd60 	bl	8010ba8 <xTimerGenericCommand>
 80110e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d10a      	bne.n	8011106 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	603b      	str	r3, [r7, #0]
}
 8011102:	bf00      	nop
 8011104:	e7fe      	b.n	8011104 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011106:	4b09      	ldr	r3, [pc, #36]	; (801112c <prvSwitchTimerLists+0xc0>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1b1      	bne.n	8011074 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011110:	4b06      	ldr	r3, [pc, #24]	; (801112c <prvSwitchTimerLists+0xc0>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011116:	4b06      	ldr	r3, [pc, #24]	; (8011130 <prvSwitchTimerLists+0xc4>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4a04      	ldr	r2, [pc, #16]	; (801112c <prvSwitchTimerLists+0xc0>)
 801111c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801111e:	4a04      	ldr	r2, [pc, #16]	; (8011130 <prvSwitchTimerLists+0xc4>)
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	6013      	str	r3, [r2, #0]
}
 8011124:	bf00      	nop
 8011126:	3718      	adds	r7, #24
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}
 801112c:	20000e08 	.word	0x20000e08
 8011130:	20000e0c 	.word	0x20000e0c

08011134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b082      	sub	sp, #8
 8011138:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801113a:	f000 f98b 	bl	8011454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801113e:	4b15      	ldr	r3, [pc, #84]	; (8011194 <prvCheckForValidListAndQueue+0x60>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d120      	bne.n	8011188 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011146:	4814      	ldr	r0, [pc, #80]	; (8011198 <prvCheckForValidListAndQueue+0x64>)
 8011148:	f7fd fae2 	bl	800e710 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801114c:	4813      	ldr	r0, [pc, #76]	; (801119c <prvCheckForValidListAndQueue+0x68>)
 801114e:	f7fd fadf 	bl	800e710 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011152:	4b13      	ldr	r3, [pc, #76]	; (80111a0 <prvCheckForValidListAndQueue+0x6c>)
 8011154:	4a10      	ldr	r2, [pc, #64]	; (8011198 <prvCheckForValidListAndQueue+0x64>)
 8011156:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011158:	4b12      	ldr	r3, [pc, #72]	; (80111a4 <prvCheckForValidListAndQueue+0x70>)
 801115a:	4a10      	ldr	r2, [pc, #64]	; (801119c <prvCheckForValidListAndQueue+0x68>)
 801115c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801115e:	2300      	movs	r3, #0
 8011160:	9300      	str	r3, [sp, #0]
 8011162:	4b11      	ldr	r3, [pc, #68]	; (80111a8 <prvCheckForValidListAndQueue+0x74>)
 8011164:	4a11      	ldr	r2, [pc, #68]	; (80111ac <prvCheckForValidListAndQueue+0x78>)
 8011166:	2110      	movs	r1, #16
 8011168:	200a      	movs	r0, #10
 801116a:	f7fd fbed 	bl	800e948 <xQueueGenericCreateStatic>
 801116e:	4603      	mov	r3, r0
 8011170:	4a08      	ldr	r2, [pc, #32]	; (8011194 <prvCheckForValidListAndQueue+0x60>)
 8011172:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011174:	4b07      	ldr	r3, [pc, #28]	; (8011194 <prvCheckForValidListAndQueue+0x60>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d005      	beq.n	8011188 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801117c:	4b05      	ldr	r3, [pc, #20]	; (8011194 <prvCheckForValidListAndQueue+0x60>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	490b      	ldr	r1, [pc, #44]	; (80111b0 <prvCheckForValidListAndQueue+0x7c>)
 8011182:	4618      	mov	r0, r3
 8011184:	f7fe fafe 	bl	800f784 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011188:	f000 f994 	bl	80114b4 <vPortExitCritical>
}
 801118c:	bf00      	nop
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	20000e10 	.word	0x20000e10
 8011198:	20000de0 	.word	0x20000de0
 801119c:	20000df4 	.word	0x20000df4
 80111a0:	20000e08 	.word	0x20000e08
 80111a4:	20000e0c 	.word	0x20000e0c
 80111a8:	20000ebc 	.word	0x20000ebc
 80111ac:	20000e1c 	.word	0x20000e1c
 80111b0:	08013ebc 	.word	0x08013ebc

080111b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b08a      	sub	sp, #40	; 0x28
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
 80111c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80111c2:	f06f 0301 	mvn.w	r3, #1
 80111c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80111d4:	4b06      	ldr	r3, [pc, #24]	; (80111f0 <xTimerPendFunctionCallFromISR+0x3c>)
 80111d6:	6818      	ldr	r0, [r3, #0]
 80111d8:	f107 0114 	add.w	r1, r7, #20
 80111dc:	2300      	movs	r3, #0
 80111de:	683a      	ldr	r2, [r7, #0]
 80111e0:	f7fd fdf0 	bl	800edc4 <xQueueGenericSendFromISR>
 80111e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80111e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3728      	adds	r7, #40	; 0x28
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	20000e10 	.word	0x20000e10

080111f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	3b04      	subs	r3, #4
 8011204:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801120c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	3b04      	subs	r3, #4
 8011212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	f023 0201 	bic.w	r2, r3, #1
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3b04      	subs	r3, #4
 8011222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011224:	4a0c      	ldr	r2, [pc, #48]	; (8011258 <pxPortInitialiseStack+0x64>)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	3b14      	subs	r3, #20
 801122e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	3b04      	subs	r3, #4
 801123a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f06f 0202 	mvn.w	r2, #2
 8011242:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3b20      	subs	r3, #32
 8011248:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801124a:	68fb      	ldr	r3, [r7, #12]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3714      	adds	r7, #20
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr
 8011258:	0801125d 	.word	0x0801125d

0801125c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011262:	2300      	movs	r3, #0
 8011264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011266:	4b12      	ldr	r3, [pc, #72]	; (80112b0 <prvTaskExitError+0x54>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801126e:	d00a      	beq.n	8011286 <prvTaskExitError+0x2a>
	__asm volatile
 8011270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011274:	f383 8811 	msr	BASEPRI, r3
 8011278:	f3bf 8f6f 	isb	sy
 801127c:	f3bf 8f4f 	dsb	sy
 8011280:	60fb      	str	r3, [r7, #12]
}
 8011282:	bf00      	nop
 8011284:	e7fe      	b.n	8011284 <prvTaskExitError+0x28>
	__asm volatile
 8011286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128a:	f383 8811 	msr	BASEPRI, r3
 801128e:	f3bf 8f6f 	isb	sy
 8011292:	f3bf 8f4f 	dsb	sy
 8011296:	60bb      	str	r3, [r7, #8]
}
 8011298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801129a:	bf00      	nop
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d0fc      	beq.n	801129c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80112a2:	bf00      	nop
 80112a4:	bf00      	nop
 80112a6:	3714      	adds	r7, #20
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	2000015c 	.word	0x2000015c
	...

080112c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80112c0:	4b07      	ldr	r3, [pc, #28]	; (80112e0 <pxCurrentTCBConst2>)
 80112c2:	6819      	ldr	r1, [r3, #0]
 80112c4:	6808      	ldr	r0, [r1, #0]
 80112c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ca:	f380 8809 	msr	PSP, r0
 80112ce:	f3bf 8f6f 	isb	sy
 80112d2:	f04f 0000 	mov.w	r0, #0
 80112d6:	f380 8811 	msr	BASEPRI, r0
 80112da:	4770      	bx	lr
 80112dc:	f3af 8000 	nop.w

080112e0 <pxCurrentTCBConst2>:
 80112e0:	200008e0 	.word	0x200008e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80112e4:	bf00      	nop
 80112e6:	bf00      	nop

080112e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80112e8:	4808      	ldr	r0, [pc, #32]	; (801130c <prvPortStartFirstTask+0x24>)
 80112ea:	6800      	ldr	r0, [r0, #0]
 80112ec:	6800      	ldr	r0, [r0, #0]
 80112ee:	f380 8808 	msr	MSP, r0
 80112f2:	f04f 0000 	mov.w	r0, #0
 80112f6:	f380 8814 	msr	CONTROL, r0
 80112fa:	b662      	cpsie	i
 80112fc:	b661      	cpsie	f
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	df00      	svc	0
 8011308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801130a:	bf00      	nop
 801130c:	e000ed08 	.word	0xe000ed08

08011310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011316:	4b46      	ldr	r3, [pc, #280]	; (8011430 <xPortStartScheduler+0x120>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	4a46      	ldr	r2, [pc, #280]	; (8011434 <xPortStartScheduler+0x124>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d10a      	bne.n	8011336 <xPortStartScheduler+0x26>
	__asm volatile
 8011320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011324:	f383 8811 	msr	BASEPRI, r3
 8011328:	f3bf 8f6f 	isb	sy
 801132c:	f3bf 8f4f 	dsb	sy
 8011330:	613b      	str	r3, [r7, #16]
}
 8011332:	bf00      	nop
 8011334:	e7fe      	b.n	8011334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011336:	4b3e      	ldr	r3, [pc, #248]	; (8011430 <xPortStartScheduler+0x120>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4a3f      	ldr	r2, [pc, #252]	; (8011438 <xPortStartScheduler+0x128>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d10a      	bne.n	8011356 <xPortStartScheduler+0x46>
	__asm volatile
 8011340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011344:	f383 8811 	msr	BASEPRI, r3
 8011348:	f3bf 8f6f 	isb	sy
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	60fb      	str	r3, [r7, #12]
}
 8011352:	bf00      	nop
 8011354:	e7fe      	b.n	8011354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011356:	4b39      	ldr	r3, [pc, #228]	; (801143c <xPortStartScheduler+0x12c>)
 8011358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	22ff      	movs	r2, #255	; 0xff
 8011366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	b2db      	uxtb	r3, r3
 801136e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011370:	78fb      	ldrb	r3, [r7, #3]
 8011372:	b2db      	uxtb	r3, r3
 8011374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011378:	b2da      	uxtb	r2, r3
 801137a:	4b31      	ldr	r3, [pc, #196]	; (8011440 <xPortStartScheduler+0x130>)
 801137c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801137e:	4b31      	ldr	r3, [pc, #196]	; (8011444 <xPortStartScheduler+0x134>)
 8011380:	2207      	movs	r2, #7
 8011382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011384:	e009      	b.n	801139a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011386:	4b2f      	ldr	r3, [pc, #188]	; (8011444 <xPortStartScheduler+0x134>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	3b01      	subs	r3, #1
 801138c:	4a2d      	ldr	r2, [pc, #180]	; (8011444 <xPortStartScheduler+0x134>)
 801138e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011390:	78fb      	ldrb	r3, [r7, #3]
 8011392:	b2db      	uxtb	r3, r3
 8011394:	005b      	lsls	r3, r3, #1
 8011396:	b2db      	uxtb	r3, r3
 8011398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801139a:	78fb      	ldrb	r3, [r7, #3]
 801139c:	b2db      	uxtb	r3, r3
 801139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113a2:	2b80      	cmp	r3, #128	; 0x80
 80113a4:	d0ef      	beq.n	8011386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80113a6:	4b27      	ldr	r3, [pc, #156]	; (8011444 <xPortStartScheduler+0x134>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f1c3 0307 	rsb	r3, r3, #7
 80113ae:	2b04      	cmp	r3, #4
 80113b0:	d00a      	beq.n	80113c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	60bb      	str	r3, [r7, #8]
}
 80113c4:	bf00      	nop
 80113c6:	e7fe      	b.n	80113c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80113c8:	4b1e      	ldr	r3, [pc, #120]	; (8011444 <xPortStartScheduler+0x134>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	021b      	lsls	r3, r3, #8
 80113ce:	4a1d      	ldr	r2, [pc, #116]	; (8011444 <xPortStartScheduler+0x134>)
 80113d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80113d2:	4b1c      	ldr	r3, [pc, #112]	; (8011444 <xPortStartScheduler+0x134>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80113da:	4a1a      	ldr	r2, [pc, #104]	; (8011444 <xPortStartScheduler+0x134>)
 80113dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	b2da      	uxtb	r2, r3
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80113e6:	4b18      	ldr	r3, [pc, #96]	; (8011448 <xPortStartScheduler+0x138>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4a17      	ldr	r2, [pc, #92]	; (8011448 <xPortStartScheduler+0x138>)
 80113ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80113f2:	4b15      	ldr	r3, [pc, #84]	; (8011448 <xPortStartScheduler+0x138>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	4a14      	ldr	r2, [pc, #80]	; (8011448 <xPortStartScheduler+0x138>)
 80113f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80113fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80113fe:	f000 f8dd 	bl	80115bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011402:	4b12      	ldr	r3, [pc, #72]	; (801144c <xPortStartScheduler+0x13c>)
 8011404:	2200      	movs	r2, #0
 8011406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011408:	f000 f8fc 	bl	8011604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801140c:	4b10      	ldr	r3, [pc, #64]	; (8011450 <xPortStartScheduler+0x140>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4a0f      	ldr	r2, [pc, #60]	; (8011450 <xPortStartScheduler+0x140>)
 8011412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011418:	f7ff ff66 	bl	80112e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801141c:	f7fe fe7c 	bl	8010118 <vTaskSwitchContext>
	prvTaskExitError();
 8011420:	f7ff ff1c 	bl	801125c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3718      	adds	r7, #24
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	e000ed00 	.word	0xe000ed00
 8011434:	410fc271 	.word	0x410fc271
 8011438:	410fc270 	.word	0x410fc270
 801143c:	e000e400 	.word	0xe000e400
 8011440:	20000f0c 	.word	0x20000f0c
 8011444:	20000f10 	.word	0x20000f10
 8011448:	e000ed20 	.word	0xe000ed20
 801144c:	2000015c 	.word	0x2000015c
 8011450:	e000ef34 	.word	0xe000ef34

08011454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
	__asm volatile
 801145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145e:	f383 8811 	msr	BASEPRI, r3
 8011462:	f3bf 8f6f 	isb	sy
 8011466:	f3bf 8f4f 	dsb	sy
 801146a:	607b      	str	r3, [r7, #4]
}
 801146c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801146e:	4b0f      	ldr	r3, [pc, #60]	; (80114ac <vPortEnterCritical+0x58>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	3301      	adds	r3, #1
 8011474:	4a0d      	ldr	r2, [pc, #52]	; (80114ac <vPortEnterCritical+0x58>)
 8011476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011478:	4b0c      	ldr	r3, [pc, #48]	; (80114ac <vPortEnterCritical+0x58>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b01      	cmp	r3, #1
 801147e:	d10f      	bne.n	80114a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011480:	4b0b      	ldr	r3, [pc, #44]	; (80114b0 <vPortEnterCritical+0x5c>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	b2db      	uxtb	r3, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00a      	beq.n	80114a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148e:	f383 8811 	msr	BASEPRI, r3
 8011492:	f3bf 8f6f 	isb	sy
 8011496:	f3bf 8f4f 	dsb	sy
 801149a:	603b      	str	r3, [r7, #0]
}
 801149c:	bf00      	nop
 801149e:	e7fe      	b.n	801149e <vPortEnterCritical+0x4a>
	}
}
 80114a0:	bf00      	nop
 80114a2:	370c      	adds	r7, #12
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr
 80114ac:	2000015c 	.word	0x2000015c
 80114b0:	e000ed04 	.word	0xe000ed04

080114b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80114ba:	4b12      	ldr	r3, [pc, #72]	; (8011504 <vPortExitCritical+0x50>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10a      	bne.n	80114d8 <vPortExitCritical+0x24>
	__asm volatile
 80114c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c6:	f383 8811 	msr	BASEPRI, r3
 80114ca:	f3bf 8f6f 	isb	sy
 80114ce:	f3bf 8f4f 	dsb	sy
 80114d2:	607b      	str	r3, [r7, #4]
}
 80114d4:	bf00      	nop
 80114d6:	e7fe      	b.n	80114d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80114d8:	4b0a      	ldr	r3, [pc, #40]	; (8011504 <vPortExitCritical+0x50>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	3b01      	subs	r3, #1
 80114de:	4a09      	ldr	r2, [pc, #36]	; (8011504 <vPortExitCritical+0x50>)
 80114e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80114e2:	4b08      	ldr	r3, [pc, #32]	; (8011504 <vPortExitCritical+0x50>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d105      	bne.n	80114f6 <vPortExitCritical+0x42>
 80114ea:	2300      	movs	r3, #0
 80114ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	f383 8811 	msr	BASEPRI, r3
}
 80114f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80114f6:	bf00      	nop
 80114f8:	370c      	adds	r7, #12
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	2000015c 	.word	0x2000015c
	...

08011510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011510:	f3ef 8009 	mrs	r0, PSP
 8011514:	f3bf 8f6f 	isb	sy
 8011518:	4b15      	ldr	r3, [pc, #84]	; (8011570 <pxCurrentTCBConst>)
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	f01e 0f10 	tst.w	lr, #16
 8011520:	bf08      	it	eq
 8011522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152a:	6010      	str	r0, [r2, #0]
 801152c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011534:	f380 8811 	msr	BASEPRI, r0
 8011538:	f3bf 8f4f 	dsb	sy
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f7fe fdea 	bl	8010118 <vTaskSwitchContext>
 8011544:	f04f 0000 	mov.w	r0, #0
 8011548:	f380 8811 	msr	BASEPRI, r0
 801154c:	bc09      	pop	{r0, r3}
 801154e:	6819      	ldr	r1, [r3, #0]
 8011550:	6808      	ldr	r0, [r1, #0]
 8011552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011556:	f01e 0f10 	tst.w	lr, #16
 801155a:	bf08      	it	eq
 801155c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011560:	f380 8809 	msr	PSP, r0
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	4770      	bx	lr
 801156a:	bf00      	nop
 801156c:	f3af 8000 	nop.w

08011570 <pxCurrentTCBConst>:
 8011570:	200008e0 	.word	0x200008e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011574:	bf00      	nop
 8011576:	bf00      	nop

08011578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
	__asm volatile
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	607b      	str	r3, [r7, #4]
}
 8011590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011592:	f7fe fd07 	bl	800ffa4 <xTaskIncrementTick>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d003      	beq.n	80115a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801159c:	4b06      	ldr	r3, [pc, #24]	; (80115b8 <xPortSysTickHandler+0x40>)
 801159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	2300      	movs	r3, #0
 80115a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	f383 8811 	msr	BASEPRI, r3
}
 80115ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	e000ed04 	.word	0xe000ed04

080115bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80115bc:	b480      	push	{r7}
 80115be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80115c0:	4b0b      	ldr	r3, [pc, #44]	; (80115f0 <vPortSetupTimerInterrupt+0x34>)
 80115c2:	2200      	movs	r2, #0
 80115c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80115c6:	4b0b      	ldr	r3, [pc, #44]	; (80115f4 <vPortSetupTimerInterrupt+0x38>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80115cc:	4b0a      	ldr	r3, [pc, #40]	; (80115f8 <vPortSetupTimerInterrupt+0x3c>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4a0a      	ldr	r2, [pc, #40]	; (80115fc <vPortSetupTimerInterrupt+0x40>)
 80115d2:	fba2 2303 	umull	r2, r3, r2, r3
 80115d6:	099b      	lsrs	r3, r3, #6
 80115d8:	4a09      	ldr	r2, [pc, #36]	; (8011600 <vPortSetupTimerInterrupt+0x44>)
 80115da:	3b01      	subs	r3, #1
 80115dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80115de:	4b04      	ldr	r3, [pc, #16]	; (80115f0 <vPortSetupTimerInterrupt+0x34>)
 80115e0:	2207      	movs	r2, #7
 80115e2:	601a      	str	r2, [r3, #0]
}
 80115e4:	bf00      	nop
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop
 80115f0:	e000e010 	.word	0xe000e010
 80115f4:	e000e018 	.word	0xe000e018
 80115f8:	2000013c 	.word	0x2000013c
 80115fc:	10624dd3 	.word	0x10624dd3
 8011600:	e000e014 	.word	0xe000e014

08011604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011614 <vPortEnableVFP+0x10>
 8011608:	6801      	ldr	r1, [r0, #0]
 801160a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801160e:	6001      	str	r1, [r0, #0]
 8011610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011612:	bf00      	nop
 8011614:	e000ed88 	.word	0xe000ed88

08011618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011618:	b480      	push	{r7}
 801161a:	b085      	sub	sp, #20
 801161c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801161e:	f3ef 8305 	mrs	r3, IPSR
 8011622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2b0f      	cmp	r3, #15
 8011628:	d914      	bls.n	8011654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801162a:	4a17      	ldr	r2, [pc, #92]	; (8011688 <vPortValidateInterruptPriority+0x70>)
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	4413      	add	r3, r2
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011634:	4b15      	ldr	r3, [pc, #84]	; (801168c <vPortValidateInterruptPriority+0x74>)
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	7afa      	ldrb	r2, [r7, #11]
 801163a:	429a      	cmp	r2, r3
 801163c:	d20a      	bcs.n	8011654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801163e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	607b      	str	r3, [r7, #4]
}
 8011650:	bf00      	nop
 8011652:	e7fe      	b.n	8011652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011654:	4b0e      	ldr	r3, [pc, #56]	; (8011690 <vPortValidateInterruptPriority+0x78>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801165c:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <vPortValidateInterruptPriority+0x7c>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	429a      	cmp	r2, r3
 8011662:	d90a      	bls.n	801167a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011668:	f383 8811 	msr	BASEPRI, r3
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	603b      	str	r3, [r7, #0]
}
 8011676:	bf00      	nop
 8011678:	e7fe      	b.n	8011678 <vPortValidateInterruptPriority+0x60>
	}
 801167a:	bf00      	nop
 801167c:	3714      	adds	r7, #20
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	e000e3f0 	.word	0xe000e3f0
 801168c:	20000f0c 	.word	0x20000f0c
 8011690:	e000ed0c 	.word	0xe000ed0c
 8011694:	20000f10 	.word	0x20000f10

08011698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b08a      	sub	sp, #40	; 0x28
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80116a0:	2300      	movs	r3, #0
 80116a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80116a4:	f7fe fbb0 	bl	800fe08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80116a8:	4b5b      	ldr	r3, [pc, #364]	; (8011818 <pvPortMalloc+0x180>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d101      	bne.n	80116b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80116b0:	f000 f920 	bl	80118f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80116b4:	4b59      	ldr	r3, [pc, #356]	; (801181c <pvPortMalloc+0x184>)
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	4013      	ands	r3, r2
 80116bc:	2b00      	cmp	r3, #0
 80116be:	f040 8093 	bne.w	80117e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d01d      	beq.n	8011704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80116c8:	2208      	movs	r2, #8
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	4413      	add	r3, r2
 80116ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f003 0307 	and.w	r3, r3, #7
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d014      	beq.n	8011704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f023 0307 	bic.w	r3, r3, #7
 80116e0:	3308      	adds	r3, #8
 80116e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f003 0307 	and.w	r3, r3, #7
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00a      	beq.n	8011704 <pvPortMalloc+0x6c>
	__asm volatile
 80116ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	617b      	str	r3, [r7, #20]
}
 8011700:	bf00      	nop
 8011702:	e7fe      	b.n	8011702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d06e      	beq.n	80117e8 <pvPortMalloc+0x150>
 801170a:	4b45      	ldr	r3, [pc, #276]	; (8011820 <pvPortMalloc+0x188>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	429a      	cmp	r2, r3
 8011712:	d869      	bhi.n	80117e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011714:	4b43      	ldr	r3, [pc, #268]	; (8011824 <pvPortMalloc+0x18c>)
 8011716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011718:	4b42      	ldr	r3, [pc, #264]	; (8011824 <pvPortMalloc+0x18c>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801171e:	e004      	b.n	801172a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	429a      	cmp	r2, r3
 8011732:	d903      	bls.n	801173c <pvPortMalloc+0xa4>
 8011734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d1f1      	bne.n	8011720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801173c:	4b36      	ldr	r3, [pc, #216]	; (8011818 <pvPortMalloc+0x180>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011742:	429a      	cmp	r2, r3
 8011744:	d050      	beq.n	80117e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011746:	6a3b      	ldr	r3, [r7, #32]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2208      	movs	r2, #8
 801174c:	4413      	add	r3, r2
 801174e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	6a3b      	ldr	r3, [r7, #32]
 8011756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175a:	685a      	ldr	r2, [r3, #4]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	1ad2      	subs	r2, r2, r3
 8011760:	2308      	movs	r3, #8
 8011762:	005b      	lsls	r3, r3, #1
 8011764:	429a      	cmp	r2, r3
 8011766:	d91f      	bls.n	80117a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4413      	add	r3, r2
 801176e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	f003 0307 	and.w	r3, r3, #7
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00a      	beq.n	8011790 <pvPortMalloc+0xf8>
	__asm volatile
 801177a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177e:	f383 8811 	msr	BASEPRI, r3
 8011782:	f3bf 8f6f 	isb	sy
 8011786:	f3bf 8f4f 	dsb	sy
 801178a:	613b      	str	r3, [r7, #16]
}
 801178c:	bf00      	nop
 801178e:	e7fe      	b.n	801178e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011792:	685a      	ldr	r2, [r3, #4]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	1ad2      	subs	r2, r2, r3
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80117a2:	69b8      	ldr	r0, [r7, #24]
 80117a4:	f000 f908 	bl	80119b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80117a8:	4b1d      	ldr	r3, [pc, #116]	; (8011820 <pvPortMalloc+0x188>)
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	4a1b      	ldr	r2, [pc, #108]	; (8011820 <pvPortMalloc+0x188>)
 80117b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80117b6:	4b1a      	ldr	r3, [pc, #104]	; (8011820 <pvPortMalloc+0x188>)
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	4b1b      	ldr	r3, [pc, #108]	; (8011828 <pvPortMalloc+0x190>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	429a      	cmp	r2, r3
 80117c0:	d203      	bcs.n	80117ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80117c2:	4b17      	ldr	r3, [pc, #92]	; (8011820 <pvPortMalloc+0x188>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	4a18      	ldr	r2, [pc, #96]	; (8011828 <pvPortMalloc+0x190>)
 80117c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80117ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117cc:	685a      	ldr	r2, [r3, #4]
 80117ce:	4b13      	ldr	r3, [pc, #76]	; (801181c <pvPortMalloc+0x184>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	431a      	orrs	r2, r3
 80117d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80117d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117da:	2200      	movs	r2, #0
 80117dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80117de:	4b13      	ldr	r3, [pc, #76]	; (801182c <pvPortMalloc+0x194>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	3301      	adds	r3, #1
 80117e4:	4a11      	ldr	r2, [pc, #68]	; (801182c <pvPortMalloc+0x194>)
 80117e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80117e8:	f7fe fb1c 	bl	800fe24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	f003 0307 	and.w	r3, r3, #7
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d00a      	beq.n	801180c <pvPortMalloc+0x174>
	__asm volatile
 80117f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fa:	f383 8811 	msr	BASEPRI, r3
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	60fb      	str	r3, [r7, #12]
}
 8011808:	bf00      	nop
 801180a:	e7fe      	b.n	801180a <pvPortMalloc+0x172>
	return pvReturn;
 801180c:	69fb      	ldr	r3, [r7, #28]
}
 801180e:	4618      	mov	r0, r3
 8011810:	3728      	adds	r7, #40	; 0x28
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	2000362c 	.word	0x2000362c
 801181c:	20003640 	.word	0x20003640
 8011820:	20003630 	.word	0x20003630
 8011824:	20003624 	.word	0x20003624
 8011828:	20003634 	.word	0x20003634
 801182c:	20003638 	.word	0x20003638

08011830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b086      	sub	sp, #24
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d04d      	beq.n	80118de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011842:	2308      	movs	r3, #8
 8011844:	425b      	negs	r3, r3
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	4413      	add	r3, r2
 801184a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	685a      	ldr	r2, [r3, #4]
 8011854:	4b24      	ldr	r3, [pc, #144]	; (80118e8 <vPortFree+0xb8>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4013      	ands	r3, r2
 801185a:	2b00      	cmp	r3, #0
 801185c:	d10a      	bne.n	8011874 <vPortFree+0x44>
	__asm volatile
 801185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011862:	f383 8811 	msr	BASEPRI, r3
 8011866:	f3bf 8f6f 	isb	sy
 801186a:	f3bf 8f4f 	dsb	sy
 801186e:	60fb      	str	r3, [r7, #12]
}
 8011870:	bf00      	nop
 8011872:	e7fe      	b.n	8011872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d00a      	beq.n	8011892 <vPortFree+0x62>
	__asm volatile
 801187c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011880:	f383 8811 	msr	BASEPRI, r3
 8011884:	f3bf 8f6f 	isb	sy
 8011888:	f3bf 8f4f 	dsb	sy
 801188c:	60bb      	str	r3, [r7, #8]
}
 801188e:	bf00      	nop
 8011890:	e7fe      	b.n	8011890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	685a      	ldr	r2, [r3, #4]
 8011896:	4b14      	ldr	r3, [pc, #80]	; (80118e8 <vPortFree+0xb8>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4013      	ands	r3, r2
 801189c:	2b00      	cmp	r3, #0
 801189e:	d01e      	beq.n	80118de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d11a      	bne.n	80118de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	685a      	ldr	r2, [r3, #4]
 80118ac:	4b0e      	ldr	r3, [pc, #56]	; (80118e8 <vPortFree+0xb8>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	43db      	mvns	r3, r3
 80118b2:	401a      	ands	r2, r3
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80118b8:	f7fe faa6 	bl	800fe08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	685a      	ldr	r2, [r3, #4]
 80118c0:	4b0a      	ldr	r3, [pc, #40]	; (80118ec <vPortFree+0xbc>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4413      	add	r3, r2
 80118c6:	4a09      	ldr	r2, [pc, #36]	; (80118ec <vPortFree+0xbc>)
 80118c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80118ca:	6938      	ldr	r0, [r7, #16]
 80118cc:	f000 f874 	bl	80119b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80118d0:	4b07      	ldr	r3, [pc, #28]	; (80118f0 <vPortFree+0xc0>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	3301      	adds	r3, #1
 80118d6:	4a06      	ldr	r2, [pc, #24]	; (80118f0 <vPortFree+0xc0>)
 80118d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80118da:	f7fe faa3 	bl	800fe24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80118de:	bf00      	nop
 80118e0:	3718      	adds	r7, #24
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	20003640 	.word	0x20003640
 80118ec:	20003630 	.word	0x20003630
 80118f0:	2000363c 	.word	0x2000363c

080118f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80118fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80118fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011900:	4b27      	ldr	r3, [pc, #156]	; (80119a0 <prvHeapInit+0xac>)
 8011902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f003 0307 	and.w	r3, r3, #7
 801190a:	2b00      	cmp	r3, #0
 801190c:	d00c      	beq.n	8011928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	3307      	adds	r3, #7
 8011912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f023 0307 	bic.w	r3, r3, #7
 801191a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801191c:	68ba      	ldr	r2, [r7, #8]
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	4a1f      	ldr	r2, [pc, #124]	; (80119a0 <prvHeapInit+0xac>)
 8011924:	4413      	add	r3, r2
 8011926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801192c:	4a1d      	ldr	r2, [pc, #116]	; (80119a4 <prvHeapInit+0xb0>)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011932:	4b1c      	ldr	r3, [pc, #112]	; (80119a4 <prvHeapInit+0xb0>)
 8011934:	2200      	movs	r2, #0
 8011936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	68ba      	ldr	r2, [r7, #8]
 801193c:	4413      	add	r3, r2
 801193e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011940:	2208      	movs	r2, #8
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	1a9b      	subs	r3, r3, r2
 8011946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f023 0307 	bic.w	r3, r3, #7
 801194e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	4a15      	ldr	r2, [pc, #84]	; (80119a8 <prvHeapInit+0xb4>)
 8011954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011956:	4b14      	ldr	r3, [pc, #80]	; (80119a8 <prvHeapInit+0xb4>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2200      	movs	r2, #0
 801195c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801195e:	4b12      	ldr	r3, [pc, #72]	; (80119a8 <prvHeapInit+0xb4>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2200      	movs	r2, #0
 8011964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	1ad2      	subs	r2, r2, r3
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011974:	4b0c      	ldr	r3, [pc, #48]	; (80119a8 <prvHeapInit+0xb4>)
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	685b      	ldr	r3, [r3, #4]
 8011980:	4a0a      	ldr	r2, [pc, #40]	; (80119ac <prvHeapInit+0xb8>)
 8011982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	4a09      	ldr	r2, [pc, #36]	; (80119b0 <prvHeapInit+0xbc>)
 801198a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801198c:	4b09      	ldr	r3, [pc, #36]	; (80119b4 <prvHeapInit+0xc0>)
 801198e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011992:	601a      	str	r2, [r3, #0]
}
 8011994:	bf00      	nop
 8011996:	3714      	adds	r7, #20
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr
 80119a0:	20000f14 	.word	0x20000f14
 80119a4:	20003624 	.word	0x20003624
 80119a8:	2000362c 	.word	0x2000362c
 80119ac:	20003634 	.word	0x20003634
 80119b0:	20003630 	.word	0x20003630
 80119b4:	20003640 	.word	0x20003640

080119b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80119b8:	b480      	push	{r7}
 80119ba:	b085      	sub	sp, #20
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80119c0:	4b28      	ldr	r3, [pc, #160]	; (8011a64 <prvInsertBlockIntoFreeList+0xac>)
 80119c2:	60fb      	str	r3, [r7, #12]
 80119c4:	e002      	b.n	80119cc <prvInsertBlockIntoFreeList+0x14>
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	60fb      	str	r3, [r7, #12]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d8f7      	bhi.n	80119c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	68ba      	ldr	r2, [r7, #8]
 80119e0:	4413      	add	r3, r2
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d108      	bne.n	80119fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	685a      	ldr	r2, [r3, #4]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	441a      	add	r2, r3
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	68ba      	ldr	r2, [r7, #8]
 8011a04:	441a      	add	r2, r3
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d118      	bne.n	8011a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	4b15      	ldr	r3, [pc, #84]	; (8011a68 <prvInsertBlockIntoFreeList+0xb0>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d00d      	beq.n	8011a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	685a      	ldr	r2, [r3, #4]
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	441a      	add	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	601a      	str	r2, [r3, #0]
 8011a34:	e008      	b.n	8011a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011a36:	4b0c      	ldr	r3, [pc, #48]	; (8011a68 <prvInsertBlockIntoFreeList+0xb0>)
 8011a38:	681a      	ldr	r2, [r3, #0]
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	e003      	b.n	8011a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d002      	beq.n	8011a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a56:	bf00      	nop
 8011a58:	3714      	adds	r7, #20
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop
 8011a64:	20003624 	.word	0x20003624
 8011a68:	2000362c 	.word	0x2000362c

08011a6c <__errno>:
 8011a6c:	4b01      	ldr	r3, [pc, #4]	; (8011a74 <__errno+0x8>)
 8011a6e:	6818      	ldr	r0, [r3, #0]
 8011a70:	4770      	bx	lr
 8011a72:	bf00      	nop
 8011a74:	20000160 	.word	0x20000160

08011a78 <__libc_init_array>:
 8011a78:	b570      	push	{r4, r5, r6, lr}
 8011a7a:	4d0d      	ldr	r5, [pc, #52]	; (8011ab0 <__libc_init_array+0x38>)
 8011a7c:	4c0d      	ldr	r4, [pc, #52]	; (8011ab4 <__libc_init_array+0x3c>)
 8011a7e:	1b64      	subs	r4, r4, r5
 8011a80:	10a4      	asrs	r4, r4, #2
 8011a82:	2600      	movs	r6, #0
 8011a84:	42a6      	cmp	r6, r4
 8011a86:	d109      	bne.n	8011a9c <__libc_init_array+0x24>
 8011a88:	4d0b      	ldr	r5, [pc, #44]	; (8011ab8 <__libc_init_array+0x40>)
 8011a8a:	4c0c      	ldr	r4, [pc, #48]	; (8011abc <__libc_init_array+0x44>)
 8011a8c:	f002 f85e 	bl	8013b4c <_init>
 8011a90:	1b64      	subs	r4, r4, r5
 8011a92:	10a4      	asrs	r4, r4, #2
 8011a94:	2600      	movs	r6, #0
 8011a96:	42a6      	cmp	r6, r4
 8011a98:	d105      	bne.n	8011aa6 <__libc_init_array+0x2e>
 8011a9a:	bd70      	pop	{r4, r5, r6, pc}
 8011a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aa0:	4798      	blx	r3
 8011aa2:	3601      	adds	r6, #1
 8011aa4:	e7ee      	b.n	8011a84 <__libc_init_array+0xc>
 8011aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aaa:	4798      	blx	r3
 8011aac:	3601      	adds	r6, #1
 8011aae:	e7f2      	b.n	8011a96 <__libc_init_array+0x1e>
 8011ab0:	08014650 	.word	0x08014650
 8011ab4:	08014650 	.word	0x08014650
 8011ab8:	08014650 	.word	0x08014650
 8011abc:	08014654 	.word	0x08014654

08011ac0 <memcpy>:
 8011ac0:	440a      	add	r2, r1
 8011ac2:	4291      	cmp	r1, r2
 8011ac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ac8:	d100      	bne.n	8011acc <memcpy+0xc>
 8011aca:	4770      	bx	lr
 8011acc:	b510      	push	{r4, lr}
 8011ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ad6:	4291      	cmp	r1, r2
 8011ad8:	d1f9      	bne.n	8011ace <memcpy+0xe>
 8011ada:	bd10      	pop	{r4, pc}

08011adc <memset>:
 8011adc:	4402      	add	r2, r0
 8011ade:	4603      	mov	r3, r0
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d100      	bne.n	8011ae6 <memset+0xa>
 8011ae4:	4770      	bx	lr
 8011ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8011aea:	e7f9      	b.n	8011ae0 <memset+0x4>

08011aec <iprintf>:
 8011aec:	b40f      	push	{r0, r1, r2, r3}
 8011aee:	4b0a      	ldr	r3, [pc, #40]	; (8011b18 <iprintf+0x2c>)
 8011af0:	b513      	push	{r0, r1, r4, lr}
 8011af2:	681c      	ldr	r4, [r3, #0]
 8011af4:	b124      	cbz	r4, 8011b00 <iprintf+0x14>
 8011af6:	69a3      	ldr	r3, [r4, #24]
 8011af8:	b913      	cbnz	r3, 8011b00 <iprintf+0x14>
 8011afa:	4620      	mov	r0, r4
 8011afc:	f000 fa5e 	bl	8011fbc <__sinit>
 8011b00:	ab05      	add	r3, sp, #20
 8011b02:	9a04      	ldr	r2, [sp, #16]
 8011b04:	68a1      	ldr	r1, [r4, #8]
 8011b06:	9301      	str	r3, [sp, #4]
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f000 fc2f 	bl	801236c <_vfiprintf_r>
 8011b0e:	b002      	add	sp, #8
 8011b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b14:	b004      	add	sp, #16
 8011b16:	4770      	bx	lr
 8011b18:	20000160 	.word	0x20000160

08011b1c <_puts_r>:
 8011b1c:	b570      	push	{r4, r5, r6, lr}
 8011b1e:	460e      	mov	r6, r1
 8011b20:	4605      	mov	r5, r0
 8011b22:	b118      	cbz	r0, 8011b2c <_puts_r+0x10>
 8011b24:	6983      	ldr	r3, [r0, #24]
 8011b26:	b90b      	cbnz	r3, 8011b2c <_puts_r+0x10>
 8011b28:	f000 fa48 	bl	8011fbc <__sinit>
 8011b2c:	69ab      	ldr	r3, [r5, #24]
 8011b2e:	68ac      	ldr	r4, [r5, #8]
 8011b30:	b913      	cbnz	r3, 8011b38 <_puts_r+0x1c>
 8011b32:	4628      	mov	r0, r5
 8011b34:	f000 fa42 	bl	8011fbc <__sinit>
 8011b38:	4b2c      	ldr	r3, [pc, #176]	; (8011bec <_puts_r+0xd0>)
 8011b3a:	429c      	cmp	r4, r3
 8011b3c:	d120      	bne.n	8011b80 <_puts_r+0x64>
 8011b3e:	686c      	ldr	r4, [r5, #4]
 8011b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b42:	07db      	lsls	r3, r3, #31
 8011b44:	d405      	bmi.n	8011b52 <_puts_r+0x36>
 8011b46:	89a3      	ldrh	r3, [r4, #12]
 8011b48:	0598      	lsls	r0, r3, #22
 8011b4a:	d402      	bmi.n	8011b52 <_puts_r+0x36>
 8011b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b4e:	f000 fad3 	bl	80120f8 <__retarget_lock_acquire_recursive>
 8011b52:	89a3      	ldrh	r3, [r4, #12]
 8011b54:	0719      	lsls	r1, r3, #28
 8011b56:	d51d      	bpl.n	8011b94 <_puts_r+0x78>
 8011b58:	6923      	ldr	r3, [r4, #16]
 8011b5a:	b1db      	cbz	r3, 8011b94 <_puts_r+0x78>
 8011b5c:	3e01      	subs	r6, #1
 8011b5e:	68a3      	ldr	r3, [r4, #8]
 8011b60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b64:	3b01      	subs	r3, #1
 8011b66:	60a3      	str	r3, [r4, #8]
 8011b68:	bb39      	cbnz	r1, 8011bba <_puts_r+0x9e>
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	da38      	bge.n	8011be0 <_puts_r+0xc4>
 8011b6e:	4622      	mov	r2, r4
 8011b70:	210a      	movs	r1, #10
 8011b72:	4628      	mov	r0, r5
 8011b74:	f000 f848 	bl	8011c08 <__swbuf_r>
 8011b78:	3001      	adds	r0, #1
 8011b7a:	d011      	beq.n	8011ba0 <_puts_r+0x84>
 8011b7c:	250a      	movs	r5, #10
 8011b7e:	e011      	b.n	8011ba4 <_puts_r+0x88>
 8011b80:	4b1b      	ldr	r3, [pc, #108]	; (8011bf0 <_puts_r+0xd4>)
 8011b82:	429c      	cmp	r4, r3
 8011b84:	d101      	bne.n	8011b8a <_puts_r+0x6e>
 8011b86:	68ac      	ldr	r4, [r5, #8]
 8011b88:	e7da      	b.n	8011b40 <_puts_r+0x24>
 8011b8a:	4b1a      	ldr	r3, [pc, #104]	; (8011bf4 <_puts_r+0xd8>)
 8011b8c:	429c      	cmp	r4, r3
 8011b8e:	bf08      	it	eq
 8011b90:	68ec      	ldreq	r4, [r5, #12]
 8011b92:	e7d5      	b.n	8011b40 <_puts_r+0x24>
 8011b94:	4621      	mov	r1, r4
 8011b96:	4628      	mov	r0, r5
 8011b98:	f000 f888 	bl	8011cac <__swsetup_r>
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	d0dd      	beq.n	8011b5c <_puts_r+0x40>
 8011ba0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ba6:	07da      	lsls	r2, r3, #31
 8011ba8:	d405      	bmi.n	8011bb6 <_puts_r+0x9a>
 8011baa:	89a3      	ldrh	r3, [r4, #12]
 8011bac:	059b      	lsls	r3, r3, #22
 8011bae:	d402      	bmi.n	8011bb6 <_puts_r+0x9a>
 8011bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bb2:	f000 faa2 	bl	80120fa <__retarget_lock_release_recursive>
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	bd70      	pop	{r4, r5, r6, pc}
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	da04      	bge.n	8011bc8 <_puts_r+0xac>
 8011bbe:	69a2      	ldr	r2, [r4, #24]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	dc06      	bgt.n	8011bd2 <_puts_r+0xb6>
 8011bc4:	290a      	cmp	r1, #10
 8011bc6:	d004      	beq.n	8011bd2 <_puts_r+0xb6>
 8011bc8:	6823      	ldr	r3, [r4, #0]
 8011bca:	1c5a      	adds	r2, r3, #1
 8011bcc:	6022      	str	r2, [r4, #0]
 8011bce:	7019      	strb	r1, [r3, #0]
 8011bd0:	e7c5      	b.n	8011b5e <_puts_r+0x42>
 8011bd2:	4622      	mov	r2, r4
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f000 f817 	bl	8011c08 <__swbuf_r>
 8011bda:	3001      	adds	r0, #1
 8011bdc:	d1bf      	bne.n	8011b5e <_puts_r+0x42>
 8011bde:	e7df      	b.n	8011ba0 <_puts_r+0x84>
 8011be0:	6823      	ldr	r3, [r4, #0]
 8011be2:	250a      	movs	r5, #10
 8011be4:	1c5a      	adds	r2, r3, #1
 8011be6:	6022      	str	r2, [r4, #0]
 8011be8:	701d      	strb	r5, [r3, #0]
 8011bea:	e7db      	b.n	8011ba4 <_puts_r+0x88>
 8011bec:	080143f8 	.word	0x080143f8
 8011bf0:	08014418 	.word	0x08014418
 8011bf4:	080143d8 	.word	0x080143d8

08011bf8 <puts>:
 8011bf8:	4b02      	ldr	r3, [pc, #8]	; (8011c04 <puts+0xc>)
 8011bfa:	4601      	mov	r1, r0
 8011bfc:	6818      	ldr	r0, [r3, #0]
 8011bfe:	f7ff bf8d 	b.w	8011b1c <_puts_r>
 8011c02:	bf00      	nop
 8011c04:	20000160 	.word	0x20000160

08011c08 <__swbuf_r>:
 8011c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0a:	460e      	mov	r6, r1
 8011c0c:	4614      	mov	r4, r2
 8011c0e:	4605      	mov	r5, r0
 8011c10:	b118      	cbz	r0, 8011c1a <__swbuf_r+0x12>
 8011c12:	6983      	ldr	r3, [r0, #24]
 8011c14:	b90b      	cbnz	r3, 8011c1a <__swbuf_r+0x12>
 8011c16:	f000 f9d1 	bl	8011fbc <__sinit>
 8011c1a:	4b21      	ldr	r3, [pc, #132]	; (8011ca0 <__swbuf_r+0x98>)
 8011c1c:	429c      	cmp	r4, r3
 8011c1e:	d12b      	bne.n	8011c78 <__swbuf_r+0x70>
 8011c20:	686c      	ldr	r4, [r5, #4]
 8011c22:	69a3      	ldr	r3, [r4, #24]
 8011c24:	60a3      	str	r3, [r4, #8]
 8011c26:	89a3      	ldrh	r3, [r4, #12]
 8011c28:	071a      	lsls	r2, r3, #28
 8011c2a:	d52f      	bpl.n	8011c8c <__swbuf_r+0x84>
 8011c2c:	6923      	ldr	r3, [r4, #16]
 8011c2e:	b36b      	cbz	r3, 8011c8c <__swbuf_r+0x84>
 8011c30:	6923      	ldr	r3, [r4, #16]
 8011c32:	6820      	ldr	r0, [r4, #0]
 8011c34:	1ac0      	subs	r0, r0, r3
 8011c36:	6963      	ldr	r3, [r4, #20]
 8011c38:	b2f6      	uxtb	r6, r6
 8011c3a:	4283      	cmp	r3, r0
 8011c3c:	4637      	mov	r7, r6
 8011c3e:	dc04      	bgt.n	8011c4a <__swbuf_r+0x42>
 8011c40:	4621      	mov	r1, r4
 8011c42:	4628      	mov	r0, r5
 8011c44:	f000 f926 	bl	8011e94 <_fflush_r>
 8011c48:	bb30      	cbnz	r0, 8011c98 <__swbuf_r+0x90>
 8011c4a:	68a3      	ldr	r3, [r4, #8]
 8011c4c:	3b01      	subs	r3, #1
 8011c4e:	60a3      	str	r3, [r4, #8]
 8011c50:	6823      	ldr	r3, [r4, #0]
 8011c52:	1c5a      	adds	r2, r3, #1
 8011c54:	6022      	str	r2, [r4, #0]
 8011c56:	701e      	strb	r6, [r3, #0]
 8011c58:	6963      	ldr	r3, [r4, #20]
 8011c5a:	3001      	adds	r0, #1
 8011c5c:	4283      	cmp	r3, r0
 8011c5e:	d004      	beq.n	8011c6a <__swbuf_r+0x62>
 8011c60:	89a3      	ldrh	r3, [r4, #12]
 8011c62:	07db      	lsls	r3, r3, #31
 8011c64:	d506      	bpl.n	8011c74 <__swbuf_r+0x6c>
 8011c66:	2e0a      	cmp	r6, #10
 8011c68:	d104      	bne.n	8011c74 <__swbuf_r+0x6c>
 8011c6a:	4621      	mov	r1, r4
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	f000 f911 	bl	8011e94 <_fflush_r>
 8011c72:	b988      	cbnz	r0, 8011c98 <__swbuf_r+0x90>
 8011c74:	4638      	mov	r0, r7
 8011c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c78:	4b0a      	ldr	r3, [pc, #40]	; (8011ca4 <__swbuf_r+0x9c>)
 8011c7a:	429c      	cmp	r4, r3
 8011c7c:	d101      	bne.n	8011c82 <__swbuf_r+0x7a>
 8011c7e:	68ac      	ldr	r4, [r5, #8]
 8011c80:	e7cf      	b.n	8011c22 <__swbuf_r+0x1a>
 8011c82:	4b09      	ldr	r3, [pc, #36]	; (8011ca8 <__swbuf_r+0xa0>)
 8011c84:	429c      	cmp	r4, r3
 8011c86:	bf08      	it	eq
 8011c88:	68ec      	ldreq	r4, [r5, #12]
 8011c8a:	e7ca      	b.n	8011c22 <__swbuf_r+0x1a>
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	4628      	mov	r0, r5
 8011c90:	f000 f80c 	bl	8011cac <__swsetup_r>
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d0cb      	beq.n	8011c30 <__swbuf_r+0x28>
 8011c98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c9c:	e7ea      	b.n	8011c74 <__swbuf_r+0x6c>
 8011c9e:	bf00      	nop
 8011ca0:	080143f8 	.word	0x080143f8
 8011ca4:	08014418 	.word	0x08014418
 8011ca8:	080143d8 	.word	0x080143d8

08011cac <__swsetup_r>:
 8011cac:	4b32      	ldr	r3, [pc, #200]	; (8011d78 <__swsetup_r+0xcc>)
 8011cae:	b570      	push	{r4, r5, r6, lr}
 8011cb0:	681d      	ldr	r5, [r3, #0]
 8011cb2:	4606      	mov	r6, r0
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	b125      	cbz	r5, 8011cc2 <__swsetup_r+0x16>
 8011cb8:	69ab      	ldr	r3, [r5, #24]
 8011cba:	b913      	cbnz	r3, 8011cc2 <__swsetup_r+0x16>
 8011cbc:	4628      	mov	r0, r5
 8011cbe:	f000 f97d 	bl	8011fbc <__sinit>
 8011cc2:	4b2e      	ldr	r3, [pc, #184]	; (8011d7c <__swsetup_r+0xd0>)
 8011cc4:	429c      	cmp	r4, r3
 8011cc6:	d10f      	bne.n	8011ce8 <__swsetup_r+0x3c>
 8011cc8:	686c      	ldr	r4, [r5, #4]
 8011cca:	89a3      	ldrh	r3, [r4, #12]
 8011ccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cd0:	0719      	lsls	r1, r3, #28
 8011cd2:	d42c      	bmi.n	8011d2e <__swsetup_r+0x82>
 8011cd4:	06dd      	lsls	r5, r3, #27
 8011cd6:	d411      	bmi.n	8011cfc <__swsetup_r+0x50>
 8011cd8:	2309      	movs	r3, #9
 8011cda:	6033      	str	r3, [r6, #0]
 8011cdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011ce0:	81a3      	strh	r3, [r4, #12]
 8011ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ce6:	e03e      	b.n	8011d66 <__swsetup_r+0xba>
 8011ce8:	4b25      	ldr	r3, [pc, #148]	; (8011d80 <__swsetup_r+0xd4>)
 8011cea:	429c      	cmp	r4, r3
 8011cec:	d101      	bne.n	8011cf2 <__swsetup_r+0x46>
 8011cee:	68ac      	ldr	r4, [r5, #8]
 8011cf0:	e7eb      	b.n	8011cca <__swsetup_r+0x1e>
 8011cf2:	4b24      	ldr	r3, [pc, #144]	; (8011d84 <__swsetup_r+0xd8>)
 8011cf4:	429c      	cmp	r4, r3
 8011cf6:	bf08      	it	eq
 8011cf8:	68ec      	ldreq	r4, [r5, #12]
 8011cfa:	e7e6      	b.n	8011cca <__swsetup_r+0x1e>
 8011cfc:	0758      	lsls	r0, r3, #29
 8011cfe:	d512      	bpl.n	8011d26 <__swsetup_r+0x7a>
 8011d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d02:	b141      	cbz	r1, 8011d16 <__swsetup_r+0x6a>
 8011d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d08:	4299      	cmp	r1, r3
 8011d0a:	d002      	beq.n	8011d12 <__swsetup_r+0x66>
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f000 fa59 	bl	80121c4 <_free_r>
 8011d12:	2300      	movs	r3, #0
 8011d14:	6363      	str	r3, [r4, #52]	; 0x34
 8011d16:	89a3      	ldrh	r3, [r4, #12]
 8011d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d1c:	81a3      	strh	r3, [r4, #12]
 8011d1e:	2300      	movs	r3, #0
 8011d20:	6063      	str	r3, [r4, #4]
 8011d22:	6923      	ldr	r3, [r4, #16]
 8011d24:	6023      	str	r3, [r4, #0]
 8011d26:	89a3      	ldrh	r3, [r4, #12]
 8011d28:	f043 0308 	orr.w	r3, r3, #8
 8011d2c:	81a3      	strh	r3, [r4, #12]
 8011d2e:	6923      	ldr	r3, [r4, #16]
 8011d30:	b94b      	cbnz	r3, 8011d46 <__swsetup_r+0x9a>
 8011d32:	89a3      	ldrh	r3, [r4, #12]
 8011d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d3c:	d003      	beq.n	8011d46 <__swsetup_r+0x9a>
 8011d3e:	4621      	mov	r1, r4
 8011d40:	4630      	mov	r0, r6
 8011d42:	f000 f9ff 	bl	8012144 <__smakebuf_r>
 8011d46:	89a0      	ldrh	r0, [r4, #12]
 8011d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d4c:	f010 0301 	ands.w	r3, r0, #1
 8011d50:	d00a      	beq.n	8011d68 <__swsetup_r+0xbc>
 8011d52:	2300      	movs	r3, #0
 8011d54:	60a3      	str	r3, [r4, #8]
 8011d56:	6963      	ldr	r3, [r4, #20]
 8011d58:	425b      	negs	r3, r3
 8011d5a:	61a3      	str	r3, [r4, #24]
 8011d5c:	6923      	ldr	r3, [r4, #16]
 8011d5e:	b943      	cbnz	r3, 8011d72 <__swsetup_r+0xc6>
 8011d60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d64:	d1ba      	bne.n	8011cdc <__swsetup_r+0x30>
 8011d66:	bd70      	pop	{r4, r5, r6, pc}
 8011d68:	0781      	lsls	r1, r0, #30
 8011d6a:	bf58      	it	pl
 8011d6c:	6963      	ldrpl	r3, [r4, #20]
 8011d6e:	60a3      	str	r3, [r4, #8]
 8011d70:	e7f4      	b.n	8011d5c <__swsetup_r+0xb0>
 8011d72:	2000      	movs	r0, #0
 8011d74:	e7f7      	b.n	8011d66 <__swsetup_r+0xba>
 8011d76:	bf00      	nop
 8011d78:	20000160 	.word	0x20000160
 8011d7c:	080143f8 	.word	0x080143f8
 8011d80:	08014418 	.word	0x08014418
 8011d84:	080143d8 	.word	0x080143d8

08011d88 <__sflush_r>:
 8011d88:	898a      	ldrh	r2, [r1, #12]
 8011d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d8e:	4605      	mov	r5, r0
 8011d90:	0710      	lsls	r0, r2, #28
 8011d92:	460c      	mov	r4, r1
 8011d94:	d458      	bmi.n	8011e48 <__sflush_r+0xc0>
 8011d96:	684b      	ldr	r3, [r1, #4]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	dc05      	bgt.n	8011da8 <__sflush_r+0x20>
 8011d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	dc02      	bgt.n	8011da8 <__sflush_r+0x20>
 8011da2:	2000      	movs	r0, #0
 8011da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011daa:	2e00      	cmp	r6, #0
 8011dac:	d0f9      	beq.n	8011da2 <__sflush_r+0x1a>
 8011dae:	2300      	movs	r3, #0
 8011db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011db4:	682f      	ldr	r7, [r5, #0]
 8011db6:	602b      	str	r3, [r5, #0]
 8011db8:	d032      	beq.n	8011e20 <__sflush_r+0x98>
 8011dba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011dbc:	89a3      	ldrh	r3, [r4, #12]
 8011dbe:	075a      	lsls	r2, r3, #29
 8011dc0:	d505      	bpl.n	8011dce <__sflush_r+0x46>
 8011dc2:	6863      	ldr	r3, [r4, #4]
 8011dc4:	1ac0      	subs	r0, r0, r3
 8011dc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011dc8:	b10b      	cbz	r3, 8011dce <__sflush_r+0x46>
 8011dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011dcc:	1ac0      	subs	r0, r0, r3
 8011dce:	2300      	movs	r3, #0
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dd4:	6a21      	ldr	r1, [r4, #32]
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	47b0      	blx	r6
 8011dda:	1c43      	adds	r3, r0, #1
 8011ddc:	89a3      	ldrh	r3, [r4, #12]
 8011dde:	d106      	bne.n	8011dee <__sflush_r+0x66>
 8011de0:	6829      	ldr	r1, [r5, #0]
 8011de2:	291d      	cmp	r1, #29
 8011de4:	d82c      	bhi.n	8011e40 <__sflush_r+0xb8>
 8011de6:	4a2a      	ldr	r2, [pc, #168]	; (8011e90 <__sflush_r+0x108>)
 8011de8:	40ca      	lsrs	r2, r1
 8011dea:	07d6      	lsls	r6, r2, #31
 8011dec:	d528      	bpl.n	8011e40 <__sflush_r+0xb8>
 8011dee:	2200      	movs	r2, #0
 8011df0:	6062      	str	r2, [r4, #4]
 8011df2:	04d9      	lsls	r1, r3, #19
 8011df4:	6922      	ldr	r2, [r4, #16]
 8011df6:	6022      	str	r2, [r4, #0]
 8011df8:	d504      	bpl.n	8011e04 <__sflush_r+0x7c>
 8011dfa:	1c42      	adds	r2, r0, #1
 8011dfc:	d101      	bne.n	8011e02 <__sflush_r+0x7a>
 8011dfe:	682b      	ldr	r3, [r5, #0]
 8011e00:	b903      	cbnz	r3, 8011e04 <__sflush_r+0x7c>
 8011e02:	6560      	str	r0, [r4, #84]	; 0x54
 8011e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e06:	602f      	str	r7, [r5, #0]
 8011e08:	2900      	cmp	r1, #0
 8011e0a:	d0ca      	beq.n	8011da2 <__sflush_r+0x1a>
 8011e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e10:	4299      	cmp	r1, r3
 8011e12:	d002      	beq.n	8011e1a <__sflush_r+0x92>
 8011e14:	4628      	mov	r0, r5
 8011e16:	f000 f9d5 	bl	80121c4 <_free_r>
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8011e1e:	e7c1      	b.n	8011da4 <__sflush_r+0x1c>
 8011e20:	6a21      	ldr	r1, [r4, #32]
 8011e22:	2301      	movs	r3, #1
 8011e24:	4628      	mov	r0, r5
 8011e26:	47b0      	blx	r6
 8011e28:	1c41      	adds	r1, r0, #1
 8011e2a:	d1c7      	bne.n	8011dbc <__sflush_r+0x34>
 8011e2c:	682b      	ldr	r3, [r5, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d0c4      	beq.n	8011dbc <__sflush_r+0x34>
 8011e32:	2b1d      	cmp	r3, #29
 8011e34:	d001      	beq.n	8011e3a <__sflush_r+0xb2>
 8011e36:	2b16      	cmp	r3, #22
 8011e38:	d101      	bne.n	8011e3e <__sflush_r+0xb6>
 8011e3a:	602f      	str	r7, [r5, #0]
 8011e3c:	e7b1      	b.n	8011da2 <__sflush_r+0x1a>
 8011e3e:	89a3      	ldrh	r3, [r4, #12]
 8011e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e44:	81a3      	strh	r3, [r4, #12]
 8011e46:	e7ad      	b.n	8011da4 <__sflush_r+0x1c>
 8011e48:	690f      	ldr	r7, [r1, #16]
 8011e4a:	2f00      	cmp	r7, #0
 8011e4c:	d0a9      	beq.n	8011da2 <__sflush_r+0x1a>
 8011e4e:	0793      	lsls	r3, r2, #30
 8011e50:	680e      	ldr	r6, [r1, #0]
 8011e52:	bf08      	it	eq
 8011e54:	694b      	ldreq	r3, [r1, #20]
 8011e56:	600f      	str	r7, [r1, #0]
 8011e58:	bf18      	it	ne
 8011e5a:	2300      	movne	r3, #0
 8011e5c:	eba6 0807 	sub.w	r8, r6, r7
 8011e60:	608b      	str	r3, [r1, #8]
 8011e62:	f1b8 0f00 	cmp.w	r8, #0
 8011e66:	dd9c      	ble.n	8011da2 <__sflush_r+0x1a>
 8011e68:	6a21      	ldr	r1, [r4, #32]
 8011e6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e6c:	4643      	mov	r3, r8
 8011e6e:	463a      	mov	r2, r7
 8011e70:	4628      	mov	r0, r5
 8011e72:	47b0      	blx	r6
 8011e74:	2800      	cmp	r0, #0
 8011e76:	dc06      	bgt.n	8011e86 <__sflush_r+0xfe>
 8011e78:	89a3      	ldrh	r3, [r4, #12]
 8011e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e7e:	81a3      	strh	r3, [r4, #12]
 8011e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e84:	e78e      	b.n	8011da4 <__sflush_r+0x1c>
 8011e86:	4407      	add	r7, r0
 8011e88:	eba8 0800 	sub.w	r8, r8, r0
 8011e8c:	e7e9      	b.n	8011e62 <__sflush_r+0xda>
 8011e8e:	bf00      	nop
 8011e90:	20400001 	.word	0x20400001

08011e94 <_fflush_r>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	690b      	ldr	r3, [r1, #16]
 8011e98:	4605      	mov	r5, r0
 8011e9a:	460c      	mov	r4, r1
 8011e9c:	b913      	cbnz	r3, 8011ea4 <_fflush_r+0x10>
 8011e9e:	2500      	movs	r5, #0
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	bd38      	pop	{r3, r4, r5, pc}
 8011ea4:	b118      	cbz	r0, 8011eae <_fflush_r+0x1a>
 8011ea6:	6983      	ldr	r3, [r0, #24]
 8011ea8:	b90b      	cbnz	r3, 8011eae <_fflush_r+0x1a>
 8011eaa:	f000 f887 	bl	8011fbc <__sinit>
 8011eae:	4b14      	ldr	r3, [pc, #80]	; (8011f00 <_fflush_r+0x6c>)
 8011eb0:	429c      	cmp	r4, r3
 8011eb2:	d11b      	bne.n	8011eec <_fflush_r+0x58>
 8011eb4:	686c      	ldr	r4, [r5, #4]
 8011eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d0ef      	beq.n	8011e9e <_fflush_r+0xa>
 8011ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ec0:	07d0      	lsls	r0, r2, #31
 8011ec2:	d404      	bmi.n	8011ece <_fflush_r+0x3a>
 8011ec4:	0599      	lsls	r1, r3, #22
 8011ec6:	d402      	bmi.n	8011ece <_fflush_r+0x3a>
 8011ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011eca:	f000 f915 	bl	80120f8 <__retarget_lock_acquire_recursive>
 8011ece:	4628      	mov	r0, r5
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	f7ff ff59 	bl	8011d88 <__sflush_r>
 8011ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ed8:	07da      	lsls	r2, r3, #31
 8011eda:	4605      	mov	r5, r0
 8011edc:	d4e0      	bmi.n	8011ea0 <_fflush_r+0xc>
 8011ede:	89a3      	ldrh	r3, [r4, #12]
 8011ee0:	059b      	lsls	r3, r3, #22
 8011ee2:	d4dd      	bmi.n	8011ea0 <_fflush_r+0xc>
 8011ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ee6:	f000 f908 	bl	80120fa <__retarget_lock_release_recursive>
 8011eea:	e7d9      	b.n	8011ea0 <_fflush_r+0xc>
 8011eec:	4b05      	ldr	r3, [pc, #20]	; (8011f04 <_fflush_r+0x70>)
 8011eee:	429c      	cmp	r4, r3
 8011ef0:	d101      	bne.n	8011ef6 <_fflush_r+0x62>
 8011ef2:	68ac      	ldr	r4, [r5, #8]
 8011ef4:	e7df      	b.n	8011eb6 <_fflush_r+0x22>
 8011ef6:	4b04      	ldr	r3, [pc, #16]	; (8011f08 <_fflush_r+0x74>)
 8011ef8:	429c      	cmp	r4, r3
 8011efa:	bf08      	it	eq
 8011efc:	68ec      	ldreq	r4, [r5, #12]
 8011efe:	e7da      	b.n	8011eb6 <_fflush_r+0x22>
 8011f00:	080143f8 	.word	0x080143f8
 8011f04:	08014418 	.word	0x08014418
 8011f08:	080143d8 	.word	0x080143d8

08011f0c <std>:
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	b510      	push	{r4, lr}
 8011f10:	4604      	mov	r4, r0
 8011f12:	e9c0 3300 	strd	r3, r3, [r0]
 8011f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f1a:	6083      	str	r3, [r0, #8]
 8011f1c:	8181      	strh	r1, [r0, #12]
 8011f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8011f20:	81c2      	strh	r2, [r0, #14]
 8011f22:	6183      	str	r3, [r0, #24]
 8011f24:	4619      	mov	r1, r3
 8011f26:	2208      	movs	r2, #8
 8011f28:	305c      	adds	r0, #92	; 0x5c
 8011f2a:	f7ff fdd7 	bl	8011adc <memset>
 8011f2e:	4b05      	ldr	r3, [pc, #20]	; (8011f44 <std+0x38>)
 8011f30:	6263      	str	r3, [r4, #36]	; 0x24
 8011f32:	4b05      	ldr	r3, [pc, #20]	; (8011f48 <std+0x3c>)
 8011f34:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f36:	4b05      	ldr	r3, [pc, #20]	; (8011f4c <std+0x40>)
 8011f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f3a:	4b05      	ldr	r3, [pc, #20]	; (8011f50 <std+0x44>)
 8011f3c:	6224      	str	r4, [r4, #32]
 8011f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8011f40:	bd10      	pop	{r4, pc}
 8011f42:	bf00      	nop
 8011f44:	08012915 	.word	0x08012915
 8011f48:	08012937 	.word	0x08012937
 8011f4c:	0801296f 	.word	0x0801296f
 8011f50:	08012993 	.word	0x08012993

08011f54 <_cleanup_r>:
 8011f54:	4901      	ldr	r1, [pc, #4]	; (8011f5c <_cleanup_r+0x8>)
 8011f56:	f000 b8af 	b.w	80120b8 <_fwalk_reent>
 8011f5a:	bf00      	nop
 8011f5c:	08011e95 	.word	0x08011e95

08011f60 <__sfmoreglue>:
 8011f60:	b570      	push	{r4, r5, r6, lr}
 8011f62:	1e4a      	subs	r2, r1, #1
 8011f64:	2568      	movs	r5, #104	; 0x68
 8011f66:	4355      	muls	r5, r2
 8011f68:	460e      	mov	r6, r1
 8011f6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f6e:	f000 f979 	bl	8012264 <_malloc_r>
 8011f72:	4604      	mov	r4, r0
 8011f74:	b140      	cbz	r0, 8011f88 <__sfmoreglue+0x28>
 8011f76:	2100      	movs	r1, #0
 8011f78:	e9c0 1600 	strd	r1, r6, [r0]
 8011f7c:	300c      	adds	r0, #12
 8011f7e:	60a0      	str	r0, [r4, #8]
 8011f80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f84:	f7ff fdaa 	bl	8011adc <memset>
 8011f88:	4620      	mov	r0, r4
 8011f8a:	bd70      	pop	{r4, r5, r6, pc}

08011f8c <__sfp_lock_acquire>:
 8011f8c:	4801      	ldr	r0, [pc, #4]	; (8011f94 <__sfp_lock_acquire+0x8>)
 8011f8e:	f000 b8b3 	b.w	80120f8 <__retarget_lock_acquire_recursive>
 8011f92:	bf00      	nop
 8011f94:	2001054c 	.word	0x2001054c

08011f98 <__sfp_lock_release>:
 8011f98:	4801      	ldr	r0, [pc, #4]	; (8011fa0 <__sfp_lock_release+0x8>)
 8011f9a:	f000 b8ae 	b.w	80120fa <__retarget_lock_release_recursive>
 8011f9e:	bf00      	nop
 8011fa0:	2001054c 	.word	0x2001054c

08011fa4 <__sinit_lock_acquire>:
 8011fa4:	4801      	ldr	r0, [pc, #4]	; (8011fac <__sinit_lock_acquire+0x8>)
 8011fa6:	f000 b8a7 	b.w	80120f8 <__retarget_lock_acquire_recursive>
 8011faa:	bf00      	nop
 8011fac:	20010547 	.word	0x20010547

08011fb0 <__sinit_lock_release>:
 8011fb0:	4801      	ldr	r0, [pc, #4]	; (8011fb8 <__sinit_lock_release+0x8>)
 8011fb2:	f000 b8a2 	b.w	80120fa <__retarget_lock_release_recursive>
 8011fb6:	bf00      	nop
 8011fb8:	20010547 	.word	0x20010547

08011fbc <__sinit>:
 8011fbc:	b510      	push	{r4, lr}
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	f7ff fff0 	bl	8011fa4 <__sinit_lock_acquire>
 8011fc4:	69a3      	ldr	r3, [r4, #24]
 8011fc6:	b11b      	cbz	r3, 8011fd0 <__sinit+0x14>
 8011fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fcc:	f7ff bff0 	b.w	8011fb0 <__sinit_lock_release>
 8011fd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011fd4:	6523      	str	r3, [r4, #80]	; 0x50
 8011fd6:	4b13      	ldr	r3, [pc, #76]	; (8012024 <__sinit+0x68>)
 8011fd8:	4a13      	ldr	r2, [pc, #76]	; (8012028 <__sinit+0x6c>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8011fde:	42a3      	cmp	r3, r4
 8011fe0:	bf04      	itt	eq
 8011fe2:	2301      	moveq	r3, #1
 8011fe4:	61a3      	streq	r3, [r4, #24]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f000 f820 	bl	801202c <__sfp>
 8011fec:	6060      	str	r0, [r4, #4]
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f000 f81c 	bl	801202c <__sfp>
 8011ff4:	60a0      	str	r0, [r4, #8]
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f000 f818 	bl	801202c <__sfp>
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	60e0      	str	r0, [r4, #12]
 8012000:	2104      	movs	r1, #4
 8012002:	6860      	ldr	r0, [r4, #4]
 8012004:	f7ff ff82 	bl	8011f0c <std>
 8012008:	68a0      	ldr	r0, [r4, #8]
 801200a:	2201      	movs	r2, #1
 801200c:	2109      	movs	r1, #9
 801200e:	f7ff ff7d 	bl	8011f0c <std>
 8012012:	68e0      	ldr	r0, [r4, #12]
 8012014:	2202      	movs	r2, #2
 8012016:	2112      	movs	r1, #18
 8012018:	f7ff ff78 	bl	8011f0c <std>
 801201c:	2301      	movs	r3, #1
 801201e:	61a3      	str	r3, [r4, #24]
 8012020:	e7d2      	b.n	8011fc8 <__sinit+0xc>
 8012022:	bf00      	nop
 8012024:	080143d4 	.word	0x080143d4
 8012028:	08011f55 	.word	0x08011f55

0801202c <__sfp>:
 801202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801202e:	4607      	mov	r7, r0
 8012030:	f7ff ffac 	bl	8011f8c <__sfp_lock_acquire>
 8012034:	4b1e      	ldr	r3, [pc, #120]	; (80120b0 <__sfp+0x84>)
 8012036:	681e      	ldr	r6, [r3, #0]
 8012038:	69b3      	ldr	r3, [r6, #24]
 801203a:	b913      	cbnz	r3, 8012042 <__sfp+0x16>
 801203c:	4630      	mov	r0, r6
 801203e:	f7ff ffbd 	bl	8011fbc <__sinit>
 8012042:	3648      	adds	r6, #72	; 0x48
 8012044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012048:	3b01      	subs	r3, #1
 801204a:	d503      	bpl.n	8012054 <__sfp+0x28>
 801204c:	6833      	ldr	r3, [r6, #0]
 801204e:	b30b      	cbz	r3, 8012094 <__sfp+0x68>
 8012050:	6836      	ldr	r6, [r6, #0]
 8012052:	e7f7      	b.n	8012044 <__sfp+0x18>
 8012054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012058:	b9d5      	cbnz	r5, 8012090 <__sfp+0x64>
 801205a:	4b16      	ldr	r3, [pc, #88]	; (80120b4 <__sfp+0x88>)
 801205c:	60e3      	str	r3, [r4, #12]
 801205e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012062:	6665      	str	r5, [r4, #100]	; 0x64
 8012064:	f000 f847 	bl	80120f6 <__retarget_lock_init_recursive>
 8012068:	f7ff ff96 	bl	8011f98 <__sfp_lock_release>
 801206c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012070:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012074:	6025      	str	r5, [r4, #0]
 8012076:	61a5      	str	r5, [r4, #24]
 8012078:	2208      	movs	r2, #8
 801207a:	4629      	mov	r1, r5
 801207c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012080:	f7ff fd2c 	bl	8011adc <memset>
 8012084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801208c:	4620      	mov	r0, r4
 801208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012090:	3468      	adds	r4, #104	; 0x68
 8012092:	e7d9      	b.n	8012048 <__sfp+0x1c>
 8012094:	2104      	movs	r1, #4
 8012096:	4638      	mov	r0, r7
 8012098:	f7ff ff62 	bl	8011f60 <__sfmoreglue>
 801209c:	4604      	mov	r4, r0
 801209e:	6030      	str	r0, [r6, #0]
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d1d5      	bne.n	8012050 <__sfp+0x24>
 80120a4:	f7ff ff78 	bl	8011f98 <__sfp_lock_release>
 80120a8:	230c      	movs	r3, #12
 80120aa:	603b      	str	r3, [r7, #0]
 80120ac:	e7ee      	b.n	801208c <__sfp+0x60>
 80120ae:	bf00      	nop
 80120b0:	080143d4 	.word	0x080143d4
 80120b4:	ffff0001 	.word	0xffff0001

080120b8 <_fwalk_reent>:
 80120b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120bc:	4606      	mov	r6, r0
 80120be:	4688      	mov	r8, r1
 80120c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120c4:	2700      	movs	r7, #0
 80120c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120ca:	f1b9 0901 	subs.w	r9, r9, #1
 80120ce:	d505      	bpl.n	80120dc <_fwalk_reent+0x24>
 80120d0:	6824      	ldr	r4, [r4, #0]
 80120d2:	2c00      	cmp	r4, #0
 80120d4:	d1f7      	bne.n	80120c6 <_fwalk_reent+0xe>
 80120d6:	4638      	mov	r0, r7
 80120d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120dc:	89ab      	ldrh	r3, [r5, #12]
 80120de:	2b01      	cmp	r3, #1
 80120e0:	d907      	bls.n	80120f2 <_fwalk_reent+0x3a>
 80120e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120e6:	3301      	adds	r3, #1
 80120e8:	d003      	beq.n	80120f2 <_fwalk_reent+0x3a>
 80120ea:	4629      	mov	r1, r5
 80120ec:	4630      	mov	r0, r6
 80120ee:	47c0      	blx	r8
 80120f0:	4307      	orrs	r7, r0
 80120f2:	3568      	adds	r5, #104	; 0x68
 80120f4:	e7e9      	b.n	80120ca <_fwalk_reent+0x12>

080120f6 <__retarget_lock_init_recursive>:
 80120f6:	4770      	bx	lr

080120f8 <__retarget_lock_acquire_recursive>:
 80120f8:	4770      	bx	lr

080120fa <__retarget_lock_release_recursive>:
 80120fa:	4770      	bx	lr

080120fc <__swhatbuf_r>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	460e      	mov	r6, r1
 8012100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012104:	2900      	cmp	r1, #0
 8012106:	b096      	sub	sp, #88	; 0x58
 8012108:	4614      	mov	r4, r2
 801210a:	461d      	mov	r5, r3
 801210c:	da07      	bge.n	801211e <__swhatbuf_r+0x22>
 801210e:	2300      	movs	r3, #0
 8012110:	602b      	str	r3, [r5, #0]
 8012112:	89b3      	ldrh	r3, [r6, #12]
 8012114:	061a      	lsls	r2, r3, #24
 8012116:	d410      	bmi.n	801213a <__swhatbuf_r+0x3e>
 8012118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801211c:	e00e      	b.n	801213c <__swhatbuf_r+0x40>
 801211e:	466a      	mov	r2, sp
 8012120:	f000 fc5e 	bl	80129e0 <_fstat_r>
 8012124:	2800      	cmp	r0, #0
 8012126:	dbf2      	blt.n	801210e <__swhatbuf_r+0x12>
 8012128:	9a01      	ldr	r2, [sp, #4]
 801212a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801212e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012132:	425a      	negs	r2, r3
 8012134:	415a      	adcs	r2, r3
 8012136:	602a      	str	r2, [r5, #0]
 8012138:	e7ee      	b.n	8012118 <__swhatbuf_r+0x1c>
 801213a:	2340      	movs	r3, #64	; 0x40
 801213c:	2000      	movs	r0, #0
 801213e:	6023      	str	r3, [r4, #0]
 8012140:	b016      	add	sp, #88	; 0x58
 8012142:	bd70      	pop	{r4, r5, r6, pc}

08012144 <__smakebuf_r>:
 8012144:	898b      	ldrh	r3, [r1, #12]
 8012146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012148:	079d      	lsls	r5, r3, #30
 801214a:	4606      	mov	r6, r0
 801214c:	460c      	mov	r4, r1
 801214e:	d507      	bpl.n	8012160 <__smakebuf_r+0x1c>
 8012150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	6123      	str	r3, [r4, #16]
 8012158:	2301      	movs	r3, #1
 801215a:	6163      	str	r3, [r4, #20]
 801215c:	b002      	add	sp, #8
 801215e:	bd70      	pop	{r4, r5, r6, pc}
 8012160:	ab01      	add	r3, sp, #4
 8012162:	466a      	mov	r2, sp
 8012164:	f7ff ffca 	bl	80120fc <__swhatbuf_r>
 8012168:	9900      	ldr	r1, [sp, #0]
 801216a:	4605      	mov	r5, r0
 801216c:	4630      	mov	r0, r6
 801216e:	f000 f879 	bl	8012264 <_malloc_r>
 8012172:	b948      	cbnz	r0, 8012188 <__smakebuf_r+0x44>
 8012174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012178:	059a      	lsls	r2, r3, #22
 801217a:	d4ef      	bmi.n	801215c <__smakebuf_r+0x18>
 801217c:	f023 0303 	bic.w	r3, r3, #3
 8012180:	f043 0302 	orr.w	r3, r3, #2
 8012184:	81a3      	strh	r3, [r4, #12]
 8012186:	e7e3      	b.n	8012150 <__smakebuf_r+0xc>
 8012188:	4b0d      	ldr	r3, [pc, #52]	; (80121c0 <__smakebuf_r+0x7c>)
 801218a:	62b3      	str	r3, [r6, #40]	; 0x28
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	6020      	str	r0, [r4, #0]
 8012190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012194:	81a3      	strh	r3, [r4, #12]
 8012196:	9b00      	ldr	r3, [sp, #0]
 8012198:	6163      	str	r3, [r4, #20]
 801219a:	9b01      	ldr	r3, [sp, #4]
 801219c:	6120      	str	r0, [r4, #16]
 801219e:	b15b      	cbz	r3, 80121b8 <__smakebuf_r+0x74>
 80121a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121a4:	4630      	mov	r0, r6
 80121a6:	f000 fc2d 	bl	8012a04 <_isatty_r>
 80121aa:	b128      	cbz	r0, 80121b8 <__smakebuf_r+0x74>
 80121ac:	89a3      	ldrh	r3, [r4, #12]
 80121ae:	f023 0303 	bic.w	r3, r3, #3
 80121b2:	f043 0301 	orr.w	r3, r3, #1
 80121b6:	81a3      	strh	r3, [r4, #12]
 80121b8:	89a0      	ldrh	r0, [r4, #12]
 80121ba:	4305      	orrs	r5, r0
 80121bc:	81a5      	strh	r5, [r4, #12]
 80121be:	e7cd      	b.n	801215c <__smakebuf_r+0x18>
 80121c0:	08011f55 	.word	0x08011f55

080121c4 <_free_r>:
 80121c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121c6:	2900      	cmp	r1, #0
 80121c8:	d048      	beq.n	801225c <_free_r+0x98>
 80121ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121ce:	9001      	str	r0, [sp, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	f1a1 0404 	sub.w	r4, r1, #4
 80121d6:	bfb8      	it	lt
 80121d8:	18e4      	addlt	r4, r4, r3
 80121da:	f000 fc35 	bl	8012a48 <__malloc_lock>
 80121de:	4a20      	ldr	r2, [pc, #128]	; (8012260 <_free_r+0x9c>)
 80121e0:	9801      	ldr	r0, [sp, #4]
 80121e2:	6813      	ldr	r3, [r2, #0]
 80121e4:	4615      	mov	r5, r2
 80121e6:	b933      	cbnz	r3, 80121f6 <_free_r+0x32>
 80121e8:	6063      	str	r3, [r4, #4]
 80121ea:	6014      	str	r4, [r2, #0]
 80121ec:	b003      	add	sp, #12
 80121ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121f2:	f000 bc2f 	b.w	8012a54 <__malloc_unlock>
 80121f6:	42a3      	cmp	r3, r4
 80121f8:	d90b      	bls.n	8012212 <_free_r+0x4e>
 80121fa:	6821      	ldr	r1, [r4, #0]
 80121fc:	1862      	adds	r2, r4, r1
 80121fe:	4293      	cmp	r3, r2
 8012200:	bf04      	itt	eq
 8012202:	681a      	ldreq	r2, [r3, #0]
 8012204:	685b      	ldreq	r3, [r3, #4]
 8012206:	6063      	str	r3, [r4, #4]
 8012208:	bf04      	itt	eq
 801220a:	1852      	addeq	r2, r2, r1
 801220c:	6022      	streq	r2, [r4, #0]
 801220e:	602c      	str	r4, [r5, #0]
 8012210:	e7ec      	b.n	80121ec <_free_r+0x28>
 8012212:	461a      	mov	r2, r3
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	b10b      	cbz	r3, 801221c <_free_r+0x58>
 8012218:	42a3      	cmp	r3, r4
 801221a:	d9fa      	bls.n	8012212 <_free_r+0x4e>
 801221c:	6811      	ldr	r1, [r2, #0]
 801221e:	1855      	adds	r5, r2, r1
 8012220:	42a5      	cmp	r5, r4
 8012222:	d10b      	bne.n	801223c <_free_r+0x78>
 8012224:	6824      	ldr	r4, [r4, #0]
 8012226:	4421      	add	r1, r4
 8012228:	1854      	adds	r4, r2, r1
 801222a:	42a3      	cmp	r3, r4
 801222c:	6011      	str	r1, [r2, #0]
 801222e:	d1dd      	bne.n	80121ec <_free_r+0x28>
 8012230:	681c      	ldr	r4, [r3, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	6053      	str	r3, [r2, #4]
 8012236:	4421      	add	r1, r4
 8012238:	6011      	str	r1, [r2, #0]
 801223a:	e7d7      	b.n	80121ec <_free_r+0x28>
 801223c:	d902      	bls.n	8012244 <_free_r+0x80>
 801223e:	230c      	movs	r3, #12
 8012240:	6003      	str	r3, [r0, #0]
 8012242:	e7d3      	b.n	80121ec <_free_r+0x28>
 8012244:	6825      	ldr	r5, [r4, #0]
 8012246:	1961      	adds	r1, r4, r5
 8012248:	428b      	cmp	r3, r1
 801224a:	bf04      	itt	eq
 801224c:	6819      	ldreq	r1, [r3, #0]
 801224e:	685b      	ldreq	r3, [r3, #4]
 8012250:	6063      	str	r3, [r4, #4]
 8012252:	bf04      	itt	eq
 8012254:	1949      	addeq	r1, r1, r5
 8012256:	6021      	streq	r1, [r4, #0]
 8012258:	6054      	str	r4, [r2, #4]
 801225a:	e7c7      	b.n	80121ec <_free_r+0x28>
 801225c:	b003      	add	sp, #12
 801225e:	bd30      	pop	{r4, r5, pc}
 8012260:	20003644 	.word	0x20003644

08012264 <_malloc_r>:
 8012264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012266:	1ccd      	adds	r5, r1, #3
 8012268:	f025 0503 	bic.w	r5, r5, #3
 801226c:	3508      	adds	r5, #8
 801226e:	2d0c      	cmp	r5, #12
 8012270:	bf38      	it	cc
 8012272:	250c      	movcc	r5, #12
 8012274:	2d00      	cmp	r5, #0
 8012276:	4606      	mov	r6, r0
 8012278:	db01      	blt.n	801227e <_malloc_r+0x1a>
 801227a:	42a9      	cmp	r1, r5
 801227c:	d903      	bls.n	8012286 <_malloc_r+0x22>
 801227e:	230c      	movs	r3, #12
 8012280:	6033      	str	r3, [r6, #0]
 8012282:	2000      	movs	r0, #0
 8012284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012286:	f000 fbdf 	bl	8012a48 <__malloc_lock>
 801228a:	4921      	ldr	r1, [pc, #132]	; (8012310 <_malloc_r+0xac>)
 801228c:	680a      	ldr	r2, [r1, #0]
 801228e:	4614      	mov	r4, r2
 8012290:	b99c      	cbnz	r4, 80122ba <_malloc_r+0x56>
 8012292:	4f20      	ldr	r7, [pc, #128]	; (8012314 <_malloc_r+0xb0>)
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	b923      	cbnz	r3, 80122a2 <_malloc_r+0x3e>
 8012298:	4621      	mov	r1, r4
 801229a:	4630      	mov	r0, r6
 801229c:	f000 fb2a 	bl	80128f4 <_sbrk_r>
 80122a0:	6038      	str	r0, [r7, #0]
 80122a2:	4629      	mov	r1, r5
 80122a4:	4630      	mov	r0, r6
 80122a6:	f000 fb25 	bl	80128f4 <_sbrk_r>
 80122aa:	1c43      	adds	r3, r0, #1
 80122ac:	d123      	bne.n	80122f6 <_malloc_r+0x92>
 80122ae:	230c      	movs	r3, #12
 80122b0:	6033      	str	r3, [r6, #0]
 80122b2:	4630      	mov	r0, r6
 80122b4:	f000 fbce 	bl	8012a54 <__malloc_unlock>
 80122b8:	e7e3      	b.n	8012282 <_malloc_r+0x1e>
 80122ba:	6823      	ldr	r3, [r4, #0]
 80122bc:	1b5b      	subs	r3, r3, r5
 80122be:	d417      	bmi.n	80122f0 <_malloc_r+0x8c>
 80122c0:	2b0b      	cmp	r3, #11
 80122c2:	d903      	bls.n	80122cc <_malloc_r+0x68>
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	441c      	add	r4, r3
 80122c8:	6025      	str	r5, [r4, #0]
 80122ca:	e004      	b.n	80122d6 <_malloc_r+0x72>
 80122cc:	6863      	ldr	r3, [r4, #4]
 80122ce:	42a2      	cmp	r2, r4
 80122d0:	bf0c      	ite	eq
 80122d2:	600b      	streq	r3, [r1, #0]
 80122d4:	6053      	strne	r3, [r2, #4]
 80122d6:	4630      	mov	r0, r6
 80122d8:	f000 fbbc 	bl	8012a54 <__malloc_unlock>
 80122dc:	f104 000b 	add.w	r0, r4, #11
 80122e0:	1d23      	adds	r3, r4, #4
 80122e2:	f020 0007 	bic.w	r0, r0, #7
 80122e6:	1ac2      	subs	r2, r0, r3
 80122e8:	d0cc      	beq.n	8012284 <_malloc_r+0x20>
 80122ea:	1a1b      	subs	r3, r3, r0
 80122ec:	50a3      	str	r3, [r4, r2]
 80122ee:	e7c9      	b.n	8012284 <_malloc_r+0x20>
 80122f0:	4622      	mov	r2, r4
 80122f2:	6864      	ldr	r4, [r4, #4]
 80122f4:	e7cc      	b.n	8012290 <_malloc_r+0x2c>
 80122f6:	1cc4      	adds	r4, r0, #3
 80122f8:	f024 0403 	bic.w	r4, r4, #3
 80122fc:	42a0      	cmp	r0, r4
 80122fe:	d0e3      	beq.n	80122c8 <_malloc_r+0x64>
 8012300:	1a21      	subs	r1, r4, r0
 8012302:	4630      	mov	r0, r6
 8012304:	f000 faf6 	bl	80128f4 <_sbrk_r>
 8012308:	3001      	adds	r0, #1
 801230a:	d1dd      	bne.n	80122c8 <_malloc_r+0x64>
 801230c:	e7cf      	b.n	80122ae <_malloc_r+0x4a>
 801230e:	bf00      	nop
 8012310:	20003644 	.word	0x20003644
 8012314:	20003648 	.word	0x20003648

08012318 <__sfputc_r>:
 8012318:	6893      	ldr	r3, [r2, #8]
 801231a:	3b01      	subs	r3, #1
 801231c:	2b00      	cmp	r3, #0
 801231e:	b410      	push	{r4}
 8012320:	6093      	str	r3, [r2, #8]
 8012322:	da08      	bge.n	8012336 <__sfputc_r+0x1e>
 8012324:	6994      	ldr	r4, [r2, #24]
 8012326:	42a3      	cmp	r3, r4
 8012328:	db01      	blt.n	801232e <__sfputc_r+0x16>
 801232a:	290a      	cmp	r1, #10
 801232c:	d103      	bne.n	8012336 <__sfputc_r+0x1e>
 801232e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012332:	f7ff bc69 	b.w	8011c08 <__swbuf_r>
 8012336:	6813      	ldr	r3, [r2, #0]
 8012338:	1c58      	adds	r0, r3, #1
 801233a:	6010      	str	r0, [r2, #0]
 801233c:	7019      	strb	r1, [r3, #0]
 801233e:	4608      	mov	r0, r1
 8012340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012344:	4770      	bx	lr

08012346 <__sfputs_r>:
 8012346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012348:	4606      	mov	r6, r0
 801234a:	460f      	mov	r7, r1
 801234c:	4614      	mov	r4, r2
 801234e:	18d5      	adds	r5, r2, r3
 8012350:	42ac      	cmp	r4, r5
 8012352:	d101      	bne.n	8012358 <__sfputs_r+0x12>
 8012354:	2000      	movs	r0, #0
 8012356:	e007      	b.n	8012368 <__sfputs_r+0x22>
 8012358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801235c:	463a      	mov	r2, r7
 801235e:	4630      	mov	r0, r6
 8012360:	f7ff ffda 	bl	8012318 <__sfputc_r>
 8012364:	1c43      	adds	r3, r0, #1
 8012366:	d1f3      	bne.n	8012350 <__sfputs_r+0xa>
 8012368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801236c <_vfiprintf_r>:
 801236c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012370:	460d      	mov	r5, r1
 8012372:	b09d      	sub	sp, #116	; 0x74
 8012374:	4614      	mov	r4, r2
 8012376:	4698      	mov	r8, r3
 8012378:	4606      	mov	r6, r0
 801237a:	b118      	cbz	r0, 8012384 <_vfiprintf_r+0x18>
 801237c:	6983      	ldr	r3, [r0, #24]
 801237e:	b90b      	cbnz	r3, 8012384 <_vfiprintf_r+0x18>
 8012380:	f7ff fe1c 	bl	8011fbc <__sinit>
 8012384:	4b89      	ldr	r3, [pc, #548]	; (80125ac <_vfiprintf_r+0x240>)
 8012386:	429d      	cmp	r5, r3
 8012388:	d11b      	bne.n	80123c2 <_vfiprintf_r+0x56>
 801238a:	6875      	ldr	r5, [r6, #4]
 801238c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801238e:	07d9      	lsls	r1, r3, #31
 8012390:	d405      	bmi.n	801239e <_vfiprintf_r+0x32>
 8012392:	89ab      	ldrh	r3, [r5, #12]
 8012394:	059a      	lsls	r2, r3, #22
 8012396:	d402      	bmi.n	801239e <_vfiprintf_r+0x32>
 8012398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801239a:	f7ff fead 	bl	80120f8 <__retarget_lock_acquire_recursive>
 801239e:	89ab      	ldrh	r3, [r5, #12]
 80123a0:	071b      	lsls	r3, r3, #28
 80123a2:	d501      	bpl.n	80123a8 <_vfiprintf_r+0x3c>
 80123a4:	692b      	ldr	r3, [r5, #16]
 80123a6:	b9eb      	cbnz	r3, 80123e4 <_vfiprintf_r+0x78>
 80123a8:	4629      	mov	r1, r5
 80123aa:	4630      	mov	r0, r6
 80123ac:	f7ff fc7e 	bl	8011cac <__swsetup_r>
 80123b0:	b1c0      	cbz	r0, 80123e4 <_vfiprintf_r+0x78>
 80123b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123b4:	07dc      	lsls	r4, r3, #31
 80123b6:	d50e      	bpl.n	80123d6 <_vfiprintf_r+0x6a>
 80123b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123bc:	b01d      	add	sp, #116	; 0x74
 80123be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c2:	4b7b      	ldr	r3, [pc, #492]	; (80125b0 <_vfiprintf_r+0x244>)
 80123c4:	429d      	cmp	r5, r3
 80123c6:	d101      	bne.n	80123cc <_vfiprintf_r+0x60>
 80123c8:	68b5      	ldr	r5, [r6, #8]
 80123ca:	e7df      	b.n	801238c <_vfiprintf_r+0x20>
 80123cc:	4b79      	ldr	r3, [pc, #484]	; (80125b4 <_vfiprintf_r+0x248>)
 80123ce:	429d      	cmp	r5, r3
 80123d0:	bf08      	it	eq
 80123d2:	68f5      	ldreq	r5, [r6, #12]
 80123d4:	e7da      	b.n	801238c <_vfiprintf_r+0x20>
 80123d6:	89ab      	ldrh	r3, [r5, #12]
 80123d8:	0598      	lsls	r0, r3, #22
 80123da:	d4ed      	bmi.n	80123b8 <_vfiprintf_r+0x4c>
 80123dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123de:	f7ff fe8c 	bl	80120fa <__retarget_lock_release_recursive>
 80123e2:	e7e9      	b.n	80123b8 <_vfiprintf_r+0x4c>
 80123e4:	2300      	movs	r3, #0
 80123e6:	9309      	str	r3, [sp, #36]	; 0x24
 80123e8:	2320      	movs	r3, #32
 80123ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80123f2:	2330      	movs	r3, #48	; 0x30
 80123f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80125b8 <_vfiprintf_r+0x24c>
 80123f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123fc:	f04f 0901 	mov.w	r9, #1
 8012400:	4623      	mov	r3, r4
 8012402:	469a      	mov	sl, r3
 8012404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012408:	b10a      	cbz	r2, 801240e <_vfiprintf_r+0xa2>
 801240a:	2a25      	cmp	r2, #37	; 0x25
 801240c:	d1f9      	bne.n	8012402 <_vfiprintf_r+0x96>
 801240e:	ebba 0b04 	subs.w	fp, sl, r4
 8012412:	d00b      	beq.n	801242c <_vfiprintf_r+0xc0>
 8012414:	465b      	mov	r3, fp
 8012416:	4622      	mov	r2, r4
 8012418:	4629      	mov	r1, r5
 801241a:	4630      	mov	r0, r6
 801241c:	f7ff ff93 	bl	8012346 <__sfputs_r>
 8012420:	3001      	adds	r0, #1
 8012422:	f000 80aa 	beq.w	801257a <_vfiprintf_r+0x20e>
 8012426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012428:	445a      	add	r2, fp
 801242a:	9209      	str	r2, [sp, #36]	; 0x24
 801242c:	f89a 3000 	ldrb.w	r3, [sl]
 8012430:	2b00      	cmp	r3, #0
 8012432:	f000 80a2 	beq.w	801257a <_vfiprintf_r+0x20e>
 8012436:	2300      	movs	r3, #0
 8012438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801243c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012440:	f10a 0a01 	add.w	sl, sl, #1
 8012444:	9304      	str	r3, [sp, #16]
 8012446:	9307      	str	r3, [sp, #28]
 8012448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801244c:	931a      	str	r3, [sp, #104]	; 0x68
 801244e:	4654      	mov	r4, sl
 8012450:	2205      	movs	r2, #5
 8012452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012456:	4858      	ldr	r0, [pc, #352]	; (80125b8 <_vfiprintf_r+0x24c>)
 8012458:	f7ed fec2 	bl	80001e0 <memchr>
 801245c:	9a04      	ldr	r2, [sp, #16]
 801245e:	b9d8      	cbnz	r0, 8012498 <_vfiprintf_r+0x12c>
 8012460:	06d1      	lsls	r1, r2, #27
 8012462:	bf44      	itt	mi
 8012464:	2320      	movmi	r3, #32
 8012466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801246a:	0713      	lsls	r3, r2, #28
 801246c:	bf44      	itt	mi
 801246e:	232b      	movmi	r3, #43	; 0x2b
 8012470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012474:	f89a 3000 	ldrb.w	r3, [sl]
 8012478:	2b2a      	cmp	r3, #42	; 0x2a
 801247a:	d015      	beq.n	80124a8 <_vfiprintf_r+0x13c>
 801247c:	9a07      	ldr	r2, [sp, #28]
 801247e:	4654      	mov	r4, sl
 8012480:	2000      	movs	r0, #0
 8012482:	f04f 0c0a 	mov.w	ip, #10
 8012486:	4621      	mov	r1, r4
 8012488:	f811 3b01 	ldrb.w	r3, [r1], #1
 801248c:	3b30      	subs	r3, #48	; 0x30
 801248e:	2b09      	cmp	r3, #9
 8012490:	d94e      	bls.n	8012530 <_vfiprintf_r+0x1c4>
 8012492:	b1b0      	cbz	r0, 80124c2 <_vfiprintf_r+0x156>
 8012494:	9207      	str	r2, [sp, #28]
 8012496:	e014      	b.n	80124c2 <_vfiprintf_r+0x156>
 8012498:	eba0 0308 	sub.w	r3, r0, r8
 801249c:	fa09 f303 	lsl.w	r3, r9, r3
 80124a0:	4313      	orrs	r3, r2
 80124a2:	9304      	str	r3, [sp, #16]
 80124a4:	46a2      	mov	sl, r4
 80124a6:	e7d2      	b.n	801244e <_vfiprintf_r+0xe2>
 80124a8:	9b03      	ldr	r3, [sp, #12]
 80124aa:	1d19      	adds	r1, r3, #4
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	9103      	str	r1, [sp, #12]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	bfbb      	ittet	lt
 80124b4:	425b      	neglt	r3, r3
 80124b6:	f042 0202 	orrlt.w	r2, r2, #2
 80124ba:	9307      	strge	r3, [sp, #28]
 80124bc:	9307      	strlt	r3, [sp, #28]
 80124be:	bfb8      	it	lt
 80124c0:	9204      	strlt	r2, [sp, #16]
 80124c2:	7823      	ldrb	r3, [r4, #0]
 80124c4:	2b2e      	cmp	r3, #46	; 0x2e
 80124c6:	d10c      	bne.n	80124e2 <_vfiprintf_r+0x176>
 80124c8:	7863      	ldrb	r3, [r4, #1]
 80124ca:	2b2a      	cmp	r3, #42	; 0x2a
 80124cc:	d135      	bne.n	801253a <_vfiprintf_r+0x1ce>
 80124ce:	9b03      	ldr	r3, [sp, #12]
 80124d0:	1d1a      	adds	r2, r3, #4
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	9203      	str	r2, [sp, #12]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	bfb8      	it	lt
 80124da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80124de:	3402      	adds	r4, #2
 80124e0:	9305      	str	r3, [sp, #20]
 80124e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80125c8 <_vfiprintf_r+0x25c>
 80124e6:	7821      	ldrb	r1, [r4, #0]
 80124e8:	2203      	movs	r2, #3
 80124ea:	4650      	mov	r0, sl
 80124ec:	f7ed fe78 	bl	80001e0 <memchr>
 80124f0:	b140      	cbz	r0, 8012504 <_vfiprintf_r+0x198>
 80124f2:	2340      	movs	r3, #64	; 0x40
 80124f4:	eba0 000a 	sub.w	r0, r0, sl
 80124f8:	fa03 f000 	lsl.w	r0, r3, r0
 80124fc:	9b04      	ldr	r3, [sp, #16]
 80124fe:	4303      	orrs	r3, r0
 8012500:	3401      	adds	r4, #1
 8012502:	9304      	str	r3, [sp, #16]
 8012504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012508:	482c      	ldr	r0, [pc, #176]	; (80125bc <_vfiprintf_r+0x250>)
 801250a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801250e:	2206      	movs	r2, #6
 8012510:	f7ed fe66 	bl	80001e0 <memchr>
 8012514:	2800      	cmp	r0, #0
 8012516:	d03f      	beq.n	8012598 <_vfiprintf_r+0x22c>
 8012518:	4b29      	ldr	r3, [pc, #164]	; (80125c0 <_vfiprintf_r+0x254>)
 801251a:	bb1b      	cbnz	r3, 8012564 <_vfiprintf_r+0x1f8>
 801251c:	9b03      	ldr	r3, [sp, #12]
 801251e:	3307      	adds	r3, #7
 8012520:	f023 0307 	bic.w	r3, r3, #7
 8012524:	3308      	adds	r3, #8
 8012526:	9303      	str	r3, [sp, #12]
 8012528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801252a:	443b      	add	r3, r7
 801252c:	9309      	str	r3, [sp, #36]	; 0x24
 801252e:	e767      	b.n	8012400 <_vfiprintf_r+0x94>
 8012530:	fb0c 3202 	mla	r2, ip, r2, r3
 8012534:	460c      	mov	r4, r1
 8012536:	2001      	movs	r0, #1
 8012538:	e7a5      	b.n	8012486 <_vfiprintf_r+0x11a>
 801253a:	2300      	movs	r3, #0
 801253c:	3401      	adds	r4, #1
 801253e:	9305      	str	r3, [sp, #20]
 8012540:	4619      	mov	r1, r3
 8012542:	f04f 0c0a 	mov.w	ip, #10
 8012546:	4620      	mov	r0, r4
 8012548:	f810 2b01 	ldrb.w	r2, [r0], #1
 801254c:	3a30      	subs	r2, #48	; 0x30
 801254e:	2a09      	cmp	r2, #9
 8012550:	d903      	bls.n	801255a <_vfiprintf_r+0x1ee>
 8012552:	2b00      	cmp	r3, #0
 8012554:	d0c5      	beq.n	80124e2 <_vfiprintf_r+0x176>
 8012556:	9105      	str	r1, [sp, #20]
 8012558:	e7c3      	b.n	80124e2 <_vfiprintf_r+0x176>
 801255a:	fb0c 2101 	mla	r1, ip, r1, r2
 801255e:	4604      	mov	r4, r0
 8012560:	2301      	movs	r3, #1
 8012562:	e7f0      	b.n	8012546 <_vfiprintf_r+0x1da>
 8012564:	ab03      	add	r3, sp, #12
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	462a      	mov	r2, r5
 801256a:	4b16      	ldr	r3, [pc, #88]	; (80125c4 <_vfiprintf_r+0x258>)
 801256c:	a904      	add	r1, sp, #16
 801256e:	4630      	mov	r0, r6
 8012570:	f3af 8000 	nop.w
 8012574:	4607      	mov	r7, r0
 8012576:	1c78      	adds	r0, r7, #1
 8012578:	d1d6      	bne.n	8012528 <_vfiprintf_r+0x1bc>
 801257a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801257c:	07d9      	lsls	r1, r3, #31
 801257e:	d405      	bmi.n	801258c <_vfiprintf_r+0x220>
 8012580:	89ab      	ldrh	r3, [r5, #12]
 8012582:	059a      	lsls	r2, r3, #22
 8012584:	d402      	bmi.n	801258c <_vfiprintf_r+0x220>
 8012586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012588:	f7ff fdb7 	bl	80120fa <__retarget_lock_release_recursive>
 801258c:	89ab      	ldrh	r3, [r5, #12]
 801258e:	065b      	lsls	r3, r3, #25
 8012590:	f53f af12 	bmi.w	80123b8 <_vfiprintf_r+0x4c>
 8012594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012596:	e711      	b.n	80123bc <_vfiprintf_r+0x50>
 8012598:	ab03      	add	r3, sp, #12
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	462a      	mov	r2, r5
 801259e:	4b09      	ldr	r3, [pc, #36]	; (80125c4 <_vfiprintf_r+0x258>)
 80125a0:	a904      	add	r1, sp, #16
 80125a2:	4630      	mov	r0, r6
 80125a4:	f000 f880 	bl	80126a8 <_printf_i>
 80125a8:	e7e4      	b.n	8012574 <_vfiprintf_r+0x208>
 80125aa:	bf00      	nop
 80125ac:	080143f8 	.word	0x080143f8
 80125b0:	08014418 	.word	0x08014418
 80125b4:	080143d8 	.word	0x080143d8
 80125b8:	08014438 	.word	0x08014438
 80125bc:	08014442 	.word	0x08014442
 80125c0:	00000000 	.word	0x00000000
 80125c4:	08012347 	.word	0x08012347
 80125c8:	0801443e 	.word	0x0801443e

080125cc <_printf_common>:
 80125cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125d0:	4616      	mov	r6, r2
 80125d2:	4699      	mov	r9, r3
 80125d4:	688a      	ldr	r2, [r1, #8]
 80125d6:	690b      	ldr	r3, [r1, #16]
 80125d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80125dc:	4293      	cmp	r3, r2
 80125de:	bfb8      	it	lt
 80125e0:	4613      	movlt	r3, r2
 80125e2:	6033      	str	r3, [r6, #0]
 80125e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125e8:	4607      	mov	r7, r0
 80125ea:	460c      	mov	r4, r1
 80125ec:	b10a      	cbz	r2, 80125f2 <_printf_common+0x26>
 80125ee:	3301      	adds	r3, #1
 80125f0:	6033      	str	r3, [r6, #0]
 80125f2:	6823      	ldr	r3, [r4, #0]
 80125f4:	0699      	lsls	r1, r3, #26
 80125f6:	bf42      	ittt	mi
 80125f8:	6833      	ldrmi	r3, [r6, #0]
 80125fa:	3302      	addmi	r3, #2
 80125fc:	6033      	strmi	r3, [r6, #0]
 80125fe:	6825      	ldr	r5, [r4, #0]
 8012600:	f015 0506 	ands.w	r5, r5, #6
 8012604:	d106      	bne.n	8012614 <_printf_common+0x48>
 8012606:	f104 0a19 	add.w	sl, r4, #25
 801260a:	68e3      	ldr	r3, [r4, #12]
 801260c:	6832      	ldr	r2, [r6, #0]
 801260e:	1a9b      	subs	r3, r3, r2
 8012610:	42ab      	cmp	r3, r5
 8012612:	dc26      	bgt.n	8012662 <_printf_common+0x96>
 8012614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012618:	1e13      	subs	r3, r2, #0
 801261a:	6822      	ldr	r2, [r4, #0]
 801261c:	bf18      	it	ne
 801261e:	2301      	movne	r3, #1
 8012620:	0692      	lsls	r2, r2, #26
 8012622:	d42b      	bmi.n	801267c <_printf_common+0xb0>
 8012624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012628:	4649      	mov	r1, r9
 801262a:	4638      	mov	r0, r7
 801262c:	47c0      	blx	r8
 801262e:	3001      	adds	r0, #1
 8012630:	d01e      	beq.n	8012670 <_printf_common+0xa4>
 8012632:	6823      	ldr	r3, [r4, #0]
 8012634:	68e5      	ldr	r5, [r4, #12]
 8012636:	6832      	ldr	r2, [r6, #0]
 8012638:	f003 0306 	and.w	r3, r3, #6
 801263c:	2b04      	cmp	r3, #4
 801263e:	bf08      	it	eq
 8012640:	1aad      	subeq	r5, r5, r2
 8012642:	68a3      	ldr	r3, [r4, #8]
 8012644:	6922      	ldr	r2, [r4, #16]
 8012646:	bf0c      	ite	eq
 8012648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801264c:	2500      	movne	r5, #0
 801264e:	4293      	cmp	r3, r2
 8012650:	bfc4      	itt	gt
 8012652:	1a9b      	subgt	r3, r3, r2
 8012654:	18ed      	addgt	r5, r5, r3
 8012656:	2600      	movs	r6, #0
 8012658:	341a      	adds	r4, #26
 801265a:	42b5      	cmp	r5, r6
 801265c:	d11a      	bne.n	8012694 <_printf_common+0xc8>
 801265e:	2000      	movs	r0, #0
 8012660:	e008      	b.n	8012674 <_printf_common+0xa8>
 8012662:	2301      	movs	r3, #1
 8012664:	4652      	mov	r2, sl
 8012666:	4649      	mov	r1, r9
 8012668:	4638      	mov	r0, r7
 801266a:	47c0      	blx	r8
 801266c:	3001      	adds	r0, #1
 801266e:	d103      	bne.n	8012678 <_printf_common+0xac>
 8012670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012678:	3501      	adds	r5, #1
 801267a:	e7c6      	b.n	801260a <_printf_common+0x3e>
 801267c:	18e1      	adds	r1, r4, r3
 801267e:	1c5a      	adds	r2, r3, #1
 8012680:	2030      	movs	r0, #48	; 0x30
 8012682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012686:	4422      	add	r2, r4
 8012688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801268c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012690:	3302      	adds	r3, #2
 8012692:	e7c7      	b.n	8012624 <_printf_common+0x58>
 8012694:	2301      	movs	r3, #1
 8012696:	4622      	mov	r2, r4
 8012698:	4649      	mov	r1, r9
 801269a:	4638      	mov	r0, r7
 801269c:	47c0      	blx	r8
 801269e:	3001      	adds	r0, #1
 80126a0:	d0e6      	beq.n	8012670 <_printf_common+0xa4>
 80126a2:	3601      	adds	r6, #1
 80126a4:	e7d9      	b.n	801265a <_printf_common+0x8e>
	...

080126a8 <_printf_i>:
 80126a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126ac:	460c      	mov	r4, r1
 80126ae:	4691      	mov	r9, r2
 80126b0:	7e27      	ldrb	r7, [r4, #24]
 80126b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80126b4:	2f78      	cmp	r7, #120	; 0x78
 80126b6:	4680      	mov	r8, r0
 80126b8:	469a      	mov	sl, r3
 80126ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80126be:	d807      	bhi.n	80126d0 <_printf_i+0x28>
 80126c0:	2f62      	cmp	r7, #98	; 0x62
 80126c2:	d80a      	bhi.n	80126da <_printf_i+0x32>
 80126c4:	2f00      	cmp	r7, #0
 80126c6:	f000 80d8 	beq.w	801287a <_printf_i+0x1d2>
 80126ca:	2f58      	cmp	r7, #88	; 0x58
 80126cc:	f000 80a3 	beq.w	8012816 <_printf_i+0x16e>
 80126d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80126d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80126d8:	e03a      	b.n	8012750 <_printf_i+0xa8>
 80126da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80126de:	2b15      	cmp	r3, #21
 80126e0:	d8f6      	bhi.n	80126d0 <_printf_i+0x28>
 80126e2:	a001      	add	r0, pc, #4	; (adr r0, 80126e8 <_printf_i+0x40>)
 80126e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80126e8:	08012741 	.word	0x08012741
 80126ec:	08012755 	.word	0x08012755
 80126f0:	080126d1 	.word	0x080126d1
 80126f4:	080126d1 	.word	0x080126d1
 80126f8:	080126d1 	.word	0x080126d1
 80126fc:	080126d1 	.word	0x080126d1
 8012700:	08012755 	.word	0x08012755
 8012704:	080126d1 	.word	0x080126d1
 8012708:	080126d1 	.word	0x080126d1
 801270c:	080126d1 	.word	0x080126d1
 8012710:	080126d1 	.word	0x080126d1
 8012714:	08012861 	.word	0x08012861
 8012718:	08012785 	.word	0x08012785
 801271c:	08012843 	.word	0x08012843
 8012720:	080126d1 	.word	0x080126d1
 8012724:	080126d1 	.word	0x080126d1
 8012728:	08012883 	.word	0x08012883
 801272c:	080126d1 	.word	0x080126d1
 8012730:	08012785 	.word	0x08012785
 8012734:	080126d1 	.word	0x080126d1
 8012738:	080126d1 	.word	0x080126d1
 801273c:	0801284b 	.word	0x0801284b
 8012740:	680b      	ldr	r3, [r1, #0]
 8012742:	1d1a      	adds	r2, r3, #4
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	600a      	str	r2, [r1, #0]
 8012748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801274c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012750:	2301      	movs	r3, #1
 8012752:	e0a3      	b.n	801289c <_printf_i+0x1f4>
 8012754:	6825      	ldr	r5, [r4, #0]
 8012756:	6808      	ldr	r0, [r1, #0]
 8012758:	062e      	lsls	r6, r5, #24
 801275a:	f100 0304 	add.w	r3, r0, #4
 801275e:	d50a      	bpl.n	8012776 <_printf_i+0xce>
 8012760:	6805      	ldr	r5, [r0, #0]
 8012762:	600b      	str	r3, [r1, #0]
 8012764:	2d00      	cmp	r5, #0
 8012766:	da03      	bge.n	8012770 <_printf_i+0xc8>
 8012768:	232d      	movs	r3, #45	; 0x2d
 801276a:	426d      	negs	r5, r5
 801276c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012770:	485e      	ldr	r0, [pc, #376]	; (80128ec <_printf_i+0x244>)
 8012772:	230a      	movs	r3, #10
 8012774:	e019      	b.n	80127aa <_printf_i+0x102>
 8012776:	f015 0f40 	tst.w	r5, #64	; 0x40
 801277a:	6805      	ldr	r5, [r0, #0]
 801277c:	600b      	str	r3, [r1, #0]
 801277e:	bf18      	it	ne
 8012780:	b22d      	sxthne	r5, r5
 8012782:	e7ef      	b.n	8012764 <_printf_i+0xbc>
 8012784:	680b      	ldr	r3, [r1, #0]
 8012786:	6825      	ldr	r5, [r4, #0]
 8012788:	1d18      	adds	r0, r3, #4
 801278a:	6008      	str	r0, [r1, #0]
 801278c:	0628      	lsls	r0, r5, #24
 801278e:	d501      	bpl.n	8012794 <_printf_i+0xec>
 8012790:	681d      	ldr	r5, [r3, #0]
 8012792:	e002      	b.n	801279a <_printf_i+0xf2>
 8012794:	0669      	lsls	r1, r5, #25
 8012796:	d5fb      	bpl.n	8012790 <_printf_i+0xe8>
 8012798:	881d      	ldrh	r5, [r3, #0]
 801279a:	4854      	ldr	r0, [pc, #336]	; (80128ec <_printf_i+0x244>)
 801279c:	2f6f      	cmp	r7, #111	; 0x6f
 801279e:	bf0c      	ite	eq
 80127a0:	2308      	moveq	r3, #8
 80127a2:	230a      	movne	r3, #10
 80127a4:	2100      	movs	r1, #0
 80127a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80127aa:	6866      	ldr	r6, [r4, #4]
 80127ac:	60a6      	str	r6, [r4, #8]
 80127ae:	2e00      	cmp	r6, #0
 80127b0:	bfa2      	ittt	ge
 80127b2:	6821      	ldrge	r1, [r4, #0]
 80127b4:	f021 0104 	bicge.w	r1, r1, #4
 80127b8:	6021      	strge	r1, [r4, #0]
 80127ba:	b90d      	cbnz	r5, 80127c0 <_printf_i+0x118>
 80127bc:	2e00      	cmp	r6, #0
 80127be:	d04d      	beq.n	801285c <_printf_i+0x1b4>
 80127c0:	4616      	mov	r6, r2
 80127c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80127c6:	fb03 5711 	mls	r7, r3, r1, r5
 80127ca:	5dc7      	ldrb	r7, [r0, r7]
 80127cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127d0:	462f      	mov	r7, r5
 80127d2:	42bb      	cmp	r3, r7
 80127d4:	460d      	mov	r5, r1
 80127d6:	d9f4      	bls.n	80127c2 <_printf_i+0x11a>
 80127d8:	2b08      	cmp	r3, #8
 80127da:	d10b      	bne.n	80127f4 <_printf_i+0x14c>
 80127dc:	6823      	ldr	r3, [r4, #0]
 80127de:	07df      	lsls	r7, r3, #31
 80127e0:	d508      	bpl.n	80127f4 <_printf_i+0x14c>
 80127e2:	6923      	ldr	r3, [r4, #16]
 80127e4:	6861      	ldr	r1, [r4, #4]
 80127e6:	4299      	cmp	r1, r3
 80127e8:	bfde      	ittt	le
 80127ea:	2330      	movle	r3, #48	; 0x30
 80127ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80127f4:	1b92      	subs	r2, r2, r6
 80127f6:	6122      	str	r2, [r4, #16]
 80127f8:	f8cd a000 	str.w	sl, [sp]
 80127fc:	464b      	mov	r3, r9
 80127fe:	aa03      	add	r2, sp, #12
 8012800:	4621      	mov	r1, r4
 8012802:	4640      	mov	r0, r8
 8012804:	f7ff fee2 	bl	80125cc <_printf_common>
 8012808:	3001      	adds	r0, #1
 801280a:	d14c      	bne.n	80128a6 <_printf_i+0x1fe>
 801280c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012810:	b004      	add	sp, #16
 8012812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012816:	4835      	ldr	r0, [pc, #212]	; (80128ec <_printf_i+0x244>)
 8012818:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801281c:	6823      	ldr	r3, [r4, #0]
 801281e:	680e      	ldr	r6, [r1, #0]
 8012820:	061f      	lsls	r7, r3, #24
 8012822:	f856 5b04 	ldr.w	r5, [r6], #4
 8012826:	600e      	str	r6, [r1, #0]
 8012828:	d514      	bpl.n	8012854 <_printf_i+0x1ac>
 801282a:	07d9      	lsls	r1, r3, #31
 801282c:	bf44      	itt	mi
 801282e:	f043 0320 	orrmi.w	r3, r3, #32
 8012832:	6023      	strmi	r3, [r4, #0]
 8012834:	b91d      	cbnz	r5, 801283e <_printf_i+0x196>
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	f023 0320 	bic.w	r3, r3, #32
 801283c:	6023      	str	r3, [r4, #0]
 801283e:	2310      	movs	r3, #16
 8012840:	e7b0      	b.n	80127a4 <_printf_i+0xfc>
 8012842:	6823      	ldr	r3, [r4, #0]
 8012844:	f043 0320 	orr.w	r3, r3, #32
 8012848:	6023      	str	r3, [r4, #0]
 801284a:	2378      	movs	r3, #120	; 0x78
 801284c:	4828      	ldr	r0, [pc, #160]	; (80128f0 <_printf_i+0x248>)
 801284e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012852:	e7e3      	b.n	801281c <_printf_i+0x174>
 8012854:	065e      	lsls	r6, r3, #25
 8012856:	bf48      	it	mi
 8012858:	b2ad      	uxthmi	r5, r5
 801285a:	e7e6      	b.n	801282a <_printf_i+0x182>
 801285c:	4616      	mov	r6, r2
 801285e:	e7bb      	b.n	80127d8 <_printf_i+0x130>
 8012860:	680b      	ldr	r3, [r1, #0]
 8012862:	6826      	ldr	r6, [r4, #0]
 8012864:	6960      	ldr	r0, [r4, #20]
 8012866:	1d1d      	adds	r5, r3, #4
 8012868:	600d      	str	r5, [r1, #0]
 801286a:	0635      	lsls	r5, r6, #24
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	d501      	bpl.n	8012874 <_printf_i+0x1cc>
 8012870:	6018      	str	r0, [r3, #0]
 8012872:	e002      	b.n	801287a <_printf_i+0x1d2>
 8012874:	0671      	lsls	r1, r6, #25
 8012876:	d5fb      	bpl.n	8012870 <_printf_i+0x1c8>
 8012878:	8018      	strh	r0, [r3, #0]
 801287a:	2300      	movs	r3, #0
 801287c:	6123      	str	r3, [r4, #16]
 801287e:	4616      	mov	r6, r2
 8012880:	e7ba      	b.n	80127f8 <_printf_i+0x150>
 8012882:	680b      	ldr	r3, [r1, #0]
 8012884:	1d1a      	adds	r2, r3, #4
 8012886:	600a      	str	r2, [r1, #0]
 8012888:	681e      	ldr	r6, [r3, #0]
 801288a:	6862      	ldr	r2, [r4, #4]
 801288c:	2100      	movs	r1, #0
 801288e:	4630      	mov	r0, r6
 8012890:	f7ed fca6 	bl	80001e0 <memchr>
 8012894:	b108      	cbz	r0, 801289a <_printf_i+0x1f2>
 8012896:	1b80      	subs	r0, r0, r6
 8012898:	6060      	str	r0, [r4, #4]
 801289a:	6863      	ldr	r3, [r4, #4]
 801289c:	6123      	str	r3, [r4, #16]
 801289e:	2300      	movs	r3, #0
 80128a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80128a4:	e7a8      	b.n	80127f8 <_printf_i+0x150>
 80128a6:	6923      	ldr	r3, [r4, #16]
 80128a8:	4632      	mov	r2, r6
 80128aa:	4649      	mov	r1, r9
 80128ac:	4640      	mov	r0, r8
 80128ae:	47d0      	blx	sl
 80128b0:	3001      	adds	r0, #1
 80128b2:	d0ab      	beq.n	801280c <_printf_i+0x164>
 80128b4:	6823      	ldr	r3, [r4, #0]
 80128b6:	079b      	lsls	r3, r3, #30
 80128b8:	d413      	bmi.n	80128e2 <_printf_i+0x23a>
 80128ba:	68e0      	ldr	r0, [r4, #12]
 80128bc:	9b03      	ldr	r3, [sp, #12]
 80128be:	4298      	cmp	r0, r3
 80128c0:	bfb8      	it	lt
 80128c2:	4618      	movlt	r0, r3
 80128c4:	e7a4      	b.n	8012810 <_printf_i+0x168>
 80128c6:	2301      	movs	r3, #1
 80128c8:	4632      	mov	r2, r6
 80128ca:	4649      	mov	r1, r9
 80128cc:	4640      	mov	r0, r8
 80128ce:	47d0      	blx	sl
 80128d0:	3001      	adds	r0, #1
 80128d2:	d09b      	beq.n	801280c <_printf_i+0x164>
 80128d4:	3501      	adds	r5, #1
 80128d6:	68e3      	ldr	r3, [r4, #12]
 80128d8:	9903      	ldr	r1, [sp, #12]
 80128da:	1a5b      	subs	r3, r3, r1
 80128dc:	42ab      	cmp	r3, r5
 80128de:	dcf2      	bgt.n	80128c6 <_printf_i+0x21e>
 80128e0:	e7eb      	b.n	80128ba <_printf_i+0x212>
 80128e2:	2500      	movs	r5, #0
 80128e4:	f104 0619 	add.w	r6, r4, #25
 80128e8:	e7f5      	b.n	80128d6 <_printf_i+0x22e>
 80128ea:	bf00      	nop
 80128ec:	08014449 	.word	0x08014449
 80128f0:	0801445a 	.word	0x0801445a

080128f4 <_sbrk_r>:
 80128f4:	b538      	push	{r3, r4, r5, lr}
 80128f6:	4d06      	ldr	r5, [pc, #24]	; (8012910 <_sbrk_r+0x1c>)
 80128f8:	2300      	movs	r3, #0
 80128fa:	4604      	mov	r4, r0
 80128fc:	4608      	mov	r0, r1
 80128fe:	602b      	str	r3, [r5, #0]
 8012900:	f7f1 fa16 	bl	8003d30 <_sbrk>
 8012904:	1c43      	adds	r3, r0, #1
 8012906:	d102      	bne.n	801290e <_sbrk_r+0x1a>
 8012908:	682b      	ldr	r3, [r5, #0]
 801290a:	b103      	cbz	r3, 801290e <_sbrk_r+0x1a>
 801290c:	6023      	str	r3, [r4, #0]
 801290e:	bd38      	pop	{r3, r4, r5, pc}
 8012910:	20010550 	.word	0x20010550

08012914 <__sread>:
 8012914:	b510      	push	{r4, lr}
 8012916:	460c      	mov	r4, r1
 8012918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801291c:	f000 f8a0 	bl	8012a60 <_read_r>
 8012920:	2800      	cmp	r0, #0
 8012922:	bfab      	itete	ge
 8012924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012926:	89a3      	ldrhlt	r3, [r4, #12]
 8012928:	181b      	addge	r3, r3, r0
 801292a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801292e:	bfac      	ite	ge
 8012930:	6563      	strge	r3, [r4, #84]	; 0x54
 8012932:	81a3      	strhlt	r3, [r4, #12]
 8012934:	bd10      	pop	{r4, pc}

08012936 <__swrite>:
 8012936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801293a:	461f      	mov	r7, r3
 801293c:	898b      	ldrh	r3, [r1, #12]
 801293e:	05db      	lsls	r3, r3, #23
 8012940:	4605      	mov	r5, r0
 8012942:	460c      	mov	r4, r1
 8012944:	4616      	mov	r6, r2
 8012946:	d505      	bpl.n	8012954 <__swrite+0x1e>
 8012948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801294c:	2302      	movs	r3, #2
 801294e:	2200      	movs	r2, #0
 8012950:	f000 f868 	bl	8012a24 <_lseek_r>
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801295a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801295e:	81a3      	strh	r3, [r4, #12]
 8012960:	4632      	mov	r2, r6
 8012962:	463b      	mov	r3, r7
 8012964:	4628      	mov	r0, r5
 8012966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801296a:	f000 b817 	b.w	801299c <_write_r>

0801296e <__sseek>:
 801296e:	b510      	push	{r4, lr}
 8012970:	460c      	mov	r4, r1
 8012972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012976:	f000 f855 	bl	8012a24 <_lseek_r>
 801297a:	1c43      	adds	r3, r0, #1
 801297c:	89a3      	ldrh	r3, [r4, #12]
 801297e:	bf15      	itete	ne
 8012980:	6560      	strne	r0, [r4, #84]	; 0x54
 8012982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801298a:	81a3      	strheq	r3, [r4, #12]
 801298c:	bf18      	it	ne
 801298e:	81a3      	strhne	r3, [r4, #12]
 8012990:	bd10      	pop	{r4, pc}

08012992 <__sclose>:
 8012992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012996:	f000 b813 	b.w	80129c0 <_close_r>
	...

0801299c <_write_r>:
 801299c:	b538      	push	{r3, r4, r5, lr}
 801299e:	4d07      	ldr	r5, [pc, #28]	; (80129bc <_write_r+0x20>)
 80129a0:	4604      	mov	r4, r0
 80129a2:	4608      	mov	r0, r1
 80129a4:	4611      	mov	r1, r2
 80129a6:	2200      	movs	r2, #0
 80129a8:	602a      	str	r2, [r5, #0]
 80129aa:	461a      	mov	r2, r3
 80129ac:	f7f1 f96f 	bl	8003c8e <_write>
 80129b0:	1c43      	adds	r3, r0, #1
 80129b2:	d102      	bne.n	80129ba <_write_r+0x1e>
 80129b4:	682b      	ldr	r3, [r5, #0]
 80129b6:	b103      	cbz	r3, 80129ba <_write_r+0x1e>
 80129b8:	6023      	str	r3, [r4, #0]
 80129ba:	bd38      	pop	{r3, r4, r5, pc}
 80129bc:	20010550 	.word	0x20010550

080129c0 <_close_r>:
 80129c0:	b538      	push	{r3, r4, r5, lr}
 80129c2:	4d06      	ldr	r5, [pc, #24]	; (80129dc <_close_r+0x1c>)
 80129c4:	2300      	movs	r3, #0
 80129c6:	4604      	mov	r4, r0
 80129c8:	4608      	mov	r0, r1
 80129ca:	602b      	str	r3, [r5, #0]
 80129cc:	f7f1 f97b 	bl	8003cc6 <_close>
 80129d0:	1c43      	adds	r3, r0, #1
 80129d2:	d102      	bne.n	80129da <_close_r+0x1a>
 80129d4:	682b      	ldr	r3, [r5, #0]
 80129d6:	b103      	cbz	r3, 80129da <_close_r+0x1a>
 80129d8:	6023      	str	r3, [r4, #0]
 80129da:	bd38      	pop	{r3, r4, r5, pc}
 80129dc:	20010550 	.word	0x20010550

080129e0 <_fstat_r>:
 80129e0:	b538      	push	{r3, r4, r5, lr}
 80129e2:	4d07      	ldr	r5, [pc, #28]	; (8012a00 <_fstat_r+0x20>)
 80129e4:	2300      	movs	r3, #0
 80129e6:	4604      	mov	r4, r0
 80129e8:	4608      	mov	r0, r1
 80129ea:	4611      	mov	r1, r2
 80129ec:	602b      	str	r3, [r5, #0]
 80129ee:	f7f1 f976 	bl	8003cde <_fstat>
 80129f2:	1c43      	adds	r3, r0, #1
 80129f4:	d102      	bne.n	80129fc <_fstat_r+0x1c>
 80129f6:	682b      	ldr	r3, [r5, #0]
 80129f8:	b103      	cbz	r3, 80129fc <_fstat_r+0x1c>
 80129fa:	6023      	str	r3, [r4, #0]
 80129fc:	bd38      	pop	{r3, r4, r5, pc}
 80129fe:	bf00      	nop
 8012a00:	20010550 	.word	0x20010550

08012a04 <_isatty_r>:
 8012a04:	b538      	push	{r3, r4, r5, lr}
 8012a06:	4d06      	ldr	r5, [pc, #24]	; (8012a20 <_isatty_r+0x1c>)
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	4608      	mov	r0, r1
 8012a0e:	602b      	str	r3, [r5, #0]
 8012a10:	f7f1 f975 	bl	8003cfe <_isatty>
 8012a14:	1c43      	adds	r3, r0, #1
 8012a16:	d102      	bne.n	8012a1e <_isatty_r+0x1a>
 8012a18:	682b      	ldr	r3, [r5, #0]
 8012a1a:	b103      	cbz	r3, 8012a1e <_isatty_r+0x1a>
 8012a1c:	6023      	str	r3, [r4, #0]
 8012a1e:	bd38      	pop	{r3, r4, r5, pc}
 8012a20:	20010550 	.word	0x20010550

08012a24 <_lseek_r>:
 8012a24:	b538      	push	{r3, r4, r5, lr}
 8012a26:	4d07      	ldr	r5, [pc, #28]	; (8012a44 <_lseek_r+0x20>)
 8012a28:	4604      	mov	r4, r0
 8012a2a:	4608      	mov	r0, r1
 8012a2c:	4611      	mov	r1, r2
 8012a2e:	2200      	movs	r2, #0
 8012a30:	602a      	str	r2, [r5, #0]
 8012a32:	461a      	mov	r2, r3
 8012a34:	f7f1 f96e 	bl	8003d14 <_lseek>
 8012a38:	1c43      	adds	r3, r0, #1
 8012a3a:	d102      	bne.n	8012a42 <_lseek_r+0x1e>
 8012a3c:	682b      	ldr	r3, [r5, #0]
 8012a3e:	b103      	cbz	r3, 8012a42 <_lseek_r+0x1e>
 8012a40:	6023      	str	r3, [r4, #0]
 8012a42:	bd38      	pop	{r3, r4, r5, pc}
 8012a44:	20010550 	.word	0x20010550

08012a48 <__malloc_lock>:
 8012a48:	4801      	ldr	r0, [pc, #4]	; (8012a50 <__malloc_lock+0x8>)
 8012a4a:	f7ff bb55 	b.w	80120f8 <__retarget_lock_acquire_recursive>
 8012a4e:	bf00      	nop
 8012a50:	20010548 	.word	0x20010548

08012a54 <__malloc_unlock>:
 8012a54:	4801      	ldr	r0, [pc, #4]	; (8012a5c <__malloc_unlock+0x8>)
 8012a56:	f7ff bb50 	b.w	80120fa <__retarget_lock_release_recursive>
 8012a5a:	bf00      	nop
 8012a5c:	20010548 	.word	0x20010548

08012a60 <_read_r>:
 8012a60:	b538      	push	{r3, r4, r5, lr}
 8012a62:	4d07      	ldr	r5, [pc, #28]	; (8012a80 <_read_r+0x20>)
 8012a64:	4604      	mov	r4, r0
 8012a66:	4608      	mov	r0, r1
 8012a68:	4611      	mov	r1, r2
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	602a      	str	r2, [r5, #0]
 8012a6e:	461a      	mov	r2, r3
 8012a70:	f7f1 f8f0 	bl	8003c54 <_read>
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	d102      	bne.n	8012a7e <_read_r+0x1e>
 8012a78:	682b      	ldr	r3, [r5, #0]
 8012a7a:	b103      	cbz	r3, 8012a7e <_read_r+0x1e>
 8012a7c:	6023      	str	r3, [r4, #0]
 8012a7e:	bd38      	pop	{r3, r4, r5, pc}
 8012a80:	20010550 	.word	0x20010550
 8012a84:	00000000 	.word	0x00000000

08012a88 <tan>:
 8012a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a8a:	ec53 2b10 	vmov	r2, r3, d0
 8012a8e:	4814      	ldr	r0, [pc, #80]	; (8012ae0 <tan+0x58>)
 8012a90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012a94:	4281      	cmp	r1, r0
 8012a96:	dc05      	bgt.n	8012aa4 <tan+0x1c>
 8012a98:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8012ad8 <tan+0x50>
 8012a9c:	2001      	movs	r0, #1
 8012a9e:	f000 fd6f 	bl	8013580 <__kernel_tan>
 8012aa2:	e009      	b.n	8012ab8 <tan+0x30>
 8012aa4:	480f      	ldr	r0, [pc, #60]	; (8012ae4 <tan+0x5c>)
 8012aa6:	4281      	cmp	r1, r0
 8012aa8:	dd09      	ble.n	8012abe <tan+0x36>
 8012aaa:	ee10 0a10 	vmov	r0, s0
 8012aae:	4619      	mov	r1, r3
 8012ab0:	f7ed fbea 	bl	8000288 <__aeabi_dsub>
 8012ab4:	ec41 0b10 	vmov	d0, r0, r1
 8012ab8:	b005      	add	sp, #20
 8012aba:	f85d fb04 	ldr.w	pc, [sp], #4
 8012abe:	4668      	mov	r0, sp
 8012ac0:	f000 f812 	bl	8012ae8 <__ieee754_rem_pio2>
 8012ac4:	0040      	lsls	r0, r0, #1
 8012ac6:	f000 0002 	and.w	r0, r0, #2
 8012aca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012ace:	ed9d 0b00 	vldr	d0, [sp]
 8012ad2:	f1c0 0001 	rsb	r0, r0, #1
 8012ad6:	e7e2      	b.n	8012a9e <tan+0x16>
	...
 8012ae0:	3fe921fb 	.word	0x3fe921fb
 8012ae4:	7fefffff 	.word	0x7fefffff

08012ae8 <__ieee754_rem_pio2>:
 8012ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aec:	ed2d 8b02 	vpush	{d8}
 8012af0:	ec55 4b10 	vmov	r4, r5, d0
 8012af4:	4bca      	ldr	r3, [pc, #808]	; (8012e20 <__ieee754_rem_pio2+0x338>)
 8012af6:	b08b      	sub	sp, #44	; 0x2c
 8012af8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012afc:	4598      	cmp	r8, r3
 8012afe:	4682      	mov	sl, r0
 8012b00:	9502      	str	r5, [sp, #8]
 8012b02:	dc08      	bgt.n	8012b16 <__ieee754_rem_pio2+0x2e>
 8012b04:	2200      	movs	r2, #0
 8012b06:	2300      	movs	r3, #0
 8012b08:	ed80 0b00 	vstr	d0, [r0]
 8012b0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012b10:	f04f 0b00 	mov.w	fp, #0
 8012b14:	e028      	b.n	8012b68 <__ieee754_rem_pio2+0x80>
 8012b16:	4bc3      	ldr	r3, [pc, #780]	; (8012e24 <__ieee754_rem_pio2+0x33c>)
 8012b18:	4598      	cmp	r8, r3
 8012b1a:	dc78      	bgt.n	8012c0e <__ieee754_rem_pio2+0x126>
 8012b1c:	9b02      	ldr	r3, [sp, #8]
 8012b1e:	4ec2      	ldr	r6, [pc, #776]	; (8012e28 <__ieee754_rem_pio2+0x340>)
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	ee10 0a10 	vmov	r0, s0
 8012b26:	a3b0      	add	r3, pc, #704	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x300>)
 8012b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2c:	4629      	mov	r1, r5
 8012b2e:	dd39      	ble.n	8012ba4 <__ieee754_rem_pio2+0xbc>
 8012b30:	f7ed fbaa 	bl	8000288 <__aeabi_dsub>
 8012b34:	45b0      	cmp	r8, r6
 8012b36:	4604      	mov	r4, r0
 8012b38:	460d      	mov	r5, r1
 8012b3a:	d01b      	beq.n	8012b74 <__ieee754_rem_pio2+0x8c>
 8012b3c:	a3ac      	add	r3, pc, #688	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x308>)
 8012b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b42:	f7ed fba1 	bl	8000288 <__aeabi_dsub>
 8012b46:	4602      	mov	r2, r0
 8012b48:	460b      	mov	r3, r1
 8012b4a:	e9ca 2300 	strd	r2, r3, [sl]
 8012b4e:	4620      	mov	r0, r4
 8012b50:	4629      	mov	r1, r5
 8012b52:	f7ed fb99 	bl	8000288 <__aeabi_dsub>
 8012b56:	a3a6      	add	r3, pc, #664	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x308>)
 8012b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5c:	f7ed fb94 	bl	8000288 <__aeabi_dsub>
 8012b60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b64:	f04f 0b01 	mov.w	fp, #1
 8012b68:	4658      	mov	r0, fp
 8012b6a:	b00b      	add	sp, #44	; 0x2c
 8012b6c:	ecbd 8b02 	vpop	{d8}
 8012b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b74:	a3a0      	add	r3, pc, #640	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x310>)
 8012b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7a:	f7ed fb85 	bl	8000288 <__aeabi_dsub>
 8012b7e:	a3a0      	add	r3, pc, #640	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x318>)
 8012b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b84:	4604      	mov	r4, r0
 8012b86:	460d      	mov	r5, r1
 8012b88:	f7ed fb7e 	bl	8000288 <__aeabi_dsub>
 8012b8c:	4602      	mov	r2, r0
 8012b8e:	460b      	mov	r3, r1
 8012b90:	e9ca 2300 	strd	r2, r3, [sl]
 8012b94:	4620      	mov	r0, r4
 8012b96:	4629      	mov	r1, r5
 8012b98:	f7ed fb76 	bl	8000288 <__aeabi_dsub>
 8012b9c:	a398      	add	r3, pc, #608	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x318>)
 8012b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba2:	e7db      	b.n	8012b5c <__ieee754_rem_pio2+0x74>
 8012ba4:	f7ed fb72 	bl	800028c <__adddf3>
 8012ba8:	45b0      	cmp	r8, r6
 8012baa:	4604      	mov	r4, r0
 8012bac:	460d      	mov	r5, r1
 8012bae:	d016      	beq.n	8012bde <__ieee754_rem_pio2+0xf6>
 8012bb0:	a38f      	add	r3, pc, #572	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x308>)
 8012bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb6:	f7ed fb69 	bl	800028c <__adddf3>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	e9ca 2300 	strd	r2, r3, [sl]
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	f7ed fb5f 	bl	8000288 <__aeabi_dsub>
 8012bca:	a389      	add	r3, pc, #548	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x308>)
 8012bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd0:	f7ed fb5c 	bl	800028c <__adddf3>
 8012bd4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8012bd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012bdc:	e7c4      	b.n	8012b68 <__ieee754_rem_pio2+0x80>
 8012bde:	a386      	add	r3, pc, #536	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x310>)
 8012be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012be4:	f7ed fb52 	bl	800028c <__adddf3>
 8012be8:	a385      	add	r3, pc, #532	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x318>)
 8012bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bee:	4604      	mov	r4, r0
 8012bf0:	460d      	mov	r5, r1
 8012bf2:	f7ed fb4b 	bl	800028c <__adddf3>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	e9ca 2300 	strd	r2, r3, [sl]
 8012bfe:	4620      	mov	r0, r4
 8012c00:	4629      	mov	r1, r5
 8012c02:	f7ed fb41 	bl	8000288 <__aeabi_dsub>
 8012c06:	a37e      	add	r3, pc, #504	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x318>)
 8012c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0c:	e7e0      	b.n	8012bd0 <__ieee754_rem_pio2+0xe8>
 8012c0e:	4b87      	ldr	r3, [pc, #540]	; (8012e2c <__ieee754_rem_pio2+0x344>)
 8012c10:	4598      	cmp	r8, r3
 8012c12:	f300 80d9 	bgt.w	8012dc8 <__ieee754_rem_pio2+0x2e0>
 8012c16:	f000 fe87 	bl	8013928 <fabs>
 8012c1a:	ec55 4b10 	vmov	r4, r5, d0
 8012c1e:	ee10 0a10 	vmov	r0, s0
 8012c22:	a379      	add	r3, pc, #484	; (adr r3, 8012e08 <__ieee754_rem_pio2+0x320>)
 8012c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c28:	4629      	mov	r1, r5
 8012c2a:	f7ed fce5 	bl	80005f8 <__aeabi_dmul>
 8012c2e:	4b80      	ldr	r3, [pc, #512]	; (8012e30 <__ieee754_rem_pio2+0x348>)
 8012c30:	2200      	movs	r2, #0
 8012c32:	f7ed fb2b 	bl	800028c <__adddf3>
 8012c36:	f7ed ff79 	bl	8000b2c <__aeabi_d2iz>
 8012c3a:	4683      	mov	fp, r0
 8012c3c:	f7ed fc72 	bl	8000524 <__aeabi_i2d>
 8012c40:	4602      	mov	r2, r0
 8012c42:	460b      	mov	r3, r1
 8012c44:	ec43 2b18 	vmov	d8, r2, r3
 8012c48:	a367      	add	r3, pc, #412	; (adr r3, 8012de8 <__ieee754_rem_pio2+0x300>)
 8012c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4e:	f7ed fcd3 	bl	80005f8 <__aeabi_dmul>
 8012c52:	4602      	mov	r2, r0
 8012c54:	460b      	mov	r3, r1
 8012c56:	4620      	mov	r0, r4
 8012c58:	4629      	mov	r1, r5
 8012c5a:	f7ed fb15 	bl	8000288 <__aeabi_dsub>
 8012c5e:	a364      	add	r3, pc, #400	; (adr r3, 8012df0 <__ieee754_rem_pio2+0x308>)
 8012c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c64:	4606      	mov	r6, r0
 8012c66:	460f      	mov	r7, r1
 8012c68:	ec51 0b18 	vmov	r0, r1, d8
 8012c6c:	f7ed fcc4 	bl	80005f8 <__aeabi_dmul>
 8012c70:	f1bb 0f1f 	cmp.w	fp, #31
 8012c74:	4604      	mov	r4, r0
 8012c76:	460d      	mov	r5, r1
 8012c78:	dc0d      	bgt.n	8012c96 <__ieee754_rem_pio2+0x1ae>
 8012c7a:	4b6e      	ldr	r3, [pc, #440]	; (8012e34 <__ieee754_rem_pio2+0x34c>)
 8012c7c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8012c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c84:	4543      	cmp	r3, r8
 8012c86:	d006      	beq.n	8012c96 <__ieee754_rem_pio2+0x1ae>
 8012c88:	4622      	mov	r2, r4
 8012c8a:	462b      	mov	r3, r5
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	4639      	mov	r1, r7
 8012c90:	f7ed fafa 	bl	8000288 <__aeabi_dsub>
 8012c94:	e00f      	b.n	8012cb6 <__ieee754_rem_pio2+0x1ce>
 8012c96:	462b      	mov	r3, r5
 8012c98:	4622      	mov	r2, r4
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	4639      	mov	r1, r7
 8012c9e:	f7ed faf3 	bl	8000288 <__aeabi_dsub>
 8012ca2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012ca6:	9303      	str	r3, [sp, #12]
 8012ca8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012cac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8012cb0:	f1b8 0f10 	cmp.w	r8, #16
 8012cb4:	dc02      	bgt.n	8012cbc <__ieee754_rem_pio2+0x1d4>
 8012cb6:	e9ca 0100 	strd	r0, r1, [sl]
 8012cba:	e039      	b.n	8012d30 <__ieee754_rem_pio2+0x248>
 8012cbc:	a34e      	add	r3, pc, #312	; (adr r3, 8012df8 <__ieee754_rem_pio2+0x310>)
 8012cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc2:	ec51 0b18 	vmov	r0, r1, d8
 8012cc6:	f7ed fc97 	bl	80005f8 <__aeabi_dmul>
 8012cca:	4604      	mov	r4, r0
 8012ccc:	460d      	mov	r5, r1
 8012cce:	4602      	mov	r2, r0
 8012cd0:	460b      	mov	r3, r1
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	f7ed fad7 	bl	8000288 <__aeabi_dsub>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	460b      	mov	r3, r1
 8012cde:	4680      	mov	r8, r0
 8012ce0:	4689      	mov	r9, r1
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	f7ed facf 	bl	8000288 <__aeabi_dsub>
 8012cea:	4622      	mov	r2, r4
 8012cec:	462b      	mov	r3, r5
 8012cee:	f7ed facb 	bl	8000288 <__aeabi_dsub>
 8012cf2:	a343      	add	r3, pc, #268	; (adr r3, 8012e00 <__ieee754_rem_pio2+0x318>)
 8012cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	460d      	mov	r5, r1
 8012cfc:	ec51 0b18 	vmov	r0, r1, d8
 8012d00:	f7ed fc7a 	bl	80005f8 <__aeabi_dmul>
 8012d04:	4622      	mov	r2, r4
 8012d06:	462b      	mov	r3, r5
 8012d08:	f7ed fabe 	bl	8000288 <__aeabi_dsub>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	460b      	mov	r3, r1
 8012d10:	4604      	mov	r4, r0
 8012d12:	460d      	mov	r5, r1
 8012d14:	4640      	mov	r0, r8
 8012d16:	4649      	mov	r1, r9
 8012d18:	f7ed fab6 	bl	8000288 <__aeabi_dsub>
 8012d1c:	9a03      	ldr	r2, [sp, #12]
 8012d1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	2b31      	cmp	r3, #49	; 0x31
 8012d26:	dc24      	bgt.n	8012d72 <__ieee754_rem_pio2+0x28a>
 8012d28:	e9ca 0100 	strd	r0, r1, [sl]
 8012d2c:	4646      	mov	r6, r8
 8012d2e:	464f      	mov	r7, r9
 8012d30:	e9da 8900 	ldrd	r8, r9, [sl]
 8012d34:	4630      	mov	r0, r6
 8012d36:	4642      	mov	r2, r8
 8012d38:	464b      	mov	r3, r9
 8012d3a:	4639      	mov	r1, r7
 8012d3c:	f7ed faa4 	bl	8000288 <__aeabi_dsub>
 8012d40:	462b      	mov	r3, r5
 8012d42:	4622      	mov	r2, r4
 8012d44:	f7ed faa0 	bl	8000288 <__aeabi_dsub>
 8012d48:	9b02      	ldr	r3, [sp, #8]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012d50:	f6bf af0a 	bge.w	8012b68 <__ieee754_rem_pio2+0x80>
 8012d54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012d58:	f8ca 3004 	str.w	r3, [sl, #4]
 8012d5c:	f8ca 8000 	str.w	r8, [sl]
 8012d60:	f8ca 0008 	str.w	r0, [sl, #8]
 8012d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d68:	f8ca 300c 	str.w	r3, [sl, #12]
 8012d6c:	f1cb 0b00 	rsb	fp, fp, #0
 8012d70:	e6fa      	b.n	8012b68 <__ieee754_rem_pio2+0x80>
 8012d72:	a327      	add	r3, pc, #156	; (adr r3, 8012e10 <__ieee754_rem_pio2+0x328>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	ec51 0b18 	vmov	r0, r1, d8
 8012d7c:	f7ed fc3c 	bl	80005f8 <__aeabi_dmul>
 8012d80:	4604      	mov	r4, r0
 8012d82:	460d      	mov	r5, r1
 8012d84:	4602      	mov	r2, r0
 8012d86:	460b      	mov	r3, r1
 8012d88:	4640      	mov	r0, r8
 8012d8a:	4649      	mov	r1, r9
 8012d8c:	f7ed fa7c 	bl	8000288 <__aeabi_dsub>
 8012d90:	4602      	mov	r2, r0
 8012d92:	460b      	mov	r3, r1
 8012d94:	4606      	mov	r6, r0
 8012d96:	460f      	mov	r7, r1
 8012d98:	4640      	mov	r0, r8
 8012d9a:	4649      	mov	r1, r9
 8012d9c:	f7ed fa74 	bl	8000288 <__aeabi_dsub>
 8012da0:	4622      	mov	r2, r4
 8012da2:	462b      	mov	r3, r5
 8012da4:	f7ed fa70 	bl	8000288 <__aeabi_dsub>
 8012da8:	a31b      	add	r3, pc, #108	; (adr r3, 8012e18 <__ieee754_rem_pio2+0x330>)
 8012daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dae:	4604      	mov	r4, r0
 8012db0:	460d      	mov	r5, r1
 8012db2:	ec51 0b18 	vmov	r0, r1, d8
 8012db6:	f7ed fc1f 	bl	80005f8 <__aeabi_dmul>
 8012dba:	4622      	mov	r2, r4
 8012dbc:	462b      	mov	r3, r5
 8012dbe:	f7ed fa63 	bl	8000288 <__aeabi_dsub>
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	460d      	mov	r5, r1
 8012dc6:	e75f      	b.n	8012c88 <__ieee754_rem_pio2+0x1a0>
 8012dc8:	4b1b      	ldr	r3, [pc, #108]	; (8012e38 <__ieee754_rem_pio2+0x350>)
 8012dca:	4598      	cmp	r8, r3
 8012dcc:	dd36      	ble.n	8012e3c <__ieee754_rem_pio2+0x354>
 8012dce:	ee10 2a10 	vmov	r2, s0
 8012dd2:	462b      	mov	r3, r5
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	f7ed fa56 	bl	8000288 <__aeabi_dsub>
 8012ddc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012de0:	e9ca 0100 	strd	r0, r1, [sl]
 8012de4:	e694      	b.n	8012b10 <__ieee754_rem_pio2+0x28>
 8012de6:	bf00      	nop
 8012de8:	54400000 	.word	0x54400000
 8012dec:	3ff921fb 	.word	0x3ff921fb
 8012df0:	1a626331 	.word	0x1a626331
 8012df4:	3dd0b461 	.word	0x3dd0b461
 8012df8:	1a600000 	.word	0x1a600000
 8012dfc:	3dd0b461 	.word	0x3dd0b461
 8012e00:	2e037073 	.word	0x2e037073
 8012e04:	3ba3198a 	.word	0x3ba3198a
 8012e08:	6dc9c883 	.word	0x6dc9c883
 8012e0c:	3fe45f30 	.word	0x3fe45f30
 8012e10:	2e000000 	.word	0x2e000000
 8012e14:	3ba3198a 	.word	0x3ba3198a
 8012e18:	252049c1 	.word	0x252049c1
 8012e1c:	397b839a 	.word	0x397b839a
 8012e20:	3fe921fb 	.word	0x3fe921fb
 8012e24:	4002d97b 	.word	0x4002d97b
 8012e28:	3ff921fb 	.word	0x3ff921fb
 8012e2c:	413921fb 	.word	0x413921fb
 8012e30:	3fe00000 	.word	0x3fe00000
 8012e34:	0801446c 	.word	0x0801446c
 8012e38:	7fefffff 	.word	0x7fefffff
 8012e3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8012e40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8012e44:	ee10 0a10 	vmov	r0, s0
 8012e48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8012e4c:	ee10 6a10 	vmov	r6, s0
 8012e50:	460f      	mov	r7, r1
 8012e52:	f7ed fe6b 	bl	8000b2c <__aeabi_d2iz>
 8012e56:	f7ed fb65 	bl	8000524 <__aeabi_i2d>
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	4630      	mov	r0, r6
 8012e60:	4639      	mov	r1, r7
 8012e62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e66:	f7ed fa0f 	bl	8000288 <__aeabi_dsub>
 8012e6a:	4b22      	ldr	r3, [pc, #136]	; (8012ef4 <__ieee754_rem_pio2+0x40c>)
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f7ed fbc3 	bl	80005f8 <__aeabi_dmul>
 8012e72:	460f      	mov	r7, r1
 8012e74:	4606      	mov	r6, r0
 8012e76:	f7ed fe59 	bl	8000b2c <__aeabi_d2iz>
 8012e7a:	f7ed fb53 	bl	8000524 <__aeabi_i2d>
 8012e7e:	4602      	mov	r2, r0
 8012e80:	460b      	mov	r3, r1
 8012e82:	4630      	mov	r0, r6
 8012e84:	4639      	mov	r1, r7
 8012e86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012e8a:	f7ed f9fd 	bl	8000288 <__aeabi_dsub>
 8012e8e:	4b19      	ldr	r3, [pc, #100]	; (8012ef4 <__ieee754_rem_pio2+0x40c>)
 8012e90:	2200      	movs	r2, #0
 8012e92:	f7ed fbb1 	bl	80005f8 <__aeabi_dmul>
 8012e96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e9a:	ad04      	add	r5, sp, #16
 8012e9c:	f04f 0803 	mov.w	r8, #3
 8012ea0:	46a9      	mov	r9, r5
 8012ea2:	2600      	movs	r6, #0
 8012ea4:	2700      	movs	r7, #0
 8012ea6:	4632      	mov	r2, r6
 8012ea8:	463b      	mov	r3, r7
 8012eaa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8012eae:	46c3      	mov	fp, r8
 8012eb0:	3d08      	subs	r5, #8
 8012eb2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012eb6:	f7ed fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d1f3      	bne.n	8012ea6 <__ieee754_rem_pio2+0x3be>
 8012ebe:	4b0e      	ldr	r3, [pc, #56]	; (8012ef8 <__ieee754_rem_pio2+0x410>)
 8012ec0:	9301      	str	r3, [sp, #4]
 8012ec2:	2302      	movs	r3, #2
 8012ec4:	9300      	str	r3, [sp, #0]
 8012ec6:	4622      	mov	r2, r4
 8012ec8:	465b      	mov	r3, fp
 8012eca:	4651      	mov	r1, sl
 8012ecc:	4648      	mov	r0, r9
 8012ece:	f000 f817 	bl	8012f00 <__kernel_rem_pio2>
 8012ed2:	9b02      	ldr	r3, [sp, #8]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	4683      	mov	fp, r0
 8012ed8:	f6bf ae46 	bge.w	8012b68 <__ieee754_rem_pio2+0x80>
 8012edc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012ee0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012ee4:	f8ca 3004 	str.w	r3, [sl, #4]
 8012ee8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012eec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012ef0:	e73a      	b.n	8012d68 <__ieee754_rem_pio2+0x280>
 8012ef2:	bf00      	nop
 8012ef4:	41700000 	.word	0x41700000
 8012ef8:	080144ec 	.word	0x080144ec
 8012efc:	00000000 	.word	0x00000000

08012f00 <__kernel_rem_pio2>:
 8012f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f04:	ed2d 8b02 	vpush	{d8}
 8012f08:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012f0c:	f112 0f14 	cmn.w	r2, #20
 8012f10:	9308      	str	r3, [sp, #32]
 8012f12:	9101      	str	r1, [sp, #4]
 8012f14:	4bc6      	ldr	r3, [pc, #792]	; (8013230 <__kernel_rem_pio2+0x330>)
 8012f16:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012f18:	9009      	str	r0, [sp, #36]	; 0x24
 8012f1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f1e:	9304      	str	r3, [sp, #16]
 8012f20:	9b08      	ldr	r3, [sp, #32]
 8012f22:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012f26:	bfa8      	it	ge
 8012f28:	1ed4      	subge	r4, r2, #3
 8012f2a:	9306      	str	r3, [sp, #24]
 8012f2c:	bfb2      	itee	lt
 8012f2e:	2400      	movlt	r4, #0
 8012f30:	2318      	movge	r3, #24
 8012f32:	fb94 f4f3 	sdivge	r4, r4, r3
 8012f36:	f06f 0317 	mvn.w	r3, #23
 8012f3a:	fb04 3303 	mla	r3, r4, r3, r3
 8012f3e:	eb03 0a02 	add.w	sl, r3, r2
 8012f42:	9b04      	ldr	r3, [sp, #16]
 8012f44:	9a06      	ldr	r2, [sp, #24]
 8012f46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013220 <__kernel_rem_pio2+0x320>
 8012f4a:	eb03 0802 	add.w	r8, r3, r2
 8012f4e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012f50:	1aa7      	subs	r7, r4, r2
 8012f52:	ae20      	add	r6, sp, #128	; 0x80
 8012f54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012f58:	2500      	movs	r5, #0
 8012f5a:	4545      	cmp	r5, r8
 8012f5c:	dd18      	ble.n	8012f90 <__kernel_rem_pio2+0x90>
 8012f5e:	9b08      	ldr	r3, [sp, #32]
 8012f60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012f64:	aa20      	add	r2, sp, #128	; 0x80
 8012f66:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8013220 <__kernel_rem_pio2+0x320>
 8012f6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012f6e:	f1c3 0301 	rsb	r3, r3, #1
 8012f72:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012f76:	9307      	str	r3, [sp, #28]
 8012f78:	9b07      	ldr	r3, [sp, #28]
 8012f7a:	9a04      	ldr	r2, [sp, #16]
 8012f7c:	4443      	add	r3, r8
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	db2f      	blt.n	8012fe2 <__kernel_rem_pio2+0xe2>
 8012f82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012f86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012f8a:	462f      	mov	r7, r5
 8012f8c:	2600      	movs	r6, #0
 8012f8e:	e01b      	b.n	8012fc8 <__kernel_rem_pio2+0xc8>
 8012f90:	42ef      	cmn	r7, r5
 8012f92:	d407      	bmi.n	8012fa4 <__kernel_rem_pio2+0xa4>
 8012f94:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012f98:	f7ed fac4 	bl	8000524 <__aeabi_i2d>
 8012f9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012fa0:	3501      	adds	r5, #1
 8012fa2:	e7da      	b.n	8012f5a <__kernel_rem_pio2+0x5a>
 8012fa4:	ec51 0b18 	vmov	r0, r1, d8
 8012fa8:	e7f8      	b.n	8012f9c <__kernel_rem_pio2+0x9c>
 8012faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012fb2:	f7ed fb21 	bl	80005f8 <__aeabi_dmul>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fbe:	f7ed f965 	bl	800028c <__adddf3>
 8012fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fc6:	3601      	adds	r6, #1
 8012fc8:	9b06      	ldr	r3, [sp, #24]
 8012fca:	429e      	cmp	r6, r3
 8012fcc:	f1a7 0708 	sub.w	r7, r7, #8
 8012fd0:	ddeb      	ble.n	8012faa <__kernel_rem_pio2+0xaa>
 8012fd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012fd6:	3508      	adds	r5, #8
 8012fd8:	ecab 7b02 	vstmia	fp!, {d7}
 8012fdc:	f108 0801 	add.w	r8, r8, #1
 8012fe0:	e7ca      	b.n	8012f78 <__kernel_rem_pio2+0x78>
 8012fe2:	9b04      	ldr	r3, [sp, #16]
 8012fe4:	aa0c      	add	r2, sp, #48	; 0x30
 8012fe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8012fec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012fee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012ff2:	9c04      	ldr	r4, [sp, #16]
 8012ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8012ff6:	ab98      	add	r3, sp, #608	; 0x260
 8012ff8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012ffc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013000:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8013004:	f8cd b008 	str.w	fp, [sp, #8]
 8013008:	4625      	mov	r5, r4
 801300a:	2d00      	cmp	r5, #0
 801300c:	dc78      	bgt.n	8013100 <__kernel_rem_pio2+0x200>
 801300e:	ec47 6b10 	vmov	d0, r6, r7
 8013012:	4650      	mov	r0, sl
 8013014:	f000 fd14 	bl	8013a40 <scalbn>
 8013018:	ec57 6b10 	vmov	r6, r7, d0
 801301c:	2200      	movs	r2, #0
 801301e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013022:	ee10 0a10 	vmov	r0, s0
 8013026:	4639      	mov	r1, r7
 8013028:	f7ed fae6 	bl	80005f8 <__aeabi_dmul>
 801302c:	ec41 0b10 	vmov	d0, r0, r1
 8013030:	f000 fc86 	bl	8013940 <floor>
 8013034:	4b7f      	ldr	r3, [pc, #508]	; (8013234 <__kernel_rem_pio2+0x334>)
 8013036:	ec51 0b10 	vmov	r0, r1, d0
 801303a:	2200      	movs	r2, #0
 801303c:	f7ed fadc 	bl	80005f8 <__aeabi_dmul>
 8013040:	4602      	mov	r2, r0
 8013042:	460b      	mov	r3, r1
 8013044:	4630      	mov	r0, r6
 8013046:	4639      	mov	r1, r7
 8013048:	f7ed f91e 	bl	8000288 <__aeabi_dsub>
 801304c:	460f      	mov	r7, r1
 801304e:	4606      	mov	r6, r0
 8013050:	f7ed fd6c 	bl	8000b2c <__aeabi_d2iz>
 8013054:	9007      	str	r0, [sp, #28]
 8013056:	f7ed fa65 	bl	8000524 <__aeabi_i2d>
 801305a:	4602      	mov	r2, r0
 801305c:	460b      	mov	r3, r1
 801305e:	4630      	mov	r0, r6
 8013060:	4639      	mov	r1, r7
 8013062:	f7ed f911 	bl	8000288 <__aeabi_dsub>
 8013066:	f1ba 0f00 	cmp.w	sl, #0
 801306a:	4606      	mov	r6, r0
 801306c:	460f      	mov	r7, r1
 801306e:	dd70      	ble.n	8013152 <__kernel_rem_pio2+0x252>
 8013070:	1e62      	subs	r2, r4, #1
 8013072:	ab0c      	add	r3, sp, #48	; 0x30
 8013074:	9d07      	ldr	r5, [sp, #28]
 8013076:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801307a:	f1ca 0118 	rsb	r1, sl, #24
 801307e:	fa40 f301 	asr.w	r3, r0, r1
 8013082:	441d      	add	r5, r3
 8013084:	408b      	lsls	r3, r1
 8013086:	1ac0      	subs	r0, r0, r3
 8013088:	ab0c      	add	r3, sp, #48	; 0x30
 801308a:	9507      	str	r5, [sp, #28]
 801308c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013090:	f1ca 0317 	rsb	r3, sl, #23
 8013094:	fa40 f303 	asr.w	r3, r0, r3
 8013098:	9302      	str	r3, [sp, #8]
 801309a:	9b02      	ldr	r3, [sp, #8]
 801309c:	2b00      	cmp	r3, #0
 801309e:	dd66      	ble.n	801316e <__kernel_rem_pio2+0x26e>
 80130a0:	9b07      	ldr	r3, [sp, #28]
 80130a2:	2200      	movs	r2, #0
 80130a4:	3301      	adds	r3, #1
 80130a6:	9307      	str	r3, [sp, #28]
 80130a8:	4615      	mov	r5, r2
 80130aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80130ae:	4294      	cmp	r4, r2
 80130b0:	f300 8099 	bgt.w	80131e6 <__kernel_rem_pio2+0x2e6>
 80130b4:	f1ba 0f00 	cmp.w	sl, #0
 80130b8:	dd07      	ble.n	80130ca <__kernel_rem_pio2+0x1ca>
 80130ba:	f1ba 0f01 	cmp.w	sl, #1
 80130be:	f000 80a5 	beq.w	801320c <__kernel_rem_pio2+0x30c>
 80130c2:	f1ba 0f02 	cmp.w	sl, #2
 80130c6:	f000 80c1 	beq.w	801324c <__kernel_rem_pio2+0x34c>
 80130ca:	9b02      	ldr	r3, [sp, #8]
 80130cc:	2b02      	cmp	r3, #2
 80130ce:	d14e      	bne.n	801316e <__kernel_rem_pio2+0x26e>
 80130d0:	4632      	mov	r2, r6
 80130d2:	463b      	mov	r3, r7
 80130d4:	4958      	ldr	r1, [pc, #352]	; (8013238 <__kernel_rem_pio2+0x338>)
 80130d6:	2000      	movs	r0, #0
 80130d8:	f7ed f8d6 	bl	8000288 <__aeabi_dsub>
 80130dc:	4606      	mov	r6, r0
 80130de:	460f      	mov	r7, r1
 80130e0:	2d00      	cmp	r5, #0
 80130e2:	d044      	beq.n	801316e <__kernel_rem_pio2+0x26e>
 80130e4:	4650      	mov	r0, sl
 80130e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013228 <__kernel_rem_pio2+0x328>
 80130ea:	f000 fca9 	bl	8013a40 <scalbn>
 80130ee:	4630      	mov	r0, r6
 80130f0:	4639      	mov	r1, r7
 80130f2:	ec53 2b10 	vmov	r2, r3, d0
 80130f6:	f7ed f8c7 	bl	8000288 <__aeabi_dsub>
 80130fa:	4606      	mov	r6, r0
 80130fc:	460f      	mov	r7, r1
 80130fe:	e036      	b.n	801316e <__kernel_rem_pio2+0x26e>
 8013100:	4b4e      	ldr	r3, [pc, #312]	; (801323c <__kernel_rem_pio2+0x33c>)
 8013102:	2200      	movs	r2, #0
 8013104:	4630      	mov	r0, r6
 8013106:	4639      	mov	r1, r7
 8013108:	f7ed fa76 	bl	80005f8 <__aeabi_dmul>
 801310c:	f7ed fd0e 	bl	8000b2c <__aeabi_d2iz>
 8013110:	f7ed fa08 	bl	8000524 <__aeabi_i2d>
 8013114:	4b4a      	ldr	r3, [pc, #296]	; (8013240 <__kernel_rem_pio2+0x340>)
 8013116:	2200      	movs	r2, #0
 8013118:	4680      	mov	r8, r0
 801311a:	4689      	mov	r9, r1
 801311c:	f7ed fa6c 	bl	80005f8 <__aeabi_dmul>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4630      	mov	r0, r6
 8013126:	4639      	mov	r1, r7
 8013128:	f7ed f8ae 	bl	8000288 <__aeabi_dsub>
 801312c:	f7ed fcfe 	bl	8000b2c <__aeabi_d2iz>
 8013130:	9b02      	ldr	r3, [sp, #8]
 8013132:	f843 0b04 	str.w	r0, [r3], #4
 8013136:	3d01      	subs	r5, #1
 8013138:	9302      	str	r3, [sp, #8]
 801313a:	ab70      	add	r3, sp, #448	; 0x1c0
 801313c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013144:	4640      	mov	r0, r8
 8013146:	4649      	mov	r1, r9
 8013148:	f7ed f8a0 	bl	800028c <__adddf3>
 801314c:	4606      	mov	r6, r0
 801314e:	460f      	mov	r7, r1
 8013150:	e75b      	b.n	801300a <__kernel_rem_pio2+0x10a>
 8013152:	d105      	bne.n	8013160 <__kernel_rem_pio2+0x260>
 8013154:	1e63      	subs	r3, r4, #1
 8013156:	aa0c      	add	r2, sp, #48	; 0x30
 8013158:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801315c:	15c3      	asrs	r3, r0, #23
 801315e:	e79b      	b.n	8013098 <__kernel_rem_pio2+0x198>
 8013160:	4b38      	ldr	r3, [pc, #224]	; (8013244 <__kernel_rem_pio2+0x344>)
 8013162:	2200      	movs	r2, #0
 8013164:	f7ed fcce 	bl	8000b04 <__aeabi_dcmpge>
 8013168:	2800      	cmp	r0, #0
 801316a:	d139      	bne.n	80131e0 <__kernel_rem_pio2+0x2e0>
 801316c:	9002      	str	r0, [sp, #8]
 801316e:	2200      	movs	r2, #0
 8013170:	2300      	movs	r3, #0
 8013172:	4630      	mov	r0, r6
 8013174:	4639      	mov	r1, r7
 8013176:	f7ed fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 801317a:	2800      	cmp	r0, #0
 801317c:	f000 80b4 	beq.w	80132e8 <__kernel_rem_pio2+0x3e8>
 8013180:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8013184:	465b      	mov	r3, fp
 8013186:	2200      	movs	r2, #0
 8013188:	9904      	ldr	r1, [sp, #16]
 801318a:	428b      	cmp	r3, r1
 801318c:	da65      	bge.n	801325a <__kernel_rem_pio2+0x35a>
 801318e:	2a00      	cmp	r2, #0
 8013190:	d07b      	beq.n	801328a <__kernel_rem_pio2+0x38a>
 8013192:	ab0c      	add	r3, sp, #48	; 0x30
 8013194:	f1aa 0a18 	sub.w	sl, sl, #24
 8013198:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801319c:	2b00      	cmp	r3, #0
 801319e:	f000 80a0 	beq.w	80132e2 <__kernel_rem_pio2+0x3e2>
 80131a2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8013228 <__kernel_rem_pio2+0x328>
 80131a6:	4650      	mov	r0, sl
 80131a8:	f000 fc4a 	bl	8013a40 <scalbn>
 80131ac:	4f23      	ldr	r7, [pc, #140]	; (801323c <__kernel_rem_pio2+0x33c>)
 80131ae:	ec55 4b10 	vmov	r4, r5, d0
 80131b2:	46d8      	mov	r8, fp
 80131b4:	2600      	movs	r6, #0
 80131b6:	f1b8 0f00 	cmp.w	r8, #0
 80131ba:	f280 80cf 	bge.w	801335c <__kernel_rem_pio2+0x45c>
 80131be:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8013220 <__kernel_rem_pio2+0x320>
 80131c2:	465f      	mov	r7, fp
 80131c4:	f04f 0800 	mov.w	r8, #0
 80131c8:	2f00      	cmp	r7, #0
 80131ca:	f2c0 80fd 	blt.w	80133c8 <__kernel_rem_pio2+0x4c8>
 80131ce:	ab70      	add	r3, sp, #448	; 0x1c0
 80131d0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8013248 <__kernel_rem_pio2+0x348>
 80131d4:	ec55 4b18 	vmov	r4, r5, d8
 80131d8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80131dc:	2600      	movs	r6, #0
 80131de:	e0e5      	b.n	80133ac <__kernel_rem_pio2+0x4ac>
 80131e0:	2302      	movs	r3, #2
 80131e2:	9302      	str	r3, [sp, #8]
 80131e4:	e75c      	b.n	80130a0 <__kernel_rem_pio2+0x1a0>
 80131e6:	f8db 3000 	ldr.w	r3, [fp]
 80131ea:	b955      	cbnz	r5, 8013202 <__kernel_rem_pio2+0x302>
 80131ec:	b123      	cbz	r3, 80131f8 <__kernel_rem_pio2+0x2f8>
 80131ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80131f2:	f8cb 3000 	str.w	r3, [fp]
 80131f6:	2301      	movs	r3, #1
 80131f8:	3201      	adds	r2, #1
 80131fa:	f10b 0b04 	add.w	fp, fp, #4
 80131fe:	461d      	mov	r5, r3
 8013200:	e755      	b.n	80130ae <__kernel_rem_pio2+0x1ae>
 8013202:	1acb      	subs	r3, r1, r3
 8013204:	f8cb 3000 	str.w	r3, [fp]
 8013208:	462b      	mov	r3, r5
 801320a:	e7f5      	b.n	80131f8 <__kernel_rem_pio2+0x2f8>
 801320c:	1e62      	subs	r2, r4, #1
 801320e:	ab0c      	add	r3, sp, #48	; 0x30
 8013210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013214:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013218:	a90c      	add	r1, sp, #48	; 0x30
 801321a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801321e:	e754      	b.n	80130ca <__kernel_rem_pio2+0x1ca>
	...
 801322c:	3ff00000 	.word	0x3ff00000
 8013230:	08014638 	.word	0x08014638
 8013234:	40200000 	.word	0x40200000
 8013238:	3ff00000 	.word	0x3ff00000
 801323c:	3e700000 	.word	0x3e700000
 8013240:	41700000 	.word	0x41700000
 8013244:	3fe00000 	.word	0x3fe00000
 8013248:	080145f8 	.word	0x080145f8
 801324c:	1e62      	subs	r2, r4, #1
 801324e:	ab0c      	add	r3, sp, #48	; 0x30
 8013250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013258:	e7de      	b.n	8013218 <__kernel_rem_pio2+0x318>
 801325a:	a90c      	add	r1, sp, #48	; 0x30
 801325c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013260:	3b01      	subs	r3, #1
 8013262:	430a      	orrs	r2, r1
 8013264:	e790      	b.n	8013188 <__kernel_rem_pio2+0x288>
 8013266:	3301      	adds	r3, #1
 8013268:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801326c:	2900      	cmp	r1, #0
 801326e:	d0fa      	beq.n	8013266 <__kernel_rem_pio2+0x366>
 8013270:	9a08      	ldr	r2, [sp, #32]
 8013272:	18e3      	adds	r3, r4, r3
 8013274:	18a6      	adds	r6, r4, r2
 8013276:	aa20      	add	r2, sp, #128	; 0x80
 8013278:	1c65      	adds	r5, r4, #1
 801327a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801327e:	9302      	str	r3, [sp, #8]
 8013280:	9b02      	ldr	r3, [sp, #8]
 8013282:	42ab      	cmp	r3, r5
 8013284:	da04      	bge.n	8013290 <__kernel_rem_pio2+0x390>
 8013286:	461c      	mov	r4, r3
 8013288:	e6b5      	b.n	8012ff6 <__kernel_rem_pio2+0xf6>
 801328a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801328c:	2301      	movs	r3, #1
 801328e:	e7eb      	b.n	8013268 <__kernel_rem_pio2+0x368>
 8013290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013296:	f7ed f945 	bl	8000524 <__aeabi_i2d>
 801329a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801329e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132a0:	46b3      	mov	fp, r6
 80132a2:	461c      	mov	r4, r3
 80132a4:	2700      	movs	r7, #0
 80132a6:	f04f 0800 	mov.w	r8, #0
 80132aa:	f04f 0900 	mov.w	r9, #0
 80132ae:	9b06      	ldr	r3, [sp, #24]
 80132b0:	429f      	cmp	r7, r3
 80132b2:	dd06      	ble.n	80132c2 <__kernel_rem_pio2+0x3c2>
 80132b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80132b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80132ba:	e9c3 8900 	strd	r8, r9, [r3]
 80132be:	3501      	adds	r5, #1
 80132c0:	e7de      	b.n	8013280 <__kernel_rem_pio2+0x380>
 80132c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80132c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80132ca:	f7ed f995 	bl	80005f8 <__aeabi_dmul>
 80132ce:	4602      	mov	r2, r0
 80132d0:	460b      	mov	r3, r1
 80132d2:	4640      	mov	r0, r8
 80132d4:	4649      	mov	r1, r9
 80132d6:	f7ec ffd9 	bl	800028c <__adddf3>
 80132da:	3701      	adds	r7, #1
 80132dc:	4680      	mov	r8, r0
 80132de:	4689      	mov	r9, r1
 80132e0:	e7e5      	b.n	80132ae <__kernel_rem_pio2+0x3ae>
 80132e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80132e6:	e754      	b.n	8013192 <__kernel_rem_pio2+0x292>
 80132e8:	ec47 6b10 	vmov	d0, r6, r7
 80132ec:	f1ca 0000 	rsb	r0, sl, #0
 80132f0:	f000 fba6 	bl	8013a40 <scalbn>
 80132f4:	ec57 6b10 	vmov	r6, r7, d0
 80132f8:	4b9f      	ldr	r3, [pc, #636]	; (8013578 <__kernel_rem_pio2+0x678>)
 80132fa:	ee10 0a10 	vmov	r0, s0
 80132fe:	2200      	movs	r2, #0
 8013300:	4639      	mov	r1, r7
 8013302:	f7ed fbff 	bl	8000b04 <__aeabi_dcmpge>
 8013306:	b300      	cbz	r0, 801334a <__kernel_rem_pio2+0x44a>
 8013308:	4b9c      	ldr	r3, [pc, #624]	; (801357c <__kernel_rem_pio2+0x67c>)
 801330a:	2200      	movs	r2, #0
 801330c:	4630      	mov	r0, r6
 801330e:	4639      	mov	r1, r7
 8013310:	f7ed f972 	bl	80005f8 <__aeabi_dmul>
 8013314:	f7ed fc0a 	bl	8000b2c <__aeabi_d2iz>
 8013318:	4605      	mov	r5, r0
 801331a:	f7ed f903 	bl	8000524 <__aeabi_i2d>
 801331e:	4b96      	ldr	r3, [pc, #600]	; (8013578 <__kernel_rem_pio2+0x678>)
 8013320:	2200      	movs	r2, #0
 8013322:	f7ed f969 	bl	80005f8 <__aeabi_dmul>
 8013326:	460b      	mov	r3, r1
 8013328:	4602      	mov	r2, r0
 801332a:	4639      	mov	r1, r7
 801332c:	4630      	mov	r0, r6
 801332e:	f7ec ffab 	bl	8000288 <__aeabi_dsub>
 8013332:	f7ed fbfb 	bl	8000b2c <__aeabi_d2iz>
 8013336:	f104 0b01 	add.w	fp, r4, #1
 801333a:	ab0c      	add	r3, sp, #48	; 0x30
 801333c:	f10a 0a18 	add.w	sl, sl, #24
 8013340:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013344:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8013348:	e72b      	b.n	80131a2 <__kernel_rem_pio2+0x2a2>
 801334a:	4630      	mov	r0, r6
 801334c:	4639      	mov	r1, r7
 801334e:	f7ed fbed 	bl	8000b2c <__aeabi_d2iz>
 8013352:	ab0c      	add	r3, sp, #48	; 0x30
 8013354:	46a3      	mov	fp, r4
 8013356:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801335a:	e722      	b.n	80131a2 <__kernel_rem_pio2+0x2a2>
 801335c:	ab70      	add	r3, sp, #448	; 0x1c0
 801335e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8013362:	ab0c      	add	r3, sp, #48	; 0x30
 8013364:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8013368:	f7ed f8dc 	bl	8000524 <__aeabi_i2d>
 801336c:	4622      	mov	r2, r4
 801336e:	462b      	mov	r3, r5
 8013370:	f7ed f942 	bl	80005f8 <__aeabi_dmul>
 8013374:	4632      	mov	r2, r6
 8013376:	e9c9 0100 	strd	r0, r1, [r9]
 801337a:	463b      	mov	r3, r7
 801337c:	4620      	mov	r0, r4
 801337e:	4629      	mov	r1, r5
 8013380:	f7ed f93a 	bl	80005f8 <__aeabi_dmul>
 8013384:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013388:	4604      	mov	r4, r0
 801338a:	460d      	mov	r5, r1
 801338c:	e713      	b.n	80131b6 <__kernel_rem_pio2+0x2b6>
 801338e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8013392:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8013396:	f7ed f92f 	bl	80005f8 <__aeabi_dmul>
 801339a:	4602      	mov	r2, r0
 801339c:	460b      	mov	r3, r1
 801339e:	4620      	mov	r0, r4
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7ec ff73 	bl	800028c <__adddf3>
 80133a6:	3601      	adds	r6, #1
 80133a8:	4604      	mov	r4, r0
 80133aa:	460d      	mov	r5, r1
 80133ac:	9b04      	ldr	r3, [sp, #16]
 80133ae:	429e      	cmp	r6, r3
 80133b0:	dc01      	bgt.n	80133b6 <__kernel_rem_pio2+0x4b6>
 80133b2:	45b0      	cmp	r8, r6
 80133b4:	daeb      	bge.n	801338e <__kernel_rem_pio2+0x48e>
 80133b6:	ab48      	add	r3, sp, #288	; 0x120
 80133b8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80133bc:	e9c3 4500 	strd	r4, r5, [r3]
 80133c0:	3f01      	subs	r7, #1
 80133c2:	f108 0801 	add.w	r8, r8, #1
 80133c6:	e6ff      	b.n	80131c8 <__kernel_rem_pio2+0x2c8>
 80133c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80133ca:	2b02      	cmp	r3, #2
 80133cc:	dc0b      	bgt.n	80133e6 <__kernel_rem_pio2+0x4e6>
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	dc6e      	bgt.n	80134b0 <__kernel_rem_pio2+0x5b0>
 80133d2:	d045      	beq.n	8013460 <__kernel_rem_pio2+0x560>
 80133d4:	9b07      	ldr	r3, [sp, #28]
 80133d6:	f003 0007 	and.w	r0, r3, #7
 80133da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80133de:	ecbd 8b02 	vpop	{d8}
 80133e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	d1f3      	bne.n	80133d4 <__kernel_rem_pio2+0x4d4>
 80133ec:	ab48      	add	r3, sp, #288	; 0x120
 80133ee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80133f2:	46d0      	mov	r8, sl
 80133f4:	46d9      	mov	r9, fp
 80133f6:	f1b9 0f00 	cmp.w	r9, #0
 80133fa:	f1a8 0808 	sub.w	r8, r8, #8
 80133fe:	dc64      	bgt.n	80134ca <__kernel_rem_pio2+0x5ca>
 8013400:	465c      	mov	r4, fp
 8013402:	2c01      	cmp	r4, #1
 8013404:	f1aa 0a08 	sub.w	sl, sl, #8
 8013408:	dc7e      	bgt.n	8013508 <__kernel_rem_pio2+0x608>
 801340a:	2000      	movs	r0, #0
 801340c:	2100      	movs	r1, #0
 801340e:	f1bb 0f01 	cmp.w	fp, #1
 8013412:	f300 8097 	bgt.w	8013544 <__kernel_rem_pio2+0x644>
 8013416:	9b02      	ldr	r3, [sp, #8]
 8013418:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801341c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013420:	2b00      	cmp	r3, #0
 8013422:	f040 8099 	bne.w	8013558 <__kernel_rem_pio2+0x658>
 8013426:	9b01      	ldr	r3, [sp, #4]
 8013428:	e9c3 5600 	strd	r5, r6, [r3]
 801342c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013430:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013434:	e7ce      	b.n	80133d4 <__kernel_rem_pio2+0x4d4>
 8013436:	ab48      	add	r3, sp, #288	; 0x120
 8013438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013440:	f7ec ff24 	bl	800028c <__adddf3>
 8013444:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013448:	f1bb 0f00 	cmp.w	fp, #0
 801344c:	daf3      	bge.n	8013436 <__kernel_rem_pio2+0x536>
 801344e:	9b02      	ldr	r3, [sp, #8]
 8013450:	b113      	cbz	r3, 8013458 <__kernel_rem_pio2+0x558>
 8013452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013456:	4619      	mov	r1, r3
 8013458:	9b01      	ldr	r3, [sp, #4]
 801345a:	e9c3 0100 	strd	r0, r1, [r3]
 801345e:	e7b9      	b.n	80133d4 <__kernel_rem_pio2+0x4d4>
 8013460:	2000      	movs	r0, #0
 8013462:	2100      	movs	r1, #0
 8013464:	e7f0      	b.n	8013448 <__kernel_rem_pio2+0x548>
 8013466:	ab48      	add	r3, sp, #288	; 0x120
 8013468:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013470:	f7ec ff0c 	bl	800028c <__adddf3>
 8013474:	3c01      	subs	r4, #1
 8013476:	2c00      	cmp	r4, #0
 8013478:	daf5      	bge.n	8013466 <__kernel_rem_pio2+0x566>
 801347a:	9b02      	ldr	r3, [sp, #8]
 801347c:	b1e3      	cbz	r3, 80134b8 <__kernel_rem_pio2+0x5b8>
 801347e:	4602      	mov	r2, r0
 8013480:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013484:	9c01      	ldr	r4, [sp, #4]
 8013486:	e9c4 2300 	strd	r2, r3, [r4]
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013492:	f7ec fef9 	bl	8000288 <__aeabi_dsub>
 8013496:	ad4a      	add	r5, sp, #296	; 0x128
 8013498:	2401      	movs	r4, #1
 801349a:	45a3      	cmp	fp, r4
 801349c:	da0f      	bge.n	80134be <__kernel_rem_pio2+0x5be>
 801349e:	9b02      	ldr	r3, [sp, #8]
 80134a0:	b113      	cbz	r3, 80134a8 <__kernel_rem_pio2+0x5a8>
 80134a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134a6:	4619      	mov	r1, r3
 80134a8:	9b01      	ldr	r3, [sp, #4]
 80134aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80134ae:	e791      	b.n	80133d4 <__kernel_rem_pio2+0x4d4>
 80134b0:	465c      	mov	r4, fp
 80134b2:	2000      	movs	r0, #0
 80134b4:	2100      	movs	r1, #0
 80134b6:	e7de      	b.n	8013476 <__kernel_rem_pio2+0x576>
 80134b8:	4602      	mov	r2, r0
 80134ba:	460b      	mov	r3, r1
 80134bc:	e7e2      	b.n	8013484 <__kernel_rem_pio2+0x584>
 80134be:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80134c2:	f7ec fee3 	bl	800028c <__adddf3>
 80134c6:	3401      	adds	r4, #1
 80134c8:	e7e7      	b.n	801349a <__kernel_rem_pio2+0x59a>
 80134ca:	e9d8 4500 	ldrd	r4, r5, [r8]
 80134ce:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80134d2:	4620      	mov	r0, r4
 80134d4:	4632      	mov	r2, r6
 80134d6:	463b      	mov	r3, r7
 80134d8:	4629      	mov	r1, r5
 80134da:	f7ec fed7 	bl	800028c <__adddf3>
 80134de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134e2:	4602      	mov	r2, r0
 80134e4:	460b      	mov	r3, r1
 80134e6:	4620      	mov	r0, r4
 80134e8:	4629      	mov	r1, r5
 80134ea:	f7ec fecd 	bl	8000288 <__aeabi_dsub>
 80134ee:	4632      	mov	r2, r6
 80134f0:	463b      	mov	r3, r7
 80134f2:	f7ec fecb 	bl	800028c <__adddf3>
 80134f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80134fa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80134fe:	ed88 7b00 	vstr	d7, [r8]
 8013502:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013506:	e776      	b.n	80133f6 <__kernel_rem_pio2+0x4f6>
 8013508:	e9da 8900 	ldrd	r8, r9, [sl]
 801350c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013510:	4640      	mov	r0, r8
 8013512:	4632      	mov	r2, r6
 8013514:	463b      	mov	r3, r7
 8013516:	4649      	mov	r1, r9
 8013518:	f7ec feb8 	bl	800028c <__adddf3>
 801351c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013520:	4602      	mov	r2, r0
 8013522:	460b      	mov	r3, r1
 8013524:	4640      	mov	r0, r8
 8013526:	4649      	mov	r1, r9
 8013528:	f7ec feae 	bl	8000288 <__aeabi_dsub>
 801352c:	4632      	mov	r2, r6
 801352e:	463b      	mov	r3, r7
 8013530:	f7ec feac 	bl	800028c <__adddf3>
 8013534:	ed9d 7b04 	vldr	d7, [sp, #16]
 8013538:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801353c:	ed8a 7b00 	vstr	d7, [sl]
 8013540:	3c01      	subs	r4, #1
 8013542:	e75e      	b.n	8013402 <__kernel_rem_pio2+0x502>
 8013544:	ab48      	add	r3, sp, #288	; 0x120
 8013546:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354e:	f7ec fe9d 	bl	800028c <__adddf3>
 8013552:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013556:	e75a      	b.n	801340e <__kernel_rem_pio2+0x50e>
 8013558:	9b01      	ldr	r3, [sp, #4]
 801355a:	9a01      	ldr	r2, [sp, #4]
 801355c:	601d      	str	r5, [r3, #0]
 801355e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8013562:	605c      	str	r4, [r3, #4]
 8013564:	609f      	str	r7, [r3, #8]
 8013566:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801356a:	60d3      	str	r3, [r2, #12]
 801356c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013570:	6110      	str	r0, [r2, #16]
 8013572:	6153      	str	r3, [r2, #20]
 8013574:	e72e      	b.n	80133d4 <__kernel_rem_pio2+0x4d4>
 8013576:	bf00      	nop
 8013578:	41700000 	.word	0x41700000
 801357c:	3e700000 	.word	0x3e700000

08013580 <__kernel_tan>:
 8013580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013584:	ed2d 8b04 	vpush	{d8-d9}
 8013588:	ec5b ab10 	vmov	sl, fp, d0
 801358c:	4be2      	ldr	r3, [pc, #904]	; (8013918 <__kernel_tan+0x398>)
 801358e:	b085      	sub	sp, #20
 8013590:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8013594:	429f      	cmp	r7, r3
 8013596:	ed8d 1b00 	vstr	d1, [sp]
 801359a:	4606      	mov	r6, r0
 801359c:	f8cd b00c 	str.w	fp, [sp, #12]
 80135a0:	dc24      	bgt.n	80135ec <__kernel_tan+0x6c>
 80135a2:	ee10 0a10 	vmov	r0, s0
 80135a6:	4659      	mov	r1, fp
 80135a8:	f7ed fac0 	bl	8000b2c <__aeabi_d2iz>
 80135ac:	2800      	cmp	r0, #0
 80135ae:	d148      	bne.n	8013642 <__kernel_tan+0xc2>
 80135b0:	1c73      	adds	r3, r6, #1
 80135b2:	4652      	mov	r2, sl
 80135b4:	4313      	orrs	r3, r2
 80135b6:	433b      	orrs	r3, r7
 80135b8:	d112      	bne.n	80135e0 <__kernel_tan+0x60>
 80135ba:	ec4b ab10 	vmov	d0, sl, fp
 80135be:	f000 f9b3 	bl	8013928 <fabs>
 80135c2:	49d6      	ldr	r1, [pc, #856]	; (801391c <__kernel_tan+0x39c>)
 80135c4:	ec53 2b10 	vmov	r2, r3, d0
 80135c8:	2000      	movs	r0, #0
 80135ca:	f7ed f93f 	bl	800084c <__aeabi_ddiv>
 80135ce:	4682      	mov	sl, r0
 80135d0:	468b      	mov	fp, r1
 80135d2:	ec4b ab10 	vmov	d0, sl, fp
 80135d6:	b005      	add	sp, #20
 80135d8:	ecbd 8b04 	vpop	{d8-d9}
 80135dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e0:	2e01      	cmp	r6, #1
 80135e2:	d0f6      	beq.n	80135d2 <__kernel_tan+0x52>
 80135e4:	49ce      	ldr	r1, [pc, #824]	; (8013920 <__kernel_tan+0x3a0>)
 80135e6:	465b      	mov	r3, fp
 80135e8:	2000      	movs	r0, #0
 80135ea:	e7ee      	b.n	80135ca <__kernel_tan+0x4a>
 80135ec:	4bcd      	ldr	r3, [pc, #820]	; (8013924 <__kernel_tan+0x3a4>)
 80135ee:	429f      	cmp	r7, r3
 80135f0:	dd27      	ble.n	8013642 <__kernel_tan+0xc2>
 80135f2:	9b03      	ldr	r3, [sp, #12]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	da0a      	bge.n	801360e <__kernel_tan+0x8e>
 80135f8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80135fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013600:	469b      	mov	fp, r3
 8013602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013606:	e9cd 2300 	strd	r2, r3, [sp]
 801360a:	ee10 aa10 	vmov	sl, s0
 801360e:	4652      	mov	r2, sl
 8013610:	465b      	mov	r3, fp
 8013612:	a1a1      	add	r1, pc, #644	; (adr r1, 8013898 <__kernel_tan+0x318>)
 8013614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013618:	f7ec fe36 	bl	8000288 <__aeabi_dsub>
 801361c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013620:	4604      	mov	r4, r0
 8013622:	460d      	mov	r5, r1
 8013624:	a19e      	add	r1, pc, #632	; (adr r1, 80138a0 <__kernel_tan+0x320>)
 8013626:	e9d1 0100 	ldrd	r0, r1, [r1]
 801362a:	f7ec fe2d 	bl	8000288 <__aeabi_dsub>
 801362e:	4622      	mov	r2, r4
 8013630:	462b      	mov	r3, r5
 8013632:	f7ec fe2b 	bl	800028c <__adddf3>
 8013636:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 80138a8 <__kernel_tan+0x328>
 801363a:	ed8d 7b00 	vstr	d7, [sp]
 801363e:	4682      	mov	sl, r0
 8013640:	468b      	mov	fp, r1
 8013642:	4652      	mov	r2, sl
 8013644:	465b      	mov	r3, fp
 8013646:	4650      	mov	r0, sl
 8013648:	4659      	mov	r1, fp
 801364a:	f7ec ffd5 	bl	80005f8 <__aeabi_dmul>
 801364e:	4602      	mov	r2, r0
 8013650:	460b      	mov	r3, r1
 8013652:	4680      	mov	r8, r0
 8013654:	4689      	mov	r9, r1
 8013656:	f7ec ffcf 	bl	80005f8 <__aeabi_dmul>
 801365a:	4642      	mov	r2, r8
 801365c:	4604      	mov	r4, r0
 801365e:	460d      	mov	r5, r1
 8013660:	464b      	mov	r3, r9
 8013662:	4650      	mov	r0, sl
 8013664:	4659      	mov	r1, fp
 8013666:	f7ec ffc7 	bl	80005f8 <__aeabi_dmul>
 801366a:	a391      	add	r3, pc, #580	; (adr r3, 80138b0 <__kernel_tan+0x330>)
 801366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013670:	ec41 0b18 	vmov	d8, r0, r1
 8013674:	4620      	mov	r0, r4
 8013676:	4629      	mov	r1, r5
 8013678:	f7ec ffbe 	bl	80005f8 <__aeabi_dmul>
 801367c:	a38e      	add	r3, pc, #568	; (adr r3, 80138b8 <__kernel_tan+0x338>)
 801367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013682:	f7ec fe03 	bl	800028c <__adddf3>
 8013686:	4622      	mov	r2, r4
 8013688:	462b      	mov	r3, r5
 801368a:	f7ec ffb5 	bl	80005f8 <__aeabi_dmul>
 801368e:	a38c      	add	r3, pc, #560	; (adr r3, 80138c0 <__kernel_tan+0x340>)
 8013690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013694:	f7ec fdfa 	bl	800028c <__adddf3>
 8013698:	4622      	mov	r2, r4
 801369a:	462b      	mov	r3, r5
 801369c:	f7ec ffac 	bl	80005f8 <__aeabi_dmul>
 80136a0:	a389      	add	r3, pc, #548	; (adr r3, 80138c8 <__kernel_tan+0x348>)
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	f7ec fdf1 	bl	800028c <__adddf3>
 80136aa:	4622      	mov	r2, r4
 80136ac:	462b      	mov	r3, r5
 80136ae:	f7ec ffa3 	bl	80005f8 <__aeabi_dmul>
 80136b2:	a387      	add	r3, pc, #540	; (adr r3, 80138d0 <__kernel_tan+0x350>)
 80136b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b8:	f7ec fde8 	bl	800028c <__adddf3>
 80136bc:	4622      	mov	r2, r4
 80136be:	462b      	mov	r3, r5
 80136c0:	f7ec ff9a 	bl	80005f8 <__aeabi_dmul>
 80136c4:	a384      	add	r3, pc, #528	; (adr r3, 80138d8 <__kernel_tan+0x358>)
 80136c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ca:	f7ec fddf 	bl	800028c <__adddf3>
 80136ce:	4642      	mov	r2, r8
 80136d0:	464b      	mov	r3, r9
 80136d2:	f7ec ff91 	bl	80005f8 <__aeabi_dmul>
 80136d6:	a382      	add	r3, pc, #520	; (adr r3, 80138e0 <__kernel_tan+0x360>)
 80136d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136dc:	ec41 0b19 	vmov	d9, r0, r1
 80136e0:	4620      	mov	r0, r4
 80136e2:	4629      	mov	r1, r5
 80136e4:	f7ec ff88 	bl	80005f8 <__aeabi_dmul>
 80136e8:	a37f      	add	r3, pc, #508	; (adr r3, 80138e8 <__kernel_tan+0x368>)
 80136ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ee:	f7ec fdcd 	bl	800028c <__adddf3>
 80136f2:	4622      	mov	r2, r4
 80136f4:	462b      	mov	r3, r5
 80136f6:	f7ec ff7f 	bl	80005f8 <__aeabi_dmul>
 80136fa:	a37d      	add	r3, pc, #500	; (adr r3, 80138f0 <__kernel_tan+0x370>)
 80136fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013700:	f7ec fdc4 	bl	800028c <__adddf3>
 8013704:	4622      	mov	r2, r4
 8013706:	462b      	mov	r3, r5
 8013708:	f7ec ff76 	bl	80005f8 <__aeabi_dmul>
 801370c:	a37a      	add	r3, pc, #488	; (adr r3, 80138f8 <__kernel_tan+0x378>)
 801370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013712:	f7ec fdbb 	bl	800028c <__adddf3>
 8013716:	4622      	mov	r2, r4
 8013718:	462b      	mov	r3, r5
 801371a:	f7ec ff6d 	bl	80005f8 <__aeabi_dmul>
 801371e:	a378      	add	r3, pc, #480	; (adr r3, 8013900 <__kernel_tan+0x380>)
 8013720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013724:	f7ec fdb2 	bl	800028c <__adddf3>
 8013728:	4622      	mov	r2, r4
 801372a:	462b      	mov	r3, r5
 801372c:	f7ec ff64 	bl	80005f8 <__aeabi_dmul>
 8013730:	a375      	add	r3, pc, #468	; (adr r3, 8013908 <__kernel_tan+0x388>)
 8013732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013736:	f7ec fda9 	bl	800028c <__adddf3>
 801373a:	4602      	mov	r2, r0
 801373c:	460b      	mov	r3, r1
 801373e:	ec51 0b19 	vmov	r0, r1, d9
 8013742:	f7ec fda3 	bl	800028c <__adddf3>
 8013746:	ec53 2b18 	vmov	r2, r3, d8
 801374a:	f7ec ff55 	bl	80005f8 <__aeabi_dmul>
 801374e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013752:	f7ec fd9b 	bl	800028c <__adddf3>
 8013756:	4642      	mov	r2, r8
 8013758:	464b      	mov	r3, r9
 801375a:	f7ec ff4d 	bl	80005f8 <__aeabi_dmul>
 801375e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013762:	f7ec fd93 	bl	800028c <__adddf3>
 8013766:	a36a      	add	r3, pc, #424	; (adr r3, 8013910 <__kernel_tan+0x390>)
 8013768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376c:	4604      	mov	r4, r0
 801376e:	460d      	mov	r5, r1
 8013770:	ec51 0b18 	vmov	r0, r1, d8
 8013774:	f7ec ff40 	bl	80005f8 <__aeabi_dmul>
 8013778:	4622      	mov	r2, r4
 801377a:	462b      	mov	r3, r5
 801377c:	f7ec fd86 	bl	800028c <__adddf3>
 8013780:	460b      	mov	r3, r1
 8013782:	ec41 0b18 	vmov	d8, r0, r1
 8013786:	4602      	mov	r2, r0
 8013788:	4659      	mov	r1, fp
 801378a:	4650      	mov	r0, sl
 801378c:	f7ec fd7e 	bl	800028c <__adddf3>
 8013790:	4b64      	ldr	r3, [pc, #400]	; (8013924 <__kernel_tan+0x3a4>)
 8013792:	429f      	cmp	r7, r3
 8013794:	4604      	mov	r4, r0
 8013796:	460d      	mov	r5, r1
 8013798:	dd3e      	ble.n	8013818 <__kernel_tan+0x298>
 801379a:	4630      	mov	r0, r6
 801379c:	f7ec fec2 	bl	8000524 <__aeabi_i2d>
 80137a0:	4622      	mov	r2, r4
 80137a2:	4680      	mov	r8, r0
 80137a4:	4689      	mov	r9, r1
 80137a6:	462b      	mov	r3, r5
 80137a8:	4620      	mov	r0, r4
 80137aa:	4629      	mov	r1, r5
 80137ac:	f7ec ff24 	bl	80005f8 <__aeabi_dmul>
 80137b0:	4642      	mov	r2, r8
 80137b2:	4606      	mov	r6, r0
 80137b4:	460f      	mov	r7, r1
 80137b6:	464b      	mov	r3, r9
 80137b8:	4620      	mov	r0, r4
 80137ba:	4629      	mov	r1, r5
 80137bc:	f7ec fd66 	bl	800028c <__adddf3>
 80137c0:	4602      	mov	r2, r0
 80137c2:	460b      	mov	r3, r1
 80137c4:	4630      	mov	r0, r6
 80137c6:	4639      	mov	r1, r7
 80137c8:	f7ed f840 	bl	800084c <__aeabi_ddiv>
 80137cc:	ec53 2b18 	vmov	r2, r3, d8
 80137d0:	f7ec fd5a 	bl	8000288 <__aeabi_dsub>
 80137d4:	4602      	mov	r2, r0
 80137d6:	460b      	mov	r3, r1
 80137d8:	4650      	mov	r0, sl
 80137da:	4659      	mov	r1, fp
 80137dc:	f7ec fd54 	bl	8000288 <__aeabi_dsub>
 80137e0:	4602      	mov	r2, r0
 80137e2:	460b      	mov	r3, r1
 80137e4:	f7ec fd52 	bl	800028c <__adddf3>
 80137e8:	4602      	mov	r2, r0
 80137ea:	460b      	mov	r3, r1
 80137ec:	4640      	mov	r0, r8
 80137ee:	4649      	mov	r1, r9
 80137f0:	f7ec fd4a 	bl	8000288 <__aeabi_dsub>
 80137f4:	9b03      	ldr	r3, [sp, #12]
 80137f6:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80137fa:	f00a 0a02 	and.w	sl, sl, #2
 80137fe:	4604      	mov	r4, r0
 8013800:	f1ca 0001 	rsb	r0, sl, #1
 8013804:	460d      	mov	r5, r1
 8013806:	f7ec fe8d 	bl	8000524 <__aeabi_i2d>
 801380a:	4602      	mov	r2, r0
 801380c:	460b      	mov	r3, r1
 801380e:	4620      	mov	r0, r4
 8013810:	4629      	mov	r1, r5
 8013812:	f7ec fef1 	bl	80005f8 <__aeabi_dmul>
 8013816:	e6da      	b.n	80135ce <__kernel_tan+0x4e>
 8013818:	2e01      	cmp	r6, #1
 801381a:	d038      	beq.n	801388e <__kernel_tan+0x30e>
 801381c:	460f      	mov	r7, r1
 801381e:	4689      	mov	r9, r1
 8013820:	4602      	mov	r2, r0
 8013822:	460b      	mov	r3, r1
 8013824:	2000      	movs	r0, #0
 8013826:	493e      	ldr	r1, [pc, #248]	; (8013920 <__kernel_tan+0x3a0>)
 8013828:	f7ed f810 	bl	800084c <__aeabi_ddiv>
 801382c:	2600      	movs	r6, #0
 801382e:	e9cd 0100 	strd	r0, r1, [sp]
 8013832:	4652      	mov	r2, sl
 8013834:	465b      	mov	r3, fp
 8013836:	4630      	mov	r0, r6
 8013838:	4639      	mov	r1, r7
 801383a:	f7ec fd25 	bl	8000288 <__aeabi_dsub>
 801383e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013842:	4602      	mov	r2, r0
 8013844:	460b      	mov	r3, r1
 8013846:	ec51 0b18 	vmov	r0, r1, d8
 801384a:	f7ec fd1d 	bl	8000288 <__aeabi_dsub>
 801384e:	4632      	mov	r2, r6
 8013850:	462b      	mov	r3, r5
 8013852:	f7ec fed1 	bl	80005f8 <__aeabi_dmul>
 8013856:	46b0      	mov	r8, r6
 8013858:	460f      	mov	r7, r1
 801385a:	4606      	mov	r6, r0
 801385c:	4642      	mov	r2, r8
 801385e:	462b      	mov	r3, r5
 8013860:	4640      	mov	r0, r8
 8013862:	4649      	mov	r1, r9
 8013864:	f7ec fec8 	bl	80005f8 <__aeabi_dmul>
 8013868:	4b2c      	ldr	r3, [pc, #176]	; (801391c <__kernel_tan+0x39c>)
 801386a:	2200      	movs	r2, #0
 801386c:	f7ec fd0e 	bl	800028c <__adddf3>
 8013870:	4602      	mov	r2, r0
 8013872:	460b      	mov	r3, r1
 8013874:	4630      	mov	r0, r6
 8013876:	4639      	mov	r1, r7
 8013878:	f7ec fd08 	bl	800028c <__adddf3>
 801387c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013880:	f7ec feba 	bl	80005f8 <__aeabi_dmul>
 8013884:	4642      	mov	r2, r8
 8013886:	462b      	mov	r3, r5
 8013888:	f7ec fd00 	bl	800028c <__adddf3>
 801388c:	e69f      	b.n	80135ce <__kernel_tan+0x4e>
 801388e:	4682      	mov	sl, r0
 8013890:	468b      	mov	fp, r1
 8013892:	e69e      	b.n	80135d2 <__kernel_tan+0x52>
 8013894:	f3af 8000 	nop.w
 8013898:	54442d18 	.word	0x54442d18
 801389c:	3fe921fb 	.word	0x3fe921fb
 80138a0:	33145c07 	.word	0x33145c07
 80138a4:	3c81a626 	.word	0x3c81a626
	...
 80138b0:	74bf7ad4 	.word	0x74bf7ad4
 80138b4:	3efb2a70 	.word	0x3efb2a70
 80138b8:	32f0a7e9 	.word	0x32f0a7e9
 80138bc:	3f12b80f 	.word	0x3f12b80f
 80138c0:	1a8d1068 	.word	0x1a8d1068
 80138c4:	3f3026f7 	.word	0x3f3026f7
 80138c8:	fee08315 	.word	0xfee08315
 80138cc:	3f57dbc8 	.word	0x3f57dbc8
 80138d0:	e96e8493 	.word	0xe96e8493
 80138d4:	3f8226e3 	.word	0x3f8226e3
 80138d8:	1bb341fe 	.word	0x1bb341fe
 80138dc:	3faba1ba 	.word	0x3faba1ba
 80138e0:	db605373 	.word	0xdb605373
 80138e4:	bef375cb 	.word	0xbef375cb
 80138e8:	a03792a6 	.word	0xa03792a6
 80138ec:	3f147e88 	.word	0x3f147e88
 80138f0:	f2f26501 	.word	0xf2f26501
 80138f4:	3f4344d8 	.word	0x3f4344d8
 80138f8:	c9560328 	.word	0xc9560328
 80138fc:	3f6d6d22 	.word	0x3f6d6d22
 8013900:	8406d637 	.word	0x8406d637
 8013904:	3f9664f4 	.word	0x3f9664f4
 8013908:	1110fe7a 	.word	0x1110fe7a
 801390c:	3fc11111 	.word	0x3fc11111
 8013910:	55555563 	.word	0x55555563
 8013914:	3fd55555 	.word	0x3fd55555
 8013918:	3e2fffff 	.word	0x3e2fffff
 801391c:	3ff00000 	.word	0x3ff00000
 8013920:	bff00000 	.word	0xbff00000
 8013924:	3fe59427 	.word	0x3fe59427

08013928 <fabs>:
 8013928:	ec51 0b10 	vmov	r0, r1, d0
 801392c:	ee10 2a10 	vmov	r2, s0
 8013930:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013934:	ec43 2b10 	vmov	d0, r2, r3
 8013938:	4770      	bx	lr
 801393a:	0000      	movs	r0, r0
 801393c:	0000      	movs	r0, r0
	...

08013940 <floor>:
 8013940:	ec51 0b10 	vmov	r0, r1, d0
 8013944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013948:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801394c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013950:	2e13      	cmp	r6, #19
 8013952:	ee10 5a10 	vmov	r5, s0
 8013956:	ee10 8a10 	vmov	r8, s0
 801395a:	460c      	mov	r4, r1
 801395c:	dc32      	bgt.n	80139c4 <floor+0x84>
 801395e:	2e00      	cmp	r6, #0
 8013960:	da14      	bge.n	801398c <floor+0x4c>
 8013962:	a333      	add	r3, pc, #204	; (adr r3, 8013a30 <floor+0xf0>)
 8013964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013968:	f7ec fc90 	bl	800028c <__adddf3>
 801396c:	2200      	movs	r2, #0
 801396e:	2300      	movs	r3, #0
 8013970:	f7ed f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8013974:	b138      	cbz	r0, 8013986 <floor+0x46>
 8013976:	2c00      	cmp	r4, #0
 8013978:	da57      	bge.n	8013a2a <floor+0xea>
 801397a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801397e:	431d      	orrs	r5, r3
 8013980:	d001      	beq.n	8013986 <floor+0x46>
 8013982:	4c2d      	ldr	r4, [pc, #180]	; (8013a38 <floor+0xf8>)
 8013984:	2500      	movs	r5, #0
 8013986:	4621      	mov	r1, r4
 8013988:	4628      	mov	r0, r5
 801398a:	e025      	b.n	80139d8 <floor+0x98>
 801398c:	4f2b      	ldr	r7, [pc, #172]	; (8013a3c <floor+0xfc>)
 801398e:	4137      	asrs	r7, r6
 8013990:	ea01 0307 	and.w	r3, r1, r7
 8013994:	4303      	orrs	r3, r0
 8013996:	d01f      	beq.n	80139d8 <floor+0x98>
 8013998:	a325      	add	r3, pc, #148	; (adr r3, 8013a30 <floor+0xf0>)
 801399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399e:	f7ec fc75 	bl	800028c <__adddf3>
 80139a2:	2200      	movs	r2, #0
 80139a4:	2300      	movs	r3, #0
 80139a6:	f7ed f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 80139aa:	2800      	cmp	r0, #0
 80139ac:	d0eb      	beq.n	8013986 <floor+0x46>
 80139ae:	2c00      	cmp	r4, #0
 80139b0:	bfbe      	ittt	lt
 80139b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80139b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80139ba:	19a4      	addlt	r4, r4, r6
 80139bc:	ea24 0407 	bic.w	r4, r4, r7
 80139c0:	2500      	movs	r5, #0
 80139c2:	e7e0      	b.n	8013986 <floor+0x46>
 80139c4:	2e33      	cmp	r6, #51	; 0x33
 80139c6:	dd0b      	ble.n	80139e0 <floor+0xa0>
 80139c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80139cc:	d104      	bne.n	80139d8 <floor+0x98>
 80139ce:	ee10 2a10 	vmov	r2, s0
 80139d2:	460b      	mov	r3, r1
 80139d4:	f7ec fc5a 	bl	800028c <__adddf3>
 80139d8:	ec41 0b10 	vmov	d0, r0, r1
 80139dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80139e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139e8:	fa23 f707 	lsr.w	r7, r3, r7
 80139ec:	4207      	tst	r7, r0
 80139ee:	d0f3      	beq.n	80139d8 <floor+0x98>
 80139f0:	a30f      	add	r3, pc, #60	; (adr r3, 8013a30 <floor+0xf0>)
 80139f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f6:	f7ec fc49 	bl	800028c <__adddf3>
 80139fa:	2200      	movs	r2, #0
 80139fc:	2300      	movs	r3, #0
 80139fe:	f7ed f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8013a02:	2800      	cmp	r0, #0
 8013a04:	d0bf      	beq.n	8013986 <floor+0x46>
 8013a06:	2c00      	cmp	r4, #0
 8013a08:	da02      	bge.n	8013a10 <floor+0xd0>
 8013a0a:	2e14      	cmp	r6, #20
 8013a0c:	d103      	bne.n	8013a16 <floor+0xd6>
 8013a0e:	3401      	adds	r4, #1
 8013a10:	ea25 0507 	bic.w	r5, r5, r7
 8013a14:	e7b7      	b.n	8013986 <floor+0x46>
 8013a16:	2301      	movs	r3, #1
 8013a18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013a1c:	fa03 f606 	lsl.w	r6, r3, r6
 8013a20:	4435      	add	r5, r6
 8013a22:	4545      	cmp	r5, r8
 8013a24:	bf38      	it	cc
 8013a26:	18e4      	addcc	r4, r4, r3
 8013a28:	e7f2      	b.n	8013a10 <floor+0xd0>
 8013a2a:	2500      	movs	r5, #0
 8013a2c:	462c      	mov	r4, r5
 8013a2e:	e7aa      	b.n	8013986 <floor+0x46>
 8013a30:	8800759c 	.word	0x8800759c
 8013a34:	7e37e43c 	.word	0x7e37e43c
 8013a38:	bff00000 	.word	0xbff00000
 8013a3c:	000fffff 	.word	0x000fffff

08013a40 <scalbn>:
 8013a40:	b570      	push	{r4, r5, r6, lr}
 8013a42:	ec55 4b10 	vmov	r4, r5, d0
 8013a46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013a4a:	4606      	mov	r6, r0
 8013a4c:	462b      	mov	r3, r5
 8013a4e:	b99a      	cbnz	r2, 8013a78 <scalbn+0x38>
 8013a50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013a54:	4323      	orrs	r3, r4
 8013a56:	d036      	beq.n	8013ac6 <scalbn+0x86>
 8013a58:	4b39      	ldr	r3, [pc, #228]	; (8013b40 <scalbn+0x100>)
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	ee10 0a10 	vmov	r0, s0
 8013a60:	2200      	movs	r2, #0
 8013a62:	f7ec fdc9 	bl	80005f8 <__aeabi_dmul>
 8013a66:	4b37      	ldr	r3, [pc, #220]	; (8013b44 <scalbn+0x104>)
 8013a68:	429e      	cmp	r6, r3
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	460d      	mov	r5, r1
 8013a6e:	da10      	bge.n	8013a92 <scalbn+0x52>
 8013a70:	a32b      	add	r3, pc, #172	; (adr r3, 8013b20 <scalbn+0xe0>)
 8013a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a76:	e03a      	b.n	8013aee <scalbn+0xae>
 8013a78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013a7c:	428a      	cmp	r2, r1
 8013a7e:	d10c      	bne.n	8013a9a <scalbn+0x5a>
 8013a80:	ee10 2a10 	vmov	r2, s0
 8013a84:	4620      	mov	r0, r4
 8013a86:	4629      	mov	r1, r5
 8013a88:	f7ec fc00 	bl	800028c <__adddf3>
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	460d      	mov	r5, r1
 8013a90:	e019      	b.n	8013ac6 <scalbn+0x86>
 8013a92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013a96:	460b      	mov	r3, r1
 8013a98:	3a36      	subs	r2, #54	; 0x36
 8013a9a:	4432      	add	r2, r6
 8013a9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013aa0:	428a      	cmp	r2, r1
 8013aa2:	dd08      	ble.n	8013ab6 <scalbn+0x76>
 8013aa4:	2d00      	cmp	r5, #0
 8013aa6:	a120      	add	r1, pc, #128	; (adr r1, 8013b28 <scalbn+0xe8>)
 8013aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013aac:	da1c      	bge.n	8013ae8 <scalbn+0xa8>
 8013aae:	a120      	add	r1, pc, #128	; (adr r1, 8013b30 <scalbn+0xf0>)
 8013ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ab4:	e018      	b.n	8013ae8 <scalbn+0xa8>
 8013ab6:	2a00      	cmp	r2, #0
 8013ab8:	dd08      	ble.n	8013acc <scalbn+0x8c>
 8013aba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013abe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013ac2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013ac6:	ec45 4b10 	vmov	d0, r4, r5
 8013aca:	bd70      	pop	{r4, r5, r6, pc}
 8013acc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013ad0:	da19      	bge.n	8013b06 <scalbn+0xc6>
 8013ad2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013ad6:	429e      	cmp	r6, r3
 8013ad8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8013adc:	dd0a      	ble.n	8013af4 <scalbn+0xb4>
 8013ade:	a112      	add	r1, pc, #72	; (adr r1, 8013b28 <scalbn+0xe8>)
 8013ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d1e2      	bne.n	8013aae <scalbn+0x6e>
 8013ae8:	a30f      	add	r3, pc, #60	; (adr r3, 8013b28 <scalbn+0xe8>)
 8013aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aee:	f7ec fd83 	bl	80005f8 <__aeabi_dmul>
 8013af2:	e7cb      	b.n	8013a8c <scalbn+0x4c>
 8013af4:	a10a      	add	r1, pc, #40	; (adr r1, 8013b20 <scalbn+0xe0>)
 8013af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d0b8      	beq.n	8013a70 <scalbn+0x30>
 8013afe:	a10e      	add	r1, pc, #56	; (adr r1, 8013b38 <scalbn+0xf8>)
 8013b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b04:	e7b4      	b.n	8013a70 <scalbn+0x30>
 8013b06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013b0a:	3236      	adds	r2, #54	; 0x36
 8013b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013b10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013b14:	4620      	mov	r0, r4
 8013b16:	4b0c      	ldr	r3, [pc, #48]	; (8013b48 <scalbn+0x108>)
 8013b18:	2200      	movs	r2, #0
 8013b1a:	e7e8      	b.n	8013aee <scalbn+0xae>
 8013b1c:	f3af 8000 	nop.w
 8013b20:	c2f8f359 	.word	0xc2f8f359
 8013b24:	01a56e1f 	.word	0x01a56e1f
 8013b28:	8800759c 	.word	0x8800759c
 8013b2c:	7e37e43c 	.word	0x7e37e43c
 8013b30:	8800759c 	.word	0x8800759c
 8013b34:	fe37e43c 	.word	0xfe37e43c
 8013b38:	c2f8f359 	.word	0xc2f8f359
 8013b3c:	81a56e1f 	.word	0x81a56e1f
 8013b40:	43500000 	.word	0x43500000
 8013b44:	ffff3cb0 	.word	0xffff3cb0
 8013b48:	3c900000 	.word	0x3c900000

08013b4c <_init>:
 8013b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b4e:	bf00      	nop
 8013b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b52:	bc08      	pop	{r3}
 8013b54:	469e      	mov	lr, r3
 8013b56:	4770      	bx	lr

08013b58 <_fini>:
 8013b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5a:	bf00      	nop
 8013b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b5e:	bc08      	pop	{r3}
 8013b60:	469e      	mov	lr, r3
 8013b62:	4770      	bx	lr
