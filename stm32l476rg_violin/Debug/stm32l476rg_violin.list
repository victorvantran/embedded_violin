
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001032c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  080104bc  080104bc  000204bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d7c  08010d7c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010d7c  08010d7c  00020d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d84  08010d84  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d84  08010d84  00020d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d88  08010d88  00020d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08010d8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010488  200001dc  08010f68  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010664  08010f68  00030664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef07  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056da  00000000  00000000  0005f113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002288  00000000  00000000  000647f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002070  00000000  00000000  00066a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e84c  00000000  00000000  00068ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d5e  00000000  00000000  00097334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001185b9  00000000  00000000  000bf092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d764b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b80  00000000  00000000  001d76a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104a4 	.word	0x080104a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080104a4 	.word	0x080104a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <SELECT+0x18>)
 8000dbe:	f003 fc5b 	bl	8004678 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f001 ff54 	bl	8002c70 <HAL_Delay>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <DESELECT+0x18>)
 8000dda:	f003 fc4d 	bl	8004678 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f001 ff46 	bl	8002c70 <HAL_Delay>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	48000400 	.word	0x48000400

08000dec <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000df6:	bf00      	nop
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SPI_TxByte+0x30>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d1f8      	bne.n	8000df8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000e06:	1df9      	adds	r1, r7, #7
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <SPI_TxByte+0x30>)
 8000e0e:	f005 f82c 	bl	8005e6a <HAL_SPI_Transmit>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000d434 	.word	0x2000d434

08000e20 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e2c:	bf00      	nop
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <SPI_TxBuffer+0x30>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d1f8      	bne.n	8000e2e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4803      	ldr	r0, [pc, #12]	; (8000e50 <SPI_TxBuffer+0x30>)
 8000e44:	f005 f811 	bl	8005e6a <HAL_SPI_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000d434 	.word	0x2000d434

08000e54 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e5e:	bf00      	nop
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <SPI_RxByte+0x34>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d1f8      	bne.n	8000e60 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e6e:	1dba      	adds	r2, r7, #6
 8000e70:	1df9      	adds	r1, r7, #7
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <SPI_RxByte+0x34>)
 8000e7a:	f005 f964 	bl	8006146 <HAL_SPI_TransmitReceive>

	return data;
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000d434 	.word	0x2000d434

08000e8c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e94:	f7ff ffde 	bl	8000e54 <SPI_RxByte>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	701a      	strb	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <SD_ReadyWait+0x30>)
 8000eb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000eb6:	f7ff ffcd 	bl	8000e54 <SPI_RxByte>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2bff      	cmp	r3, #255	; 0xff
 8000ec2:	d003      	beq.n	8000ecc <SD_ReadyWait+0x24>
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SD_ReadyWait+0x30>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f4      	bne.n	8000eb6 <SD_ReadyWait+0xe>

	return res;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20004218 	.word	0x20004218

08000edc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000ee2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ee6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ee8:	f7ff ff72 	bl	8000dd0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	e005      	b.n	8000efe <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ef2:	20ff      	movs	r0, #255	; 0xff
 8000ef4:	f7ff ff7a 	bl	8000dec <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b09      	cmp	r3, #9
 8000f02:	ddf6      	ble.n	8000ef2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000f04:	f7ff ff56 	bl	8000db4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000f1c:	2395      	movs	r3, #149	; 0x95
 8000f1e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000f20:	463b      	mov	r3, r7
 8000f22:	2106      	movs	r1, #6
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff7b 	bl	8000e20 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000f2a:	e002      	b.n	8000f32 <SD_PowerOn+0x56>
	{
		cnt--;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000f32:	f7ff ff8f 	bl	8000e54 <SPI_RxByte>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <SD_PowerOn+0x66>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f4      	bne.n	8000f2c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000f42:	f7ff ff45 	bl	8000dd0 <DESELECT>
	SPI_TxByte(0XFF);
 8000f46:	20ff      	movs	r0, #255	; 0xff
 8000f48:	f7ff ff50 	bl	8000dec <SPI_TxByte>

	PowerFlag = 1;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <SD_PowerOn+0x80>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001f9 	.word	0x200001f9

08000f60 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <SD_PowerOff+0x14>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200001f9 	.word	0x200001f9

08000f78 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <SD_CheckPower+0x14>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001f9 	.word	0x200001f9

08000f90 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <SD_RxDataBlock+0x58>)
 8000f9c:	22c8      	movs	r2, #200	; 0xc8
 8000f9e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000fa0:	f7ff ff58 	bl	8000e54 <SPI_RxByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2bff      	cmp	r3, #255	; 0xff
 8000fac:	d103      	bne.n	8000fb6 <SD_RxDataBlock+0x26>
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <SD_RxDataBlock+0x58>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f4      	bne.n	8000fa0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2bfe      	cmp	r3, #254	; 0xfe
 8000fba:	d001      	beq.n	8000fc0 <SD_RxDataBlock+0x30>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e00f      	b.n	8000fe0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff60 	bl	8000e8c <SPI_RxBytePtr>
	} while(len--);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	603a      	str	r2, [r7, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f4      	bne.n	8000fc0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000fd6:	f7ff ff3d 	bl	8000e54 <SPI_RxByte>
	SPI_RxByte();
 8000fda:	f7ff ff3b 	bl	8000e54 <SPI_RxByte>

	return TRUE;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000421a 	.word	0x2000421a

08000fec <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ffc:	f7ff ff54 	bl	8000ea8 <SD_ReadyWait>
 8001000:	4603      	mov	r3, r0
 8001002:	2bff      	cmp	r3, #255	; 0xff
 8001004:	d001      	beq.n	800100a <SD_TxDataBlock+0x1e>
 8001006:	2300      	movs	r3, #0
 8001008:	e02f      	b.n	800106a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff feed 	bl	8000dec <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	2bfd      	cmp	r3, #253	; 0xfd
 8001016:	d020      	beq.n	800105a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff feff 	bl	8000e20 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001022:	f7ff ff17 	bl	8000e54 <SPI_RxByte>
		SPI_RxByte();
 8001026:	f7ff ff15 	bl	8000e54 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800102a:	e00b      	b.n	8001044 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800102c:	f7ff ff12 	bl	8000e54 <SPI_RxByte>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2b05      	cmp	r3, #5
 800103c:	d006      	beq.n	800104c <SD_TxDataBlock+0x60>
			i++;
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	3301      	adds	r3, #1
 8001042:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	2b40      	cmp	r3, #64	; 0x40
 8001048:	d9f0      	bls.n	800102c <SD_TxDataBlock+0x40>
 800104a:	e000      	b.n	800104e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800104c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800104e:	bf00      	nop
 8001050:	f7ff ff00 	bl	8000e54 <SPI_RxByte>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0fa      	beq.n	8001050 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	2b05      	cmp	r3, #5
 8001062:	d101      	bne.n	8001068 <SD_TxDataBlock+0x7c>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	6039      	str	r1, [r7, #0]
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800107e:	f7ff ff13 	bl	8000ea8 <SD_ReadyWait>
 8001082:	4603      	mov	r3, r0
 8001084:	2bff      	cmp	r3, #255	; 0xff
 8001086:	d001      	beq.n	800108c <SD_SendCmd+0x1a>
 8001088:	23ff      	movs	r3, #255	; 0xff
 800108a:	e042      	b.n	8001112 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff feac 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	0e1b      	lsrs	r3, r3, #24
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fea6 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	0c1b      	lsrs	r3, r3, #16
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fea0 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fe9a 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe95 	bl	8000dec <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b40      	cmp	r3, #64	; 0x40
 80010c6:	d102      	bne.n	80010ce <SD_SendCmd+0x5c>
 80010c8:	2395      	movs	r3, #149	; 0x95
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e007      	b.n	80010de <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b48      	cmp	r3, #72	; 0x48
 80010d2:	d102      	bne.n	80010da <SD_SendCmd+0x68>
 80010d4:	2387      	movs	r3, #135	; 0x87
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <SD_SendCmd+0x6c>
	else crc = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fe83 	bl	8000dec <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b4c      	cmp	r3, #76	; 0x4c
 80010ea:	d101      	bne.n	80010f0 <SD_SendCmd+0x7e>
 80010ec:	f7ff feb2 	bl	8000e54 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80010f0:	230a      	movs	r3, #10
 80010f2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80010f4:	f7ff feae 	bl	8000e54 <SPI_RxByte>
 80010f8:	4603      	mov	r3, r0
 80010fa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80010fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da05      	bge.n	8001110 <SD_SendCmd+0x9e>
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	3b01      	subs	r3, #1
 8001108:	73bb      	strb	r3, [r7, #14]
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f1      	bne.n	80010f4 <SD_SendCmd+0x82>

	return res;
 8001110:	7b7b      	ldrb	r3, [r7, #13]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SD_disk_initialize+0x14>
 800112c:	2301      	movs	r3, #1
 800112e:	e0d1      	b.n	80012d4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001130:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <SD_disk_initialize+0x1c0>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <SD_disk_initialize+0x2a>
 800113e:	4b67      	ldr	r3, [pc, #412]	; (80012dc <SD_disk_initialize+0x1c0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	e0c6      	b.n	80012d4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001146:	f7ff fec9 	bl	8000edc <SD_PowerOn>

	/* slave select */
	SELECT();
 800114a:	f7ff fe33 	bl	8000db4 <SELECT>

	/* check disk type */
	type = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001152:	2100      	movs	r1, #0
 8001154:	2040      	movs	r0, #64	; 0x40
 8001156:	f7ff ff8c 	bl	8001072 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	f040 80a1 	bne.w	80012a4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <SD_disk_initialize+0x1c4>)
 8001164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001168:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800116a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800116e:	2048      	movs	r0, #72	; 0x48
 8001170:	f7ff ff7f 	bl	8001072 <SD_SendCmd>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d155      	bne.n	8001226 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e00c      	b.n	800119a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001180:	7bfc      	ldrb	r4, [r7, #15]
 8001182:	f7ff fe67 	bl	8000e54 <SPI_RxByte>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4423      	add	r3, r4
 8001190:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d9ef      	bls.n	8001180 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d17e      	bne.n	80012a4 <SD_disk_initialize+0x188>
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	2baa      	cmp	r3, #170	; 0xaa
 80011aa:	d17b      	bne.n	80012a4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80011ac:	2100      	movs	r1, #0
 80011ae:	2077      	movs	r0, #119	; 0x77
 80011b0:	f7ff ff5f 	bl	8001072 <SD_SendCmd>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d807      	bhi.n	80011ca <SD_disk_initialize+0xae>
 80011ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011be:	2069      	movs	r0, #105	; 0x69
 80011c0:	f7ff ff57 	bl	8001072 <SD_SendCmd>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80011ca:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <SD_disk_initialize+0x1c4>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ec      	bne.n	80011ac <SD_disk_initialize+0x90>
 80011d2:	e000      	b.n	80011d6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80011d4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80011d6:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <SD_disk_initialize+0x1c4>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d062      	beq.n	80012a4 <SD_disk_initialize+0x188>
 80011de:	2100      	movs	r1, #0
 80011e0:	207a      	movs	r0, #122	; 0x7a
 80011e2:	f7ff ff46 	bl	8001072 <SD_SendCmd>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d15b      	bne.n	80012a4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e00c      	b.n	800120c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80011f2:	7bfc      	ldrb	r4, [r7, #15]
 80011f4:	f7ff fe2e 	bl	8000e54 <SPI_RxByte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4423      	add	r3, r4
 8001202:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	3301      	adds	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d9ef      	bls.n	80011f2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001212:	7a3b      	ldrb	r3, [r7, #8]
 8001214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SD_disk_initialize+0x104>
 800121c:	230c      	movs	r3, #12
 800121e:	e000      	b.n	8001222 <SD_disk_initialize+0x106>
 8001220:	2304      	movs	r3, #4
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	e03e      	b.n	80012a4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001226:	2100      	movs	r1, #0
 8001228:	2077      	movs	r0, #119	; 0x77
 800122a:	f7ff ff22 	bl	8001072 <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d808      	bhi.n	8001246 <SD_disk_initialize+0x12a>
 8001234:	2100      	movs	r1, #0
 8001236:	2069      	movs	r0, #105	; 0x69
 8001238:	f7ff ff1b 	bl	8001072 <SD_SendCmd>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d801      	bhi.n	8001246 <SD_disk_initialize+0x12a>
 8001242:	2302      	movs	r3, #2
 8001244:	e000      	b.n	8001248 <SD_disk_initialize+0x12c>
 8001246:	2301      	movs	r3, #1
 8001248:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d10e      	bne.n	800126e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001250:	2100      	movs	r1, #0
 8001252:	2077      	movs	r0, #119	; 0x77
 8001254:	f7ff ff0d 	bl	8001072 <SD_SendCmd>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d80e      	bhi.n	800127c <SD_disk_initialize+0x160>
 800125e:	2100      	movs	r1, #0
 8001260:	2069      	movs	r0, #105	; 0x69
 8001262:	f7ff ff06 	bl	8001072 <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <SD_disk_initialize+0x160>
 800126c:	e00c      	b.n	8001288 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800126e:	2100      	movs	r1, #0
 8001270:	2041      	movs	r0, #65	; 0x41
 8001272:	f7ff fefe 	bl	8001072 <SD_SendCmd>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <SD_disk_initialize+0x1c4>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e2      	bne.n	800124a <SD_disk_initialize+0x12e>
 8001284:	e000      	b.n	8001288 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001286:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <SD_disk_initialize+0x1c4>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <SD_disk_initialize+0x184>
 8001290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001294:	2050      	movs	r0, #80	; 0x50
 8001296:	f7ff feec 	bl	8001072 <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SD_disk_initialize+0x188>
 80012a0:	2300      	movs	r3, #0
 80012a2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <SD_disk_initialize+0x1c8>)
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80012aa:	f7ff fd91 	bl	8000dd0 <DESELECT>
	SPI_RxByte();
 80012ae:	f7ff fdd1 	bl	8000e54 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <SD_disk_initialize+0x1c0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SD_disk_initialize+0x1c0>)
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e001      	b.n	80012ce <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80012ca:	f7ff fe49 	bl	8000f60 <SD_PowerOff>
	}

	return Stat;
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <SD_disk_initialize+0x1c0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	2000421a 	.word	0x2000421a
 80012e4:	200001f8 	.word	0x200001f8

080012e8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SD_disk_status+0x14>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e002      	b.n	8001302 <SD_disk_status+0x1a>
	return Stat;
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SD_disk_status+0x28>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <SD_disk_read+0x1c>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <SD_disk_read+0x20>
 8001330:	2304      	movs	r3, #4
 8001332:	e051      	b.n	80013d8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <SD_disk_read+0xcc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SD_disk_read+0x32>
 8001342:	2303      	movs	r3, #3
 8001344:	e048      	b.n	80013d8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <SD_disk_read+0xd0>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <SD_disk_read+0x44>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	607b      	str	r3, [r7, #4]

	SELECT();
 8001358:	f7ff fd2c 	bl	8000db4 <SELECT>

	if (count == 1)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d111      	bne.n	8001386 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2051      	movs	r0, #81	; 0x51
 8001366:	f7ff fe84 	bl	8001072 <SD_SendCmd>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d129      	bne.n	80013c4 <SD_disk_read+0xb0>
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff fe0b 	bl	8000f90 <SD_RxDataBlock>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d021      	beq.n	80013c4 <SD_disk_read+0xb0>
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	e01e      	b.n	80013c4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	2052      	movs	r0, #82	; 0x52
 800138a:	f7ff fe72 	bl	8001072 <SD_SendCmd>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d117      	bne.n	80013c4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff fdf9 	bl	8000f90 <SD_RxDataBlock>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <SD_disk_read+0xa6>
				buff += 512;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013aa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1ed      	bne.n	8001394 <SD_disk_read+0x80>
 80013b8:	e000      	b.n	80013bc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80013ba:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80013bc:	2100      	movs	r1, #0
 80013be:	204c      	movs	r0, #76	; 0x4c
 80013c0:	f7ff fe57 	bl	8001072 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80013c4:	f7ff fd04 	bl	8000dd0 <DESELECT>
	SPI_RxByte();
 80013c8:	f7ff fd44 	bl	8000e54 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000000 	.word	0x20000000
 80013e4:	200001f8 	.word	0x200001f8

080013e8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <SD_disk_write+0x1c>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <SD_disk_write+0x20>
 8001404:	2304      	movs	r3, #4
 8001406:	e06b      	b.n	80014e0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <SD_disk_write+0x100>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SD_disk_write+0x32>
 8001416:	2303      	movs	r3, #3
 8001418:	e062      	b.n	80014e0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <SD_disk_write+0x100>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SD_disk_write+0x44>
 8001428:	2302      	movs	r3, #2
 800142a:	e059      	b.n	80014e0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <SD_disk_write+0x104>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <SD_disk_write+0x56>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	607b      	str	r3, [r7, #4]

	SELECT();
 800143e:	f7ff fcb9 	bl	8000db4 <SELECT>

	if (count == 1)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d110      	bne.n	800146a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	2058      	movs	r0, #88	; 0x58
 800144c:	f7ff fe11 	bl	8001072 <SD_SendCmd>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d13a      	bne.n	80014cc <SD_disk_write+0xe4>
 8001456:	21fe      	movs	r1, #254	; 0xfe
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f7ff fdc7 	bl	8000fec <SD_TxDataBlock>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d033      	beq.n	80014cc <SD_disk_write+0xe4>
			count = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	e030      	b.n	80014cc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <SD_disk_write+0x104>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001476:	2100      	movs	r1, #0
 8001478:	2077      	movs	r0, #119	; 0x77
 800147a:	f7ff fdfa 	bl	8001072 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	2057      	movs	r0, #87	; 0x57
 8001482:	f7ff fdf6 	bl	8001072 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	2059      	movs	r0, #89	; 0x59
 800148a:	f7ff fdf2 	bl	8001072 <SD_SendCmd>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d11b      	bne.n	80014cc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001494:	21fc      	movs	r1, #252	; 0xfc
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7ff fda8 	bl	8000fec <SD_TxDataBlock>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <SD_disk_write+0xd0>
				buff += 512;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ee      	bne.n	8001494 <SD_disk_write+0xac>
 80014b6:	e000      	b.n	80014ba <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80014b8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80014ba:	21fd      	movs	r1, #253	; 0xfd
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fd95 	bl	8000fec <SD_TxDataBlock>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <SD_disk_write+0xe4>
			{
				count = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80014cc:	f7ff fc80 	bl	8000dd0 <DESELECT>
	SPI_RxByte();
 80014d0:	f7ff fcc0 	bl	8000e54 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	200001f8 	.word	0x200001f8

080014f0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	460b      	mov	r3, r1
 80014fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SD_disk_ioctl+0x1e>
 800150a:	2304      	movs	r3, #4
 800150c:	e115      	b.n	800173a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d124      	bne.n	8001564 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d012      	beq.n	8001548 <SD_disk_ioctl+0x58>
 8001522:	2b02      	cmp	r3, #2
 8001524:	dc1a      	bgt.n	800155c <SD_disk_ioctl+0x6c>
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <SD_disk_ioctl+0x40>
 800152a:	2b01      	cmp	r3, #1
 800152c:	d006      	beq.n	800153c <SD_disk_ioctl+0x4c>
 800152e:	e015      	b.n	800155c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001530:	f7ff fd16 	bl	8000f60 <SD_PowerOff>
			res = RES_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800153a:	e0fc      	b.n	8001736 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800153c:	f7ff fcce 	bl	8000edc <SD_PowerOn>
			res = RES_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001546:	e0f6      	b.n	8001736 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	1c5c      	adds	r4, r3, #1
 800154c:	f7ff fd14 	bl	8000f78 <SD_CheckPower>
 8001550:	4603      	mov	r3, r0
 8001552:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800155a:	e0ec      	b.n	8001736 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800155c:	2304      	movs	r3, #4
 800155e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001562:	e0e8      	b.n	8001736 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <SD_disk_ioctl+0x254>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_ioctl+0x86>
 8001572:	2303      	movs	r3, #3
 8001574:	e0e1      	b.n	800173a <SD_disk_ioctl+0x24a>

		SELECT();
 8001576:	f7ff fc1d 	bl	8000db4 <SELECT>

		switch (ctrl)
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	f200 80cb 	bhi.w	8001718 <SD_disk_ioctl+0x228>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <SD_disk_ioctl+0x98>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001683 	.word	0x08001683
 800158c:	080015c1 	.word	0x080015c1
 8001590:	08001673 	.word	0x08001673
 8001594:	08001719 	.word	0x08001719
 8001598:	08001719 	.word	0x08001719
 800159c:	08001719 	.word	0x08001719
 80015a0:	08001719 	.word	0x08001719
 80015a4:	08001719 	.word	0x08001719
 80015a8:	08001719 	.word	0x08001719
 80015ac:	08001719 	.word	0x08001719
 80015b0:	08001719 	.word	0x08001719
 80015b4:	08001695 	.word	0x08001695
 80015b8:	080016b9 	.word	0x080016b9
 80015bc:	080016dd 	.word	0x080016dd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80015c0:	2100      	movs	r1, #0
 80015c2:	2049      	movs	r0, #73	; 0x49
 80015c4:	f7ff fd55 	bl	8001072 <SD_SendCmd>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80a8 	bne.w	8001720 <SD_disk_ioctl+0x230>
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2110      	movs	r1, #16
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fcda 	bl	8000f90 <SD_RxDataBlock>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 809e 	beq.w	8001720 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10e      	bne.n	800160c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015ee:	7d7b      	ldrb	r3, [r7, #21]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	7d3b      	ldrb	r3, [r7, #20]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001602:	8bfb      	ldrh	r3, [r7, #30]
 8001604:	029a      	lsls	r2, r3, #10
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e02e      	b.n	800166a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	b2da      	uxtb	r2, r3
 8001614:	7dbb      	ldrb	r3, [r7, #22]
 8001616:	09db      	lsrs	r3, r3, #7
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	7d7b      	ldrb	r3, [r7, #21]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 0306 	and.w	r3, r3, #6
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3302      	adds	r3, #2
 8001630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001634:	7d3b      	ldrb	r3, [r7, #20]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	b2db      	uxtb	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	b29b      	uxth	r3, r3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	b29b      	uxth	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	7cbb      	ldrb	r3, [r7, #18]
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	b29b      	uxth	r3, r3
 800164e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	b29b      	uxth	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800165c:	8bfa      	ldrh	r2, [r7, #30]
 800165e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001662:	3b09      	subs	r3, #9
 8001664:	409a      	lsls	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001670:	e056      	b.n	8001720 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001680:	e055      	b.n	800172e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001682:	f7ff fc11 	bl	8000ea8 <SD_ReadyWait>
 8001686:	4603      	mov	r3, r0
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d14b      	bne.n	8001724 <SD_disk_ioctl+0x234>
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001692:	e047      	b.n	8001724 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001694:	2100      	movs	r1, #0
 8001696:	2049      	movs	r0, #73	; 0x49
 8001698:	f7ff fceb 	bl	8001072 <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d142      	bne.n	8001728 <SD_disk_ioctl+0x238>
 80016a2:	2110      	movs	r1, #16
 80016a4:	6a38      	ldr	r0, [r7, #32]
 80016a6:	f7ff fc73 	bl	8000f90 <SD_RxDataBlock>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03b      	beq.n	8001728 <SD_disk_ioctl+0x238>
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016b6:	e037      	b.n	8001728 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80016b8:	2100      	movs	r1, #0
 80016ba:	204a      	movs	r0, #74	; 0x4a
 80016bc:	f7ff fcd9 	bl	8001072 <SD_SendCmd>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d132      	bne.n	800172c <SD_disk_ioctl+0x23c>
 80016c6:	2110      	movs	r1, #16
 80016c8:	6a38      	ldr	r0, [r7, #32]
 80016ca:	f7ff fc61 	bl	8000f90 <SD_RxDataBlock>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d02b      	beq.n	800172c <SD_disk_ioctl+0x23c>
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016da:	e027      	b.n	800172c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80016dc:	2100      	movs	r1, #0
 80016de:	207a      	movs	r0, #122	; 0x7a
 80016e0:	f7ff fcc7 	bl	8001072 <SD_SendCmd>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016f0:	e00b      	b.n	800170a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80016f2:	6a3c      	ldr	r4, [r7, #32]
 80016f4:	1c63      	adds	r3, r4, #1
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	f7ff fbac 	bl	8000e54 <SPI_RxByte>
 80016fc:	4603      	mov	r3, r0
 80016fe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001704:	3301      	adds	r3, #1
 8001706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800170a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800170e:	2b03      	cmp	r3, #3
 8001710:	d9ef      	bls.n	80016f2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001718:	2304      	movs	r3, #4
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171e:	e006      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 8001720:	bf00      	nop
 8001722:	e004      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 8001724:	bf00      	nop
 8001726:	e002      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 800172c:	bf00      	nop
		}

		DESELECT();
 800172e:	f7ff fb4f 	bl	8000dd0 <DESELECT>
		SPI_RxByte();
 8001732:	f7ff fb8f 	bl	8000e54 <SPI_RxByte>
	}

	return res;
 8001736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800173a:	4618      	mov	r0, r3
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000

08001748 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8001750:	1d39      	adds	r1, r7, #4
 8001752:	2364      	movs	r3, #100	; 0x64
 8001754:	2201      	movs	r2, #1
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <__io_putchar+0x20>)
 8001758:	f006 f9f8 	bl	8007b4c <HAL_UART_Transmit>
	return ch;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000d498 	.word	0x2000d498

0800176c <transmit_uart>:

void transmit_uart(char *string) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7fe fd2b 	bl	80001d0 <strlen>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, pdMS_TO_TICKS(100));
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	b29a      	uxth	r2, r3
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <transmit_uart+0x28>)
 8001788:	f006 f9e0 	bl	8007b4c <HAL_UART_Transmit>
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000d498 	.word	0x2000d498

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f001 fa28 	bl	8002bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 f84c 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a4:	f000 fa46 	bl	8001c34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017a8:	f000 fa14 	bl	8001bd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017ac:	f000 f8ce 	bl	800194c <MX_ADC1_Init>
  MX_TIM1_Init();
 80017b0:	f000 f980 	bl	8001ab4 <MX_TIM1_Init>
  MX_FATFS_Init();
 80017b4:	f006 fe50 	bl	8008458 <MX_FATFS_Init>
  MX_SPI1_Init();
 80017b8:	f000 f93e 	bl	8001a38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	4813      	ldr	r0, [pc, #76]	; (800180c <main+0x74>)
 80017c0:	f005 f95e 	bl	8006a80 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017c4:	f009 ff32 	bl	800b62c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 80017c8:	4a11      	ldr	r2, [pc, #68]	; (8001810 <main+0x78>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4811      	ldr	r0, [pc, #68]	; (8001814 <main+0x7c>)
 80017ce:	f009 ff8c 	bl	800b6ea <osThreadNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <main+0x80>)
 80017d6:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <main+0x84>)
 80017da:	2100      	movs	r1, #0
 80017dc:	4810      	ldr	r0, [pc, #64]	; (8001820 <main+0x88>)
 80017de:	f009 ff84 	bl	800b6ea <osThreadNew>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <main+0x8c>)
 80017e6:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <main+0x90>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <main+0x94>)
 80017ee:	f009 ff7c 	bl	800b6ea <osThreadNew>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <main+0x98>)
 80017f6:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 80017f8:	480e      	ldr	r0, [pc, #56]	; (8001834 <main+0x9c>)
 80017fa:	f00a f850 	bl	800b89e <osEventFlagsNew>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <main+0xa0>)
 8001802:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001804:	f009 ff36 	bl	800b674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001808:	e7fe      	b.n	8001808 <main+0x70>
 800180a:	bf00      	nop
 800180c:	2000d3dc 	.word	0x2000d3dc
 8001810:	080107d4 	.word	0x080107d4
 8001814:	08001ce1 	.word	0x08001ce1
 8001818:	200052d0 	.word	0x200052d0
 800181c:	080107f8 	.word	0x080107f8
 8001820:	08001e35 	.word	0x08001e35
 8001824:	20004220 	.word	0x20004220
 8001828:	0801081c 	.word	0x0801081c
 800182c:	08001e99 	.word	0x08001e99
 8001830:	2000d42c 	.word	0x2000d42c
 8001834:	08010840 	.word	0x08010840
 8001838:	20004224 	.word	0x20004224

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0b8      	sub	sp, #224	; 0xe0
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001846:	2244      	movs	r2, #68	; 0x44
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f00d fe56 	bl	800f4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2288      	movs	r2, #136	; 0x88
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f00d fe48 	bl	800f4fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187a:	2310      	movs	r3, #16
 800187c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800188c:	2301      	movs	r3, #1
 800188e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001892:	230a      	movs	r3, #10
 8001894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001898:	2307      	movs	r3, #7
 800189a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800189e:	2302      	movs	r3, #2
 80018a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 ff5e 	bl	8004770 <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018ba:	f000 fb21 	bl	8001f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018be:	230f      	movs	r3, #15
 80018c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018e0:	2104      	movs	r1, #4
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fb2a 	bl	8004f3c <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80018ee:	f000 fb07 	bl	8001f00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80018f2:	f244 0302 	movw	r3, #16386	; 0x4002
 80018f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001900:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001902:	2302      	movs	r3, #2
 8001904:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800190a:	2308      	movs	r3, #8
 800190c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800190e:	2307      	movs	r3, #7
 8001910:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001912:	2302      	movs	r3, #2
 8001914:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800191a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fd42 	bl	80053ac <HAL_RCCEx_PeriphCLKConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800192e:	f000 fae7 	bl	8001f00 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001932:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001936:	f002 fec5 	bl	80046c4 <HAL_PWREx_ControlVoltageScaling>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001940:	f000 fade 	bl	8001f00 <Error_Handler>
  }
}
 8001944:	bf00      	nop
 8001946:	37e0      	adds	r7, #224	; 0xe0
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001970:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <MX_ADC1_Init+0xe4>)
 8001972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <MX_ADC1_Init+0xe0>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <MX_ADC1_Init+0xe0>)
 800198e:	2204      	movs	r2, #4
 8001990:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001994:	2200      	movs	r2, #0
 8001996:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <MX_ADC1_Init+0xe0>)
 800199a:	2200      	movs	r2, #0
 800199c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ce:	4817      	ldr	r0, [pc, #92]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019d0:	f001 fb40 	bl	8003054 <HAL_ADC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019da:	f000 fa91 	bl	8001f00 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4810      	ldr	r0, [pc, #64]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019ea:	f002 fb09 	bl	8004000 <HAL_ADCEx_MultiModeConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019f4:	f000 fa84 	bl	8001f00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_ADC1_Init+0xe8>)
 80019fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019fc:	2306      	movs	r3, #6
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a04:	237f      	movs	r3, #127	; 0x7f
 8001a06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001a16:	f001 feab 	bl	8003770 <HAL_ADC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a20:	f000 fa6e 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000526c 	.word	0x2000526c
 8001a30:	50040000 	.word	0x50040000
 8001a34:	14f00020 	.word	0x14f00020

08001a38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <MX_SPI1_Init+0x78>)
 8001a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a6e:	2220      	movs	r2, #32
 8001a70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a86:	2207      	movs	r2, #7
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a92:	2208      	movs	r2, #8
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a98:	f004 f944 	bl	8005d24 <HAL_SPI_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aa2:	f000 fa2d 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000d434 	.word	0x2000d434
 8001ab0:	40013000 	.word	0x40013000

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b096      	sub	sp, #88	; 0x58
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	222c      	movs	r2, #44	; 0x2c
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00d fd0b 	bl	800f4fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001ae8:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <MX_TIM1_Init+0x11c>)
 8001aea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10 - 1;
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001aee:	2209      	movs	r2, #9
 8001af0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b12:	482e      	ldr	r0, [pc, #184]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b14:	f004 ff5c 	bl	80069d0 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 f9ef 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b32:	4619      	mov	r1, r3
 8001b34:	4825      	ldr	r0, [pc, #148]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b36:	f005 fe97 	bl	8007868 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b40:	f000 f9de 	bl	8001f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b44:	2360      	movs	r3, #96	; 0x60
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4818      	ldr	r0, [pc, #96]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b6a:	f005 f9af 	bl	8006ecc <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b74:	f000 f9c4 	bl	8001f00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001bae:	f005 fee3 	bl	8007978 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001bb8:	f000 f9a2 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001bbe:	f000 fe05 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3758      	adds	r7, #88	; 0x58
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000d3dc 	.word	0x2000d3dc
 8001bd0:	40012c00 	.word	0x40012c00

08001bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <MX_USART2_UART_Init+0x5c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c18:	f005 ff4a 	bl	8007ab0 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c22:	f000 f96d 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000d498 	.word	0x2000d498
 8001c30:	40004400 	.word	0x40004400

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	480b      	ldr	r0, [pc, #44]	; (8001cdc <MX_GPIO_Init+0xa8>)
 8001cb0:	f002 fce2 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_GPIO_Init+0xa8>)
 8001ccc:	f002 fb2a 	bl	8004324 <HAL_GPIO_Init>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48000400 	.word	0x48000400

08001ce0 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8001ce8:	483f      	ldr	r0, [pc, #252]	; (8001de8 <StartMainMenuTask+0x108>)
 8001cea:	f00d fc95 	bl	800f618 <puts>
    osDelay(1000);
 8001cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf2:	f009 fd8c 	bl	800b80e <osDelay>

    printf("Reading song\r\n");
 8001cf6:	483d      	ldr	r0, [pc, #244]	; (8001dec <StartMainMenuTask+0x10c>)
 8001cf8:	f00d fc8e 	bl	800f618 <puts>
    osDelay(1000);
 8001cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d00:	f009 fd85 	bl	800b80e <osDelay>



    // Mount
		fres = f_mount(&fs, "", 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	493a      	ldr	r1, [pc, #232]	; (8001df0 <StartMainMenuTask+0x110>)
 8001d08:	483a      	ldr	r0, [pc, #232]	; (8001df4 <StartMainMenuTask+0x114>)
 8001d0a:	f008 fe39 	bl	800a980 <f_mount>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d14:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <StartMainMenuTask+0x46>
			transmit_uart("Micro SD card is mounted successfully!\n");
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <StartMainMenuTask+0x11c>)
 8001d20:	f7ff fd24 	bl	800176c <transmit_uart>
 8001d24:	e006      	b.n	8001d34 <StartMainMenuTask+0x54>
		} else if (fres != FR_OK) {
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <StartMainMenuTask+0x54>
			transmit_uart("Micro SD card's mount error!\n");
 8001d2e:	4834      	ldr	r0, [pc, #208]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d30:	f7ff fd1c 	bl	800176c <transmit_uart>
		}



		//fres = f_open(&fil, "glazunov_violin_concerto.piece", FA_READ);
		fres = f_open(&fil, "glazunov.txt", FA_READ);
 8001d34:	2201      	movs	r2, #1
 8001d36:	4933      	ldr	r1, [pc, #204]	; (8001e04 <StartMainMenuTask+0x124>)
 8001d38:	4833      	ldr	r0, [pc, #204]	; (8001e08 <StartMainMenuTask+0x128>)
 8001d3a:	f008 fe85 	bl	800aa48 <f_open>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d44:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <StartMainMenuTask+0x76>
			transmit_uart("File opened for reading.\n");
 8001d4e:	482f      	ldr	r0, [pc, #188]	; (8001e0c <StartMainMenuTask+0x12c>)
 8001d50:	f7ff fd0c 	bl	800176c <transmit_uart>
 8001d54:	e006      	b.n	8001d64 <StartMainMenuTask+0x84>
		} else if (fres != FR_OK) {
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <StartMainMenuTask+0x84>
			transmit_uart("File was not opened for reading!\n");
 8001d5e:	482c      	ldr	r0, [pc, #176]	; (8001e10 <StartMainMenuTask+0x130>)
 8001d60:	f7ff fd04 	bl	800176c <transmit_uart>





		Piece_vInit(&xPiece, &fil);
 8001d64:	4928      	ldr	r1, [pc, #160]	; (8001e08 <StartMainMenuTask+0x128>)
 8001d66:	482b      	ldr	r0, [pc, #172]	; (8001e14 <StartMainMenuTask+0x134>)
 8001d68:	f000 f8d0 	bl	8001f0c <Piece_vInit>
		Piece_vSetComposition(&xPiece, &fil);
 8001d6c:	4926      	ldr	r1, [pc, #152]	; (8001e08 <StartMainMenuTask+0x128>)
 8001d6e:	4829      	ldr	r0, [pc, #164]	; (8001e14 <StartMainMenuTask+0x134>)
 8001d70:	f000 f902 	bl	8001f78 <Piece_vSetComposition>


		/* Close file */
		fres = f_close(&fil);
 8001d74:	4824      	ldr	r0, [pc, #144]	; (8001e08 <StartMainMenuTask+0x128>)
 8001d76:	f009 fa66 	bl	800b246 <f_close>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d80:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <StartMainMenuTask+0xb2>
			transmit_uart("The file is closed.\n");
 8001d8a:	4823      	ldr	r0, [pc, #140]	; (8001e18 <StartMainMenuTask+0x138>)
 8001d8c:	f7ff fcee 	bl	800176c <transmit_uart>
 8001d90:	e006      	b.n	8001da0 <StartMainMenuTask+0xc0>
		} else if (fres != FR_OK) {
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <StartMainMenuTask+0xc0>
			transmit_uart("The file was not closed.\n");
 8001d9a:	4820      	ldr	r0, [pc, #128]	; (8001e1c <StartMainMenuTask+0x13c>)
 8001d9c:	f7ff fce6 	bl	800176c <transmit_uart>
		}

		f_mount(NULL, "", 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	4913      	ldr	r1, [pc, #76]	; (8001df0 <StartMainMenuTask+0x110>)
 8001da4:	2000      	movs	r0, #0
 8001da6:	f008 fdeb 	bl	800a980 <f_mount>
		if (fres == FR_OK) {
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <StartMainMenuTask+0x118>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <StartMainMenuTask+0xda>
			transmit_uart("The Micro SD card is unmounted!\n");
 8001db2:	481b      	ldr	r0, [pc, #108]	; (8001e20 <StartMainMenuTask+0x140>)
 8001db4:	f7ff fcda 	bl	800176c <transmit_uart>
 8001db8:	e006      	b.n	8001dc8 <StartMainMenuTask+0xe8>
		} else if (fres != FR_OK) {
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <StartMainMenuTask+0x118>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <StartMainMenuTask+0xe8>
			transmit_uart("The Micro SD was not unmounted!");
 8001dc2:	4818      	ldr	r0, [pc, #96]	; (8001e24 <StartMainMenuTask+0x144>)
 8001dc4:	f7ff fcd2 	bl	800176c <transmit_uart>
		}



		// Initial Command
		xSynchWakeTime = xTaskGetTickCount();
 8001dc8:	f00b fde0 	bl	800d98c <xTaskGetTickCount>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <StartMainMenuTask+0x148>)
 8001dd0:	6013      	str	r3, [r2, #0]
		osEventFlagsSet(xEmbeddedViolinEventGroupHandle, (EB_PLAY_TICK | EB_PLAY_STATE));
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <StartMainMenuTask+0x14c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2106      	movs	r1, #6
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f009 fd9f 	bl	800b91c <osEventFlagsSet>



		// WAIT EVENT SYNCHRONIZE?

    osDelay(70000000);
 8001dde:	4814      	ldr	r0, [pc, #80]	; (8001e30 <StartMainMenuTask+0x150>)
 8001de0:	f009 fd15 	bl	800b80e <osDelay>
  	printf("Main Menu\r\n");
 8001de4:	e780      	b.n	8001ce8 <StartMainMenuTask+0x8>
 8001de6:	bf00      	nop
 8001de8:	08010508 	.word	0x08010508
 8001dec:	08010514 	.word	0x08010514
 8001df0:	08010524 	.word	0x08010524
 8001df4:	20004228 	.word	0x20004228
 8001df8:	2000d51c 	.word	0x2000d51c
 8001dfc:	08010528 	.word	0x08010528
 8001e00:	08010550 	.word	0x08010550
 8001e04:	08010570 	.word	0x08010570
 8001e08:	2000d520 	.word	0x2000d520
 8001e0c:	08010580 	.word	0x08010580
 8001e10:	0801059c 	.word	0x0801059c
 8001e14:	20005338 	.word	0x20005338
 8001e18:	080105c0 	.word	0x080105c0
 8001e1c:	080105d8 	.word	0x080105d8
 8001e20:	080105f4 	.word	0x080105f4
 8001e24:	08010618 	.word	0x08010618
 8001e28:	20005264 	.word	0x20005264
 8001e2c:	20004224 	.word	0x20004224
 8001e30:	042c1d80 	.word	0x042c1d80

08001e34 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <StartPlayTickTask+0x4c>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <StartPlayTickTask+0x50>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f009 fdaa 	bl	800b9a4 <osEventFlagsWait>
 8001e50:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	dbf1      	blt.n	8001e3c <StartPlayTickTask+0x8>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0ec      	beq.n	8001e3c <StartPlayTickTask+0x8>
		{
			while (running)
 8001e62:	e008      	b.n	8001e76 <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8001e64:	4808      	ldr	r0, [pc, #32]	; (8001e88 <StartPlayTickTask+0x54>)
 8001e66:	f00d fbd7 	bl	800f618 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <StartPlayTickTask+0x58>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <StartPlayTickTask+0x5c>)
 8001e72:	f00b fbc7 	bl	800d604 <vTaskDelayUntil>
			while (running)
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <StartPlayTickTask+0x60>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f2      	bne.n	8001e64 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001e7e:	e7dd      	b.n	8001e3c <StartPlayTickTask+0x8>
 8001e80:	20004224 	.word	0x20004224
 8001e84:	08010850 	.word	0x08010850
 8001e88:	08010638 	.word	0x08010638
 8001e8c:	08010854 	.word	0x08010854
 8001e90:	20005264 	.word	0x20005264
 8001e94:	200001fc 	.word	0x200001fc

08001e98 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <StartPlayState+0x38>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <StartPlayState+0x3c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f009 fd78 	bl	800b9a4 <osEventFlagsWait>
 8001eb4:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dbf1      	blt.n	8001ea0 <StartPlayState+0x8>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0ec      	beq.n	8001ea0 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 8001ec6:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <StartPlayState+0x40>)
 8001ec8:	f000 f880 	bl	8001fcc <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001ecc:	e7e8      	b.n	8001ea0 <StartPlayState+0x8>
 8001ece:	bf00      	nop
 8001ed0:	20004224 	.word	0x20004224
 8001ed4:	08010858 	.word	0x08010858
 8001ed8:	20005338 	.word	0x20005338

08001edc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eee:	f000 fe9f 	bl	8002c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40001000 	.word	0x40001000

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <Error_Handler+0x8>
	...

08001f0c <Piece_vInit>:
};



void Piece_vInit(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xPieceInformation.pusName, sizeof(pxPiece->xPieceInformation.pusName), &ulNumBytesRead);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f103 0108 	add.w	r1, r3, #8
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	6838      	ldr	r0, [r7, #0]
 8001f24:	f008 ff78 	bl	800ae18 <f_read>
	printf("Name: %s\r\n", pxPiece->xPieceInformation.pusName);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4803      	ldr	r0, [pc, #12]	; (8001f3c <Piece_vInit+0x30>)
 8001f30:	f00d faec 	bl	800f50c <iprintf>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	08010648 	.word	0x08010648

08001f40 <Piece_vSetCompositionByteSize>:


void Piece_vSetCompositionByteSize(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, &(pxPiece->xComposition.ulCompositionByteSize), sizeof(pxPiece->xComposition.ulCompositionByteSize), &ulNumBytesRead);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2204      	movs	r2, #4
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	f008 ff5e 	bl	800ae18 <f_read>
	printf("Composition size: %u\r\n", pxPiece->xComposition.ulCompositionByteSize);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	4619      	mov	r1, r3
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <Piece_vSetCompositionByteSize+0x34>)
 8001f66:	f00d fad1 	bl	800f50c <iprintf>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	08010654 	.word	0x08010654

08001f78 <Piece_vSetComposition>:


void Piece_vSetComposition(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
	Piece_vSetCompositionByteSize(pxPiece, pFil);
 8001f82:	6839      	ldr	r1, [r7, #0]
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffdb 	bl	8001f40 <Piece_vSetCompositionByteSize>

	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f103 0194 	add.w	r1, r3, #148	; 0x94
			pxPiece->xComposition.ulCompositionByteSize < sizeof(pxPiece->xComposition.pusComposition) ? pxPiece->xComposition.ulCompositionByteSize : sizeof(pxPiece->xComposition.pusComposition),
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f9a:	bf28      	it	cs
 8001f9c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001fa0:	461a      	mov	r2, r3
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	6838      	ldr	r0, [r7, #0]
 8001fa8:	f008 ff36 	bl	800ae18 <f_read>
			&ulNumBytesRead);

	pxPiece->xPieceInstruction.ulInstructionCounter = 0;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

	pxPiece->xCapture.ulTick = osKernelGetTickCount();
 8001fb2:	f009 fb85 	bl	800b6c0 <osKernelGetTickCount>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fbe:	33a0      	adds	r3, #160	; 0xa0
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += 1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]

	printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	791b      	ldrb	r3, [r3, #4]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481b      	ldr	r0, [pc, #108]	; (8002068 <Piece_vParseCommand+0x9c>)
 8001ffa:	f00d fa87 	bl	800f50c <iprintf>

	switch (pxPiece->xPieceInstruction.usCommand)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	791b      	ldrb	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <Piece_vParseCommand+0x40>
 8002006:	2b7f      	cmp	r3, #127	; 0x7f
 8002008:	d004      	beq.n	8002014 <Piece_vParseCommand+0x48>
 800200a:	e007      	b.n	800201c <Piece_vParseCommand+0x50>
	{
	case 0b00000000:
		printf("END OF COMPOSITION\r\n");
 800200c:	4817      	ldr	r0, [pc, #92]	; (800206c <Piece_vParseCommand+0xa0>)
 800200e:	f00d fb03 	bl	800f618 <puts>
		return;
 8002012:	e025      	b.n	8002060 <Piece_vParseCommand+0x94>
	case 0b01111111:
		Piece_vConfigureAll(pxPiece);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f875 	bl	8002104 <Piece_vConfigureAll>
		break;
 800201a:	e01e      	b.n	800205a <Piece_vParseCommand+0x8e>
	default:
		if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	791b      	ldrb	r3, [r3, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fa8b 	bl	800253c <bIsPlayCommand>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <Piece_vParseCommand+0x86>
		{
			uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	73fb      	strb	r3, [r7, #15]
			uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	791b      	ldrb	r3, [r3, #4]
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	73bb      	strb	r3, [r7, #14]
			Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8002044:	7bfa      	ldrb	r2, [r7, #15]
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	4619      	mov	r1, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f9b8 	bl	80023c0 <Piece_vPlayNotes>
		}
		else
		{
			printf("UNKNOWN COMMAND\r\n");
		}
		break;
 8002050:	e002      	b.n	8002058 <Piece_vParseCommand+0x8c>
			printf("UNKNOWN COMMAND\r\n");
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <Piece_vParseCommand+0xa4>)
 8002054:	f00d fae0 	bl	800f618 <puts>
		break;
 8002058:	bf00      	nop
	}

	Piece_vParseCommand(pxPiece);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffb6 	bl	8001fcc <Piece_vParseCommand>
}
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	0801066c 	.word	0x0801066c
 800206c:	0801067c 	.word	0x0801067c
 8002070:	08010690 	.word	0x08010690

08002074 <Piece_vSetMovement>:




void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800208e:	4619      	mov	r1, r3
 8002090:	4803      	ldr	r0, [pc, #12]	; (80020a0 <Piece_vSetMovement+0x2c>)
 8002092:	f00d fa3b 	bl	800f50c <iprintf>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	080106a4 	.word	0x080106a4

080020a4 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80020be:	4619      	mov	r1, r3
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <Piece_vSetBPM+0x2c>)
 80020c2:	f00d fa23 	bl	800f50c <iprintf>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	080106b4 	.word	0x080106b4

080020d4 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80020ee:	4619      	mov	r1, r3
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <Piece_vSetDynamic+0x2c>)
 80020f2:	f00d fa0b 	bl	800f50c <iprintf>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	080106c0 	.word	0x080106c0

08002104 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 800210c:	481e      	ldr	r0, [pc, #120]	; (8002188 <Piece_vConfigureAll+0x84>)
 800210e:	f00d fa83 	bl	800f618 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	1c9a      	adds	r2, r3, #2
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff84 	bl	8002074 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 800216c:	89bb      	ldrh	r3, [r7, #12]
 800216e:	4619      	mov	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff97 	bl	80020a4 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	4619      	mov	r1, r3
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffaa 	bl	80020d4 <Piece_vSetDynamic>
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	080106d0 	.word	0x080106d0

0800218c <Piece_vCaptureNotes>:




void Piece_vCaptureNotes(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
	int count = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]

	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 800219a:	e01e      	b.n	80021da <Piece_vCaptureNotes+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021a2:	33a0      	adds	r3, #160	; 0xa0
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021b0:	33a0      	adds	r3, #160	; 0xa0
 80021b2:	601a      	str	r2, [r3, #0]

		count++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3b32      	subs	r3, #50	; 0x32
 80021be:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 80021c0:	2232      	movs	r2, #50	; 0x32
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	4819      	ldr	r0, [pc, #100]	; (800222c <Piece_vCaptureNotes+0xa0>)
 80021c6:	f00d f9a1 	bl	800f50c <iprintf>
		osDelayUntil(pxPiece->xCapture.ulTick);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021d0:	33a0      	adds	r3, #160	; 0xa0
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f009 fb35 	bl	800b844 <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b31      	cmp	r3, #49	; 0x31
 80021de:	dcdd      	bgt.n	800219c <Piece_vCaptureNotes+0x10>
	}

	// Capture the remainder under the 50ms resolution
	if (lMSPerDemisemi > 0)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	dd1b      	ble.n	800221e <Piece_vCaptureNotes+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021ec:	33a0      	adds	r3, #160	; 0xa0
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	441a      	add	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80021fa:	33a0      	adds	r3, #160	; 0xa0
 80021fc:	601a      	str	r2, [r3, #0]

		count++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	4808      	ldr	r0, [pc, #32]	; (800222c <Piece_vCaptureNotes+0xa0>)
 800220a:	f00d f97f 	bl	800f50c <iprintf>
		osDelayUntil(pxPiece->xCapture.ulTick);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002214:	33a0      	adds	r3, #160	; 0xa0
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f009 fb13 	bl	800b844 <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	080106ec 	.word	0x080106ec

08002230 <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800223e:	3394      	adds	r3, #148	; 0x94
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800224a:	3397      	adds	r3, #151	; 0x97
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002256:	339a      	adds	r3, #154	; 0x9a
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002262:	339d      	adds	r3, #157	; 0x9d
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <Piece_vSetNoteGoal>:




void Piece_vSetNoteGoal(PieceHandle_t *pxPiece)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3306      	adds	r3, #6
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6812      	ldr	r2, [r2, #0]
 800228a:	440a      	add	r2, r1
 800228c:	8812      	ldrh	r2, [r2, #0]
 800228e:	b292      	uxth	r2, r2
 8002290:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1c9a      	adds	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	601a      	str	r2, [r3, #0]

	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	88db      	ldrh	r3, [r3, #6]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	88db      	ldrh	r3, [r3, #6]
 80022aa:	099b      	lsrs	r3, r3, #6
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	88db      	ldrh	r3, [r3, #6]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c0:	737b      	strb	r3, [r7, #13]
	printf("	Technique: %u\r\n", ucTechnique);
	printf("	Note Base: %u\r\n", ucNoteBase);
	printf("	Note Offset: %u\r\n", ucNoteOffset);
	*/

	switch (ucNoteBase)
 80022c2:	7bbb      	ldrb	r3, [r7, #14]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d857      	bhi.n	8002378 <Piece_vSetNoteGoal+0x104>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <Piece_vSetNoteGoal+0x5c>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	08002307 	.word	0x08002307
 80022d8:	0800232d 	.word	0x0800232d
 80022dc:	08002353 	.word	0x08002353
	{
	case 0:
		pxPiece->xGoal.xGString.bActive = 1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022e6:	3394      	adds	r3, #148	; 0x94
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022f2:	3395      	adds	r3, #149	; 0x95
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80022fe:	3396      	adds	r3, #150	; 0x96
 8002300:	7b7a      	ldrb	r2, [r7, #13]
 8002302:	701a      	strb	r2, [r3, #0]
		break;
 8002304:	e039      	b.n	800237a <Piece_vSetNoteGoal+0x106>
	case 1:
		pxPiece->xGoal.xDString.bActive = 1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800230c:	3397      	adds	r3, #151	; 0x97
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002318:	3398      	adds	r3, #152	; 0x98
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002324:	3399      	adds	r3, #153	; 0x99
 8002326:	7b7a      	ldrb	r2, [r7, #13]
 8002328:	701a      	strb	r2, [r3, #0]
		break;
 800232a:	e026      	b.n	800237a <Piece_vSetNoteGoal+0x106>
	case 2:
		pxPiece->xGoal.xAString.bActive = 1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002332:	339a      	adds	r3, #154	; 0x9a
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800233e:	339b      	adds	r3, #155	; 0x9b
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800234a:	339c      	adds	r3, #156	; 0x9c
 800234c:	7b7a      	ldrb	r2, [r7, #13]
 800234e:	701a      	strb	r2, [r3, #0]
		break;
 8002350:	e013      	b.n	800237a <Piece_vSetNoteGoal+0x106>
	case 3:
		pxPiece->xGoal.xEString.bActive = 1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002358:	339d      	adds	r3, #157	; 0x9d
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002364:	339e      	adds	r3, #158	; 0x9e
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002370:	339f      	adds	r3, #159	; 0x9f
 8002372:	7b7a      	ldrb	r2, [r7, #13]
 8002374:	701a      	strb	r2, [r3, #0]
		break;
 8002376:	e000      	b.n	800237a <Piece_vSetNoteGoal+0x106>
	default:
		break;
 8002378:	bf00      	nop
	}
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <Piece_vSetGoal>:


void Piece_vSetGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
	for (int16_t i = 0; i < ucNumNotes; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	81fb      	strh	r3, [r7, #14]
 8002398:	e008      	b.n	80023ac <Piece_vSetGoal+0x24>
	{
		Piece_vSetNoteGoal(pxPiece);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff6a 	bl	8002274 <Piece_vSetNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 80023a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	81fb      	strh	r3, [r7, #14]
 80023ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbf1      	blt.n	800239a <Piece_vSetGoal+0x12>
	}
}
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
 80023cc:	4613      	mov	r3, r2
 80023ce:	70bb      	strb	r3, [r7, #2]
	if (ucNumNotes > 4) ucNumNotes = 4;
 80023d0:	78bb      	ldrb	r3, [r7, #2]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d901      	bls.n	80023da <Piece_vPlayNotes+0x1a>
 80023d6:	2304      	movs	r3, #4
 80023d8:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 80023da:	78bb      	ldrb	r3, [r7, #2]
 80023dc:	4619      	mov	r1, r3
 80023de:	4851      	ldr	r0, [pc, #324]	; (8002524 <Piece_vPlayNotes+0x164>)
 80023e0:	f00d f894 	bl	800f50c <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	4619      	mov	r1, r3
 80023e8:	484f      	ldr	r0, [pc, #316]	; (8002528 <Piece_vPlayNotes+0x168>)
 80023ea:	f00d f88f 	bl	800f50c <iprintf>

	Piece_vResetGoal(pxPiece);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff1e 	bl	8002230 <Piece_vResetGoal>
	Piece_vSetGoal(pxPiece, ucNumNotes);
 80023f4:	78bb      	ldrb	r3, [r7, #2]
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ffc5 	bl	8002388 <Piece_vSetGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8ac 	bl	800255c <Piece_Debug_vPrintGoal>


	// Wait until
	float fMSPerDemisemi = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)/8.0f) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	ee17 0a90 	vmov	r0, s15
 8002416:	f7fe f897 	bl	8000548 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	f04f 0000 	mov.w	r0, #0
 8002422:	4942      	ldr	r1, [pc, #264]	; (800252c <Piece_vPlayNotes+0x16c>)
 8002424:	f7fe fa12 	bl	800084c <__aeabi_ddiv>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <Piece_vPlayNotes+0x170>)
 8002436:	f7fe fa09 	bl	800084c <__aeabi_ddiv>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe faeb 	bl	8000a1c <__aeabi_d2f>
 8002446:	ee07 0a10 	vmov	s14, r0
 800244a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8002534 <Piece_vPlayNotes+0x174>
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d85d      	bhi.n	8002518 <Piece_vPlayNotes+0x158>
 800245c:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <Piece_vPlayNotes+0xa4>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002499 	.word	0x08002499
 800246c:	080024b5 	.word	0x080024b5
 8002470:	080024d1 	.word	0x080024d1
 8002474:	080024ed 	.word	0x080024ed
 8002478:	08002505 	.word	0x08002505
	{
	case 0x00:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		Piece_vCaptureNotes(pxPiece, (int32_t)(fMSPerDemisemi*32.0f));
 800247c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002480:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002538 <Piece_vPlayNotes+0x178>
 8002484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248c:	ee17 1a90 	vmov	r1, s15
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fe7b 	bl	800218c <Piece_vCaptureNotes>
		break;
 8002496:	e040      	b.n	800251a <Piece_vPlayNotes+0x15a>
	case 0x01:
		Piece_vCaptureNotes(pxPiece, (int32_t)(fMSPerDemisemi*16.0f));
 8002498:	edd7 7a03 	vldr	s15, [r7, #12]
 800249c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80024a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a8:	ee17 1a90 	vmov	r1, s15
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fe6d 	bl	800218c <Piece_vCaptureNotes>
		break;
 80024b2:	e032      	b.n	800251a <Piece_vPlayNotes+0x15a>
	case 0x02:
		Piece_vCaptureNotes(pxPiece, (int32_t)(fMSPerDemisemi*8.0f));
 80024b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c4:	ee17 1a90 	vmov	r1, s15
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fe5f 	bl	800218c <Piece_vCaptureNotes>
		break;
 80024ce:	e024      	b.n	800251a <Piece_vPlayNotes+0x15a>
	case 0x03:
		Piece_vCaptureNotes(pxPiece, (int32_t)(fMSPerDemisemi*4.0f));
 80024d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e0:	ee17 1a90 	vmov	r1, s15
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff fe51 	bl	800218c <Piece_vCaptureNotes>
		break;
 80024ea:	e016      	b.n	800251a <Piece_vPlayNotes+0x15a>
	case 0x04:
		Piece_vCaptureNotes(pxPiece, (int32_t)(fMSPerDemisemi*2.0f));
 80024ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80024f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f8:	ee17 1a90 	vmov	r1, s15
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fe45 	bl	800218c <Piece_vCaptureNotes>
		break;
 8002502:	e00a      	b.n	800251a <Piece_vPlayNotes+0x15a>
	case 0x05:
		Piece_vCaptureNotes(pxPiece, (int32_t)(fMSPerDemisemi));
 8002504:	edd7 7a03 	vldr	s15, [r7, #12]
 8002508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250c:	ee17 1a90 	vmov	r1, s15
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fe3b 	bl	800218c <Piece_vCaptureNotes>
		break;
 8002516:	e000      	b.n	800251a <Piece_vPlayNotes+0x15a>
	default:
		break;
 8002518:	bf00      	nop
	}

	// osDelay
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	08010704 	.word	0x08010704
 8002528:	08010718 	.word	0x08010718
 800252c:	404e0000 	.word	0x404e0000
 8002530:	40200000 	.word	0x40200000
 8002534:	447a0000 	.word	0x447a0000
 8002538:	42000000 	.word	0x42000000

0800253c <bIsPlayCommand>:




uint8_t bIsPlayCommand(uint8_t usCommand)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	09db      	lsrs	r3, r3, #7
 800254e:	b2db      	uxtb	r3, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <Piece_Debug_vPrintGoal>:
}



void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 8002564:	482b      	ldr	r0, [pc, #172]	; (8002614 <Piece_Debug_vPrintGoal+0xb8>)
 8002566:	f00d f857 	bl	800f618 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002570:	3394      	adds	r3, #148	; 0x94
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00c      	beq.n	8002592 <Piece_Debug_vPrintGoal+0x36>
	{
		printf("	G: %u\r\n", pusPitchTickMap[0][pxPiece->xGoal.xGString.ucFingerOffset]);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800257e:	3396      	adds	r3, #150	; 0x96
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <Piece_Debug_vPrintGoal+0xbc>)
 8002586:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800258a:	4619      	mov	r1, r3
 800258c:	4823      	ldr	r0, [pc, #140]	; (800261c <Piece_Debug_vPrintGoal+0xc0>)
 800258e:	f00c ffbd 	bl	800f50c <iprintf>
	}

	if (pxPiece->xGoal.xDString.bActive)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002598:	3397      	adds	r3, #151	; 0x97
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00c      	beq.n	80025ba <Piece_Debug_vPrintGoal+0x5e>
	{
		printf("	D: %u\r\n", pusPitchTickMap[1][pxPiece->xGoal.xDString.ucFingerOffset]);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025a6:	3399      	adds	r3, #153	; 0x99
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <Piece_Debug_vPrintGoal+0xbc>)
 80025ac:	332a      	adds	r3, #42	; 0x2a
 80025ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b2:	4619      	mov	r1, r3
 80025b4:	481a      	ldr	r0, [pc, #104]	; (8002620 <Piece_Debug_vPrintGoal+0xc4>)
 80025b6:	f00c ffa9 	bl	800f50c <iprintf>
	}

	if (pxPiece->xGoal.xAString.bActive)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025c0:	339a      	adds	r3, #154	; 0x9a
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <Piece_Debug_vPrintGoal+0x86>
	{
		printf("	A: %u\r\n", pusPitchTickMap[2][pxPiece->xGoal.xAString.ucFingerOffset]);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025ce:	339c      	adds	r3, #156	; 0x9c
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <Piece_Debug_vPrintGoal+0xbc>)
 80025d4:	3354      	adds	r3, #84	; 0x54
 80025d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025da:	4619      	mov	r1, r3
 80025dc:	4811      	ldr	r0, [pc, #68]	; (8002624 <Piece_Debug_vPrintGoal+0xc8>)
 80025de:	f00c ff95 	bl	800f50c <iprintf>
	}

	if (pxPiece->xGoal.xEString.bActive)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025e8:	339d      	adds	r3, #157	; 0x9d
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <Piece_Debug_vPrintGoal+0xae>
	{
		printf("	E: %u\r\n", pusPitchTickMap[3][pxPiece->xGoal.xEString.ucFingerOffset]);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025f6:	339f      	adds	r3, #159	; 0x9f
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <Piece_Debug_vPrintGoal+0xbc>)
 80025fc:	337e      	adds	r3, #126	; 0x7e
 80025fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002602:	4619      	mov	r1, r3
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <Piece_Debug_vPrintGoal+0xcc>)
 8002606:	f00c ff81 	bl	800f50c <iprintf>
	}
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	0801073c 	.word	0x0801073c
 8002618:	20000004 	.word	0x20000004
 800261c:	08010744 	.word	0x08010744
 8002620:	08010750 	.word	0x08010750
 8002624:	0801075c 	.word	0x0801075c
 8002628:	08010768 	.word	0x08010768

0800262c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_MspInit+0x4c>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_MspInit+0x4c>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6613      	str	r3, [r2, #96]	; 0x60
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_MspInit+0x4c>)
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_MspInit+0x4c>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_MspInit+0x4c>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	; 0x58
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_MspInit+0x4c>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	210f      	movs	r1, #15
 8002666:	f06f 0001 	mvn.w	r0, #1
 800266a:	f001 fe31 	bl	80042d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000

0800267c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_ADC_MspInit+0x84>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12c      	bne.n	80026f8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_ADC_MspInit+0x88>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_ADC_MspInit+0x88>)
 80026a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_ADC_MspInit+0x88>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_ADC_MspInit+0x88>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <HAL_ADC_MspInit+0x88>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_ADC_MspInit+0x88>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026ce:	2301      	movs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026d2:	230b      	movs	r3, #11
 80026d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e4:	f001 fe1e 	bl	8004324 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2105      	movs	r1, #5
 80026ec:	2012      	movs	r0, #18
 80026ee:	f001 fdef 	bl	80042d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026f2:	2012      	movs	r0, #18
 80026f4:	f001 fe08 	bl	8004308 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	; 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	50040000 	.word	0x50040000
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <HAL_SPI_MspInit+0x7c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d128      	bne.n	800277c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800272a:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_SPI_MspInit+0x80>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <HAL_SPI_MspInit+0x80>)
 8002730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002734:	6613      	str	r3, [r2, #96]	; 0x60
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_SPI_MspInit+0x80>)
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_SPI_MspInit+0x80>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_SPI_MspInit+0x80>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_SPI_MspInit+0x80>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800275a:	23e0      	movs	r3, #224	; 0xe0
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800276a:	2305      	movs	r3, #5
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002778:	f001 fdd4 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40013000 	.word	0x40013000
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_TIM_PWM_MspInit+0x38>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10b      	bne.n	80027b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80027a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027a8:	6613      	str	r3, [r2, #96]	; 0x60
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80027ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_TIM_MspPostInit+0x68>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d11d      	bne.n	800282a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_TIM_MspPostInit+0x6c>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_TIM_MspPostInit+0x6c>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_TIM_MspPostInit+0x6c>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002818:	2301      	movs	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	4619      	mov	r1, r3
 8002822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002826:	f001 fd7d 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800282a:	bf00      	nop
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_UART_MspInit+0x7c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d128      	bne.n	80028b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_UART_MspInit+0x80>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_UART_MspInit+0x80>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6593      	str	r3, [r2, #88]	; 0x58
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_UART_MspInit+0x80>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_UART_MspInit+0x80>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_UART_MspInit+0x80>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_UART_MspInit+0x80>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800288e:	230c      	movs	r3, #12
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800289e:	2307      	movs	r3, #7
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ac:	f001 fd3a 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40004400 	.word	0x40004400
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	2036      	movs	r0, #54	; 0x36
 80028d6:	f001 fcfb 	bl	80042d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028da:	2036      	movs	r0, #54	; 0x36
 80028dc:	f001 fd14 	bl	8004308 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_InitTick+0x9c>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_InitTick+0x9c>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	6593      	str	r3, [r2, #88]	; 0x58
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_InitTick+0x9c>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028f8:	f107 0210 	add.w	r2, r7, #16
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f002 fcc0 	bl	8005288 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002908:	f002 fc92 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 800290c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_InitTick+0xa0>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9b      	lsrs	r3, r3, #18
 8002918:	3b01      	subs	r3, #1
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_InitTick+0xa4>)
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <HAL_InitTick+0xa8>)
 8002920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_InitTick+0xa4>)
 8002924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002928:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_InitTick+0xa4>)
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_InitTick+0xa4>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_InitTick+0xa4>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800293c:	4809      	ldr	r0, [pc, #36]	; (8002964 <HAL_InitTick+0xa4>)
 800293e:	f003 ff75 	bl	800682c <HAL_TIM_Base_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002948:	4806      	ldr	r0, [pc, #24]	; (8002964 <HAL_InitTick+0xa4>)
 800294a:	f003 ffd1 	bl	80068f0 <HAL_TIM_Base_Start_IT>
 800294e:	4603      	mov	r3, r0
 8002950:	e000      	b.n	8002954 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	3730      	adds	r7, #48	; 0x30
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	431bde83 	.word	0x431bde83
 8002964:	2000e550 	.word	0x2000e550
 8002968:	40001000 	.word	0x40001000

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <NMI_Handler+0x4>

08002972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002976:	e7fe      	b.n	8002976 <HardFault_Handler+0x4>

08002978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800297c:	e7fe      	b.n	800297c <MemManage_Handler+0x4>

0800297e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <BusFault_Handler+0x4>

08002984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <UsageFault_Handler+0x4>

0800298a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <ADC1_2_IRQHandler+0x10>)
 800299e:	f000 fcaf 	bl	8003300 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000526c 	.word	0x2000526c

080029ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <TIM6_DAC_IRQHandler+0x38>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 80029b8:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <TIM6_DAC_IRQHandler+0x38>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <TIM6_DAC_IRQHandler+0x38>)
 80029c2:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <TIM6_DAC_IRQHandler+0x3c>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <TIM6_DAC_IRQHandler+0x3c>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <TIM6_DAC_IRQHandler+0x3c>)
 80029d6:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029d8:	4804      	ldr	r0, [pc, #16]	; (80029ec <TIM6_DAC_IRQHandler+0x40>)
 80029da:	f004 f957 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000421a 	.word	0x2000421a
 80029e8:	20004218 	.word	0x20004218
 80029ec:	2000e550 	.word	0x2000e550

080029f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e00a      	b.n	8002a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a02:	f3af 8000 	nop.w
 8002a06:	4601      	mov	r1, r0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	60ba      	str	r2, [r7, #8]
 8002a0e:	b2ca      	uxtb	r2, r1
 8002a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbf0      	blt.n	8002a02 <_read+0x12>
	}

return len;
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e009      	b.n	8002a50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fe7f 	bl	8001748 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	dbf1      	blt.n	8002a3c <_write+0x12>
	}
	return len;
 8002a58:	687b      	ldr	r3, [r7, #4]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_close>:

int _close(int file)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
	return -1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_isatty>:

int _isatty(int file)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <_sbrk+0x5c>)
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <_sbrk+0x60>)
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <_sbrk+0x64>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <_sbrk+0x68>)
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <_sbrk+0x64>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d207      	bcs.n	8002b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002afc:	f00c fcc6 	bl	800f48c <__errno>
 8002b00:	4603      	mov	r3, r0
 8002b02:	220c      	movs	r2, #12
 8002b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0a:	e009      	b.n	8002b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <_sbrk+0x64>)
 8002b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20018000 	.word	0x20018000
 8002b2c:	00000400 	.word	0x00000400
 8002b30:	20000200 	.word	0x20000200
 8002b34:	20010668 	.word	0x20010668

08002b38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <SystemInit+0x5c>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <SystemInit+0x5c>)
 8002b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <SystemInit+0x60>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <SystemInit+0x60>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <SystemInit+0x60>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <SystemInit+0x60>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <SystemInit+0x60>)
 8002b64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <SystemInit+0x60>)
 8002b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <SystemInit+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <SystemInit+0x60>)
 8002b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <SystemInit+0x60>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00
 8002b98:	40021000 	.word	0x40021000

08002b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ba0:	f7ff ffca 	bl	8002b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ba4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ba6:	e003      	b.n	8002bb0 <LoopCopyDataInit>

08002ba8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002baa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002bac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002bae:	3104      	adds	r1, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002bb0:	480a      	ldr	r0, [pc, #40]	; (8002bdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002bb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002bb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002bb8:	d3f6      	bcc.n	8002ba8 <CopyDataInit>
	ldr	r2, =_sbss
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002bbc:	e002      	b.n	8002bc4 <LoopFillZerobss>

08002bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002bbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002bc0:	f842 3b04 	str.w	r3, [r2], #4

08002bc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <LoopForever+0x16>)
	cmp	r2, r3
 8002bc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bc8:	d3f9      	bcc.n	8002bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bca:	f00c fc65 	bl	800f498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bce:	f7fe fde3 	bl	8001798 <main>

08002bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002bd2:	e7fe      	b.n	8002bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002bd4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002bd8:	08010d8c 	.word	0x08010d8c
	ldr	r0, =_sdata
 8002bdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002be0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002be4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002be8:	20010664 	.word	0x20010664

08002bec <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bec:	e7fe      	b.n	8002bec <ADC3_IRQHandler>
	...

08002bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_Init+0x3c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <HAL_Init+0x3c>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c06:	2003      	movs	r0, #3
 8002c08:	f001 fb57 	bl	80042ba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff fe57 	bl	80028c0 <HAL_InitTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	e001      	b.n	8002c22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c1e:	f7ff fd05 	bl	800262c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_IncTick+0x20>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_IncTick+0x24>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_IncTick+0x24>)
 8002c42:	6013      	str	r3, [r2, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	2000015c 	.word	0x2000015c
 8002c54:	2000e59c 	.word	0x2000e59c

08002c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_GetTick+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000e59c 	.word	0x2000e59c

08002c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c78:	f7ff ffee 	bl	8002c58 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c88:	d005      	beq.n	8002c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_Delay+0x44>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c96:	bf00      	nop
 8002c98:	f7ff ffde 	bl	8002c58 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d8f7      	bhi.n	8002c98 <HAL_Delay+0x28>
  {
  }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	2000015c 	.word	0x2000015c

08002cb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3360      	adds	r3, #96	; 0x60
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <LL_ADC_SetOffset+0x44>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	03fff000 	.word	0x03fff000

08002d68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3360      	adds	r3, #96	; 0x60
 8002d76:	461a      	mov	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3360      	adds	r3, #96	; 0x60
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3330      	adds	r3, #48	; 0x30
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	4413      	add	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	211f      	movs	r1, #31
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	401a      	ands	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	f003 011f 	and.w	r1, r3, #31
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	431a      	orrs	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3314      	adds	r3, #20
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0e5b      	lsrs	r3, r3, #25
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	0d1b      	lsrs	r3, r3, #20
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2107      	movs	r1, #7
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	0d1b      	lsrs	r3, r3, #20
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0318 	and.w	r3, r3, #24
 8002ee6:	4908      	ldr	r1, [pc, #32]	; (8002f08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ee8:	40d9      	lsrs	r1, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	400b      	ands	r3, r1
 8002eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	0007ffff 	.word	0x0007ffff

08002f0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 031f 	and.w	r3, r3, #31
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6093      	str	r3, [r2, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f7c:	d101      	bne.n	8002f82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fa0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <LL_ADC_IsEnabled+0x18>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <LL_ADC_IsEnabled+0x1a>
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d101      	bne.n	800301e <LL_ADC_REG_IsConversionOngoing+0x18>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b08      	cmp	r3, #8
 800303e:	d101      	bne.n	8003044 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
	...

08003054 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e136      	b.n	80032dc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fafd 	bl	800267c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff67 	bl	8002f68 <LL_ADC_IsDeepPowerDownEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff4d 	bl	8002f44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff82 	bl	8002fb8 <LL_ADC_IsInternalRegulatorEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d115      	bne.n	80030e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff66 	bl	8002f90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c4:	4b87      	ldr	r3, [pc, #540]	; (80032e4 <HAL_ADC_Init+0x290>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	099b      	lsrs	r3, r3, #6
 80030ca:	4a87      	ldr	r2, [pc, #540]	; (80032e8 <HAL_ADC_Init+0x294>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	3301      	adds	r3, #1
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030d8:	e002      	b.n	80030e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3b01      	subs	r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f9      	bne.n	80030da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ff64 	bl	8002fb8 <LL_ADC_IsInternalRegulatorEnabled>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10d      	bne.n	8003112 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f043 0210 	orr.w	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff75 	bl	8003006 <LL_ADC_REG_IsConversionOngoing>
 800311c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 80cf 	bne.w	80032ca <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 80cb 	bne.w	80032ca <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800313c:	f043 0202 	orr.w	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff49 	bl	8002fe0 <LL_ADC_IsEnabled>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d115      	bne.n	8003180 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003154:	4865      	ldr	r0, [pc, #404]	; (80032ec <HAL_ADC_Init+0x298>)
 8003156:	f7ff ff43 	bl	8002fe0 <LL_ADC_IsEnabled>
 800315a:	4604      	mov	r4, r0
 800315c:	4864      	ldr	r0, [pc, #400]	; (80032f0 <HAL_ADC_Init+0x29c>)
 800315e:	f7ff ff3f 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	431c      	orrs	r4, r3
 8003166:	4863      	ldr	r0, [pc, #396]	; (80032f4 <HAL_ADC_Init+0x2a0>)
 8003168:	f7ff ff3a 	bl	8002fe0 <LL_ADC_IsEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	4323      	orrs	r3, r4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4619      	mov	r1, r3
 800317a:	485f      	ldr	r0, [pc, #380]	; (80032f8 <HAL_ADC_Init+0x2a4>)
 800317c:	f7ff fd9c 	bl	8002cb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e5b      	ldrb	r3, [r3, #25]
 8003184:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800318a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003190:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003196:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d106      	bne.n	80031bc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	3b01      	subs	r3, #1
 80031b4:	045b      	lsls	r3, r3, #17
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_ADC_Init+0x2a8>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	69b9      	ldr	r1, [r7, #24]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff08 	bl	8003006 <LL_ADC_REG_IsConversionOngoing>
 80031f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff15 	bl	800302c <LL_ADC_INJ_IsConversionOngoing>
 8003202:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d13d      	bne.n	8003286 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d13a      	bne.n	8003286 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003214:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800321c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322c:	f023 0302 	bic.w	r3, r3, #2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	69b9      	ldr	r1, [r7, #24]
 8003236:	430b      	orrs	r3, r1
 8003238:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003240:	2b01      	cmp	r3, #1
 8003242:	d118      	bne.n	8003276 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800324e:	f023 0304 	bic.w	r3, r3, #4
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003260:	4311      	orrs	r1, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003266:	430a      	orrs	r2, r1
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	611a      	str	r2, [r3, #16]
 8003274:	e007      	b.n	8003286 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d10c      	bne.n	80032a8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	f023 010f 	bic.w	r1, r3, #15
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
 80032a6:	e007      	b.n	80032b8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 020f 	bic.w	r2, r2, #15
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f023 0303 	bic.w	r3, r3, #3
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
 80032c8:	e007      	b.n	80032da <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f043 0210 	orr.w	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032da:	7ffb      	ldrb	r3, [r7, #31]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3724      	adds	r7, #36	; 0x24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	20000154 	.word	0x20000154
 80032e8:	053e2d63 	.word	0x053e2d63
 80032ec:	50040000 	.word	0x50040000
 80032f0:	50040100 	.word	0x50040100
 80032f4:	50040200 	.word	0x50040200
 80032f8:	50040300 	.word	0x50040300
 80032fc:	fff0c007 	.word	0xfff0c007

08003300 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003308:	2300      	movs	r3, #0
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331c:	4882      	ldr	r0, [pc, #520]	; (8003528 <HAL_ADC_IRQHandler+0x228>)
 800331e:	f7ff fdf5 	bl	8002f0c <LL_ADC_GetMultimode>
 8003322:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <HAL_ADC_IRQHandler+0x5e>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fe4b 	bl	8003fec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <HAL_ADC_IRQHandler+0x72>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8083 	beq.w	8003484 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d07d      	beq.n	8003484 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fd10 	bl	8002dca <LL_ADC_REG_IsTriggerSourceSWStart>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d062      	beq.n	8003476 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5d      	ldr	r2, [pc, #372]	; (800352c <HAL_ADC_IRQHandler+0x22c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d002      	beq.n	80033c0 <HAL_ADC_IRQHandler+0xc0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	e000      	b.n	80033c2 <HAL_ADC_IRQHandler+0xc2>
 80033c0:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <HAL_ADC_IRQHandler+0x230>)
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d008      	beq.n	80033dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b05      	cmp	r3, #5
 80033d4:	d002      	beq.n	80033dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b09      	cmp	r3, #9
 80033da:	d104      	bne.n	80033e6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	e00c      	b.n	8003400 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a50      	ldr	r2, [pc, #320]	; (800352c <HAL_ADC_IRQHandler+0x22c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d002      	beq.n	80033f6 <HAL_ADC_IRQHandler+0xf6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_IRQHandler+0xf8>
 80033f6:	4b4e      	ldr	r3, [pc, #312]	; (8003530 <HAL_ADC_IRQHandler+0x230>)
 80033f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d135      	bne.n	8003476 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d12e      	bne.n	8003476 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fdf2 	bl	8003006 <LL_ADC_REG_IsConversionOngoing>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11a      	bne.n	800345e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 020c 	bic.w	r2, r2, #12
 8003436:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d112      	bne.n	8003476 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
 800345c:	e00b      	b.n	8003476 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f95c 	bl	8003734 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	220c      	movs	r2, #12
 8003482:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_ADC_IRQHandler+0x198>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 809f 	beq.w	80035e2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8099 	beq.w	80035e2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fcbb 	bl	8002e48 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fc76 	bl	8002dca <LL_ADC_REG_IsTriggerSourceSWStart>
 80034de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <HAL_ADC_IRQHandler+0x22c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d002      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x1f0>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	e000      	b.n	80034f2 <HAL_ADC_IRQHandler+0x1f2>
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_ADC_IRQHandler+0x230>)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d008      	beq.n	800350c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d002      	beq.n	800350c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b07      	cmp	r3, #7
 800350a:	d104      	bne.n	8003516 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	e013      	b.n	800353e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_ADC_IRQHandler+0x22c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_ADC_IRQHandler+0x234>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e007      	b.n	8003536 <HAL_ADC_IRQHandler+0x236>
 8003526:	bf00      	nop
 8003528:	50040300 	.word	0x50040300
 800352c:	50040100 	.word	0x50040100
 8003530:	50040000 	.word	0x50040000
 8003534:	4b7d      	ldr	r3, [pc, #500]	; (800372c <HAL_ADC_IRQHandler+0x42c>)
 8003536:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d047      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_ADC_IRQHandler+0x25e>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03f      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d13a      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d133      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d12e      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fd56 	bl	800302c <LL_ADC_INJ_IsConversionOngoing>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11a      	bne.n	80035bc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003594:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d112      	bne.n	80035d4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	f043 0201 	orr.w	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
 80035ba:	e00b      	b.n	80035d4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c0:	f043 0210 	orr.w	r2, r3, #16
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fce1 	bl	8003f9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2260      	movs	r2, #96	; 0x60
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_ADC_IRQHandler+0x310>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00c      	beq.n	8003610 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f8a0 	bl	8003748 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <HAL_ADC_IRQHandler+0x340>
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fcc7 	bl	8003fc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d012      	beq.n	8003670 <HAL_ADC_IRQHandler+0x370>
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fcb9 	bl	8003fd8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d036      	beq.n	80036e8 <HAL_ADC_IRQHandler+0x3e8>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	d031      	beq.n	80036e8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800368c:	2301      	movs	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	e014      	b.n	80036bc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003698:	4825      	ldr	r0, [pc, #148]	; (8003730 <HAL_ADC_IRQHandler+0x430>)
 800369a:	f7ff fc45 	bl	8002f28 <LL_ADC_GetMultiDMATransfer>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036a4:	2301      	movs	r3, #1
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
 80036a8:	e008      	b.n	80036bc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036b8:	2301      	movs	r3, #1
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10e      	bne.n	80036e0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f83e 	bl	800375c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2210      	movs	r2, #16
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <HAL_ADC_IRQHandler+0x424>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f043 0208 	orr.w	r2, r3, #8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fc46 	bl	8003fb0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003724:	bf00      	nop
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	50040000 	.word	0x50040000
 8003730:	50040300 	.word	0x50040300

08003734 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b0b6      	sub	sp, #216	; 0xd8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x22>
 800378e:	2302      	movs	r3, #2
 8003790:	e3c7      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x7b2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fc31 	bl	8003006 <LL_ADC_REG_IsConversionOngoing>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 83a8 	bne.w	8003efc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d824      	bhi.n	80037fe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	3b02      	subs	r3, #2
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d81b      	bhi.n	80037f6 <HAL_ADC_ConfigChannel+0x86>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_ADC_ConfigChannel+0x54>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037dd 	.word	0x080037dd
 80037cc:	080037e5 	.word	0x080037e5
 80037d0:	080037ed 	.word	0x080037ed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	220c      	movs	r2, #12
 80037d8:	605a      	str	r2, [r3, #4]
          break;
 80037da:	e011      	b.n	8003800 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2212      	movs	r2, #18
 80037e0:	605a      	str	r2, [r3, #4]
          break;
 80037e2:	e00d      	b.n	8003800 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2218      	movs	r2, #24
 80037e8:	605a      	str	r2, [r3, #4]
          break;
 80037ea:	e009      	b.n	8003800 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f2:	605a      	str	r2, [r3, #4]
          break;
 80037f4:	e004      	b.n	8003800 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2206      	movs	r2, #6
 80037fa:	605a      	str	r2, [r3, #4]
          break;
 80037fc:	e000      	b.n	8003800 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80037fe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	f7ff faef 	bl	8002df0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fbf5 	bl	8003006 <LL_ADC_REG_IsConversionOngoing>
 800381c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fc01 	bl	800302c <LL_ADC_INJ_IsConversionOngoing>
 800382a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800382e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 81a6 	bne.w	8003b84 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003838:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 81a1 	bne.w	8003b84 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	461a      	mov	r2, r3
 8003850:	f7ff fb0d 	bl	8002e6e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	08db      	lsrs	r3, r3, #3
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d00a      	beq.n	800388c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6919      	ldr	r1, [r3, #16]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003886:	f7ff fa4b 	bl	8002d20 <LL_ADC_SetOffset>
 800388a:	e17b      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fa68 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x148>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fa5d 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	e01e      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x186>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fa52 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e004      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80038ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_ADC_ConfigChannel+0x19e>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0e9b      	lsrs	r3, r3, #26
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	e018      	b.n	8003940 <HAL_ADC_ConfigChannel+0x1d0>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800392a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003932:	2320      	movs	r3, #32
 8003934:	e004      	b.n	8003940 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003940:	429a      	cmp	r2, r3
 8003942:	d106      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fa21 	bl	8002d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2101      	movs	r1, #1
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fa05 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 800395e:	4603      	mov	r3, r0
 8003960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <HAL_ADC_ConfigChannel+0x20e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff f9fa 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003974:	4603      	mov	r3, r0
 8003976:	0e9b      	lsrs	r3, r3, #26
 8003978:	f003 021f 	and.w	r2, r3, #31
 800397c:	e01e      	b.n	80039bc <HAL_ADC_ConfigChannel+0x24c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff f9ef 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 800398a:	4603      	mov	r3, r0
 800398c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800399c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80039ac:	2320      	movs	r3, #32
 80039ae:	e004      	b.n	80039ba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80039b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x264>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0e9b      	lsrs	r3, r3, #26
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	e018      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x296>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e004      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80039fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d106      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff f9be 	bl	8002d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff f9a2 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x2d4>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2102      	movs	r1, #2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff f997 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	f003 021f 	and.w	r2, r3, #31
 8003a42:	e01e      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x312>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff f98c 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a72:	2320      	movs	r3, #32
 8003a74:	e004      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d105      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x32a>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	0e9b      	lsrs	r3, r3, #26
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	e016      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x358>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003aba:	2320      	movs	r3, #32
 8003abc:	e004      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003abe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d106      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f95d 	bl	8002d94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2103      	movs	r1, #3
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f941 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x396>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2103      	movs	r1, #3
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff f936 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003afc:	4603      	mov	r3, r0
 8003afe:	0e9b      	lsrs	r3, r3, #26
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	e017      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x3c6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff f92b 	bl	8002d68 <LL_ADC_GetOffsetChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b20:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e003      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x3de>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	0e9b      	lsrs	r3, r3, #26
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	e011      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x402>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b66:	2320      	movs	r3, #32
 8003b68:	e003      	b.n	8003b72 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d106      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2103      	movs	r1, #3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f908 	bl	8002d94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fa29 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 813f 	bne.w	8003e14 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6819      	ldr	r1, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f7ff f98e 	bl	8002ec4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a8e      	ldr	r2, [pc, #568]	; (8003de8 <HAL_ADC_ConfigChannel+0x678>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	f040 8130 	bne.w	8003e14 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x46c>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2b09      	cmp	r3, #9
 8003bd2:	bf94      	ite	ls
 8003bd4:	2301      	movls	r3, #1
 8003bd6:	2300      	movhi	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e019      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x4a0>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003bf4:	2320      	movs	r3, #32
 8003bf6:	e003      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2b09      	cmp	r3, #9
 8003c08:	bf94      	ite	ls
 8003c0a:	2301      	movls	r3, #1
 8003c0c:	2300      	movhi	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d079      	beq.n	8003d08 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x4c0>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	3301      	adds	r3, #1
 8003c28:	069b      	lsls	r3, r3, #26
 8003c2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c2e:	e015      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x4ec>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	e003      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	069b      	lsls	r3, r3, #26
 8003c58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x50c>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0e9b      	lsrs	r3, r3, #26
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2101      	movs	r1, #1
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	e017      	b.n	8003cac <HAL_ADC_ConfigChannel+0x53c>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	e003      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	ea42 0103 	orr.w	r1, r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x562>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	0e9b      	lsrs	r3, r3, #26
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f003 021f 	and.w	r2, r3, #31
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	051b      	lsls	r3, r3, #20
 8003cd0:	e018      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x594>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003cea:	2320      	movs	r3, #32
 8003cec:	e003      	b.n	8003cf6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	f003 021f 	and.w	r2, r3, #31
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	4413      	add	r3, r2
 8003d02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d04:	430b      	orrs	r3, r1
 8003d06:	e080      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x5b4>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0e9b      	lsrs	r3, r3, #26
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	069b      	lsls	r3, r3, #26
 8003d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d22:	e015      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x5e0>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	e003      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	069b      	lsls	r3, r3, #26
 8003d4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x600>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	3301      	adds	r3, #1
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	e017      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x630>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e003      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	ea42 0103 	orr.w	r1, r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10d      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x65c>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0e9b      	lsrs	r3, r3, #26
 8003db6:	3301      	adds	r3, #1
 8003db8:	f003 021f 	and.w	r2, r3, #31
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3b1e      	subs	r3, #30
 8003dc4:	051b      	lsls	r3, r3, #20
 8003dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dca:	e01d      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x698>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	613b      	str	r3, [r7, #16]
  return result;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003de4:	2320      	movs	r3, #32
 8003de6:	e005      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x684>
 8003de8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	fab3 f383 	clz	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	f003 021f 	and.w	r2, r3, #31
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b1e      	subs	r3, #30
 8003e02:	051b      	lsls	r3, r3, #20
 8003e04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7ff f82d 	bl	8002e6e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_ADC_ConfigChannel+0x7bc>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d07a      	beq.n	8003f16 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e20:	4843      	ldr	r0, [pc, #268]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e22:	f7fe ff6f 	bl	8002d04 <LL_ADC_GetCommonPathInternalCh>
 8003e26:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a41      	ldr	r2, [pc, #260]	; (8003f34 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d12c      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d126      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a3c      	ldr	r2, [pc, #240]	; (8003f38 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_ADC_ConfigChannel+0x6e4>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a3b      	ldr	r2, [pc, #236]	; (8003f3c <HAL_ADC_ConfigChannel+0x7cc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d15d      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4834      	ldr	r0, [pc, #208]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e60:	f7fe ff3d 	bl	8002cde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_ADC_ConfigChannel+0x7d0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	4a36      	ldr	r2, [pc, #216]	; (8003f44 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	099b      	lsrs	r3, r3, #6
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e7e:	e002      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f9      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e8c:	e040      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d118      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x75a>
 8003e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d112      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	; (8003f38 <HAL_ADC_ConfigChannel+0x7c8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0x748>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a22      	ldr	r2, [pc, #136]	; (8003f3c <HAL_ADC_ConfigChannel+0x7cc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d12d      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	481b      	ldr	r0, [pc, #108]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ec4:	f7fe ff0b 	bl	8002cde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ec8:	e024      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d120      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11a      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d115      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	480e      	ldr	r0, [pc, #56]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ef6:	f7fe fef2 	bl	8002cde <LL_ADC_SetCommonPathInternalCh>
 8003efa:	e00c      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f0e:	e002      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	37d8      	adds	r7, #216	; 0xd8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	80080000 	.word	0x80080000
 8003f30:	50040300 	.word	0x50040300
 8003f34:	c7520000 	.word	0xc7520000
 8003f38:	50040000 	.word	0x50040000
 8003f3c:	50040200 	.word	0x50040200
 8003f40:	20000154 	.word	0x20000154
 8003f44:	053e2d63 	.word	0x053e2d63
 8003f48:	cb840000 	.word	0xcb840000
 8003f4c:	80000001 	.word	0x80000001

08003f50 <LL_ADC_IsEnabled>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <LL_ADC_IsEnabled+0x18>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <LL_ADC_IsEnabled+0x1a>
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d101      	bne.n	8003f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b09f      	sub	sp, #124	; 0x7c
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800401a:	2302      	movs	r3, #2
 800401c:	e093      	b.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004026:	2300      	movs	r3, #0
 8004028:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800402a:	2300      	movs	r3, #0
 800402c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a47      	ldr	r2, [pc, #284]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d102      	bne.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004038:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	e001      	b.n	8004042 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e072      	b.n	8004146 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff ff87 	bl	8003f76 <LL_ADC_REG_IsConversionOngoing>
 8004068:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff81 	bl	8003f76 <LL_ADC_REG_IsConversionOngoing>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d154      	bne.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800407a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800407c:	2b00      	cmp	r3, #0
 800407e:	d151      	bne.n	8004124 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004080:	4b35      	ldr	r3, [pc, #212]	; (8004158 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004082:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d02c      	beq.n	80040e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800409e:	035b      	lsls	r3, r3, #13
 80040a0:	430b      	orrs	r3, r1
 80040a2:	431a      	orrs	r2, r3
 80040a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a8:	4829      	ldr	r0, [pc, #164]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040aa:	f7ff ff51 	bl	8003f50 <LL_ADC_IsEnabled>
 80040ae:	4604      	mov	r4, r0
 80040b0:	4828      	ldr	r0, [pc, #160]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040b2:	f7ff ff4d 	bl	8003f50 <LL_ADC_IsEnabled>
 80040b6:	4603      	mov	r3, r0
 80040b8:	431c      	orrs	r4, r3
 80040ba:	4828      	ldr	r0, [pc, #160]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80040bc:	f7ff ff48 	bl	8003f50 <LL_ADC_IsEnabled>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4323      	orrs	r3, r4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d137      	bne.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040d0:	f023 030f 	bic.w	r3, r3, #15
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	6811      	ldr	r1, [r2, #0]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	430a      	orrs	r2, r1
 80040de:	431a      	orrs	r2, r3
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040e4:	e028      	b.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f2:	4817      	ldr	r0, [pc, #92]	; (8004150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80040f4:	f7ff ff2c 	bl	8003f50 <LL_ADC_IsEnabled>
 80040f8:	4604      	mov	r4, r0
 80040fa:	4816      	ldr	r0, [pc, #88]	; (8004154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040fc:	f7ff ff28 	bl	8003f50 <LL_ADC_IsEnabled>
 8004100:	4603      	mov	r3, r0
 8004102:	431c      	orrs	r4, r3
 8004104:	4815      	ldr	r0, [pc, #84]	; (800415c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004106:	f7ff ff23 	bl	8003f50 <LL_ADC_IsEnabled>
 800410a:	4603      	mov	r3, r0
 800410c:	4323      	orrs	r3, r4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d112      	bne.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800411a:	f023 030f 	bic.w	r3, r3, #15
 800411e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004120:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004122:	e009      	b.n	8004138 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004136:	e000      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004138:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004142:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004146:	4618      	mov	r0, r3
 8004148:	377c      	adds	r7, #124	; 0x7c
 800414a:	46bd      	mov	sp, r7
 800414c:	bd90      	pop	{r4, r7, pc}
 800414e:	bf00      	nop
 8004150:	50040000 	.word	0x50040000
 8004154:	50040100 	.word	0x50040100
 8004158:	50040300 	.word	0x50040300
 800415c:	50040200 	.word	0x50040200

08004160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800417c:	4013      	ands	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800418c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004192:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	60d3      	str	r3, [r2, #12]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <__NVIC_GetPriorityGrouping+0x18>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	f003 0307 	and.w	r3, r3, #7
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	db0b      	blt.n	80041ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	4907      	ldr	r1, [pc, #28]	; (80041fc <__NVIC_EnableIRQ+0x38>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2001      	movs	r0, #1
 80041e6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	e000e100 	.word	0xe000e100

08004200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	6039      	str	r1, [r7, #0]
 800420a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004210:	2b00      	cmp	r3, #0
 8004212:	db0a      	blt.n	800422a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	490c      	ldr	r1, [pc, #48]	; (800424c <__NVIC_SetPriority+0x4c>)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	0112      	lsls	r2, r2, #4
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	440b      	add	r3, r1
 8004224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004228:	e00a      	b.n	8004240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4908      	ldr	r1, [pc, #32]	; (8004250 <__NVIC_SetPriority+0x50>)
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	3b04      	subs	r3, #4
 8004238:	0112      	lsls	r2, r2, #4
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	440b      	add	r3, r1
 800423e:	761a      	strb	r2, [r3, #24]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000e100 	.word	0xe000e100
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f1c3 0307 	rsb	r3, r3, #7
 800426e:	2b04      	cmp	r3, #4
 8004270:	bf28      	it	cs
 8004272:	2304      	movcs	r3, #4
 8004274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3304      	adds	r3, #4
 800427a:	2b06      	cmp	r3, #6
 800427c:	d902      	bls.n	8004284 <NVIC_EncodePriority+0x30>
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3b03      	subs	r3, #3
 8004282:	e000      	b.n	8004286 <NVIC_EncodePriority+0x32>
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43da      	mvns	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	401a      	ands	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800429c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	43d9      	mvns	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042ac:	4313      	orrs	r3, r2
         );
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3724      	adds	r7, #36	; 0x24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ff4c 	bl	8004160 <__NVIC_SetPriorityGrouping>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042e2:	f7ff ff61 	bl	80041a8 <__NVIC_GetPriorityGrouping>
 80042e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	6978      	ldr	r0, [r7, #20]
 80042ee:	f7ff ffb1 	bl	8004254 <NVIC_EncodePriority>
 80042f2:	4602      	mov	r2, r0
 80042f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff ff80 	bl	8004200 <__NVIC_SetPriority>
}
 8004300:	bf00      	nop
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff54 	bl	80041c4 <__NVIC_EnableIRQ>
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004332:	e17f      	b.n	8004634 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2101      	movs	r1, #1
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	4013      	ands	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8171 	beq.w	800462e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d00b      	beq.n	800436c <HAL_GPIO_Init+0x48>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d007      	beq.n	800436c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004360:	2b11      	cmp	r3, #17
 8004362:	d003      	beq.n	800436c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b12      	cmp	r3, #18
 800436a:	d130      	bne.n	80043ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2203      	movs	r2, #3
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4013      	ands	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043a2:	2201      	movs	r2, #1
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	f003 0201 	and.w	r2, r3, #1
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d118      	bne.n	800440c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043e0:	2201      	movs	r2, #1
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4013      	ands	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	f003 0201 	and.w	r2, r3, #1
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x128>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b12      	cmp	r3, #18
 800444a:	d123      	bne.n	8004494 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	08da      	lsrs	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3208      	adds	r2, #8
 8004454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	220f      	movs	r2, #15
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4013      	ands	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	08da      	lsrs	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3208      	adds	r2, #8
 800448e:	6939      	ldr	r1, [r7, #16]
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2203      	movs	r2, #3
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4013      	ands	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0203 	and.w	r2, r3, #3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80ac 	beq.w	800462e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d6:	4b5f      	ldr	r3, [pc, #380]	; (8004654 <HAL_GPIO_Init+0x330>)
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044da:	4a5e      	ldr	r2, [pc, #376]	; (8004654 <HAL_GPIO_Init+0x330>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6613      	str	r3, [r2, #96]	; 0x60
 80044e2:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <HAL_GPIO_Init+0x330>)
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044ee:	4a5a      	ldr	r2, [pc, #360]	; (8004658 <HAL_GPIO_Init+0x334>)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	3302      	adds	r3, #2
 80044f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004518:	d025      	beq.n	8004566 <HAL_GPIO_Init+0x242>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4f      	ldr	r2, [pc, #316]	; (800465c <HAL_GPIO_Init+0x338>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <HAL_GPIO_Init+0x23e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4e      	ldr	r2, [pc, #312]	; (8004660 <HAL_GPIO_Init+0x33c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d019      	beq.n	800455e <HAL_GPIO_Init+0x23a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4d      	ldr	r2, [pc, #308]	; (8004664 <HAL_GPIO_Init+0x340>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_GPIO_Init+0x236>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a4c      	ldr	r2, [pc, #304]	; (8004668 <HAL_GPIO_Init+0x344>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00d      	beq.n	8004556 <HAL_GPIO_Init+0x232>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a4b      	ldr	r2, [pc, #300]	; (800466c <HAL_GPIO_Init+0x348>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <HAL_GPIO_Init+0x22e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4a      	ldr	r2, [pc, #296]	; (8004670 <HAL_GPIO_Init+0x34c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d101      	bne.n	800454e <HAL_GPIO_Init+0x22a>
 800454a:	2306      	movs	r3, #6
 800454c:	e00c      	b.n	8004568 <HAL_GPIO_Init+0x244>
 800454e:	2307      	movs	r3, #7
 8004550:	e00a      	b.n	8004568 <HAL_GPIO_Init+0x244>
 8004552:	2305      	movs	r3, #5
 8004554:	e008      	b.n	8004568 <HAL_GPIO_Init+0x244>
 8004556:	2304      	movs	r3, #4
 8004558:	e006      	b.n	8004568 <HAL_GPIO_Init+0x244>
 800455a:	2303      	movs	r3, #3
 800455c:	e004      	b.n	8004568 <HAL_GPIO_Init+0x244>
 800455e:	2302      	movs	r3, #2
 8004560:	e002      	b.n	8004568 <HAL_GPIO_Init+0x244>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_GPIO_Init+0x244>
 8004566:	2300      	movs	r3, #0
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	f002 0203 	and.w	r2, r2, #3
 800456e:	0092      	lsls	r2, r2, #2
 8004570:	4093      	lsls	r3, r2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004578:	4937      	ldr	r1, [pc, #220]	; (8004658 <HAL_GPIO_Init+0x334>)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	3302      	adds	r3, #2
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <HAL_GPIO_Init+0x350>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045aa:	4a32      	ldr	r2, [pc, #200]	; (8004674 <HAL_GPIO_Init+0x350>)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80045b0:	4b30      	ldr	r3, [pc, #192]	; (8004674 <HAL_GPIO_Init+0x350>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045d4:	4a27      	ldr	r2, [pc, #156]	; (8004674 <HAL_GPIO_Init+0x350>)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <HAL_GPIO_Init+0x350>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045fe:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_GPIO_Init+0x350>)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <HAL_GPIO_Init+0x350>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	43db      	mvns	r3, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004628:	4a12      	ldr	r2, [pc, #72]	; (8004674 <HAL_GPIO_Init+0x350>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	f47f ae78 	bne.w	8004334 <HAL_GPIO_Init+0x10>
  }
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
 8004658:	40010000 	.word	0x40010000
 800465c:	48000400 	.word	0x48000400
 8004660:	48000800 	.word	0x48000800
 8004664:	48000c00 	.word	0x48000c00
 8004668:	48001000 	.word	0x48001000
 800466c:	48001400 	.word	0x48001400
 8004670:	48001800 	.word	0x48001800
 8004674:	40010400 	.word	0x40010400

08004678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
 8004684:	4613      	mov	r3, r2
 8004686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004688:	787b      	ldrb	r3, [r7, #1]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004694:	e002      	b.n	800469c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40007000 	.word	0x40007000

080046c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d2:	d130      	bne.n	8004736 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d4:	4b23      	ldr	r3, [pc, #140]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d038      	beq.n	8004754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2232      	movs	r2, #50	; 0x32
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0c9b      	lsrs	r3, r3, #18
 8004704:	3301      	adds	r3, #1
 8004706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004708:	e002      	b.n	8004710 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3b01      	subs	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d102      	bne.n	8004724 <HAL_PWREx_ControlVoltageScaling+0x60>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f2      	bne.n	800470a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004730:	d110      	bne.n	8004754 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e00f      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004742:	d007      	beq.n	8004754 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800474c:	4a05      	ldr	r2, [pc, #20]	; (8004764 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004752:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40007000 	.word	0x40007000
 8004768:	20000154 	.word	0x20000154
 800476c:	431bde83 	.word	0x431bde83

08004770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e3d4      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004782:	4ba1      	ldr	r3, [pc, #644]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800478c:	4b9e      	ldr	r3, [pc, #632]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80e4 	beq.w	800496c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <HAL_RCC_OscConfig+0x4a>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	f040 808b 	bne.w	80048c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f040 8087 	bne.w	80048c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ba:	4b93      	ldr	r3, [pc, #588]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_RCC_OscConfig+0x62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e3ac      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	4b8c      	ldr	r3, [pc, #560]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <HAL_RCC_OscConfig+0x7c>
 80047e2:	4b89      	ldr	r3, [pc, #548]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047ea:	e005      	b.n	80047f8 <HAL_RCC_OscConfig+0x88>
 80047ec:	4b86      	ldr	r3, [pc, #536]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d223      	bcs.n	8004844 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fd73 	bl	80052ec <RCC_SetFlashLatencyFromMSIRange>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e38d      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004810:	4b7d      	ldr	r3, [pc, #500]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a7c      	ldr	r2, [pc, #496]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004816:	f043 0308 	orr.w	r3, r3, #8
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b7a      	ldr	r3, [pc, #488]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4977      	ldr	r1, [pc, #476]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800482e:	4b76      	ldr	r3, [pc, #472]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	4972      	ldr	r1, [pc, #456]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800483e:	4313      	orrs	r3, r2
 8004840:	604b      	str	r3, [r1, #4]
 8004842:	e025      	b.n	8004890 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004844:	4b70      	ldr	r3, [pc, #448]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6f      	ldr	r2, [pc, #444]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800484a:	f043 0308 	orr.w	r3, r3, #8
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	4b6d      	ldr	r3, [pc, #436]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	496a      	ldr	r1, [pc, #424]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004862:	4b69      	ldr	r3, [pc, #420]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	4965      	ldr	r1, [pc, #404]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fd33 	bl	80052ec <RCC_SetFlashLatencyFromMSIRange>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e34d      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004890:	f000 fc36 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b5c      	ldr	r3, [pc, #368]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	495a      	ldr	r1, [pc, #360]	; (8004a0c <HAL_RCC_OscConfig+0x29c>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	4a58      	ldr	r2, [pc, #352]	; (8004a10 <HAL_RCC_OscConfig+0x2a0>)
 80048ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048b0:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_OscConfig+0x2a4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe f803 	bl	80028c0 <HAL_InitTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d052      	beq.n	800496a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	e331      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d032      	beq.n	8004936 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048d0:	4b4d      	ldr	r3, [pc, #308]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a4c      	ldr	r2, [pc, #304]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048dc:	f7fe f9bc 	bl	8002c58 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048e4:	f7fe f9b8 	bl	8002c58 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e31a      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f6:	4b44      	ldr	r3, [pc, #272]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004902:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a40      	ldr	r2, [pc, #256]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004908:	f043 0308 	orr.w	r3, r3, #8
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	493b      	ldr	r1, [pc, #236]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800491c:	4313      	orrs	r3, r2
 800491e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004920:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	4936      	ldr	r1, [pc, #216]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
 8004934:	e01a      	b.n	800496c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004936:	4b34      	ldr	r3, [pc, #208]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a33      	ldr	r2, [pc, #204]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004942:	f7fe f989 	bl	8002c58 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800494a:	f7fe f985 	bl	8002c58 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e2e7      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f0      	bne.n	800494a <HAL_RCC_OscConfig+0x1da>
 8004968:	e000      	b.n	800496c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800496a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d074      	beq.n	8004a62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b08      	cmp	r3, #8
 800497c:	d005      	beq.n	800498a <HAL_RCC_OscConfig+0x21a>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d10e      	bne.n	80049a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d10b      	bne.n	80049a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498a:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d064      	beq.n	8004a60 <HAL_RCC_OscConfig+0x2f0>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d160      	bne.n	8004a60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e2c4      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049aa:	d106      	bne.n	80049ba <HAL_RCC_OscConfig+0x24a>
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e01d      	b.n	80049f6 <HAL_RCC_OscConfig+0x286>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c2:	d10c      	bne.n	80049de <HAL_RCC_OscConfig+0x26e>
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e00b      	b.n	80049f6 <HAL_RCC_OscConfig+0x286>
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a06      	ldr	r2, [pc, #24]	; (8004a08 <HAL_RCC_OscConfig+0x298>)
 80049f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01c      	beq.n	8004a38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fe:	f7fe f92b 	bl	8002c58 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a04:	e011      	b.n	8004a2a <HAL_RCC_OscConfig+0x2ba>
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	0801085c 	.word	0x0801085c
 8004a10:	20000154 	.word	0x20000154
 8004a14:	20000158 	.word	0x20000158
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fe f91e 	bl	8002c58 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e280      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2a:	4baf      	ldr	r3, [pc, #700]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x2a8>
 8004a36:	e014      	b.n	8004a62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe f90e 	bl	8002c58 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a40:	f7fe f90a 	bl	8002c58 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	; 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e26c      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a52:	4ba5      	ldr	r3, [pc, #660]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x2d0>
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d060      	beq.n	8004b30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_OscConfig+0x310>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d119      	bne.n	8004aae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d116      	bne.n	8004aae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a80:	4b99      	ldr	r3, [pc, #612]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_OscConfig+0x328>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e249      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b93      	ldr	r3, [pc, #588]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	4990      	ldr	r1, [pc, #576]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aac:	e040      	b.n	8004b30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d023      	beq.n	8004afe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab6:	4b8c      	ldr	r3, [pc, #560]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a8b      	ldr	r2, [pc, #556]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac2:	f7fe f8c9 	bl	8002c58 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aca:	f7fe f8c5 	bl	8002c58 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e227      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004adc:	4b82      	ldr	r3, [pc, #520]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b7f      	ldr	r3, [pc, #508]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	497c      	ldr	r1, [pc, #496]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
 8004afc:	e018      	b.n	8004b30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afe:	4b7a      	ldr	r3, [pc, #488]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a79      	ldr	r2, [pc, #484]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7fe f8a5 	bl	8002c58 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b12:	f7fe f8a1 	bl	8002c58 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e203      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b24:	4b70      	ldr	r3, [pc, #448]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f0      	bne.n	8004b12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d03c      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01c      	beq.n	8004b7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b44:	4b68      	ldr	r3, [pc, #416]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4a:	4a67      	ldr	r2, [pc, #412]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b54:	f7fe f880 	bl	8002c58 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fe f87c 	bl	8002c58 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1de      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b6e:	4b5e      	ldr	r3, [pc, #376]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0ef      	beq.n	8004b5c <HAL_RCC_OscConfig+0x3ec>
 8004b7c:	e01b      	b.n	8004bb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b7e:	4b5a      	ldr	r3, [pc, #360]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b84:	4a58      	ldr	r2, [pc, #352]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fe f863 	bl	8002c58 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b96:	f7fe f85f 	bl	8002c58 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e1c1      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba8:	4b4f      	ldr	r3, [pc, #316]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1ef      	bne.n	8004b96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80a6 	beq.w	8004d10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bc8:	4b47      	ldr	r3, [pc, #284]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd4:	4b44      	ldr	r3, [pc, #272]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	4a43      	ldr	r2, [pc, #268]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6593      	str	r3, [r2, #88]	; 0x58
 8004be0:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bec:	2301      	movs	r3, #1
 8004bee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf0:	4b3e      	ldr	r3, [pc, #248]	; (8004cec <HAL_RCC_OscConfig+0x57c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d118      	bne.n	8004c2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bfc:	4b3b      	ldr	r3, [pc, #236]	; (8004cec <HAL_RCC_OscConfig+0x57c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a3a      	ldr	r2, [pc, #232]	; (8004cec <HAL_RCC_OscConfig+0x57c>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c08:	f7fe f826 	bl	8002c58 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c10:	f7fe f822 	bl	8002c58 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e184      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c22:	4b32      	ldr	r3, [pc, #200]	; (8004cec <HAL_RCC_OscConfig+0x57c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d108      	bne.n	8004c48 <HAL_RCC_OscConfig+0x4d8>
 8004c36:	4b2c      	ldr	r3, [pc, #176]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c46:	e024      	b.n	8004c92 <HAL_RCC_OscConfig+0x522>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d110      	bne.n	8004c72 <HAL_RCC_OscConfig+0x502>
 8004c50:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	4a24      	ldr	r2, [pc, #144]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c58:	f043 0304 	orr.w	r3, r3, #4
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c60:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a20      	ldr	r2, [pc, #128]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c70:	e00f      	b.n	8004c92 <HAL_RCC_OscConfig+0x522>
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c7a:	f023 0301 	bic.w	r3, r3, #1
 8004c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	4a17      	ldr	r2, [pc, #92]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004c8a:	f023 0304 	bic.w	r3, r3, #4
 8004c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fd ffdd 	bl	8002c58 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd ffd9 	bl	8002c58 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e139      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCC_OscConfig+0x578>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ed      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x532>
 8004cc6:	e01a      	b.n	8004cfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd ffc6 	bl	8002c58 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cce:	e00f      	b.n	8004cf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fd ffc2 	bl	8002c58 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d906      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e122      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf0:	4b90      	ldr	r3, [pc, #576]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e8      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d105      	bne.n	8004d10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d04:	4b8b      	ldr	r3, [pc, #556]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	4a8a      	ldr	r2, [pc, #552]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8108 	beq.w	8004f2a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	f040 80d0 	bne.w	8004ec4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d24:	4b83      	ldr	r3, [pc, #524]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0203 	and.w	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d130      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	3b01      	subs	r3, #1
 8004d44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d127      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11f      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d64:	2a07      	cmp	r2, #7
 8004d66:	bf14      	ite	ne
 8004d68:	2201      	movne	r2, #1
 8004d6a:	2200      	moveq	r2, #0
 8004d6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d113      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d06e      	beq.n	8004e78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d069      	beq.n	8004e74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004da0:	4b64      	ldr	r3, [pc, #400]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004dac:	4b61      	ldr	r3, [pc, #388]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0b7      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dbc:	4b5d      	ldr	r3, [pc, #372]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5c      	ldr	r2, [pc, #368]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dc8:	f7fd ff46 	bl	8002c58 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd ff42 	bl	8002c58 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e0a4      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de2:	4b54      	ldr	r3, [pc, #336]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dee:	4b51      	ldr	r3, [pc, #324]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	4b51      	ldr	r3, [pc, #324]	; (8004f38 <HAL_RCC_OscConfig+0x7c8>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e08:	0212      	lsls	r2, r2, #8
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e10:	0852      	lsrs	r2, r2, #1
 8004e12:	3a01      	subs	r2, #1
 8004e14:	0552      	lsls	r2, r2, #21
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e1c:	0852      	lsrs	r2, r2, #1
 8004e1e:	3a01      	subs	r2, #1
 8004e20:	0652      	lsls	r2, r2, #25
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e28:	0912      	lsrs	r2, r2, #4
 8004e2a:	0452      	lsls	r2, r2, #17
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	4941      	ldr	r1, [pc, #260]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e34:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3e      	ldr	r2, [pc, #248]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e40:	4b3c      	ldr	r3, [pc, #240]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a3b      	ldr	r2, [pc, #236]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e4c:	f7fd ff04 	bl	8002c58 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd ff00 	bl	8002c58 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e062      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e72:	e05a      	b.n	8004f2a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e059      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e78:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d152      	bne.n	8004f2a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e84:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2a      	ldr	r2, [pc, #168]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e9c:	f7fd fedc 	bl	8002c58 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fd fed8 	bl	8002c58 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e03a      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x734>
 8004ec2:	e032      	b.n	8004f2a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b0c      	cmp	r3, #12
 8004ec8:	d02d      	beq.n	8004f26 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eca:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d105      	bne.n	8004eee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ee2:	4b14      	ldr	r3, [pc, #80]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a13      	ldr	r2, [pc, #76]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004ee8:	f023 0303 	bic.w	r3, r3, #3
 8004eec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004eee:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4a10      	ldr	r2, [pc, #64]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004ef4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fd feab 	bl	8002c58 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f06:	f7fd fea7 	bl	8002c58 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e009      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <HAL_RCC_OscConfig+0x7c4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x796>
 8004f24:	e001      	b.n	8004f2a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	f99d808c 	.word	0xf99d808c

08004f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0c8      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f50:	4b66      	ldr	r3, [pc, #408]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d910      	bls.n	8004f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b63      	ldr	r3, [pc, #396]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f023 0207 	bic.w	r2, r3, #7
 8004f66:	4961      	ldr	r1, [pc, #388]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6e:	4b5f      	ldr	r3, [pc, #380]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0b0      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d04c      	beq.n	8005026 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f94:	4b56      	ldr	r3, [pc, #344]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d121      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e09e      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d107      	bne.n	8004fbc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fac:	4b50      	ldr	r3, [pc, #320]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d115      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e092      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fc4:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e086      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd4:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e07e      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fe4:	4b42      	ldr	r3, [pc, #264]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 0203 	bic.w	r2, r3, #3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	493f      	ldr	r1, [pc, #252]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff6:	f7fd fe2f 	bl	8002c58 <HAL_GetTick>
 8004ffa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffe:	f7fd fe2b 	bl	8002c58 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	f241 3288 	movw	r2, #5000	; 0x1388
 800500c:	4293      	cmp	r3, r2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e066      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005014:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 020c 	and.w	r2, r3, #12
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	429a      	cmp	r2, r3
 8005024:	d1eb      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005032:	4b2f      	ldr	r3, [pc, #188]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	492c      	ldr	r1, [pc, #176]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005044:	4b29      	ldr	r3, [pc, #164]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d210      	bcs.n	8005074 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 0207 	bic.w	r2, r3, #7
 800505a:	4924      	ldr	r1, [pc, #144]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b22      	ldr	r3, [pc, #136]	; (80050ec <HAL_RCC_ClockConfig+0x1b0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e036      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005080:	4b1b      	ldr	r3, [pc, #108]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4918      	ldr	r1, [pc, #96]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4910      	ldr	r1, [pc, #64]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050b2:	f000 f825 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <HAL_RCC_ClockConfig+0x1b4>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	490c      	ldr	r1, [pc, #48]	; (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	5ccb      	ldrb	r3, [r1, r3]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fd fbf2 	bl	80028c0 <HAL_InitTick>
 80050dc:	4603      	mov	r3, r0
 80050de:	72fb      	strb	r3, [r7, #11]

  return status;
 80050e0:	7afb      	ldrb	r3, [r7, #11]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40022000 	.word	0x40022000
 80050f0:	40021000 	.word	0x40021000
 80050f4:	0801085c 	.word	0x0801085c
 80050f8:	20000154 	.word	0x20000154
 80050fc:	20000158 	.word	0x20000158

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	2300      	movs	r3, #0
 800510c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800510e:	4b3e      	ldr	r3, [pc, #248]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005118:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x34>
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d121      	bne.n	8005172 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d11e      	bne.n	8005172 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005134:	4b34      	ldr	r3, [pc, #208]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d107      	bne.n	8005150 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005140:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 8005142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	e005      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800515c:	4a2b      	ldr	r2, [pc, #172]	; (800520c <HAL_RCC_GetSysClockFreq+0x10c>)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005164:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10d      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d102      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005178:	4b25      	ldr	r3, [pc, #148]	; (8005210 <HAL_RCC_GetSysClockFreq+0x110>)
 800517a:	61bb      	str	r3, [r7, #24]
 800517c:	e004      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d101      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <HAL_RCC_GetSysClockFreq+0x114>)
 8005186:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d134      	bne.n	80051f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800518e:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d003      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0xac>
 80051a4:	e005      	b.n	80051b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051a6:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <HAL_RCC_GetSysClockFreq+0x110>)
 80051a8:	617b      	str	r3, [r7, #20]
      break;
 80051aa:	e005      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051ac:	4b19      	ldr	r3, [pc, #100]	; (8005214 <HAL_RCC_GetSysClockFreq+0x114>)
 80051ae:	617b      	str	r3, [r7, #20]
      break;
 80051b0:	e002      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	617b      	str	r3, [r7, #20]
      break;
 80051b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	3301      	adds	r3, #1
 80051c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	fb02 f203 	mul.w	r2, r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	0e5b      	lsrs	r3, r3, #25
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	3301      	adds	r3, #1
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051f8:	69bb      	ldr	r3, [r7, #24]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3724      	adds	r7, #36	; 0x24
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	08010874 	.word	0x08010874
 8005210:	00f42400 	.word	0x00f42400
 8005214:	007a1200 	.word	0x007a1200

08005218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <HAL_RCC_GetHCLKFreq+0x14>)
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20000154 	.word	0x20000154

08005230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005234:	f7ff fff0 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005238:	4602      	mov	r2, r0
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4904      	ldr	r1, [pc, #16]	; (8005258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005246:	5ccb      	ldrb	r3, [r1, r3]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000
 8005258:	0801086c 	.word	0x0801086c

0800525c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005260:	f7ff ffda 	bl	8005218 <HAL_RCC_GetHCLKFreq>
 8005264:	4602      	mov	r2, r0
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	0adb      	lsrs	r3, r3, #11
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	4904      	ldr	r1, [pc, #16]	; (8005284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005272:	5ccb      	ldrb	r3, [r1, r3]
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40021000 	.word	0x40021000
 8005284:	0801086c 	.word	0x0801086c

08005288 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	220f      	movs	r2, #15
 8005296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <HAL_RCC_GetClockConfig+0x5c>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0203 	and.w	r2, r3, #3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052a4:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <HAL_RCC_GetClockConfig+0x5c>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <HAL_RCC_GetClockConfig+0x5c>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <HAL_RCC_GetClockConfig+0x5c>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052ca:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <HAL_RCC_GetClockConfig+0x60>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0207 	and.w	r2, r3, #7
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	601a      	str	r2, [r3, #0]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40022000 	.word	0x40022000

080052ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005304:	f7ff f9d0 	bl	80046a8 <HAL_PWREx_GetVoltageRange>
 8005308:	6178      	str	r0, [r7, #20]
 800530a:	e014      	b.n	8005336 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800530c:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005316:	6593      	str	r3, [r2, #88]	; 0x58
 8005318:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005324:	f7ff f9c0 	bl	80046a8 <HAL_PWREx_GetVoltageRange>
 8005328:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800532a:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800532c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005334:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533c:	d10b      	bne.n	8005356 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d919      	bls.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2ba0      	cmp	r3, #160	; 0xa0
 8005348:	d902      	bls.n	8005350 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800534a:	2302      	movs	r3, #2
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	e013      	b.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005350:	2301      	movs	r3, #1
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e010      	b.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d902      	bls.n	8005362 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800535c:	2303      	movs	r3, #3
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	e00a      	b.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b80      	cmp	r3, #128	; 0x80
 8005366:	d102      	bne.n	800536e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005368:	2302      	movs	r3, #2
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e004      	b.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b70      	cmp	r3, #112	; 0x70
 8005372:	d101      	bne.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005374:	2301      	movs	r3, #1
 8005376:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 0207 	bic.w	r2, r3, #7
 8005380:	4909      	ldr	r1, [pc, #36]	; (80053a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005388:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	429a      	cmp	r2, r3
 8005394:	d001      	beq.n	800539a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40022000 	.word	0x40022000

080053ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053b4:	2300      	movs	r3, #0
 80053b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053b8:	2300      	movs	r3, #0
 80053ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d041      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053d0:	d02a      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80053d6:	d824      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053dc:	d008      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053e2:	d81e      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ec:	d010      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053ee:	e018      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053f0:	4b86      	ldr	r3, [pc, #536]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4a85      	ldr	r2, [pc, #532]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053fc:	e015      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fabb 	bl	8005980 <RCCEx_PLLSAI1_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800540e:	e00c      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3320      	adds	r3, #32
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fba6 	bl	8005b68 <RCCEx_PLLSAI2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005420:	e003      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	74fb      	strb	r3, [r7, #19]
      break;
 8005426:	e000      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800542a:	7cfb      	ldrb	r3, [r7, #19]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005430:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800543e:	4973      	ldr	r1, [pc, #460]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005446:	e001      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d041      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800545c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005460:	d02a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005462:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005466:	d824      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800546c:	d008      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800546e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005472:	d81e      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800547c:	d010      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800547e:	e018      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005480:	4b62      	ldr	r3, [pc, #392]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4a61      	ldr	r2, [pc, #388]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800548c:	e015      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3304      	adds	r3, #4
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fa73 	bl	8005980 <RCCEx_PLLSAI1_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800549e:	e00c      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3320      	adds	r3, #32
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fb5e 	bl	8005b68 <RCCEx_PLLSAI2_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054b0:	e003      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	74fb      	strb	r3, [r7, #19]
      break;
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054c0:	4b52      	ldr	r3, [pc, #328]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054ce:	494f      	ldr	r1, [pc, #316]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054d6:	e001      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a0 	beq.w	800562a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005504:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	4a40      	ldr	r2, [pc, #256]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550e:	6593      	str	r3, [r2, #88]	; 0x58
 8005510:	4b3e      	ldr	r3, [pc, #248]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551c:	2301      	movs	r3, #1
 800551e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005520:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a3a      	ldr	r2, [pc, #232]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800552c:	f7fd fb94 	bl	8002c58 <HAL_GetTick>
 8005530:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005532:	e009      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005534:	f7fd fb90 	bl	8002c58 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	74fb      	strb	r3, [r7, #19]
        break;
 8005546:	e005      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005548:	4b31      	ldr	r3, [pc, #196]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ef      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d15c      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800555a:	4b2c      	ldr	r3, [pc, #176]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005564:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01f      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	429a      	cmp	r2, r3
 8005576:	d019      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005578:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005582:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005584:	4b21      	ldr	r3, [pc, #132]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	4a20      	ldr	r2, [pc, #128]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a4:	4a19      	ldr	r2, [pc, #100]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b6:	f7fd fb4f 	bl	8002c58 <HAL_GetTick>
 80055ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055bc:	e00b      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fd fb4b 	bl	8002c58 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d902      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	74fb      	strb	r3, [r7, #19]
            break;
 80055d4:	e006      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ec      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fa:	4904      	ldr	r1, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005602:	e009      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	74bb      	strb	r3, [r7, #18]
 8005608:	e006      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005618:	7c7b      	ldrb	r3, [r7, #17]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561e:	4b9e      	ldr	r3, [pc, #632]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	4a9d      	ldr	r2, [pc, #628]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005636:	4b98      	ldr	r3, [pc, #608]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f023 0203 	bic.w	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	4994      	ldr	r1, [pc, #592]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005658:	4b8f      	ldr	r3, [pc, #572]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 020c 	bic.w	r2, r3, #12
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	498c      	ldr	r1, [pc, #560]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800567a:	4b87      	ldr	r3, [pc, #540]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	4983      	ldr	r1, [pc, #524]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800569c:	4b7e      	ldr	r3, [pc, #504]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	497b      	ldr	r1, [pc, #492]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056be:	4b76      	ldr	r3, [pc, #472]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056cc:	4972      	ldr	r1, [pc, #456]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056e0:	4b6d      	ldr	r3, [pc, #436]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ee:	496a      	ldr	r1, [pc, #424]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005702:	4b65      	ldr	r3, [pc, #404]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	4961      	ldr	r1, [pc, #388]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005724:	4b5c      	ldr	r3, [pc, #368]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005732:	4959      	ldr	r1, [pc, #356]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005746:	4b54      	ldr	r3, [pc, #336]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005754:	4950      	ldr	r1, [pc, #320]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	4948      	ldr	r1, [pc, #288]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800578a:	4b43      	ldr	r3, [pc, #268]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	493f      	ldr	r1, [pc, #252]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d028      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057ac:	4b3a      	ldr	r3, [pc, #232]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ba:	4937      	ldr	r1, [pc, #220]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ca:	d106      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057cc:	4b32      	ldr	r3, [pc, #200]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4a31      	ldr	r2, [pc, #196]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d6:	60d3      	str	r3, [r2, #12]
 80057d8:	e011      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057e2:	d10c      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f8c8 	bl	8005980 <RCCEx_PLLSAI1_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80057fa:	7cfb      	ldrb	r3, [r7, #19]
 80057fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d028      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800580a:	4b23      	ldr	r3, [pc, #140]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	491f      	ldr	r1, [pc, #124]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005828:	d106      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582a:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005834:	60d3      	str	r3, [r2, #12]
 8005836:	e011      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005840:	d10c      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	2101      	movs	r1, #1
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f899 	bl	8005980 <RCCEx_PLLSAI1_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005852:	7cfb      	ldrb	r3, [r7, #19]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02b      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005868:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	4908      	ldr	r1, [pc, #32]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005886:	d109      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005888:	4b03      	ldr	r3, [pc, #12]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	4a02      	ldr	r2, [pc, #8]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005892:	60d3      	str	r3, [r2, #12]
 8005894:	e014      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005896:	bf00      	nop
 8005898:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a4:	d10c      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	2101      	movs	r1, #1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f867 	bl	8005980 <RCCEx_PLLSAI1_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b6:	7cfb      	ldrb	r3, [r7, #19]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02f      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058cc:	4b2b      	ldr	r3, [pc, #172]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058da:	4928      	ldr	r1, [pc, #160]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ea:	d10d      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f844 	bl	8005980 <RCCEx_PLLSAI1_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d014      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005902:	7cfb      	ldrb	r3, [r7, #19]
 8005904:	74bb      	strb	r3, [r7, #18]
 8005906:	e011      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800590c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005910:	d10c      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3320      	adds	r3, #32
 8005916:	2102      	movs	r1, #2
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f925 	bl	8005b68 <RCCEx_PLLSAI2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005928:	7cfb      	ldrb	r3, [r7, #19]
 800592a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005946:	490d      	ldr	r1, [pc, #52]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800595a:	4b08      	ldr	r3, [pc, #32]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800596a:	4904      	ldr	r1, [pc, #16]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005972:	7cbb      	ldrb	r3, [r7, #18]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40021000 	.word	0x40021000

08005980 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800598e:	4b75      	ldr	r3, [pc, #468]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800599a:	4b72      	ldr	r3, [pc, #456]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0203 	and.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d10d      	bne.n	80059c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
       ||
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059b2:	4b6c      	ldr	r3, [pc, #432]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	091b      	lsrs	r3, r3, #4
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
       ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d047      	beq.n	8005a56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
 80059ca:	e044      	b.n	8005a56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d018      	beq.n	8005a06 <RCCEx_PLLSAI1_Config+0x86>
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d825      	bhi.n	8005a24 <RCCEx_PLLSAI1_Config+0xa4>
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d002      	beq.n	80059e2 <RCCEx_PLLSAI1_Config+0x62>
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d009      	beq.n	80059f4 <RCCEx_PLLSAI1_Config+0x74>
 80059e0:	e020      	b.n	8005a24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059e2:	4b60      	ldr	r3, [pc, #384]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d11d      	bne.n	8005a2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f2:	e01a      	b.n	8005a2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059f4:	4b5b      	ldr	r3, [pc, #364]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d116      	bne.n	8005a2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a04:	e013      	b.n	8005a2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a06:	4b57      	ldr	r3, [pc, #348]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10f      	bne.n	8005a32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a12:	4b54      	ldr	r3, [pc, #336]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a22:	e006      	b.n	8005a32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e004      	b.n	8005a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e002      	b.n	8005a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a3a:	4b4a      	ldr	r3, [pc, #296]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6819      	ldr	r1, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	4944      	ldr	r1, [pc, #272]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d17d      	bne.n	8005b58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a5c:	4b41      	ldr	r3, [pc, #260]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a40      	ldr	r2, [pc, #256]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a68:	f7fd f8f6 	bl	8002c58 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a6e:	e009      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a70:	f7fd f8f2 	bl	8002c58 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d902      	bls.n	8005a84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	73fb      	strb	r3, [r7, #15]
        break;
 8005a82:	e005      	b.n	8005a90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a84:	4b37      	ldr	r3, [pc, #220]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ef      	bne.n	8005a70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d160      	bne.n	8005b58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d111      	bne.n	8005ac0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a9c:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6892      	ldr	r2, [r2, #8]
 8005aac:	0211      	lsls	r1, r2, #8
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68d2      	ldr	r2, [r2, #12]
 8005ab2:	0912      	lsrs	r2, r2, #4
 8005ab4:	0452      	lsls	r2, r2, #17
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	492a      	ldr	r1, [pc, #168]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	610b      	str	r3, [r1, #16]
 8005abe:	e027      	b.n	8005b10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d112      	bne.n	8005aec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ace:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6892      	ldr	r2, [r2, #8]
 8005ad6:	0211      	lsls	r1, r2, #8
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6912      	ldr	r2, [r2, #16]
 8005adc:	0852      	lsrs	r2, r2, #1
 8005ade:	3a01      	subs	r2, #1
 8005ae0:	0552      	lsls	r2, r2, #21
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	491f      	ldr	r1, [pc, #124]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	610b      	str	r3, [r1, #16]
 8005aea:	e011      	b.n	8005b10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aec:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005af4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6892      	ldr	r2, [r2, #8]
 8005afc:	0211      	lsls	r1, r2, #8
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6952      	ldr	r2, [r2, #20]
 8005b02:	0852      	lsrs	r2, r2, #1
 8005b04:	3a01      	subs	r2, #1
 8005b06:	0652      	lsls	r2, r2, #25
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	4916      	ldr	r1, [pc, #88]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b10:	4b14      	ldr	r3, [pc, #80]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1c:	f7fd f89c 	bl	8002c58 <HAL_GetTick>
 8005b20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b22:	e009      	b.n	8005b38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b24:	f7fd f898 	bl	8002c58 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d902      	bls.n	8005b38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	73fb      	strb	r3, [r7, #15]
          break;
 8005b36:	e005      	b.n	8005b44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0ef      	beq.n	8005b24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b4a:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	4904      	ldr	r1, [pc, #16]	; (8005b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000

08005b68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b76:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d018      	beq.n	8005bb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b82:	4b67      	ldr	r3, [pc, #412]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0203 	and.w	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d10d      	bne.n	8005bae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
       ||
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b9a:	4b61      	ldr	r3, [pc, #388]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
       ||
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d047      	beq.n	8005c3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
 8005bb2:	e044      	b.n	8005c3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d018      	beq.n	8005bee <RCCEx_PLLSAI2_Config+0x86>
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d825      	bhi.n	8005c0c <RCCEx_PLLSAI2_Config+0xa4>
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d002      	beq.n	8005bca <RCCEx_PLLSAI2_Config+0x62>
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d009      	beq.n	8005bdc <RCCEx_PLLSAI2_Config+0x74>
 8005bc8:	e020      	b.n	8005c0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bca:	4b55      	ldr	r3, [pc, #340]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d11d      	bne.n	8005c12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bda:	e01a      	b.n	8005c12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d116      	bne.n	8005c16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bec:	e013      	b.n	8005c16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bee:	4b4c      	ldr	r3, [pc, #304]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10f      	bne.n	8005c1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bfa:	4b49      	ldr	r3, [pc, #292]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c0a:	e006      	b.n	8005c1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c10:	e004      	b.n	8005c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c12:	bf00      	nop
 8005c14:	e002      	b.n	8005c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c16:	bf00      	nop
 8005c18:	e000      	b.n	8005c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10d      	bne.n	8005c3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c22:	4b3f      	ldr	r3, [pc, #252]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	430b      	orrs	r3, r1
 8005c38:	4939      	ldr	r1, [pc, #228]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d167      	bne.n	8005d14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c44:	4b36      	ldr	r3, [pc, #216]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a35      	ldr	r2, [pc, #212]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c50:	f7fd f802 	bl	8002c58 <HAL_GetTick>
 8005c54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c56:	e009      	b.n	8005c6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c58:	f7fc fffe 	bl	8002c58 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d902      	bls.n	8005c6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	73fb      	strb	r3, [r7, #15]
        break;
 8005c6a:	e005      	b.n	8005c78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c6c:	4b2c      	ldr	r3, [pc, #176]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1ef      	bne.n	8005c58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d14a      	bne.n	8005d14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d111      	bne.n	8005ca8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c84:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6892      	ldr	r2, [r2, #8]
 8005c94:	0211      	lsls	r1, r2, #8
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	68d2      	ldr	r2, [r2, #12]
 8005c9a:	0912      	lsrs	r2, r2, #4
 8005c9c:	0452      	lsls	r2, r2, #17
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	491f      	ldr	r1, [pc, #124]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	614b      	str	r3, [r1, #20]
 8005ca6:	e011      	b.n	8005ccc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005cb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6892      	ldr	r2, [r2, #8]
 8005cb8:	0211      	lsls	r1, r2, #8
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6912      	ldr	r2, [r2, #16]
 8005cbe:	0852      	lsrs	r2, r2, #1
 8005cc0:	3a01      	subs	r2, #1
 8005cc2:	0652      	lsls	r2, r2, #25
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	4916      	ldr	r1, [pc, #88]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ccc:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd8:	f7fc ffbe 	bl	8002c58 <HAL_GetTick>
 8005cdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cde:	e009      	b.n	8005cf4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ce0:	f7fc ffba 	bl	8002c58 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d902      	bls.n	8005cf4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	73fb      	strb	r3, [r7, #15]
          break;
 8005cf2:	e005      	b.n	8005d00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0ef      	beq.n	8005ce0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4904      	ldr	r1, [pc, #16]	; (8005d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000

08005d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e095      	b.n	8005e62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d46:	d009      	beq.n	8005d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
 8005d4e:	e005      	b.n	8005d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fc fcc6 	bl	8002708 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d9c:	d902      	bls.n	8005da4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e002      	b.n	8005daa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005db2:	d007      	beq.n	8005dc4 <HAL_SPI_Init+0xa0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	ea42 0103 	orr.w	r1, r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	f003 0204 	and.w	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e40:	ea42 0103 	orr.w	r1, r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b088      	sub	sp, #32
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_SPI_Transmit+0x22>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e158      	b.n	800613e <HAL_SPI_Transmit+0x2d4>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e94:	f7fc fee0 	bl	8002c58 <HAL_GetTick>
 8005e98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005eae:	e13d      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Transmit+0x52>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ec0:	e134      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0c:	d10f      	bne.n	8005f2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	d007      	beq.n	8005f4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f54:	d94b      	bls.n	8005fee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SPI_Transmit+0xfa>
 8005f5e:	8afb      	ldrh	r3, [r7, #22]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d13e      	bne.n	8005fe2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	1c9a      	adds	r2, r3, #2
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f88:	e02b      	b.n	8005fe2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d112      	bne.n	8005fbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	881a      	ldrh	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	1c9a      	adds	r2, r3, #2
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fbc:	e011      	b.n	8005fe2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fbe:	f7fc fe4b 	bl	8002c58 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d803      	bhi.n	8005fd6 <HAL_SPI_Transmit+0x16c>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_Transmit+0x172>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fe0:	e0a4      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1ce      	bne.n	8005f8a <HAL_SPI_Transmit+0x120>
 8005fec:	e07c      	b.n	80060e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_Transmit+0x192>
 8005ff6:	8afb      	ldrh	r3, [r7, #22]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d170      	bne.n	80060de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d912      	bls.n	800602c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	881a      	ldrh	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b02      	subs	r3, #2
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	87da      	strh	r2, [r3, #62]	; 0x3e
 800602a:	e058      	b.n	80060de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006052:	e044      	b.n	80060de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d12b      	bne.n	80060ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d912      	bls.n	8006092 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	881a      	ldrh	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	1c9a      	adds	r2, r3, #2
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b02      	subs	r3, #2
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006090:	e025      	b.n	80060de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b8:	e011      	b.n	80060de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ba:	f7fc fdcd 	bl	8002c58 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Transmit+0x268>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Transmit+0x26e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060dc:	e026      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1b5      	bne.n	8006054 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 fb57 	bl	80067a0 <SPI_EndRxTxTransaction>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e000      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800612a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800613c:	7ffb      	ldrb	r3, [r7, #31]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3720      	adds	r7, #32
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b08a      	sub	sp, #40	; 0x28
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	60b9      	str	r1, [r7, #8]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006154:	2301      	movs	r3, #1
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_SPI_TransmitReceive+0x26>
 8006168:	2302      	movs	r3, #2
 800616a:	e1fb      	b.n	8006564 <HAL_SPI_TransmitReceive+0x41e>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006174:	f7fc fd70 	bl	8002c58 <HAL_GetTick>
 8006178:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006180:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006188:	887b      	ldrh	r3, [r7, #2]
 800618a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800618c:	887b      	ldrh	r3, [r7, #2]
 800618e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006190:	7efb      	ldrb	r3, [r7, #27]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d00e      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x6e>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800619c:	d106      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <HAL_SPI_TransmitReceive+0x66>
 80061a6:	7efb      	ldrb	r3, [r7, #27]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d003      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061b2:	e1cd      	b.n	8006550 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x80>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_TransmitReceive+0x80>
 80061c0:	887b      	ldrh	r3, [r7, #2]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80061cc:	e1c0      	b.n	8006550 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d003      	beq.n	80061e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2205      	movs	r2, #5
 80061de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	887a      	ldrh	r2, [r7, #2]
 80061f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	887a      	ldrh	r2, [r7, #2]
 80061fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	887a      	ldrh	r2, [r7, #2]
 8006208:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	887a      	ldrh	r2, [r7, #2]
 800620e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006224:	d802      	bhi.n	800622c <HAL_SPI_TransmitReceive+0xe6>
 8006226:	8a3b      	ldrh	r3, [r7, #16]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d908      	bls.n	800623e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	e007      	b.n	800624e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800624c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b40      	cmp	r3, #64	; 0x40
 800625a:	d007      	beq.n	800626c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800626a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006274:	d97c      	bls.n	8006370 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x13e>
 800627e:	8a7b      	ldrh	r3, [r7, #18]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d169      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	881a      	ldrh	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	1c9a      	adds	r2, r3, #2
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a8:	e056      	b.n	8006358 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d11b      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x1aa>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <HAL_SPI_TransmitReceive+0x1aa>
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d113      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	881a      	ldrh	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	1c9a      	adds	r2, r3, #2
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d11c      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x1f2>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	b292      	uxth	r2, r2
 8006316:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006334:	2301      	movs	r3, #1
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006338:	f7fc fc8e 	bl	8002c58 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006344:	429a      	cmp	r2, r3
 8006346:	d807      	bhi.n	8006358 <HAL_SPI_TransmitReceive+0x212>
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800634e:	d003      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006356:	e0fb      	b.n	8006550 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1a3      	bne.n	80062aa <HAL_SPI_TransmitReceive+0x164>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d19d      	bne.n	80062aa <HAL_SPI_TransmitReceive+0x164>
 800636e:	e0df      	b.n	8006530 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_SPI_TransmitReceive+0x23a>
 8006378:	8a7b      	ldrh	r3, [r7, #18]
 800637a:	2b01      	cmp	r3, #1
 800637c:	f040 80cb 	bne.w	8006516 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	d912      	bls.n	80063b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	881a      	ldrh	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	1c9a      	adds	r2, r3, #2
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b02      	subs	r3, #2
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ae:	e0b2      	b.n	8006516 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063d6:	e09e      	b.n	8006516 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d134      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x30a>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02f      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x30a>
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d12c      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d912      	bls.n	8006426 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	881a      	ldrh	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	1c9a      	adds	r2, r3, #2
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b02      	subs	r3, #2
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006424:	e012      	b.n	800644c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d148      	bne.n	80064f0 <HAL_SPI_TransmitReceive+0x3aa>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d042      	beq.n	80064f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d923      	bls.n	80064be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	b292      	uxth	r2, r2
 8006482:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	1c9a      	adds	r2, r3, #2
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b02      	subs	r3, #2
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d81f      	bhi.n	80064ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064ba:	605a      	str	r2, [r3, #4]
 80064bc:	e016      	b.n	80064ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f103 020c 	add.w	r2, r3, #12
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	7812      	ldrb	r2, [r2, #0]
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ec:	2301      	movs	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064f0:	f7fc fbb2 	bl	8002c58 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d803      	bhi.n	8006508 <HAL_SPI_TransmitReceive+0x3c2>
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006506:	d102      	bne.n	800650e <HAL_SPI_TransmitReceive+0x3c8>
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006514:	e01c      	b.n	8006550 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	f47f af5b 	bne.w	80063d8 <HAL_SPI_TransmitReceive+0x292>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	f47f af54 	bne.w	80063d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f933 	bl	80067a0 <SPI_EndRxTxTransaction>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	661a      	str	r2, [r3, #96]	; 0x60
 800654c:	e000      	b.n	8006550 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800654e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800657c:	f7fc fb6c 	bl	8002c58 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	4413      	add	r3, r2
 800658a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800658c:	f7fc fb64 	bl	8002c58 <HAL_GetTick>
 8006590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006592:	4b39      	ldr	r3, [pc, #228]	; (8006678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	015b      	lsls	r3, r3, #5
 8006598:	0d1b      	lsrs	r3, r3, #20
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	fb02 f303 	mul.w	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065a2:	e054      	b.n	800664e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065aa:	d050      	beq.n	800664e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065ac:	f7fc fb54 	bl	8002c58 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d902      	bls.n	80065c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d13d      	bne.n	800663e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065da:	d111      	bne.n	8006600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e4:	d004      	beq.n	80065f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ee:	d107      	bne.n	8006600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006608:	d10f      	bne.n	800662a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e017      	b.n	800666e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	3b01      	subs	r3, #1
 800664c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4013      	ands	r3, r2
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	429a      	cmp	r2, r3
 800665c:	bf0c      	ite	eq
 800665e:	2301      	moveq	r3, #1
 8006660:	2300      	movne	r3, #0
 8006662:	b2db      	uxtb	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	429a      	cmp	r2, r3
 800666a:	d19b      	bne.n	80065a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3720      	adds	r7, #32
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000154 	.word	0x20000154

0800667c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800668a:	f7fc fae5 	bl	8002c58 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	4413      	add	r3, r2
 8006698:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800669a:	f7fc fadd 	bl	8002c58 <HAL_GetTick>
 800669e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066a0:	4b3e      	ldr	r3, [pc, #248]	; (800679c <SPI_WaitFifoStateUntilTimeout+0x120>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	00da      	lsls	r2, r3, #3
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	0d1b      	lsrs	r3, r3, #20
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80066b8:	e062      	b.n	8006780 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066c0:	d109      	bne.n	80066d6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80066d4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066dc:	d050      	beq.n	8006780 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066de:	f7fc fabb 	bl	8002c58 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d902      	bls.n	80066f4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d13d      	bne.n	8006770 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006702:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670c:	d111      	bne.n	8006732 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006716:	d004      	beq.n	8006722 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006720:	d107      	bne.n	8006732 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006730:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673a:	d10f      	bne.n	800675c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800675a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e010      	b.n	8006792 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3b01      	subs	r3, #1
 800677e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d194      	bne.n	80066ba <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3720      	adds	r7, #32
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000154 	.word	0x20000154

080067a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff ff5f 	bl	800667c <SPI_WaitFifoStateUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e027      	b.n	8006824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff fec4 	bl	800656c <SPI_WaitFlagStateUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ee:	f043 0220 	orr.w	r2, r3, #32
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e014      	b.n	8006824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2200      	movs	r2, #0
 8006802:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff ff38 	bl	800667c <SPI_WaitFifoStateUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006816:	f043 0220 	orr.w	r2, r3, #32
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e000      	b.n	8006824 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e049      	b.n	80068d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f841 	bl	80068da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	4619      	mov	r1, r3
 800686a:	4610      	mov	r0, r2
 800686c:	f000 fc66 	bl	800713c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	d001      	beq.n	8006908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e04f      	b.n	80069a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a23      	ldr	r2, [pc, #140]	; (80069b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01d      	beq.n	8006966 <HAL_TIM_Base_Start_IT+0x76>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d018      	beq.n	8006966 <HAL_TIM_Base_Start_IT+0x76>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d013      	beq.n	8006966 <HAL_TIM_Base_Start_IT+0x76>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	; (80069bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00e      	beq.n	8006966 <HAL_TIM_Base_Start_IT+0x76>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d009      	beq.n	8006966 <HAL_TIM_Base_Start_IT+0x76>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d004      	beq.n	8006966 <HAL_TIM_Base_Start_IT+0x76>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d115      	bne.n	8006992 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	4b17      	ldr	r3, [pc, #92]	; (80069cc <HAL_TIM_Base_Start_IT+0xdc>)
 800696e:	4013      	ands	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b06      	cmp	r3, #6
 8006976:	d015      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0xb4>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697e:	d011      	beq.n	80069a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006990:	e008      	b.n	80069a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0201 	orr.w	r2, r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e000      	b.n	80069a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40013400 	.word	0x40013400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	00010007 	.word	0x00010007

080069d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e049      	b.n	8006a76 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fb fec8 	bl	800278c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 fb94 	bl	800713c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <HAL_TIM_PWM_Start+0x24>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	bf14      	ite	ne
 8006a9c:	2301      	movne	r3, #1
 8006a9e:	2300      	moveq	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	e03c      	b.n	8006b1e <HAL_TIM_PWM_Start+0x9e>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d109      	bne.n	8006abe <HAL_TIM_PWM_Start+0x3e>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	e02f      	b.n	8006b1e <HAL_TIM_PWM_Start+0x9e>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d109      	bne.n	8006ad8 <HAL_TIM_PWM_Start+0x58>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	bf14      	ite	ne
 8006ad0:	2301      	movne	r3, #1
 8006ad2:	2300      	moveq	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	e022      	b.n	8006b1e <HAL_TIM_PWM_Start+0x9e>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b0c      	cmp	r3, #12
 8006adc:	d109      	bne.n	8006af2 <HAL_TIM_PWM_Start+0x72>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	bf14      	ite	ne
 8006aea:	2301      	movne	r3, #1
 8006aec:	2300      	moveq	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	e015      	b.n	8006b1e <HAL_TIM_PWM_Start+0x9e>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d109      	bne.n	8006b0c <HAL_TIM_PWM_Start+0x8c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	bf14      	ite	ne
 8006b04:	2301      	movne	r3, #1
 8006b06:	2300      	moveq	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	e008      	b.n	8006b1e <HAL_TIM_PWM_Start+0x9e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e09c      	b.n	8006c60 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_TIM_PWM_Start+0xb6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b34:	e023      	b.n	8006b7e <HAL_TIM_PWM_Start+0xfe>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d104      	bne.n	8006b46 <HAL_TIM_PWM_Start+0xc6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b44:	e01b      	b.n	8006b7e <HAL_TIM_PWM_Start+0xfe>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_PWM_Start+0xd6>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b54:	e013      	b.n	8006b7e <HAL_TIM_PWM_Start+0xfe>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	d104      	bne.n	8006b66 <HAL_TIM_PWM_Start+0xe6>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b64:	e00b      	b.n	8006b7e <HAL_TIM_PWM_Start+0xfe>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d104      	bne.n	8006b76 <HAL_TIM_PWM_Start+0xf6>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b74:	e003      	b.n	8006b7e <HAL_TIM_PWM_Start+0xfe>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2201      	movs	r2, #1
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fe48 	bl	800781c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a35      	ldr	r2, [pc, #212]	; (8006c68 <HAL_TIM_PWM_Start+0x1e8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x13e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a34      	ldr	r2, [pc, #208]	; (8006c6c <HAL_TIM_PWM_Start+0x1ec>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x13e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a32      	ldr	r2, [pc, #200]	; (8006c70 <HAL_TIM_PWM_Start+0x1f0>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x13e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a31      	ldr	r2, [pc, #196]	; (8006c74 <HAL_TIM_PWM_Start+0x1f4>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x13e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2f      	ldr	r2, [pc, #188]	; (8006c78 <HAL_TIM_PWM_Start+0x1f8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0x142>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_TIM_PWM_Start+0x144>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <HAL_TIM_PWM_Start+0x1e8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01d      	beq.n	8006c1e <HAL_TIM_PWM_Start+0x19e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bea:	d018      	beq.n	8006c1e <HAL_TIM_PWM_Start+0x19e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a22      	ldr	r2, [pc, #136]	; (8006c7c <HAL_TIM_PWM_Start+0x1fc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_TIM_PWM_Start+0x19e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a21      	ldr	r2, [pc, #132]	; (8006c80 <HAL_TIM_PWM_Start+0x200>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00e      	beq.n	8006c1e <HAL_TIM_PWM_Start+0x19e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1f      	ldr	r2, [pc, #124]	; (8006c84 <HAL_TIM_PWM_Start+0x204>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d009      	beq.n	8006c1e <HAL_TIM_PWM_Start+0x19e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <HAL_TIM_PWM_Start+0x1ec>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d004      	beq.n	8006c1e <HAL_TIM_PWM_Start+0x19e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a15      	ldr	r2, [pc, #84]	; (8006c70 <HAL_TIM_PWM_Start+0x1f0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d115      	bne.n	8006c4a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	4b18      	ldr	r3, [pc, #96]	; (8006c88 <HAL_TIM_PWM_Start+0x208>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b06      	cmp	r3, #6
 8006c2e:	d015      	beq.n	8006c5c <HAL_TIM_PWM_Start+0x1dc>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c36:	d011      	beq.n	8006c5c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f042 0201 	orr.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c48:	e008      	b.n	8006c5c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 0201 	orr.w	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e000      	b.n	8006c5e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40014000 	.word	0x40014000
 8006c74:	40014400 	.word	0x40014400
 8006c78:	40014800 	.word	0x40014800
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	00010007 	.word	0x00010007

08006c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d122      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d11b      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0202 	mvn.w	r2, #2
 8006cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa16 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa08 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fa19 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d122      	bne.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d11b      	bne.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0204 	mvn.w	r2, #4
 8006d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9ec 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006d28:	e005      	b.n	8006d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f9de 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f9ef 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d122      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d11b      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0208 	mvn.w	r2, #8
 8006d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2204      	movs	r2, #4
 8006d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9c2 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006d7c:	e005      	b.n	8006d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9b4 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f9c5 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0310 	and.w	r3, r3, #16
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	d122      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d11b      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f06f 0210 	mvn.w	r2, #16
 8006db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2208      	movs	r2, #8
 8006dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f998 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006dd0:	e005      	b.n	8006dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f98a 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f99b 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d10e      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0201 	mvn.w	r2, #1
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fb f866 	bl	8001edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	2b80      	cmp	r3, #128	; 0x80
 8006e1c:	d10e      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d107      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fe26 	bl	8007a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4a:	d10e      	bne.n	8006e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e56:	2b80      	cmp	r3, #128	; 0x80
 8006e58:	d107      	bne.n	8006e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fe19 	bl	8007a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d10e      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d107      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f949 	bl	8007128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d10e      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d107      	bne.n	8006ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f06f 0220 	mvn.w	r2, #32
 8006eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fdd9 	bl	8007a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e0fd      	b.n	80070e2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b14      	cmp	r3, #20
 8006ef2:	f200 80f0 	bhi.w	80070d6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f51 	.word	0x08006f51
 8006f00:	080070d7 	.word	0x080070d7
 8006f04:	080070d7 	.word	0x080070d7
 8006f08:	080070d7 	.word	0x080070d7
 8006f0c:	08006f91 	.word	0x08006f91
 8006f10:	080070d7 	.word	0x080070d7
 8006f14:	080070d7 	.word	0x080070d7
 8006f18:	080070d7 	.word	0x080070d7
 8006f1c:	08006fd3 	.word	0x08006fd3
 8006f20:	080070d7 	.word	0x080070d7
 8006f24:	080070d7 	.word	0x080070d7
 8006f28:	080070d7 	.word	0x080070d7
 8006f2c:	08007013 	.word	0x08007013
 8006f30:	080070d7 	.word	0x080070d7
 8006f34:	080070d7 	.word	0x080070d7
 8006f38:	080070d7 	.word	0x080070d7
 8006f3c:	08007055 	.word	0x08007055
 8006f40:	080070d7 	.word	0x080070d7
 8006f44:	080070d7 	.word	0x080070d7
 8006f48:	080070d7 	.word	0x080070d7
 8006f4c:	08007095 	.word	0x08007095
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f98a 	bl	8007270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0208 	orr.w	r2, r2, #8
 8006f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0204 	bic.w	r2, r2, #4
 8006f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6999      	ldr	r1, [r3, #24]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	619a      	str	r2, [r3, #24]
      break;
 8006f8e:	e0a3      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f9fa 	bl	8007390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699a      	ldr	r2, [r3, #24]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6999      	ldr	r1, [r3, #24]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	021a      	lsls	r2, r3, #8
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	619a      	str	r2, [r3, #24]
      break;
 8006fd0:	e082      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fa63 	bl	80074a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0208 	orr.w	r2, r2, #8
 8006fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0204 	bic.w	r2, r2, #4
 8006ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69d9      	ldr	r1, [r3, #28]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	61da      	str	r2, [r3, #28]
      break;
 8007010:	e062      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68b9      	ldr	r1, [r7, #8]
 8007018:	4618      	mov	r0, r3
 800701a:	f000 facb 	bl	80075b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800702c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800703c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69d9      	ldr	r1, [r3, #28]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	021a      	lsls	r2, r3, #8
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	61da      	str	r2, [r3, #28]
      break;
 8007052:	e041      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 fb14 	bl	8007688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0208 	orr.w	r2, r2, #8
 800706e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0204 	bic.w	r2, r2, #4
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	691a      	ldr	r2, [r3, #16]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007092:	e021      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fb58 	bl	8007750 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070d4:	e000      	b.n	80070d8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80070d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop

080070ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a40      	ldr	r2, [pc, #256]	; (8007250 <TIM_Base_SetConfig+0x114>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d013      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715a:	d00f      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a3d      	ldr	r2, [pc, #244]	; (8007254 <TIM_Base_SetConfig+0x118>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00b      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a3c      	ldr	r2, [pc, #240]	; (8007258 <TIM_Base_SetConfig+0x11c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d007      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a3b      	ldr	r2, [pc, #236]	; (800725c <TIM_Base_SetConfig+0x120>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_Base_SetConfig+0x40>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a3a      	ldr	r2, [pc, #232]	; (8007260 <TIM_Base_SetConfig+0x124>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d108      	bne.n	800718e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2f      	ldr	r2, [pc, #188]	; (8007250 <TIM_Base_SetConfig+0x114>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01f      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719c:	d01b      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2c      	ldr	r2, [pc, #176]	; (8007254 <TIM_Base_SetConfig+0x118>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d017      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2b      	ldr	r2, [pc, #172]	; (8007258 <TIM_Base_SetConfig+0x11c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <TIM_Base_SetConfig+0x120>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a29      	ldr	r2, [pc, #164]	; (8007260 <TIM_Base_SetConfig+0x124>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <TIM_Base_SetConfig+0x128>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <TIM_Base_SetConfig+0x12c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_Base_SetConfig+0x9a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a26      	ldr	r2, [pc, #152]	; (800726c <TIM_Base_SetConfig+0x130>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a10      	ldr	r2, [pc, #64]	; (8007250 <TIM_Base_SetConfig+0x114>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00f      	beq.n	8007234 <TIM_Base_SetConfig+0xf8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a12      	ldr	r2, [pc, #72]	; (8007260 <TIM_Base_SetConfig+0x124>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00b      	beq.n	8007234 <TIM_Base_SetConfig+0xf8>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a11      	ldr	r2, [pc, #68]	; (8007264 <TIM_Base_SetConfig+0x128>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d007      	beq.n	8007234 <TIM_Base_SetConfig+0xf8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a10      	ldr	r2, [pc, #64]	; (8007268 <TIM_Base_SetConfig+0x12c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_Base_SetConfig+0xf8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a0f      	ldr	r2, [pc, #60]	; (800726c <TIM_Base_SetConfig+0x130>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d103      	bne.n	800723c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	615a      	str	r2, [r3, #20]
}
 8007242:	bf00      	nop
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40000400 	.word	0x40000400
 8007258:	40000800 	.word	0x40000800
 800725c:	40000c00 	.word	0x40000c00
 8007260:	40013400 	.word	0x40013400
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f023 0201 	bic.w	r2, r3, #1
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f023 0302 	bic.w	r3, r3, #2
 80072bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a2c      	ldr	r2, [pc, #176]	; (800737c <TIM_OC1_SetConfig+0x10c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00f      	beq.n	80072f0 <TIM_OC1_SetConfig+0x80>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a2b      	ldr	r2, [pc, #172]	; (8007380 <TIM_OC1_SetConfig+0x110>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00b      	beq.n	80072f0 <TIM_OC1_SetConfig+0x80>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <TIM_OC1_SetConfig+0x114>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d007      	beq.n	80072f0 <TIM_OC1_SetConfig+0x80>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a29      	ldr	r2, [pc, #164]	; (8007388 <TIM_OC1_SetConfig+0x118>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_OC1_SetConfig+0x80>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a28      	ldr	r2, [pc, #160]	; (800738c <TIM_OC1_SetConfig+0x11c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10c      	bne.n	800730a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0308 	bic.w	r3, r3, #8
 80072f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a1b      	ldr	r2, [pc, #108]	; (800737c <TIM_OC1_SetConfig+0x10c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00f      	beq.n	8007332 <TIM_OC1_SetConfig+0xc2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a1a      	ldr	r2, [pc, #104]	; (8007380 <TIM_OC1_SetConfig+0x110>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00b      	beq.n	8007332 <TIM_OC1_SetConfig+0xc2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a19      	ldr	r2, [pc, #100]	; (8007384 <TIM_OC1_SetConfig+0x114>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <TIM_OC1_SetConfig+0xc2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a18      	ldr	r2, [pc, #96]	; (8007388 <TIM_OC1_SetConfig+0x118>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d003      	beq.n	8007332 <TIM_OC1_SetConfig+0xc2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a17      	ldr	r2, [pc, #92]	; (800738c <TIM_OC1_SetConfig+0x11c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d111      	bne.n	8007356 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	621a      	str	r2, [r3, #32]
}
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40013400 	.word	0x40013400
 8007384:	40014000 	.word	0x40014000
 8007388:	40014400 	.word	0x40014400
 800738c:	40014800 	.word	0x40014800

08007390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f023 0210 	bic.w	r2, r3, #16
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f023 0320 	bic.w	r3, r3, #32
 80073de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a28      	ldr	r2, [pc, #160]	; (8007490 <TIM_OC2_SetConfig+0x100>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d003      	beq.n	80073fc <TIM_OC2_SetConfig+0x6c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a27      	ldr	r2, [pc, #156]	; (8007494 <TIM_OC2_SetConfig+0x104>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d10d      	bne.n	8007418 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a1d      	ldr	r2, [pc, #116]	; (8007490 <TIM_OC2_SetConfig+0x100>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00f      	beq.n	8007440 <TIM_OC2_SetConfig+0xb0>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a1c      	ldr	r2, [pc, #112]	; (8007494 <TIM_OC2_SetConfig+0x104>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00b      	beq.n	8007440 <TIM_OC2_SetConfig+0xb0>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <TIM_OC2_SetConfig+0x108>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d007      	beq.n	8007440 <TIM_OC2_SetConfig+0xb0>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1a      	ldr	r2, [pc, #104]	; (800749c <TIM_OC2_SetConfig+0x10c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <TIM_OC2_SetConfig+0xb0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a19      	ldr	r2, [pc, #100]	; (80074a0 <TIM_OC2_SetConfig+0x110>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d113      	bne.n	8007468 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007446:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800744e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	621a      	str	r2, [r3, #32]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40013400 	.word	0x40013400
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a27      	ldr	r2, [pc, #156]	; (80075a0 <TIM_OC3_SetConfig+0xfc>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_OC3_SetConfig+0x6a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a26      	ldr	r2, [pc, #152]	; (80075a4 <TIM_OC3_SetConfig+0x100>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10d      	bne.n	800752a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a1c      	ldr	r2, [pc, #112]	; (80075a0 <TIM_OC3_SetConfig+0xfc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00f      	beq.n	8007552 <TIM_OC3_SetConfig+0xae>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a1b      	ldr	r2, [pc, #108]	; (80075a4 <TIM_OC3_SetConfig+0x100>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00b      	beq.n	8007552 <TIM_OC3_SetConfig+0xae>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a1a      	ldr	r2, [pc, #104]	; (80075a8 <TIM_OC3_SetConfig+0x104>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <TIM_OC3_SetConfig+0xae>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a19      	ldr	r2, [pc, #100]	; (80075ac <TIM_OC3_SetConfig+0x108>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC3_SetConfig+0xae>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a18      	ldr	r2, [pc, #96]	; (80075b0 <TIM_OC3_SetConfig+0x10c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d113      	bne.n	800757a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40012c00 	.word	0x40012c00
 80075a4:	40013400 	.word	0x40013400
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800

080075b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	031b      	lsls	r3, r3, #12
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a18      	ldr	r2, [pc, #96]	; (8007674 <TIM_OC4_SetConfig+0xc0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d00f      	beq.n	8007638 <TIM_OC4_SetConfig+0x84>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a17      	ldr	r2, [pc, #92]	; (8007678 <TIM_OC4_SetConfig+0xc4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00b      	beq.n	8007638 <TIM_OC4_SetConfig+0x84>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <TIM_OC4_SetConfig+0xc8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d007      	beq.n	8007638 <TIM_OC4_SetConfig+0x84>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a15      	ldr	r2, [pc, #84]	; (8007680 <TIM_OC4_SetConfig+0xcc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d003      	beq.n	8007638 <TIM_OC4_SetConfig+0x84>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a14      	ldr	r2, [pc, #80]	; (8007684 <TIM_OC4_SetConfig+0xd0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d109      	bne.n	800764c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800763e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	019b      	lsls	r3, r3, #6
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40012c00 	.word	0x40012c00
 8007678:	40013400 	.word	0x40013400
 800767c:	40014000 	.word	0x40014000
 8007680:	40014400 	.word	0x40014400
 8007684:	40014800 	.word	0x40014800

08007688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	041b      	lsls	r3, r3, #16
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a17      	ldr	r2, [pc, #92]	; (800773c <TIM_OC5_SetConfig+0xb4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <TIM_OC5_SetConfig+0x7a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <TIM_OC5_SetConfig+0xb8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <TIM_OC5_SetConfig+0x7a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a15      	ldr	r2, [pc, #84]	; (8007744 <TIM_OC5_SetConfig+0xbc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <TIM_OC5_SetConfig+0x7a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <TIM_OC5_SetConfig+0xc0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_OC5_SetConfig+0x7a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a13      	ldr	r2, [pc, #76]	; (800774c <TIM_OC5_SetConfig+0xc4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d109      	bne.n	8007716 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	021b      	lsls	r3, r3, #8
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	621a      	str	r2, [r3, #32]
}
 8007730:	bf00      	nop
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	40012c00 	.word	0x40012c00
 8007740:	40013400 	.word	0x40013400
 8007744:	40014000 	.word	0x40014000
 8007748:	40014400 	.word	0x40014400
 800774c:	40014800 	.word	0x40014800

08007750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800777e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	051b      	lsls	r3, r3, #20
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a18      	ldr	r2, [pc, #96]	; (8007808 <TIM_OC6_SetConfig+0xb8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00f      	beq.n	80077cc <TIM_OC6_SetConfig+0x7c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a17      	ldr	r2, [pc, #92]	; (800780c <TIM_OC6_SetConfig+0xbc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d00b      	beq.n	80077cc <TIM_OC6_SetConfig+0x7c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a16      	ldr	r2, [pc, #88]	; (8007810 <TIM_OC6_SetConfig+0xc0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d007      	beq.n	80077cc <TIM_OC6_SetConfig+0x7c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a15      	ldr	r2, [pc, #84]	; (8007814 <TIM_OC6_SetConfig+0xc4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC6_SetConfig+0x7c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a14      	ldr	r2, [pc, #80]	; (8007818 <TIM_OC6_SetConfig+0xc8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d109      	bne.n	80077e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40012c00 	.word	0x40012c00
 800780c:	40013400 	.word	0x40013400
 8007810:	40014000 	.word	0x40014000
 8007814:	40014400 	.word	0x40014400
 8007818:	40014800 	.word	0x40014800

0800781c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2201      	movs	r2, #1
 8007830:	fa02 f303 	lsl.w	r3, r2, r3
 8007834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a1a      	ldr	r2, [r3, #32]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	43db      	mvns	r3, r3
 800783e:	401a      	ands	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1a      	ldr	r2, [r3, #32]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 031f 	and.w	r3, r3, #31
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	431a      	orrs	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	621a      	str	r2, [r3, #32]
}
 800785a:	bf00      	nop
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800787c:	2302      	movs	r3, #2
 800787e:	e068      	b.n	8007952 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a2e      	ldr	r2, [pc, #184]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a2d      	ldr	r2, [pc, #180]	; (8007964 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d108      	bne.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01d      	beq.n	8007926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f2:	d018      	beq.n	8007926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a1b      	ldr	r2, [pc, #108]	; (8007968 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d013      	beq.n	8007926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1a      	ldr	r2, [pc, #104]	; (800796c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00e      	beq.n	8007926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a18      	ldr	r2, [pc, #96]	; (8007970 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d009      	beq.n	8007926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a13      	ldr	r2, [pc, #76]	; (8007964 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d004      	beq.n	8007926 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a14      	ldr	r2, [pc, #80]	; (8007974 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d10c      	bne.n	8007940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800792c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	4313      	orrs	r3, r2
 8007936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40013400 	.word	0x40013400
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800
 8007970:	40000c00 	.word	0x40000c00
 8007974:	40014000 	.word	0x40014000

08007978 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007990:	2302      	movs	r3, #2
 8007992:	e065      	b.n	8007a60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a16      	ldr	r2, [pc, #88]	; (8007a6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d115      	bne.n	8007a4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	051b      	lsls	r3, r3, #20
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40013400 	.word	0x40013400

08007a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e040      	b.n	8007b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fa feb2 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2224      	movs	r2, #36	; 0x24
 8007adc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0201 	bic.w	r2, r2, #1
 8007aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f8c0 	bl	8007c74 <UART_SetConfig>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e022      	b.n	8007b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fb3e 	bl	8008188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0201 	orr.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fbc5 	bl	80082cc <UART_CheckIdleState>
 8007b42:	4603      	mov	r3, r0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	f040 8082 	bne.w	8007c6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_UART_Transmit+0x26>
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e07a      	b.n	8007c6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_UART_Transmit+0x38>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e073      	b.n	8007c6c <HAL_UART_Transmit+0x120>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2221      	movs	r2, #33	; 0x21
 8007b98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b9a:	f7fb f85d 	bl	8002c58 <HAL_GetTick>
 8007b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	88fa      	ldrh	r2, [r7, #6]
 8007ba4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	88fa      	ldrh	r2, [r7, #6]
 8007bac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb8:	d108      	bne.n	8007bcc <HAL_UART_Transmit+0x80>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d104      	bne.n	8007bcc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	61bb      	str	r3, [r7, #24]
 8007bca:	e003      	b.n	8007bd4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007bdc:	e02d      	b.n	8007c3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2200      	movs	r2, #0
 8007be6:	2180      	movs	r1, #128	; 0x80
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fbb8 	bl	800835e <UART_WaitOnFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e039      	b.n	8007c6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10b      	bne.n	8007c16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	881a      	ldrh	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c0a:	b292      	uxth	r2, r2
 8007c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	3302      	adds	r3, #2
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	e008      	b.n	8007c28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	781a      	ldrb	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	3301      	adds	r3, #1
 8007c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1cb      	bne.n	8007bde <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2140      	movs	r1, #64	; 0x40
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fb84 	bl	800835e <UART_WaitOnFlagUntilTimeout>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e005      	b.n	8007c6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2220      	movs	r2, #32
 8007c64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e000      	b.n	8007c6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007c6a:	2302      	movs	r3, #2
  }
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3720      	adds	r7, #32
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c74:	b5b0      	push	{r4, r5, r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4bad      	ldr	r3, [pc, #692]	; (8007f54 <UART_SetConfig+0x2e0>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	69f9      	ldr	r1, [r7, #28]
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4aa2      	ldr	r2, [pc, #648]	; (8007f58 <UART_SetConfig+0x2e4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d004      	beq.n	8007cdc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a99      	ldr	r2, [pc, #612]	; (8007f5c <UART_SetConfig+0x2e8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d121      	bne.n	8007d3e <UART_SetConfig+0xca>
 8007cfa:	4b99      	ldr	r3, [pc, #612]	; (8007f60 <UART_SetConfig+0x2ec>)
 8007cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d817      	bhi.n	8007d38 <UART_SetConfig+0xc4>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <UART_SetConfig+0x9c>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007d2d 	.word	0x08007d2d
 8007d18:	08007d27 	.word	0x08007d27
 8007d1c:	08007d33 	.word	0x08007d33
 8007d20:	2301      	movs	r3, #1
 8007d22:	76fb      	strb	r3, [r7, #27]
 8007d24:	e0e7      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007d26:	2302      	movs	r3, #2
 8007d28:	76fb      	strb	r3, [r7, #27]
 8007d2a:	e0e4      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	76fb      	strb	r3, [r7, #27]
 8007d30:	e0e1      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007d32:	2308      	movs	r3, #8
 8007d34:	76fb      	strb	r3, [r7, #27]
 8007d36:	e0de      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	76fb      	strb	r3, [r7, #27]
 8007d3c:	e0db      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a88      	ldr	r2, [pc, #544]	; (8007f64 <UART_SetConfig+0x2f0>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d132      	bne.n	8007dae <UART_SetConfig+0x13a>
 8007d48:	4b85      	ldr	r3, [pc, #532]	; (8007f60 <UART_SetConfig+0x2ec>)
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4e:	f003 030c 	and.w	r3, r3, #12
 8007d52:	2b0c      	cmp	r3, #12
 8007d54:	d828      	bhi.n	8007da8 <UART_SetConfig+0x134>
 8007d56:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <UART_SetConfig+0xe8>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007d91 	.word	0x08007d91
 8007d60:	08007da9 	.word	0x08007da9
 8007d64:	08007da9 	.word	0x08007da9
 8007d68:	08007da9 	.word	0x08007da9
 8007d6c:	08007d9d 	.word	0x08007d9d
 8007d70:	08007da9 	.word	0x08007da9
 8007d74:	08007da9 	.word	0x08007da9
 8007d78:	08007da9 	.word	0x08007da9
 8007d7c:	08007d97 	.word	0x08007d97
 8007d80:	08007da9 	.word	0x08007da9
 8007d84:	08007da9 	.word	0x08007da9
 8007d88:	08007da9 	.word	0x08007da9
 8007d8c:	08007da3 	.word	0x08007da3
 8007d90:	2300      	movs	r3, #0
 8007d92:	76fb      	strb	r3, [r7, #27]
 8007d94:	e0af      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007d96:	2302      	movs	r3, #2
 8007d98:	76fb      	strb	r3, [r7, #27]
 8007d9a:	e0ac      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	76fb      	strb	r3, [r7, #27]
 8007da0:	e0a9      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007da2:	2308      	movs	r3, #8
 8007da4:	76fb      	strb	r3, [r7, #27]
 8007da6:	e0a6      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007da8:	2310      	movs	r3, #16
 8007daa:	76fb      	strb	r3, [r7, #27]
 8007dac:	e0a3      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a6d      	ldr	r2, [pc, #436]	; (8007f68 <UART_SetConfig+0x2f4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d120      	bne.n	8007dfa <UART_SetConfig+0x186>
 8007db8:	4b69      	ldr	r3, [pc, #420]	; (8007f60 <UART_SetConfig+0x2ec>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007dc2:	2b30      	cmp	r3, #48	; 0x30
 8007dc4:	d013      	beq.n	8007dee <UART_SetConfig+0x17a>
 8007dc6:	2b30      	cmp	r3, #48	; 0x30
 8007dc8:	d814      	bhi.n	8007df4 <UART_SetConfig+0x180>
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d009      	beq.n	8007de2 <UART_SetConfig+0x16e>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d810      	bhi.n	8007df4 <UART_SetConfig+0x180>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <UART_SetConfig+0x168>
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d006      	beq.n	8007de8 <UART_SetConfig+0x174>
 8007dda:	e00b      	b.n	8007df4 <UART_SetConfig+0x180>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	76fb      	strb	r3, [r7, #27]
 8007de0:	e089      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007de2:	2302      	movs	r3, #2
 8007de4:	76fb      	strb	r3, [r7, #27]
 8007de6:	e086      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007de8:	2304      	movs	r3, #4
 8007dea:	76fb      	strb	r3, [r7, #27]
 8007dec:	e083      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007dee:	2308      	movs	r3, #8
 8007df0:	76fb      	strb	r3, [r7, #27]
 8007df2:	e080      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007df4:	2310      	movs	r3, #16
 8007df6:	76fb      	strb	r3, [r7, #27]
 8007df8:	e07d      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a5b      	ldr	r2, [pc, #364]	; (8007f6c <UART_SetConfig+0x2f8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d120      	bne.n	8007e46 <UART_SetConfig+0x1d2>
 8007e04:	4b56      	ldr	r3, [pc, #344]	; (8007f60 <UART_SetConfig+0x2ec>)
 8007e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e10:	d013      	beq.n	8007e3a <UART_SetConfig+0x1c6>
 8007e12:	2bc0      	cmp	r3, #192	; 0xc0
 8007e14:	d814      	bhi.n	8007e40 <UART_SetConfig+0x1cc>
 8007e16:	2b80      	cmp	r3, #128	; 0x80
 8007e18:	d009      	beq.n	8007e2e <UART_SetConfig+0x1ba>
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	d810      	bhi.n	8007e40 <UART_SetConfig+0x1cc>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d002      	beq.n	8007e28 <UART_SetConfig+0x1b4>
 8007e22:	2b40      	cmp	r3, #64	; 0x40
 8007e24:	d006      	beq.n	8007e34 <UART_SetConfig+0x1c0>
 8007e26:	e00b      	b.n	8007e40 <UART_SetConfig+0x1cc>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	76fb      	strb	r3, [r7, #27]
 8007e2c:	e063      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	76fb      	strb	r3, [r7, #27]
 8007e32:	e060      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e34:	2304      	movs	r3, #4
 8007e36:	76fb      	strb	r3, [r7, #27]
 8007e38:	e05d      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	76fb      	strb	r3, [r7, #27]
 8007e3e:	e05a      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e40:	2310      	movs	r3, #16
 8007e42:	76fb      	strb	r3, [r7, #27]
 8007e44:	e057      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a49      	ldr	r2, [pc, #292]	; (8007f70 <UART_SetConfig+0x2fc>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d125      	bne.n	8007e9c <UART_SetConfig+0x228>
 8007e50:	4b43      	ldr	r3, [pc, #268]	; (8007f60 <UART_SetConfig+0x2ec>)
 8007e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e5e:	d017      	beq.n	8007e90 <UART_SetConfig+0x21c>
 8007e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e64:	d817      	bhi.n	8007e96 <UART_SetConfig+0x222>
 8007e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6a:	d00b      	beq.n	8007e84 <UART_SetConfig+0x210>
 8007e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e70:	d811      	bhi.n	8007e96 <UART_SetConfig+0x222>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <UART_SetConfig+0x20a>
 8007e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7a:	d006      	beq.n	8007e8a <UART_SetConfig+0x216>
 8007e7c:	e00b      	b.n	8007e96 <UART_SetConfig+0x222>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	76fb      	strb	r3, [r7, #27]
 8007e82:	e038      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e84:	2302      	movs	r3, #2
 8007e86:	76fb      	strb	r3, [r7, #27]
 8007e88:	e035      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e8a:	2304      	movs	r3, #4
 8007e8c:	76fb      	strb	r3, [r7, #27]
 8007e8e:	e032      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e90:	2308      	movs	r3, #8
 8007e92:	76fb      	strb	r3, [r7, #27]
 8007e94:	e02f      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e96:	2310      	movs	r3, #16
 8007e98:	76fb      	strb	r3, [r7, #27]
 8007e9a:	e02c      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a2d      	ldr	r2, [pc, #180]	; (8007f58 <UART_SetConfig+0x2e4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d125      	bne.n	8007ef2 <UART_SetConfig+0x27e>
 8007ea6:	4b2e      	ldr	r3, [pc, #184]	; (8007f60 <UART_SetConfig+0x2ec>)
 8007ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007eb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007eb4:	d017      	beq.n	8007ee6 <UART_SetConfig+0x272>
 8007eb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007eba:	d817      	bhi.n	8007eec <UART_SetConfig+0x278>
 8007ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec0:	d00b      	beq.n	8007eda <UART_SetConfig+0x266>
 8007ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec6:	d811      	bhi.n	8007eec <UART_SetConfig+0x278>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <UART_SetConfig+0x260>
 8007ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed0:	d006      	beq.n	8007ee0 <UART_SetConfig+0x26c>
 8007ed2:	e00b      	b.n	8007eec <UART_SetConfig+0x278>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	76fb      	strb	r3, [r7, #27]
 8007ed8:	e00d      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007eda:	2302      	movs	r3, #2
 8007edc:	76fb      	strb	r3, [r7, #27]
 8007ede:	e00a      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	76fb      	strb	r3, [r7, #27]
 8007ee4:	e007      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	76fb      	strb	r3, [r7, #27]
 8007eea:	e004      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007eec:	2310      	movs	r3, #16
 8007eee:	76fb      	strb	r3, [r7, #27]
 8007ef0:	e001      	b.n	8007ef6 <UART_SetConfig+0x282>
 8007ef2:	2310      	movs	r3, #16
 8007ef4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a17      	ldr	r2, [pc, #92]	; (8007f58 <UART_SetConfig+0x2e4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	f040 8087 	bne.w	8008010 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f02:	7efb      	ldrb	r3, [r7, #27]
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d837      	bhi.n	8007f78 <UART_SetConfig+0x304>
 8007f08:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <UART_SetConfig+0x29c>)
 8007f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0e:	bf00      	nop
 8007f10:	08007f35 	.word	0x08007f35
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f79 	.word	0x08007f79
 8007f20:	08007f43 	.word	0x08007f43
 8007f24:	08007f79 	.word	0x08007f79
 8007f28:	08007f79 	.word	0x08007f79
 8007f2c:	08007f79 	.word	0x08007f79
 8007f30:	08007f4b 	.word	0x08007f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f34:	f7fd f97c 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8007f38:	6178      	str	r0, [r7, #20]
        break;
 8007f3a:	e022      	b.n	8007f82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <UART_SetConfig+0x300>)
 8007f3e:	617b      	str	r3, [r7, #20]
        break;
 8007f40:	e01f      	b.n	8007f82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f42:	f7fd f8dd 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8007f46:	6178      	str	r0, [r7, #20]
        break;
 8007f48:	e01b      	b.n	8007f82 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f4e:	617b      	str	r3, [r7, #20]
        break;
 8007f50:	e017      	b.n	8007f82 <UART_SetConfig+0x30e>
 8007f52:	bf00      	nop
 8007f54:	efff69f3 	.word	0xefff69f3
 8007f58:	40008000 	.word	0x40008000
 8007f5c:	40013800 	.word	0x40013800
 8007f60:	40021000 	.word	0x40021000
 8007f64:	40004400 	.word	0x40004400
 8007f68:	40004800 	.word	0x40004800
 8007f6c:	40004c00 	.word	0x40004c00
 8007f70:	40005000 	.word	0x40005000
 8007f74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	76bb      	strb	r3, [r7, #26]
        break;
 8007f80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 80f1 	beq.w	800816c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	4413      	add	r3, r2
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d305      	bcc.n	8007fa6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d902      	bls.n	8007fac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	76bb      	strb	r3, [r7, #26]
 8007faa:	e0df      	b.n	800816c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f04f 0100 	mov.w	r1, #0
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	020b      	lsls	r3, r1, #8
 8007fbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fc2:	0202      	lsls	r2, r0, #8
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	6849      	ldr	r1, [r1, #4]
 8007fc8:	0849      	lsrs	r1, r1, #1
 8007fca:	4608      	mov	r0, r1
 8007fcc:	f04f 0100 	mov.w	r1, #0
 8007fd0:	1814      	adds	r4, r2, r0
 8007fd2:	eb43 0501 	adc.w	r5, r3, r1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	f7f8 fd6a 	bl	8000abc <__aeabi_uldivmod>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4613      	mov	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ff6:	d308      	bcc.n	800800a <UART_SetConfig+0x396>
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ffe:	d204      	bcs.n	800800a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	60da      	str	r2, [r3, #12]
 8008008:	e0b0      	b.n	800816c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	76bb      	strb	r3, [r7, #26]
 800800e:	e0ad      	b.n	800816c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008018:	d15c      	bne.n	80080d4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800801a:	7efb      	ldrb	r3, [r7, #27]
 800801c:	2b08      	cmp	r3, #8
 800801e:	d828      	bhi.n	8008072 <UART_SetConfig+0x3fe>
 8008020:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <UART_SetConfig+0x3b4>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008055 	.word	0x08008055
 8008030:	0800805d 	.word	0x0800805d
 8008034:	08008073 	.word	0x08008073
 8008038:	08008063 	.word	0x08008063
 800803c:	08008073 	.word	0x08008073
 8008040:	08008073 	.word	0x08008073
 8008044:	08008073 	.word	0x08008073
 8008048:	0800806b 	.word	0x0800806b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800804c:	f7fd f8f0 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8008050:	6178      	str	r0, [r7, #20]
        break;
 8008052:	e013      	b.n	800807c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008054:	f7fd f902 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8008058:	6178      	str	r0, [r7, #20]
        break;
 800805a:	e00f      	b.n	800807c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800805c:	4b49      	ldr	r3, [pc, #292]	; (8008184 <UART_SetConfig+0x510>)
 800805e:	617b      	str	r3, [r7, #20]
        break;
 8008060:	e00c      	b.n	800807c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008062:	f7fd f84d 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 8008066:	6178      	str	r0, [r7, #20]
        break;
 8008068:	e008      	b.n	800807c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800806a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800806e:	617b      	str	r3, [r7, #20]
        break;
 8008070:	e004      	b.n	800807c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	76bb      	strb	r3, [r7, #26]
        break;
 800807a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d074      	beq.n	800816c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	005a      	lsls	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	441a      	add	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	fbb2 f3f3 	udiv	r3, r2, r3
 8008096:	b29b      	uxth	r3, r3
 8008098:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	2b0f      	cmp	r3, #15
 800809e:	d916      	bls.n	80080ce <UART_SetConfig+0x45a>
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a6:	d212      	bcs.n	80080ce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f023 030f 	bic.w	r3, r3, #15
 80080b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	b29a      	uxth	r2, r3
 80080be:	89fb      	ldrh	r3, [r7, #14]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	89fa      	ldrh	r2, [r7, #14]
 80080ca:	60da      	str	r2, [r3, #12]
 80080cc:	e04e      	b.n	800816c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	76bb      	strb	r3, [r7, #26]
 80080d2:	e04b      	b.n	800816c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080d4:	7efb      	ldrb	r3, [r7, #27]
 80080d6:	2b08      	cmp	r3, #8
 80080d8:	d827      	bhi.n	800812a <UART_SetConfig+0x4b6>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <UART_SetConfig+0x46c>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	08008105 	.word	0x08008105
 80080e4:	0800810d 	.word	0x0800810d
 80080e8:	08008115 	.word	0x08008115
 80080ec:	0800812b 	.word	0x0800812b
 80080f0:	0800811b 	.word	0x0800811b
 80080f4:	0800812b 	.word	0x0800812b
 80080f8:	0800812b 	.word	0x0800812b
 80080fc:	0800812b 	.word	0x0800812b
 8008100:	08008123 	.word	0x08008123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008104:	f7fd f894 	bl	8005230 <HAL_RCC_GetPCLK1Freq>
 8008108:	6178      	str	r0, [r7, #20]
        break;
 800810a:	e013      	b.n	8008134 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800810c:	f7fd f8a6 	bl	800525c <HAL_RCC_GetPCLK2Freq>
 8008110:	6178      	str	r0, [r7, #20]
        break;
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008114:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <UART_SetConfig+0x510>)
 8008116:	617b      	str	r3, [r7, #20]
        break;
 8008118:	e00c      	b.n	8008134 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800811a:	f7fc fff1 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 800811e:	6178      	str	r0, [r7, #20]
        break;
 8008120:	e008      	b.n	8008134 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008126:	617b      	str	r3, [r7, #20]
        break;
 8008128:	e004      	b.n	8008134 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	76bb      	strb	r3, [r7, #26]
        break;
 8008132:	bf00      	nop
    }

    if (pclk != 0U)
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d018      	beq.n	800816c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	085a      	lsrs	r2, r3, #1
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	441a      	add	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	fbb2 f3f3 	udiv	r3, r2, r3
 800814c:	b29b      	uxth	r3, r3
 800814e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2b0f      	cmp	r3, #15
 8008154:	d908      	bls.n	8008168 <UART_SetConfig+0x4f4>
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815c:	d204      	bcs.n	8008168 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	60da      	str	r2, [r3, #12]
 8008166:	e001      	b.n	800816c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008178:	7ebb      	ldrb	r3, [r7, #26]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bdb0      	pop	{r4, r5, r7, pc}
 8008182:	bf00      	nop
 8008184:	00f42400 	.word	0x00f42400

08008188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01a      	beq.n	800829e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008286:	d10a      	bne.n	800829e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00a      	beq.n	80082c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	430a      	orrs	r2, r1
 80082be:	605a      	str	r2, [r3, #4]
  }
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082dc:	f7fa fcbc 	bl	8002c58 <HAL_GetTick>
 80082e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d10e      	bne.n	800830e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f82d 	bl	800835e <UART_WaitOnFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e023      	b.n	8008356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b04      	cmp	r3, #4
 800831a:	d10e      	bne.n	800833a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800831c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f817 	bl	800835e <UART_WaitOnFlagUntilTimeout>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e00d      	b.n	8008356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	603b      	str	r3, [r7, #0]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800836e:	e05e      	b.n	800842e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008376:	d05a      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008378:	f7fa fc6e 	bl	8002c58 <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	429a      	cmp	r2, r3
 8008386:	d302      	bcc.n	800838e <UART_WaitOnFlagUntilTimeout+0x30>
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d11b      	bne.n	80083c6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800839c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2220      	movs	r2, #32
 80083b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e043      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d02c      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e2:	d124      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ec:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80083fc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689a      	ldr	r2, [r3, #8]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 0201 	bic.w	r2, r2, #1
 800840c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2220      	movs	r2, #32
 8008412:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e00f      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4013      	ands	r3, r2
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	429a      	cmp	r2, r3
 800844a:	d091      	beq.n	8008370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800845c:	4904      	ldr	r1, [pc, #16]	; (8008470 <MX_FATFS_Init+0x18>)
 800845e:	4805      	ldr	r0, [pc, #20]	; (8008474 <MX_FATFS_Init+0x1c>)
 8008460:	f002 ff6c 	bl	800b33c <FATFS_LinkDriver>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	4b03      	ldr	r3, [pc, #12]	; (8008478 <MX_FATFS_Init+0x20>)
 800846a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800846c:	bf00      	nop
 800846e:	bd80      	pop	{r7, pc}
 8008470:	2000e5a0 	.word	0x2000e5a0
 8008474:	20000160 	.word	0x20000160
 8008478:	2000e5a4 	.word	0x2000e5a4

0800847c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008480:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008482:	4618      	mov	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	4618      	mov	r0, r3
 800849a:	f7f8 fe3f 	bl	800111c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800849e:	bf00      	nop
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f8 ff17 	bl	80012e8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 80084ba:	bf00      	nop
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 80084d4:	7bf8      	ldrb	r0, [r7, #15]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	f7f8 ff1a 	bl	8001314 <SD_disk_read>
  /* USER CODE END READ */
}
 80084e0:	bf00      	nop
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 80084fa:	7bf8      	ldrb	r0, [r7, #15]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68b9      	ldr	r1, [r7, #8]
 8008502:	f7f8 ff71 	bl	80013e8 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8008506:	bf00      	nop
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	4603      	mov	r3, r0
 8008518:	603a      	str	r2, [r7, #0]
 800851a:	71fb      	strb	r3, [r7, #7]
 800851c:	460b      	mov	r3, r1
 800851e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	79b9      	ldrb	r1, [r7, #6]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7f8 ffe2 	bl	80014f0 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800852c:	bf00      	nop
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	4a08      	ldr	r2, [pc, #32]	; (8008568 <disk_status+0x30>)
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	79fa      	ldrb	r2, [r7, #7]
 8008550:	4905      	ldr	r1, [pc, #20]	; (8008568 <disk_status+0x30>)
 8008552:	440a      	add	r2, r1
 8008554:	7a12      	ldrb	r2, [r2, #8]
 8008556:	4610      	mov	r0, r2
 8008558:	4798      	blx	r3
 800855a:	4603      	mov	r3, r0
 800855c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	2000022c 	.word	0x2000022c

0800856c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800857a:	79fb      	ldrb	r3, [r7, #7]
 800857c:	4a0d      	ldr	r2, [pc, #52]	; (80085b4 <disk_initialize+0x48>)
 800857e:	5cd3      	ldrb	r3, [r2, r3]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d111      	bne.n	80085a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	4a0b      	ldr	r2, [pc, #44]	; (80085b4 <disk_initialize+0x48>)
 8008588:	2101      	movs	r1, #1
 800858a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	4a09      	ldr	r2, [pc, #36]	; (80085b4 <disk_initialize+0x48>)
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	79fa      	ldrb	r2, [r7, #7]
 800859a:	4906      	ldr	r1, [pc, #24]	; (80085b4 <disk_initialize+0x48>)
 800859c:	440a      	add	r2, r1
 800859e:	7a12      	ldrb	r2, [r2, #8]
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	4603      	mov	r3, r0
 80085a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	2000022c 	.word	0x2000022c

080085b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80085b8:	b590      	push	{r4, r7, lr}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <disk_read+0x3c>)
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	689c      	ldr	r4, [r3, #8]
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	4a07      	ldr	r2, [pc, #28]	; (80085f4 <disk_read+0x3c>)
 80085d8:	4413      	add	r3, r2
 80085da:	7a18      	ldrb	r0, [r3, #8]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	68b9      	ldr	r1, [r7, #8]
 80085e2:	47a0      	blx	r4
 80085e4:	4603      	mov	r3, r0
 80085e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	371c      	adds	r7, #28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd90      	pop	{r4, r7, pc}
 80085f2:	bf00      	nop
 80085f4:	2000022c 	.word	0x2000022c

080085f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	4a0a      	ldr	r2, [pc, #40]	; (8008634 <disk_write+0x3c>)
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	68dc      	ldr	r4, [r3, #12]
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	4a07      	ldr	r2, [pc, #28]	; (8008634 <disk_write+0x3c>)
 8008618:	4413      	add	r3, r2
 800861a:	7a18      	ldrb	r0, [r3, #8]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	47a0      	blx	r4
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]
  return res;
 8008628:	7dfb      	ldrb	r3, [r7, #23]
}
 800862a:	4618      	mov	r0, r3
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	bd90      	pop	{r4, r7, pc}
 8008632:	bf00      	nop
 8008634:	2000022c 	.word	0x2000022c

08008638 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	603a      	str	r2, [r7, #0]
 8008642:	71fb      	strb	r3, [r7, #7]
 8008644:	460b      	mov	r3, r1
 8008646:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	4a09      	ldr	r2, [pc, #36]	; (8008670 <disk_ioctl+0x38>)
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	79fa      	ldrb	r2, [r7, #7]
 8008656:	4906      	ldr	r1, [pc, #24]	; (8008670 <disk_ioctl+0x38>)
 8008658:	440a      	add	r2, r1
 800865a:	7a10      	ldrb	r0, [r2, #8]
 800865c:	79b9      	ldrb	r1, [r7, #6]
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4798      	blx	r3
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
  return res;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	2000022c 	.word	0x2000022c

08008674 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3301      	adds	r3, #1
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	b21a      	sxth	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	b21b      	sxth	r3, r3
 8008690:	4313      	orrs	r3, r2
 8008692:	b21b      	sxth	r3, r3
 8008694:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008696:	89fb      	ldrh	r3, [r7, #14]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3303      	adds	r3, #3
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	3202      	adds	r2, #2
 80086bc:	7812      	ldrb	r2, [r2, #0]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	3201      	adds	r2, #1
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7812      	ldrb	r2, [r2, #0]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
	return rv;
 80086dc:	68fb      	ldr	r3, [r7, #12]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	887a      	ldrh	r2, [r7, #2]
 80086fe:	b2d2      	uxtb	r2, r2
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	887b      	ldrh	r3, [r7, #2]
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	887a      	ldrh	r2, [r7, #2]
 8008710:	b2d2      	uxtb	r2, r2
 8008712:	701a      	strb	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	0a1b      	lsrs	r3, r3, #8
 800873a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	0a1b      	lsrs	r3, r3, #8
 800874c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	0a1b      	lsrs	r3, r3, #8
 800875e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	701a      	strb	r2, [r3, #0]
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00d      	beq.n	80087ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	1c53      	adds	r3, r2, #1
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	1c59      	adds	r1, r3, #1
 800879c:	6179      	str	r1, [r7, #20]
 800879e:	7812      	ldrb	r2, [r2, #0]
 80087a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	607b      	str	r3, [r7, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1f1      	bne.n	8008792 <mem_cpy+0x1a>
	}
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80087ba:	b480      	push	{r7}
 80087bc:	b087      	sub	sp, #28
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	617a      	str	r2, [r7, #20]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3b01      	subs	r3, #1
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1f3      	bne.n	80087ca <mem_set+0x10>
}
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	371c      	adds	r7, #28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80087f0:	b480      	push	{r7}
 80087f2:	b089      	sub	sp, #36	; 0x24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	61fa      	str	r2, [r7, #28]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	4619      	mov	r1, r3
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	61ba      	str	r2, [r7, #24]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	1acb      	subs	r3, r1, r3
 800881c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3b01      	subs	r3, #1
 8008822:	607b      	str	r3, [r7, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <mem_cmp+0x40>
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0eb      	beq.n	8008808 <mem_cmp+0x18>

	return r;
 8008830:	697b      	ldr	r3, [r7, #20]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3724      	adds	r7, #36	; 0x24
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008848:	e002      	b.n	8008850 <chk_chr+0x12>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3301      	adds	r3, #1
 800884e:	607b      	str	r3, [r7, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <chk_chr+0x26>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	461a      	mov	r2, r3
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	4293      	cmp	r3, r2
 8008862:	d1f2      	bne.n	800884a <chk_chr+0xc>
	return *str;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	781b      	ldrb	r3, [r3, #0]
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d009      	beq.n	8008896 <lock_fs+0x22>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	4618      	mov	r0, r3
 8008888:	f002 fe55 	bl	800b536 <ff_req_grant>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <lock_fs+0x22>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <lock_fs+0x24>
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00d      	beq.n	80088ce <unlock_fs+0x2e>
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	2b0c      	cmp	r3, #12
 80088b6:	d00a      	beq.n	80088ce <unlock_fs+0x2e>
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	2b0b      	cmp	r3, #11
 80088bc:	d007      	beq.n	80088ce <unlock_fs+0x2e>
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	2b0f      	cmp	r3, #15
 80088c2:	d004      	beq.n	80088ce <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 fe49 	bl	800b560 <ff_rel_grant>
	}
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088e2:	2300      	movs	r3, #0
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	e029      	b.n	8008940 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80088ec:	4a27      	ldr	r2, [pc, #156]	; (800898c <chk_lock+0xb4>)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	011b      	lsls	r3, r3, #4
 80088f2:	4413      	add	r3, r2
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01d      	beq.n	8008936 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088fa:	4a24      	ldr	r2, [pc, #144]	; (800898c <chk_lock+0xb4>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	4413      	add	r3, r2
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d116      	bne.n	800893a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800890c:	4a1f      	ldr	r2, [pc, #124]	; (800898c <chk_lock+0xb4>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	4413      	add	r3, r2
 8008914:	3304      	adds	r3, #4
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800891c:	429a      	cmp	r2, r3
 800891e:	d10c      	bne.n	800893a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008920:	4a1a      	ldr	r2, [pc, #104]	; (800898c <chk_lock+0xb4>)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	4413      	add	r3, r2
 8008928:	3308      	adds	r3, #8
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008930:	429a      	cmp	r2, r3
 8008932:	d102      	bne.n	800893a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008934:	e007      	b.n	8008946 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008936:	2301      	movs	r3, #1
 8008938:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3301      	adds	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d9d2      	bls.n	80088ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d109      	bne.n	8008960 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <chk_lock+0x80>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d101      	bne.n	800895c <chk_lock+0x84>
 8008958:	2300      	movs	r3, #0
 800895a:	e010      	b.n	800897e <chk_lock+0xa6>
 800895c:	2312      	movs	r3, #18
 800895e:	e00e      	b.n	800897e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d108      	bne.n	8008978 <chk_lock+0xa0>
 8008966:	4a09      	ldr	r2, [pc, #36]	; (800898c <chk_lock+0xb4>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	4413      	add	r3, r2
 800896e:	330c      	adds	r3, #12
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008976:	d101      	bne.n	800897c <chk_lock+0xa4>
 8008978:	2310      	movs	r3, #16
 800897a:	e000      	b.n	800897e <chk_lock+0xa6>
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	2000020c 	.word	0x2000020c

08008990 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008996:	2300      	movs	r3, #0
 8008998:	607b      	str	r3, [r7, #4]
 800899a:	e002      	b.n	80089a2 <enq_lock+0x12>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3301      	adds	r3, #1
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d806      	bhi.n	80089b6 <enq_lock+0x26>
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <enq_lock+0x40>)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	4413      	add	r3, r2
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f2      	bne.n	800899c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	bf14      	ite	ne
 80089bc:	2301      	movne	r3, #1
 80089be:	2300      	moveq	r3, #0
 80089c0:	b2db      	uxtb	r3, r3
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	2000020c 	.word	0x2000020c

080089d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	e01f      	b.n	8008a24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80089e4:	4a41      	ldr	r2, [pc, #260]	; (8008aec <inc_lock+0x118>)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	4413      	add	r3, r2
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d113      	bne.n	8008a1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80089f6:	4a3d      	ldr	r2, [pc, #244]	; (8008aec <inc_lock+0x118>)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d109      	bne.n	8008a1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008a0a:	4a38      	ldr	r2, [pc, #224]	; (8008aec <inc_lock+0x118>)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	4413      	add	r3, r2
 8008a12:	3308      	adds	r3, #8
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d006      	beq.n	8008a2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d9dc      	bls.n	80089e4 <inc_lock+0x10>
 8008a2a:	e000      	b.n	8008a2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008a2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d132      	bne.n	8008a9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008a34:	2300      	movs	r3, #0
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e002      	b.n	8008a40 <inc_lock+0x6c>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d806      	bhi.n	8008a54 <inc_lock+0x80>
 8008a46:	4a29      	ldr	r2, [pc, #164]	; (8008aec <inc_lock+0x118>)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	4413      	add	r3, r2
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f2      	bne.n	8008a3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d101      	bne.n	8008a5e <inc_lock+0x8a>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e040      	b.n	8008ae0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4922      	ldr	r1, [pc, #136]	; (8008aec <inc_lock+0x118>)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	011b      	lsls	r3, r3, #4
 8008a68:	440b      	add	r3, r1
 8008a6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	491e      	ldr	r1, [pc, #120]	; (8008aec <inc_lock+0x118>)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	440b      	add	r3, r1
 8008a78:	3304      	adds	r3, #4
 8008a7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	695a      	ldr	r2, [r3, #20]
 8008a80:	491a      	ldr	r1, [pc, #104]	; (8008aec <inc_lock+0x118>)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	440b      	add	r3, r1
 8008a88:	3308      	adds	r3, #8
 8008a8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008a8c:	4a17      	ldr	r2, [pc, #92]	; (8008aec <inc_lock+0x118>)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	4413      	add	r3, r2
 8008a94:	330c      	adds	r3, #12
 8008a96:	2200      	movs	r2, #0
 8008a98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <inc_lock+0xe0>
 8008aa0:	4a12      	ldr	r2, [pc, #72]	; (8008aec <inc_lock+0x118>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	4413      	add	r3, r2
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <inc_lock+0xe0>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e015      	b.n	8008ae0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d108      	bne.n	8008acc <inc_lock+0xf8>
 8008aba:	4a0c      	ldr	r2, [pc, #48]	; (8008aec <inc_lock+0x118>)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	4413      	add	r3, r2
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	e001      	b.n	8008ad0 <inc_lock+0xfc>
 8008acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ad0:	4906      	ldr	r1, [pc, #24]	; (8008aec <inc_lock+0x118>)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	011b      	lsls	r3, r3, #4
 8008ad6:	440b      	add	r3, r1
 8008ad8:	330c      	adds	r3, #12
 8008ada:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	2000020c 	.word	0x2000020c

08008af0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d825      	bhi.n	8008b50 <dec_lock+0x60>
		n = Files[i].ctr;
 8008b04:	4a17      	ldr	r2, [pc, #92]	; (8008b64 <dec_lock+0x74>)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	4413      	add	r3, r2
 8008b0c:	330c      	adds	r3, #12
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008b12:	89fb      	ldrh	r3, [r7, #14]
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b18:	d101      	bne.n	8008b1e <dec_lock+0x2e>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008b1e:	89fb      	ldrh	r3, [r7, #14]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <dec_lock+0x3a>
 8008b24:	89fb      	ldrh	r3, [r7, #14]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008b2a:	4a0e      	ldr	r2, [pc, #56]	; (8008b64 <dec_lock+0x74>)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	4413      	add	r3, r2
 8008b32:	330c      	adds	r3, #12
 8008b34:	89fa      	ldrh	r2, [r7, #14]
 8008b36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b38:	89fb      	ldrh	r3, [r7, #14]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d105      	bne.n	8008b4a <dec_lock+0x5a>
 8008b3e:	4a09      	ldr	r2, [pc, #36]	; (8008b64 <dec_lock+0x74>)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	4413      	add	r3, r2
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	737b      	strb	r3, [r7, #13]
 8008b4e:	e001      	b.n	8008b54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b50:	2302      	movs	r3, #2
 8008b52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008b54:	7b7b      	ldrb	r3, [r7, #13]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	2000020c 	.word	0x2000020c

08008b68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	e010      	b.n	8008b98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008b76:	4a0d      	ldr	r2, [pc, #52]	; (8008bac <clear_lock+0x44>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	4413      	add	r3, r2
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d105      	bne.n	8008b92 <clear_lock+0x2a>
 8008b86:	4a09      	ldr	r2, [pc, #36]	; (8008bac <clear_lock+0x44>)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	4413      	add	r3, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3301      	adds	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d9eb      	bls.n	8008b76 <clear_lock+0xe>
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	2000020c 	.word	0x2000020c

08008bb0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	78db      	ldrb	r3, [r3, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d034      	beq.n	8008c2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7858      	ldrb	r0, [r3, #1]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	f7ff fd0e 	bl	80085f8 <disk_write>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
 8008be6:	e022      	b.n	8008c2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d217      	bcs.n	8008c2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	789b      	ldrb	r3, [r3, #2]
 8008c02:	613b      	str	r3, [r7, #16]
 8008c04:	e010      	b.n	8008c28 <sync_window+0x78>
					wsect += fs->fsize;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7858      	ldrb	r0, [r3, #1]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	f7ff fceb 	bl	80085f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d8eb      	bhi.n	8008c06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d01b      	beq.n	8008c88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff ffad 	bl	8008bb0 <sync_window>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d113      	bne.n	8008c88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7858      	ldrb	r0, [r3, #1]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	f7ff fca3 	bl	80085b8 <disk_read>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff ff87 	bl	8008bb0 <sync_window>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d159      	bne.n	8008d60 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d149      	bne.n	8008d48 <sync_fs+0xb4>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	791b      	ldrb	r3, [r3, #4]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d145      	bne.n	8008d48 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	899b      	ldrh	r3, [r3, #12]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	2100      	movs	r1, #0
 8008cca:	f7ff fd76 	bl	80087ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	333c      	adds	r3, #60	; 0x3c
 8008cd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cd6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff fd05 	bl	80086ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	333c      	adds	r3, #60	; 0x3c
 8008ce4:	4921      	ldr	r1, [pc, #132]	; (8008d6c <sync_fs+0xd8>)
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff fd1a 	bl	8008720 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	333c      	adds	r3, #60	; 0x3c
 8008cf0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008cf4:	491e      	ldr	r1, [pc, #120]	; (8008d70 <sync_fs+0xdc>)
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff fd12 	bl	8008720 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	333c      	adds	r3, #60	; 0x3c
 8008d00:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	69db      	ldr	r3, [r3, #28]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f7ff fd08 	bl	8008720 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	333c      	adds	r3, #60	; 0x3c
 8008d14:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7ff fcfe 	bl	8008720 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	1c5a      	adds	r2, r3, #1
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	7858      	ldrb	r0, [r3, #1]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f7ff fc5b 	bl	80085f8 <disk_write>
			fs->fsi_flag = 0;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff fc71 	bl	8008638 <disk_ioctl>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <sync_fs+0xcc>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	41615252 	.word	0x41615252
 8008d70:	61417272 	.word	0x61417272

08008d74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	3b02      	subs	r3, #2
 8008d82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a1b      	ldr	r3, [r3, #32]
 8008d88:	3b02      	subs	r3, #2
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d301      	bcc.n	8008d94 <clust2sect+0x20>
 8008d90:	2300      	movs	r3, #0
 8008d92:	e008      	b.n	8008da6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	895b      	ldrh	r3, [r3, #10]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	fb03 f202 	mul.w	r2, r3, r2
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da4:	4413      	add	r3, r2
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b086      	sub	sp, #24
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d904      	bls.n	8008dd2 <get_fat+0x20>
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d302      	bcc.n	8008dd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	e0bb      	b.n	8008f50 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ddc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	f000 8083 	beq.w	8008eee <get_fat+0x13c>
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	f300 80a7 	bgt.w	8008f3c <get_fat+0x18a>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d002      	beq.n	8008df8 <get_fat+0x46>
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d056      	beq.n	8008ea4 <get_fat+0xf2>
 8008df6:	e0a1      	b.n	8008f3c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	085b      	lsrs	r3, r3, #1
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4413      	add	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	899b      	ldrh	r3, [r3, #12]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e16:	4413      	add	r3, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6938      	ldr	r0, [r7, #16]
 8008e1c:	f7ff ff0c 	bl	8008c38 <move_window>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f040 808d 	bne.w	8008f42 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	60fa      	str	r2, [r7, #12]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	8992      	ldrh	r2, [r2, #12]
 8008e32:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e36:	fb02 f201 	mul.w	r2, r2, r1
 8008e3a:	1a9b      	subs	r3, r3, r2
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e44:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	899b      	ldrh	r3, [r3, #12]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e56:	4413      	add	r3, r2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6938      	ldr	r0, [r7, #16]
 8008e5c:	f7ff feec 	bl	8008c38 <move_window>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d16f      	bne.n	8008f46 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	899b      	ldrh	r3, [r3, #12]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e72:	fb02 f201 	mul.w	r2, r2, r1
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e80:	021b      	lsls	r3, r3, #8
 8008e82:	461a      	mov	r2, r3
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <get_fat+0xe8>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	091b      	lsrs	r3, r3, #4
 8008e98:	e002      	b.n	8008ea0 <get_fat+0xee>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ea0:	617b      	str	r3, [r7, #20]
			break;
 8008ea2:	e055      	b.n	8008f50 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	899b      	ldrh	r3, [r3, #12]
 8008eac:	085b      	lsrs	r3, r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eb8:	4413      	add	r3, r2
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6938      	ldr	r0, [r7, #16]
 8008ebe:	f7ff febb 	bl	8008c38 <move_window>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d140      	bne.n	8008f4a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	8992      	ldrh	r2, [r2, #12]
 8008ed6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008eda:	fb02 f200 	mul.w	r2, r2, r0
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	440b      	add	r3, r1
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fbc6 	bl	8008674 <ld_word>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	617b      	str	r3, [r7, #20]
			break;
 8008eec:	e030      	b.n	8008f50 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	899b      	ldrh	r3, [r3, #12]
 8008ef6:	089b      	lsrs	r3, r3, #2
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	4619      	mov	r1, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f02:	4413      	add	r3, r2
 8008f04:	4619      	mov	r1, r3
 8008f06:	6938      	ldr	r0, [r7, #16]
 8008f08:	f7ff fe96 	bl	8008c38 <move_window>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d11d      	bne.n	8008f4e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	8992      	ldrh	r2, [r2, #12]
 8008f20:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f24:	fb02 f200 	mul.w	r2, r2, r0
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fbb9 	bl	80086a4 <ld_dword>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f38:	617b      	str	r3, [r7, #20]
			break;
 8008f3a:	e009      	b.n	8008f50 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	e006      	b.n	8008f50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f42:	bf00      	nop
 8008f44:	e004      	b.n	8008f50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f46:	bf00      	nop
 8008f48:	e002      	b.n	8008f50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008f4e:	bf00      	nop
		}
	}

	return val;
 8008f50:	697b      	ldr	r3, [r7, #20]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008f5a:	b590      	push	{r4, r7, lr}
 8008f5c:	b089      	sub	sp, #36	; 0x24
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008f66:	2302      	movs	r3, #2
 8008f68:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	f240 8102 	bls.w	8009176 <put_fat+0x21c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	f080 80fc 	bcs.w	8009176 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	f000 80b6 	beq.w	80090f4 <put_fat+0x19a>
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	f300 80fd 	bgt.w	8009188 <put_fat+0x22e>
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d003      	beq.n	8008f9a <put_fat+0x40>
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	f000 8083 	beq.w	800909e <put_fat+0x144>
 8008f98:	e0f6      	b.n	8009188 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	61bb      	str	r3, [r7, #24]
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	085b      	lsrs	r3, r3, #1
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	899b      	ldrh	r3, [r3, #12]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fb8:	4413      	add	r3, r2
 8008fba:	4619      	mov	r1, r3
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff fe3b 	bl	8008c38 <move_window>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008fc6:	7ffb      	ldrb	r3, [r7, #31]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f040 80d6 	bne.w	800917a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	61ba      	str	r2, [r7, #24]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	8992      	ldrh	r2, [r2, #12]
 8008fde:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fe2:	fb02 f200 	mul.w	r2, r2, r0
 8008fe6:	1a9b      	subs	r3, r3, r2
 8008fe8:	440b      	add	r3, r1
 8008fea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00d      	beq.n	8009012 <put_fat+0xb8>
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	b25b      	sxtb	r3, r3
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	b25a      	sxtb	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	b25b      	sxtb	r3, r3
 800900a:	4313      	orrs	r3, r2
 800900c:	b25b      	sxtb	r3, r3
 800900e:	b2db      	uxtb	r3, r3
 8009010:	e001      	b.n	8009016 <put_fat+0xbc>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2201      	movs	r2, #1
 800901e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	899b      	ldrh	r3, [r3, #12]
 8009028:	4619      	mov	r1, r3
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009030:	4413      	add	r3, r2
 8009032:	4619      	mov	r1, r3
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7ff fdff 	bl	8008c38 <move_window>
 800903a:	4603      	mov	r3, r0
 800903c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800903e:	7ffb      	ldrb	r3, [r7, #31]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 809c 	bne.w	800917e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	899b      	ldrh	r3, [r3, #12]
 8009050:	461a      	mov	r2, r3
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	fbb3 f0f2 	udiv	r0, r3, r2
 8009058:	fb02 f200 	mul.w	r2, r2, r0
 800905c:	1a9b      	subs	r3, r3, r2
 800905e:	440b      	add	r3, r1
 8009060:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <put_fat+0x11a>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	091b      	lsrs	r3, r3, #4
 8009070:	b2db      	uxtb	r3, r3
 8009072:	e00e      	b.n	8009092 <put_fat+0x138>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	b25b      	sxtb	r3, r3
 800907a:	f023 030f 	bic.w	r3, r3, #15
 800907e:	b25a      	sxtb	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	0a1b      	lsrs	r3, r3, #8
 8009084:	b25b      	sxtb	r3, r3
 8009086:	f003 030f 	and.w	r3, r3, #15
 800908a:	b25b      	sxtb	r3, r3
 800908c:	4313      	orrs	r3, r2
 800908e:	b25b      	sxtb	r3, r3
 8009090:	b2db      	uxtb	r3, r3
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	70da      	strb	r2, [r3, #3]
			break;
 800909c:	e074      	b.n	8009188 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	899b      	ldrh	r3, [r3, #12]
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	4619      	mov	r1, r3
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80090b2:	4413      	add	r3, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fdbe 	bl	8008c38 <move_window>
 80090bc:	4603      	mov	r3, r0
 80090be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80090c0:	7ffb      	ldrb	r3, [r7, #31]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d15d      	bne.n	8009182 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	8992      	ldrh	r2, [r2, #12]
 80090d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80090d8:	fb02 f200 	mul.w	r2, r2, r0
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	440b      	add	r3, r1
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	b292      	uxth	r2, r2
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff faff 	bl	80086ea <st_word>
			fs->wflag = 1;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2201      	movs	r2, #1
 80090f0:	70da      	strb	r2, [r3, #3]
			break;
 80090f2:	e049      	b.n	8009188 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	899b      	ldrh	r3, [r3, #12]
 80090fc:	089b      	lsrs	r3, r3, #2
 80090fe:	b29b      	uxth	r3, r3
 8009100:	4619      	mov	r1, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	fbb3 f3f1 	udiv	r3, r3, r1
 8009108:	4413      	add	r3, r2
 800910a:	4619      	mov	r1, r3
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff fd93 	bl	8008c38 <move_window>
 8009112:	4603      	mov	r3, r0
 8009114:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009116:	7ffb      	ldrb	r3, [r7, #31]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d134      	bne.n	8009186 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	8992      	ldrh	r2, [r2, #12]
 8009130:	fbb3 f0f2 	udiv	r0, r3, r2
 8009134:	fb02 f200 	mul.w	r2, r2, r0
 8009138:	1a9b      	subs	r3, r3, r2
 800913a:	440b      	add	r3, r1
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fab1 	bl	80086a4 <ld_dword>
 8009142:	4603      	mov	r3, r0
 8009144:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009148:	4323      	orrs	r3, r4
 800914a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	8992      	ldrh	r2, [r2, #12]
 800915a:	fbb3 f0f2 	udiv	r0, r3, r2
 800915e:	fb02 f200 	mul.w	r2, r2, r0
 8009162:	1a9b      	subs	r3, r3, r2
 8009164:	440b      	add	r3, r1
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff fad9 	bl	8008720 <st_dword>
			fs->wflag = 1;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2201      	movs	r2, #1
 8009172:	70da      	strb	r2, [r3, #3]
			break;
 8009174:	e008      	b.n	8009188 <put_fat+0x22e>
		}
	}
 8009176:	bf00      	nop
 8009178:	e006      	b.n	8009188 <put_fat+0x22e>
			if (res != FR_OK) break;
 800917a:	bf00      	nop
 800917c:	e004      	b.n	8009188 <put_fat+0x22e>
			if (res != FR_OK) break;
 800917e:	bf00      	nop
 8009180:	e002      	b.n	8009188 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009182:	bf00      	nop
 8009184:	e000      	b.n	8009188 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009186:	bf00      	nop
	return res;
 8009188:	7ffb      	ldrb	r3, [r7, #31]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3724      	adds	r7, #36	; 0x24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd90      	pop	{r4, r7, pc}

08009192 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b088      	sub	sp, #32
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d904      	bls.n	80091b8 <remove_chain+0x26>
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d301      	bcc.n	80091bc <remove_chain+0x2a>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e04b      	b.n	8009254 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00c      	beq.n	80091dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	69b8      	ldr	r0, [r7, #24]
 80091ca:	f7ff fec6 	bl	8008f5a <put_fat>
 80091ce:	4603      	mov	r3, r0
 80091d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80091d2:	7ffb      	ldrb	r3, [r7, #31]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <remove_chain+0x4a>
 80091d8:	7ffb      	ldrb	r3, [r7, #31]
 80091da:	e03b      	b.n	8009254 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80091dc:	68b9      	ldr	r1, [r7, #8]
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff fde7 	bl	8008db2 <get_fat>
 80091e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d031      	beq.n	8009250 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <remove_chain+0x64>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e02e      	b.n	8009254 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fc:	d101      	bne.n	8009202 <remove_chain+0x70>
 80091fe:	2301      	movs	r3, #1
 8009200:	e028      	b.n	8009254 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009202:	2200      	movs	r2, #0
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	69b8      	ldr	r0, [r7, #24]
 8009208:	f7ff fea7 	bl	8008f5a <put_fat>
 800920c:	4603      	mov	r3, r0
 800920e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009210:	7ffb      	ldrb	r3, [r7, #31]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <remove_chain+0x88>
 8009216:	7ffb      	ldrb	r3, [r7, #31]
 8009218:	e01c      	b.n	8009254 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	69da      	ldr	r2, [r3, #28]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	3b02      	subs	r3, #2
 8009224:	429a      	cmp	r2, r3
 8009226:	d20b      	bcs.n	8009240 <remove_chain+0xae>
			fs->free_clst++;
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	791b      	ldrb	r3, [r3, #4]
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	b2da      	uxtb	r2, r3
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	429a      	cmp	r2, r3
 800924c:	d3c6      	bcc.n	80091dc <remove_chain+0x4a>
 800924e:	e000      	b.n	8009252 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009250:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d004      	beq.n	8009288 <create_chain+0x2c>
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	429a      	cmp	r2, r3
 8009286:	d31b      	bcc.n	80092c0 <create_chain+0x64>
 8009288:	2301      	movs	r3, #1
 800928a:	61bb      	str	r3, [r7, #24]
 800928c:	e018      	b.n	80092c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff fd8e 	bl	8008db2 <get_fat>
 8009296:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d801      	bhi.n	80092a2 <create_chain+0x46>
 800929e:	2301      	movs	r3, #1
 80092a0:	e070      	b.n	8009384 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092a8:	d101      	bne.n	80092ae <create_chain+0x52>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	e06a      	b.n	8009384 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d201      	bcs.n	80092bc <create_chain+0x60>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	e063      	b.n	8009384 <create_chain+0x128>
		scl = clst;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	3301      	adds	r3, #1
 80092c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d307      	bcc.n	80092e4 <create_chain+0x88>
				ncl = 2;
 80092d4:	2302      	movs	r3, #2
 80092d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d901      	bls.n	80092e4 <create_chain+0x88>
 80092e0:	2300      	movs	r3, #0
 80092e2:	e04f      	b.n	8009384 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80092e4:	69f9      	ldr	r1, [r7, #28]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff fd63 	bl	8008db2 <get_fat>
 80092ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00e      	beq.n	8009312 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d003      	beq.n	8009302 <create_chain+0xa6>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009300:	d101      	bne.n	8009306 <create_chain+0xaa>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	e03e      	b.n	8009384 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	429a      	cmp	r2, r3
 800930c:	d1da      	bne.n	80092c4 <create_chain+0x68>
 800930e:	2300      	movs	r3, #0
 8009310:	e038      	b.n	8009384 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009312:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009318:	69f9      	ldr	r1, [r7, #28]
 800931a:	6938      	ldr	r0, [r7, #16]
 800931c:	f7ff fe1d 	bl	8008f5a <put_fat>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d109      	bne.n	800933e <create_chain+0xe2>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d006      	beq.n	800933e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009330:	69fa      	ldr	r2, [r7, #28]
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6938      	ldr	r0, [r7, #16]
 8009336:	f7ff fe10 	bl	8008f5a <put_fat>
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d116      	bne.n	8009372 <create_chain+0x116>
		fs->last_clst = ncl;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	69da      	ldr	r2, [r3, #28]
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	3b02      	subs	r3, #2
 8009354:	429a      	cmp	r2, r3
 8009356:	d804      	bhi.n	8009362 <create_chain+0x106>
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	1e5a      	subs	r2, r3, #1
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	791b      	ldrb	r3, [r3, #4]
 8009366:	f043 0301 	orr.w	r3, r3, #1
 800936a:	b2da      	uxtb	r2, r3
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	711a      	strb	r2, [r3, #4]
 8009370:	e007      	b.n	8009382 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d102      	bne.n	800937e <create_chain+0x122>
 8009378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800937c:	e000      	b.n	8009380 <create_chain+0x124>
 800937e:	2301      	movs	r3, #1
 8009380:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009382:	69fb      	ldr	r3, [r7, #28]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	3304      	adds	r3, #4
 80093a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	899b      	ldrh	r3, [r3, #12]
 80093a8:	461a      	mov	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	8952      	ldrh	r2, [r2, #10]
 80093b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	613a      	str	r2, [r7, #16]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <clmt_clust+0x42>
 80093ca:	2300      	movs	r3, #0
 80093cc:	e010      	b.n	80093f0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d307      	bcc.n	80093e6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	3304      	adds	r3, #4
 80093e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093e4:	e7e9      	b.n	80093ba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80093e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	4413      	add	r3, r2
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	371c      	adds	r7, #28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009412:	d204      	bcs.n	800941e <dir_sdi+0x22>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f003 031f 	and.w	r3, r3, #31
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <dir_sdi+0x26>
		return FR_INT_ERR;
 800941e:	2302      	movs	r3, #2
 8009420:	e071      	b.n	8009506 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <dir_sdi+0x46>
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d902      	bls.n	8009442 <dir_sdi+0x46>
		clst = fs->dirbase;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009440:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10c      	bne.n	8009462 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	095b      	lsrs	r3, r3, #5
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	8912      	ldrh	r2, [r2, #8]
 8009450:	4293      	cmp	r3, r2
 8009452:	d301      	bcc.n	8009458 <dir_sdi+0x5c>
 8009454:	2302      	movs	r3, #2
 8009456:	e056      	b.n	8009506 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	61da      	str	r2, [r3, #28]
 8009460:	e02d      	b.n	80094be <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	895b      	ldrh	r3, [r3, #10]
 8009466:	461a      	mov	r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	899b      	ldrh	r3, [r3, #12]
 800946c:	fb03 f302 	mul.w	r3, r3, r2
 8009470:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009472:	e019      	b.n	80094a8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6979      	ldr	r1, [r7, #20]
 8009478:	4618      	mov	r0, r3
 800947a:	f7ff fc9a 	bl	8008db2 <get_fat>
 800947e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009486:	d101      	bne.n	800948c <dir_sdi+0x90>
 8009488:	2301      	movs	r3, #1
 800948a:	e03c      	b.n	8009506 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d904      	bls.n	800949c <dir_sdi+0xa0>
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	429a      	cmp	r2, r3
 800949a:	d301      	bcc.n	80094a0 <dir_sdi+0xa4>
 800949c:	2302      	movs	r3, #2
 800949e:	e032      	b.n	8009506 <dir_sdi+0x10a>
			ofs -= csz;
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d2e1      	bcs.n	8009474 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80094b0:	6979      	ldr	r1, [r7, #20]
 80094b2:	6938      	ldr	r0, [r7, #16]
 80094b4:	f7ff fc5e 	bl	8008d74 <clust2sect>
 80094b8:	4602      	mov	r2, r0
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <dir_sdi+0xd4>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e01a      	b.n	8009506 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	69da      	ldr	r2, [r3, #28]
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	899b      	ldrh	r3, [r3, #12]
 80094d8:	4619      	mov	r1, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80094e0:	441a      	add	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	899b      	ldrh	r3, [r3, #12]
 80094f0:	461a      	mov	r2, r3
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80094f8:	fb02 f200 	mul.w	r2, r2, r0
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	18ca      	adds	r2, r1, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b086      	sub	sp, #24
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	3320      	adds	r3, #32
 8009524:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <dir_next+0x28>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009534:	d301      	bcc.n	800953a <dir_next+0x2c>
 8009536:	2304      	movs	r3, #4
 8009538:	e0bb      	b.n	80096b2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	899b      	ldrh	r3, [r3, #12]
 800953e:	461a      	mov	r2, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	fbb3 f1f2 	udiv	r1, r3, r2
 8009546:	fb02 f201 	mul.w	r2, r2, r1
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	2b00      	cmp	r3, #0
 800954e:	f040 809d 	bne.w	800968c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10b      	bne.n	800957c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	095b      	lsrs	r3, r3, #5
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	8912      	ldrh	r2, [r2, #8]
 800956c:	4293      	cmp	r3, r2
 800956e:	f0c0 808d 	bcc.w	800968c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	61da      	str	r2, [r3, #28]
 8009578:	2304      	movs	r3, #4
 800957a:	e09a      	b.n	80096b2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	899b      	ldrh	r3, [r3, #12]
 8009580:	461a      	mov	r2, r3
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	fbb3 f3f2 	udiv	r3, r3, r2
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	8952      	ldrh	r2, [r2, #10]
 800958c:	3a01      	subs	r2, #1
 800958e:	4013      	ands	r3, r2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d17b      	bne.n	800968c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f7ff fc08 	bl	8008db2 <get_fat>
 80095a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d801      	bhi.n	80095ae <dir_next+0xa0>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e081      	b.n	80096b2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b4:	d101      	bne.n	80095ba <dir_next+0xac>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e07b      	b.n	80096b2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d359      	bcc.n	8009678 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d104      	bne.n	80095d4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	61da      	str	r2, [r3, #28]
 80095d0:	2304      	movs	r3, #4
 80095d2:	e06e      	b.n	80096b2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	4619      	mov	r1, r3
 80095dc:	4610      	mov	r0, r2
 80095de:	f7ff fe3d 	bl	800925c <create_chain>
 80095e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <dir_next+0xe0>
 80095ea:	2307      	movs	r3, #7
 80095ec:	e061      	b.n	80096b2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d101      	bne.n	80095f8 <dir_next+0xea>
 80095f4:	2302      	movs	r3, #2
 80095f6:	e05c      	b.n	80096b2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095fe:	d101      	bne.n	8009604 <dir_next+0xf6>
 8009600:	2301      	movs	r3, #1
 8009602:	e056      	b.n	80096b2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff fad3 	bl	8008bb0 <sync_window>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <dir_next+0x106>
 8009610:	2301      	movs	r3, #1
 8009612:	e04e      	b.n	80096b2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	899b      	ldrh	r3, [r3, #12]
 800961e:	461a      	mov	r2, r3
 8009620:	2100      	movs	r1, #0
 8009622:	f7ff f8ca 	bl	80087ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009626:	2300      	movs	r3, #0
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	6979      	ldr	r1, [r7, #20]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7ff fba1 	bl	8008d74 <clust2sect>
 8009632:	4602      	mov	r2, r0
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
 8009638:	e012      	b.n	8009660 <dir_next+0x152>
						fs->wflag = 1;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7ff fab5 	bl	8008bb0 <sync_window>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <dir_next+0x142>
 800964c:	2301      	movs	r3, #1
 800964e:	e030      	b.n	80096b2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	3301      	adds	r3, #1
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	895b      	ldrh	r3, [r3, #10]
 8009664:	461a      	mov	r2, r3
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	4293      	cmp	r3, r2
 800966a:	d3e6      	bcc.n	800963a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800967e:	6979      	ldr	r1, [r7, #20]
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f7ff fb77 	bl	8008d74 <clust2sect>
 8009686:	4602      	mov	r2, r0
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	899b      	ldrh	r3, [r3, #12]
 800969c:	461a      	mov	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80096a4:	fb02 f200 	mul.w	r2, r2, r0
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	18ca      	adds	r2, r1, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b086      	sub	sp, #24
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80096ca:	2100      	movs	r1, #0
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f7ff fe95 	bl	80093fc <dir_sdi>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d12b      	bne.n	8009734 <dir_alloc+0x7a>
		n = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	4619      	mov	r1, r3
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff faa6 	bl	8008c38 <move_window>
 80096ec:	4603      	mov	r3, r0
 80096ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d11d      	bne.n	8009732 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2be5      	cmp	r3, #229	; 0xe5
 80096fe:	d004      	beq.n	800970a <dir_alloc+0x50>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d107      	bne.n	800971a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	3301      	adds	r3, #1
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d102      	bne.n	800971e <dir_alloc+0x64>
 8009718:	e00c      	b.n	8009734 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800971a:	2300      	movs	r3, #0
 800971c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800971e:	2101      	movs	r1, #1
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff fef4 	bl	800950e <dir_next>
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0d7      	beq.n	80096e0 <dir_alloc+0x26>
 8009730:	e000      	b.n	8009734 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009732:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	2b04      	cmp	r3, #4
 8009738:	d101      	bne.n	800973e <dir_alloc+0x84>
 800973a:	2307      	movs	r3, #7
 800973c:	75fb      	strb	r3, [r7, #23]
	return res;
 800973e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3718      	adds	r7, #24
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	331a      	adds	r3, #26
 8009756:	4618      	mov	r0, r3
 8009758:	f7fe ff8c 	bl	8008674 <ld_word>
 800975c:	4603      	mov	r3, r0
 800975e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b03      	cmp	r3, #3
 8009766:	d109      	bne.n	800977c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	3314      	adds	r3, #20
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe ff81 	bl	8008674 <ld_word>
 8009772:	4603      	mov	r3, r0
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800977c:	68fb      	ldr	r3, [r7, #12]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	331a      	adds	r3, #26
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	b292      	uxth	r2, r2
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe ffa4 	bl	80086ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d109      	bne.n	80097be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f103 0214 	add.w	r2, r3, #20
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	0c1b      	lsrs	r3, r3, #16
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f7fe ff96 	bl	80086ea <st_word>
	}
}
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	331a      	adds	r3, #26
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe ff4c 	bl	8008674 <ld_word>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <cmp_lfn+0x1e>
 80097e2:	2300      	movs	r3, #0
 80097e4:	e059      	b.n	800989a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ee:	1e5a      	subs	r2, r3, #1
 80097f0:	4613      	mov	r3, r2
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80097fc:	2301      	movs	r3, #1
 80097fe:	81fb      	strh	r3, [r7, #14]
 8009800:	2300      	movs	r3, #0
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	e033      	b.n	800986e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009806:	4a27      	ldr	r2, [pc, #156]	; (80098a4 <cmp_lfn+0xdc>)
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	4413      	add	r3, r2
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	4413      	add	r3, r2
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe ff2d 	bl	8008674 <ld_word>
 800981a:	4603      	mov	r3, r0
 800981c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800981e:	89fb      	ldrh	r3, [r7, #14]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01a      	beq.n	800985a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2bfe      	cmp	r3, #254	; 0xfe
 8009828:	d812      	bhi.n	8009850 <cmp_lfn+0x88>
 800982a:	89bb      	ldrh	r3, [r7, #12]
 800982c:	4618      	mov	r0, r3
 800982e:	f001 fdd1 	bl	800b3d4 <ff_wtoupper>
 8009832:	4603      	mov	r3, r0
 8009834:	461c      	mov	r4, r3
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	617a      	str	r2, [r7, #20]
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4413      	add	r3, r2
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f001 fdc5 	bl	800b3d4 <ff_wtoupper>
 800984a:	4603      	mov	r3, r0
 800984c:	429c      	cmp	r4, r3
 800984e:	d001      	beq.n	8009854 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009850:	2300      	movs	r3, #0
 8009852:	e022      	b.n	800989a <cmp_lfn+0xd2>
			}
			wc = uc;
 8009854:	89bb      	ldrh	r3, [r7, #12]
 8009856:	81fb      	strh	r3, [r7, #14]
 8009858:	e006      	b.n	8009868 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800985a:	89bb      	ldrh	r3, [r7, #12]
 800985c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009860:	4293      	cmp	r3, r2
 8009862:	d001      	beq.n	8009868 <cmp_lfn+0xa0>
 8009864:	2300      	movs	r3, #0
 8009866:	e018      	b.n	800989a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3301      	adds	r3, #1
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b0c      	cmp	r3, #12
 8009872:	d9c8      	bls.n	8009806 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <cmp_lfn+0xd0>
 8009880:	89fb      	ldrh	r3, [r7, #14]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d008      	beq.n	8009898 <cmp_lfn+0xd0>
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <cmp_lfn+0xd0>
 8009894:	2300      	movs	r3, #0
 8009896:	e000      	b.n	800989a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009898:	2301      	movs	r3, #1
}
 800989a:	4618      	mov	r0, r3
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd90      	pop	{r4, r7, pc}
 80098a2:	bf00      	nop
 80098a4:	08010924 	.word	0x08010924

080098a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b088      	sub	sp, #32
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	4611      	mov	r1, r2
 80098b4:	461a      	mov	r2, r3
 80098b6:	460b      	mov	r3, r1
 80098b8:	71fb      	strb	r3, [r7, #7]
 80098ba:	4613      	mov	r3, r2
 80098bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	330d      	adds	r3, #13
 80098c2:	79ba      	ldrb	r2, [r7, #6]
 80098c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	330b      	adds	r3, #11
 80098ca:	220f      	movs	r2, #15
 80098cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	330c      	adds	r3, #12
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	331a      	adds	r3, #26
 80098da:	2100      	movs	r1, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fe ff04 	bl	80086ea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	1e5a      	subs	r2, r3, #1
 80098e6:	4613      	mov	r3, r2
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	4413      	add	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	82fb      	strh	r3, [r7, #22]
 80098f6:	2300      	movs	r3, #0
 80098f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80098fa:	8afb      	ldrh	r3, [r7, #22]
 80098fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009900:	4293      	cmp	r3, r2
 8009902:	d007      	beq.n	8009914 <put_lfn+0x6c>
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	61fa      	str	r2, [r7, #28]
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4413      	add	r3, r2
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009914:	4a17      	ldr	r2, [pc, #92]	; (8009974 <put_lfn+0xcc>)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	4413      	add	r3, r2
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4413      	add	r3, r2
 8009922:	8afa      	ldrh	r2, [r7, #22]
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe fedf 	bl	80086ea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800992c:	8afb      	ldrh	r3, [r7, #22]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <put_lfn+0x90>
 8009932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009936:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	3301      	adds	r3, #1
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	2b0c      	cmp	r3, #12
 8009942:	d9da      	bls.n	80098fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009944:	8afb      	ldrh	r3, [r7, #22]
 8009946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800994a:	4293      	cmp	r3, r2
 800994c:	d006      	beq.n	800995c <put_lfn+0xb4>
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d103      	bne.n	8009964 <put_lfn+0xbc>
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009962:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	79fa      	ldrb	r2, [r7, #7]
 8009968:	701a      	strb	r2, [r3, #0]
}
 800996a:	bf00      	nop
 800996c:	3720      	adds	r7, #32
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	08010924 	.word	0x08010924

08009978 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b08c      	sub	sp, #48	; 0x30
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009986:	220b      	movs	r2, #11
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7fe fef4 	bl	8008778 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b05      	cmp	r3, #5
 8009994:	d92b      	bls.n	80099ee <gen_numname+0x76>
		sr = seq;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800999a:	e022      	b.n	80099e2 <gen_numname+0x6a>
			wc = *lfn++;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	1c9a      	adds	r2, r3, #2
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80099a6:	2300      	movs	r3, #0
 80099a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099aa:	e017      	b.n	80099dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	005a      	lsls	r2, r3, #1
 80099b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	4413      	add	r3, r2
 80099b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80099ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099bc:	085b      	lsrs	r3, r3, #1
 80099be:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d005      	beq.n	80099d6 <gen_numname+0x5e>
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80099d0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80099d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	3301      	adds	r3, #1
 80099da:	62bb      	str	r3, [r7, #40]	; 0x28
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	2b0f      	cmp	r3, #15
 80099e0:	d9e4      	bls.n	80099ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1d8      	bne.n	800999c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80099ee:	2307      	movs	r3, #7
 80099f0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 030f 	and.w	r3, r3, #15
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	3330      	adds	r3, #48	; 0x30
 80099fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a06:	2b39      	cmp	r3, #57	; 0x39
 8009a08:	d904      	bls.n	8009a14 <gen_numname+0x9c>
 8009a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a0e:	3307      	adds	r3, #7
 8009a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	1e5a      	subs	r2, r3, #1
 8009a18:	62ba      	str	r2, [r7, #40]	; 0x28
 8009a1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009a1e:	4413      	add	r3, r2
 8009a20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009a24:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	091b      	lsrs	r3, r3, #4
 8009a2c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1de      	bne.n	80099f2 <gen_numname+0x7a>
	ns[i] = '~';
 8009a34:	f107 0214 	add.w	r2, r7, #20
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	4413      	add	r3, r2
 8009a3c:	227e      	movs	r2, #126	; 0x7e
 8009a3e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009a40:	2300      	movs	r3, #0
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
 8009a44:	e002      	b.n	8009a4c <gen_numname+0xd4>
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	3301      	adds	r3, #1
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d205      	bcs.n	8009a60 <gen_numname+0xe8>
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	4413      	add	r3, r2
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d1f2      	bne.n	8009a46 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	2b07      	cmp	r3, #7
 8009a64:	d808      	bhi.n	8009a78 <gen_numname+0x100>
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009a6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009a70:	4413      	add	r3, r2
 8009a72:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009a76:	e000      	b.n	8009a7a <gen_numname+0x102>
 8009a78:	2120      	movs	r1, #32
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	460a      	mov	r2, r1
 8009a86:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	2b07      	cmp	r3, #7
 8009a8c:	d9e8      	bls.n	8009a60 <gen_numname+0xe8>
}
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
 8009a92:	3730      	adds	r7, #48	; 0x30
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009aa4:	230b      	movs	r3, #11
 8009aa6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	0852      	lsrs	r2, r2, #1
 8009aae:	01db      	lsls	r3, r3, #7
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	1c59      	adds	r1, r3, #1
 8009ab8:	6079      	str	r1, [r7, #4]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	4413      	add	r3, r2
 8009abe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	60bb      	str	r3, [r7, #8]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1ed      	bne.n	8009aa8 <sum_sfn+0x10>
	return sum;
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b086      	sub	sp, #24
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ae8:	2100      	movs	r1, #0
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fc86 	bl	80093fc <dir_sdi>
 8009af0:	4603      	mov	r3, r0
 8009af2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <dir_find+0x24>
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	e0a9      	b.n	8009c52 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009afe:	23ff      	movs	r3, #255	; 0xff
 8009b00:	753b      	strb	r3, [r7, #20]
 8009b02:	7d3b      	ldrb	r3, [r7, #20]
 8009b04:	757b      	strb	r3, [r7, #21]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b0c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6938      	ldr	r0, [r7, #16]
 8009b16:	f7ff f88f 	bl	8008c38 <move_window>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f040 8090 	bne.w	8009c46 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b2e:	7dbb      	ldrb	r3, [r7, #22]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <dir_find+0x60>
 8009b34:	2304      	movs	r3, #4
 8009b36:	75fb      	strb	r3, [r7, #23]
 8009b38:	e08a      	b.n	8009c50 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	330b      	adds	r3, #11
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b46:	73fb      	strb	r3, [r7, #15]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	7bfa      	ldrb	r2, [r7, #15]
 8009b4c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009b4e:	7dbb      	ldrb	r3, [r7, #22]
 8009b50:	2be5      	cmp	r3, #229	; 0xe5
 8009b52:	d007      	beq.n	8009b64 <dir_find+0x8a>
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
 8009b56:	f003 0308 	and.w	r3, r3, #8
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <dir_find+0x98>
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	2b0f      	cmp	r3, #15
 8009b62:	d006      	beq.n	8009b72 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b64:	23ff      	movs	r3, #255	; 0xff
 8009b66:	757b      	strb	r3, [r7, #21]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8009b70:	e05e      	b.n	8009c30 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	2b0f      	cmp	r3, #15
 8009b76:	d136      	bne.n	8009be6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d154      	bne.n	8009c30 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009b86:	7dbb      	ldrb	r3, [r7, #22]
 8009b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00d      	beq.n	8009bac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a1b      	ldr	r3, [r3, #32]
 8009b94:	7b5b      	ldrb	r3, [r3, #13]
 8009b96:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009b98:	7dbb      	ldrb	r3, [r7, #22]
 8009b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b9e:	75bb      	strb	r3, [r7, #22]
 8009ba0:	7dbb      	ldrb	r3, [r7, #22]
 8009ba2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	695a      	ldr	r2, [r3, #20]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009bac:	7dba      	ldrb	r2, [r7, #22]
 8009bae:	7d7b      	ldrb	r3, [r7, #21]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d115      	bne.n	8009be0 <dir_find+0x106>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	330d      	adds	r3, #13
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	7d3a      	ldrb	r2, [r7, #20]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d10e      	bne.n	8009be0 <dir_find+0x106>
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	691a      	ldr	r2, [r3, #16]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4610      	mov	r0, r2
 8009bce:	f7ff fdfb 	bl	80097c8 <cmp_lfn>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <dir_find+0x106>
 8009bd8:	7d7b      	ldrb	r3, [r7, #21]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	e000      	b.n	8009be2 <dir_find+0x108>
 8009be0:	23ff      	movs	r3, #255	; 0xff
 8009be2:	757b      	strb	r3, [r7, #21]
 8009be4:	e024      	b.n	8009c30 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009be6:	7d7b      	ldrb	r3, [r7, #21]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d109      	bne.n	8009c00 <dir_find+0x126>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff ff51 	bl	8009a98 <sum_sfn>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	7d3b      	ldrb	r3, [r7, #20]
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d024      	beq.n	8009c4a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <dir_find+0x14a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a18      	ldr	r0, [r3, #32]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3324      	adds	r3, #36	; 0x24
 8009c16:	220b      	movs	r2, #11
 8009c18:	4619      	mov	r1, r3
 8009c1a:	f7fe fde9 	bl	80087f0 <mem_cmp>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d014      	beq.n	8009c4e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c24:	23ff      	movs	r3, #255	; 0xff
 8009c26:	757b      	strb	r3, [r7, #21]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c2e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c30:	2100      	movs	r1, #0
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff fc6b 	bl	800950e <dir_next>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c3c:	7dfb      	ldrb	r3, [r7, #23]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f43f af65 	beq.w	8009b0e <dir_find+0x34>
 8009c44:	e004      	b.n	8009c50 <dir_find+0x176>
		if (res != FR_OK) break;
 8009c46:	bf00      	nop
 8009c48:	e002      	b.n	8009c50 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009c4a:	bf00      	nop
 8009c4c:	e000      	b.n	8009c50 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c4e:	bf00      	nop

	return res;
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08c      	sub	sp, #48	; 0x30
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c70:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <dir_register+0x20>
 8009c78:	2306      	movs	r3, #6
 8009c7a:	e0e0      	b.n	8009e3e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c80:	e002      	b.n	8009c88 <dir_register+0x2c>
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	3301      	adds	r3, #1
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	4413      	add	r3, r2
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1f4      	bne.n	8009c82 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009c9e:	f107 030c 	add.w	r3, r7, #12
 8009ca2:	220c      	movs	r2, #12
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe fd67 	bl	8008778 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009caa:	7dfb      	ldrb	r3, [r7, #23]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d032      	beq.n	8009d1a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2240      	movs	r2, #64	; 0x40
 8009cb8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cc0:	e016      	b.n	8009cf0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	691a      	ldr	r2, [r3, #16]
 8009ccc:	f107 010c 	add.w	r1, r7, #12
 8009cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd2:	f7ff fe51 	bl	8009978 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff feff 	bl	8009ada <dir_find>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d106      	bne.n	8009cf8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cec:	3301      	adds	r3, #1
 8009cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	2b63      	cmp	r3, #99	; 0x63
 8009cf4:	d9e5      	bls.n	8009cc2 <dir_register+0x66>
 8009cf6:	e000      	b.n	8009cfa <dir_register+0x9e>
			if (res != FR_OK) break;
 8009cf8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	2b64      	cmp	r3, #100	; 0x64
 8009cfe:	d101      	bne.n	8009d04 <dir_register+0xa8>
 8009d00:	2307      	movs	r3, #7
 8009d02:	e09c      	b.n	8009e3e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d002      	beq.n	8009d12 <dir_register+0xb6>
 8009d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d10:	e095      	b.n	8009e3e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009d12:	7dfa      	ldrb	r2, [r7, #23]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	f003 0302 	and.w	r3, r3, #2
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d007      	beq.n	8009d34 <dir_register+0xd8>
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	330c      	adds	r3, #12
 8009d28:	4a47      	ldr	r2, [pc, #284]	; (8009e48 <dir_register+0x1ec>)
 8009d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d2e:	089b      	lsrs	r3, r3, #2
 8009d30:	3301      	adds	r3, #1
 8009d32:	e000      	b.n	8009d36 <dir_register+0xda>
 8009d34:	2301      	movs	r3, #1
 8009d36:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009d38:	6a39      	ldr	r1, [r7, #32]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fcbd 	bl	80096ba <dir_alloc>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d148      	bne.n	8009de0 <dir_register+0x184>
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	623b      	str	r3, [r7, #32]
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d042      	beq.n	8009de0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	695a      	ldr	r2, [r3, #20]
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	015b      	lsls	r3, r3, #5
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	4619      	mov	r1, r3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f7ff fb48 	bl	80093fc <dir_sdi>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d132      	bne.n	8009de0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3324      	adds	r3, #36	; 0x24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7ff fe8a 	bl	8009a98 <sum_sfn>
 8009d84:	4603      	mov	r3, r0
 8009d86:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	69f8      	ldr	r0, [r7, #28]
 8009d90:	f7fe ff52 	bl	8008c38 <move_window>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d11d      	bne.n	8009dde <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	6918      	ldr	r0, [r3, #16]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a19      	ldr	r1, [r3, #32]
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	7efb      	ldrb	r3, [r7, #27]
 8009db0:	f7ff fd7a 	bl	80098a8 <put_lfn>
				fs->wflag = 1;
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	2201      	movs	r2, #1
 8009db8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009dba:	2100      	movs	r1, #0
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff fba6 	bl	800950e <dir_next>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d107      	bne.n	8009de0 <dir_register+0x184>
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	623b      	str	r3, [r7, #32]
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1d5      	bne.n	8009d88 <dir_register+0x12c>
 8009ddc:	e000      	b.n	8009de0 <dir_register+0x184>
				if (res != FR_OK) break;
 8009dde:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d128      	bne.n	8009e3a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	4619      	mov	r1, r3
 8009dee:	69f8      	ldr	r0, [r7, #28]
 8009df0:	f7fe ff22 	bl	8008c38 <move_window>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009dfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d11b      	bne.n	8009e3a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	2220      	movs	r2, #32
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fcd5 	bl	80087ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a18      	ldr	r0, [r3, #32]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3324      	adds	r3, #36	; 0x24
 8009e18:	220b      	movs	r2, #11
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	f7fe fcac 	bl	8008778 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	330c      	adds	r3, #12
 8009e2c:	f002 0218 	and.w	r2, r2, #24
 8009e30:	b2d2      	uxtb	r2, r2
 8009e32:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2201      	movs	r2, #1
 8009e38:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3730      	adds	r7, #48	; 0x30
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	4ec4ec4f 	.word	0x4ec4ec4f

08009e4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08a      	sub	sp, #40	; 0x28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	61ba      	str	r2, [r7, #24]
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	4413      	add	r3, r2
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e7c:	2b1f      	cmp	r3, #31
 8009e7e:	d940      	bls.n	8009f02 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e82:	2b2f      	cmp	r3, #47	; 0x2f
 8009e84:	d006      	beq.n	8009e94 <create_name+0x48>
 8009e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e88:	2b5c      	cmp	r3, #92	; 0x5c
 8009e8a:	d110      	bne.n	8009eae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e8c:	e002      	b.n	8009e94 <create_name+0x48>
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	3301      	adds	r3, #1
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	4413      	add	r3, r2
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e9e:	d0f6      	beq.n	8009e8e <create_name+0x42>
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b5c      	cmp	r3, #92	; 0x5c
 8009eaa:	d0f0      	beq.n	8009e8e <create_name+0x42>
			break;
 8009eac:	e02a      	b.n	8009f04 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2bfe      	cmp	r3, #254	; 0xfe
 8009eb2:	d901      	bls.n	8009eb8 <create_name+0x6c>
 8009eb4:	2306      	movs	r3, #6
 8009eb6:	e177      	b.n	800a1a8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009ebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fa4a 	bl	800b35c <ff_convert>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <create_name+0x8a>
 8009ed2:	2306      	movs	r3, #6
 8009ed4:	e168      	b.n	800a1a8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8009eda:	d809      	bhi.n	8009ef0 <create_name+0xa4>
 8009edc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ede:	4619      	mov	r1, r3
 8009ee0:	48b3      	ldr	r0, [pc, #716]	; (800a1b0 <create_name+0x364>)
 8009ee2:	f7fe fcac 	bl	800883e <chk_chr>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <create_name+0xa4>
 8009eec:	2306      	movs	r3, #6
 8009eee:	e15b      	b.n	800a1a8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	617a      	str	r2, [r7, #20]
 8009ef6:	005b      	lsls	r3, r3, #1
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009efe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009f00:	e7b4      	b.n	8009e6c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009f02:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	441a      	add	r2, r3
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f10:	2b1f      	cmp	r3, #31
 8009f12:	d801      	bhi.n	8009f18 <create_name+0xcc>
 8009f14:	2304      	movs	r3, #4
 8009f16:	e000      	b.n	8009f1a <create_name+0xce>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009f1e:	e011      	b.n	8009f44 <create_name+0xf8>
		w = lfn[di - 1];
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009f26:	3b01      	subs	r3, #1
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	d002      	beq.n	8009f3e <create_name+0xf2>
 8009f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f3c:	d106      	bne.n	8009f4c <create_name+0x100>
		di--;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1ea      	bne.n	8009f20 <create_name+0xd4>
 8009f4a:	e000      	b.n	8009f4e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009f4c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <create_name+0x118>
 8009f60:	2306      	movs	r3, #6
 8009f62:	e121      	b.n	800a1a8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3324      	adds	r3, #36	; 0x24
 8009f68:	220b      	movs	r2, #11
 8009f6a:	2120      	movs	r1, #32
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fe fc24 	bl	80087ba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009f72:	2300      	movs	r3, #0
 8009f74:	61bb      	str	r3, [r7, #24]
 8009f76:	e002      	b.n	8009f7e <create_name+0x132>
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	61bb      	str	r3, [r7, #24]
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d0f5      	beq.n	8009f78 <create_name+0x12c>
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4413      	add	r3, r2
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	2b2e      	cmp	r3, #46	; 0x2e
 8009f98:	d0ee      	beq.n	8009f78 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d009      	beq.n	8009fb4 <create_name+0x168>
 8009fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa4:	f043 0303 	orr.w	r3, r3, #3
 8009fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009fac:	e002      	b.n	8009fb4 <create_name+0x168>
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <create_name+0x182>
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	2b2e      	cmp	r3, #46	; 0x2e
 8009fcc:	d1ef      	bne.n	8009fae <create_name+0x162>

	i = b = 0; ni = 8;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	623b      	str	r3, [r7, #32]
 8009fd8:	2308      	movs	r3, #8
 8009fda:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	61ba      	str	r2, [r7, #24]
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 8090 	beq.w	800a114 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	d006      	beq.n	800a008 <create_name+0x1bc>
 8009ffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8009ffe:	d10a      	bne.n	800a016 <create_name+0x1ca>
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	429a      	cmp	r2, r3
 800a006:	d006      	beq.n	800a016 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a00c:	f043 0303 	orr.w	r3, r3, #3
 800a010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a014:	e07d      	b.n	800a112 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d203      	bcs.n	800a026 <create_name+0x1da>
 800a01e:	69ba      	ldr	r2, [r7, #24]
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	429a      	cmp	r2, r3
 800a024:	d123      	bne.n	800a06e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	2b0b      	cmp	r3, #11
 800a02a:	d106      	bne.n	800a03a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a030:	f043 0303 	orr.w	r3, r3, #3
 800a034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a038:	e06f      	b.n	800a11a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d005      	beq.n	800a04e <create_name+0x202>
 800a042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a046:	f043 0303 	orr.w	r3, r3, #3
 800a04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	429a      	cmp	r2, r3
 800a054:	d860      	bhi.n	800a118 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	61bb      	str	r3, [r7, #24]
 800a05a:	2308      	movs	r3, #8
 800a05c:	623b      	str	r3, [r7, #32]
 800a05e:	230b      	movs	r3, #11
 800a060:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a06c:	e051      	b.n	800a112 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a070:	2b7f      	cmp	r3, #127	; 0x7f
 800a072:	d914      	bls.n	800a09e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a076:	2100      	movs	r1, #0
 800a078:	4618      	mov	r0, r3
 800a07a:	f001 f96f 	bl	800b35c <ff_convert>
 800a07e:	4603      	mov	r3, r0
 800a080:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <create_name+0x246>
 800a088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a08a:	3b80      	subs	r3, #128	; 0x80
 800a08c:	4a49      	ldr	r2, [pc, #292]	; (800a1b4 <create_name+0x368>)
 800a08e:	5cd3      	ldrb	r3, [r2, r3]
 800a090:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a096:	f043 0302 	orr.w	r3, r3, #2
 800a09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a09e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d007      	beq.n	800a0b4 <create_name+0x268>
 800a0a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4843      	ldr	r0, [pc, #268]	; (800a1b8 <create_name+0x36c>)
 800a0aa:	f7fe fbc8 	bl	800883e <chk_chr>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a0b4:	235f      	movs	r3, #95	; 0x5f
 800a0b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0bc:	f043 0303 	orr.w	r3, r3, #3
 800a0c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a0c4:	e01b      	b.n	800a0fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a0c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	d909      	bls.n	800a0e0 <create_name+0x294>
 800a0cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0ce:	2b5a      	cmp	r3, #90	; 0x5a
 800a0d0:	d806      	bhi.n	800a0e0 <create_name+0x294>
					b |= 2;
 800a0d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0d6:	f043 0302 	orr.w	r3, r3, #2
 800a0da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a0de:	e00e      	b.n	800a0fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a0e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e2:	2b60      	cmp	r3, #96	; 0x60
 800a0e4:	d90b      	bls.n	800a0fe <create_name+0x2b2>
 800a0e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e8:	2b7a      	cmp	r3, #122	; 0x7a
 800a0ea:	d808      	bhi.n	800a0fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a0ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a0f0:	f043 0301 	orr.w	r3, r3, #1
 800a0f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a0f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0fa:	3b20      	subs	r3, #32
 800a0fc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	1c5a      	adds	r2, r3, #1
 800a102:	623a      	str	r2, [r7, #32]
 800a104:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a106:	b2d1      	uxtb	r1, r2
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	4413      	add	r3, r2
 800a10c:	460a      	mov	r2, r1
 800a10e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a112:	e763      	b.n	8009fdc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a114:	bf00      	nop
 800a116:	e000      	b.n	800a11a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a118:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a120:	2be5      	cmp	r3, #229	; 0xe5
 800a122:	d103      	bne.n	800a12c <create_name+0x2e0>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2205      	movs	r2, #5
 800a128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	2b08      	cmp	r3, #8
 800a130:	d104      	bne.n	800a13c <create_name+0x2f0>
 800a132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a13c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a140:	f003 030c 	and.w	r3, r3, #12
 800a144:	2b0c      	cmp	r3, #12
 800a146:	d005      	beq.n	800a154 <create_name+0x308>
 800a148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a14c:	f003 0303 	and.w	r3, r3, #3
 800a150:	2b03      	cmp	r3, #3
 800a152:	d105      	bne.n	800a160 <create_name+0x314>
 800a154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a158:	f043 0302 	orr.w	r3, r3, #2
 800a15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d117      	bne.n	800a19c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a16c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	2b01      	cmp	r3, #1
 800a176:	d105      	bne.n	800a184 <create_name+0x338>
 800a178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a17c:	f043 0310 	orr.w	r3, r3, #16
 800a180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a188:	f003 030c 	and.w	r3, r3, #12
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d105      	bne.n	800a19c <create_name+0x350>
 800a190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a194:	f043 0308 	orr.w	r3, r3, #8
 800a198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a1a6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3728      	adds	r7, #40	; 0x28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	08010774 	.word	0x08010774
 800a1b4:	080108a4 	.word	0x080108a4
 800a1b8:	08010780 	.word	0x08010780

0800a1bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a1d0:	e002      	b.n	800a1d8 <follow_path+0x1c>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b2f      	cmp	r3, #47	; 0x2f
 800a1de:	d0f8      	beq.n	800a1d2 <follow_path+0x16>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b5c      	cmp	r3, #92	; 0x5c
 800a1e6:	d0f4      	beq.n	800a1d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	2b1f      	cmp	r3, #31
 800a1f4:	d80a      	bhi.n	800a20c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2280      	movs	r2, #128	; 0x80
 800a1fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a1fe:	2100      	movs	r1, #0
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7ff f8fb 	bl	80093fc <dir_sdi>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]
 800a20a:	e048      	b.n	800a29e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a20c:	463b      	mov	r3, r7
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff fe1b 	bl	8009e4c <create_name>
 800a216:	4603      	mov	r3, r0
 800a218:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a21a:	7dfb      	ldrb	r3, [r7, #23]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d139      	bne.n	800a294 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff fc5a 	bl	8009ada <dir_find>
 800a226:	4603      	mov	r3, r0
 800a228:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a230:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00a      	beq.n	800a24e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a238:	7dfb      	ldrb	r3, [r7, #23]
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d12c      	bne.n	800a298 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d127      	bne.n	800a298 <follow_path+0xdc>
 800a248:	2305      	movs	r3, #5
 800a24a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a24c:	e024      	b.n	800a298 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a24e:	7afb      	ldrb	r3, [r7, #11]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	d121      	bne.n	800a29c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	799b      	ldrb	r3, [r3, #6]
 800a25c:	f003 0310 	and.w	r3, r3, #16
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a264:	2305      	movs	r3, #5
 800a266:	75fb      	strb	r3, [r7, #23]
 800a268:	e019      	b.n	800a29e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	8992      	ldrh	r2, [r2, #12]
 800a278:	fbb3 f0f2 	udiv	r0, r3, r2
 800a27c:	fb02 f200 	mul.w	r2, r2, r0
 800a280:	1a9b      	subs	r3, r3, r2
 800a282:	440b      	add	r3, r1
 800a284:	4619      	mov	r1, r3
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7ff fa5e 	bl	8009748 <ld_clust>
 800a28c:	4602      	mov	r2, r0
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a292:	e7bb      	b.n	800a20c <follow_path+0x50>
			if (res != FR_OK) break;
 800a294:	bf00      	nop
 800a296:	e002      	b.n	800a29e <follow_path+0xe2>
				break;
 800a298:	bf00      	nop
 800a29a:	e000      	b.n	800a29e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a29c:	bf00      	nop
			}
		}
	}

	return res;
 800a29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d031      	beq.n	800a322 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	e002      	b.n	800a2cc <get_ldnumber+0x24>
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b1f      	cmp	r3, #31
 800a2d2:	d903      	bls.n	800a2dc <get_ldnumber+0x34>
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b3a      	cmp	r3, #58	; 0x3a
 800a2da:	d1f4      	bne.n	800a2c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b3a      	cmp	r3, #58	; 0x3a
 800a2e2:	d11c      	bne.n	800a31e <get_ldnumber+0x76>
			tp = *path;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	60fa      	str	r2, [r7, #12]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	3b30      	subs	r3, #48	; 0x30
 800a2f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b09      	cmp	r3, #9
 800a2fa:	d80e      	bhi.n	800a31a <get_ldnumber+0x72>
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	429a      	cmp	r2, r3
 800a302:	d10a      	bne.n	800a31a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d107      	bne.n	800a31a <get_ldnumber+0x72>
					vol = (int)i;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	3301      	adds	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	e002      	b.n	800a324 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a31e:	2300      	movs	r3, #0
 800a320:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a322:	693b      	ldr	r3, [r7, #16]
}
 800a324:	4618      	mov	r0, r3
 800a326:	371c      	adds	r7, #28
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	70da      	strb	r2, [r3, #3]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a346:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7fe fc74 	bl	8008c38 <move_window>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <check_fs+0x2a>
 800a356:	2304      	movs	r3, #4
 800a358:	e038      	b.n	800a3cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	333c      	adds	r3, #60	; 0x3c
 800a35e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe f986 	bl	8008674 <ld_word>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a370:	429a      	cmp	r2, r3
 800a372:	d001      	beq.n	800a378 <check_fs+0x48>
 800a374:	2303      	movs	r3, #3
 800a376:	e029      	b.n	800a3cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a37e:	2be9      	cmp	r3, #233	; 0xe9
 800a380:	d009      	beq.n	800a396 <check_fs+0x66>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a388:	2beb      	cmp	r3, #235	; 0xeb
 800a38a:	d11e      	bne.n	800a3ca <check_fs+0x9a>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a392:	2b90      	cmp	r3, #144	; 0x90
 800a394:	d119      	bne.n	800a3ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	333c      	adds	r3, #60	; 0x3c
 800a39a:	3336      	adds	r3, #54	; 0x36
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe f981 	bl	80086a4 <ld_dword>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a3a8:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <check_fs+0xa4>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d101      	bne.n	800a3b2 <check_fs+0x82>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e00c      	b.n	800a3cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	333c      	adds	r3, #60	; 0x3c
 800a3b6:	3352      	adds	r3, #82	; 0x52
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fe f973 	bl	80086a4 <ld_dword>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4a05      	ldr	r2, [pc, #20]	; (800a3d8 <check_fs+0xa8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d101      	bne.n	800a3ca <check_fs+0x9a>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e000      	b.n	800a3cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a3ca:	2302      	movs	r3, #2
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	00544146 	.word	0x00544146
 800a3d8:	33544146 	.word	0x33544146

0800a3dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b096      	sub	sp, #88	; 0x58
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff ff59 	bl	800a2a8 <get_ldnumber>
 800a3f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	da01      	bge.n	800a402 <find_volume+0x26>
 800a3fe:	230b      	movs	r3, #11
 800a400:	e26c      	b.n	800a8dc <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a402:	4aa4      	ldr	r2, [pc, #656]	; (800a694 <find_volume+0x2b8>)
 800a404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a40a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <find_volume+0x3a>
 800a412:	230c      	movs	r3, #12
 800a414:	e262      	b.n	800a8dc <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800a416:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a418:	f7fe fa2c 	bl	8008874 <lock_fs>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <find_volume+0x4a>
 800a422:	230f      	movs	r3, #15
 800a424:	e25a      	b.n	800a8dc <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a42a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	f023 0301 	bic.w	r3, r3, #1
 800a432:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01a      	beq.n	800a472 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe f879 	bl	8008538 <disk_status>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a44c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10c      	bne.n	800a472 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a458:	79fb      	ldrb	r3, [r7, #7]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <find_volume+0x92>
 800a45e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a46a:	230a      	movs	r3, #10
 800a46c:	e236      	b.n	800a8dc <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800a46e:	2300      	movs	r3, #0
 800a470:	e234      	b.n	800a8dc <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe f871 	bl	800856c <disk_initialize>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a490:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a49c:	2303      	movs	r3, #3
 800a49e:	e21d      	b.n	800a8dc <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d007      	beq.n	800a4b6 <find_volume+0xda>
 800a4a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4aa:	f003 0304 	and.w	r3, r3, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a4b2:	230a      	movs	r3, #10
 800a4b4:	e212      	b.n	800a8dc <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	7858      	ldrb	r0, [r3, #1]
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	330c      	adds	r3, #12
 800a4be:	461a      	mov	r2, r3
 800a4c0:	2102      	movs	r1, #2
 800a4c2:	f7fe f8b9 	bl	8008638 <disk_ioctl>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <find_volume+0xf4>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e205      	b.n	800a8dc <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	899b      	ldrh	r3, [r3, #12]
 800a4d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d8:	d80d      	bhi.n	800a4f6 <find_volume+0x11a>
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	899b      	ldrh	r3, [r3, #12]
 800a4de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e2:	d308      	bcc.n	800a4f6 <find_volume+0x11a>
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	899b      	ldrh	r3, [r3, #12]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	899b      	ldrh	r3, [r3, #12]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <find_volume+0x11e>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e1f0      	b.n	800a8dc <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a4fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a502:	f7ff ff15 	bl	800a330 <check_fs>
 800a506:	4603      	mov	r3, r0
 800a508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a50c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a510:	2b02      	cmp	r3, #2
 800a512:	d14b      	bne.n	800a5ac <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a514:	2300      	movs	r3, #0
 800a516:	643b      	str	r3, [r7, #64]	; 0x40
 800a518:	e01f      	b.n	800a55a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a522:	011b      	lsls	r3, r3, #4
 800a524:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a528:	4413      	add	r3, r2
 800a52a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	3304      	adds	r3, #4
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d006      	beq.n	800a544 <find_volume+0x168>
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	3308      	adds	r3, #8
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe f8b2 	bl	80086a4 <ld_dword>
 800a540:	4602      	mov	r2, r0
 800a542:	e000      	b.n	800a546 <find_volume+0x16a>
 800a544:	2200      	movs	r2, #0
 800a546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a54e:	440b      	add	r3, r1
 800a550:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a556:	3301      	adds	r3, #1
 800a558:	643b      	str	r3, [r7, #64]	; 0x40
 800a55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d9dc      	bls.n	800a51a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a560:	2300      	movs	r3, #0
 800a562:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d002      	beq.n	800a570 <find_volume+0x194>
 800a56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56c:	3b01      	subs	r3, #1
 800a56e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a578:	4413      	add	r3, r2
 800a57a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a57e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a582:	2b00      	cmp	r3, #0
 800a584:	d005      	beq.n	800a592 <find_volume+0x1b6>
 800a586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a588:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a58a:	f7ff fed1 	bl	800a330 <check_fs>
 800a58e:	4603      	mov	r3, r0
 800a590:	e000      	b.n	800a594 <find_volume+0x1b8>
 800a592:	2303      	movs	r3, #3
 800a594:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a598:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d905      	bls.n	800a5ac <find_volume+0x1d0>
 800a5a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d9e1      	bls.n	800a570 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a5ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	d101      	bne.n	800a5b8 <find_volume+0x1dc>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e191      	b.n	800a8dc <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a5b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d901      	bls.n	800a5c4 <find_volume+0x1e8>
 800a5c0:	230d      	movs	r3, #13
 800a5c2:	e18b      	b.n	800a8dc <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c6:	333c      	adds	r3, #60	; 0x3c
 800a5c8:	330b      	adds	r3, #11
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe f852 	bl	8008674 <ld_word>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d001      	beq.n	800a5e0 <find_volume+0x204>
 800a5dc:	230d      	movs	r3, #13
 800a5de:	e17d      	b.n	800a8dc <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	333c      	adds	r3, #60	; 0x3c
 800a5e4:	3316      	adds	r3, #22
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe f844 	bl	8008674 <ld_word>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <find_volume+0x228>
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	333c      	adds	r3, #60	; 0x3c
 800a5fa:	3324      	adds	r3, #36	; 0x24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe f851 	bl	80086a4 <ld_dword>
 800a602:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a608:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	789b      	ldrb	r3, [r3, #2]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d005      	beq.n	800a628 <find_volume+0x24c>
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	789b      	ldrb	r3, [r3, #2]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d001      	beq.n	800a628 <find_volume+0x24c>
 800a624:	230d      	movs	r3, #13
 800a626:	e159      	b.n	800a8dc <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62a:	789b      	ldrb	r3, [r3, #2]
 800a62c:	461a      	mov	r2, r3
 800a62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a630:	fb02 f303 	mul.w	r3, r2, r3
 800a634:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	895b      	ldrh	r3, [r3, #10]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d008      	beq.n	800a65c <find_volume+0x280>
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	895b      	ldrh	r3, [r3, #10]
 800a64e:	461a      	mov	r2, r3
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	895b      	ldrh	r3, [r3, #10]
 800a654:	3b01      	subs	r3, #1
 800a656:	4013      	ands	r3, r2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <find_volume+0x284>
 800a65c:	230d      	movs	r3, #13
 800a65e:	e13d      	b.n	800a8dc <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	333c      	adds	r3, #60	; 0x3c
 800a664:	3311      	adds	r3, #17
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe f804 	bl	8008674 <ld_word>
 800a66c:	4603      	mov	r3, r0
 800a66e:	461a      	mov	r2, r3
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a676:	891b      	ldrh	r3, [r3, #8]
 800a678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a67a:	8992      	ldrh	r2, [r2, #12]
 800a67c:	0952      	lsrs	r2, r2, #5
 800a67e:	b292      	uxth	r2, r2
 800a680:	fbb3 f1f2 	udiv	r1, r3, r2
 800a684:	fb02 f201 	mul.w	r2, r2, r1
 800a688:	1a9b      	subs	r3, r3, r2
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <find_volume+0x2bc>
 800a690:	230d      	movs	r3, #13
 800a692:	e123      	b.n	800a8dc <find_volume+0x500>
 800a694:	20000204 	.word	0x20000204

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	333c      	adds	r3, #60	; 0x3c
 800a69c:	3313      	adds	r3, #19
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7fd ffe8 	bl	8008674 <ld_word>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <find_volume+0x2e0>
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	333c      	adds	r3, #60	; 0x3c
 800a6b2:	3320      	adds	r3, #32
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fd fff5 	bl	80086a4 <ld_dword>
 800a6ba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	333c      	adds	r3, #60	; 0x3c
 800a6c0:	330e      	adds	r3, #14
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd ffd6 	bl	8008674 <ld_word>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a6cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <find_volume+0x2fa>
 800a6d2:	230d      	movs	r3, #13
 800a6d4:	e102      	b.n	800a8dc <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a6d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6da:	4413      	add	r3, r2
 800a6dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6de:	8911      	ldrh	r1, [r2, #8]
 800a6e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6e2:	8992      	ldrh	r2, [r2, #12]
 800a6e4:	0952      	lsrs	r2, r2, #5
 800a6e6:	b292      	uxth	r2, r2
 800a6e8:	fbb1 f2f2 	udiv	r2, r1, r2
 800a6ec:	b292      	uxth	r2, r2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a6f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d201      	bcs.n	800a6fe <find_volume+0x322>
 800a6fa:	230d      	movs	r3, #13
 800a6fc:	e0ee      	b.n	800a8dc <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a6fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a706:	8952      	ldrh	r2, [r2, #10]
 800a708:	fbb3 f3f2 	udiv	r3, r3, r2
 800a70c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <find_volume+0x33c>
 800a714:	230d      	movs	r3, #13
 800a716:	e0e1      	b.n	800a8dc <find_volume+0x500>
		fmt = FS_FAT32;
 800a718:	2303      	movs	r3, #3
 800a71a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a724:	4293      	cmp	r3, r2
 800a726:	d802      	bhi.n	800a72e <find_volume+0x352>
 800a728:	2302      	movs	r3, #2
 800a72a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a734:	4293      	cmp	r3, r2
 800a736:	d802      	bhi.n	800a73e <find_volume+0x362>
 800a738:	2301      	movs	r3, #1
 800a73a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	1c9a      	adds	r2, r3, #2
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a74a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a74c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a750:	441a      	add	r2, r3
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a756:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	441a      	add	r2, r3
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800a760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a764:	2b03      	cmp	r3, #3
 800a766:	d11e      	bne.n	800a7a6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76a:	333c      	adds	r3, #60	; 0x3c
 800a76c:	332a      	adds	r3, #42	; 0x2a
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd ff80 	bl	8008674 <ld_word>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <find_volume+0x3a2>
 800a77a:	230d      	movs	r3, #13
 800a77c:	e0ae      	b.n	800a8dc <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	891b      	ldrh	r3, [r3, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <find_volume+0x3ae>
 800a786:	230d      	movs	r3, #13
 800a788:	e0a8      	b.n	800a8dc <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	333c      	adds	r3, #60	; 0x3c
 800a78e:	332c      	adds	r3, #44	; 0x2c
 800a790:	4618      	mov	r0, r3
 800a792:	f7fd ff87 	bl	80086a4 <ld_dword>
 800a796:	4602      	mov	r2, r0
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	6a1b      	ldr	r3, [r3, #32]
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a7a4:	e01f      	b.n	800a7e6 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	891b      	ldrh	r3, [r3, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <find_volume+0x3d6>
 800a7ae:	230d      	movs	r3, #13
 800a7b0:	e094      	b.n	800a8dc <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b8:	441a      	add	r2, r3
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a7be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d103      	bne.n	800a7ce <find_volume+0x3f2>
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	005b      	lsls	r3, r3, #1
 800a7cc:	e00a      	b.n	800a7e4 <find_volume+0x408>
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d0:	6a1a      	ldr	r2, [r3, #32]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	4413      	add	r3, r2
 800a7d8:	085a      	lsrs	r2, r3, #1
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a7e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	899b      	ldrh	r3, [r3, #12]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7f8:	8989      	ldrh	r1, [r1, #12]
 800a7fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d201      	bcs.n	800a806 <find_volume+0x42a>
 800a802:	230d      	movs	r3, #13
 800a804:	e06a      	b.n	800a8dc <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a80c:	61da      	str	r2, [r3, #28]
 800a80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a810:	69da      	ldr	r2, [r3, #28]
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	2280      	movs	r2, #128	; 0x80
 800a81a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a81c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a820:	2b03      	cmp	r3, #3
 800a822:	d149      	bne.n	800a8b8 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	333c      	adds	r3, #60	; 0x3c
 800a828:	3330      	adds	r3, #48	; 0x30
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fd ff22 	bl	8008674 <ld_word>
 800a830:	4603      	mov	r3, r0
 800a832:	2b01      	cmp	r3, #1
 800a834:	d140      	bne.n	800a8b8 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a838:	3301      	adds	r3, #1
 800a83a:	4619      	mov	r1, r3
 800a83c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a83e:	f7fe f9fb 	bl	8008c38 <move_window>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d137      	bne.n	800a8b8 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	2200      	movs	r2, #0
 800a84c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a850:	333c      	adds	r3, #60	; 0x3c
 800a852:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd ff0c 	bl	8008674 <ld_word>
 800a85c:	4603      	mov	r3, r0
 800a85e:	461a      	mov	r2, r3
 800a860:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a864:	429a      	cmp	r2, r3
 800a866:	d127      	bne.n	800a8b8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86a:	333c      	adds	r3, #60	; 0x3c
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fd ff19 	bl	80086a4 <ld_dword>
 800a872:	4603      	mov	r3, r0
 800a874:	4a1b      	ldr	r2, [pc, #108]	; (800a8e4 <find_volume+0x508>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d11e      	bne.n	800a8b8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	333c      	adds	r3, #60	; 0x3c
 800a87e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a882:	4618      	mov	r0, r3
 800a884:	f7fd ff0e 	bl	80086a4 <ld_dword>
 800a888:	4603      	mov	r3, r0
 800a88a:	4a17      	ldr	r2, [pc, #92]	; (800a8e8 <find_volume+0x50c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d113      	bne.n	800a8b8 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	333c      	adds	r3, #60	; 0x3c
 800a894:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fd ff03 	bl	80086a4 <ld_dword>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	333c      	adds	r3, #60	; 0x3c
 800a8a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fd fef9 	bl	80086a4 <ld_dword>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a8be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <find_volume+0x510>)
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <find_volume+0x510>)
 800a8ca:	801a      	strh	r2, [r3, #0]
 800a8cc:	4b07      	ldr	r3, [pc, #28]	; (800a8ec <find_volume+0x510>)
 800a8ce:	881a      	ldrh	r2, [r3, #0]
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a8d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8d6:	f7fe f947 	bl	8008b68 <clear_lock>
#endif
	return FR_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3758      	adds	r7, #88	; 0x58
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	41615252 	.word	0x41615252
 800a8e8:	61417272 	.word	0x61417272
 800a8ec:	20000208 	.word	0x20000208

0800a8f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a8fa:	2309      	movs	r3, #9
 800a8fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d02e      	beq.n	800a962 <validate+0x72>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d02a      	beq.n	800a962 <validate+0x72>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d025      	beq.n	800a962 <validate+0x72>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	889a      	ldrh	r2, [r3, #4]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	88db      	ldrh	r3, [r3, #6]
 800a920:	429a      	cmp	r2, r3
 800a922:	d11e      	bne.n	800a962 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fd ffa3 	bl	8008874 <lock_fs>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d014      	beq.n	800a95e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	785b      	ldrb	r3, [r3, #1]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fd fdfc 	bl	8008538 <disk_status>
 800a940:	4603      	mov	r3, r0
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <validate+0x60>
				res = FR_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]
 800a94e:	e008      	b.n	800a962 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f7fd ffa2 	bl	80088a0 <unlock_fs>
 800a95c:	e001      	b.n	800a962 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a95e:	230f      	movs	r3, #15
 800a960:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <validate+0x7e>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	e000      	b.n	800a970 <validate+0x80>
 800a96e:	2300      	movs	r3, #0
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	6013      	str	r3, [r2, #0]
	return res;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a992:	f107 0310 	add.w	r3, r7, #16
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fc86 	bl	800a2a8 <get_ldnumber>
 800a99c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	da01      	bge.n	800a9a8 <f_mount+0x28>
 800a9a4:	230b      	movs	r3, #11
 800a9a6:	e048      	b.n	800aa3a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a9a8:	4a26      	ldr	r2, [pc, #152]	; (800aa44 <f_mount+0xc4>)
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00f      	beq.n	800a9d8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a9b8:	69b8      	ldr	r0, [r7, #24]
 800a9ba:	f7fe f8d5 	bl	8008b68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f000 fdab 	bl	800b51e <ff_del_syncobj>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <f_mount+0x52>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e033      	b.n	800aa3a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00f      	beq.n	800a9fe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3314      	adds	r3, #20
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f000 fd7a 	bl	800b4e8 <ff_cre_syncobj>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <f_mount+0x7e>
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	e01d      	b.n	800aa3a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4910      	ldr	r1, [pc, #64]	; (800aa44 <f_mount+0xc4>)
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <f_mount+0x94>
 800aa0e:	79fb      	ldrb	r3, [r7, #7]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d001      	beq.n	800aa18 <f_mount+0x98>
 800aa14:	2300      	movs	r3, #0
 800aa16:	e010      	b.n	800aa3a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aa18:	f107 010c 	add.w	r1, r7, #12
 800aa1c:	f107 0308 	add.w	r3, r7, #8
 800aa20:	2200      	movs	r2, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7ff fcda 	bl	800a3dc <find_volume>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	7dfa      	ldrb	r2, [r7, #23]
 800aa30:	4611      	mov	r1, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fd ff34 	bl	80088a0 <unlock_fs>
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3720      	adds	r7, #32
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000204 	.word	0x20000204

0800aa48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b09a      	sub	sp, #104	; 0x68
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <f_open+0x18>
 800aa5c:	2309      	movs	r3, #9
 800aa5e:	e1d7      	b.n	800ae10 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aa68:	79fa      	ldrb	r2, [r7, #7]
 800aa6a:	f107 0110 	add.w	r1, r7, #16
 800aa6e:	f107 0308 	add.w	r3, r7, #8
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff fcb2 	bl	800a3dc <find_volume>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800aa7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f040 81b4 	bne.w	800adf0 <f_open+0x3a8>
		dj.obj.fs = fs;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800aa8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aa90:	f000 fd71 	bl	800b576 <ff_memalloc>
 800aa94:	65b8      	str	r0, [r7, #88]	; 0x58
 800aa96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <f_open+0x62>
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	2111      	movs	r1, #17
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fd fefd 	bl	80088a0 <unlock_fs>
 800aaa6:	2311      	movs	r3, #17
 800aaa8:	e1b2      	b.n	800ae10 <f_open+0x3c8>
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaae:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	f107 0314 	add.w	r3, r7, #20
 800aab6:	4611      	mov	r1, r2
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff fb7f 	bl	800a1bc <follow_path>
 800aabe:	4603      	mov	r3, r0
 800aac0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aac4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d11a      	bne.n	800ab02 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aacc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aad0:	b25b      	sxtb	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	da03      	bge.n	800aade <f_open+0x96>
				res = FR_INVALID_NAME;
 800aad6:	2306      	movs	r3, #6
 800aad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aadc:	e011      	b.n	800ab02 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aade:	79fb      	ldrb	r3, [r7, #7]
 800aae0:	f023 0301 	bic.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bf14      	ite	ne
 800aae8:	2301      	movne	r3, #1
 800aaea:	2300      	moveq	r3, #0
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f107 0314 	add.w	r3, r7, #20
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fd feee 	bl	80088d8 <chk_lock>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	f003 031c 	and.w	r3, r3, #28
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d07f      	beq.n	800ac0c <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800ab0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d017      	beq.n	800ab44 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ab14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d10e      	bne.n	800ab3a <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ab1c:	f7fd ff38 	bl	8008990 <enq_lock>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d006      	beq.n	800ab34 <f_open+0xec>
 800ab26:	f107 0314 	add.w	r3, r7, #20
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff f896 	bl	8009c5c <dir_register>
 800ab30:	4603      	mov	r3, r0
 800ab32:	e000      	b.n	800ab36 <f_open+0xee>
 800ab34:	2312      	movs	r3, #18
 800ab36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	f043 0308 	orr.w	r3, r3, #8
 800ab40:	71fb      	strb	r3, [r7, #7]
 800ab42:	e010      	b.n	800ab66 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ab44:	7ebb      	ldrb	r3, [r7, #26]
 800ab46:	f003 0311 	and.w	r3, r3, #17
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <f_open+0x10e>
					res = FR_DENIED;
 800ab4e:	2307      	movs	r3, #7
 800ab50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ab54:	e007      	b.n	800ab66 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	f003 0304 	and.w	r3, r3, #4
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <f_open+0x11e>
 800ab60:	2308      	movs	r3, #8
 800ab62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ab66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d168      	bne.n	800ac40 <f_open+0x1f8>
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	f003 0308 	and.w	r3, r3, #8
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d063      	beq.n	800ac40 <f_open+0x1f8>
				dw = GET_FATTIME();
 800ab78:	f7fd fc80 	bl	800847c <get_fattime>
 800ab7c:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab80:	330e      	adds	r3, #14
 800ab82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fd fdcb 	bl	8008720 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ab8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8c:	3316      	adds	r3, #22
 800ab8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fd fdc5 	bl	8008720 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	330b      	adds	r3, #11
 800ab9a:	2220      	movs	r2, #32
 800ab9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aba2:	4611      	mov	r1, r2
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe fdcf 	bl	8009748 <ld_clust>
 800abaa:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800abb0:	2200      	movs	r2, #0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fde7 	bl	8009786 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800abb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abba:	331c      	adds	r3, #28
 800abbc:	2100      	movs	r1, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fd fdae 	bl	8008720 <st_dword>
					fs->wflag = 1;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	2201      	movs	r2, #1
 800abc8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800abca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d037      	beq.n	800ac40 <f_open+0x1f8>
						dw = fs->winsect;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800abd6:	f107 0314 	add.w	r3, r7, #20
 800abda:	2200      	movs	r2, #0
 800abdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe fad7 	bl	8009192 <remove_chain>
 800abe4:	4603      	mov	r3, r0
 800abe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800abea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d126      	bne.n	800ac40 <f_open+0x1f8>
							res = move_window(fs, dw);
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe f81e 	bl	8008c38 <move_window>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac06:	3a01      	subs	r2, #1
 800ac08:	619a      	str	r2, [r3, #24]
 800ac0a:	e019      	b.n	800ac40 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ac0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d115      	bne.n	800ac40 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ac14:	7ebb      	ldrb	r3, [r7, #26]
 800ac16:	f003 0310 	and.w	r3, r3, #16
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <f_open+0x1de>
					res = FR_NO_FILE;
 800ac1e:	2304      	movs	r3, #4
 800ac20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ac24:	e00c      	b.n	800ac40 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	f003 0302 	and.w	r3, r3, #2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <f_open+0x1f8>
 800ac30:	7ebb      	ldrb	r3, [r7, #26]
 800ac32:	f003 0301 	and.w	r3, r3, #1
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <f_open+0x1f8>
						res = FR_DENIED;
 800ac3a:	2307      	movs	r3, #7
 800ac3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ac40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d128      	bne.n	800ac9a <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	f003 0308 	and.w	r3, r3, #8
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d003      	beq.n	800ac5a <f_open+0x212>
				mode |= FA_MODIFIED;
 800ac52:	79fb      	ldrb	r3, [r7, #7]
 800ac54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ac62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	f023 0301 	bic.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	bf14      	ite	ne
 800ac72:	2301      	movne	r3, #1
 800ac74:	2300      	moveq	r3, #0
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	461a      	mov	r2, r3
 800ac7a:	f107 0314 	add.w	r3, r7, #20
 800ac7e:	4611      	mov	r1, r2
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7fd fea7 	bl	80089d4 <inc_lock>
 800ac86:	4602      	mov	r2, r0
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d102      	bne.n	800ac9a <f_open+0x252>
 800ac94:	2302      	movs	r3, #2
 800ac96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ac9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f040 80a3 	bne.w	800adea <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aca8:	4611      	mov	r1, r2
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe fd4c 	bl	8009748 <ld_clust>
 800acb0:	4602      	mov	r2, r0
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800acb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb8:	331c      	adds	r3, #28
 800acba:	4618      	mov	r0, r3
 800acbc:	f7fd fcf2 	bl	80086a4 <ld_dword>
 800acc0:	4602      	mov	r2, r0
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	88da      	ldrh	r2, [r3, #6]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	79fa      	ldrb	r2, [r7, #7]
 800acde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3330      	adds	r3, #48	; 0x30
 800acf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fd fd5c 	bl	80087ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	f003 0320 	and.w	r3, r3, #32
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d06e      	beq.n	800adea <f_open+0x3a2>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d06a      	beq.n	800adea <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	68da      	ldr	r2, [r3, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	895b      	ldrh	r3, [r3, #10]
 800ad20:	461a      	mov	r2, r3
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	899b      	ldrh	r3, [r3, #12]
 800ad26:	fb03 f302 	mul.w	r3, r3, r2
 800ad2a:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad38:	e016      	b.n	800ad68 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe f837 	bl	8008db2 <get_fat>
 800ad44:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ad46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d802      	bhi.n	800ad52 <f_open+0x30a>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ad52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad58:	d102      	bne.n	800ad60 <f_open+0x318>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ad60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d103      	bne.n	800ad78 <f_open+0x330>
 800ad70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d8e0      	bhi.n	800ad3a <f_open+0x2f2>
				}
				fp->clust = clst;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ad7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d131      	bne.n	800adea <f_open+0x3a2>
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	899b      	ldrh	r3, [r3, #12]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad92:	fb02 f201 	mul.w	r2, r2, r1
 800ad96:	1a9b      	subs	r3, r3, r2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d026      	beq.n	800adea <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fd ffe7 	bl	8008d74 <clust2sect>
 800ada6:	64b8      	str	r0, [r7, #72]	; 0x48
 800ada8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d103      	bne.n	800adb6 <f_open+0x36e>
						res = FR_INT_ERR;
 800adae:	2302      	movs	r3, #2
 800adb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800adb4:	e019      	b.n	800adea <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	899b      	ldrh	r3, [r3, #12]
 800adba:	461a      	mov	r2, r3
 800adbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800adc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc4:	441a      	add	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	7858      	ldrb	r0, [r3, #1]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a1a      	ldr	r2, [r3, #32]
 800add8:	2301      	movs	r3, #1
 800adda:	f7fd fbed 	bl	80085b8 <disk_read>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <f_open+0x3a2>
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800adea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800adec:	f000 fbcf 	bl	800b58e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800adf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <f_open+0x3b6>
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ae04:	4611      	mov	r1, r2
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fd fd4a 	bl	80088a0 <unlock_fs>
 800ae0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3768      	adds	r7, #104	; 0x68
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b08e      	sub	sp, #56	; 0x38
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f107 0214 	add.w	r2, r7, #20
 800ae36:	4611      	mov	r1, r2
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff fd59 	bl	800a8f0 <validate>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ae44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d107      	bne.n	800ae5c <f_read+0x44>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	7d5b      	ldrb	r3, [r3, #21]
 800ae50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ae54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d009      	beq.n	800ae70 <f_read+0x58>
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ae62:	4611      	mov	r1, r2
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fd fd1b 	bl	80088a0 <unlock_fs>
 800ae6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae6e:	e15d      	b.n	800b12c <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	7d1b      	ldrb	r3, [r3, #20]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <f_read+0x72>
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2107      	movs	r1, #7
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fd fd0d 	bl	80088a0 <unlock_fs>
 800ae86:	2307      	movs	r3, #7
 800ae88:	e150      	b.n	800b12c <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	68da      	ldr	r2, [r3, #12]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	f240 813c 	bls.w	800b118 <f_read+0x300>
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800aea4:	e138      	b.n	800b118 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	8992      	ldrh	r2, [r2, #12]
 800aeae:	fbb3 f1f2 	udiv	r1, r3, r2
 800aeb2:	fb02 f201 	mul.w	r2, r2, r1
 800aeb6:	1a9b      	subs	r3, r3, r2
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f040 80f3 	bne.w	800b0a4 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	8992      	ldrh	r2, [r2, #12]
 800aec6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	8952      	ldrh	r2, [r2, #10]
 800aece:	3a01      	subs	r2, #1
 800aed0:	4013      	ands	r3, r2
 800aed2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d139      	bne.n	800af4e <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d103      	bne.n	800aeea <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	633b      	str	r3, [r7, #48]	; 0x30
 800aee8:	e013      	b.n	800af12 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	4619      	mov	r1, r3
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f7fe fa47 	bl	800938c <clmt_clust>
 800aefe:	6338      	str	r0, [r7, #48]	; 0x30
 800af00:	e007      	b.n	800af12 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	4619      	mov	r1, r3
 800af0a:	4610      	mov	r0, r2
 800af0c:	f7fd ff51 	bl	8008db2 <get_fat>
 800af10:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	2b01      	cmp	r3, #1
 800af16:	d809      	bhi.n	800af2c <f_read+0x114>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2202      	movs	r2, #2
 800af1c:	755a      	strb	r2, [r3, #21]
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2102      	movs	r1, #2
 800af22:	4618      	mov	r0, r3
 800af24:	f7fd fcbc 	bl	80088a0 <unlock_fs>
 800af28:	2302      	movs	r3, #2
 800af2a:	e0ff      	b.n	800b12c <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af32:	d109      	bne.n	800af48 <f_read+0x130>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2201      	movs	r2, #1
 800af38:	755a      	strb	r2, [r3, #21]
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2101      	movs	r1, #1
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fd fcae 	bl	80088a0 <unlock_fs>
 800af44:	2301      	movs	r3, #1
 800af46:	e0f1      	b.n	800b12c <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af4c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	4619      	mov	r1, r3
 800af56:	4610      	mov	r0, r2
 800af58:	f7fd ff0c 	bl	8008d74 <clust2sect>
 800af5c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d109      	bne.n	800af78 <f_read+0x160>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2202      	movs	r2, #2
 800af68:	755a      	strb	r2, [r3, #21]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2102      	movs	r1, #2
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fd fc96 	bl	80088a0 <unlock_fs>
 800af74:	2302      	movs	r3, #2
 800af76:	e0d9      	b.n	800b12c <f_read+0x314>
			sect += csect;
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	4413      	add	r3, r2
 800af7e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	899b      	ldrh	r3, [r3, #12]
 800af84:	461a      	mov	r2, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	fbb3 f3f2 	udiv	r3, r3, r2
 800af8c:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	2b00      	cmp	r3, #0
 800af92:	d046      	beq.n	800b022 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800af94:	69fa      	ldr	r2, [r7, #28]
 800af96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af98:	4413      	add	r3, r2
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	8952      	ldrh	r2, [r2, #10]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d905      	bls.n	800afae <f_read+0x196>
					cc = fs->csize - csect;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	895b      	ldrh	r3, [r3, #10]
 800afa6:	461a      	mov	r2, r3
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	7858      	ldrb	r0, [r3, #1]
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	69ba      	ldr	r2, [r7, #24]
 800afb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afb8:	f7fd fafe 	bl	80085b8 <disk_read>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d009      	beq.n	800afd6 <f_read+0x1be>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	755a      	strb	r2, [r3, #21]
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2101      	movs	r1, #1
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fd fc67 	bl	80088a0 <unlock_fs>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e0aa      	b.n	800b12c <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	7d1b      	ldrb	r3, [r3, #20]
 800afda:	b25b      	sxtb	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	da18      	bge.n	800b012 <f_read+0x1fa>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6a1a      	ldr	r2, [r3, #32]
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afea:	429a      	cmp	r2, r3
 800afec:	d911      	bls.n	800b012 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6a1a      	ldr	r2, [r3, #32]
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	8992      	ldrh	r2, [r2, #12]
 800affa:	fb02 f303 	mul.w	r3, r2, r3
 800affe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b000:	18d0      	adds	r0, r2, r3
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	899b      	ldrh	r3, [r3, #12]
 800b00c:	461a      	mov	r2, r3
 800b00e:	f7fd fbb3 	bl	8008778 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	899b      	ldrh	r3, [r3, #12]
 800b016:	461a      	mov	r2, r3
 800b018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01a:	fb02 f303 	mul.w	r3, r2, r3
 800b01e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b020:	e066      	b.n	800b0f0 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d038      	beq.n	800b09e <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	7d1b      	ldrb	r3, [r3, #20]
 800b030:	b25b      	sxtb	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	da1d      	bge.n	800b072 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	7858      	ldrb	r0, [r3, #1]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6a1a      	ldr	r2, [r3, #32]
 800b044:	2301      	movs	r3, #1
 800b046:	f7fd fad7 	bl	80085f8 <disk_write>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d009      	beq.n	800b064 <f_read+0x24c>
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2201      	movs	r2, #1
 800b054:	755a      	strb	r2, [r3, #21]
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2101      	movs	r1, #1
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fd fc20 	bl	80088a0 <unlock_fs>
 800b060:	2301      	movs	r3, #1
 800b062:	e063      	b.n	800b12c <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	7d1b      	ldrb	r3, [r3, #20]
 800b068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	7858      	ldrb	r0, [r3, #1]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b07c:	2301      	movs	r3, #1
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	f7fd fa9a 	bl	80085b8 <disk_read>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <f_read+0x286>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2201      	movs	r2, #1
 800b08e:	755a      	strb	r2, [r3, #21]
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2101      	movs	r1, #1
 800b094:	4618      	mov	r0, r3
 800b096:	f7fd fc03 	bl	80088a0 <unlock_fs>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e046      	b.n	800b12c <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	899b      	ldrh	r3, [r3, #12]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	8992      	ldrh	r2, [r2, #12]
 800b0b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0b6:	fb02 f201 	mul.w	r2, r2, r1
 800b0ba:	1a9b      	subs	r3, r3, r2
 800b0bc:	1ac3      	subs	r3, r0, r3
 800b0be:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d901      	bls.n	800b0cc <f_read+0x2b4>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	8992      	ldrh	r2, [r2, #12]
 800b0da:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0de:	fb02 f200 	mul.w	r2, r2, r0
 800b0e2:	1a9b      	subs	r3, r3, r2
 800b0e4:	440b      	add	r3, r1
 800b0e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ec:	f7fd fb44 	bl	8008778 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f4:	4413      	add	r3, r2
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	699a      	ldr	r2, [r3, #24]
 800b0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fe:	441a      	add	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	619a      	str	r2, [r3, #24]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10a:	441a      	add	r2, r3
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f47f aec3 	bne.w	800aea6 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2100      	movs	r1, #0
 800b124:	4618      	mov	r0, r3
 800b126:	f7fd fbbb 	bl	80088a0 <unlock_fs>
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3738      	adds	r7, #56	; 0x38
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f107 0208 	add.w	r2, r7, #8
 800b142:	4611      	mov	r1, r2
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff fbd3 	bl	800a8f0 <validate>
 800b14a:	4603      	mov	r3, r0
 800b14c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d16d      	bne.n	800b230 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	7d1b      	ldrb	r3, [r3, #20]
 800b158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d067      	beq.n	800b230 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	7d1b      	ldrb	r3, [r3, #20]
 800b164:	b25b      	sxtb	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	da1a      	bge.n	800b1a0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	7858      	ldrb	r0, [r3, #1]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1a      	ldr	r2, [r3, #32]
 800b178:	2301      	movs	r3, #1
 800b17a:	f7fd fa3d 	bl	80085f8 <disk_write>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d006      	beq.n	800b192 <f_sync+0x5e>
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2101      	movs	r1, #1
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fd fb89 	bl	80088a0 <unlock_fs>
 800b18e:	2301      	movs	r3, #1
 800b190:	e055      	b.n	800b23e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	7d1b      	ldrb	r3, [r3, #20]
 800b196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b1a0:	f7fd f96c 	bl	800847c <get_fattime>
 800b1a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7fd fd42 	bl	8008c38 <move_window>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b1b8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d138      	bne.n	800b230 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	330b      	adds	r3, #11
 800b1c8:	781a      	ldrb	r2, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	330b      	adds	r3, #11
 800b1ce:	f042 0220 	orr.w	r2, r2, #32
 800b1d2:	b2d2      	uxtb	r2, r2
 800b1d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	68f9      	ldr	r1, [r7, #12]
 800b1e2:	f7fe fad0 	bl	8009786 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f103 021c 	add.w	r2, r3, #28
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7fd fa94 	bl	8008720 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	3316      	adds	r3, #22
 800b1fc:	6939      	ldr	r1, [r7, #16]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fd fa8e 	bl	8008720 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3312      	adds	r3, #18
 800b208:	2100      	movs	r1, #0
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fd fa6d 	bl	80086ea <st_word>
					fs->wflag = 1;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	2201      	movs	r2, #1
 800b214:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fd fd3b 	bl	8008c94 <sync_fs>
 800b21e:	4603      	mov	r3, r0
 800b220:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	7d1b      	ldrb	r3, [r3, #20]
 800b226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	7dfa      	ldrb	r2, [r7, #23]
 800b234:	4611      	mov	r1, r2
 800b236:	4618      	mov	r0, r3
 800b238:	f7fd fb32 	bl	80088a0 <unlock_fs>
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b084      	sub	sp, #16
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff ff70 	bl	800b134 <f_sync>
 800b254:	4603      	mov	r3, r0
 800b256:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b258:	7bfb      	ldrb	r3, [r7, #15]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11d      	bne.n	800b29a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f107 0208 	add.w	r2, r7, #8
 800b264:	4611      	mov	r1, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f7ff fb42 	bl	800a8f0 <validate>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d111      	bne.n	800b29a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fd fc38 	bl	8008af0 <dec_lock>
 800b280:	4603      	mov	r3, r0
 800b282:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d102      	bne.n	800b290 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2100      	movs	r1, #0
 800b294:	4618      	mov	r0, r3
 800b296:	f7fd fb03 	bl	80088a0 <unlock_fs>
#endif
		}
	}
	return res;
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b087      	sub	sp, #28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b2ba:	4b1f      	ldr	r3, [pc, #124]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2bc:	7a5b      	ldrb	r3, [r3, #9]
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d131      	bne.n	800b328 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b2c4:	4b1c      	ldr	r3, [pc, #112]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2c6:	7a5b      	ldrb	r3, [r3, #9]
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	4b1a      	ldr	r3, [pc, #104]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b2d2:	4b19      	ldr	r3, [pc, #100]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2d4:	7a5b      	ldrb	r3, [r3, #9]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	4a17      	ldr	r2, [pc, #92]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b2e2:	4b15      	ldr	r3, [pc, #84]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2e4:	7a5b      	ldrb	r3, [r3, #9]
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	4b13      	ldr	r3, [pc, #76]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2ec:	4413      	add	r3, r2
 800b2ee:	79fa      	ldrb	r2, [r7, #7]
 800b2f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2f2:	4b11      	ldr	r3, [pc, #68]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2f4:	7a5b      	ldrb	r3, [r3, #9]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	b2d1      	uxtb	r1, r2
 800b2fc:	4a0e      	ldr	r2, [pc, #56]	; (800b338 <FATFS_LinkDriverEx+0x94>)
 800b2fe:	7251      	strb	r1, [r2, #9]
 800b300:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b302:	7dbb      	ldrb	r3, [r7, #22]
 800b304:	3330      	adds	r3, #48	; 0x30
 800b306:	b2da      	uxtb	r2, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	3301      	adds	r3, #1
 800b310:	223a      	movs	r2, #58	; 0x3a
 800b312:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	3302      	adds	r3, #2
 800b318:	222f      	movs	r2, #47	; 0x2f
 800b31a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	3303      	adds	r3, #3
 800b320:	2200      	movs	r2, #0
 800b322:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	2000022c 	.word	0x2000022c

0800b33c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b346:	2200      	movs	r2, #0
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff ffaa 	bl	800b2a4 <FATFS_LinkDriverEx>
 800b350:	4603      	mov	r3, r0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	6039      	str	r1, [r7, #0]
 800b366:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b368:	88fb      	ldrh	r3, [r7, #6]
 800b36a:	2b7f      	cmp	r3, #127	; 0x7f
 800b36c:	d802      	bhi.n	800b374 <ff_convert+0x18>
		c = chr;
 800b36e:	88fb      	ldrh	r3, [r7, #6]
 800b370:	81fb      	strh	r3, [r7, #14]
 800b372:	e025      	b.n	800b3c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00b      	beq.n	800b392 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b37a:	88fb      	ldrh	r3, [r7, #6]
 800b37c:	2bff      	cmp	r3, #255	; 0xff
 800b37e:	d805      	bhi.n	800b38c <ff_convert+0x30>
 800b380:	88fb      	ldrh	r3, [r7, #6]
 800b382:	3b80      	subs	r3, #128	; 0x80
 800b384:	4a12      	ldr	r2, [pc, #72]	; (800b3d0 <ff_convert+0x74>)
 800b386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b38a:	e000      	b.n	800b38e <ff_convert+0x32>
 800b38c:	2300      	movs	r3, #0
 800b38e:	81fb      	strh	r3, [r7, #14]
 800b390:	e016      	b.n	800b3c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b392:	2300      	movs	r3, #0
 800b394:	81fb      	strh	r3, [r7, #14]
 800b396:	e009      	b.n	800b3ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b398:	89fb      	ldrh	r3, [r7, #14]
 800b39a:	4a0d      	ldr	r2, [pc, #52]	; (800b3d0 <ff_convert+0x74>)
 800b39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3a0:	88fa      	ldrh	r2, [r7, #6]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d006      	beq.n	800b3b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b3a6:	89fb      	ldrh	r3, [r7, #14]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	81fb      	strh	r3, [r7, #14]
 800b3ac:	89fb      	ldrh	r3, [r7, #14]
 800b3ae:	2b7f      	cmp	r3, #127	; 0x7f
 800b3b0:	d9f2      	bls.n	800b398 <ff_convert+0x3c>
 800b3b2:	e000      	b.n	800b3b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b3b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b3b6:	89fb      	ldrh	r3, [r7, #14]
 800b3b8:	3380      	adds	r3, #128	; 0x80
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b3c0:	89fb      	ldrh	r3, [r7, #14]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	08010934 	.word	0x08010934

0800b3d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	4603      	mov	r3, r0
 800b3dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b3de:	88fb      	ldrh	r3, [r7, #6]
 800b3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e4:	d201      	bcs.n	800b3ea <ff_wtoupper+0x16>
 800b3e6:	4b3e      	ldr	r3, [pc, #248]	; (800b4e0 <ff_wtoupper+0x10c>)
 800b3e8:	e000      	b.n	800b3ec <ff_wtoupper+0x18>
 800b3ea:	4b3e      	ldr	r3, [pc, #248]	; (800b4e4 <ff_wtoupper+0x110>)
 800b3ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	1c9a      	adds	r2, r3, #2
 800b3f2:	617a      	str	r2, [r7, #20]
 800b3f4:	881b      	ldrh	r3, [r3, #0]
 800b3f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b3f8:	8a7b      	ldrh	r3, [r7, #18]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d068      	beq.n	800b4d0 <ff_wtoupper+0xfc>
 800b3fe:	88fa      	ldrh	r2, [r7, #6]
 800b400:	8a7b      	ldrh	r3, [r7, #18]
 800b402:	429a      	cmp	r2, r3
 800b404:	d364      	bcc.n	800b4d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	1c9a      	adds	r2, r3, #2
 800b40a:	617a      	str	r2, [r7, #20]
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	823b      	strh	r3, [r7, #16]
 800b410:	8a3b      	ldrh	r3, [r7, #16]
 800b412:	0a1b      	lsrs	r3, r3, #8
 800b414:	81fb      	strh	r3, [r7, #14]
 800b416:	8a3b      	ldrh	r3, [r7, #16]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b41c:	88fa      	ldrh	r2, [r7, #6]
 800b41e:	8a79      	ldrh	r1, [r7, #18]
 800b420:	8a3b      	ldrh	r3, [r7, #16]
 800b422:	440b      	add	r3, r1
 800b424:	429a      	cmp	r2, r3
 800b426:	da49      	bge.n	800b4bc <ff_wtoupper+0xe8>
			switch (cmd) {
 800b428:	89fb      	ldrh	r3, [r7, #14]
 800b42a:	2b08      	cmp	r3, #8
 800b42c:	d84f      	bhi.n	800b4ce <ff_wtoupper+0xfa>
 800b42e:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <ff_wtoupper+0x60>)
 800b430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b434:	0800b459 	.word	0x0800b459
 800b438:	0800b46b 	.word	0x0800b46b
 800b43c:	0800b481 	.word	0x0800b481
 800b440:	0800b489 	.word	0x0800b489
 800b444:	0800b491 	.word	0x0800b491
 800b448:	0800b499 	.word	0x0800b499
 800b44c:	0800b4a1 	.word	0x0800b4a1
 800b450:	0800b4a9 	.word	0x0800b4a9
 800b454:	0800b4b1 	.word	0x0800b4b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b458:	88fa      	ldrh	r2, [r7, #6]
 800b45a:	8a7b      	ldrh	r3, [r7, #18]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	4413      	add	r3, r2
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	80fb      	strh	r3, [r7, #6]
 800b468:	e027      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b46a:	88fa      	ldrh	r2, [r7, #6]
 800b46c:	8a7b      	ldrh	r3, [r7, #18]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	b29b      	uxth	r3, r3
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	b29b      	uxth	r3, r3
 800b478:	88fa      	ldrh	r2, [r7, #6]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	80fb      	strh	r3, [r7, #6]
 800b47e:	e01c      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b480:	88fb      	ldrh	r3, [r7, #6]
 800b482:	3b10      	subs	r3, #16
 800b484:	80fb      	strh	r3, [r7, #6]
 800b486:	e018      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b488:	88fb      	ldrh	r3, [r7, #6]
 800b48a:	3b20      	subs	r3, #32
 800b48c:	80fb      	strh	r3, [r7, #6]
 800b48e:	e014      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b490:	88fb      	ldrh	r3, [r7, #6]
 800b492:	3b30      	subs	r3, #48	; 0x30
 800b494:	80fb      	strh	r3, [r7, #6]
 800b496:	e010      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	3b1a      	subs	r3, #26
 800b49c:	80fb      	strh	r3, [r7, #6]
 800b49e:	e00c      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b4a0:	88fb      	ldrh	r3, [r7, #6]
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	80fb      	strh	r3, [r7, #6]
 800b4a6:	e008      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b4a8:	88fb      	ldrh	r3, [r7, #6]
 800b4aa:	3b50      	subs	r3, #80	; 0x50
 800b4ac:	80fb      	strh	r3, [r7, #6]
 800b4ae:	e004      	b.n	800b4ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b4b0:	88fb      	ldrh	r3, [r7, #6]
 800b4b2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b4b6:	80fb      	strh	r3, [r7, #6]
 800b4b8:	bf00      	nop
			}
			break;
 800b4ba:	e008      	b.n	800b4ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d195      	bne.n	800b3ee <ff_wtoupper+0x1a>
 800b4c2:	8a3b      	ldrh	r3, [r7, #16]
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b4cc:	e78f      	b.n	800b3ee <ff_wtoupper+0x1a>
			break;
 800b4ce:	bf00      	nop
	}

	return chr;
 800b4d0:	88fb      	ldrh	r3, [r7, #6]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	08010a34 	.word	0x08010a34
 800b4e4:	08010c28 	.word	0x08010c28

0800b4e8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	6039      	str	r1, [r7, #0]
 800b4f2:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	f000 fab9 	bl	800ba70 <osSemaphoreNew>
 800b4fe:	4602      	mov	r2, r0
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bf14      	ite	ne
 800b50c:	2301      	movne	r3, #1
 800b50e:	2300      	moveq	r3, #0
 800b510:	b2db      	uxtb	r3, r3
 800b512:	60fb      	str	r3, [r7, #12]

    return ret;
 800b514:	68fb      	ldr	r3, [r7, #12]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fbc2 	bl	800bcb0 <osSemaphoreDelete>
#endif
    return 1;
 800b52c:	2301      	movs	r3, #1
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b084      	sub	sp, #16
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fb1c 	bl	800bb84 <osSemaphoreAcquire>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800b552:	2301      	movs	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b556:	68fb      	ldr	r3, [r7, #12]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 fb5d 	bl	800bc28 <osSemaphoreRelease>
#endif
}
 800b56e:	bf00      	nop
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f003 fd9a 	bl	800f0b8 <pvPortMalloc>
 800b584:	4603      	mov	r3, r0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f003 fe5a 	bl	800f250 <vPortFree>
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <__NVIC_SetPriority>:
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	6039      	str	r1, [r7, #0]
 800b5ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b5b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	db0a      	blt.n	800b5ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	b2da      	uxtb	r2, r3
 800b5bc:	490c      	ldr	r1, [pc, #48]	; (800b5f0 <__NVIC_SetPriority+0x4c>)
 800b5be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5c2:	0112      	lsls	r2, r2, #4
 800b5c4:	b2d2      	uxtb	r2, r2
 800b5c6:	440b      	add	r3, r1
 800b5c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b5cc:	e00a      	b.n	800b5e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	4908      	ldr	r1, [pc, #32]	; (800b5f4 <__NVIC_SetPriority+0x50>)
 800b5d4:	79fb      	ldrb	r3, [r7, #7]
 800b5d6:	f003 030f 	and.w	r3, r3, #15
 800b5da:	3b04      	subs	r3, #4
 800b5dc:	0112      	lsls	r2, r2, #4
 800b5de:	b2d2      	uxtb	r2, r2
 800b5e0:	440b      	add	r3, r1
 800b5e2:	761a      	strb	r2, [r3, #24]
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	e000e100 	.word	0xe000e100
 800b5f4:	e000ed00 	.word	0xe000ed00

0800b5f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b5fc:	4b05      	ldr	r3, [pc, #20]	; (800b614 <SysTick_Handler+0x1c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b600:	f002 fdaa 	bl	800e158 <xTaskGetSchedulerState>
 800b604:	4603      	mov	r3, r0
 800b606:	2b01      	cmp	r3, #1
 800b608:	d001      	beq.n	800b60e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b60a:	f003 fcc5 	bl	800ef98 <xPortSysTickHandler>
  }
}
 800b60e:	bf00      	nop
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	e000e010 	.word	0xe000e010

0800b618 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b61c:	2100      	movs	r1, #0
 800b61e:	f06f 0004 	mvn.w	r0, #4
 800b622:	f7ff ffbf 	bl	800b5a4 <__NVIC_SetPriority>
#endif
}
 800b626:	bf00      	nop
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b632:	f3ef 8305 	mrs	r3, IPSR
 800b636:	603b      	str	r3, [r7, #0]
  return(result);
 800b638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b63e:	f06f 0305 	mvn.w	r3, #5
 800b642:	607b      	str	r3, [r7, #4]
 800b644:	e00c      	b.n	800b660 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b646:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <osKernelInitialize+0x44>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d105      	bne.n	800b65a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b64e:	4b08      	ldr	r3, [pc, #32]	; (800b670 <osKernelInitialize+0x44>)
 800b650:	2201      	movs	r2, #1
 800b652:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b654:	2300      	movs	r3, #0
 800b656:	607b      	str	r3, [r7, #4]
 800b658:	e002      	b.n	800b660 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b65a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b65e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b660:	687b      	ldr	r3, [r7, #4]
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20000238 	.word	0x20000238

0800b674 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b67a:	f3ef 8305 	mrs	r3, IPSR
 800b67e:	603b      	str	r3, [r7, #0]
  return(result);
 800b680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b682:	2b00      	cmp	r3, #0
 800b684:	d003      	beq.n	800b68e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b686:	f06f 0305 	mvn.w	r3, #5
 800b68a:	607b      	str	r3, [r7, #4]
 800b68c:	e010      	b.n	800b6b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b68e:	4b0b      	ldr	r3, [pc, #44]	; (800b6bc <osKernelStart+0x48>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d109      	bne.n	800b6aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b696:	f7ff ffbf 	bl	800b618 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b69a:	4b08      	ldr	r3, [pc, #32]	; (800b6bc <osKernelStart+0x48>)
 800b69c:	2202      	movs	r2, #2
 800b69e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b6a0:	f002 f862 	bl	800d768 <vTaskStartScheduler>
      stat = osOK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	e002      	b.n	800b6b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b6b0:	687b      	ldr	r3, [r7, #4]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000238 	.word	0x20000238

0800b6c0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6c6:	f3ef 8305 	mrs	r3, IPSR
 800b6ca:	603b      	str	r3, [r7, #0]
  return(result);
 800b6cc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b6d2:	f002 f96b 	bl	800d9ac <xTaskGetTickCountFromISR>
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	e002      	b.n	800b6e0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b6da:	f002 f957 	bl	800d98c <xTaskGetTickCount>
 800b6de:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b6e0:	687b      	ldr	r3, [r7, #4]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b08e      	sub	sp, #56	; 0x38
 800b6ee:	af04      	add	r7, sp, #16
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6fa:	f3ef 8305 	mrs	r3, IPSR
 800b6fe:	617b      	str	r3, [r7, #20]
  return(result);
 800b700:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b702:	2b00      	cmp	r3, #0
 800b704:	d17e      	bne.n	800b804 <osThreadNew+0x11a>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d07b      	beq.n	800b804 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b70c:	2380      	movs	r3, #128	; 0x80
 800b70e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b710:	2318      	movs	r3, #24
 800b712:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b71c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d045      	beq.n	800b7b0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <osThreadNew+0x48>
        name = attr->name;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d002      	beq.n	800b740 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d008      	beq.n	800b758 <osThreadNew+0x6e>
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	2b38      	cmp	r3, #56	; 0x38
 800b74a:	d805      	bhi.n	800b758 <osThreadNew+0x6e>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	d001      	beq.n	800b75c <osThreadNew+0x72>
        return (NULL);
 800b758:	2300      	movs	r3, #0
 800b75a:	e054      	b.n	800b806 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	089b      	lsrs	r3, r3, #2
 800b76a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00e      	beq.n	800b792 <osThreadNew+0xa8>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	2b5b      	cmp	r3, #91	; 0x5b
 800b77a:	d90a      	bls.n	800b792 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b780:	2b00      	cmp	r3, #0
 800b782:	d006      	beq.n	800b792 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <osThreadNew+0xa8>
        mem = 1;
 800b78c:	2301      	movs	r3, #1
 800b78e:	61bb      	str	r3, [r7, #24]
 800b790:	e010      	b.n	800b7b4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10c      	bne.n	800b7b4 <osThreadNew+0xca>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d108      	bne.n	800b7b4 <osThreadNew+0xca>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d104      	bne.n	800b7b4 <osThreadNew+0xca>
          mem = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	61bb      	str	r3, [r7, #24]
 800b7ae:	e001      	b.n	800b7b4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d110      	bne.n	800b7dc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b7c2:	9202      	str	r2, [sp, #8]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6a3a      	ldr	r2, [r7, #32]
 800b7ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f001 fd75 	bl	800d2c0 <xTaskCreateStatic>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	e013      	b.n	800b804 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d110      	bne.n	800b804 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	f107 0310 	add.w	r3, r7, #16
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f001 fdc0 	bl	800d37a <xTaskCreate>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d001      	beq.n	800b804 <osThreadNew+0x11a>
            hTask = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b804:	693b      	ldr	r3, [r7, #16]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3728      	adds	r7, #40	; 0x28
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b816:	f3ef 8305 	mrs	r3, IPSR
 800b81a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b81c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d003      	beq.n	800b82a <osDelay+0x1c>
    stat = osErrorISR;
 800b822:	f06f 0305 	mvn.w	r3, #5
 800b826:	60fb      	str	r3, [r7, #12]
 800b828:	e007      	b.n	800b83a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b82a:	2300      	movs	r3, #0
 800b82c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <osDelay+0x2c>
      vTaskDelay(ticks);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f001 ff63 	bl	800d700 <vTaskDelay>
    }
  }

  return (stat);
 800b83a:	68fb      	ldr	r3, [r7, #12]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b84c:	f3ef 8305 	mrs	r3, IPSR
 800b850:	60fb      	str	r3, [r7, #12]
  return(result);
 800b852:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800b854:	2b00      	cmp	r3, #0
 800b856:	d003      	beq.n	800b860 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800b858:	f06f 0305 	mvn.w	r3, #5
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	e019      	b.n	800b894 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800b864:	f002 f892 	bl	800d98c <xTaskGetTickCount>
 800b868:	4603      	mov	r3, r0
 800b86a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d009      	beq.n	800b88e <osDelayUntil+0x4a>
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	db06      	blt.n	800b88e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800b880:	f107 0308 	add.w	r3, r7, #8
 800b884:	6939      	ldr	r1, [r7, #16]
 800b886:	4618      	mov	r0, r3
 800b888:	f001 febc 	bl	800d604 <vTaskDelayUntil>
 800b88c:	e002      	b.n	800b894 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800b88e:	f06f 0303 	mvn.w	r3, #3
 800b892:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b894:	697b      	ldr	r3, [r7, #20]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b086      	sub	sp, #24
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8aa:	f3ef 8305 	mrs	r3, IPSR
 800b8ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8b0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d12d      	bne.n	800b912 <osEventFlagsNew+0x74>
    mem = -1;
 800b8b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8ba:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d015      	beq.n	800b8ee <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d006      	beq.n	800b8d8 <osEventFlagsNew+0x3a>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	2b1f      	cmp	r3, #31
 800b8d0:	d902      	bls.n	800b8d8 <osEventFlagsNew+0x3a>
        mem = 1;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	613b      	str	r3, [r7, #16]
 800b8d6:	e00c      	b.n	800b8f2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d108      	bne.n	800b8f2 <osEventFlagsNew+0x54>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d104      	bne.n	800b8f2 <osEventFlagsNew+0x54>
          mem = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	613b      	str	r3, [r7, #16]
 800b8ec:	e001      	b.n	800b8f2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d106      	bne.n	800b906 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 fa2f 	bl	800bd60 <xEventGroupCreateStatic>
 800b902:	6178      	str	r0, [r7, #20]
 800b904:	e005      	b.n	800b912 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800b90c:	f000 fa5f 	bl	800bdce <xEventGroupCreate>
 800b910:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800b912:	697b      	ldr	r3, [r7, #20]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3718      	adds	r7, #24
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d004      	beq.n	800b93a <osEventFlagsSet+0x1e>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800b93a:	f06f 0303 	mvn.w	r3, #3
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e028      	b.n	800b994 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b942:	f3ef 8305 	mrs	r3, IPSR
 800b946:	60fb      	str	r3, [r7, #12]
  return(result);
 800b948:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d01d      	beq.n	800b98a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800b952:	f107 0308 	add.w	r3, r7, #8
 800b956:	461a      	mov	r2, r3
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6938      	ldr	r0, [r7, #16]
 800b95c:	f000 fbda 	bl	800c114 <xEventGroupSetBitsFromISR>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d103      	bne.n	800b96e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800b966:	f06f 0302 	mvn.w	r3, #2
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	e012      	b.n	800b994 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00d      	beq.n	800b994 <osEventFlagsSet+0x78>
 800b978:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <osEventFlagsSet+0x84>)
 800b97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	e004      	b.n	800b994 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6938      	ldr	r0, [r7, #16]
 800b98e:	f000 fb07 	bl	800bfa0 <xEventGroupSetBits>
 800b992:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800b994:	697b      	ldr	r3, [r7, #20]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	e000ed04 	.word	0xe000ed04

0800b9a4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b08c      	sub	sp, #48	; 0x30
 800b9a8:	af02      	add	r7, sp, #8
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <osEventFlagsWait+0x22>
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800b9c6:	f06f 0303 	mvn.w	r3, #3
 800b9ca:	61fb      	str	r3, [r7, #28]
 800b9cc:	e04b      	b.n	800ba66 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ce:	f3ef 8305 	mrs	r3, IPSR
 800b9d2:	617b      	str	r3, [r7, #20]
  return(result);
 800b9d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800b9da:	f06f 0305 	mvn.w	r3, #5
 800b9de:	61fb      	str	r3, [r7, #28]
 800b9e0:	e041      	b.n	800ba66 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d002      	beq.n	800b9f2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f0:	e001      	b.n	800b9f6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f003 0302 	and.w	r3, r3, #2
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800ba00:	2300      	movs	r3, #0
 800ba02:	623b      	str	r3, [r7, #32]
 800ba04:	e001      	b.n	800ba0a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800ba06:	2301      	movs	r3, #1
 800ba08:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba10:	6a3a      	ldr	r2, [r7, #32]
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	69b8      	ldr	r0, [r7, #24]
 800ba16:	f000 f9f5 	bl	800be04 <xEventGroupWaitBits>
 800ba1a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d010      	beq.n	800ba48 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d019      	beq.n	800ba66 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d003      	beq.n	800ba40 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800ba38:	f06f 0301 	mvn.w	r3, #1
 800ba3c:	61fb      	str	r3, [r7, #28]
 800ba3e:	e012      	b.n	800ba66 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ba40:	f06f 0302 	mvn.w	r3, #2
 800ba44:	61fb      	str	r3, [r7, #28]
 800ba46:	e00e      	b.n	800ba66 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800ba48:	68ba      	ldr	r2, [r7, #8]
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d109      	bne.n	800ba66 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d003      	beq.n	800ba60 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800ba58:	f06f 0301 	mvn.w	r3, #1
 800ba5c:	61fb      	str	r3, [r7, #28]
 800ba5e:	e002      	b.n	800ba66 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ba60:	f06f 0302 	mvn.w	r3, #2
 800ba64:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800ba66:	69fb      	ldr	r3, [r7, #28]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3728      	adds	r7, #40	; 0x28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af02      	add	r7, sp, #8
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba80:	f3ef 8305 	mrs	r3, IPSR
 800ba84:	613b      	str	r3, [r7, #16]
  return(result);
 800ba86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d175      	bne.n	800bb78 <osSemaphoreNew+0x108>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d072      	beq.n	800bb78 <osSemaphoreNew+0x108>
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d86e      	bhi.n	800bb78 <osSemaphoreNew+0x108>
    mem = -1;
 800ba9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d015      	beq.n	800bad2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d006      	beq.n	800babc <osSemaphoreNew+0x4c>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	2b4f      	cmp	r3, #79	; 0x4f
 800bab4:	d902      	bls.n	800babc <osSemaphoreNew+0x4c>
        mem = 1;
 800bab6:	2301      	movs	r3, #1
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	e00c      	b.n	800bad6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d108      	bne.n	800bad6 <osSemaphoreNew+0x66>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d104      	bne.n	800bad6 <osSemaphoreNew+0x66>
          mem = 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	61bb      	str	r3, [r7, #24]
 800bad0:	e001      	b.n	800bad6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800badc:	d04c      	beq.n	800bb78 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d128      	bne.n	800bb36 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d10a      	bne.n	800bb00 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	2203      	movs	r2, #3
 800baf0:	9200      	str	r2, [sp, #0]
 800baf2:	2200      	movs	r2, #0
 800baf4:	2100      	movs	r1, #0
 800baf6:	2001      	movs	r0, #1
 800baf8:	f000 fc3c 	bl	800c374 <xQueueGenericCreateStatic>
 800bafc:	61f8      	str	r0, [r7, #28]
 800bafe:	e005      	b.n	800bb0c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bb00:	2203      	movs	r2, #3
 800bb02:	2100      	movs	r1, #0
 800bb04:	2001      	movs	r0, #1
 800bb06:	f000 fcad 	bl	800c464 <xQueueGenericCreate>
 800bb0a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d022      	beq.n	800bb58 <osSemaphoreNew+0xe8>
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d01f      	beq.n	800bb58 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb18:	2300      	movs	r3, #0
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	69f8      	ldr	r0, [r7, #28]
 800bb20:	f000 fd68 	bl	800c5f4 <xQueueGenericSend>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d016      	beq.n	800bb58 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bb2a:	69f8      	ldr	r0, [r7, #28]
 800bb2c:	f001 f9f4 	bl	800cf18 <vQueueDelete>
            hSemaphore = NULL;
 800bb30:	2300      	movs	r3, #0
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	e010      	b.n	800bb58 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d108      	bne.n	800bb4e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	461a      	mov	r2, r3
 800bb42:	68b9      	ldr	r1, [r7, #8]
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 fcea 	bl	800c51e <xQueueCreateCountingSemaphoreStatic>
 800bb4a:	61f8      	str	r0, [r7, #28]
 800bb4c:	e004      	b.n	800bb58 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bb4e:	68b9      	ldr	r1, [r7, #8]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fd1b 	bl	800c58c <xQueueCreateCountingSemaphore>
 800bb56:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00c      	beq.n	800bb78 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <osSemaphoreNew+0xfc>
          name = attr->name;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	617b      	str	r3, [r7, #20]
 800bb6a:	e001      	b.n	800bb70 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bb70:	6979      	ldr	r1, [r7, #20]
 800bb72:	69f8      	ldr	r0, [r7, #28]
 800bb74:	f001 fb1c 	bl	800d1b0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bb78:	69fb      	ldr	r3, [r7, #28]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3720      	adds	r7, #32
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d103      	bne.n	800bba4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bb9c:	f06f 0303 	mvn.w	r3, #3
 800bba0:	617b      	str	r3, [r7, #20]
 800bba2:	e039      	b.n	800bc18 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bba4:	f3ef 8305 	mrs	r3, IPSR
 800bba8:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d022      	beq.n	800bbf6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d003      	beq.n	800bbbe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800bbb6:	f06f 0303 	mvn.w	r3, #3
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	e02c      	b.n	800bc18 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bbc2:	f107 0308 	add.w	r3, r7, #8
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	2100      	movs	r1, #0
 800bbca:	6938      	ldr	r0, [r7, #16]
 800bbcc:	f001 f924 	bl	800ce18 <xQueueReceiveFromISR>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d003      	beq.n	800bbde <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800bbd6:	f06f 0302 	mvn.w	r3, #2
 800bbda:	617b      	str	r3, [r7, #20]
 800bbdc:	e01c      	b.n	800bc18 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d019      	beq.n	800bc18 <osSemaphoreAcquire+0x94>
 800bbe4:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <osSemaphoreAcquire+0xa0>)
 800bbe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbea:	601a      	str	r2, [r3, #0]
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	e010      	b.n	800bc18 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6938      	ldr	r0, [r7, #16]
 800bbfa:	f001 f801 	bl	800cc00 <xQueueSemaphoreTake>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d009      	beq.n	800bc18 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d003      	beq.n	800bc12 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800bc0a:	f06f 0301 	mvn.w	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	e002      	b.n	800bc18 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800bc12:	f06f 0302 	mvn.w	r3, #2
 800bc16:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800bc18:	697b      	ldr	r3, [r7, #20]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	e000ed04 	.word	0xe000ed04

0800bc28 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d103      	bne.n	800bc46 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800bc3e:	f06f 0303 	mvn.w	r3, #3
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e02c      	b.n	800bca0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc46:	f3ef 8305 	mrs	r3, IPSR
 800bc4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d01a      	beq.n	800bc88 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bc56:	f107 0308 	add.w	r3, r7, #8
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	6938      	ldr	r0, [r7, #16]
 800bc5e:	f000 fe62 	bl	800c926 <xQueueGiveFromISR>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d003      	beq.n	800bc70 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800bc68:	f06f 0302 	mvn.w	r3, #2
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	e017      	b.n	800bca0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d014      	beq.n	800bca0 <osSemaphoreRelease+0x78>
 800bc76:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <osSemaphoreRelease+0x84>)
 800bc78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7c:	601a      	str	r2, [r3, #0]
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	e00b      	b.n	800bca0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bc88:	2300      	movs	r3, #0
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	6938      	ldr	r0, [r7, #16]
 800bc90:	f000 fcb0 	bl	800c5f4 <xQueueGenericSend>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d002      	beq.n	800bca0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bc9a:	f06f 0302 	mvn.w	r3, #2
 800bc9e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bca0:	697b      	ldr	r3, [r7, #20]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	e000ed04 	.word	0xe000ed04

0800bcb0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcbc:	f3ef 8305 	mrs	r3, IPSR
 800bcc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d003      	beq.n	800bcd0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800bcc8:	f06f 0305 	mvn.w	r3, #5
 800bccc:	617b      	str	r3, [r7, #20]
 800bcce:	e00e      	b.n	800bcee <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d103      	bne.n	800bcde <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800bcd6:	f06f 0303 	mvn.w	r3, #3
 800bcda:	617b      	str	r3, [r7, #20]
 800bcdc:	e007      	b.n	800bcee <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800bcde:	6938      	ldr	r0, [r7, #16]
 800bce0:	f001 fa90 	bl	800d204 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800bce8:	6938      	ldr	r0, [r7, #16]
 800bcea:	f001 f915 	bl	800cf18 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800bcee:	697b      	ldr	r3, [r7, #20]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4a07      	ldr	r2, [pc, #28]	; (800bd24 <vApplicationGetIdleTaskMemory+0x2c>)
 800bd08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	4a06      	ldr	r2, [pc, #24]	; (800bd28 <vApplicationGetIdleTaskMemory+0x30>)
 800bd0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2280      	movs	r2, #128	; 0x80
 800bd14:	601a      	str	r2, [r3, #0]
}
 800bd16:	bf00      	nop
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	2000023c 	.word	0x2000023c
 800bd28:	20000298 	.word	0x20000298

0800bd2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	4a07      	ldr	r2, [pc, #28]	; (800bd58 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	4a06      	ldr	r2, [pc, #24]	; (800bd5c <vApplicationGetTimerTaskMemory+0x30>)
 800bd42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd4a:	601a      	str	r2, [r3, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	20000498 	.word	0x20000498
 800bd5c:	200004f4 	.word	0x200004f4

0800bd60 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10a      	bne.n	800bd84 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd80:	bf00      	nop
 800bd82:	e7fe      	b.n	800bd82 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800bd84:	2320      	movs	r3, #32
 800bd86:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b20      	cmp	r3, #32
 800bd8c:	d00a      	beq.n	800bda4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	60fb      	str	r3, [r7, #12]
}
 800bda0:	bf00      	nop
 800bda2:	e7fe      	b.n	800bda2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 f9bf 	bl	800c13c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800bdc4:	697b      	ldr	r3, [r7, #20]
	}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b082      	sub	sp, #8
 800bdd2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800bdd4:	2020      	movs	r0, #32
 800bdd6:	f003 f96f 	bl	800f0b8 <pvPortMalloc>
 800bdda:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00a      	beq.n	800bdf8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f9a5 	bl	800c13c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800bdf8:	687b      	ldr	r3, [r7, #4]
	}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
	...

0800be04 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b090      	sub	sp, #64	; 0x40
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <xEventGroupWaitBits+0x36>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	623b      	str	r3, [r7, #32]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00a      	beq.n	800be5a <xEventGroupWaitBits+0x56>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	61fb      	str	r3, [r7, #28]
}
 800be56:	bf00      	nop
 800be58:	e7fe      	b.n	800be58 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10a      	bne.n	800be76 <xEventGroupWaitBits+0x72>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	61bb      	str	r3, [r7, #24]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be76:	f002 f96f 	bl	800e158 <xTaskGetSchedulerState>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d102      	bne.n	800be86 <xEventGroupWaitBits+0x82>
 800be80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <xEventGroupWaitBits+0x86>
 800be86:	2301      	movs	r3, #1
 800be88:	e000      	b.n	800be8c <xEventGroupWaitBits+0x88>
 800be8a:	2300      	movs	r3, #0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	617b      	str	r3, [r7, #20]
}
 800bea2:	bf00      	nop
 800bea4:	e7fe      	b.n	800bea4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800bea6:	f001 fcc5 	bl	800d834 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800beaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	68b9      	ldr	r1, [r7, #8]
 800beb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beb6:	f000 f90b 	bl	800c0d0 <prvTestWaitCondition>
 800beba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00e      	beq.n	800bee0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800bec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d028      	beq.n	800bf22 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	43db      	mvns	r3, r3
 800bed8:	401a      	ands	r2, r3
 800beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	e020      	b.n	800bf22 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800bee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d104      	bne.n	800bef0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800beea:	2301      	movs	r3, #1
 800beec:	633b      	str	r3, [r7, #48]	; 0x30
 800beee:	e018      	b.n	800bf22 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800befc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf0a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	1d18      	adds	r0, r3, #4
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf14:	4313      	orrs	r3, r2
 800bf16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf18:	4619      	mov	r1, r3
 800bf1a:	f001 fe95 	bl	800dc48 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800bf22:	f001 fc95 	bl	800d850 <xTaskResumeAll>
 800bf26:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800bf28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d031      	beq.n	800bf92 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d107      	bne.n	800bf44 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800bf34:	4b19      	ldr	r3, [pc, #100]	; (800bf9c <xEventGroupWaitBits+0x198>)
 800bf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800bf44:	f002 fa7e 	bl	800e444 <uxTaskResetEventItemValue>
 800bf48:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800bf4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d11a      	bne.n	800bf8a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800bf54:	f002 ff8e 	bl	800ee74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800bf58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	68b9      	ldr	r1, [r7, #8]
 800bf62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf64:	f000 f8b4 	bl	800c0d0 <prvTestWaitCondition>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d006      	beq.n	800bf82 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	43db      	mvns	r3, r3
 800bf7c:	401a      	ands	r2, r3
 800bf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf80:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800bf82:	2301      	movs	r3, #1
 800bf84:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800bf86:	f002 ffa5 	bl	800eed4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800bf92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3740      	adds	r7, #64	; 0x40
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	e000ed04 	.word	0xe000ed04

0800bfa0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08e      	sub	sp, #56	; 0x38
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10a      	bne.n	800bfd2 <xEventGroupSetBits+0x32>
	__asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	613b      	str	r3, [r7, #16]
}
 800bfce:	bf00      	nop
 800bfd0:	e7fe      	b.n	800bfd0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00a      	beq.n	800bff2 <xEventGroupSetBits+0x52>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	60fb      	str	r3, [r7, #12]
}
 800bfee:	bf00      	nop
 800bff0:	e7fe      	b.n	800bff0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	3304      	adds	r3, #4
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	3308      	adds	r3, #8
 800bffc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800bffe:	f001 fc19 	bl	800d834 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	431a      	orrs	r2, r3
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c014:	e03c      	b.n	800c090 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c022:	2300      	movs	r3, #0
 800c024:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c02c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c034:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d108      	bne.n	800c052 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	4013      	ands	r3, r2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c04c:	2301      	movs	r3, #1
 800c04e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c050:	e008      	b.n	800c064 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	4013      	ands	r3, r2
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d101      	bne.n	800c064 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c060:	2301      	movs	r3, #1
 800c062:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d010      	beq.n	800c08c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	4313      	orrs	r3, r2
 800c07a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c084:	4619      	mov	r1, r3
 800c086:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c088:	f001 feaa 	bl	800dde0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c092:	6a3b      	ldr	r3, [r7, #32]
 800c094:	429a      	cmp	r2, r3
 800c096:	d1be      	bne.n	800c016 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	43db      	mvns	r3, r3
 800c0a0:	401a      	ands	r2, r3
 800c0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c0a6:	f001 fbd3 	bl	800d850 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	681b      	ldr	r3, [r3, #0]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3738      	adds	r7, #56	; 0x38
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7ff ff6c 	bl	800bfa0 <xEventGroupSetBits>
}
 800c0c8:	bf00      	nop
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d107      	bne.n	800c0f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00a      	beq.n	800c106 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	617b      	str	r3, [r7, #20]
 800c0f4:	e007      	b.n	800c106 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d101      	bne.n	800c106 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c102:	2301      	movs	r3, #1
 800c104:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c106:	697b      	ldr	r3, [r7, #20]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	371c      	adds	r7, #28
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	68f9      	ldr	r1, [r7, #12]
 800c126:	4804      	ldr	r0, [pc, #16]	; (800c138 <xEventGroupSetBitsFromISR+0x24>)
 800c128:	f002 fd5a 	bl	800ebe0 <xTimerPendFunctionCallFromISR>
 800c12c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c12e:	697b      	ldr	r3, [r7, #20]
	}
 800c130:	4618      	mov	r0, r3
 800c132:	3718      	adds	r7, #24
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	0800c0b7 	.word	0x0800c0b7

0800c13c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f103 0208 	add.w	r2, r3, #8
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c154:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f103 0208 	add.w	r2, r3, #8
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f103 0208 	add.w	r2, r3, #8
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c18a:	bf00      	nop
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c196:	b480      	push	{r7}
 800c198:	b085      	sub	sp, #20
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	1c5a      	adds	r2, r3, #1
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	601a      	str	r2, [r3, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b085      	sub	sp, #20
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1f4:	d103      	bne.n	800c1fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	60fb      	str	r3, [r7, #12]
 800c1fc:	e00c      	b.n	800c218 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3308      	adds	r3, #8
 800c202:	60fb      	str	r3, [r7, #12]
 800c204:	e002      	b.n	800c20c <vListInsert+0x2e>
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	429a      	cmp	r2, r3
 800c216:	d2f6      	bcs.n	800c206 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	6892      	ldr	r2, [r2, #8]
 800c266:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	6852      	ldr	r2, [r2, #4]
 800c270:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d103      	bne.n	800c284 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	1e5a      	subs	r2, r3, #1
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10a      	bne.n	800c2ce <xQueueGenericReset+0x2a>
	__asm volatile
 800c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	60bb      	str	r3, [r7, #8]
}
 800c2ca:	bf00      	nop
 800c2cc:	e7fe      	b.n	800c2cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c2ce:	f002 fdd1 	bl	800ee74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2da:	68f9      	ldr	r1, [r7, #12]
 800c2dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c2de:	fb01 f303 	mul.w	r3, r1, r3
 800c2e2:	441a      	add	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2fe:	3b01      	subs	r3, #1
 800c300:	68f9      	ldr	r1, [r7, #12]
 800c302:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c304:	fb01 f303 	mul.w	r3, r1, r3
 800c308:	441a      	add	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	22ff      	movs	r2, #255	; 0xff
 800c312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	22ff      	movs	r2, #255	; 0xff
 800c31a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d114      	bne.n	800c34e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d01a      	beq.n	800c362 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3310      	adds	r3, #16
 800c330:	4618      	mov	r0, r3
 800c332:	f001 fcf1 	bl	800dd18 <xTaskRemoveFromEventList>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d012      	beq.n	800c362 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c33c:	4b0c      	ldr	r3, [pc, #48]	; (800c370 <xQueueGenericReset+0xcc>)
 800c33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	e009      	b.n	800c362 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	3310      	adds	r3, #16
 800c352:	4618      	mov	r0, r3
 800c354:	f7ff fef2 	bl	800c13c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3324      	adds	r3, #36	; 0x24
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff feed 	bl	800c13c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c362:	f002 fdb7 	bl	800eed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c366:	2301      	movs	r3, #1
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08e      	sub	sp, #56	; 0x38
 800c378:	af02      	add	r7, sp, #8
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10a      	bne.n	800c39e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	f383 8811 	msr	BASEPRI, r3
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	f3bf 8f4f 	dsb	sy
 800c398:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c39a:	bf00      	nop
 800c39c:	e7fe      	b.n	800c39c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <xQueueGenericCreateStatic+0x52>
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <xQueueGenericCreateStatic+0x56>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e000      	b.n	800c3cc <xQueueGenericCreateStatic+0x58>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	623b      	str	r3, [r7, #32]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <xQueueGenericCreateStatic+0x7e>
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <xQueueGenericCreateStatic+0x82>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <xQueueGenericCreateStatic+0x84>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10a      	bne.n	800c412 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	61fb      	str	r3, [r7, #28]
}
 800c40e:	bf00      	nop
 800c410:	e7fe      	b.n	800c410 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c412:	2350      	movs	r3, #80	; 0x50
 800c414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b50      	cmp	r3, #80	; 0x50
 800c41a:	d00a      	beq.n	800c432 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	61bb      	str	r3, [r7, #24]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c432:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00d      	beq.n	800c45a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c446:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	4613      	mov	r3, r2
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	68b9      	ldr	r1, [r7, #8]
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 f83f 	bl	800c4d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3730      	adds	r7, #48	; 0x30
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	; 0x28
 800c468:	af02      	add	r7, sp, #8
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	4613      	mov	r3, r2
 800c470:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10a      	bne.n	800c48e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	613b      	str	r3, [r7, #16]
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	fb02 f303 	mul.w	r3, r2, r3
 800c496:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	3350      	adds	r3, #80	; 0x50
 800c49c:	4618      	mov	r0, r3
 800c49e:	f002 fe0b 	bl	800f0b8 <pvPortMalloc>
 800c4a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d011      	beq.n	800c4ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	3350      	adds	r3, #80	; 0x50
 800c4b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4bc:	79fa      	ldrb	r2, [r7, #7]
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f805 	bl	800c4d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4ce:	69bb      	ldr	r3, [r7, #24]
	}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3720      	adds	r7, #32
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d103      	bne.n	800c4f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	69ba      	ldr	r2, [r7, #24]
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	e002      	b.n	800c4fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c506:	2101      	movs	r1, #1
 800c508:	69b8      	ldr	r0, [r7, #24]
 800c50a:	f7ff fecb 	bl	800c2a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	78fa      	ldrb	r2, [r7, #3]
 800c512:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c516:	bf00      	nop
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b08a      	sub	sp, #40	; 0x28
 800c522:	af02      	add	r7, sp, #8
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	60b9      	str	r1, [r7, #8]
 800c528:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10a      	bne.n	800c546 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	61bb      	str	r3, [r7, #24]
}
 800c542:	bf00      	nop
 800c544:	e7fe      	b.n	800c544 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d90a      	bls.n	800c564 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	617b      	str	r3, [r7, #20]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c564:	2302      	movs	r3, #2
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	2100      	movs	r1, #0
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff ff00 	bl	800c374 <xQueueGenericCreateStatic>
 800c574:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	68ba      	ldr	r2, [r7, #8]
 800c580:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c582:	69fb      	ldr	r3, [r7, #28]
	}
 800c584:	4618      	mov	r0, r3
 800c586:	3720      	adds	r7, #32
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	613b      	str	r3, [r7, #16]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d90a      	bls.n	800c5d0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	60fb      	str	r3, [r7, #12]
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ff45 	bl	800c464 <xQueueGenericCreate>
 800c5da:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c5e8:	697b      	ldr	r3, [r7, #20]
	}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3718      	adds	r7, #24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08e      	sub	sp, #56	; 0x38
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c602:	2300      	movs	r3, #0
 800c604:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xQueueGenericSend+0x32>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d103      	bne.n	800c634 <xQueueGenericSend+0x40>
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <xQueueGenericSend+0x44>
 800c634:	2301      	movs	r3, #1
 800c636:	e000      	b.n	800c63a <xQueueGenericSend+0x46>
 800c638:	2300      	movs	r3, #0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d10a      	bne.n	800c654 <xQueueGenericSend+0x60>
	__asm volatile
 800c63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c642:	f383 8811 	msr	BASEPRI, r3
 800c646:	f3bf 8f6f 	isb	sy
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c650:	bf00      	nop
 800c652:	e7fe      	b.n	800c652 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2b02      	cmp	r3, #2
 800c658:	d103      	bne.n	800c662 <xQueueGenericSend+0x6e>
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d101      	bne.n	800c666 <xQueueGenericSend+0x72>
 800c662:	2301      	movs	r3, #1
 800c664:	e000      	b.n	800c668 <xQueueGenericSend+0x74>
 800c666:	2300      	movs	r3, #0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <xQueueGenericSend+0x8e>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	623b      	str	r3, [r7, #32]
}
 800c67e:	bf00      	nop
 800c680:	e7fe      	b.n	800c680 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c682:	f001 fd69 	bl	800e158 <xTaskGetSchedulerState>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d102      	bne.n	800c692 <xQueueGenericSend+0x9e>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <xQueueGenericSend+0xa2>
 800c692:	2301      	movs	r3, #1
 800c694:	e000      	b.n	800c698 <xQueueGenericSend+0xa4>
 800c696:	2300      	movs	r3, #0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10a      	bne.n	800c6b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	61fb      	str	r3, [r7, #28]
}
 800c6ae:	bf00      	nop
 800c6b0:	e7fe      	b.n	800c6b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6b2:	f002 fbdf 	bl	800ee74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d302      	bcc.n	800c6c8 <xQueueGenericSend+0xd4>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d129      	bne.n	800c71c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6ce:	f000 fc5e 	bl	800cf8e <prvCopyDataToQueue>
 800c6d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d010      	beq.n	800c6fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	3324      	adds	r3, #36	; 0x24
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f001 fb19 	bl	800dd18 <xTaskRemoveFromEventList>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d013      	beq.n	800c714 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c6ec:	4b3f      	ldr	r3, [pc, #252]	; (800c7ec <xQueueGenericSend+0x1f8>)
 800c6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f2:	601a      	str	r2, [r3, #0]
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	e00a      	b.n	800c714 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	2b00      	cmp	r3, #0
 800c702:	d007      	beq.n	800c714 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c704:	4b39      	ldr	r3, [pc, #228]	; (800c7ec <xQueueGenericSend+0x1f8>)
 800c706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c70a:	601a      	str	r2, [r3, #0]
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c714:	f002 fbde 	bl	800eed4 <vPortExitCritical>
				return pdPASS;
 800c718:	2301      	movs	r3, #1
 800c71a:	e063      	b.n	800c7e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d103      	bne.n	800c72a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c722:	f002 fbd7 	bl	800eed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c726:	2300      	movs	r3, #0
 800c728:	e05c      	b.n	800c7e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d106      	bne.n	800c73e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c730:	f107 0314 	add.w	r3, r7, #20
 800c734:	4618      	mov	r0, r3
 800c736:	f001 fbb5 	bl	800dea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c73a:	2301      	movs	r3, #1
 800c73c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c73e:	f002 fbc9 	bl	800eed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c742:	f001 f877 	bl	800d834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c746:	f002 fb95 	bl	800ee74 <vPortEnterCritical>
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c750:	b25b      	sxtb	r3, r3
 800c752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c756:	d103      	bne.n	800c760 <xQueueGenericSend+0x16c>
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c766:	b25b      	sxtb	r3, r3
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c76c:	d103      	bne.n	800c776 <xQueueGenericSend+0x182>
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c776:	f002 fbad 	bl	800eed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c77a:	1d3a      	adds	r2, r7, #4
 800c77c:	f107 0314 	add.w	r3, r7, #20
 800c780:	4611      	mov	r1, r2
 800c782:	4618      	mov	r0, r3
 800c784:	f001 fba4 	bl	800ded0 <xTaskCheckForTimeOut>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d124      	bne.n	800c7d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c78e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c790:	f000 fcf5 	bl	800d17e <prvIsQueueFull>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d018      	beq.n	800c7cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79c:	3310      	adds	r3, #16
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f001 fa2c 	bl	800dc00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c7a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7aa:	f000 fc80 	bl	800d0ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c7ae:	f001 f84f 	bl	800d850 <xTaskResumeAll>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f47f af7c 	bne.w	800c6b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <xQueueGenericSend+0x1f8>)
 800c7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	e772      	b.n	800c6b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c7cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7ce:	f000 fc6e 	bl	800d0ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7d2:	f001 f83d 	bl	800d850 <xTaskResumeAll>
 800c7d6:	e76c      	b.n	800c6b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c7d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7da:	f000 fc68 	bl	800d0ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7de:	f001 f837 	bl	800d850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c7e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3738      	adds	r7, #56	; 0x38
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	e000ed04 	.word	0xe000ed04

0800c7f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b090      	sub	sp, #64	; 0x40
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10a      	bne.n	800c81e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c81a:	bf00      	nop
 800c81c:	e7fe      	b.n	800c81c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d103      	bne.n	800c82c <xQueueGenericSendFromISR+0x3c>
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d101      	bne.n	800c830 <xQueueGenericSendFromISR+0x40>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e000      	b.n	800c832 <xQueueGenericSendFromISR+0x42>
 800c830:	2300      	movs	r3, #0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10a      	bne.n	800c84c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c848:	bf00      	nop
 800c84a:	e7fe      	b.n	800c84a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d103      	bne.n	800c85a <xQueueGenericSendFromISR+0x6a>
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c856:	2b01      	cmp	r3, #1
 800c858:	d101      	bne.n	800c85e <xQueueGenericSendFromISR+0x6e>
 800c85a:	2301      	movs	r3, #1
 800c85c:	e000      	b.n	800c860 <xQueueGenericSendFromISR+0x70>
 800c85e:	2300      	movs	r3, #0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10a      	bne.n	800c87a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	623b      	str	r3, [r7, #32]
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c87a:	f002 fbdd 	bl	800f038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c87e:	f3ef 8211 	mrs	r2, BASEPRI
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	61fa      	str	r2, [r7, #28]
 800c894:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c896:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c898:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d302      	bcc.n	800c8ac <xQueueGenericSendFromISR+0xbc>
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d12f      	bne.n	800c90c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	68b9      	ldr	r1, [r7, #8]
 800c8c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8c2:	f000 fb64 	bl	800cf8e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c8ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ce:	d112      	bne.n	800c8f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d016      	beq.n	800c906 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8da:	3324      	adds	r3, #36	; 0x24
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f001 fa1b 	bl	800dd18 <xTaskRemoveFromEventList>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00e      	beq.n	800c906 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	e007      	b.n	800c906 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c8f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	b25a      	sxtb	r2, r3
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c906:	2301      	movs	r3, #1
 800c908:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c90a:	e001      	b.n	800c910 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c90c:	2300      	movs	r3, #0
 800c90e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c91a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3740      	adds	r7, #64	; 0x40
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b08e      	sub	sp, #56	; 0x38
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10a      	bne.n	800c950 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	623b      	str	r3, [r7, #32]
}
 800c94c:	bf00      	nop
 800c94e:	e7fe      	b.n	800c94e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00a      	beq.n	800c96e <xQueueGiveFromISR+0x48>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95c:	f383 8811 	msr	BASEPRI, r3
 800c960:	f3bf 8f6f 	isb	sy
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	61fb      	str	r3, [r7, #28]
}
 800c96a:	bf00      	nop
 800c96c:	e7fe      	b.n	800c96c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d103      	bne.n	800c97e <xQueueGiveFromISR+0x58>
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d101      	bne.n	800c982 <xQueueGiveFromISR+0x5c>
 800c97e:	2301      	movs	r3, #1
 800c980:	e000      	b.n	800c984 <xQueueGiveFromISR+0x5e>
 800c982:	2300      	movs	r3, #0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10a      	bne.n	800c99e <xQueueGiveFromISR+0x78>
	__asm volatile
 800c988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98c:	f383 8811 	msr	BASEPRI, r3
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	f3bf 8f4f 	dsb	sy
 800c998:	61bb      	str	r3, [r7, #24]
}
 800c99a:	bf00      	nop
 800c99c:	e7fe      	b.n	800c99c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c99e:	f002 fb4b 	bl	800f038 <vPortValidateInterruptPriority>
	__asm volatile
 800c9a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	617a      	str	r2, [r7, #20]
 800c9b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c9ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d22b      	bcs.n	800ca26 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9e8:	d112      	bne.n	800ca10 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d016      	beq.n	800ca20 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	3324      	adds	r3, #36	; 0x24
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f001 f98e 	bl	800dd18 <xTaskRemoveFromEventList>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00e      	beq.n	800ca20 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00b      	beq.n	800ca20 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	e007      	b.n	800ca20 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca14:	3301      	adds	r3, #1
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	b25a      	sxtb	r2, r3
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca20:	2301      	movs	r3, #1
 800ca22:	637b      	str	r3, [r7, #52]	; 0x34
 800ca24:	e001      	b.n	800ca2a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	637b      	str	r3, [r7, #52]	; 0x34
 800ca2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f383 8811 	msr	BASEPRI, r3
}
 800ca34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3738      	adds	r7, #56	; 0x38
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08c      	sub	sp, #48	; 0x30
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10a      	bne.n	800ca70 <xQueueReceive+0x30>
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	623b      	str	r3, [r7, #32]
}
 800ca6c:	bf00      	nop
 800ca6e:	e7fe      	b.n	800ca6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d103      	bne.n	800ca7e <xQueueReceive+0x3e>
 800ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <xQueueReceive+0x42>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e000      	b.n	800ca84 <xQueueReceive+0x44>
 800ca82:	2300      	movs	r3, #0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10a      	bne.n	800ca9e <xQueueReceive+0x5e>
	__asm volatile
 800ca88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8c:	f383 8811 	msr	BASEPRI, r3
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	61fb      	str	r3, [r7, #28]
}
 800ca9a:	bf00      	nop
 800ca9c:	e7fe      	b.n	800ca9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca9e:	f001 fb5b 	bl	800e158 <xTaskGetSchedulerState>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <xQueueReceive+0x6e>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d101      	bne.n	800cab2 <xQueueReceive+0x72>
 800caae:	2301      	movs	r3, #1
 800cab0:	e000      	b.n	800cab4 <xQueueReceive+0x74>
 800cab2:	2300      	movs	r3, #0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10a      	bne.n	800cace <xQueueReceive+0x8e>
	__asm volatile
 800cab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	61bb      	str	r3, [r7, #24]
}
 800caca:	bf00      	nop
 800cacc:	e7fe      	b.n	800cacc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cace:	f002 f9d1 	bl	800ee74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d01f      	beq.n	800cb1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cae2:	f000 fabe 	bl	800d062 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	1e5a      	subs	r2, r3, #1
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	691b      	ldr	r3, [r3, #16]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d00f      	beq.n	800cb16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	3310      	adds	r3, #16
 800cafa:	4618      	mov	r0, r3
 800cafc:	f001 f90c 	bl	800dd18 <xTaskRemoveFromEventList>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d007      	beq.n	800cb16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb06:	4b3d      	ldr	r3, [pc, #244]	; (800cbfc <xQueueReceive+0x1bc>)
 800cb08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb16:	f002 f9dd 	bl	800eed4 <vPortExitCritical>
				return pdPASS;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e069      	b.n	800cbf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d103      	bne.n	800cb2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb24:	f002 f9d6 	bl	800eed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e062      	b.n	800cbf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d106      	bne.n	800cb40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb32:	f107 0310 	add.w	r3, r7, #16
 800cb36:	4618      	mov	r0, r3
 800cb38:	f001 f9b4 	bl	800dea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb40:	f002 f9c8 	bl	800eed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb44:	f000 fe76 	bl	800d834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb48:	f002 f994 	bl	800ee74 <vPortEnterCritical>
 800cb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb52:	b25b      	sxtb	r3, r3
 800cb54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb58:	d103      	bne.n	800cb62 <xQueueReceive+0x122>
 800cb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb68:	b25b      	sxtb	r3, r3
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb6e:	d103      	bne.n	800cb78 <xQueueReceive+0x138>
 800cb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb78:	f002 f9ac 	bl	800eed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb7c:	1d3a      	adds	r2, r7, #4
 800cb7e:	f107 0310 	add.w	r3, r7, #16
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f001 f9a3 	bl	800ded0 <xTaskCheckForTimeOut>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d123      	bne.n	800cbd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb92:	f000 fade 	bl	800d152 <prvIsQueueEmpty>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d017      	beq.n	800cbcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9e:	3324      	adds	r3, #36	; 0x24
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	4611      	mov	r1, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f001 f82b 	bl	800dc00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbac:	f000 fa7f 	bl	800d0ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbb0:	f000 fe4e 	bl	800d850 <xTaskResumeAll>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d189      	bne.n	800cace <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cbba:	4b10      	ldr	r3, [pc, #64]	; (800cbfc <xQueueReceive+0x1bc>)
 800cbbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbc0:	601a      	str	r2, [r3, #0]
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	e780      	b.n	800cace <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbce:	f000 fa6e 	bl	800d0ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbd2:	f000 fe3d 	bl	800d850 <xTaskResumeAll>
 800cbd6:	e77a      	b.n	800cace <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cbd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbda:	f000 fa68 	bl	800d0ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbde:	f000 fe37 	bl	800d850 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbe4:	f000 fab5 	bl	800d152 <prvIsQueueEmpty>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f43f af6f 	beq.w	800cace <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cbf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3730      	adds	r7, #48	; 0x30
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed04 	.word	0xe000ed04

0800cc00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b08e      	sub	sp, #56	; 0x38
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cc12:	2300      	movs	r3, #0
 800cc14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10a      	bne.n	800cc32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc20:	f383 8811 	msr	BASEPRI, r3
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	623b      	str	r3, [r7, #32]
}
 800cc2e:	bf00      	nop
 800cc30:	e7fe      	b.n	800cc30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	61fb      	str	r3, [r7, #28]
}
 800cc4c:	bf00      	nop
 800cc4e:	e7fe      	b.n	800cc4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc50:	f001 fa82 	bl	800e158 <xTaskGetSchedulerState>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d102      	bne.n	800cc60 <xQueueSemaphoreTake+0x60>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d101      	bne.n	800cc64 <xQueueSemaphoreTake+0x64>
 800cc60:	2301      	movs	r3, #1
 800cc62:	e000      	b.n	800cc66 <xQueueSemaphoreTake+0x66>
 800cc64:	2300      	movs	r3, #0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10a      	bne.n	800cc80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	61bb      	str	r3, [r7, #24]
}
 800cc7c:	bf00      	nop
 800cc7e:	e7fe      	b.n	800cc7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc80:	f002 f8f8 	bl	800ee74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d024      	beq.n	800ccda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	1e5a      	subs	r2, r3, #1
 800cc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d104      	bne.n	800ccaa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cca0:	f001 fbe8 	bl	800e474 <pvTaskIncrementMutexHeldCount>
 800cca4:	4602      	mov	r2, r0
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00f      	beq.n	800ccd2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	3310      	adds	r3, #16
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f001 f82e 	bl	800dd18 <xTaskRemoveFromEventList>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d007      	beq.n	800ccd2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ccc2:	4b54      	ldr	r3, [pc, #336]	; (800ce14 <xQueueSemaphoreTake+0x214>)
 800ccc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc8:	601a      	str	r2, [r3, #0]
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ccd2:	f002 f8ff 	bl	800eed4 <vPortExitCritical>
				return pdPASS;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e097      	b.n	800ce0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d111      	bne.n	800cd04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	617b      	str	r3, [r7, #20]
}
 800ccf8:	bf00      	nop
 800ccfa:	e7fe      	b.n	800ccfa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ccfc:	f002 f8ea 	bl	800eed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd00:	2300      	movs	r3, #0
 800cd02:	e082      	b.n	800ce0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d106      	bne.n	800cd18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd0a:	f107 030c 	add.w	r3, r7, #12
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f001 f8c8 	bl	800dea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd14:	2301      	movs	r3, #1
 800cd16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd18:	f002 f8dc 	bl	800eed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd1c:	f000 fd8a 	bl	800d834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd20:	f002 f8a8 	bl	800ee74 <vPortEnterCritical>
 800cd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd2a:	b25b      	sxtb	r3, r3
 800cd2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd30:	d103      	bne.n	800cd3a <xQueueSemaphoreTake+0x13a>
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd40:	b25b      	sxtb	r3, r3
 800cd42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd46:	d103      	bne.n	800cd50 <xQueueSemaphoreTake+0x150>
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd50:	f002 f8c0 	bl	800eed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd54:	463a      	mov	r2, r7
 800cd56:	f107 030c 	add.w	r3, r7, #12
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f001 f8b7 	bl	800ded0 <xTaskCheckForTimeOut>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d132      	bne.n	800cdce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd6a:	f000 f9f2 	bl	800d152 <prvIsQueueEmpty>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d026      	beq.n	800cdc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d109      	bne.n	800cd90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cd7c:	f002 f87a 	bl	800ee74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f001 fa05 	bl	800e194 <xTaskPriorityInherit>
 800cd8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cd8c:	f002 f8a2 	bl	800eed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd92:	3324      	adds	r3, #36	; 0x24
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	4611      	mov	r1, r2
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 ff31 	bl	800dc00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cda0:	f000 f985 	bl	800d0ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cda4:	f000 fd54 	bl	800d850 <xTaskResumeAll>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f47f af68 	bne.w	800cc80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cdb0:	4b18      	ldr	r3, [pc, #96]	; (800ce14 <xQueueSemaphoreTake+0x214>)
 800cdb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb6:	601a      	str	r2, [r3, #0]
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	e75e      	b.n	800cc80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cdc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdc4:	f000 f973 	bl	800d0ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdc8:	f000 fd42 	bl	800d850 <xTaskResumeAll>
 800cdcc:	e758      	b.n	800cc80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cdce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdd0:	f000 f96d 	bl	800d0ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdd4:	f000 fd3c 	bl	800d850 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdda:	f000 f9ba 	bl	800d152 <prvIsQueueEmpty>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f43f af4d 	beq.w	800cc80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00d      	beq.n	800ce08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cdec:	f002 f842 	bl	800ee74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cdf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdf2:	f000 f8b4 	bl	800cf5e <prvGetDisinheritPriorityAfterTimeout>
 800cdf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f001 fa9e 	bl	800e340 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ce04:	f002 f866 	bl	800eed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3738      	adds	r7, #56	; 0x38
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	e000ed04 	.word	0xe000ed04

0800ce18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08e      	sub	sp, #56	; 0x38
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10a      	bne.n	800ce44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ce2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	623b      	str	r3, [r7, #32]
}
 800ce40:	bf00      	nop
 800ce42:	e7fe      	b.n	800ce42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d103      	bne.n	800ce52 <xQueueReceiveFromISR+0x3a>
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <xQueueReceiveFromISR+0x3e>
 800ce52:	2301      	movs	r3, #1
 800ce54:	e000      	b.n	800ce58 <xQueueReceiveFromISR+0x40>
 800ce56:	2300      	movs	r3, #0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10a      	bne.n	800ce72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ce5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce60:	f383 8811 	msr	BASEPRI, r3
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	61fb      	str	r3, [r7, #28]
}
 800ce6e:	bf00      	nop
 800ce70:	e7fe      	b.n	800ce70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce72:	f002 f8e1 	bl	800f038 <vPortValidateInterruptPriority>
	__asm volatile
 800ce76:	f3ef 8211 	mrs	r2, BASEPRI
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	61ba      	str	r2, [r7, #24]
 800ce8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ce8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d02f      	beq.n	800cefe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cea8:	68b9      	ldr	r1, [r7, #8]
 800ceaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceac:	f000 f8d9 	bl	800d062 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb2:	1e5a      	subs	r2, r3, #1
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ceb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec0:	d112      	bne.n	800cee8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d016      	beq.n	800cef8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	3310      	adds	r3, #16
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 ff22 	bl	800dd18 <xTaskRemoveFromEventList>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00e      	beq.n	800cef8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	601a      	str	r2, [r3, #0]
 800cee6:	e007      	b.n	800cef8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceec:	3301      	adds	r3, #1
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	b25a      	sxtb	r2, r3
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cef8:	2301      	movs	r3, #1
 800cefa:	637b      	str	r3, [r7, #52]	; 0x34
 800cefc:	e001      	b.n	800cf02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	637b      	str	r3, [r7, #52]	; 0x34
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	f383 8811 	msr	BASEPRI, r3
}
 800cf0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3738      	adds	r7, #56	; 0x38
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10a      	bne.n	800cf40 <vQueueDelete+0x28>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	60bb      	str	r3, [r7, #8]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 f95f 	bl	800d204 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d102      	bne.n	800cf56 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f002 f97d 	bl	800f250 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cf56:	bf00      	nop
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cf5e:	b480      	push	{r7}
 800cf60:	b085      	sub	sp, #20
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d006      	beq.n	800cf7c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	e001      	b.n	800cf80 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cf80:	68fb      	ldr	r3, [r7, #12]
	}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b086      	sub	sp, #24
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	60f8      	str	r0, [r7, #12]
 800cf96:	60b9      	str	r1, [r7, #8]
 800cf98:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10d      	bne.n	800cfc8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d14d      	bne.n	800d050 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f001 f953 	bl	800e264 <xTaskPriorityDisinherit>
 800cfbe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	609a      	str	r2, [r3, #8]
 800cfc6:	e043      	b.n	800d050 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d119      	bne.n	800d002 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6858      	ldr	r0, [r3, #4]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	68b9      	ldr	r1, [r7, #8]
 800cfda:	f002 fa81 	bl	800f4e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	685a      	ldr	r2, [r3, #4]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe6:	441a      	add	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d32b      	bcc.n	800d050 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	605a      	str	r2, [r3, #4]
 800d000:	e026      	b.n	800d050 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	68d8      	ldr	r0, [r3, #12]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d00a:	461a      	mov	r2, r3
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	f002 fa67 	bl	800f4e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	68da      	ldr	r2, [r3, #12]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01a:	425b      	negs	r3, r3
 800d01c:	441a      	add	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	68da      	ldr	r2, [r3, #12]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d207      	bcs.n	800d03e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	689a      	ldr	r2, [r3, #8]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d036:	425b      	negs	r3, r3
 800d038:	441a      	add	r2, r3
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b02      	cmp	r3, #2
 800d042:	d105      	bne.n	800d050 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d002      	beq.n	800d050 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d058:	697b      	ldr	r3, [r7, #20]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d070:	2b00      	cmp	r3, #0
 800d072:	d018      	beq.n	800d0a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68da      	ldr	r2, [r3, #12]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07c:	441a      	add	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	68da      	ldr	r2, [r3, #12]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d303      	bcc.n	800d096 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68d9      	ldr	r1, [r3, #12]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6838      	ldr	r0, [r7, #0]
 800d0a2:	f002 fa1d 	bl	800f4e0 <memcpy>
	}
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b084      	sub	sp, #16
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d0b6:	f001 fedd 	bl	800ee74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0c2:	e011      	b.n	800d0e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d012      	beq.n	800d0f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	3324      	adds	r3, #36	; 0x24
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f000 fe21 	bl	800dd18 <xTaskRemoveFromEventList>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d0dc:	f000 ff5a 	bl	800df94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dce9      	bgt.n	800d0c4 <prvUnlockQueue+0x16>
 800d0f0:	e000      	b.n	800d0f4 <prvUnlockQueue+0x46>
					break;
 800d0f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	22ff      	movs	r2, #255	; 0xff
 800d0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d0fc:	f001 feea 	bl	800eed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d100:	f001 feb8 	bl	800ee74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d10a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d10c:	e011      	b.n	800d132 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d012      	beq.n	800d13c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	3310      	adds	r3, #16
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 fdfc 	bl	800dd18 <xTaskRemoveFromEventList>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d126:	f000 ff35 	bl	800df94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d12a:	7bbb      	ldrb	r3, [r7, #14]
 800d12c:	3b01      	subs	r3, #1
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d136:	2b00      	cmp	r3, #0
 800d138:	dce9      	bgt.n	800d10e <prvUnlockQueue+0x60>
 800d13a:	e000      	b.n	800d13e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d13c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	22ff      	movs	r2, #255	; 0xff
 800d142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d146:	f001 fec5 	bl	800eed4 <vPortExitCritical>
}
 800d14a:	bf00      	nop
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b084      	sub	sp, #16
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d15a:	f001 fe8b 	bl	800ee74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d166:	2301      	movs	r3, #1
 800d168:	60fb      	str	r3, [r7, #12]
 800d16a:	e001      	b.n	800d170 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d16c:	2300      	movs	r3, #0
 800d16e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d170:	f001 feb0 	bl	800eed4 <vPortExitCritical>

	return xReturn;
 800d174:	68fb      	ldr	r3, [r7, #12]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d186:	f001 fe75 	bl	800ee74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d192:	429a      	cmp	r2, r3
 800d194:	d102      	bne.n	800d19c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d196:	2301      	movs	r3, #1
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	e001      	b.n	800d1a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d19c:	2300      	movs	r3, #0
 800d19e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1a0:	f001 fe98 	bl	800eed4 <vPortExitCritical>

	return xReturn;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	e014      	b.n	800d1ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d1c0:	4a0f      	ldr	r2, [pc, #60]	; (800d200 <vQueueAddToRegistry+0x50>)
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10b      	bne.n	800d1e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d1cc:	490c      	ldr	r1, [pc, #48]	; (800d200 <vQueueAddToRegistry+0x50>)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d1d6:	4a0a      	ldr	r2, [pc, #40]	; (800d200 <vQueueAddToRegistry+0x50>)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	00db      	lsls	r3, r3, #3
 800d1dc:	4413      	add	r3, r2
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d1e2:	e006      	b.n	800d1f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	60fb      	str	r3, [r7, #12]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b07      	cmp	r3, #7
 800d1ee:	d9e7      	bls.n	800d1c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d1f0:	bf00      	nop
 800d1f2:	bf00      	nop
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr
 800d1fe:	bf00      	nop
 800d200:	20010614 	.word	0x20010614

0800d204 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d20c:	2300      	movs	r3, #0
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	e016      	b.n	800d240 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d212:	4a10      	ldr	r2, [pc, #64]	; (800d254 <vQueueUnregisterQueue+0x50>)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	4413      	add	r3, r2
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d10b      	bne.n	800d23a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d222:	4a0c      	ldr	r2, [pc, #48]	; (800d254 <vQueueUnregisterQueue+0x50>)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2100      	movs	r1, #0
 800d228:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d22c:	4a09      	ldr	r2, [pc, #36]	; (800d254 <vQueueUnregisterQueue+0x50>)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	00db      	lsls	r3, r3, #3
 800d232:	4413      	add	r3, r2
 800d234:	2200      	movs	r2, #0
 800d236:	605a      	str	r2, [r3, #4]
				break;
 800d238:	e006      	b.n	800d248 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	3301      	adds	r3, #1
 800d23e:	60fb      	str	r3, [r7, #12]
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2b07      	cmp	r3, #7
 800d244:	d9e5      	bls.n	800d212 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d246:	bf00      	nop
 800d248:	bf00      	nop
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	20010614 	.word	0x20010614

0800d258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b086      	sub	sp, #24
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d268:	f001 fe04 	bl	800ee74 <vPortEnterCritical>
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d272:	b25b      	sxtb	r3, r3
 800d274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d278:	d103      	bne.n	800d282 <vQueueWaitForMessageRestricted+0x2a>
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d288:	b25b      	sxtb	r3, r3
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d28e:	d103      	bne.n	800d298 <vQueueWaitForMessageRestricted+0x40>
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2200      	movs	r2, #0
 800d294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d298:	f001 fe1c 	bl	800eed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d106      	bne.n	800d2b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	3324      	adds	r3, #36	; 0x24
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	68b9      	ldr	r1, [r7, #8]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 fd07 	bl	800dcc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d2b2:	6978      	ldr	r0, [r7, #20]
 800d2b4:	f7ff fefb 	bl	800d0ae <prvUnlockQueue>
	}
 800d2b8:	bf00      	nop
 800d2ba:	3718      	adds	r7, #24
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08e      	sub	sp, #56	; 0x38
 800d2c4:	af04      	add	r7, sp, #16
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10a      	bne.n	800d2ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	623b      	str	r3, [r7, #32]
}
 800d2e6:	bf00      	nop
 800d2e8:	e7fe      	b.n	800d2e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10a      	bne.n	800d306 <xTaskCreateStatic+0x46>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	61fb      	str	r3, [r7, #28]
}
 800d302:	bf00      	nop
 800d304:	e7fe      	b.n	800d304 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d306:	235c      	movs	r3, #92	; 0x5c
 800d308:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b5c      	cmp	r3, #92	; 0x5c
 800d30e:	d00a      	beq.n	800d326 <xTaskCreateStatic+0x66>
	__asm volatile
 800d310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d314:	f383 8811 	msr	BASEPRI, r3
 800d318:	f3bf 8f6f 	isb	sy
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	61bb      	str	r3, [r7, #24]
}
 800d322:	bf00      	nop
 800d324:	e7fe      	b.n	800d324 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d326:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d01e      	beq.n	800d36c <xTaskCreateStatic+0xac>
 800d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d330:	2b00      	cmp	r3, #0
 800d332:	d01b      	beq.n	800d36c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d336:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d33c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	2202      	movs	r2, #2
 800d342:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d346:	2300      	movs	r3, #0
 800d348:	9303      	str	r3, [sp, #12]
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	9302      	str	r3, [sp, #8]
 800d34e:	f107 0314 	add.w	r3, r7, #20
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	68b9      	ldr	r1, [r7, #8]
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f000 f850 	bl	800d404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d366:	f000 f8dd 	bl	800d524 <prvAddNewTaskToReadyList>
 800d36a:	e001      	b.n	800d370 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d36c:	2300      	movs	r3, #0
 800d36e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d370:	697b      	ldr	r3, [r7, #20]
	}
 800d372:	4618      	mov	r0, r3
 800d374:	3728      	adds	r7, #40	; 0x28
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b08c      	sub	sp, #48	; 0x30
 800d37e:	af04      	add	r7, sp, #16
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	603b      	str	r3, [r7, #0]
 800d386:	4613      	mov	r3, r2
 800d388:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d38a:	88fb      	ldrh	r3, [r7, #6]
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4618      	mov	r0, r3
 800d390:	f001 fe92 	bl	800f0b8 <pvPortMalloc>
 800d394:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00e      	beq.n	800d3ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d39c:	205c      	movs	r0, #92	; 0x5c
 800d39e:	f001 fe8b 	bl	800f0b8 <pvPortMalloc>
 800d3a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	697a      	ldr	r2, [r7, #20]
 800d3ae:	631a      	str	r2, [r3, #48]	; 0x30
 800d3b0:	e005      	b.n	800d3be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3b2:	6978      	ldr	r0, [r7, #20]
 800d3b4:	f001 ff4c 	bl	800f250 <vPortFree>
 800d3b8:	e001      	b.n	800d3be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d017      	beq.n	800d3f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3cc:	88fa      	ldrh	r2, [r7, #6]
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9303      	str	r3, [sp, #12]
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	9302      	str	r3, [sp, #8]
 800d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d8:	9301      	str	r3, [sp, #4]
 800d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f000 f80e 	bl	800d404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3e8:	69f8      	ldr	r0, [r7, #28]
 800d3ea:	f000 f89b 	bl	800d524 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	61bb      	str	r3, [r7, #24]
 800d3f2:	e002      	b.n	800d3fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d3fa:	69bb      	ldr	r3, [r7, #24]
	}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3720      	adds	r7, #32
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b088      	sub	sp, #32
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
 800d410:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	461a      	mov	r2, r3
 800d41c:	21a5      	movs	r1, #165	; 0xa5
 800d41e:	f002 f86d 	bl	800f4fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d42c:	3b01      	subs	r3, #1
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	f023 0307 	bic.w	r3, r3, #7
 800d43a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	f003 0307 	and.w	r3, r3, #7
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	617b      	str	r3, [r7, #20]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d01f      	beq.n	800d4a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d462:	2300      	movs	r3, #0
 800d464:	61fb      	str	r3, [r7, #28]
 800d466:	e012      	b.n	800d48e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	4413      	add	r3, r2
 800d46e:	7819      	ldrb	r1, [r3, #0]
 800d470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	4413      	add	r3, r2
 800d476:	3334      	adds	r3, #52	; 0x34
 800d478:	460a      	mov	r2, r1
 800d47a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	4413      	add	r3, r2
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d006      	beq.n	800d496 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	3301      	adds	r3, #1
 800d48c:	61fb      	str	r3, [r7, #28]
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	2b0f      	cmp	r3, #15
 800d492:	d9e9      	bls.n	800d468 <prvInitialiseNewTask+0x64>
 800d494:	e000      	b.n	800d498 <prvInitialiseNewTask+0x94>
			{
				break;
 800d496:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49a:	2200      	movs	r2, #0
 800d49c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4a0:	e003      	b.n	800d4aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ac:	2b37      	cmp	r3, #55	; 0x37
 800d4ae:	d901      	bls.n	800d4b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4b0:	2337      	movs	r3, #55	; 0x37
 800d4b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fe fe56 	bl	800c17c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d2:	3318      	adds	r3, #24
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe fe51 	bl	800c17c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	68f9      	ldr	r1, [r7, #12]
 800d502:	69b8      	ldr	r0, [r7, #24]
 800d504:	f001 fb8c 	bl	800ec20 <pxPortInitialiseStack>
 800d508:	4602      	mov	r2, r0
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d002      	beq.n	800d51a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d51a:	bf00      	nop
 800d51c:	3720      	adds	r7, #32
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
	...

0800d524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d52c:	f001 fca2 	bl	800ee74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d530:	4b2d      	ldr	r3, [pc, #180]	; (800d5e8 <prvAddNewTaskToReadyList+0xc4>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	3301      	adds	r3, #1
 800d536:	4a2c      	ldr	r2, [pc, #176]	; (800d5e8 <prvAddNewTaskToReadyList+0xc4>)
 800d538:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d53a:	4b2c      	ldr	r3, [pc, #176]	; (800d5ec <prvAddNewTaskToReadyList+0xc8>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d109      	bne.n	800d556 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d542:	4a2a      	ldr	r2, [pc, #168]	; (800d5ec <prvAddNewTaskToReadyList+0xc8>)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d548:	4b27      	ldr	r3, [pc, #156]	; (800d5e8 <prvAddNewTaskToReadyList+0xc4>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d110      	bne.n	800d572 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d550:	f000 fd44 	bl	800dfdc <prvInitialiseTaskLists>
 800d554:	e00d      	b.n	800d572 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d556:	4b26      	ldr	r3, [pc, #152]	; (800d5f0 <prvAddNewTaskToReadyList+0xcc>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d109      	bne.n	800d572 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d55e:	4b23      	ldr	r3, [pc, #140]	; (800d5ec <prvAddNewTaskToReadyList+0xc8>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	429a      	cmp	r2, r3
 800d56a:	d802      	bhi.n	800d572 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d56c:	4a1f      	ldr	r2, [pc, #124]	; (800d5ec <prvAddNewTaskToReadyList+0xc8>)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d572:	4b20      	ldr	r3, [pc, #128]	; (800d5f4 <prvAddNewTaskToReadyList+0xd0>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3301      	adds	r3, #1
 800d578:	4a1e      	ldr	r2, [pc, #120]	; (800d5f4 <prvAddNewTaskToReadyList+0xd0>)
 800d57a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d57c:	4b1d      	ldr	r3, [pc, #116]	; (800d5f4 <prvAddNewTaskToReadyList+0xd0>)
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d588:	4b1b      	ldr	r3, [pc, #108]	; (800d5f8 <prvAddNewTaskToReadyList+0xd4>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d903      	bls.n	800d598 <prvAddNewTaskToReadyList+0x74>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d594:	4a18      	ldr	r2, [pc, #96]	; (800d5f8 <prvAddNewTaskToReadyList+0xd4>)
 800d596:	6013      	str	r3, [r2, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59c:	4613      	mov	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4a15      	ldr	r2, [pc, #84]	; (800d5fc <prvAddNewTaskToReadyList+0xd8>)
 800d5a6:	441a      	add	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3304      	adds	r3, #4
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	f7fe fdf1 	bl	800c196 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d5b4:	f001 fc8e 	bl	800eed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d5b8:	4b0d      	ldr	r3, [pc, #52]	; (800d5f0 <prvAddNewTaskToReadyList+0xcc>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d00e      	beq.n	800d5de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <prvAddNewTaskToReadyList+0xc8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d207      	bcs.n	800d5de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d5ce:	4b0c      	ldr	r3, [pc, #48]	; (800d600 <prvAddNewTaskToReadyList+0xdc>)
 800d5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5de:	bf00      	nop
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	20000dc8 	.word	0x20000dc8
 800d5ec:	200008f4 	.word	0x200008f4
 800d5f0:	20000dd4 	.word	0x20000dd4
 800d5f4:	20000de4 	.word	0x20000de4
 800d5f8:	20000dd0 	.word	0x20000dd0
 800d5fc:	200008f8 	.word	0x200008f8
 800d600:	e000ed04 	.word	0xe000ed04

0800d604 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08a      	sub	sp, #40	; 0x28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d60e:	2300      	movs	r3, #0
 800d610:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d10a      	bne.n	800d62e <vTaskDelayUntil+0x2a>
	__asm volatile
 800d618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61c:	f383 8811 	msr	BASEPRI, r3
 800d620:	f3bf 8f6f 	isb	sy
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	617b      	str	r3, [r7, #20]
}
 800d62a:	bf00      	nop
 800d62c:	e7fe      	b.n	800d62c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10a      	bne.n	800d64a <vTaskDelayUntil+0x46>
	__asm volatile
 800d634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d638:	f383 8811 	msr	BASEPRI, r3
 800d63c:	f3bf 8f6f 	isb	sy
 800d640:	f3bf 8f4f 	dsb	sy
 800d644:	613b      	str	r3, [r7, #16]
}
 800d646:	bf00      	nop
 800d648:	e7fe      	b.n	800d648 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d64a:	4b2a      	ldr	r3, [pc, #168]	; (800d6f4 <vTaskDelayUntil+0xf0>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00a      	beq.n	800d668 <vTaskDelayUntil+0x64>
	__asm volatile
 800d652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d656:	f383 8811 	msr	BASEPRI, r3
 800d65a:	f3bf 8f6f 	isb	sy
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	60fb      	str	r3, [r7, #12]
}
 800d664:	bf00      	nop
 800d666:	e7fe      	b.n	800d666 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d668:	f000 f8e4 	bl	800d834 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d66c:	4b22      	ldr	r3, [pc, #136]	; (800d6f8 <vTaskDelayUntil+0xf4>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	4413      	add	r3, r2
 800d67a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6a3a      	ldr	r2, [r7, #32]
 800d682:	429a      	cmp	r2, r3
 800d684:	d20b      	bcs.n	800d69e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d211      	bcs.n	800d6b4 <vTaskDelayUntil+0xb0>
 800d690:	69fa      	ldr	r2, [r7, #28]
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	429a      	cmp	r2, r3
 800d696:	d90d      	bls.n	800d6b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d698:	2301      	movs	r3, #1
 800d69a:	627b      	str	r3, [r7, #36]	; 0x24
 800d69c:	e00a      	b.n	800d6b4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	69fa      	ldr	r2, [r7, #28]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d303      	bcc.n	800d6b0 <vTaskDelayUntil+0xac>
 800d6a8:	69fa      	ldr	r2, [r7, #28]
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d901      	bls.n	800d6b4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	69fa      	ldr	r2, [r7, #28]
 800d6b8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d6c0:	69fa      	ldr	r2, [r7, #28]
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	1ad3      	subs	r3, r2, r3
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 fee7 	bl	800e49c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d6ce:	f000 f8bf 	bl	800d850 <xTaskResumeAll>
 800d6d2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d107      	bne.n	800d6ea <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d6da:	4b08      	ldr	r3, [pc, #32]	; (800d6fc <vTaskDelayUntil+0xf8>)
 800d6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6ea:	bf00      	nop
 800d6ec:	3728      	adds	r7, #40	; 0x28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	20000df0 	.word	0x20000df0
 800d6f8:	20000dcc 	.word	0x20000dcc
 800d6fc:	e000ed04 	.word	0xe000ed04

0800d700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d708:	2300      	movs	r3, #0
 800d70a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d017      	beq.n	800d742 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d712:	4b13      	ldr	r3, [pc, #76]	; (800d760 <vTaskDelay+0x60>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00a      	beq.n	800d730 <vTaskDelay+0x30>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	60bb      	str	r3, [r7, #8]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d730:	f000 f880 	bl	800d834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d734:	2100      	movs	r1, #0
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 feb0 	bl	800e49c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d73c:	f000 f888 	bl	800d850 <xTaskResumeAll>
 800d740:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d107      	bne.n	800d758 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d748:	4b06      	ldr	r3, [pc, #24]	; (800d764 <vTaskDelay+0x64>)
 800d74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d74e:	601a      	str	r2, [r3, #0]
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d758:	bf00      	nop
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	20000df0 	.word	0x20000df0
 800d764:	e000ed04 	.word	0xe000ed04

0800d768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08a      	sub	sp, #40	; 0x28
 800d76c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d76e:	2300      	movs	r3, #0
 800d770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d772:	2300      	movs	r3, #0
 800d774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d776:	463a      	mov	r2, r7
 800d778:	1d39      	adds	r1, r7, #4
 800d77a:	f107 0308 	add.w	r3, r7, #8
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fe faba 	bl	800bcf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d784:	6839      	ldr	r1, [r7, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	9202      	str	r2, [sp, #8]
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	2300      	movs	r3, #0
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	2300      	movs	r3, #0
 800d794:	460a      	mov	r2, r1
 800d796:	4921      	ldr	r1, [pc, #132]	; (800d81c <vTaskStartScheduler+0xb4>)
 800d798:	4821      	ldr	r0, [pc, #132]	; (800d820 <vTaskStartScheduler+0xb8>)
 800d79a:	f7ff fd91 	bl	800d2c0 <xTaskCreateStatic>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4a20      	ldr	r2, [pc, #128]	; (800d824 <vTaskStartScheduler+0xbc>)
 800d7a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d7a4:	4b1f      	ldr	r3, [pc, #124]	; (800d824 <vTaskStartScheduler+0xbc>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	617b      	str	r3, [r7, #20]
 800d7b0:	e001      	b.n	800d7b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d102      	bne.n	800d7c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d7bc:	f000 fec2 	bl	800e544 <xTimerCreateTimerTask>
 800d7c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d116      	bne.n	800d7f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	613b      	str	r3, [r7, #16]
}
 800d7da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d7dc:	4b12      	ldr	r3, [pc, #72]	; (800d828 <vTaskStartScheduler+0xc0>)
 800d7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d7e4:	4b11      	ldr	r3, [pc, #68]	; (800d82c <vTaskStartScheduler+0xc4>)
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7ea:	4b11      	ldr	r3, [pc, #68]	; (800d830 <vTaskStartScheduler+0xc8>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7f0:	f001 fa9e 	bl	800ed30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7f4:	e00e      	b.n	800d814 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7fc:	d10a      	bne.n	800d814 <vTaskStartScheduler+0xac>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	60fb      	str	r3, [r7, #12]
}
 800d810:	bf00      	nop
 800d812:	e7fe      	b.n	800d812 <vTaskStartScheduler+0xaa>
}
 800d814:	bf00      	nop
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	080107bc 	.word	0x080107bc
 800d820:	0800dfad 	.word	0x0800dfad
 800d824:	20000dec 	.word	0x20000dec
 800d828:	20000de8 	.word	0x20000de8
 800d82c:	20000dd4 	.word	0x20000dd4
 800d830:	20000dcc 	.word	0x20000dcc

0800d834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d834:	b480      	push	{r7}
 800d836:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d838:	4b04      	ldr	r3, [pc, #16]	; (800d84c <vTaskSuspendAll+0x18>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3301      	adds	r3, #1
 800d83e:	4a03      	ldr	r2, [pc, #12]	; (800d84c <vTaskSuspendAll+0x18>)
 800d840:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d842:	bf00      	nop
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	20000df0 	.word	0x20000df0

0800d850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d856:	2300      	movs	r3, #0
 800d858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d85a:	2300      	movs	r3, #0
 800d85c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d85e:	4b42      	ldr	r3, [pc, #264]	; (800d968 <xTaskResumeAll+0x118>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <xTaskResumeAll+0x2c>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	603b      	str	r3, [r7, #0]
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d87c:	f001 fafa 	bl	800ee74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d880:	4b39      	ldr	r3, [pc, #228]	; (800d968 <xTaskResumeAll+0x118>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	3b01      	subs	r3, #1
 800d886:	4a38      	ldr	r2, [pc, #224]	; (800d968 <xTaskResumeAll+0x118>)
 800d888:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d88a:	4b37      	ldr	r3, [pc, #220]	; (800d968 <xTaskResumeAll+0x118>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d162      	bne.n	800d958 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d892:	4b36      	ldr	r3, [pc, #216]	; (800d96c <xTaskResumeAll+0x11c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d05e      	beq.n	800d958 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d89a:	e02f      	b.n	800d8fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d89c:	4b34      	ldr	r3, [pc, #208]	; (800d970 <xTaskResumeAll+0x120>)
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	3318      	adds	r3, #24
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7fe fcd1 	bl	800c250 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fe fccc 	bl	800c250 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8bc:	4b2d      	ldr	r3, [pc, #180]	; (800d974 <xTaskResumeAll+0x124>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d903      	bls.n	800d8cc <xTaskResumeAll+0x7c>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	4a2a      	ldr	r2, [pc, #168]	; (800d974 <xTaskResumeAll+0x124>)
 800d8ca:	6013      	str	r3, [r2, #0]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	4a27      	ldr	r2, [pc, #156]	; (800d978 <xTaskResumeAll+0x128>)
 800d8da:	441a      	add	r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	3304      	adds	r3, #4
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	f7fe fc57 	bl	800c196 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ec:	4b23      	ldr	r3, [pc, #140]	; (800d97c <xTaskResumeAll+0x12c>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d302      	bcc.n	800d8fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d8f6:	4b22      	ldr	r3, [pc, #136]	; (800d980 <xTaskResumeAll+0x130>)
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8fc:	4b1c      	ldr	r3, [pc, #112]	; (800d970 <xTaskResumeAll+0x120>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1cb      	bne.n	800d89c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d001      	beq.n	800d90e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d90a:	f000 fc05 	bl	800e118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d90e:	4b1d      	ldr	r3, [pc, #116]	; (800d984 <xTaskResumeAll+0x134>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d010      	beq.n	800d93c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d91a:	f000 f859 	bl	800d9d0 <xTaskIncrementTick>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d924:	4b16      	ldr	r3, [pc, #88]	; (800d980 <xTaskResumeAll+0x130>)
 800d926:	2201      	movs	r2, #1
 800d928:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1f1      	bne.n	800d91a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d936:	4b13      	ldr	r3, [pc, #76]	; (800d984 <xTaskResumeAll+0x134>)
 800d938:	2200      	movs	r2, #0
 800d93a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d93c:	4b10      	ldr	r3, [pc, #64]	; (800d980 <xTaskResumeAll+0x130>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d009      	beq.n	800d958 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d944:	2301      	movs	r3, #1
 800d946:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d948:	4b0f      	ldr	r3, [pc, #60]	; (800d988 <xTaskResumeAll+0x138>)
 800d94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d958:	f001 fabc 	bl	800eed4 <vPortExitCritical>

	return xAlreadyYielded;
 800d95c:	68bb      	ldr	r3, [r7, #8]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	20000df0 	.word	0x20000df0
 800d96c:	20000dc8 	.word	0x20000dc8
 800d970:	20000d88 	.word	0x20000d88
 800d974:	20000dd0 	.word	0x20000dd0
 800d978:	200008f8 	.word	0x200008f8
 800d97c:	200008f4 	.word	0x200008f4
 800d980:	20000ddc 	.word	0x20000ddc
 800d984:	20000dd8 	.word	0x20000dd8
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d992:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <xTaskGetTickCount+0x1c>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d998:	687b      	ldr	r3, [r7, #4]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	370c      	adds	r7, #12
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	20000dcc 	.word	0x20000dcc

0800d9ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9b2:	f001 fb41 	bl	800f038 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d9ba:	4b04      	ldr	r3, [pc, #16]	; (800d9cc <xTaskGetTickCountFromISR+0x20>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9c0:	683b      	ldr	r3, [r7, #0]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20000dcc 	.word	0x20000dcc

0800d9d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9da:	4b4f      	ldr	r3, [pc, #316]	; (800db18 <xTaskIncrementTick+0x148>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f040 808f 	bne.w	800db02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d9e4:	4b4d      	ldr	r3, [pc, #308]	; (800db1c <xTaskIncrementTick+0x14c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d9ec:	4a4b      	ldr	r2, [pc, #300]	; (800db1c <xTaskIncrementTick+0x14c>)
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d120      	bne.n	800da3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d9f8:	4b49      	ldr	r3, [pc, #292]	; (800db20 <xTaskIncrementTick+0x150>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00a      	beq.n	800da18 <xTaskIncrementTick+0x48>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	603b      	str	r3, [r7, #0]
}
 800da14:	bf00      	nop
 800da16:	e7fe      	b.n	800da16 <xTaskIncrementTick+0x46>
 800da18:	4b41      	ldr	r3, [pc, #260]	; (800db20 <xTaskIncrementTick+0x150>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	60fb      	str	r3, [r7, #12]
 800da1e:	4b41      	ldr	r3, [pc, #260]	; (800db24 <xTaskIncrementTick+0x154>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a3f      	ldr	r2, [pc, #252]	; (800db20 <xTaskIncrementTick+0x150>)
 800da24:	6013      	str	r3, [r2, #0]
 800da26:	4a3f      	ldr	r2, [pc, #252]	; (800db24 <xTaskIncrementTick+0x154>)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6013      	str	r3, [r2, #0]
 800da2c:	4b3e      	ldr	r3, [pc, #248]	; (800db28 <xTaskIncrementTick+0x158>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	3301      	adds	r3, #1
 800da32:	4a3d      	ldr	r2, [pc, #244]	; (800db28 <xTaskIncrementTick+0x158>)
 800da34:	6013      	str	r3, [r2, #0]
 800da36:	f000 fb6f 	bl	800e118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800da3a:	4b3c      	ldr	r3, [pc, #240]	; (800db2c <xTaskIncrementTick+0x15c>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	429a      	cmp	r2, r3
 800da42:	d349      	bcc.n	800dad8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da44:	4b36      	ldr	r3, [pc, #216]	; (800db20 <xTaskIncrementTick+0x150>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d104      	bne.n	800da58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da4e:	4b37      	ldr	r3, [pc, #220]	; (800db2c <xTaskIncrementTick+0x15c>)
 800da50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da54:	601a      	str	r2, [r3, #0]
					break;
 800da56:	e03f      	b.n	800dad8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da58:	4b31      	ldr	r3, [pc, #196]	; (800db20 <xTaskIncrementTick+0x150>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d203      	bcs.n	800da78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800da70:	4a2e      	ldr	r2, [pc, #184]	; (800db2c <xTaskIncrementTick+0x15c>)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800da76:	e02f      	b.n	800dad8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	3304      	adds	r3, #4
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fbe7 	bl	800c250 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da86:	2b00      	cmp	r3, #0
 800da88:	d004      	beq.n	800da94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	3318      	adds	r3, #24
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fe fbde 	bl	800c250 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da98:	4b25      	ldr	r3, [pc, #148]	; (800db30 <xTaskIncrementTick+0x160>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d903      	bls.n	800daa8 <xTaskIncrementTick+0xd8>
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa4:	4a22      	ldr	r2, [pc, #136]	; (800db30 <xTaskIncrementTick+0x160>)
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daac:	4613      	mov	r3, r2
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	4413      	add	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4a1f      	ldr	r2, [pc, #124]	; (800db34 <xTaskIncrementTick+0x164>)
 800dab6:	441a      	add	r2, r3
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	3304      	adds	r3, #4
 800dabc:	4619      	mov	r1, r3
 800dabe:	4610      	mov	r0, r2
 800dac0:	f7fe fb69 	bl	800c196 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac8:	4b1b      	ldr	r3, [pc, #108]	; (800db38 <xTaskIncrementTick+0x168>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dace:	429a      	cmp	r2, r3
 800dad0:	d3b8      	bcc.n	800da44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dad2:	2301      	movs	r3, #1
 800dad4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dad6:	e7b5      	b.n	800da44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dad8:	4b17      	ldr	r3, [pc, #92]	; (800db38 <xTaskIncrementTick+0x168>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dade:	4915      	ldr	r1, [pc, #84]	; (800db34 <xTaskIncrementTick+0x164>)
 800dae0:	4613      	mov	r3, r2
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	440b      	add	r3, r1
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d901      	bls.n	800daf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800daf0:	2301      	movs	r3, #1
 800daf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800daf4:	4b11      	ldr	r3, [pc, #68]	; (800db3c <xTaskIncrementTick+0x16c>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d007      	beq.n	800db0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dafc:	2301      	movs	r3, #1
 800dafe:	617b      	str	r3, [r7, #20]
 800db00:	e004      	b.n	800db0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800db02:	4b0f      	ldr	r3, [pc, #60]	; (800db40 <xTaskIncrementTick+0x170>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3301      	adds	r3, #1
 800db08:	4a0d      	ldr	r2, [pc, #52]	; (800db40 <xTaskIncrementTick+0x170>)
 800db0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800db0c:	697b      	ldr	r3, [r7, #20]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3718      	adds	r7, #24
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20000df0 	.word	0x20000df0
 800db1c:	20000dcc 	.word	0x20000dcc
 800db20:	20000d80 	.word	0x20000d80
 800db24:	20000d84 	.word	0x20000d84
 800db28:	20000de0 	.word	0x20000de0
 800db2c:	20000de8 	.word	0x20000de8
 800db30:	20000dd0 	.word	0x20000dd0
 800db34:	200008f8 	.word	0x200008f8
 800db38:	200008f4 	.word	0x200008f4
 800db3c:	20000ddc 	.word	0x20000ddc
 800db40:	20000dd8 	.word	0x20000dd8

0800db44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800db4a:	4b28      	ldr	r3, [pc, #160]	; (800dbec <vTaskSwitchContext+0xa8>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800db52:	4b27      	ldr	r3, [pc, #156]	; (800dbf0 <vTaskSwitchContext+0xac>)
 800db54:	2201      	movs	r2, #1
 800db56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800db58:	e041      	b.n	800dbde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800db5a:	4b25      	ldr	r3, [pc, #148]	; (800dbf0 <vTaskSwitchContext+0xac>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db60:	4b24      	ldr	r3, [pc, #144]	; (800dbf4 <vTaskSwitchContext+0xb0>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	e010      	b.n	800db8a <vTaskSwitchContext+0x46>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10a      	bne.n	800db84 <vTaskSwitchContext+0x40>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	607b      	str	r3, [r7, #4]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <vTaskSwitchContext+0x3e>
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	3b01      	subs	r3, #1
 800db88:	60fb      	str	r3, [r7, #12]
 800db8a:	491b      	ldr	r1, [pc, #108]	; (800dbf8 <vTaskSwitchContext+0xb4>)
 800db8c:	68fa      	ldr	r2, [r7, #12]
 800db8e:	4613      	mov	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4413      	add	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	440b      	add	r3, r1
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d0e4      	beq.n	800db68 <vTaskSwitchContext+0x24>
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4613      	mov	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4413      	add	r3, r2
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4a13      	ldr	r2, [pc, #76]	; (800dbf8 <vTaskSwitchContext+0xb4>)
 800dbaa:	4413      	add	r3, r2
 800dbac:	60bb      	str	r3, [r7, #8]
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	685a      	ldr	r2, [r3, #4]
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	605a      	str	r2, [r3, #4]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	3308      	adds	r3, #8
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d104      	bne.n	800dbce <vTaskSwitchContext+0x8a>
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	605a      	str	r2, [r3, #4]
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	4a09      	ldr	r2, [pc, #36]	; (800dbfc <vTaskSwitchContext+0xb8>)
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	4a06      	ldr	r2, [pc, #24]	; (800dbf4 <vTaskSwitchContext+0xb0>)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6013      	str	r3, [r2, #0]
}
 800dbde:	bf00      	nop
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	20000df0 	.word	0x20000df0
 800dbf0:	20000ddc 	.word	0x20000ddc
 800dbf4:	20000dd0 	.word	0x20000dd0
 800dbf8:	200008f8 	.word	0x200008f8
 800dbfc:	200008f4 	.word	0x200008f4

0800dc00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10a      	bne.n	800dc26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc14:	f383 8811 	msr	BASEPRI, r3
 800dc18:	f3bf 8f6f 	isb	sy
 800dc1c:	f3bf 8f4f 	dsb	sy
 800dc20:	60fb      	str	r3, [r7, #12]
}
 800dc22:	bf00      	nop
 800dc24:	e7fe      	b.n	800dc24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc26:	4b07      	ldr	r3, [pc, #28]	; (800dc44 <vTaskPlaceOnEventList+0x44>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	3318      	adds	r3, #24
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7fe fad5 	bl	800c1de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc34:	2101      	movs	r1, #1
 800dc36:	6838      	ldr	r0, [r7, #0]
 800dc38:	f000 fc30 	bl	800e49c <prvAddCurrentTaskToDelayedList>
}
 800dc3c:	bf00      	nop
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	200008f4 	.word	0x200008f4

0800dc48 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10a      	bne.n	800dc70 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800dc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	617b      	str	r3, [r7, #20]
}
 800dc6c:	bf00      	nop
 800dc6e:	e7fe      	b.n	800dc6e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800dc70:	4b11      	ldr	r3, [pc, #68]	; (800dcb8 <vTaskPlaceOnUnorderedEventList+0x70>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10a      	bne.n	800dc8e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	f383 8811 	msr	BASEPRI, r3
 800dc80:	f3bf 8f6f 	isb	sy
 800dc84:	f3bf 8f4f 	dsb	sy
 800dc88:	613b      	str	r3, [r7, #16]
}
 800dc8a:	bf00      	nop
 800dc8c:	e7fe      	b.n	800dc8c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800dc8e:	4b0b      	ldr	r3, [pc, #44]	; (800dcbc <vTaskPlaceOnUnorderedEventList+0x74>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800dc98:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc9a:	4b08      	ldr	r3, [pc, #32]	; (800dcbc <vTaskPlaceOnUnorderedEventList+0x74>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	3318      	adds	r3, #24
 800dca0:	4619      	mov	r1, r3
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	f7fe fa77 	bl	800c196 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dca8:	2101      	movs	r1, #1
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fbf6 	bl	800e49c <prvAddCurrentTaskToDelayedList>
}
 800dcb0:	bf00      	nop
 800dcb2:	3718      	adds	r7, #24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20000df0 	.word	0x20000df0
 800dcbc:	200008f4 	.word	0x200008f4

0800dcc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d10a      	bne.n	800dce8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	617b      	str	r3, [r7, #20]
}
 800dce4:	bf00      	nop
 800dce6:	e7fe      	b.n	800dce6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dce8:	4b0a      	ldr	r3, [pc, #40]	; (800dd14 <vTaskPlaceOnEventListRestricted+0x54>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	3318      	adds	r3, #24
 800dcee:	4619      	mov	r1, r3
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f7fe fa50 	bl	800c196 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dcfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dd02:	6879      	ldr	r1, [r7, #4]
 800dd04:	68b8      	ldr	r0, [r7, #8]
 800dd06:	f000 fbc9 	bl	800e49c <prvAddCurrentTaskToDelayedList>
	}
 800dd0a:	bf00      	nop
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	200008f4 	.word	0x200008f4

0800dd18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10a      	bne.n	800dd44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	60fb      	str	r3, [r7, #12]
}
 800dd40:	bf00      	nop
 800dd42:	e7fe      	b.n	800dd42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	3318      	adds	r3, #24
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe fa81 	bl	800c250 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd4e:	4b1e      	ldr	r3, [pc, #120]	; (800ddc8 <xTaskRemoveFromEventList+0xb0>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d11d      	bne.n	800dd92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	3304      	adds	r3, #4
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fa78 	bl	800c250 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd64:	4b19      	ldr	r3, [pc, #100]	; (800ddcc <xTaskRemoveFromEventList+0xb4>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d903      	bls.n	800dd74 <xTaskRemoveFromEventList+0x5c>
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	4a16      	ldr	r2, [pc, #88]	; (800ddcc <xTaskRemoveFromEventList+0xb4>)
 800dd72:	6013      	str	r3, [r2, #0]
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd78:	4613      	mov	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4a13      	ldr	r2, [pc, #76]	; (800ddd0 <xTaskRemoveFromEventList+0xb8>)
 800dd82:	441a      	add	r2, r3
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	3304      	adds	r3, #4
 800dd88:	4619      	mov	r1, r3
 800dd8a:	4610      	mov	r0, r2
 800dd8c:	f7fe fa03 	bl	800c196 <vListInsertEnd>
 800dd90:	e005      	b.n	800dd9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	3318      	adds	r3, #24
 800dd96:	4619      	mov	r1, r3
 800dd98:	480e      	ldr	r0, [pc, #56]	; (800ddd4 <xTaskRemoveFromEventList+0xbc>)
 800dd9a:	f7fe f9fc 	bl	800c196 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda2:	4b0d      	ldr	r3, [pc, #52]	; (800ddd8 <xTaskRemoveFromEventList+0xc0>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d905      	bls.n	800ddb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ddac:	2301      	movs	r3, #1
 800ddae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ddb0:	4b0a      	ldr	r3, [pc, #40]	; (800dddc <xTaskRemoveFromEventList+0xc4>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	e001      	b.n	800ddbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ddbc:	697b      	ldr	r3, [r7, #20]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3718      	adds	r7, #24
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20000df0 	.word	0x20000df0
 800ddcc:	20000dd0 	.word	0x20000dd0
 800ddd0:	200008f8 	.word	0x200008f8
 800ddd4:	20000d88 	.word	0x20000d88
 800ddd8:	200008f4 	.word	0x200008f4
 800dddc:	20000ddc 	.word	0x20000ddc

0800dde0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ddea:	4b29      	ldr	r3, [pc, #164]	; (800de90 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10a      	bne.n	800de08 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	613b      	str	r3, [r7, #16]
}
 800de04:	bf00      	nop
 800de06:	e7fe      	b.n	800de06 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d10a      	bne.n	800de34 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800de1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	60fb      	str	r3, [r7, #12]
}
 800de30:	bf00      	nop
 800de32:	e7fe      	b.n	800de32 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7fe fa0b 	bl	800c250 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	3304      	adds	r3, #4
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fa06 	bl	800c250 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de48:	4b12      	ldr	r3, [pc, #72]	; (800de94 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d903      	bls.n	800de58 <vTaskRemoveFromUnorderedEventList+0x78>
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de54:	4a0f      	ldr	r2, [pc, #60]	; (800de94 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800de56:	6013      	str	r3, [r2, #0]
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5c:	4613      	mov	r3, r2
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	4413      	add	r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	4a0c      	ldr	r2, [pc, #48]	; (800de98 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800de66:	441a      	add	r2, r3
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	3304      	adds	r3, #4
 800de6c:	4619      	mov	r1, r3
 800de6e:	4610      	mov	r0, r2
 800de70:	f7fe f991 	bl	800c196 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de78:	4b08      	ldr	r3, [pc, #32]	; (800de9c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7e:	429a      	cmp	r2, r3
 800de80:	d902      	bls.n	800de88 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800de82:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800de84:	2201      	movs	r2, #1
 800de86:	601a      	str	r2, [r3, #0]
	}
}
 800de88:	bf00      	nop
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	20000df0 	.word	0x20000df0
 800de94:	20000dd0 	.word	0x20000dd0
 800de98:	200008f8 	.word	0x200008f8
 800de9c:	200008f4 	.word	0x200008f4
 800dea0:	20000ddc 	.word	0x20000ddc

0800dea4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800deac:	4b06      	ldr	r3, [pc, #24]	; (800dec8 <vTaskInternalSetTimeOutState+0x24>)
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800deb4:	4b05      	ldr	r3, [pc, #20]	; (800decc <vTaskInternalSetTimeOutState+0x28>)
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	605a      	str	r2, [r3, #4]
}
 800debc:	bf00      	nop
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	20000de0 	.word	0x20000de0
 800decc:	20000dcc 	.word	0x20000dcc

0800ded0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10a      	bne.n	800def6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	613b      	str	r3, [r7, #16]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10a      	bne.n	800df12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	60fb      	str	r3, [r7, #12]
}
 800df0e:	bf00      	nop
 800df10:	e7fe      	b.n	800df10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df12:	f000 ffaf 	bl	800ee74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df16:	4b1d      	ldr	r3, [pc, #116]	; (800df8c <xTaskCheckForTimeOut+0xbc>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df2e:	d102      	bne.n	800df36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df30:	2300      	movs	r3, #0
 800df32:	61fb      	str	r3, [r7, #28]
 800df34:	e023      	b.n	800df7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	4b15      	ldr	r3, [pc, #84]	; (800df90 <xTaskCheckForTimeOut+0xc0>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d007      	beq.n	800df52 <xTaskCheckForTimeOut+0x82>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d302      	bcc.n	800df52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df4c:	2301      	movs	r3, #1
 800df4e:	61fb      	str	r3, [r7, #28]
 800df50:	e015      	b.n	800df7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	697a      	ldr	r2, [r7, #20]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d20b      	bcs.n	800df74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	1ad2      	subs	r2, r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7ff ff9b 	bl	800dea4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df6e:	2300      	movs	r3, #0
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	e004      	b.n	800df7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	2200      	movs	r2, #0
 800df78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df7a:	2301      	movs	r3, #1
 800df7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df7e:	f000 ffa9 	bl	800eed4 <vPortExitCritical>

	return xReturn;
 800df82:	69fb      	ldr	r3, [r7, #28]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3720      	adds	r7, #32
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	20000dcc 	.word	0x20000dcc
 800df90:	20000de0 	.word	0x20000de0

0800df94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800df94:	b480      	push	{r7}
 800df96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800df98:	4b03      	ldr	r3, [pc, #12]	; (800dfa8 <vTaskMissedYield+0x14>)
 800df9a:	2201      	movs	r2, #1
 800df9c:	601a      	str	r2, [r3, #0]
}
 800df9e:	bf00      	nop
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	20000ddc 	.word	0x20000ddc

0800dfac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfb4:	f000 f852 	bl	800e05c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfb8:	4b06      	ldr	r3, [pc, #24]	; (800dfd4 <prvIdleTask+0x28>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d9f9      	bls.n	800dfb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dfc0:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <prvIdleTask+0x2c>)
 800dfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfc6:	601a      	str	r2, [r3, #0]
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dfd0:	e7f0      	b.n	800dfb4 <prvIdleTask+0x8>
 800dfd2:	bf00      	nop
 800dfd4:	200008f8 	.word	0x200008f8
 800dfd8:	e000ed04 	.word	0xe000ed04

0800dfdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	607b      	str	r3, [r7, #4]
 800dfe6:	e00c      	b.n	800e002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	4613      	mov	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4a12      	ldr	r2, [pc, #72]	; (800e03c <prvInitialiseTaskLists+0x60>)
 800dff4:	4413      	add	r3, r2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe f8a0 	bl	800c13c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3301      	adds	r3, #1
 800e000:	607b      	str	r3, [r7, #4]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2b37      	cmp	r3, #55	; 0x37
 800e006:	d9ef      	bls.n	800dfe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e008:	480d      	ldr	r0, [pc, #52]	; (800e040 <prvInitialiseTaskLists+0x64>)
 800e00a:	f7fe f897 	bl	800c13c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e00e:	480d      	ldr	r0, [pc, #52]	; (800e044 <prvInitialiseTaskLists+0x68>)
 800e010:	f7fe f894 	bl	800c13c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e014:	480c      	ldr	r0, [pc, #48]	; (800e048 <prvInitialiseTaskLists+0x6c>)
 800e016:	f7fe f891 	bl	800c13c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e01a:	480c      	ldr	r0, [pc, #48]	; (800e04c <prvInitialiseTaskLists+0x70>)
 800e01c:	f7fe f88e 	bl	800c13c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e020:	480b      	ldr	r0, [pc, #44]	; (800e050 <prvInitialiseTaskLists+0x74>)
 800e022:	f7fe f88b 	bl	800c13c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e026:	4b0b      	ldr	r3, [pc, #44]	; (800e054 <prvInitialiseTaskLists+0x78>)
 800e028:	4a05      	ldr	r2, [pc, #20]	; (800e040 <prvInitialiseTaskLists+0x64>)
 800e02a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e02c:	4b0a      	ldr	r3, [pc, #40]	; (800e058 <prvInitialiseTaskLists+0x7c>)
 800e02e:	4a05      	ldr	r2, [pc, #20]	; (800e044 <prvInitialiseTaskLists+0x68>)
 800e030:	601a      	str	r2, [r3, #0]
}
 800e032:	bf00      	nop
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	200008f8 	.word	0x200008f8
 800e040:	20000d58 	.word	0x20000d58
 800e044:	20000d6c 	.word	0x20000d6c
 800e048:	20000d88 	.word	0x20000d88
 800e04c:	20000d9c 	.word	0x20000d9c
 800e050:	20000db4 	.word	0x20000db4
 800e054:	20000d80 	.word	0x20000d80
 800e058:	20000d84 	.word	0x20000d84

0800e05c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e062:	e019      	b.n	800e098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e064:	f000 ff06 	bl	800ee74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e068:	4b10      	ldr	r3, [pc, #64]	; (800e0ac <prvCheckTasksWaitingTermination+0x50>)
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	68db      	ldr	r3, [r3, #12]
 800e06e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	3304      	adds	r3, #4
 800e074:	4618      	mov	r0, r3
 800e076:	f7fe f8eb 	bl	800c250 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e07a:	4b0d      	ldr	r3, [pc, #52]	; (800e0b0 <prvCheckTasksWaitingTermination+0x54>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3b01      	subs	r3, #1
 800e080:	4a0b      	ldr	r2, [pc, #44]	; (800e0b0 <prvCheckTasksWaitingTermination+0x54>)
 800e082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e084:	4b0b      	ldr	r3, [pc, #44]	; (800e0b4 <prvCheckTasksWaitingTermination+0x58>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3b01      	subs	r3, #1
 800e08a:	4a0a      	ldr	r2, [pc, #40]	; (800e0b4 <prvCheckTasksWaitingTermination+0x58>)
 800e08c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e08e:	f000 ff21 	bl	800eed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f810 	bl	800e0b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e098:	4b06      	ldr	r3, [pc, #24]	; (800e0b4 <prvCheckTasksWaitingTermination+0x58>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1e1      	bne.n	800e064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0a0:	bf00      	nop
 800e0a2:	bf00      	nop
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20000d9c 	.word	0x20000d9c
 800e0b0:	20000dc8 	.word	0x20000dc8
 800e0b4:	20000db0 	.word	0x20000db0

0800e0b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d108      	bne.n	800e0dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f001 f8be 	bl	800f250 <vPortFree>
				vPortFree( pxTCB );
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f001 f8bb 	bl	800f250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0da:	e018      	b.n	800e10e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d103      	bne.n	800e0ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f001 f8b2 	bl	800f250 <vPortFree>
	}
 800e0ec:	e00f      	b.n	800e10e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d00a      	beq.n	800e10e <prvDeleteTCB+0x56>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	60fb      	str	r3, [r7, #12]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <prvDeleteTCB+0x54>
	}
 800e10e:	bf00      	nop
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e11e:	4b0c      	ldr	r3, [pc, #48]	; (800e150 <prvResetNextTaskUnblockTime+0x38>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d104      	bne.n	800e132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e128:	4b0a      	ldr	r3, [pc, #40]	; (800e154 <prvResetNextTaskUnblockTime+0x3c>)
 800e12a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e12e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e130:	e008      	b.n	800e144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e132:	4b07      	ldr	r3, [pc, #28]	; (800e150 <prvResetNextTaskUnblockTime+0x38>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	4a04      	ldr	r2, [pc, #16]	; (800e154 <prvResetNextTaskUnblockTime+0x3c>)
 800e142:	6013      	str	r3, [r2, #0]
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	20000d80 	.word	0x20000d80
 800e154:	20000de8 	.word	0x20000de8

0800e158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e15e:	4b0b      	ldr	r3, [pc, #44]	; (800e18c <xTaskGetSchedulerState+0x34>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d102      	bne.n	800e16c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e166:	2301      	movs	r3, #1
 800e168:	607b      	str	r3, [r7, #4]
 800e16a:	e008      	b.n	800e17e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e16c:	4b08      	ldr	r3, [pc, #32]	; (800e190 <xTaskGetSchedulerState+0x38>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d102      	bne.n	800e17a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e174:	2302      	movs	r3, #2
 800e176:	607b      	str	r3, [r7, #4]
 800e178:	e001      	b.n	800e17e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e17a:	2300      	movs	r3, #0
 800e17c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e17e:	687b      	ldr	r3, [r7, #4]
	}
 800e180:	4618      	mov	r0, r3
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	20000dd4 	.word	0x20000dd4
 800e190:	20000df0 	.word	0x20000df0

0800e194 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d051      	beq.n	800e24e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ae:	4b2a      	ldr	r3, [pc, #168]	; (800e258 <xTaskPriorityInherit+0xc4>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d241      	bcs.n	800e23c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	db06      	blt.n	800e1ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1c0:	4b25      	ldr	r3, [pc, #148]	; (800e258 <xTaskPriorityInherit+0xc4>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	6959      	ldr	r1, [r3, #20]
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4413      	add	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4a1f      	ldr	r2, [pc, #124]	; (800e25c <xTaskPriorityInherit+0xc8>)
 800e1e0:	4413      	add	r3, r2
 800e1e2:	4299      	cmp	r1, r3
 800e1e4:	d122      	bne.n	800e22c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	3304      	adds	r3, #4
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe f830 	bl	800c250 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e1f0:	4b19      	ldr	r3, [pc, #100]	; (800e258 <xTaskPriorityInherit+0xc4>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fe:	4b18      	ldr	r3, [pc, #96]	; (800e260 <xTaskPriorityInherit+0xcc>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	429a      	cmp	r2, r3
 800e204:	d903      	bls.n	800e20e <xTaskPriorityInherit+0x7a>
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20a:	4a15      	ldr	r2, [pc, #84]	; (800e260 <xTaskPriorityInherit+0xcc>)
 800e20c:	6013      	str	r3, [r2, #0]
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e212:	4613      	mov	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	4a10      	ldr	r2, [pc, #64]	; (800e25c <xTaskPriorityInherit+0xc8>)
 800e21c:	441a      	add	r2, r3
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	3304      	adds	r3, #4
 800e222:	4619      	mov	r1, r3
 800e224:	4610      	mov	r0, r2
 800e226:	f7fd ffb6 	bl	800c196 <vListInsertEnd>
 800e22a:	e004      	b.n	800e236 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e22c:	4b0a      	ldr	r3, [pc, #40]	; (800e258 <xTaskPriorityInherit+0xc4>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e236:	2301      	movs	r3, #1
 800e238:	60fb      	str	r3, [r7, #12]
 800e23a:	e008      	b.n	800e24e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e240:	4b05      	ldr	r3, [pc, #20]	; (800e258 <xTaskPriorityInherit+0xc4>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e246:	429a      	cmp	r2, r3
 800e248:	d201      	bcs.n	800e24e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e24a:	2301      	movs	r3, #1
 800e24c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e24e:	68fb      	ldr	r3, [r7, #12]
	}
 800e250:	4618      	mov	r0, r3
 800e252:	3710      	adds	r7, #16
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	200008f4 	.word	0x200008f4
 800e25c:	200008f8 	.word	0x200008f8
 800e260:	20000dd0 	.word	0x20000dd0

0800e264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e270:	2300      	movs	r3, #0
 800e272:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d056      	beq.n	800e328 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e27a:	4b2e      	ldr	r3, [pc, #184]	; (800e334 <xTaskPriorityDisinherit+0xd0>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	693a      	ldr	r2, [r7, #16]
 800e280:	429a      	cmp	r2, r3
 800e282:	d00a      	beq.n	800e29a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	60fb      	str	r3, [r7, #12]
}
 800e296:	bf00      	nop
 800e298:	e7fe      	b.n	800e298 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10a      	bne.n	800e2b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	60bb      	str	r3, [r7, #8]
}
 800e2b4:	bf00      	nop
 800e2b6:	e7fe      	b.n	800e2b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2bc:	1e5a      	subs	r2, r3, #1
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d02c      	beq.n	800e328 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d128      	bne.n	800e328 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	3304      	adds	r3, #4
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fd ffb8 	bl	800c250 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f8:	4b0f      	ldr	r3, [pc, #60]	; (800e338 <xTaskPriorityDisinherit+0xd4>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d903      	bls.n	800e308 <xTaskPriorityDisinherit+0xa4>
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	4a0c      	ldr	r2, [pc, #48]	; (800e338 <xTaskPriorityDisinherit+0xd4>)
 800e306:	6013      	str	r3, [r2, #0]
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4a09      	ldr	r2, [pc, #36]	; (800e33c <xTaskPriorityDisinherit+0xd8>)
 800e316:	441a      	add	r2, r3
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f7fd ff39 	bl	800c196 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e324:	2301      	movs	r3, #1
 800e326:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e328:	697b      	ldr	r3, [r7, #20]
	}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3718      	adds	r7, #24
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	200008f4 	.word	0x200008f4
 800e338:	20000dd0 	.word	0x20000dd0
 800e33c:	200008f8 	.word	0x200008f8

0800e340 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e340:	b580      	push	{r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e34e:	2301      	movs	r3, #1
 800e350:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d06a      	beq.n	800e42e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d10a      	bne.n	800e376 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	60fb      	str	r3, [r7, #12]
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e376:	69bb      	ldr	r3, [r7, #24]
 800e378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d902      	bls.n	800e386 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	61fb      	str	r3, [r7, #28]
 800e384:	e002      	b.n	800e38c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e38a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e390:	69fa      	ldr	r2, [r7, #28]
 800e392:	429a      	cmp	r2, r3
 800e394:	d04b      	beq.n	800e42e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d146      	bne.n	800e42e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e3a0:	4b25      	ldr	r3, [pc, #148]	; (800e438 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	69ba      	ldr	r2, [r7, #24]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d10a      	bne.n	800e3c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	60bb      	str	r3, [r7, #8]
}
 800e3bc:	bf00      	nop
 800e3be:	e7fe      	b.n	800e3be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	69fa      	ldr	r2, [r7, #28]
 800e3ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	db04      	blt.n	800e3de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	6959      	ldr	r1, [r3, #20]
 800e3e2:	693a      	ldr	r2, [r7, #16]
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	4a13      	ldr	r2, [pc, #76]	; (800e43c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e3ee:	4413      	add	r3, r2
 800e3f0:	4299      	cmp	r1, r3
 800e3f2:	d11c      	bne.n	800e42e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	3304      	adds	r3, #4
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fd ff29 	bl	800c250 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e402:	4b0f      	ldr	r3, [pc, #60]	; (800e440 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	429a      	cmp	r2, r3
 800e408:	d903      	bls.n	800e412 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e40e:	4a0c      	ldr	r2, [pc, #48]	; (800e440 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e410:	6013      	str	r3, [r2, #0]
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e416:	4613      	mov	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4413      	add	r3, r2
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	4a07      	ldr	r2, [pc, #28]	; (800e43c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e420:	441a      	add	r2, r3
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	3304      	adds	r3, #4
 800e426:	4619      	mov	r1, r3
 800e428:	4610      	mov	r0, r2
 800e42a:	f7fd feb4 	bl	800c196 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e42e:	bf00      	nop
 800e430:	3720      	adds	r7, #32
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	200008f4 	.word	0x200008f4
 800e43c:	200008f8 	.word	0x200008f8
 800e440:	20000dd0 	.word	0x20000dd0

0800e444 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e44a:	4b09      	ldr	r3, [pc, #36]	; (800e470 <uxTaskResetEventItemValue+0x2c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	699b      	ldr	r3, [r3, #24]
 800e450:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <uxTaskResetEventItemValue+0x2c>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e458:	4b05      	ldr	r3, [pc, #20]	; (800e470 <uxTaskResetEventItemValue+0x2c>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e460:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e462:	687b      	ldr	r3, [r7, #4]
}
 800e464:	4618      	mov	r0, r3
 800e466:	370c      	adds	r7, #12
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr
 800e470:	200008f4 	.word	0x200008f4

0800e474 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e474:	b480      	push	{r7}
 800e476:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e478:	4b07      	ldr	r3, [pc, #28]	; (800e498 <pvTaskIncrementMutexHeldCount+0x24>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d004      	beq.n	800e48a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e480:	4b05      	ldr	r3, [pc, #20]	; (800e498 <pvTaskIncrementMutexHeldCount+0x24>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e486:	3201      	adds	r2, #1
 800e488:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e48a:	4b03      	ldr	r3, [pc, #12]	; (800e498 <pvTaskIncrementMutexHeldCount+0x24>)
 800e48c:	681b      	ldr	r3, [r3, #0]
	}
 800e48e:	4618      	mov	r0, r3
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	200008f4 	.word	0x200008f4

0800e49c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4a6:	4b21      	ldr	r3, [pc, #132]	; (800e52c <prvAddCurrentTaskToDelayedList+0x90>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4ac:	4b20      	ldr	r3, [pc, #128]	; (800e530 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3304      	adds	r3, #4
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fd fecc 	bl	800c250 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4be:	d10a      	bne.n	800e4d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d007      	beq.n	800e4d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4c6:	4b1a      	ldr	r3, [pc, #104]	; (800e530 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4819      	ldr	r0, [pc, #100]	; (800e534 <prvAddCurrentTaskToDelayedList+0x98>)
 800e4d0:	f7fd fe61 	bl	800c196 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4d4:	e026      	b.n	800e524 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4413      	add	r3, r2
 800e4dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4de:	4b14      	ldr	r3, [pc, #80]	; (800e530 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d209      	bcs.n	800e502 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ee:	4b12      	ldr	r3, [pc, #72]	; (800e538 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	4b0f      	ldr	r3, [pc, #60]	; (800e530 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	f7fd fe6f 	bl	800c1de <vListInsert>
}
 800e500:	e010      	b.n	800e524 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e502:	4b0e      	ldr	r3, [pc, #56]	; (800e53c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <prvAddCurrentTaskToDelayedList+0x94>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	3304      	adds	r3, #4
 800e50c:	4619      	mov	r1, r3
 800e50e:	4610      	mov	r0, r2
 800e510:	f7fd fe65 	bl	800c1de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e514:	4b0a      	ldr	r3, [pc, #40]	; (800e540 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d202      	bcs.n	800e524 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e51e:	4a08      	ldr	r2, [pc, #32]	; (800e540 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	6013      	str	r3, [r2, #0]
}
 800e524:	bf00      	nop
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	20000dcc 	.word	0x20000dcc
 800e530:	200008f4 	.word	0x200008f4
 800e534:	20000db4 	.word	0x20000db4
 800e538:	20000d84 	.word	0x20000d84
 800e53c:	20000d80 	.word	0x20000d80
 800e540:	20000de8 	.word	0x20000de8

0800e544 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b08a      	sub	sp, #40	; 0x28
 800e548:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e54a:	2300      	movs	r3, #0
 800e54c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e54e:	f000 fb07 	bl	800eb60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e552:	4b1c      	ldr	r3, [pc, #112]	; (800e5c4 <xTimerCreateTimerTask+0x80>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d021      	beq.n	800e59e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e55a:	2300      	movs	r3, #0
 800e55c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e55e:	2300      	movs	r3, #0
 800e560:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e562:	1d3a      	adds	r2, r7, #4
 800e564:	f107 0108 	add.w	r1, r7, #8
 800e568:	f107 030c 	add.w	r3, r7, #12
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fd fbdd 	bl	800bd2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e572:	6879      	ldr	r1, [r7, #4]
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	68fa      	ldr	r2, [r7, #12]
 800e578:	9202      	str	r2, [sp, #8]
 800e57a:	9301      	str	r3, [sp, #4]
 800e57c:	2302      	movs	r3, #2
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	2300      	movs	r3, #0
 800e582:	460a      	mov	r2, r1
 800e584:	4910      	ldr	r1, [pc, #64]	; (800e5c8 <xTimerCreateTimerTask+0x84>)
 800e586:	4811      	ldr	r0, [pc, #68]	; (800e5cc <xTimerCreateTimerTask+0x88>)
 800e588:	f7fe fe9a 	bl	800d2c0 <xTaskCreateStatic>
 800e58c:	4603      	mov	r3, r0
 800e58e:	4a10      	ldr	r2, [pc, #64]	; (800e5d0 <xTimerCreateTimerTask+0x8c>)
 800e590:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e592:	4b0f      	ldr	r3, [pc, #60]	; (800e5d0 <xTimerCreateTimerTask+0x8c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e59a:	2301      	movs	r3, #1
 800e59c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d10a      	bne.n	800e5ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	613b      	str	r3, [r7, #16]
}
 800e5b6:	bf00      	nop
 800e5b8:	e7fe      	b.n	800e5b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e5ba:	697b      	ldr	r3, [r7, #20]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3718      	adds	r7, #24
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	20000e24 	.word	0x20000e24
 800e5c8:	080107c4 	.word	0x080107c4
 800e5cc:	0800e709 	.word	0x0800e709
 800e5d0:	20000e28 	.word	0x20000e28

0800e5d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08a      	sub	sp, #40	; 0x28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10a      	bne.n	800e602 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	623b      	str	r3, [r7, #32]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e602:	4b1a      	ldr	r3, [pc, #104]	; (800e66c <xTimerGenericCommand+0x98>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d02a      	beq.n	800e660 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b05      	cmp	r3, #5
 800e61a:	dc18      	bgt.n	800e64e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e61c:	f7ff fd9c 	bl	800e158 <xTaskGetSchedulerState>
 800e620:	4603      	mov	r3, r0
 800e622:	2b02      	cmp	r3, #2
 800e624:	d109      	bne.n	800e63a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e626:	4b11      	ldr	r3, [pc, #68]	; (800e66c <xTimerGenericCommand+0x98>)
 800e628:	6818      	ldr	r0, [r3, #0]
 800e62a:	f107 0110 	add.w	r1, r7, #16
 800e62e:	2300      	movs	r3, #0
 800e630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e632:	f7fd ffdf 	bl	800c5f4 <xQueueGenericSend>
 800e636:	6278      	str	r0, [r7, #36]	; 0x24
 800e638:	e012      	b.n	800e660 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e63a:	4b0c      	ldr	r3, [pc, #48]	; (800e66c <xTimerGenericCommand+0x98>)
 800e63c:	6818      	ldr	r0, [r3, #0]
 800e63e:	f107 0110 	add.w	r1, r7, #16
 800e642:	2300      	movs	r3, #0
 800e644:	2200      	movs	r2, #0
 800e646:	f7fd ffd5 	bl	800c5f4 <xQueueGenericSend>
 800e64a:	6278      	str	r0, [r7, #36]	; 0x24
 800e64c:	e008      	b.n	800e660 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e64e:	4b07      	ldr	r3, [pc, #28]	; (800e66c <xTimerGenericCommand+0x98>)
 800e650:	6818      	ldr	r0, [r3, #0]
 800e652:	f107 0110 	add.w	r1, r7, #16
 800e656:	2300      	movs	r3, #0
 800e658:	683a      	ldr	r2, [r7, #0]
 800e65a:	f7fe f8c9 	bl	800c7f0 <xQueueGenericSendFromISR>
 800e65e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e662:	4618      	mov	r0, r3
 800e664:	3728      	adds	r7, #40	; 0x28
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	20000e24 	.word	0x20000e24

0800e670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af02      	add	r7, sp, #8
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e67a:	4b22      	ldr	r3, [pc, #136]	; (800e704 <prvProcessExpiredTimer+0x94>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	3304      	adds	r3, #4
 800e688:	4618      	mov	r0, r3
 800e68a:	f7fd fde1 	bl	800c250 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e694:	f003 0304 	and.w	r3, r3, #4
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d022      	beq.n	800e6e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	699a      	ldr	r2, [r3, #24]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	18d1      	adds	r1, r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	6978      	ldr	r0, [r7, #20]
 800e6aa:	f000 f8d1 	bl	800e850 <prvInsertTimerInActiveList>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d01f      	beq.n	800e6f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9300      	str	r3, [sp, #0]
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	2100      	movs	r1, #0
 800e6be:	6978      	ldr	r0, [r7, #20]
 800e6c0:	f7ff ff88 	bl	800e5d4 <xTimerGenericCommand>
 800e6c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d113      	bne.n	800e6f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d0:	f383 8811 	msr	BASEPRI, r3
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	60fb      	str	r3, [r7, #12]
}
 800e6de:	bf00      	nop
 800e6e0:	e7fe      	b.n	800e6e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6e8:	f023 0301 	bic.w	r3, r3, #1
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	6a1b      	ldr	r3, [r3, #32]
 800e6f8:	6978      	ldr	r0, [r7, #20]
 800e6fa:	4798      	blx	r3
}
 800e6fc:	bf00      	nop
 800e6fe:	3718      	adds	r7, #24
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	20000e1c 	.word	0x20000e1c

0800e708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e710:	f107 0308 	add.w	r3, r7, #8
 800e714:	4618      	mov	r0, r3
 800e716:	f000 f857 	bl	800e7c8 <prvGetNextExpireTime>
 800e71a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	4619      	mov	r1, r3
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f000 f803 	bl	800e72c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e726:	f000 f8d5 	bl	800e8d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e72a:	e7f1      	b.n	800e710 <prvTimerTask+0x8>

0800e72c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e736:	f7ff f87d 	bl	800d834 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e73a:	f107 0308 	add.w	r3, r7, #8
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 f866 	bl	800e810 <prvSampleTimeNow>
 800e744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d130      	bne.n	800e7ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10a      	bne.n	800e768 <prvProcessTimerOrBlockTask+0x3c>
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	429a      	cmp	r2, r3
 800e758:	d806      	bhi.n	800e768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e75a:	f7ff f879 	bl	800d850 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e75e:	68f9      	ldr	r1, [r7, #12]
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f7ff ff85 	bl	800e670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e766:	e024      	b.n	800e7b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d008      	beq.n	800e780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e76e:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <prvProcessTimerOrBlockTask+0x90>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d101      	bne.n	800e77c <prvProcessTimerOrBlockTask+0x50>
 800e778:	2301      	movs	r3, #1
 800e77a:	e000      	b.n	800e77e <prvProcessTimerOrBlockTask+0x52>
 800e77c:	2300      	movs	r3, #0
 800e77e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e780:	4b0f      	ldr	r3, [pc, #60]	; (800e7c0 <prvProcessTimerOrBlockTask+0x94>)
 800e782:	6818      	ldr	r0, [r3, #0]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	4619      	mov	r1, r3
 800e78e:	f7fe fd63 	bl	800d258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e792:	f7ff f85d 	bl	800d850 <xTaskResumeAll>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10a      	bne.n	800e7b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e79c:	4b09      	ldr	r3, [pc, #36]	; (800e7c4 <prvProcessTimerOrBlockTask+0x98>)
 800e79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	f3bf 8f4f 	dsb	sy
 800e7a8:	f3bf 8f6f 	isb	sy
}
 800e7ac:	e001      	b.n	800e7b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7ae:	f7ff f84f 	bl	800d850 <xTaskResumeAll>
}
 800e7b2:	bf00      	nop
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20000e20 	.word	0x20000e20
 800e7c0:	20000e24 	.word	0x20000e24
 800e7c4:	e000ed04 	.word	0xe000ed04

0800e7c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7d0:	4b0e      	ldr	r3, [pc, #56]	; (800e80c <prvGetNextExpireTime+0x44>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d101      	bne.n	800e7de <prvGetNextExpireTime+0x16>
 800e7da:	2201      	movs	r2, #1
 800e7dc:	e000      	b.n	800e7e0 <prvGetNextExpireTime+0x18>
 800e7de:	2200      	movs	r2, #0
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d105      	bne.n	800e7f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7ec:	4b07      	ldr	r3, [pc, #28]	; (800e80c <prvGetNextExpireTime+0x44>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	e001      	b.n	800e7fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	20000e1c 	.word	0x20000e1c

0800e810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e818:	f7ff f8b8 	bl	800d98c <xTaskGetTickCount>
 800e81c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e81e:	4b0b      	ldr	r3, [pc, #44]	; (800e84c <prvSampleTimeNow+0x3c>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	429a      	cmp	r2, r3
 800e826:	d205      	bcs.n	800e834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e828:	f000 f936 	bl	800ea98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	601a      	str	r2, [r3, #0]
 800e832:	e002      	b.n	800e83a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e83a:	4a04      	ldr	r2, [pc, #16]	; (800e84c <prvSampleTimeNow+0x3c>)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e840:	68fb      	ldr	r3, [r7, #12]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	20000e2c 	.word	0x20000e2c

0800e850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	607a      	str	r2, [r7, #4]
 800e85c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e85e:	2300      	movs	r3, #0
 800e860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	429a      	cmp	r2, r3
 800e874:	d812      	bhi.n	800e89c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	1ad2      	subs	r2, r2, r3
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	699b      	ldr	r3, [r3, #24]
 800e880:	429a      	cmp	r2, r3
 800e882:	d302      	bcc.n	800e88a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e884:	2301      	movs	r3, #1
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	e01b      	b.n	800e8c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e88a:	4b10      	ldr	r3, [pc, #64]	; (800e8cc <prvInsertTimerInActiveList+0x7c>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	3304      	adds	r3, #4
 800e892:	4619      	mov	r1, r3
 800e894:	4610      	mov	r0, r2
 800e896:	f7fd fca2 	bl	800c1de <vListInsert>
 800e89a:	e012      	b.n	800e8c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d206      	bcs.n	800e8b2 <prvInsertTimerInActiveList+0x62>
 800e8a4:	68ba      	ldr	r2, [r7, #8]
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d302      	bcc.n	800e8b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	e007      	b.n	800e8c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8b2:	4b07      	ldr	r3, [pc, #28]	; (800e8d0 <prvInsertTimerInActiveList+0x80>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	3304      	adds	r3, #4
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4610      	mov	r0, r2
 800e8be:	f7fd fc8e 	bl	800c1de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8c2:	697b      	ldr	r3, [r7, #20]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	20000e20 	.word	0x20000e20
 800e8d0:	20000e1c 	.word	0x20000e1c

0800e8d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08e      	sub	sp, #56	; 0x38
 800e8d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8da:	e0ca      	b.n	800ea72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	da18      	bge.n	800e914 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e8e2:	1d3b      	adds	r3, r7, #4
 800e8e4:	3304      	adds	r3, #4
 800e8e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10a      	bne.n	800e904 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	61fb      	str	r3, [r7, #28]
}
 800e900:	bf00      	nop
 800e902:	e7fe      	b.n	800e902 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e90a:	6850      	ldr	r0, [r2, #4]
 800e90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e90e:	6892      	ldr	r2, [r2, #8]
 800e910:	4611      	mov	r1, r2
 800e912:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	f2c0 80aa 	blt.w	800ea70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	695b      	ldr	r3, [r3, #20]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d004      	beq.n	800e932 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	3304      	adds	r3, #4
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fd fc8f 	bl	800c250 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e932:	463b      	mov	r3, r7
 800e934:	4618      	mov	r0, r3
 800e936:	f7ff ff6b 	bl	800e810 <prvSampleTimeNow>
 800e93a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b09      	cmp	r3, #9
 800e940:	f200 8097 	bhi.w	800ea72 <prvProcessReceivedCommands+0x19e>
 800e944:	a201      	add	r2, pc, #4	; (adr r2, 800e94c <prvProcessReceivedCommands+0x78>)
 800e946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94a:	bf00      	nop
 800e94c:	0800e975 	.word	0x0800e975
 800e950:	0800e975 	.word	0x0800e975
 800e954:	0800e975 	.word	0x0800e975
 800e958:	0800e9e9 	.word	0x0800e9e9
 800e95c:	0800e9fd 	.word	0x0800e9fd
 800e960:	0800ea47 	.word	0x0800ea47
 800e964:	0800e975 	.word	0x0800e975
 800e968:	0800e975 	.word	0x0800e975
 800e96c:	0800e9e9 	.word	0x0800e9e9
 800e970:	0800e9fd 	.word	0x0800e9fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e97a:	f043 0301 	orr.w	r3, r3, #1
 800e97e:	b2da      	uxtb	r2, r3
 800e980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	699b      	ldr	r3, [r3, #24]
 800e98c:	18d1      	adds	r1, r2, r3
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e994:	f7ff ff5c 	bl	800e850 <prvInsertTimerInActiveList>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d069      	beq.n	800ea72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a0:	6a1b      	ldr	r3, [r3, #32]
 800e9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9ac:	f003 0304 	and.w	r3, r3, #4
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d05e      	beq.n	800ea72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	441a      	add	r2, r3
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9c6:	f7ff fe05 	bl	800e5d4 <xTimerGenericCommand>
 800e9ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e9cc:	6a3b      	ldr	r3, [r7, #32]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d14f      	bne.n	800ea72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d6:	f383 8811 	msr	BASEPRI, r3
 800e9da:	f3bf 8f6f 	isb	sy
 800e9de:	f3bf 8f4f 	dsb	sy
 800e9e2:	61bb      	str	r3, [r7, #24]
}
 800e9e4:	bf00      	nop
 800e9e6:	e7fe      	b.n	800e9e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9ee:	f023 0301 	bic.w	r3, r3, #1
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e9fa:	e03a      	b.n	800ea72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea02:	f043 0301 	orr.w	r3, r3, #1
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	699b      	ldr	r3, [r3, #24]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d10a      	bne.n	800ea32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	617b      	str	r3, [r7, #20]
}
 800ea2e:	bf00      	nop
 800ea30:	e7fe      	b.n	800ea30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	699a      	ldr	r2, [r3, #24]
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	18d1      	adds	r1, r2, r3
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea40:	f7ff ff06 	bl	800e850 <prvInsertTimerInActiveList>
					break;
 800ea44:	e015      	b.n	800ea72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea4c:	f003 0302 	and.w	r3, r3, #2
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d103      	bne.n	800ea5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea56:	f000 fbfb 	bl	800f250 <vPortFree>
 800ea5a:	e00a      	b.n	800ea72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea62:	f023 0301 	bic.w	r3, r3, #1
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea6e:	e000      	b.n	800ea72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea72:	4b08      	ldr	r3, [pc, #32]	; (800ea94 <prvProcessReceivedCommands+0x1c0>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	1d39      	adds	r1, r7, #4
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7fd ffe0 	bl	800ca40 <xQueueReceive>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	f47f af2a 	bne.w	800e8dc <prvProcessReceivedCommands+0x8>
	}
}
 800ea88:	bf00      	nop
 800ea8a:	bf00      	nop
 800ea8c:	3730      	adds	r7, #48	; 0x30
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	20000e24 	.word	0x20000e24

0800ea98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b088      	sub	sp, #32
 800ea9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea9e:	e048      	b.n	800eb32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaa0:	4b2d      	ldr	r3, [pc, #180]	; (800eb58 <prvSwitchTimerLists+0xc0>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaaa:	4b2b      	ldr	r3, [pc, #172]	; (800eb58 <prvSwitchTimerLists+0xc0>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3304      	adds	r3, #4
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fd fbc9 	bl	800c250 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eacc:	f003 0304 	and.w	r3, r3, #4
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d02e      	beq.n	800eb32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	699b      	ldr	r3, [r3, #24]
 800ead8:	693a      	ldr	r2, [r7, #16]
 800eada:	4413      	add	r3, r2
 800eadc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d90e      	bls.n	800eb04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	68ba      	ldr	r2, [r7, #8]
 800eaea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	68fa      	ldr	r2, [r7, #12]
 800eaf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaf2:	4b19      	ldr	r3, [pc, #100]	; (800eb58 <prvSwitchTimerLists+0xc0>)
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	4619      	mov	r1, r3
 800eafc:	4610      	mov	r0, r2
 800eafe:	f7fd fb6e 	bl	800c1de <vListInsert>
 800eb02:	e016      	b.n	800eb32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb04:	2300      	movs	r3, #0
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	693a      	ldr	r2, [r7, #16]
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f7ff fd60 	bl	800e5d4 <xTimerGenericCommand>
 800eb14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d10a      	bne.n	800eb32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	603b      	str	r3, [r7, #0]
}
 800eb2e:	bf00      	nop
 800eb30:	e7fe      	b.n	800eb30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb32:	4b09      	ldr	r3, [pc, #36]	; (800eb58 <prvSwitchTimerLists+0xc0>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1b1      	bne.n	800eaa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb3c:	4b06      	ldr	r3, [pc, #24]	; (800eb58 <prvSwitchTimerLists+0xc0>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb42:	4b06      	ldr	r3, [pc, #24]	; (800eb5c <prvSwitchTimerLists+0xc4>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	4a04      	ldr	r2, [pc, #16]	; (800eb58 <prvSwitchTimerLists+0xc0>)
 800eb48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb4a:	4a04      	ldr	r2, [pc, #16]	; (800eb5c <prvSwitchTimerLists+0xc4>)
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	6013      	str	r3, [r2, #0]
}
 800eb50:	bf00      	nop
 800eb52:	3718      	adds	r7, #24
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	20000e1c 	.word	0x20000e1c
 800eb5c:	20000e20 	.word	0x20000e20

0800eb60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb66:	f000 f985 	bl	800ee74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb6a:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <prvCheckForValidListAndQueue+0x60>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d120      	bne.n	800ebb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb72:	4814      	ldr	r0, [pc, #80]	; (800ebc4 <prvCheckForValidListAndQueue+0x64>)
 800eb74:	f7fd fae2 	bl	800c13c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb78:	4813      	ldr	r0, [pc, #76]	; (800ebc8 <prvCheckForValidListAndQueue+0x68>)
 800eb7a:	f7fd fadf 	bl	800c13c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb7e:	4b13      	ldr	r3, [pc, #76]	; (800ebcc <prvCheckForValidListAndQueue+0x6c>)
 800eb80:	4a10      	ldr	r2, [pc, #64]	; (800ebc4 <prvCheckForValidListAndQueue+0x64>)
 800eb82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb84:	4b12      	ldr	r3, [pc, #72]	; (800ebd0 <prvCheckForValidListAndQueue+0x70>)
 800eb86:	4a10      	ldr	r2, [pc, #64]	; (800ebc8 <prvCheckForValidListAndQueue+0x68>)
 800eb88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	4b11      	ldr	r3, [pc, #68]	; (800ebd4 <prvCheckForValidListAndQueue+0x74>)
 800eb90:	4a11      	ldr	r2, [pc, #68]	; (800ebd8 <prvCheckForValidListAndQueue+0x78>)
 800eb92:	2110      	movs	r1, #16
 800eb94:	200a      	movs	r0, #10
 800eb96:	f7fd fbed 	bl	800c374 <xQueueGenericCreateStatic>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	4a08      	ldr	r2, [pc, #32]	; (800ebc0 <prvCheckForValidListAndQueue+0x60>)
 800eb9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eba0:	4b07      	ldr	r3, [pc, #28]	; (800ebc0 <prvCheckForValidListAndQueue+0x60>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d005      	beq.n	800ebb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eba8:	4b05      	ldr	r3, [pc, #20]	; (800ebc0 <prvCheckForValidListAndQueue+0x60>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	490b      	ldr	r1, [pc, #44]	; (800ebdc <prvCheckForValidListAndQueue+0x7c>)
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fe fafe 	bl	800d1b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebb4:	f000 f98e 	bl	800eed4 <vPortExitCritical>
}
 800ebb8:	bf00      	nop
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	20000e24 	.word	0x20000e24
 800ebc4:	20000df4 	.word	0x20000df4
 800ebc8:	20000e08 	.word	0x20000e08
 800ebcc:	20000e1c 	.word	0x20000e1c
 800ebd0:	20000e20 	.word	0x20000e20
 800ebd4:	20000ed0 	.word	0x20000ed0
 800ebd8:	20000e30 	.word	0x20000e30
 800ebdc:	080107cc 	.word	0x080107cc

0800ebe0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b08a      	sub	sp, #40	; 0x28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ebee:	f06f 0301 	mvn.w	r3, #1
 800ebf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ec00:	4b06      	ldr	r3, [pc, #24]	; (800ec1c <xTimerPendFunctionCallFromISR+0x3c>)
 800ec02:	6818      	ldr	r0, [r3, #0]
 800ec04:	f107 0114 	add.w	r1, r7, #20
 800ec08:	2300      	movs	r3, #0
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	f7fd fdf0 	bl	800c7f0 <xQueueGenericSendFromISR>
 800ec10:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ec12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3728      	adds	r7, #40	; 0x28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	20000e24 	.word	0x20000e24

0800ec20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	3b04      	subs	r3, #4
 800ec30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3b04      	subs	r3, #4
 800ec3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	f023 0201 	bic.w	r2, r3, #1
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3b04      	subs	r3, #4
 800ec4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec50:	4a0c      	ldr	r2, [pc, #48]	; (800ec84 <pxPortInitialiseStack+0x64>)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	3b14      	subs	r3, #20
 800ec5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	3b04      	subs	r3, #4
 800ec66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f06f 0202 	mvn.w	r2, #2
 800ec6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3b20      	subs	r3, #32
 800ec74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec76:	68fb      	ldr	r3, [r7, #12]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3714      	adds	r7, #20
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr
 800ec84:	0800ec89 	.word	0x0800ec89

0800ec88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec92:	4b12      	ldr	r3, [pc, #72]	; (800ecdc <prvTaskExitError+0x54>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec9a:	d00a      	beq.n	800ecb2 <prvTaskExitError+0x2a>
	__asm volatile
 800ec9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca0:	f383 8811 	msr	BASEPRI, r3
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	f3bf 8f4f 	dsb	sy
 800ecac:	60fb      	str	r3, [r7, #12]
}
 800ecae:	bf00      	nop
 800ecb0:	e7fe      	b.n	800ecb0 <prvTaskExitError+0x28>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	60bb      	str	r3, [r7, #8]
}
 800ecc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ecc6:	bf00      	nop
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d0fc      	beq.n	800ecc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ecce:	bf00      	nop
 800ecd0:	bf00      	nop
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	20000174 	.word	0x20000174

0800ece0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ece0:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <pxCurrentTCBConst2>)
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	6808      	ldr	r0, [r1, #0]
 800ece6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecea:	f380 8809 	msr	PSP, r0
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f04f 0000 	mov.w	r0, #0
 800ecf6:	f380 8811 	msr	BASEPRI, r0
 800ecfa:	4770      	bx	lr
 800ecfc:	f3af 8000 	nop.w

0800ed00 <pxCurrentTCBConst2>:
 800ed00:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop

0800ed08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ed08:	4808      	ldr	r0, [pc, #32]	; (800ed2c <prvPortStartFirstTask+0x24>)
 800ed0a:	6800      	ldr	r0, [r0, #0]
 800ed0c:	6800      	ldr	r0, [r0, #0]
 800ed0e:	f380 8808 	msr	MSP, r0
 800ed12:	f04f 0000 	mov.w	r0, #0
 800ed16:	f380 8814 	msr	CONTROL, r0
 800ed1a:	b662      	cpsie	i
 800ed1c:	b661      	cpsie	f
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	df00      	svc	0
 800ed28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed2a:	bf00      	nop
 800ed2c:	e000ed08 	.word	0xe000ed08

0800ed30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed36:	4b46      	ldr	r3, [pc, #280]	; (800ee50 <xPortStartScheduler+0x120>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a46      	ldr	r2, [pc, #280]	; (800ee54 <xPortStartScheduler+0x124>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d10a      	bne.n	800ed56 <xPortStartScheduler+0x26>
	__asm volatile
 800ed40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	613b      	str	r3, [r7, #16]
}
 800ed52:	bf00      	nop
 800ed54:	e7fe      	b.n	800ed54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed56:	4b3e      	ldr	r3, [pc, #248]	; (800ee50 <xPortStartScheduler+0x120>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a3f      	ldr	r2, [pc, #252]	; (800ee58 <xPortStartScheduler+0x128>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d10a      	bne.n	800ed76 <xPortStartScheduler+0x46>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	60fb      	str	r3, [r7, #12]
}
 800ed72:	bf00      	nop
 800ed74:	e7fe      	b.n	800ed74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed76:	4b39      	ldr	r3, [pc, #228]	; (800ee5c <xPortStartScheduler+0x12c>)
 800ed78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	22ff      	movs	r2, #255	; 0xff
 800ed86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed90:	78fb      	ldrb	r3, [r7, #3]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	4b31      	ldr	r3, [pc, #196]	; (800ee60 <xPortStartScheduler+0x130>)
 800ed9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed9e:	4b31      	ldr	r3, [pc, #196]	; (800ee64 <xPortStartScheduler+0x134>)
 800eda0:	2207      	movs	r2, #7
 800eda2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eda4:	e009      	b.n	800edba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eda6:	4b2f      	ldr	r3, [pc, #188]	; (800ee64 <xPortStartScheduler+0x134>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	3b01      	subs	r3, #1
 800edac:	4a2d      	ldr	r2, [pc, #180]	; (800ee64 <xPortStartScheduler+0x134>)
 800edae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800edb0:	78fb      	ldrb	r3, [r7, #3]
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	005b      	lsls	r3, r3, #1
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800edba:	78fb      	ldrb	r3, [r7, #3]
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edc2:	2b80      	cmp	r3, #128	; 0x80
 800edc4:	d0ef      	beq.n	800eda6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800edc6:	4b27      	ldr	r3, [pc, #156]	; (800ee64 <xPortStartScheduler+0x134>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	f1c3 0307 	rsb	r3, r3, #7
 800edce:	2b04      	cmp	r3, #4
 800edd0:	d00a      	beq.n	800ede8 <xPortStartScheduler+0xb8>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	60bb      	str	r3, [r7, #8]
}
 800ede4:	bf00      	nop
 800ede6:	e7fe      	b.n	800ede6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ede8:	4b1e      	ldr	r3, [pc, #120]	; (800ee64 <xPortStartScheduler+0x134>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	021b      	lsls	r3, r3, #8
 800edee:	4a1d      	ldr	r2, [pc, #116]	; (800ee64 <xPortStartScheduler+0x134>)
 800edf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800edf2:	4b1c      	ldr	r3, [pc, #112]	; (800ee64 <xPortStartScheduler+0x134>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800edfa:	4a1a      	ldr	r2, [pc, #104]	; (800ee64 <xPortStartScheduler+0x134>)
 800edfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ee06:	4b18      	ldr	r3, [pc, #96]	; (800ee68 <xPortStartScheduler+0x138>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a17      	ldr	r2, [pc, #92]	; (800ee68 <xPortStartScheduler+0x138>)
 800ee0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ee10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ee12:	4b15      	ldr	r3, [pc, #84]	; (800ee68 <xPortStartScheduler+0x138>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a14      	ldr	r2, [pc, #80]	; (800ee68 <xPortStartScheduler+0x138>)
 800ee18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ee1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ee1e:	f000 f8dd 	bl	800efdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ee22:	4b12      	ldr	r3, [pc, #72]	; (800ee6c <xPortStartScheduler+0x13c>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ee28:	f000 f8fc 	bl	800f024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ee2c:	4b10      	ldr	r3, [pc, #64]	; (800ee70 <xPortStartScheduler+0x140>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a0f      	ldr	r2, [pc, #60]	; (800ee70 <xPortStartScheduler+0x140>)
 800ee32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee38:	f7ff ff66 	bl	800ed08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee3c:	f7fe fe82 	bl	800db44 <vTaskSwitchContext>
	prvTaskExitError();
 800ee40:	f7ff ff22 	bl	800ec88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee44:	2300      	movs	r3, #0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3718      	adds	r7, #24
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bd80      	pop	{r7, pc}
 800ee4e:	bf00      	nop
 800ee50:	e000ed00 	.word	0xe000ed00
 800ee54:	410fc271 	.word	0x410fc271
 800ee58:	410fc270 	.word	0x410fc270
 800ee5c:	e000e400 	.word	0xe000e400
 800ee60:	20000f20 	.word	0x20000f20
 800ee64:	20000f24 	.word	0x20000f24
 800ee68:	e000ed20 	.word	0xe000ed20
 800ee6c:	20000174 	.word	0x20000174
 800ee70:	e000ef34 	.word	0xe000ef34

0800ee74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	607b      	str	r3, [r7, #4]
}
 800ee8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee8e:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <vPortEnterCritical+0x58>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	3301      	adds	r3, #1
 800ee94:	4a0d      	ldr	r2, [pc, #52]	; (800eecc <vPortEnterCritical+0x58>)
 800ee96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee98:	4b0c      	ldr	r3, [pc, #48]	; (800eecc <vPortEnterCritical+0x58>)
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d10f      	bne.n	800eec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eea0:	4b0b      	ldr	r3, [pc, #44]	; (800eed0 <vPortEnterCritical+0x5c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	b2db      	uxtb	r3, r3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d00a      	beq.n	800eec0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeae:	f383 8811 	msr	BASEPRI, r3
 800eeb2:	f3bf 8f6f 	isb	sy
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	603b      	str	r3, [r7, #0]
}
 800eebc:	bf00      	nop
 800eebe:	e7fe      	b.n	800eebe <vPortEnterCritical+0x4a>
	}
}
 800eec0:	bf00      	nop
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	20000174 	.word	0x20000174
 800eed0:	e000ed04 	.word	0xe000ed04

0800eed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eeda:	4b12      	ldr	r3, [pc, #72]	; (800ef24 <vPortExitCritical+0x50>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10a      	bne.n	800eef8 <vPortExitCritical+0x24>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	607b      	str	r3, [r7, #4]
}
 800eef4:	bf00      	nop
 800eef6:	e7fe      	b.n	800eef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eef8:	4b0a      	ldr	r3, [pc, #40]	; (800ef24 <vPortExitCritical+0x50>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	4a09      	ldr	r2, [pc, #36]	; (800ef24 <vPortExitCritical+0x50>)
 800ef00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ef02:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <vPortExitCritical+0x50>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d105      	bne.n	800ef16 <vPortExitCritical+0x42>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	f383 8811 	msr	BASEPRI, r3
}
 800ef14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ef16:	bf00      	nop
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	20000174 	.word	0x20000174
	...

0800ef30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef30:	f3ef 8009 	mrs	r0, PSP
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	4b15      	ldr	r3, [pc, #84]	; (800ef90 <pxCurrentTCBConst>)
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	f01e 0f10 	tst.w	lr, #16
 800ef40:	bf08      	it	eq
 800ef42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4a:	6010      	str	r0, [r2, #0]
 800ef4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ef54:	f380 8811 	msr	BASEPRI, r0
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	f3bf 8f6f 	isb	sy
 800ef60:	f7fe fdf0 	bl	800db44 <vTaskSwitchContext>
 800ef64:	f04f 0000 	mov.w	r0, #0
 800ef68:	f380 8811 	msr	BASEPRI, r0
 800ef6c:	bc09      	pop	{r0, r3}
 800ef6e:	6819      	ldr	r1, [r3, #0]
 800ef70:	6808      	ldr	r0, [r1, #0]
 800ef72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef76:	f01e 0f10 	tst.w	lr, #16
 800ef7a:	bf08      	it	eq
 800ef7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef80:	f380 8809 	msr	PSP, r0
 800ef84:	f3bf 8f6f 	isb	sy
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	f3af 8000 	nop.w

0800ef90 <pxCurrentTCBConst>:
 800ef90:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef94:	bf00      	nop
 800ef96:	bf00      	nop

0800ef98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	607b      	str	r3, [r7, #4]
}
 800efb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800efb2:	f7fe fd0d 	bl	800d9d0 <xTaskIncrementTick>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d003      	beq.n	800efc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800efbc:	4b06      	ldr	r3, [pc, #24]	; (800efd8 <xPortSysTickHandler+0x40>)
 800efbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	2300      	movs	r3, #0
 800efc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	f383 8811 	msr	BASEPRI, r3
}
 800efce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800efd0:	bf00      	nop
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	e000ed04 	.word	0xe000ed04

0800efdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efdc:	b480      	push	{r7}
 800efde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800efe0:	4b0b      	ldr	r3, [pc, #44]	; (800f010 <vPortSetupTimerInterrupt+0x34>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800efe6:	4b0b      	ldr	r3, [pc, #44]	; (800f014 <vPortSetupTimerInterrupt+0x38>)
 800efe8:	2200      	movs	r2, #0
 800efea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800efec:	4b0a      	ldr	r3, [pc, #40]	; (800f018 <vPortSetupTimerInterrupt+0x3c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4a0a      	ldr	r2, [pc, #40]	; (800f01c <vPortSetupTimerInterrupt+0x40>)
 800eff2:	fba2 2303 	umull	r2, r3, r2, r3
 800eff6:	099b      	lsrs	r3, r3, #6
 800eff8:	4a09      	ldr	r2, [pc, #36]	; (800f020 <vPortSetupTimerInterrupt+0x44>)
 800effa:	3b01      	subs	r3, #1
 800effc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800effe:	4b04      	ldr	r3, [pc, #16]	; (800f010 <vPortSetupTimerInterrupt+0x34>)
 800f000:	2207      	movs	r2, #7
 800f002:	601a      	str	r2, [r3, #0]
}
 800f004:	bf00      	nop
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	e000e010 	.word	0xe000e010
 800f014:	e000e018 	.word	0xe000e018
 800f018:	20000154 	.word	0x20000154
 800f01c:	10624dd3 	.word	0x10624dd3
 800f020:	e000e014 	.word	0xe000e014

0800f024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f034 <vPortEnableVFP+0x10>
 800f028:	6801      	ldr	r1, [r0, #0]
 800f02a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f02e:	6001      	str	r1, [r0, #0]
 800f030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f032:	bf00      	nop
 800f034:	e000ed88 	.word	0xe000ed88

0800f038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f03e:	f3ef 8305 	mrs	r3, IPSR
 800f042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b0f      	cmp	r3, #15
 800f048:	d914      	bls.n	800f074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f04a:	4a17      	ldr	r2, [pc, #92]	; (800f0a8 <vPortValidateInterruptPriority+0x70>)
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	4413      	add	r3, r2
 800f050:	781b      	ldrb	r3, [r3, #0]
 800f052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f054:	4b15      	ldr	r3, [pc, #84]	; (800f0ac <vPortValidateInterruptPriority+0x74>)
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	7afa      	ldrb	r2, [r7, #11]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d20a      	bcs.n	800f074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f062:	f383 8811 	msr	BASEPRI, r3
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	607b      	str	r3, [r7, #4]
}
 800f070:	bf00      	nop
 800f072:	e7fe      	b.n	800f072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f074:	4b0e      	ldr	r3, [pc, #56]	; (800f0b0 <vPortValidateInterruptPriority+0x78>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f07c:	4b0d      	ldr	r3, [pc, #52]	; (800f0b4 <vPortValidateInterruptPriority+0x7c>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	429a      	cmp	r2, r3
 800f082:	d90a      	bls.n	800f09a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f088:	f383 8811 	msr	BASEPRI, r3
 800f08c:	f3bf 8f6f 	isb	sy
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	603b      	str	r3, [r7, #0]
}
 800f096:	bf00      	nop
 800f098:	e7fe      	b.n	800f098 <vPortValidateInterruptPriority+0x60>
	}
 800f09a:	bf00      	nop
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	e000e3f0 	.word	0xe000e3f0
 800f0ac:	20000f20 	.word	0x20000f20
 800f0b0:	e000ed0c 	.word	0xe000ed0c
 800f0b4:	20000f24 	.word	0x20000f24

0800f0b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08a      	sub	sp, #40	; 0x28
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f0c4:	f7fe fbb6 	bl	800d834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f0c8:	4b5b      	ldr	r3, [pc, #364]	; (800f238 <pvPortMalloc+0x180>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d101      	bne.n	800f0d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0d0:	f000 f920 	bl	800f314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0d4:	4b59      	ldr	r3, [pc, #356]	; (800f23c <pvPortMalloc+0x184>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4013      	ands	r3, r2
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f040 8093 	bne.w	800f208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d01d      	beq.n	800f124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f0e8:	2208      	movs	r2, #8
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f003 0307 	and.w	r3, r3, #7
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d014      	beq.n	800f124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f023 0307 	bic.w	r3, r3, #7
 800f100:	3308      	adds	r3, #8
 800f102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f003 0307 	and.w	r3, r3, #7
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00a      	beq.n	800f124 <pvPortMalloc+0x6c>
	__asm volatile
 800f10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	617b      	str	r3, [r7, #20]
}
 800f120:	bf00      	nop
 800f122:	e7fe      	b.n	800f122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d06e      	beq.n	800f208 <pvPortMalloc+0x150>
 800f12a:	4b45      	ldr	r3, [pc, #276]	; (800f240 <pvPortMalloc+0x188>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	429a      	cmp	r2, r3
 800f132:	d869      	bhi.n	800f208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f134:	4b43      	ldr	r3, [pc, #268]	; (800f244 <pvPortMalloc+0x18c>)
 800f136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f138:	4b42      	ldr	r3, [pc, #264]	; (800f244 <pvPortMalloc+0x18c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f13e:	e004      	b.n	800f14a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	429a      	cmp	r2, r3
 800f152:	d903      	bls.n	800f15c <pvPortMalloc+0xa4>
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1f1      	bne.n	800f140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f15c:	4b36      	ldr	r3, [pc, #216]	; (800f238 <pvPortMalloc+0x180>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f162:	429a      	cmp	r2, r3
 800f164:	d050      	beq.n	800f208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2208      	movs	r2, #8
 800f16c:	4413      	add	r3, r2
 800f16e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	1ad2      	subs	r2, r2, r3
 800f180:	2308      	movs	r3, #8
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	429a      	cmp	r2, r3
 800f186:	d91f      	bls.n	800f1c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4413      	add	r3, r2
 800f18e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	f003 0307 	and.w	r3, r3, #7
 800f196:	2b00      	cmp	r3, #0
 800f198:	d00a      	beq.n	800f1b0 <pvPortMalloc+0xf8>
	__asm volatile
 800f19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19e:	f383 8811 	msr	BASEPRI, r3
 800f1a2:	f3bf 8f6f 	isb	sy
 800f1a6:	f3bf 8f4f 	dsb	sy
 800f1aa:	613b      	str	r3, [r7, #16]
}
 800f1ac:	bf00      	nop
 800f1ae:	e7fe      	b.n	800f1ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b2:	685a      	ldr	r2, [r3, #4]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	1ad2      	subs	r2, r2, r3
 800f1b8:	69bb      	ldr	r3, [r7, #24]
 800f1ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f1c2:	69b8      	ldr	r0, [r7, #24]
 800f1c4:	f000 f908 	bl	800f3d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f1c8:	4b1d      	ldr	r3, [pc, #116]	; (800f240 <pvPortMalloc+0x188>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	1ad3      	subs	r3, r2, r3
 800f1d2:	4a1b      	ldr	r2, [pc, #108]	; (800f240 <pvPortMalloc+0x188>)
 800f1d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1d6:	4b1a      	ldr	r3, [pc, #104]	; (800f240 <pvPortMalloc+0x188>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	4b1b      	ldr	r3, [pc, #108]	; (800f248 <pvPortMalloc+0x190>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d203      	bcs.n	800f1ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1e2:	4b17      	ldr	r3, [pc, #92]	; (800f240 <pvPortMalloc+0x188>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4a18      	ldr	r2, [pc, #96]	; (800f248 <pvPortMalloc+0x190>)
 800f1e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	4b13      	ldr	r3, [pc, #76]	; (800f23c <pvPortMalloc+0x184>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	431a      	orrs	r2, r3
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f1fe:	4b13      	ldr	r3, [pc, #76]	; (800f24c <pvPortMalloc+0x194>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3301      	adds	r3, #1
 800f204:	4a11      	ldr	r2, [pc, #68]	; (800f24c <pvPortMalloc+0x194>)
 800f206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f208:	f7fe fb22 	bl	800d850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	f003 0307 	and.w	r3, r3, #7
 800f212:	2b00      	cmp	r3, #0
 800f214:	d00a      	beq.n	800f22c <pvPortMalloc+0x174>
	__asm volatile
 800f216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	60fb      	str	r3, [r7, #12]
}
 800f228:	bf00      	nop
 800f22a:	e7fe      	b.n	800f22a <pvPortMalloc+0x172>
	return pvReturn;
 800f22c:	69fb      	ldr	r3, [r7, #28]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3728      	adds	r7, #40	; 0x28
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	200041f8 	.word	0x200041f8
 800f23c:	2000420c 	.word	0x2000420c
 800f240:	200041fc 	.word	0x200041fc
 800f244:	200041f0 	.word	0x200041f0
 800f248:	20004200 	.word	0x20004200
 800f24c:	20004204 	.word	0x20004204

0800f250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d04d      	beq.n	800f2fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f262:	2308      	movs	r3, #8
 800f264:	425b      	negs	r3, r3
 800f266:	697a      	ldr	r2, [r7, #20]
 800f268:	4413      	add	r3, r2
 800f26a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	685a      	ldr	r2, [r3, #4]
 800f274:	4b24      	ldr	r3, [pc, #144]	; (800f308 <vPortFree+0xb8>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4013      	ands	r3, r2
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d10a      	bne.n	800f294 <vPortFree+0x44>
	__asm volatile
 800f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f282:	f383 8811 	msr	BASEPRI, r3
 800f286:	f3bf 8f6f 	isb	sy
 800f28a:	f3bf 8f4f 	dsb	sy
 800f28e:	60fb      	str	r3, [r7, #12]
}
 800f290:	bf00      	nop
 800f292:	e7fe      	b.n	800f292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d00a      	beq.n	800f2b2 <vPortFree+0x62>
	__asm volatile
 800f29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	60bb      	str	r3, [r7, #8]
}
 800f2ae:	bf00      	nop
 800f2b0:	e7fe      	b.n	800f2b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	4b14      	ldr	r3, [pc, #80]	; (800f308 <vPortFree+0xb8>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d01e      	beq.n	800f2fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d11a      	bne.n	800f2fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	4b0e      	ldr	r3, [pc, #56]	; (800f308 <vPortFree+0xb8>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	43db      	mvns	r3, r3
 800f2d2:	401a      	ands	r2, r3
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2d8:	f7fe faac 	bl	800d834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	685a      	ldr	r2, [r3, #4]
 800f2e0:	4b0a      	ldr	r3, [pc, #40]	; (800f30c <vPortFree+0xbc>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	4a09      	ldr	r2, [pc, #36]	; (800f30c <vPortFree+0xbc>)
 800f2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2ea:	6938      	ldr	r0, [r7, #16]
 800f2ec:	f000 f874 	bl	800f3d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f2f0:	4b07      	ldr	r3, [pc, #28]	; (800f310 <vPortFree+0xc0>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	4a06      	ldr	r2, [pc, #24]	; (800f310 <vPortFree+0xc0>)
 800f2f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f2fa:	f7fe faa9 	bl	800d850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2fe:	bf00      	nop
 800f300:	3718      	adds	r7, #24
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2000420c 	.word	0x2000420c
 800f30c:	200041fc 	.word	0x200041fc
 800f310:	20004208 	.word	0x20004208

0800f314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f31a:	f243 23c8 	movw	r3, #13000	; 0x32c8
 800f31e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f320:	4b27      	ldr	r3, [pc, #156]	; (800f3c0 <prvHeapInit+0xac>)
 800f322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f003 0307 	and.w	r3, r3, #7
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00c      	beq.n	800f348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	3307      	adds	r3, #7
 800f332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f023 0307 	bic.w	r3, r3, #7
 800f33a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	4a1f      	ldr	r2, [pc, #124]	; (800f3c0 <prvHeapInit+0xac>)
 800f344:	4413      	add	r3, r2
 800f346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f34c:	4a1d      	ldr	r2, [pc, #116]	; (800f3c4 <prvHeapInit+0xb0>)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f352:	4b1c      	ldr	r3, [pc, #112]	; (800f3c4 <prvHeapInit+0xb0>)
 800f354:	2200      	movs	r2, #0
 800f356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	4413      	add	r3, r2
 800f35e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f360:	2208      	movs	r2, #8
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	1a9b      	subs	r3, r3, r2
 800f366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f023 0307 	bic.w	r3, r3, #7
 800f36e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	4a15      	ldr	r2, [pc, #84]	; (800f3c8 <prvHeapInit+0xb4>)
 800f374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f376:	4b14      	ldr	r3, [pc, #80]	; (800f3c8 <prvHeapInit+0xb4>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2200      	movs	r2, #0
 800f37c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f37e:	4b12      	ldr	r3, [pc, #72]	; (800f3c8 <prvHeapInit+0xb4>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	68fa      	ldr	r2, [r7, #12]
 800f38e:	1ad2      	subs	r2, r2, r3
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f394:	4b0c      	ldr	r3, [pc, #48]	; (800f3c8 <prvHeapInit+0xb4>)
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	4a0a      	ldr	r2, [pc, #40]	; (800f3cc <prvHeapInit+0xb8>)
 800f3a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	4a09      	ldr	r2, [pc, #36]	; (800f3d0 <prvHeapInit+0xbc>)
 800f3aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f3ac:	4b09      	ldr	r3, [pc, #36]	; (800f3d4 <prvHeapInit+0xc0>)
 800f3ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f3b2:	601a      	str	r2, [r3, #0]
}
 800f3b4:	bf00      	nop
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	20000f28 	.word	0x20000f28
 800f3c4:	200041f0 	.word	0x200041f0
 800f3c8:	200041f8 	.word	0x200041f8
 800f3cc:	20004200 	.word	0x20004200
 800f3d0:	200041fc 	.word	0x200041fc
 800f3d4:	2000420c 	.word	0x2000420c

0800f3d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3e0:	4b28      	ldr	r3, [pc, #160]	; (800f484 <prvInsertBlockIntoFreeList+0xac>)
 800f3e2:	60fb      	str	r3, [r7, #12]
 800f3e4:	e002      	b.n	800f3ec <prvInsertBlockIntoFreeList+0x14>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	60fb      	str	r3, [r7, #12]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d8f7      	bhi.n	800f3e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	4413      	add	r3, r2
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	429a      	cmp	r2, r3
 800f406:	d108      	bne.n	800f41a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	685a      	ldr	r2, [r3, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	441a      	add	r2, r3
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	441a      	add	r2, r3
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d118      	bne.n	800f460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	4b15      	ldr	r3, [pc, #84]	; (800f488 <prvInsertBlockIntoFreeList+0xb0>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d00d      	beq.n	800f456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	685a      	ldr	r2, [r3, #4]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	441a      	add	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	e008      	b.n	800f468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f456:	4b0c      	ldr	r3, [pc, #48]	; (800f488 <prvInsertBlockIntoFreeList+0xb0>)
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	e003      	b.n	800f468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d002      	beq.n	800f476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f476:	bf00      	nop
 800f478:	3714      	adds	r7, #20
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	200041f0 	.word	0x200041f0
 800f488:	200041f8 	.word	0x200041f8

0800f48c <__errno>:
 800f48c:	4b01      	ldr	r3, [pc, #4]	; (800f494 <__errno+0x8>)
 800f48e:	6818      	ldr	r0, [r3, #0]
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	20000178 	.word	0x20000178

0800f498 <__libc_init_array>:
 800f498:	b570      	push	{r4, r5, r6, lr}
 800f49a:	4d0d      	ldr	r5, [pc, #52]	; (800f4d0 <__libc_init_array+0x38>)
 800f49c:	4c0d      	ldr	r4, [pc, #52]	; (800f4d4 <__libc_init_array+0x3c>)
 800f49e:	1b64      	subs	r4, r4, r5
 800f4a0:	10a4      	asrs	r4, r4, #2
 800f4a2:	2600      	movs	r6, #0
 800f4a4:	42a6      	cmp	r6, r4
 800f4a6:	d109      	bne.n	800f4bc <__libc_init_array+0x24>
 800f4a8:	4d0b      	ldr	r5, [pc, #44]	; (800f4d8 <__libc_init_array+0x40>)
 800f4aa:	4c0c      	ldr	r4, [pc, #48]	; (800f4dc <__libc_init_array+0x44>)
 800f4ac:	f000 fffa 	bl	80104a4 <_init>
 800f4b0:	1b64      	subs	r4, r4, r5
 800f4b2:	10a4      	asrs	r4, r4, #2
 800f4b4:	2600      	movs	r6, #0
 800f4b6:	42a6      	cmp	r6, r4
 800f4b8:	d105      	bne.n	800f4c6 <__libc_init_array+0x2e>
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}
 800f4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4c0:	4798      	blx	r3
 800f4c2:	3601      	adds	r6, #1
 800f4c4:	e7ee      	b.n	800f4a4 <__libc_init_array+0xc>
 800f4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4ca:	4798      	blx	r3
 800f4cc:	3601      	adds	r6, #1
 800f4ce:	e7f2      	b.n	800f4b6 <__libc_init_array+0x1e>
 800f4d0:	08010d84 	.word	0x08010d84
 800f4d4:	08010d84 	.word	0x08010d84
 800f4d8:	08010d84 	.word	0x08010d84
 800f4dc:	08010d88 	.word	0x08010d88

0800f4e0 <memcpy>:
 800f4e0:	440a      	add	r2, r1
 800f4e2:	4291      	cmp	r1, r2
 800f4e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f4e8:	d100      	bne.n	800f4ec <memcpy+0xc>
 800f4ea:	4770      	bx	lr
 800f4ec:	b510      	push	{r4, lr}
 800f4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4f6:	4291      	cmp	r1, r2
 800f4f8:	d1f9      	bne.n	800f4ee <memcpy+0xe>
 800f4fa:	bd10      	pop	{r4, pc}

0800f4fc <memset>:
 800f4fc:	4402      	add	r2, r0
 800f4fe:	4603      	mov	r3, r0
 800f500:	4293      	cmp	r3, r2
 800f502:	d100      	bne.n	800f506 <memset+0xa>
 800f504:	4770      	bx	lr
 800f506:	f803 1b01 	strb.w	r1, [r3], #1
 800f50a:	e7f9      	b.n	800f500 <memset+0x4>

0800f50c <iprintf>:
 800f50c:	b40f      	push	{r0, r1, r2, r3}
 800f50e:	4b0a      	ldr	r3, [pc, #40]	; (800f538 <iprintf+0x2c>)
 800f510:	b513      	push	{r0, r1, r4, lr}
 800f512:	681c      	ldr	r4, [r3, #0]
 800f514:	b124      	cbz	r4, 800f520 <iprintf+0x14>
 800f516:	69a3      	ldr	r3, [r4, #24]
 800f518:	b913      	cbnz	r3, 800f520 <iprintf+0x14>
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 fa5e 	bl	800f9dc <__sinit>
 800f520:	ab05      	add	r3, sp, #20
 800f522:	9a04      	ldr	r2, [sp, #16]
 800f524:	68a1      	ldr	r1, [r4, #8]
 800f526:	9301      	str	r3, [sp, #4]
 800f528:	4620      	mov	r0, r4
 800f52a:	f000 fc2f 	bl	800fd8c <_vfiprintf_r>
 800f52e:	b002      	add	sp, #8
 800f530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f534:	b004      	add	sp, #16
 800f536:	4770      	bx	lr
 800f538:	20000178 	.word	0x20000178

0800f53c <_puts_r>:
 800f53c:	b570      	push	{r4, r5, r6, lr}
 800f53e:	460e      	mov	r6, r1
 800f540:	4605      	mov	r5, r0
 800f542:	b118      	cbz	r0, 800f54c <_puts_r+0x10>
 800f544:	6983      	ldr	r3, [r0, #24]
 800f546:	b90b      	cbnz	r3, 800f54c <_puts_r+0x10>
 800f548:	f000 fa48 	bl	800f9dc <__sinit>
 800f54c:	69ab      	ldr	r3, [r5, #24]
 800f54e:	68ac      	ldr	r4, [r5, #8]
 800f550:	b913      	cbnz	r3, 800f558 <_puts_r+0x1c>
 800f552:	4628      	mov	r0, r5
 800f554:	f000 fa42 	bl	800f9dc <__sinit>
 800f558:	4b2c      	ldr	r3, [pc, #176]	; (800f60c <_puts_r+0xd0>)
 800f55a:	429c      	cmp	r4, r3
 800f55c:	d120      	bne.n	800f5a0 <_puts_r+0x64>
 800f55e:	686c      	ldr	r4, [r5, #4]
 800f560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f562:	07db      	lsls	r3, r3, #31
 800f564:	d405      	bmi.n	800f572 <_puts_r+0x36>
 800f566:	89a3      	ldrh	r3, [r4, #12]
 800f568:	0598      	lsls	r0, r3, #22
 800f56a:	d402      	bmi.n	800f572 <_puts_r+0x36>
 800f56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f56e:	f000 fad3 	bl	800fb18 <__retarget_lock_acquire_recursive>
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	0719      	lsls	r1, r3, #28
 800f576:	d51d      	bpl.n	800f5b4 <_puts_r+0x78>
 800f578:	6923      	ldr	r3, [r4, #16]
 800f57a:	b1db      	cbz	r3, 800f5b4 <_puts_r+0x78>
 800f57c:	3e01      	subs	r6, #1
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f584:	3b01      	subs	r3, #1
 800f586:	60a3      	str	r3, [r4, #8]
 800f588:	bb39      	cbnz	r1, 800f5da <_puts_r+0x9e>
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	da38      	bge.n	800f600 <_puts_r+0xc4>
 800f58e:	4622      	mov	r2, r4
 800f590:	210a      	movs	r1, #10
 800f592:	4628      	mov	r0, r5
 800f594:	f000 f848 	bl	800f628 <__swbuf_r>
 800f598:	3001      	adds	r0, #1
 800f59a:	d011      	beq.n	800f5c0 <_puts_r+0x84>
 800f59c:	250a      	movs	r5, #10
 800f59e:	e011      	b.n	800f5c4 <_puts_r+0x88>
 800f5a0:	4b1b      	ldr	r3, [pc, #108]	; (800f610 <_puts_r+0xd4>)
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	d101      	bne.n	800f5aa <_puts_r+0x6e>
 800f5a6:	68ac      	ldr	r4, [r5, #8]
 800f5a8:	e7da      	b.n	800f560 <_puts_r+0x24>
 800f5aa:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <_puts_r+0xd8>)
 800f5ac:	429c      	cmp	r4, r3
 800f5ae:	bf08      	it	eq
 800f5b0:	68ec      	ldreq	r4, [r5, #12]
 800f5b2:	e7d5      	b.n	800f560 <_puts_r+0x24>
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f000 f888 	bl	800f6cc <__swsetup_r>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d0dd      	beq.n	800f57c <_puts_r+0x40>
 800f5c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f5c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5c6:	07da      	lsls	r2, r3, #31
 800f5c8:	d405      	bmi.n	800f5d6 <_puts_r+0x9a>
 800f5ca:	89a3      	ldrh	r3, [r4, #12]
 800f5cc:	059b      	lsls	r3, r3, #22
 800f5ce:	d402      	bmi.n	800f5d6 <_puts_r+0x9a>
 800f5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5d2:	f000 faa2 	bl	800fb1a <__retarget_lock_release_recursive>
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	bd70      	pop	{r4, r5, r6, pc}
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	da04      	bge.n	800f5e8 <_puts_r+0xac>
 800f5de:	69a2      	ldr	r2, [r4, #24]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	dc06      	bgt.n	800f5f2 <_puts_r+0xb6>
 800f5e4:	290a      	cmp	r1, #10
 800f5e6:	d004      	beq.n	800f5f2 <_puts_r+0xb6>
 800f5e8:	6823      	ldr	r3, [r4, #0]
 800f5ea:	1c5a      	adds	r2, r3, #1
 800f5ec:	6022      	str	r2, [r4, #0]
 800f5ee:	7019      	strb	r1, [r3, #0]
 800f5f0:	e7c5      	b.n	800f57e <_puts_r+0x42>
 800f5f2:	4622      	mov	r2, r4
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	f000 f817 	bl	800f628 <__swbuf_r>
 800f5fa:	3001      	adds	r0, #1
 800f5fc:	d1bf      	bne.n	800f57e <_puts_r+0x42>
 800f5fe:	e7df      	b.n	800f5c0 <_puts_r+0x84>
 800f600:	6823      	ldr	r3, [r4, #0]
 800f602:	250a      	movs	r5, #10
 800f604:	1c5a      	adds	r2, r3, #1
 800f606:	6022      	str	r2, [r4, #0]
 800f608:	701d      	strb	r5, [r3, #0]
 800f60a:	e7db      	b.n	800f5c4 <_puts_r+0x88>
 800f60c:	08010d08 	.word	0x08010d08
 800f610:	08010d28 	.word	0x08010d28
 800f614:	08010ce8 	.word	0x08010ce8

0800f618 <puts>:
 800f618:	4b02      	ldr	r3, [pc, #8]	; (800f624 <puts+0xc>)
 800f61a:	4601      	mov	r1, r0
 800f61c:	6818      	ldr	r0, [r3, #0]
 800f61e:	f7ff bf8d 	b.w	800f53c <_puts_r>
 800f622:	bf00      	nop
 800f624:	20000178 	.word	0x20000178

0800f628 <__swbuf_r>:
 800f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62a:	460e      	mov	r6, r1
 800f62c:	4614      	mov	r4, r2
 800f62e:	4605      	mov	r5, r0
 800f630:	b118      	cbz	r0, 800f63a <__swbuf_r+0x12>
 800f632:	6983      	ldr	r3, [r0, #24]
 800f634:	b90b      	cbnz	r3, 800f63a <__swbuf_r+0x12>
 800f636:	f000 f9d1 	bl	800f9dc <__sinit>
 800f63a:	4b21      	ldr	r3, [pc, #132]	; (800f6c0 <__swbuf_r+0x98>)
 800f63c:	429c      	cmp	r4, r3
 800f63e:	d12b      	bne.n	800f698 <__swbuf_r+0x70>
 800f640:	686c      	ldr	r4, [r5, #4]
 800f642:	69a3      	ldr	r3, [r4, #24]
 800f644:	60a3      	str	r3, [r4, #8]
 800f646:	89a3      	ldrh	r3, [r4, #12]
 800f648:	071a      	lsls	r2, r3, #28
 800f64a:	d52f      	bpl.n	800f6ac <__swbuf_r+0x84>
 800f64c:	6923      	ldr	r3, [r4, #16]
 800f64e:	b36b      	cbz	r3, 800f6ac <__swbuf_r+0x84>
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	6820      	ldr	r0, [r4, #0]
 800f654:	1ac0      	subs	r0, r0, r3
 800f656:	6963      	ldr	r3, [r4, #20]
 800f658:	b2f6      	uxtb	r6, r6
 800f65a:	4283      	cmp	r3, r0
 800f65c:	4637      	mov	r7, r6
 800f65e:	dc04      	bgt.n	800f66a <__swbuf_r+0x42>
 800f660:	4621      	mov	r1, r4
 800f662:	4628      	mov	r0, r5
 800f664:	f000 f926 	bl	800f8b4 <_fflush_r>
 800f668:	bb30      	cbnz	r0, 800f6b8 <__swbuf_r+0x90>
 800f66a:	68a3      	ldr	r3, [r4, #8]
 800f66c:	3b01      	subs	r3, #1
 800f66e:	60a3      	str	r3, [r4, #8]
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	6022      	str	r2, [r4, #0]
 800f676:	701e      	strb	r6, [r3, #0]
 800f678:	6963      	ldr	r3, [r4, #20]
 800f67a:	3001      	adds	r0, #1
 800f67c:	4283      	cmp	r3, r0
 800f67e:	d004      	beq.n	800f68a <__swbuf_r+0x62>
 800f680:	89a3      	ldrh	r3, [r4, #12]
 800f682:	07db      	lsls	r3, r3, #31
 800f684:	d506      	bpl.n	800f694 <__swbuf_r+0x6c>
 800f686:	2e0a      	cmp	r6, #10
 800f688:	d104      	bne.n	800f694 <__swbuf_r+0x6c>
 800f68a:	4621      	mov	r1, r4
 800f68c:	4628      	mov	r0, r5
 800f68e:	f000 f911 	bl	800f8b4 <_fflush_r>
 800f692:	b988      	cbnz	r0, 800f6b8 <__swbuf_r+0x90>
 800f694:	4638      	mov	r0, r7
 800f696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f698:	4b0a      	ldr	r3, [pc, #40]	; (800f6c4 <__swbuf_r+0x9c>)
 800f69a:	429c      	cmp	r4, r3
 800f69c:	d101      	bne.n	800f6a2 <__swbuf_r+0x7a>
 800f69e:	68ac      	ldr	r4, [r5, #8]
 800f6a0:	e7cf      	b.n	800f642 <__swbuf_r+0x1a>
 800f6a2:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <__swbuf_r+0xa0>)
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	bf08      	it	eq
 800f6a8:	68ec      	ldreq	r4, [r5, #12]
 800f6aa:	e7ca      	b.n	800f642 <__swbuf_r+0x1a>
 800f6ac:	4621      	mov	r1, r4
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f000 f80c 	bl	800f6cc <__swsetup_r>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d0cb      	beq.n	800f650 <__swbuf_r+0x28>
 800f6b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f6bc:	e7ea      	b.n	800f694 <__swbuf_r+0x6c>
 800f6be:	bf00      	nop
 800f6c0:	08010d08 	.word	0x08010d08
 800f6c4:	08010d28 	.word	0x08010d28
 800f6c8:	08010ce8 	.word	0x08010ce8

0800f6cc <__swsetup_r>:
 800f6cc:	4b32      	ldr	r3, [pc, #200]	; (800f798 <__swsetup_r+0xcc>)
 800f6ce:	b570      	push	{r4, r5, r6, lr}
 800f6d0:	681d      	ldr	r5, [r3, #0]
 800f6d2:	4606      	mov	r6, r0
 800f6d4:	460c      	mov	r4, r1
 800f6d6:	b125      	cbz	r5, 800f6e2 <__swsetup_r+0x16>
 800f6d8:	69ab      	ldr	r3, [r5, #24]
 800f6da:	b913      	cbnz	r3, 800f6e2 <__swsetup_r+0x16>
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f000 f97d 	bl	800f9dc <__sinit>
 800f6e2:	4b2e      	ldr	r3, [pc, #184]	; (800f79c <__swsetup_r+0xd0>)
 800f6e4:	429c      	cmp	r4, r3
 800f6e6:	d10f      	bne.n	800f708 <__swsetup_r+0x3c>
 800f6e8:	686c      	ldr	r4, [r5, #4]
 800f6ea:	89a3      	ldrh	r3, [r4, #12]
 800f6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6f0:	0719      	lsls	r1, r3, #28
 800f6f2:	d42c      	bmi.n	800f74e <__swsetup_r+0x82>
 800f6f4:	06dd      	lsls	r5, r3, #27
 800f6f6:	d411      	bmi.n	800f71c <__swsetup_r+0x50>
 800f6f8:	2309      	movs	r3, #9
 800f6fa:	6033      	str	r3, [r6, #0]
 800f6fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f700:	81a3      	strh	r3, [r4, #12]
 800f702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f706:	e03e      	b.n	800f786 <__swsetup_r+0xba>
 800f708:	4b25      	ldr	r3, [pc, #148]	; (800f7a0 <__swsetup_r+0xd4>)
 800f70a:	429c      	cmp	r4, r3
 800f70c:	d101      	bne.n	800f712 <__swsetup_r+0x46>
 800f70e:	68ac      	ldr	r4, [r5, #8]
 800f710:	e7eb      	b.n	800f6ea <__swsetup_r+0x1e>
 800f712:	4b24      	ldr	r3, [pc, #144]	; (800f7a4 <__swsetup_r+0xd8>)
 800f714:	429c      	cmp	r4, r3
 800f716:	bf08      	it	eq
 800f718:	68ec      	ldreq	r4, [r5, #12]
 800f71a:	e7e6      	b.n	800f6ea <__swsetup_r+0x1e>
 800f71c:	0758      	lsls	r0, r3, #29
 800f71e:	d512      	bpl.n	800f746 <__swsetup_r+0x7a>
 800f720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f722:	b141      	cbz	r1, 800f736 <__swsetup_r+0x6a>
 800f724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f728:	4299      	cmp	r1, r3
 800f72a:	d002      	beq.n	800f732 <__swsetup_r+0x66>
 800f72c:	4630      	mov	r0, r6
 800f72e:	f000 fa59 	bl	800fbe4 <_free_r>
 800f732:	2300      	movs	r3, #0
 800f734:	6363      	str	r3, [r4, #52]	; 0x34
 800f736:	89a3      	ldrh	r3, [r4, #12]
 800f738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f73c:	81a3      	strh	r3, [r4, #12]
 800f73e:	2300      	movs	r3, #0
 800f740:	6063      	str	r3, [r4, #4]
 800f742:	6923      	ldr	r3, [r4, #16]
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	89a3      	ldrh	r3, [r4, #12]
 800f748:	f043 0308 	orr.w	r3, r3, #8
 800f74c:	81a3      	strh	r3, [r4, #12]
 800f74e:	6923      	ldr	r3, [r4, #16]
 800f750:	b94b      	cbnz	r3, 800f766 <__swsetup_r+0x9a>
 800f752:	89a3      	ldrh	r3, [r4, #12]
 800f754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f75c:	d003      	beq.n	800f766 <__swsetup_r+0x9a>
 800f75e:	4621      	mov	r1, r4
 800f760:	4630      	mov	r0, r6
 800f762:	f000 f9ff 	bl	800fb64 <__smakebuf_r>
 800f766:	89a0      	ldrh	r0, [r4, #12]
 800f768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f76c:	f010 0301 	ands.w	r3, r0, #1
 800f770:	d00a      	beq.n	800f788 <__swsetup_r+0xbc>
 800f772:	2300      	movs	r3, #0
 800f774:	60a3      	str	r3, [r4, #8]
 800f776:	6963      	ldr	r3, [r4, #20]
 800f778:	425b      	negs	r3, r3
 800f77a:	61a3      	str	r3, [r4, #24]
 800f77c:	6923      	ldr	r3, [r4, #16]
 800f77e:	b943      	cbnz	r3, 800f792 <__swsetup_r+0xc6>
 800f780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f784:	d1ba      	bne.n	800f6fc <__swsetup_r+0x30>
 800f786:	bd70      	pop	{r4, r5, r6, pc}
 800f788:	0781      	lsls	r1, r0, #30
 800f78a:	bf58      	it	pl
 800f78c:	6963      	ldrpl	r3, [r4, #20]
 800f78e:	60a3      	str	r3, [r4, #8]
 800f790:	e7f4      	b.n	800f77c <__swsetup_r+0xb0>
 800f792:	2000      	movs	r0, #0
 800f794:	e7f7      	b.n	800f786 <__swsetup_r+0xba>
 800f796:	bf00      	nop
 800f798:	20000178 	.word	0x20000178
 800f79c:	08010d08 	.word	0x08010d08
 800f7a0:	08010d28 	.word	0x08010d28
 800f7a4:	08010ce8 	.word	0x08010ce8

0800f7a8 <__sflush_r>:
 800f7a8:	898a      	ldrh	r2, [r1, #12]
 800f7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	0710      	lsls	r0, r2, #28
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	d458      	bmi.n	800f868 <__sflush_r+0xc0>
 800f7b6:	684b      	ldr	r3, [r1, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	dc05      	bgt.n	800f7c8 <__sflush_r+0x20>
 800f7bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	dc02      	bgt.n	800f7c8 <__sflush_r+0x20>
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7ca:	2e00      	cmp	r6, #0
 800f7cc:	d0f9      	beq.n	800f7c2 <__sflush_r+0x1a>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7d4:	682f      	ldr	r7, [r5, #0]
 800f7d6:	602b      	str	r3, [r5, #0]
 800f7d8:	d032      	beq.n	800f840 <__sflush_r+0x98>
 800f7da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7dc:	89a3      	ldrh	r3, [r4, #12]
 800f7de:	075a      	lsls	r2, r3, #29
 800f7e0:	d505      	bpl.n	800f7ee <__sflush_r+0x46>
 800f7e2:	6863      	ldr	r3, [r4, #4]
 800f7e4:	1ac0      	subs	r0, r0, r3
 800f7e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7e8:	b10b      	cbz	r3, 800f7ee <__sflush_r+0x46>
 800f7ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7ec:	1ac0      	subs	r0, r0, r3
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7f4:	6a21      	ldr	r1, [r4, #32]
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	47b0      	blx	r6
 800f7fa:	1c43      	adds	r3, r0, #1
 800f7fc:	89a3      	ldrh	r3, [r4, #12]
 800f7fe:	d106      	bne.n	800f80e <__sflush_r+0x66>
 800f800:	6829      	ldr	r1, [r5, #0]
 800f802:	291d      	cmp	r1, #29
 800f804:	d82c      	bhi.n	800f860 <__sflush_r+0xb8>
 800f806:	4a2a      	ldr	r2, [pc, #168]	; (800f8b0 <__sflush_r+0x108>)
 800f808:	40ca      	lsrs	r2, r1
 800f80a:	07d6      	lsls	r6, r2, #31
 800f80c:	d528      	bpl.n	800f860 <__sflush_r+0xb8>
 800f80e:	2200      	movs	r2, #0
 800f810:	6062      	str	r2, [r4, #4]
 800f812:	04d9      	lsls	r1, r3, #19
 800f814:	6922      	ldr	r2, [r4, #16]
 800f816:	6022      	str	r2, [r4, #0]
 800f818:	d504      	bpl.n	800f824 <__sflush_r+0x7c>
 800f81a:	1c42      	adds	r2, r0, #1
 800f81c:	d101      	bne.n	800f822 <__sflush_r+0x7a>
 800f81e:	682b      	ldr	r3, [r5, #0]
 800f820:	b903      	cbnz	r3, 800f824 <__sflush_r+0x7c>
 800f822:	6560      	str	r0, [r4, #84]	; 0x54
 800f824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f826:	602f      	str	r7, [r5, #0]
 800f828:	2900      	cmp	r1, #0
 800f82a:	d0ca      	beq.n	800f7c2 <__sflush_r+0x1a>
 800f82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f830:	4299      	cmp	r1, r3
 800f832:	d002      	beq.n	800f83a <__sflush_r+0x92>
 800f834:	4628      	mov	r0, r5
 800f836:	f000 f9d5 	bl	800fbe4 <_free_r>
 800f83a:	2000      	movs	r0, #0
 800f83c:	6360      	str	r0, [r4, #52]	; 0x34
 800f83e:	e7c1      	b.n	800f7c4 <__sflush_r+0x1c>
 800f840:	6a21      	ldr	r1, [r4, #32]
 800f842:	2301      	movs	r3, #1
 800f844:	4628      	mov	r0, r5
 800f846:	47b0      	blx	r6
 800f848:	1c41      	adds	r1, r0, #1
 800f84a:	d1c7      	bne.n	800f7dc <__sflush_r+0x34>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d0c4      	beq.n	800f7dc <__sflush_r+0x34>
 800f852:	2b1d      	cmp	r3, #29
 800f854:	d001      	beq.n	800f85a <__sflush_r+0xb2>
 800f856:	2b16      	cmp	r3, #22
 800f858:	d101      	bne.n	800f85e <__sflush_r+0xb6>
 800f85a:	602f      	str	r7, [r5, #0]
 800f85c:	e7b1      	b.n	800f7c2 <__sflush_r+0x1a>
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f864:	81a3      	strh	r3, [r4, #12]
 800f866:	e7ad      	b.n	800f7c4 <__sflush_r+0x1c>
 800f868:	690f      	ldr	r7, [r1, #16]
 800f86a:	2f00      	cmp	r7, #0
 800f86c:	d0a9      	beq.n	800f7c2 <__sflush_r+0x1a>
 800f86e:	0793      	lsls	r3, r2, #30
 800f870:	680e      	ldr	r6, [r1, #0]
 800f872:	bf08      	it	eq
 800f874:	694b      	ldreq	r3, [r1, #20]
 800f876:	600f      	str	r7, [r1, #0]
 800f878:	bf18      	it	ne
 800f87a:	2300      	movne	r3, #0
 800f87c:	eba6 0807 	sub.w	r8, r6, r7
 800f880:	608b      	str	r3, [r1, #8]
 800f882:	f1b8 0f00 	cmp.w	r8, #0
 800f886:	dd9c      	ble.n	800f7c2 <__sflush_r+0x1a>
 800f888:	6a21      	ldr	r1, [r4, #32]
 800f88a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f88c:	4643      	mov	r3, r8
 800f88e:	463a      	mov	r2, r7
 800f890:	4628      	mov	r0, r5
 800f892:	47b0      	blx	r6
 800f894:	2800      	cmp	r0, #0
 800f896:	dc06      	bgt.n	800f8a6 <__sflush_r+0xfe>
 800f898:	89a3      	ldrh	r3, [r4, #12]
 800f89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f89e:	81a3      	strh	r3, [r4, #12]
 800f8a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8a4:	e78e      	b.n	800f7c4 <__sflush_r+0x1c>
 800f8a6:	4407      	add	r7, r0
 800f8a8:	eba8 0800 	sub.w	r8, r8, r0
 800f8ac:	e7e9      	b.n	800f882 <__sflush_r+0xda>
 800f8ae:	bf00      	nop
 800f8b0:	20400001 	.word	0x20400001

0800f8b4 <_fflush_r>:
 800f8b4:	b538      	push	{r3, r4, r5, lr}
 800f8b6:	690b      	ldr	r3, [r1, #16]
 800f8b8:	4605      	mov	r5, r0
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	b913      	cbnz	r3, 800f8c4 <_fflush_r+0x10>
 800f8be:	2500      	movs	r5, #0
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	bd38      	pop	{r3, r4, r5, pc}
 800f8c4:	b118      	cbz	r0, 800f8ce <_fflush_r+0x1a>
 800f8c6:	6983      	ldr	r3, [r0, #24]
 800f8c8:	b90b      	cbnz	r3, 800f8ce <_fflush_r+0x1a>
 800f8ca:	f000 f887 	bl	800f9dc <__sinit>
 800f8ce:	4b14      	ldr	r3, [pc, #80]	; (800f920 <_fflush_r+0x6c>)
 800f8d0:	429c      	cmp	r4, r3
 800f8d2:	d11b      	bne.n	800f90c <_fflush_r+0x58>
 800f8d4:	686c      	ldr	r4, [r5, #4]
 800f8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d0ef      	beq.n	800f8be <_fflush_r+0xa>
 800f8de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8e0:	07d0      	lsls	r0, r2, #31
 800f8e2:	d404      	bmi.n	800f8ee <_fflush_r+0x3a>
 800f8e4:	0599      	lsls	r1, r3, #22
 800f8e6:	d402      	bmi.n	800f8ee <_fflush_r+0x3a>
 800f8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ea:	f000 f915 	bl	800fb18 <__retarget_lock_acquire_recursive>
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	f7ff ff59 	bl	800f7a8 <__sflush_r>
 800f8f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8f8:	07da      	lsls	r2, r3, #31
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	d4e0      	bmi.n	800f8c0 <_fflush_r+0xc>
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	059b      	lsls	r3, r3, #22
 800f902:	d4dd      	bmi.n	800f8c0 <_fflush_r+0xc>
 800f904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f906:	f000 f908 	bl	800fb1a <__retarget_lock_release_recursive>
 800f90a:	e7d9      	b.n	800f8c0 <_fflush_r+0xc>
 800f90c:	4b05      	ldr	r3, [pc, #20]	; (800f924 <_fflush_r+0x70>)
 800f90e:	429c      	cmp	r4, r3
 800f910:	d101      	bne.n	800f916 <_fflush_r+0x62>
 800f912:	68ac      	ldr	r4, [r5, #8]
 800f914:	e7df      	b.n	800f8d6 <_fflush_r+0x22>
 800f916:	4b04      	ldr	r3, [pc, #16]	; (800f928 <_fflush_r+0x74>)
 800f918:	429c      	cmp	r4, r3
 800f91a:	bf08      	it	eq
 800f91c:	68ec      	ldreq	r4, [r5, #12]
 800f91e:	e7da      	b.n	800f8d6 <_fflush_r+0x22>
 800f920:	08010d08 	.word	0x08010d08
 800f924:	08010d28 	.word	0x08010d28
 800f928:	08010ce8 	.word	0x08010ce8

0800f92c <std>:
 800f92c:	2300      	movs	r3, #0
 800f92e:	b510      	push	{r4, lr}
 800f930:	4604      	mov	r4, r0
 800f932:	e9c0 3300 	strd	r3, r3, [r0]
 800f936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f93a:	6083      	str	r3, [r0, #8]
 800f93c:	8181      	strh	r1, [r0, #12]
 800f93e:	6643      	str	r3, [r0, #100]	; 0x64
 800f940:	81c2      	strh	r2, [r0, #14]
 800f942:	6183      	str	r3, [r0, #24]
 800f944:	4619      	mov	r1, r3
 800f946:	2208      	movs	r2, #8
 800f948:	305c      	adds	r0, #92	; 0x5c
 800f94a:	f7ff fdd7 	bl	800f4fc <memset>
 800f94e:	4b05      	ldr	r3, [pc, #20]	; (800f964 <std+0x38>)
 800f950:	6263      	str	r3, [r4, #36]	; 0x24
 800f952:	4b05      	ldr	r3, [pc, #20]	; (800f968 <std+0x3c>)
 800f954:	62a3      	str	r3, [r4, #40]	; 0x28
 800f956:	4b05      	ldr	r3, [pc, #20]	; (800f96c <std+0x40>)
 800f958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f95a:	4b05      	ldr	r3, [pc, #20]	; (800f970 <std+0x44>)
 800f95c:	6224      	str	r4, [r4, #32]
 800f95e:	6323      	str	r3, [r4, #48]	; 0x30
 800f960:	bd10      	pop	{r4, pc}
 800f962:	bf00      	nop
 800f964:	08010335 	.word	0x08010335
 800f968:	08010357 	.word	0x08010357
 800f96c:	0801038f 	.word	0x0801038f
 800f970:	080103b3 	.word	0x080103b3

0800f974 <_cleanup_r>:
 800f974:	4901      	ldr	r1, [pc, #4]	; (800f97c <_cleanup_r+0x8>)
 800f976:	f000 b8af 	b.w	800fad8 <_fwalk_reent>
 800f97a:	bf00      	nop
 800f97c:	0800f8b5 	.word	0x0800f8b5

0800f980 <__sfmoreglue>:
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	1e4a      	subs	r2, r1, #1
 800f984:	2568      	movs	r5, #104	; 0x68
 800f986:	4355      	muls	r5, r2
 800f988:	460e      	mov	r6, r1
 800f98a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f98e:	f000 f979 	bl	800fc84 <_malloc_r>
 800f992:	4604      	mov	r4, r0
 800f994:	b140      	cbz	r0, 800f9a8 <__sfmoreglue+0x28>
 800f996:	2100      	movs	r1, #0
 800f998:	e9c0 1600 	strd	r1, r6, [r0]
 800f99c:	300c      	adds	r0, #12
 800f99e:	60a0      	str	r0, [r4, #8]
 800f9a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9a4:	f7ff fdaa 	bl	800f4fc <memset>
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	bd70      	pop	{r4, r5, r6, pc}

0800f9ac <__sfp_lock_acquire>:
 800f9ac:	4801      	ldr	r0, [pc, #4]	; (800f9b4 <__sfp_lock_acquire+0x8>)
 800f9ae:	f000 b8b3 	b.w	800fb18 <__retarget_lock_acquire_recursive>
 800f9b2:	bf00      	nop
 800f9b4:	2001065c 	.word	0x2001065c

0800f9b8 <__sfp_lock_release>:
 800f9b8:	4801      	ldr	r0, [pc, #4]	; (800f9c0 <__sfp_lock_release+0x8>)
 800f9ba:	f000 b8ae 	b.w	800fb1a <__retarget_lock_release_recursive>
 800f9be:	bf00      	nop
 800f9c0:	2001065c 	.word	0x2001065c

0800f9c4 <__sinit_lock_acquire>:
 800f9c4:	4801      	ldr	r0, [pc, #4]	; (800f9cc <__sinit_lock_acquire+0x8>)
 800f9c6:	f000 b8a7 	b.w	800fb18 <__retarget_lock_acquire_recursive>
 800f9ca:	bf00      	nop
 800f9cc:	20010657 	.word	0x20010657

0800f9d0 <__sinit_lock_release>:
 800f9d0:	4801      	ldr	r0, [pc, #4]	; (800f9d8 <__sinit_lock_release+0x8>)
 800f9d2:	f000 b8a2 	b.w	800fb1a <__retarget_lock_release_recursive>
 800f9d6:	bf00      	nop
 800f9d8:	20010657 	.word	0x20010657

0800f9dc <__sinit>:
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	4604      	mov	r4, r0
 800f9e0:	f7ff fff0 	bl	800f9c4 <__sinit_lock_acquire>
 800f9e4:	69a3      	ldr	r3, [r4, #24]
 800f9e6:	b11b      	cbz	r3, 800f9f0 <__sinit+0x14>
 800f9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9ec:	f7ff bff0 	b.w	800f9d0 <__sinit_lock_release>
 800f9f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f9f4:	6523      	str	r3, [r4, #80]	; 0x50
 800f9f6:	4b13      	ldr	r3, [pc, #76]	; (800fa44 <__sinit+0x68>)
 800f9f8:	4a13      	ldr	r2, [pc, #76]	; (800fa48 <__sinit+0x6c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f9fe:	42a3      	cmp	r3, r4
 800fa00:	bf04      	itt	eq
 800fa02:	2301      	moveq	r3, #1
 800fa04:	61a3      	streq	r3, [r4, #24]
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 f820 	bl	800fa4c <__sfp>
 800fa0c:	6060      	str	r0, [r4, #4]
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f000 f81c 	bl	800fa4c <__sfp>
 800fa14:	60a0      	str	r0, [r4, #8]
 800fa16:	4620      	mov	r0, r4
 800fa18:	f000 f818 	bl	800fa4c <__sfp>
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	60e0      	str	r0, [r4, #12]
 800fa20:	2104      	movs	r1, #4
 800fa22:	6860      	ldr	r0, [r4, #4]
 800fa24:	f7ff ff82 	bl	800f92c <std>
 800fa28:	68a0      	ldr	r0, [r4, #8]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	2109      	movs	r1, #9
 800fa2e:	f7ff ff7d 	bl	800f92c <std>
 800fa32:	68e0      	ldr	r0, [r4, #12]
 800fa34:	2202      	movs	r2, #2
 800fa36:	2112      	movs	r1, #18
 800fa38:	f7ff ff78 	bl	800f92c <std>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	61a3      	str	r3, [r4, #24]
 800fa40:	e7d2      	b.n	800f9e8 <__sinit+0xc>
 800fa42:	bf00      	nop
 800fa44:	08010ce4 	.word	0x08010ce4
 800fa48:	0800f975 	.word	0x0800f975

0800fa4c <__sfp>:
 800fa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa4e:	4607      	mov	r7, r0
 800fa50:	f7ff ffac 	bl	800f9ac <__sfp_lock_acquire>
 800fa54:	4b1e      	ldr	r3, [pc, #120]	; (800fad0 <__sfp+0x84>)
 800fa56:	681e      	ldr	r6, [r3, #0]
 800fa58:	69b3      	ldr	r3, [r6, #24]
 800fa5a:	b913      	cbnz	r3, 800fa62 <__sfp+0x16>
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f7ff ffbd 	bl	800f9dc <__sinit>
 800fa62:	3648      	adds	r6, #72	; 0x48
 800fa64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	d503      	bpl.n	800fa74 <__sfp+0x28>
 800fa6c:	6833      	ldr	r3, [r6, #0]
 800fa6e:	b30b      	cbz	r3, 800fab4 <__sfp+0x68>
 800fa70:	6836      	ldr	r6, [r6, #0]
 800fa72:	e7f7      	b.n	800fa64 <__sfp+0x18>
 800fa74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa78:	b9d5      	cbnz	r5, 800fab0 <__sfp+0x64>
 800fa7a:	4b16      	ldr	r3, [pc, #88]	; (800fad4 <__sfp+0x88>)
 800fa7c:	60e3      	str	r3, [r4, #12]
 800fa7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa82:	6665      	str	r5, [r4, #100]	; 0x64
 800fa84:	f000 f847 	bl	800fb16 <__retarget_lock_init_recursive>
 800fa88:	f7ff ff96 	bl	800f9b8 <__sfp_lock_release>
 800fa8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa94:	6025      	str	r5, [r4, #0]
 800fa96:	61a5      	str	r5, [r4, #24]
 800fa98:	2208      	movs	r2, #8
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800faa0:	f7ff fd2c 	bl	800f4fc <memset>
 800faa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800faa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800faac:	4620      	mov	r0, r4
 800faae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fab0:	3468      	adds	r4, #104	; 0x68
 800fab2:	e7d9      	b.n	800fa68 <__sfp+0x1c>
 800fab4:	2104      	movs	r1, #4
 800fab6:	4638      	mov	r0, r7
 800fab8:	f7ff ff62 	bl	800f980 <__sfmoreglue>
 800fabc:	4604      	mov	r4, r0
 800fabe:	6030      	str	r0, [r6, #0]
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d1d5      	bne.n	800fa70 <__sfp+0x24>
 800fac4:	f7ff ff78 	bl	800f9b8 <__sfp_lock_release>
 800fac8:	230c      	movs	r3, #12
 800faca:	603b      	str	r3, [r7, #0]
 800facc:	e7ee      	b.n	800faac <__sfp+0x60>
 800face:	bf00      	nop
 800fad0:	08010ce4 	.word	0x08010ce4
 800fad4:	ffff0001 	.word	0xffff0001

0800fad8 <_fwalk_reent>:
 800fad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fadc:	4606      	mov	r6, r0
 800fade:	4688      	mov	r8, r1
 800fae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fae4:	2700      	movs	r7, #0
 800fae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800faea:	f1b9 0901 	subs.w	r9, r9, #1
 800faee:	d505      	bpl.n	800fafc <_fwalk_reent+0x24>
 800faf0:	6824      	ldr	r4, [r4, #0]
 800faf2:	2c00      	cmp	r4, #0
 800faf4:	d1f7      	bne.n	800fae6 <_fwalk_reent+0xe>
 800faf6:	4638      	mov	r0, r7
 800faf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fafc:	89ab      	ldrh	r3, [r5, #12]
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d907      	bls.n	800fb12 <_fwalk_reent+0x3a>
 800fb02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb06:	3301      	adds	r3, #1
 800fb08:	d003      	beq.n	800fb12 <_fwalk_reent+0x3a>
 800fb0a:	4629      	mov	r1, r5
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	47c0      	blx	r8
 800fb10:	4307      	orrs	r7, r0
 800fb12:	3568      	adds	r5, #104	; 0x68
 800fb14:	e7e9      	b.n	800faea <_fwalk_reent+0x12>

0800fb16 <__retarget_lock_init_recursive>:
 800fb16:	4770      	bx	lr

0800fb18 <__retarget_lock_acquire_recursive>:
 800fb18:	4770      	bx	lr

0800fb1a <__retarget_lock_release_recursive>:
 800fb1a:	4770      	bx	lr

0800fb1c <__swhatbuf_r>:
 800fb1c:	b570      	push	{r4, r5, r6, lr}
 800fb1e:	460e      	mov	r6, r1
 800fb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb24:	2900      	cmp	r1, #0
 800fb26:	b096      	sub	sp, #88	; 0x58
 800fb28:	4614      	mov	r4, r2
 800fb2a:	461d      	mov	r5, r3
 800fb2c:	da07      	bge.n	800fb3e <__swhatbuf_r+0x22>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	602b      	str	r3, [r5, #0]
 800fb32:	89b3      	ldrh	r3, [r6, #12]
 800fb34:	061a      	lsls	r2, r3, #24
 800fb36:	d410      	bmi.n	800fb5a <__swhatbuf_r+0x3e>
 800fb38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb3c:	e00e      	b.n	800fb5c <__swhatbuf_r+0x40>
 800fb3e:	466a      	mov	r2, sp
 800fb40:	f000 fc5e 	bl	8010400 <_fstat_r>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	dbf2      	blt.n	800fb2e <__swhatbuf_r+0x12>
 800fb48:	9a01      	ldr	r2, [sp, #4]
 800fb4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb52:	425a      	negs	r2, r3
 800fb54:	415a      	adcs	r2, r3
 800fb56:	602a      	str	r2, [r5, #0]
 800fb58:	e7ee      	b.n	800fb38 <__swhatbuf_r+0x1c>
 800fb5a:	2340      	movs	r3, #64	; 0x40
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	6023      	str	r3, [r4, #0]
 800fb60:	b016      	add	sp, #88	; 0x58
 800fb62:	bd70      	pop	{r4, r5, r6, pc}

0800fb64 <__smakebuf_r>:
 800fb64:	898b      	ldrh	r3, [r1, #12]
 800fb66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb68:	079d      	lsls	r5, r3, #30
 800fb6a:	4606      	mov	r6, r0
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	d507      	bpl.n	800fb80 <__smakebuf_r+0x1c>
 800fb70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	6123      	str	r3, [r4, #16]
 800fb78:	2301      	movs	r3, #1
 800fb7a:	6163      	str	r3, [r4, #20]
 800fb7c:	b002      	add	sp, #8
 800fb7e:	bd70      	pop	{r4, r5, r6, pc}
 800fb80:	ab01      	add	r3, sp, #4
 800fb82:	466a      	mov	r2, sp
 800fb84:	f7ff ffca 	bl	800fb1c <__swhatbuf_r>
 800fb88:	9900      	ldr	r1, [sp, #0]
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	4630      	mov	r0, r6
 800fb8e:	f000 f879 	bl	800fc84 <_malloc_r>
 800fb92:	b948      	cbnz	r0, 800fba8 <__smakebuf_r+0x44>
 800fb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb98:	059a      	lsls	r2, r3, #22
 800fb9a:	d4ef      	bmi.n	800fb7c <__smakebuf_r+0x18>
 800fb9c:	f023 0303 	bic.w	r3, r3, #3
 800fba0:	f043 0302 	orr.w	r3, r3, #2
 800fba4:	81a3      	strh	r3, [r4, #12]
 800fba6:	e7e3      	b.n	800fb70 <__smakebuf_r+0xc>
 800fba8:	4b0d      	ldr	r3, [pc, #52]	; (800fbe0 <__smakebuf_r+0x7c>)
 800fbaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	6020      	str	r0, [r4, #0]
 800fbb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbb4:	81a3      	strh	r3, [r4, #12]
 800fbb6:	9b00      	ldr	r3, [sp, #0]
 800fbb8:	6163      	str	r3, [r4, #20]
 800fbba:	9b01      	ldr	r3, [sp, #4]
 800fbbc:	6120      	str	r0, [r4, #16]
 800fbbe:	b15b      	cbz	r3, 800fbd8 <__smakebuf_r+0x74>
 800fbc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	f000 fc2d 	bl	8010424 <_isatty_r>
 800fbca:	b128      	cbz	r0, 800fbd8 <__smakebuf_r+0x74>
 800fbcc:	89a3      	ldrh	r3, [r4, #12]
 800fbce:	f023 0303 	bic.w	r3, r3, #3
 800fbd2:	f043 0301 	orr.w	r3, r3, #1
 800fbd6:	81a3      	strh	r3, [r4, #12]
 800fbd8:	89a0      	ldrh	r0, [r4, #12]
 800fbda:	4305      	orrs	r5, r0
 800fbdc:	81a5      	strh	r5, [r4, #12]
 800fbde:	e7cd      	b.n	800fb7c <__smakebuf_r+0x18>
 800fbe0:	0800f975 	.word	0x0800f975

0800fbe4 <_free_r>:
 800fbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbe6:	2900      	cmp	r1, #0
 800fbe8:	d048      	beq.n	800fc7c <_free_r+0x98>
 800fbea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbee:	9001      	str	r0, [sp, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f1a1 0404 	sub.w	r4, r1, #4
 800fbf6:	bfb8      	it	lt
 800fbf8:	18e4      	addlt	r4, r4, r3
 800fbfa:	f000 fc35 	bl	8010468 <__malloc_lock>
 800fbfe:	4a20      	ldr	r2, [pc, #128]	; (800fc80 <_free_r+0x9c>)
 800fc00:	9801      	ldr	r0, [sp, #4]
 800fc02:	6813      	ldr	r3, [r2, #0]
 800fc04:	4615      	mov	r5, r2
 800fc06:	b933      	cbnz	r3, 800fc16 <_free_r+0x32>
 800fc08:	6063      	str	r3, [r4, #4]
 800fc0a:	6014      	str	r4, [r2, #0]
 800fc0c:	b003      	add	sp, #12
 800fc0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc12:	f000 bc2f 	b.w	8010474 <__malloc_unlock>
 800fc16:	42a3      	cmp	r3, r4
 800fc18:	d90b      	bls.n	800fc32 <_free_r+0x4e>
 800fc1a:	6821      	ldr	r1, [r4, #0]
 800fc1c:	1862      	adds	r2, r4, r1
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	bf04      	itt	eq
 800fc22:	681a      	ldreq	r2, [r3, #0]
 800fc24:	685b      	ldreq	r3, [r3, #4]
 800fc26:	6063      	str	r3, [r4, #4]
 800fc28:	bf04      	itt	eq
 800fc2a:	1852      	addeq	r2, r2, r1
 800fc2c:	6022      	streq	r2, [r4, #0]
 800fc2e:	602c      	str	r4, [r5, #0]
 800fc30:	e7ec      	b.n	800fc0c <_free_r+0x28>
 800fc32:	461a      	mov	r2, r3
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	b10b      	cbz	r3, 800fc3c <_free_r+0x58>
 800fc38:	42a3      	cmp	r3, r4
 800fc3a:	d9fa      	bls.n	800fc32 <_free_r+0x4e>
 800fc3c:	6811      	ldr	r1, [r2, #0]
 800fc3e:	1855      	adds	r5, r2, r1
 800fc40:	42a5      	cmp	r5, r4
 800fc42:	d10b      	bne.n	800fc5c <_free_r+0x78>
 800fc44:	6824      	ldr	r4, [r4, #0]
 800fc46:	4421      	add	r1, r4
 800fc48:	1854      	adds	r4, r2, r1
 800fc4a:	42a3      	cmp	r3, r4
 800fc4c:	6011      	str	r1, [r2, #0]
 800fc4e:	d1dd      	bne.n	800fc0c <_free_r+0x28>
 800fc50:	681c      	ldr	r4, [r3, #0]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	6053      	str	r3, [r2, #4]
 800fc56:	4421      	add	r1, r4
 800fc58:	6011      	str	r1, [r2, #0]
 800fc5a:	e7d7      	b.n	800fc0c <_free_r+0x28>
 800fc5c:	d902      	bls.n	800fc64 <_free_r+0x80>
 800fc5e:	230c      	movs	r3, #12
 800fc60:	6003      	str	r3, [r0, #0]
 800fc62:	e7d3      	b.n	800fc0c <_free_r+0x28>
 800fc64:	6825      	ldr	r5, [r4, #0]
 800fc66:	1961      	adds	r1, r4, r5
 800fc68:	428b      	cmp	r3, r1
 800fc6a:	bf04      	itt	eq
 800fc6c:	6819      	ldreq	r1, [r3, #0]
 800fc6e:	685b      	ldreq	r3, [r3, #4]
 800fc70:	6063      	str	r3, [r4, #4]
 800fc72:	bf04      	itt	eq
 800fc74:	1949      	addeq	r1, r1, r5
 800fc76:	6021      	streq	r1, [r4, #0]
 800fc78:	6054      	str	r4, [r2, #4]
 800fc7a:	e7c7      	b.n	800fc0c <_free_r+0x28>
 800fc7c:	b003      	add	sp, #12
 800fc7e:	bd30      	pop	{r4, r5, pc}
 800fc80:	20004210 	.word	0x20004210

0800fc84 <_malloc_r>:
 800fc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc86:	1ccd      	adds	r5, r1, #3
 800fc88:	f025 0503 	bic.w	r5, r5, #3
 800fc8c:	3508      	adds	r5, #8
 800fc8e:	2d0c      	cmp	r5, #12
 800fc90:	bf38      	it	cc
 800fc92:	250c      	movcc	r5, #12
 800fc94:	2d00      	cmp	r5, #0
 800fc96:	4606      	mov	r6, r0
 800fc98:	db01      	blt.n	800fc9e <_malloc_r+0x1a>
 800fc9a:	42a9      	cmp	r1, r5
 800fc9c:	d903      	bls.n	800fca6 <_malloc_r+0x22>
 800fc9e:	230c      	movs	r3, #12
 800fca0:	6033      	str	r3, [r6, #0]
 800fca2:	2000      	movs	r0, #0
 800fca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fca6:	f000 fbdf 	bl	8010468 <__malloc_lock>
 800fcaa:	4921      	ldr	r1, [pc, #132]	; (800fd30 <_malloc_r+0xac>)
 800fcac:	680a      	ldr	r2, [r1, #0]
 800fcae:	4614      	mov	r4, r2
 800fcb0:	b99c      	cbnz	r4, 800fcda <_malloc_r+0x56>
 800fcb2:	4f20      	ldr	r7, [pc, #128]	; (800fd34 <_malloc_r+0xb0>)
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	b923      	cbnz	r3, 800fcc2 <_malloc_r+0x3e>
 800fcb8:	4621      	mov	r1, r4
 800fcba:	4630      	mov	r0, r6
 800fcbc:	f000 fb2a 	bl	8010314 <_sbrk_r>
 800fcc0:	6038      	str	r0, [r7, #0]
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	f000 fb25 	bl	8010314 <_sbrk_r>
 800fcca:	1c43      	adds	r3, r0, #1
 800fccc:	d123      	bne.n	800fd16 <_malloc_r+0x92>
 800fcce:	230c      	movs	r3, #12
 800fcd0:	6033      	str	r3, [r6, #0]
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	f000 fbce 	bl	8010474 <__malloc_unlock>
 800fcd8:	e7e3      	b.n	800fca2 <_malloc_r+0x1e>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	1b5b      	subs	r3, r3, r5
 800fcde:	d417      	bmi.n	800fd10 <_malloc_r+0x8c>
 800fce0:	2b0b      	cmp	r3, #11
 800fce2:	d903      	bls.n	800fcec <_malloc_r+0x68>
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	441c      	add	r4, r3
 800fce8:	6025      	str	r5, [r4, #0]
 800fcea:	e004      	b.n	800fcf6 <_malloc_r+0x72>
 800fcec:	6863      	ldr	r3, [r4, #4]
 800fcee:	42a2      	cmp	r2, r4
 800fcf0:	bf0c      	ite	eq
 800fcf2:	600b      	streq	r3, [r1, #0]
 800fcf4:	6053      	strne	r3, [r2, #4]
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	f000 fbbc 	bl	8010474 <__malloc_unlock>
 800fcfc:	f104 000b 	add.w	r0, r4, #11
 800fd00:	1d23      	adds	r3, r4, #4
 800fd02:	f020 0007 	bic.w	r0, r0, #7
 800fd06:	1ac2      	subs	r2, r0, r3
 800fd08:	d0cc      	beq.n	800fca4 <_malloc_r+0x20>
 800fd0a:	1a1b      	subs	r3, r3, r0
 800fd0c:	50a3      	str	r3, [r4, r2]
 800fd0e:	e7c9      	b.n	800fca4 <_malloc_r+0x20>
 800fd10:	4622      	mov	r2, r4
 800fd12:	6864      	ldr	r4, [r4, #4]
 800fd14:	e7cc      	b.n	800fcb0 <_malloc_r+0x2c>
 800fd16:	1cc4      	adds	r4, r0, #3
 800fd18:	f024 0403 	bic.w	r4, r4, #3
 800fd1c:	42a0      	cmp	r0, r4
 800fd1e:	d0e3      	beq.n	800fce8 <_malloc_r+0x64>
 800fd20:	1a21      	subs	r1, r4, r0
 800fd22:	4630      	mov	r0, r6
 800fd24:	f000 faf6 	bl	8010314 <_sbrk_r>
 800fd28:	3001      	adds	r0, #1
 800fd2a:	d1dd      	bne.n	800fce8 <_malloc_r+0x64>
 800fd2c:	e7cf      	b.n	800fcce <_malloc_r+0x4a>
 800fd2e:	bf00      	nop
 800fd30:	20004210 	.word	0x20004210
 800fd34:	20004214 	.word	0x20004214

0800fd38 <__sfputc_r>:
 800fd38:	6893      	ldr	r3, [r2, #8]
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	b410      	push	{r4}
 800fd40:	6093      	str	r3, [r2, #8]
 800fd42:	da08      	bge.n	800fd56 <__sfputc_r+0x1e>
 800fd44:	6994      	ldr	r4, [r2, #24]
 800fd46:	42a3      	cmp	r3, r4
 800fd48:	db01      	blt.n	800fd4e <__sfputc_r+0x16>
 800fd4a:	290a      	cmp	r1, #10
 800fd4c:	d103      	bne.n	800fd56 <__sfputc_r+0x1e>
 800fd4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd52:	f7ff bc69 	b.w	800f628 <__swbuf_r>
 800fd56:	6813      	ldr	r3, [r2, #0]
 800fd58:	1c58      	adds	r0, r3, #1
 800fd5a:	6010      	str	r0, [r2, #0]
 800fd5c:	7019      	strb	r1, [r3, #0]
 800fd5e:	4608      	mov	r0, r1
 800fd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd64:	4770      	bx	lr

0800fd66 <__sfputs_r>:
 800fd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd68:	4606      	mov	r6, r0
 800fd6a:	460f      	mov	r7, r1
 800fd6c:	4614      	mov	r4, r2
 800fd6e:	18d5      	adds	r5, r2, r3
 800fd70:	42ac      	cmp	r4, r5
 800fd72:	d101      	bne.n	800fd78 <__sfputs_r+0x12>
 800fd74:	2000      	movs	r0, #0
 800fd76:	e007      	b.n	800fd88 <__sfputs_r+0x22>
 800fd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd7c:	463a      	mov	r2, r7
 800fd7e:	4630      	mov	r0, r6
 800fd80:	f7ff ffda 	bl	800fd38 <__sfputc_r>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	d1f3      	bne.n	800fd70 <__sfputs_r+0xa>
 800fd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd8c <_vfiprintf_r>:
 800fd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd90:	460d      	mov	r5, r1
 800fd92:	b09d      	sub	sp, #116	; 0x74
 800fd94:	4614      	mov	r4, r2
 800fd96:	4698      	mov	r8, r3
 800fd98:	4606      	mov	r6, r0
 800fd9a:	b118      	cbz	r0, 800fda4 <_vfiprintf_r+0x18>
 800fd9c:	6983      	ldr	r3, [r0, #24]
 800fd9e:	b90b      	cbnz	r3, 800fda4 <_vfiprintf_r+0x18>
 800fda0:	f7ff fe1c 	bl	800f9dc <__sinit>
 800fda4:	4b89      	ldr	r3, [pc, #548]	; (800ffcc <_vfiprintf_r+0x240>)
 800fda6:	429d      	cmp	r5, r3
 800fda8:	d11b      	bne.n	800fde2 <_vfiprintf_r+0x56>
 800fdaa:	6875      	ldr	r5, [r6, #4]
 800fdac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdae:	07d9      	lsls	r1, r3, #31
 800fdb0:	d405      	bmi.n	800fdbe <_vfiprintf_r+0x32>
 800fdb2:	89ab      	ldrh	r3, [r5, #12]
 800fdb4:	059a      	lsls	r2, r3, #22
 800fdb6:	d402      	bmi.n	800fdbe <_vfiprintf_r+0x32>
 800fdb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdba:	f7ff fead 	bl	800fb18 <__retarget_lock_acquire_recursive>
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	071b      	lsls	r3, r3, #28
 800fdc2:	d501      	bpl.n	800fdc8 <_vfiprintf_r+0x3c>
 800fdc4:	692b      	ldr	r3, [r5, #16]
 800fdc6:	b9eb      	cbnz	r3, 800fe04 <_vfiprintf_r+0x78>
 800fdc8:	4629      	mov	r1, r5
 800fdca:	4630      	mov	r0, r6
 800fdcc:	f7ff fc7e 	bl	800f6cc <__swsetup_r>
 800fdd0:	b1c0      	cbz	r0, 800fe04 <_vfiprintf_r+0x78>
 800fdd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdd4:	07dc      	lsls	r4, r3, #31
 800fdd6:	d50e      	bpl.n	800fdf6 <_vfiprintf_r+0x6a>
 800fdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fddc:	b01d      	add	sp, #116	; 0x74
 800fdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde2:	4b7b      	ldr	r3, [pc, #492]	; (800ffd0 <_vfiprintf_r+0x244>)
 800fde4:	429d      	cmp	r5, r3
 800fde6:	d101      	bne.n	800fdec <_vfiprintf_r+0x60>
 800fde8:	68b5      	ldr	r5, [r6, #8]
 800fdea:	e7df      	b.n	800fdac <_vfiprintf_r+0x20>
 800fdec:	4b79      	ldr	r3, [pc, #484]	; (800ffd4 <_vfiprintf_r+0x248>)
 800fdee:	429d      	cmp	r5, r3
 800fdf0:	bf08      	it	eq
 800fdf2:	68f5      	ldreq	r5, [r6, #12]
 800fdf4:	e7da      	b.n	800fdac <_vfiprintf_r+0x20>
 800fdf6:	89ab      	ldrh	r3, [r5, #12]
 800fdf8:	0598      	lsls	r0, r3, #22
 800fdfa:	d4ed      	bmi.n	800fdd8 <_vfiprintf_r+0x4c>
 800fdfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdfe:	f7ff fe8c 	bl	800fb1a <__retarget_lock_release_recursive>
 800fe02:	e7e9      	b.n	800fdd8 <_vfiprintf_r+0x4c>
 800fe04:	2300      	movs	r3, #0
 800fe06:	9309      	str	r3, [sp, #36]	; 0x24
 800fe08:	2320      	movs	r3, #32
 800fe0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe12:	2330      	movs	r3, #48	; 0x30
 800fe14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffd8 <_vfiprintf_r+0x24c>
 800fe18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe1c:	f04f 0901 	mov.w	r9, #1
 800fe20:	4623      	mov	r3, r4
 800fe22:	469a      	mov	sl, r3
 800fe24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe28:	b10a      	cbz	r2, 800fe2e <_vfiprintf_r+0xa2>
 800fe2a:	2a25      	cmp	r2, #37	; 0x25
 800fe2c:	d1f9      	bne.n	800fe22 <_vfiprintf_r+0x96>
 800fe2e:	ebba 0b04 	subs.w	fp, sl, r4
 800fe32:	d00b      	beq.n	800fe4c <_vfiprintf_r+0xc0>
 800fe34:	465b      	mov	r3, fp
 800fe36:	4622      	mov	r2, r4
 800fe38:	4629      	mov	r1, r5
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	f7ff ff93 	bl	800fd66 <__sfputs_r>
 800fe40:	3001      	adds	r0, #1
 800fe42:	f000 80aa 	beq.w	800ff9a <_vfiprintf_r+0x20e>
 800fe46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe48:	445a      	add	r2, fp
 800fe4a:	9209      	str	r2, [sp, #36]	; 0x24
 800fe4c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 80a2 	beq.w	800ff9a <_vfiprintf_r+0x20e>
 800fe56:	2300      	movs	r3, #0
 800fe58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe60:	f10a 0a01 	add.w	sl, sl, #1
 800fe64:	9304      	str	r3, [sp, #16]
 800fe66:	9307      	str	r3, [sp, #28]
 800fe68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe6c:	931a      	str	r3, [sp, #104]	; 0x68
 800fe6e:	4654      	mov	r4, sl
 800fe70:	2205      	movs	r2, #5
 800fe72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe76:	4858      	ldr	r0, [pc, #352]	; (800ffd8 <_vfiprintf_r+0x24c>)
 800fe78:	f7f0 f9b2 	bl	80001e0 <memchr>
 800fe7c:	9a04      	ldr	r2, [sp, #16]
 800fe7e:	b9d8      	cbnz	r0, 800feb8 <_vfiprintf_r+0x12c>
 800fe80:	06d1      	lsls	r1, r2, #27
 800fe82:	bf44      	itt	mi
 800fe84:	2320      	movmi	r3, #32
 800fe86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe8a:	0713      	lsls	r3, r2, #28
 800fe8c:	bf44      	itt	mi
 800fe8e:	232b      	movmi	r3, #43	; 0x2b
 800fe90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe94:	f89a 3000 	ldrb.w	r3, [sl]
 800fe98:	2b2a      	cmp	r3, #42	; 0x2a
 800fe9a:	d015      	beq.n	800fec8 <_vfiprintf_r+0x13c>
 800fe9c:	9a07      	ldr	r2, [sp, #28]
 800fe9e:	4654      	mov	r4, sl
 800fea0:	2000      	movs	r0, #0
 800fea2:	f04f 0c0a 	mov.w	ip, #10
 800fea6:	4621      	mov	r1, r4
 800fea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feac:	3b30      	subs	r3, #48	; 0x30
 800feae:	2b09      	cmp	r3, #9
 800feb0:	d94e      	bls.n	800ff50 <_vfiprintf_r+0x1c4>
 800feb2:	b1b0      	cbz	r0, 800fee2 <_vfiprintf_r+0x156>
 800feb4:	9207      	str	r2, [sp, #28]
 800feb6:	e014      	b.n	800fee2 <_vfiprintf_r+0x156>
 800feb8:	eba0 0308 	sub.w	r3, r0, r8
 800febc:	fa09 f303 	lsl.w	r3, r9, r3
 800fec0:	4313      	orrs	r3, r2
 800fec2:	9304      	str	r3, [sp, #16]
 800fec4:	46a2      	mov	sl, r4
 800fec6:	e7d2      	b.n	800fe6e <_vfiprintf_r+0xe2>
 800fec8:	9b03      	ldr	r3, [sp, #12]
 800feca:	1d19      	adds	r1, r3, #4
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	9103      	str	r1, [sp, #12]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	bfbb      	ittet	lt
 800fed4:	425b      	neglt	r3, r3
 800fed6:	f042 0202 	orrlt.w	r2, r2, #2
 800feda:	9307      	strge	r3, [sp, #28]
 800fedc:	9307      	strlt	r3, [sp, #28]
 800fede:	bfb8      	it	lt
 800fee0:	9204      	strlt	r2, [sp, #16]
 800fee2:	7823      	ldrb	r3, [r4, #0]
 800fee4:	2b2e      	cmp	r3, #46	; 0x2e
 800fee6:	d10c      	bne.n	800ff02 <_vfiprintf_r+0x176>
 800fee8:	7863      	ldrb	r3, [r4, #1]
 800feea:	2b2a      	cmp	r3, #42	; 0x2a
 800feec:	d135      	bne.n	800ff5a <_vfiprintf_r+0x1ce>
 800feee:	9b03      	ldr	r3, [sp, #12]
 800fef0:	1d1a      	adds	r2, r3, #4
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	9203      	str	r2, [sp, #12]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	bfb8      	it	lt
 800fefa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fefe:	3402      	adds	r4, #2
 800ff00:	9305      	str	r3, [sp, #20]
 800ff02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ffe8 <_vfiprintf_r+0x25c>
 800ff06:	7821      	ldrb	r1, [r4, #0]
 800ff08:	2203      	movs	r2, #3
 800ff0a:	4650      	mov	r0, sl
 800ff0c:	f7f0 f968 	bl	80001e0 <memchr>
 800ff10:	b140      	cbz	r0, 800ff24 <_vfiprintf_r+0x198>
 800ff12:	2340      	movs	r3, #64	; 0x40
 800ff14:	eba0 000a 	sub.w	r0, r0, sl
 800ff18:	fa03 f000 	lsl.w	r0, r3, r0
 800ff1c:	9b04      	ldr	r3, [sp, #16]
 800ff1e:	4303      	orrs	r3, r0
 800ff20:	3401      	adds	r4, #1
 800ff22:	9304      	str	r3, [sp, #16]
 800ff24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff28:	482c      	ldr	r0, [pc, #176]	; (800ffdc <_vfiprintf_r+0x250>)
 800ff2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff2e:	2206      	movs	r2, #6
 800ff30:	f7f0 f956 	bl	80001e0 <memchr>
 800ff34:	2800      	cmp	r0, #0
 800ff36:	d03f      	beq.n	800ffb8 <_vfiprintf_r+0x22c>
 800ff38:	4b29      	ldr	r3, [pc, #164]	; (800ffe0 <_vfiprintf_r+0x254>)
 800ff3a:	bb1b      	cbnz	r3, 800ff84 <_vfiprintf_r+0x1f8>
 800ff3c:	9b03      	ldr	r3, [sp, #12]
 800ff3e:	3307      	adds	r3, #7
 800ff40:	f023 0307 	bic.w	r3, r3, #7
 800ff44:	3308      	adds	r3, #8
 800ff46:	9303      	str	r3, [sp, #12]
 800ff48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4a:	443b      	add	r3, r7
 800ff4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff4e:	e767      	b.n	800fe20 <_vfiprintf_r+0x94>
 800ff50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff54:	460c      	mov	r4, r1
 800ff56:	2001      	movs	r0, #1
 800ff58:	e7a5      	b.n	800fea6 <_vfiprintf_r+0x11a>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	3401      	adds	r4, #1
 800ff5e:	9305      	str	r3, [sp, #20]
 800ff60:	4619      	mov	r1, r3
 800ff62:	f04f 0c0a 	mov.w	ip, #10
 800ff66:	4620      	mov	r0, r4
 800ff68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff6c:	3a30      	subs	r2, #48	; 0x30
 800ff6e:	2a09      	cmp	r2, #9
 800ff70:	d903      	bls.n	800ff7a <_vfiprintf_r+0x1ee>
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d0c5      	beq.n	800ff02 <_vfiprintf_r+0x176>
 800ff76:	9105      	str	r1, [sp, #20]
 800ff78:	e7c3      	b.n	800ff02 <_vfiprintf_r+0x176>
 800ff7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff7e:	4604      	mov	r4, r0
 800ff80:	2301      	movs	r3, #1
 800ff82:	e7f0      	b.n	800ff66 <_vfiprintf_r+0x1da>
 800ff84:	ab03      	add	r3, sp, #12
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	462a      	mov	r2, r5
 800ff8a:	4b16      	ldr	r3, [pc, #88]	; (800ffe4 <_vfiprintf_r+0x258>)
 800ff8c:	a904      	add	r1, sp, #16
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f3af 8000 	nop.w
 800ff94:	4607      	mov	r7, r0
 800ff96:	1c78      	adds	r0, r7, #1
 800ff98:	d1d6      	bne.n	800ff48 <_vfiprintf_r+0x1bc>
 800ff9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff9c:	07d9      	lsls	r1, r3, #31
 800ff9e:	d405      	bmi.n	800ffac <_vfiprintf_r+0x220>
 800ffa0:	89ab      	ldrh	r3, [r5, #12]
 800ffa2:	059a      	lsls	r2, r3, #22
 800ffa4:	d402      	bmi.n	800ffac <_vfiprintf_r+0x220>
 800ffa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffa8:	f7ff fdb7 	bl	800fb1a <__retarget_lock_release_recursive>
 800ffac:	89ab      	ldrh	r3, [r5, #12]
 800ffae:	065b      	lsls	r3, r3, #25
 800ffb0:	f53f af12 	bmi.w	800fdd8 <_vfiprintf_r+0x4c>
 800ffb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffb6:	e711      	b.n	800fddc <_vfiprintf_r+0x50>
 800ffb8:	ab03      	add	r3, sp, #12
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	462a      	mov	r2, r5
 800ffbe:	4b09      	ldr	r3, [pc, #36]	; (800ffe4 <_vfiprintf_r+0x258>)
 800ffc0:	a904      	add	r1, sp, #16
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f000 f880 	bl	80100c8 <_printf_i>
 800ffc8:	e7e4      	b.n	800ff94 <_vfiprintf_r+0x208>
 800ffca:	bf00      	nop
 800ffcc:	08010d08 	.word	0x08010d08
 800ffd0:	08010d28 	.word	0x08010d28
 800ffd4:	08010ce8 	.word	0x08010ce8
 800ffd8:	08010d48 	.word	0x08010d48
 800ffdc:	08010d52 	.word	0x08010d52
 800ffe0:	00000000 	.word	0x00000000
 800ffe4:	0800fd67 	.word	0x0800fd67
 800ffe8:	08010d4e 	.word	0x08010d4e

0800ffec <_printf_common>:
 800ffec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff0:	4616      	mov	r6, r2
 800fff2:	4699      	mov	r9, r3
 800fff4:	688a      	ldr	r2, [r1, #8]
 800fff6:	690b      	ldr	r3, [r1, #16]
 800fff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fffc:	4293      	cmp	r3, r2
 800fffe:	bfb8      	it	lt
 8010000:	4613      	movlt	r3, r2
 8010002:	6033      	str	r3, [r6, #0]
 8010004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010008:	4607      	mov	r7, r0
 801000a:	460c      	mov	r4, r1
 801000c:	b10a      	cbz	r2, 8010012 <_printf_common+0x26>
 801000e:	3301      	adds	r3, #1
 8010010:	6033      	str	r3, [r6, #0]
 8010012:	6823      	ldr	r3, [r4, #0]
 8010014:	0699      	lsls	r1, r3, #26
 8010016:	bf42      	ittt	mi
 8010018:	6833      	ldrmi	r3, [r6, #0]
 801001a:	3302      	addmi	r3, #2
 801001c:	6033      	strmi	r3, [r6, #0]
 801001e:	6825      	ldr	r5, [r4, #0]
 8010020:	f015 0506 	ands.w	r5, r5, #6
 8010024:	d106      	bne.n	8010034 <_printf_common+0x48>
 8010026:	f104 0a19 	add.w	sl, r4, #25
 801002a:	68e3      	ldr	r3, [r4, #12]
 801002c:	6832      	ldr	r2, [r6, #0]
 801002e:	1a9b      	subs	r3, r3, r2
 8010030:	42ab      	cmp	r3, r5
 8010032:	dc26      	bgt.n	8010082 <_printf_common+0x96>
 8010034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010038:	1e13      	subs	r3, r2, #0
 801003a:	6822      	ldr	r2, [r4, #0]
 801003c:	bf18      	it	ne
 801003e:	2301      	movne	r3, #1
 8010040:	0692      	lsls	r2, r2, #26
 8010042:	d42b      	bmi.n	801009c <_printf_common+0xb0>
 8010044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010048:	4649      	mov	r1, r9
 801004a:	4638      	mov	r0, r7
 801004c:	47c0      	blx	r8
 801004e:	3001      	adds	r0, #1
 8010050:	d01e      	beq.n	8010090 <_printf_common+0xa4>
 8010052:	6823      	ldr	r3, [r4, #0]
 8010054:	68e5      	ldr	r5, [r4, #12]
 8010056:	6832      	ldr	r2, [r6, #0]
 8010058:	f003 0306 	and.w	r3, r3, #6
 801005c:	2b04      	cmp	r3, #4
 801005e:	bf08      	it	eq
 8010060:	1aad      	subeq	r5, r5, r2
 8010062:	68a3      	ldr	r3, [r4, #8]
 8010064:	6922      	ldr	r2, [r4, #16]
 8010066:	bf0c      	ite	eq
 8010068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801006c:	2500      	movne	r5, #0
 801006e:	4293      	cmp	r3, r2
 8010070:	bfc4      	itt	gt
 8010072:	1a9b      	subgt	r3, r3, r2
 8010074:	18ed      	addgt	r5, r5, r3
 8010076:	2600      	movs	r6, #0
 8010078:	341a      	adds	r4, #26
 801007a:	42b5      	cmp	r5, r6
 801007c:	d11a      	bne.n	80100b4 <_printf_common+0xc8>
 801007e:	2000      	movs	r0, #0
 8010080:	e008      	b.n	8010094 <_printf_common+0xa8>
 8010082:	2301      	movs	r3, #1
 8010084:	4652      	mov	r2, sl
 8010086:	4649      	mov	r1, r9
 8010088:	4638      	mov	r0, r7
 801008a:	47c0      	blx	r8
 801008c:	3001      	adds	r0, #1
 801008e:	d103      	bne.n	8010098 <_printf_common+0xac>
 8010090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010098:	3501      	adds	r5, #1
 801009a:	e7c6      	b.n	801002a <_printf_common+0x3e>
 801009c:	18e1      	adds	r1, r4, r3
 801009e:	1c5a      	adds	r2, r3, #1
 80100a0:	2030      	movs	r0, #48	; 0x30
 80100a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80100a6:	4422      	add	r2, r4
 80100a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80100ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80100b0:	3302      	adds	r3, #2
 80100b2:	e7c7      	b.n	8010044 <_printf_common+0x58>
 80100b4:	2301      	movs	r3, #1
 80100b6:	4622      	mov	r2, r4
 80100b8:	4649      	mov	r1, r9
 80100ba:	4638      	mov	r0, r7
 80100bc:	47c0      	blx	r8
 80100be:	3001      	adds	r0, #1
 80100c0:	d0e6      	beq.n	8010090 <_printf_common+0xa4>
 80100c2:	3601      	adds	r6, #1
 80100c4:	e7d9      	b.n	801007a <_printf_common+0x8e>
	...

080100c8 <_printf_i>:
 80100c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100cc:	460c      	mov	r4, r1
 80100ce:	4691      	mov	r9, r2
 80100d0:	7e27      	ldrb	r7, [r4, #24]
 80100d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80100d4:	2f78      	cmp	r7, #120	; 0x78
 80100d6:	4680      	mov	r8, r0
 80100d8:	469a      	mov	sl, r3
 80100da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100de:	d807      	bhi.n	80100f0 <_printf_i+0x28>
 80100e0:	2f62      	cmp	r7, #98	; 0x62
 80100e2:	d80a      	bhi.n	80100fa <_printf_i+0x32>
 80100e4:	2f00      	cmp	r7, #0
 80100e6:	f000 80d8 	beq.w	801029a <_printf_i+0x1d2>
 80100ea:	2f58      	cmp	r7, #88	; 0x58
 80100ec:	f000 80a3 	beq.w	8010236 <_printf_i+0x16e>
 80100f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80100f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80100f8:	e03a      	b.n	8010170 <_printf_i+0xa8>
 80100fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80100fe:	2b15      	cmp	r3, #21
 8010100:	d8f6      	bhi.n	80100f0 <_printf_i+0x28>
 8010102:	a001      	add	r0, pc, #4	; (adr r0, 8010108 <_printf_i+0x40>)
 8010104:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010108:	08010161 	.word	0x08010161
 801010c:	08010175 	.word	0x08010175
 8010110:	080100f1 	.word	0x080100f1
 8010114:	080100f1 	.word	0x080100f1
 8010118:	080100f1 	.word	0x080100f1
 801011c:	080100f1 	.word	0x080100f1
 8010120:	08010175 	.word	0x08010175
 8010124:	080100f1 	.word	0x080100f1
 8010128:	080100f1 	.word	0x080100f1
 801012c:	080100f1 	.word	0x080100f1
 8010130:	080100f1 	.word	0x080100f1
 8010134:	08010281 	.word	0x08010281
 8010138:	080101a5 	.word	0x080101a5
 801013c:	08010263 	.word	0x08010263
 8010140:	080100f1 	.word	0x080100f1
 8010144:	080100f1 	.word	0x080100f1
 8010148:	080102a3 	.word	0x080102a3
 801014c:	080100f1 	.word	0x080100f1
 8010150:	080101a5 	.word	0x080101a5
 8010154:	080100f1 	.word	0x080100f1
 8010158:	080100f1 	.word	0x080100f1
 801015c:	0801026b 	.word	0x0801026b
 8010160:	680b      	ldr	r3, [r1, #0]
 8010162:	1d1a      	adds	r2, r3, #4
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	600a      	str	r2, [r1, #0]
 8010168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801016c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010170:	2301      	movs	r3, #1
 8010172:	e0a3      	b.n	80102bc <_printf_i+0x1f4>
 8010174:	6825      	ldr	r5, [r4, #0]
 8010176:	6808      	ldr	r0, [r1, #0]
 8010178:	062e      	lsls	r6, r5, #24
 801017a:	f100 0304 	add.w	r3, r0, #4
 801017e:	d50a      	bpl.n	8010196 <_printf_i+0xce>
 8010180:	6805      	ldr	r5, [r0, #0]
 8010182:	600b      	str	r3, [r1, #0]
 8010184:	2d00      	cmp	r5, #0
 8010186:	da03      	bge.n	8010190 <_printf_i+0xc8>
 8010188:	232d      	movs	r3, #45	; 0x2d
 801018a:	426d      	negs	r5, r5
 801018c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010190:	485e      	ldr	r0, [pc, #376]	; (801030c <_printf_i+0x244>)
 8010192:	230a      	movs	r3, #10
 8010194:	e019      	b.n	80101ca <_printf_i+0x102>
 8010196:	f015 0f40 	tst.w	r5, #64	; 0x40
 801019a:	6805      	ldr	r5, [r0, #0]
 801019c:	600b      	str	r3, [r1, #0]
 801019e:	bf18      	it	ne
 80101a0:	b22d      	sxthne	r5, r5
 80101a2:	e7ef      	b.n	8010184 <_printf_i+0xbc>
 80101a4:	680b      	ldr	r3, [r1, #0]
 80101a6:	6825      	ldr	r5, [r4, #0]
 80101a8:	1d18      	adds	r0, r3, #4
 80101aa:	6008      	str	r0, [r1, #0]
 80101ac:	0628      	lsls	r0, r5, #24
 80101ae:	d501      	bpl.n	80101b4 <_printf_i+0xec>
 80101b0:	681d      	ldr	r5, [r3, #0]
 80101b2:	e002      	b.n	80101ba <_printf_i+0xf2>
 80101b4:	0669      	lsls	r1, r5, #25
 80101b6:	d5fb      	bpl.n	80101b0 <_printf_i+0xe8>
 80101b8:	881d      	ldrh	r5, [r3, #0]
 80101ba:	4854      	ldr	r0, [pc, #336]	; (801030c <_printf_i+0x244>)
 80101bc:	2f6f      	cmp	r7, #111	; 0x6f
 80101be:	bf0c      	ite	eq
 80101c0:	2308      	moveq	r3, #8
 80101c2:	230a      	movne	r3, #10
 80101c4:	2100      	movs	r1, #0
 80101c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101ca:	6866      	ldr	r6, [r4, #4]
 80101cc:	60a6      	str	r6, [r4, #8]
 80101ce:	2e00      	cmp	r6, #0
 80101d0:	bfa2      	ittt	ge
 80101d2:	6821      	ldrge	r1, [r4, #0]
 80101d4:	f021 0104 	bicge.w	r1, r1, #4
 80101d8:	6021      	strge	r1, [r4, #0]
 80101da:	b90d      	cbnz	r5, 80101e0 <_printf_i+0x118>
 80101dc:	2e00      	cmp	r6, #0
 80101de:	d04d      	beq.n	801027c <_printf_i+0x1b4>
 80101e0:	4616      	mov	r6, r2
 80101e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80101e6:	fb03 5711 	mls	r7, r3, r1, r5
 80101ea:	5dc7      	ldrb	r7, [r0, r7]
 80101ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101f0:	462f      	mov	r7, r5
 80101f2:	42bb      	cmp	r3, r7
 80101f4:	460d      	mov	r5, r1
 80101f6:	d9f4      	bls.n	80101e2 <_printf_i+0x11a>
 80101f8:	2b08      	cmp	r3, #8
 80101fa:	d10b      	bne.n	8010214 <_printf_i+0x14c>
 80101fc:	6823      	ldr	r3, [r4, #0]
 80101fe:	07df      	lsls	r7, r3, #31
 8010200:	d508      	bpl.n	8010214 <_printf_i+0x14c>
 8010202:	6923      	ldr	r3, [r4, #16]
 8010204:	6861      	ldr	r1, [r4, #4]
 8010206:	4299      	cmp	r1, r3
 8010208:	bfde      	ittt	le
 801020a:	2330      	movle	r3, #48	; 0x30
 801020c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010210:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010214:	1b92      	subs	r2, r2, r6
 8010216:	6122      	str	r2, [r4, #16]
 8010218:	f8cd a000 	str.w	sl, [sp]
 801021c:	464b      	mov	r3, r9
 801021e:	aa03      	add	r2, sp, #12
 8010220:	4621      	mov	r1, r4
 8010222:	4640      	mov	r0, r8
 8010224:	f7ff fee2 	bl	800ffec <_printf_common>
 8010228:	3001      	adds	r0, #1
 801022a:	d14c      	bne.n	80102c6 <_printf_i+0x1fe>
 801022c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010230:	b004      	add	sp, #16
 8010232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010236:	4835      	ldr	r0, [pc, #212]	; (801030c <_printf_i+0x244>)
 8010238:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	680e      	ldr	r6, [r1, #0]
 8010240:	061f      	lsls	r7, r3, #24
 8010242:	f856 5b04 	ldr.w	r5, [r6], #4
 8010246:	600e      	str	r6, [r1, #0]
 8010248:	d514      	bpl.n	8010274 <_printf_i+0x1ac>
 801024a:	07d9      	lsls	r1, r3, #31
 801024c:	bf44      	itt	mi
 801024e:	f043 0320 	orrmi.w	r3, r3, #32
 8010252:	6023      	strmi	r3, [r4, #0]
 8010254:	b91d      	cbnz	r5, 801025e <_printf_i+0x196>
 8010256:	6823      	ldr	r3, [r4, #0]
 8010258:	f023 0320 	bic.w	r3, r3, #32
 801025c:	6023      	str	r3, [r4, #0]
 801025e:	2310      	movs	r3, #16
 8010260:	e7b0      	b.n	80101c4 <_printf_i+0xfc>
 8010262:	6823      	ldr	r3, [r4, #0]
 8010264:	f043 0320 	orr.w	r3, r3, #32
 8010268:	6023      	str	r3, [r4, #0]
 801026a:	2378      	movs	r3, #120	; 0x78
 801026c:	4828      	ldr	r0, [pc, #160]	; (8010310 <_printf_i+0x248>)
 801026e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010272:	e7e3      	b.n	801023c <_printf_i+0x174>
 8010274:	065e      	lsls	r6, r3, #25
 8010276:	bf48      	it	mi
 8010278:	b2ad      	uxthmi	r5, r5
 801027a:	e7e6      	b.n	801024a <_printf_i+0x182>
 801027c:	4616      	mov	r6, r2
 801027e:	e7bb      	b.n	80101f8 <_printf_i+0x130>
 8010280:	680b      	ldr	r3, [r1, #0]
 8010282:	6826      	ldr	r6, [r4, #0]
 8010284:	6960      	ldr	r0, [r4, #20]
 8010286:	1d1d      	adds	r5, r3, #4
 8010288:	600d      	str	r5, [r1, #0]
 801028a:	0635      	lsls	r5, r6, #24
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	d501      	bpl.n	8010294 <_printf_i+0x1cc>
 8010290:	6018      	str	r0, [r3, #0]
 8010292:	e002      	b.n	801029a <_printf_i+0x1d2>
 8010294:	0671      	lsls	r1, r6, #25
 8010296:	d5fb      	bpl.n	8010290 <_printf_i+0x1c8>
 8010298:	8018      	strh	r0, [r3, #0]
 801029a:	2300      	movs	r3, #0
 801029c:	6123      	str	r3, [r4, #16]
 801029e:	4616      	mov	r6, r2
 80102a0:	e7ba      	b.n	8010218 <_printf_i+0x150>
 80102a2:	680b      	ldr	r3, [r1, #0]
 80102a4:	1d1a      	adds	r2, r3, #4
 80102a6:	600a      	str	r2, [r1, #0]
 80102a8:	681e      	ldr	r6, [r3, #0]
 80102aa:	6862      	ldr	r2, [r4, #4]
 80102ac:	2100      	movs	r1, #0
 80102ae:	4630      	mov	r0, r6
 80102b0:	f7ef ff96 	bl	80001e0 <memchr>
 80102b4:	b108      	cbz	r0, 80102ba <_printf_i+0x1f2>
 80102b6:	1b80      	subs	r0, r0, r6
 80102b8:	6060      	str	r0, [r4, #4]
 80102ba:	6863      	ldr	r3, [r4, #4]
 80102bc:	6123      	str	r3, [r4, #16]
 80102be:	2300      	movs	r3, #0
 80102c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102c4:	e7a8      	b.n	8010218 <_printf_i+0x150>
 80102c6:	6923      	ldr	r3, [r4, #16]
 80102c8:	4632      	mov	r2, r6
 80102ca:	4649      	mov	r1, r9
 80102cc:	4640      	mov	r0, r8
 80102ce:	47d0      	blx	sl
 80102d0:	3001      	adds	r0, #1
 80102d2:	d0ab      	beq.n	801022c <_printf_i+0x164>
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	079b      	lsls	r3, r3, #30
 80102d8:	d413      	bmi.n	8010302 <_printf_i+0x23a>
 80102da:	68e0      	ldr	r0, [r4, #12]
 80102dc:	9b03      	ldr	r3, [sp, #12]
 80102de:	4298      	cmp	r0, r3
 80102e0:	bfb8      	it	lt
 80102e2:	4618      	movlt	r0, r3
 80102e4:	e7a4      	b.n	8010230 <_printf_i+0x168>
 80102e6:	2301      	movs	r3, #1
 80102e8:	4632      	mov	r2, r6
 80102ea:	4649      	mov	r1, r9
 80102ec:	4640      	mov	r0, r8
 80102ee:	47d0      	blx	sl
 80102f0:	3001      	adds	r0, #1
 80102f2:	d09b      	beq.n	801022c <_printf_i+0x164>
 80102f4:	3501      	adds	r5, #1
 80102f6:	68e3      	ldr	r3, [r4, #12]
 80102f8:	9903      	ldr	r1, [sp, #12]
 80102fa:	1a5b      	subs	r3, r3, r1
 80102fc:	42ab      	cmp	r3, r5
 80102fe:	dcf2      	bgt.n	80102e6 <_printf_i+0x21e>
 8010300:	e7eb      	b.n	80102da <_printf_i+0x212>
 8010302:	2500      	movs	r5, #0
 8010304:	f104 0619 	add.w	r6, r4, #25
 8010308:	e7f5      	b.n	80102f6 <_printf_i+0x22e>
 801030a:	bf00      	nop
 801030c:	08010d59 	.word	0x08010d59
 8010310:	08010d6a 	.word	0x08010d6a

08010314 <_sbrk_r>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	4d06      	ldr	r5, [pc, #24]	; (8010330 <_sbrk_r+0x1c>)
 8010318:	2300      	movs	r3, #0
 801031a:	4604      	mov	r4, r0
 801031c:	4608      	mov	r0, r1
 801031e:	602b      	str	r3, [r5, #0]
 8010320:	f7f2 fbd4 	bl	8002acc <_sbrk>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	d102      	bne.n	801032e <_sbrk_r+0x1a>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	b103      	cbz	r3, 801032e <_sbrk_r+0x1a>
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	bd38      	pop	{r3, r4, r5, pc}
 8010330:	20010660 	.word	0x20010660

08010334 <__sread>:
 8010334:	b510      	push	{r4, lr}
 8010336:	460c      	mov	r4, r1
 8010338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801033c:	f000 f8a0 	bl	8010480 <_read_r>
 8010340:	2800      	cmp	r0, #0
 8010342:	bfab      	itete	ge
 8010344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010346:	89a3      	ldrhlt	r3, [r4, #12]
 8010348:	181b      	addge	r3, r3, r0
 801034a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801034e:	bfac      	ite	ge
 8010350:	6563      	strge	r3, [r4, #84]	; 0x54
 8010352:	81a3      	strhlt	r3, [r4, #12]
 8010354:	bd10      	pop	{r4, pc}

08010356 <__swrite>:
 8010356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035a:	461f      	mov	r7, r3
 801035c:	898b      	ldrh	r3, [r1, #12]
 801035e:	05db      	lsls	r3, r3, #23
 8010360:	4605      	mov	r5, r0
 8010362:	460c      	mov	r4, r1
 8010364:	4616      	mov	r6, r2
 8010366:	d505      	bpl.n	8010374 <__swrite+0x1e>
 8010368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801036c:	2302      	movs	r3, #2
 801036e:	2200      	movs	r2, #0
 8010370:	f000 f868 	bl	8010444 <_lseek_r>
 8010374:	89a3      	ldrh	r3, [r4, #12]
 8010376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801037a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801037e:	81a3      	strh	r3, [r4, #12]
 8010380:	4632      	mov	r2, r6
 8010382:	463b      	mov	r3, r7
 8010384:	4628      	mov	r0, r5
 8010386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801038a:	f000 b817 	b.w	80103bc <_write_r>

0801038e <__sseek>:
 801038e:	b510      	push	{r4, lr}
 8010390:	460c      	mov	r4, r1
 8010392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010396:	f000 f855 	bl	8010444 <_lseek_r>
 801039a:	1c43      	adds	r3, r0, #1
 801039c:	89a3      	ldrh	r3, [r4, #12]
 801039e:	bf15      	itete	ne
 80103a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80103a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103aa:	81a3      	strheq	r3, [r4, #12]
 80103ac:	bf18      	it	ne
 80103ae:	81a3      	strhne	r3, [r4, #12]
 80103b0:	bd10      	pop	{r4, pc}

080103b2 <__sclose>:
 80103b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b6:	f000 b813 	b.w	80103e0 <_close_r>
	...

080103bc <_write_r>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4d07      	ldr	r5, [pc, #28]	; (80103dc <_write_r+0x20>)
 80103c0:	4604      	mov	r4, r0
 80103c2:	4608      	mov	r0, r1
 80103c4:	4611      	mov	r1, r2
 80103c6:	2200      	movs	r2, #0
 80103c8:	602a      	str	r2, [r5, #0]
 80103ca:	461a      	mov	r2, r3
 80103cc:	f7f2 fb2d 	bl	8002a2a <_write>
 80103d0:	1c43      	adds	r3, r0, #1
 80103d2:	d102      	bne.n	80103da <_write_r+0x1e>
 80103d4:	682b      	ldr	r3, [r5, #0]
 80103d6:	b103      	cbz	r3, 80103da <_write_r+0x1e>
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	bd38      	pop	{r3, r4, r5, pc}
 80103dc:	20010660 	.word	0x20010660

080103e0 <_close_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d06      	ldr	r5, [pc, #24]	; (80103fc <_close_r+0x1c>)
 80103e4:	2300      	movs	r3, #0
 80103e6:	4604      	mov	r4, r0
 80103e8:	4608      	mov	r0, r1
 80103ea:	602b      	str	r3, [r5, #0]
 80103ec:	f7f2 fb39 	bl	8002a62 <_close>
 80103f0:	1c43      	adds	r3, r0, #1
 80103f2:	d102      	bne.n	80103fa <_close_r+0x1a>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	b103      	cbz	r3, 80103fa <_close_r+0x1a>
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	20010660 	.word	0x20010660

08010400 <_fstat_r>:
 8010400:	b538      	push	{r3, r4, r5, lr}
 8010402:	4d07      	ldr	r5, [pc, #28]	; (8010420 <_fstat_r+0x20>)
 8010404:	2300      	movs	r3, #0
 8010406:	4604      	mov	r4, r0
 8010408:	4608      	mov	r0, r1
 801040a:	4611      	mov	r1, r2
 801040c:	602b      	str	r3, [r5, #0]
 801040e:	f7f2 fb34 	bl	8002a7a <_fstat>
 8010412:	1c43      	adds	r3, r0, #1
 8010414:	d102      	bne.n	801041c <_fstat_r+0x1c>
 8010416:	682b      	ldr	r3, [r5, #0]
 8010418:	b103      	cbz	r3, 801041c <_fstat_r+0x1c>
 801041a:	6023      	str	r3, [r4, #0]
 801041c:	bd38      	pop	{r3, r4, r5, pc}
 801041e:	bf00      	nop
 8010420:	20010660 	.word	0x20010660

08010424 <_isatty_r>:
 8010424:	b538      	push	{r3, r4, r5, lr}
 8010426:	4d06      	ldr	r5, [pc, #24]	; (8010440 <_isatty_r+0x1c>)
 8010428:	2300      	movs	r3, #0
 801042a:	4604      	mov	r4, r0
 801042c:	4608      	mov	r0, r1
 801042e:	602b      	str	r3, [r5, #0]
 8010430:	f7f2 fb33 	bl	8002a9a <_isatty>
 8010434:	1c43      	adds	r3, r0, #1
 8010436:	d102      	bne.n	801043e <_isatty_r+0x1a>
 8010438:	682b      	ldr	r3, [r5, #0]
 801043a:	b103      	cbz	r3, 801043e <_isatty_r+0x1a>
 801043c:	6023      	str	r3, [r4, #0]
 801043e:	bd38      	pop	{r3, r4, r5, pc}
 8010440:	20010660 	.word	0x20010660

08010444 <_lseek_r>:
 8010444:	b538      	push	{r3, r4, r5, lr}
 8010446:	4d07      	ldr	r5, [pc, #28]	; (8010464 <_lseek_r+0x20>)
 8010448:	4604      	mov	r4, r0
 801044a:	4608      	mov	r0, r1
 801044c:	4611      	mov	r1, r2
 801044e:	2200      	movs	r2, #0
 8010450:	602a      	str	r2, [r5, #0]
 8010452:	461a      	mov	r2, r3
 8010454:	f7f2 fb2c 	bl	8002ab0 <_lseek>
 8010458:	1c43      	adds	r3, r0, #1
 801045a:	d102      	bne.n	8010462 <_lseek_r+0x1e>
 801045c:	682b      	ldr	r3, [r5, #0]
 801045e:	b103      	cbz	r3, 8010462 <_lseek_r+0x1e>
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	bd38      	pop	{r3, r4, r5, pc}
 8010464:	20010660 	.word	0x20010660

08010468 <__malloc_lock>:
 8010468:	4801      	ldr	r0, [pc, #4]	; (8010470 <__malloc_lock+0x8>)
 801046a:	f7ff bb55 	b.w	800fb18 <__retarget_lock_acquire_recursive>
 801046e:	bf00      	nop
 8010470:	20010658 	.word	0x20010658

08010474 <__malloc_unlock>:
 8010474:	4801      	ldr	r0, [pc, #4]	; (801047c <__malloc_unlock+0x8>)
 8010476:	f7ff bb50 	b.w	800fb1a <__retarget_lock_release_recursive>
 801047a:	bf00      	nop
 801047c:	20010658 	.word	0x20010658

08010480 <_read_r>:
 8010480:	b538      	push	{r3, r4, r5, lr}
 8010482:	4d07      	ldr	r5, [pc, #28]	; (80104a0 <_read_r+0x20>)
 8010484:	4604      	mov	r4, r0
 8010486:	4608      	mov	r0, r1
 8010488:	4611      	mov	r1, r2
 801048a:	2200      	movs	r2, #0
 801048c:	602a      	str	r2, [r5, #0]
 801048e:	461a      	mov	r2, r3
 8010490:	f7f2 faae 	bl	80029f0 <_read>
 8010494:	1c43      	adds	r3, r0, #1
 8010496:	d102      	bne.n	801049e <_read_r+0x1e>
 8010498:	682b      	ldr	r3, [r5, #0]
 801049a:	b103      	cbz	r3, 801049e <_read_r+0x1e>
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	bd38      	pop	{r3, r4, r5, pc}
 80104a0:	20010660 	.word	0x20010660

080104a4 <_init>:
 80104a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a6:	bf00      	nop
 80104a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104aa:	bc08      	pop	{r3}
 80104ac:	469e      	mov	lr, r3
 80104ae:	4770      	bx	lr

080104b0 <_fini>:
 80104b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b2:	bf00      	nop
 80104b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b6:	bc08      	pop	{r3}
 80104b8:	469e      	mov	lr, r3
 80104ba:	4770      	bx	lr
